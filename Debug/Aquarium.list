
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001407c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ce18  08014240  08014240  00024240  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021058  08021058  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08021058  08021058  00031058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021060  08021060  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021060  08021060  00031060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021064  08021064  00031064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08021068  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad2c  20000240  0802129c  00040240  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000af6c  0802129c  0004af6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0a8  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006364  00000000  00000000  0006e30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da8  00000000  00000000  00074670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ac8  00000000  00000000  00076418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fac5  00000000  00000000  00077ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021092  00000000  00000000  000979a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc19  00000000  00000000  000b8a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008624  00000000  00000000  001566cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014204 	.word	0x08014204

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	08014204 	.word	0x08014204

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:
#include "ap.h"

void lcdMain(void);

void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fcbf 	bl	8001944 <cliOpen>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <apMain>:

void apMain(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fd0:	f000 f91b 	bl	800120a <millis>
 8000fd4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fd6:	f000 f918 	bl	800120a <millis>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d302      	bcc.n	8000fec <apMain+0x22>
    {
      pre_time = millis();
 8000fe6:	f000 f910 	bl	800120a <millis>
 8000fea:	6078      	str	r0, [r7, #4]

    }
    //Ds18b20_ManualConvert();

    Sonar_measure();
 8000fec:	f003 ff88 	bl	8004f00 <Sonar_measure>
    tds_measure();
 8000ff0:	f004 fc52 	bl	8005898 <tds_measure>

    if(buttonGetPressed(_DEF_BUTTON1))
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fba1 	bl	800173c <buttonGetPressed>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <apMain+0x3e>
    {
    	ledOn(_DEF_LED1);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 ffdd 	bl	8003fc0 <ledOn>
 8001006:	e002      	b.n	800100e <apMain+0x44>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001008:	2000      	movs	r0, #0
 800100a:	f002 fff9 	bl	8004000 <ledOff>
    }
    cliMain();
 800100e:	f000 fd51 	bl	8001ab4 <cliMain>
    lcdMain();
 8001012:	f000 f801 	bl	8001018 <lcdMain>
    if (millis()-pre_time >= 1000)
 8001016:	e7de      	b.n	8000fd6 <apMain+0xc>

08001018 <lcdMain>:
  }
}


void lcdMain(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 800101e:	f002 f96b 	bl	80032f8 <lcdIsInit>
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 809f 	bne.w	800116e <lcdMain+0x156>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 8001030:	f002 fb9a 	bl	8003768 <lcdDrawAvailable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 809a 	beq.w	8001170 <lcdMain+0x158>
  {
      lcdClearBuffer(black);
 800103c:	2000      	movs	r0, #0
 800103e:	f002 f999 	bl	8003374 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 8001042:	2003      	movs	r0, #3
 8001044:	f002 fed8 	bl	8003df8 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <lcdMain+0x15c>)
 800104a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f002 fd3d 	bl	8003ad0 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001056:	f002 fb6f 	bl	8003738 <lcdGetFps>
 800105a:	4603      	mov	r3, r0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <lcdMain+0x160>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	2110      	movs	r1, #16
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fd32 	bl	8003ad0 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 800106c:	f002 fb70 	bl	8003750 <lcdGetFpsTime>
 8001070:	4603      	mov	r3, r0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <lcdMain+0x164>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	2120      	movs	r1, #32
 800107c:	2000      	movs	r0, #0
 800107e:	f002 fd27 	bl	8003ad0 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 8001082:	f000 f8c2 	bl	800120a <millis>
 8001086:	4603      	mov	r3, r0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <lcdMain+0x164>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	2000      	movs	r0, #0
 8001094:	f002 fd1c 	bl	8003ad0 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2305      	movs	r3, #5
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2311      	movs	r3, #17
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	2110      	movs	r1, #16
 80010a8:	2046      	movs	r0, #70	; 0x46
 80010aa:	f002 fa11 	bl	80034d0 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, blue);
 80010ae:	231f      	movs	r3, #31
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2305      	movs	r3, #5
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	230f      	movs	r3, #15
 80010b8:	2232      	movs	r2, #50	; 0x32
 80010ba:	2111      	movs	r1, #17
 80010bc:	2047      	movs	r0, #71	; 0x47
 80010be:	f002 fb08 	bl	80036d2 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 fe98 	bl	8003df8 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <lcdMain+0x168>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	2115      	movs	r1, #21
 80010d0:	204b      	movs	r0, #75	; 0x4b
 80010d2:	f002 fcfd 	bl	8003ad0 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f002 fe8e 	bl	8003df8 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3d 도" , (int32_t) ds18b20[0].Temperature);
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <lcdMain+0x16c>)
 80010de:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <lcdMain+0x170>)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 fceb 	bl	8003ad0 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <lcdMain+0x174>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <lcdMain+0x178>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <lcdMain+0x17c>)
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	2150      	movs	r1, #80	; 0x50
 8001110:	2000      	movs	r0, #0
 8001112:	f002 fcdd 	bl	8003ad0 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4d ppm" , (int32_t) tds_tbl[0].filter_tdsValue);
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <lcdMain+0x180>)
 8001118:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <lcdMain+0x184>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	2160      	movs	r1, #96	; 0x60
 800112e:	2000      	movs	r0, #0
 8001130:	f002 fcce 	bl	8003ad0 <lcdPrintf>

      lcdDrawFillRect( 0, 118, 10, 10, red);
 8001134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	230a      	movs	r3, #10
 800113c:	220a      	movs	r2, #10
 800113e:	2176      	movs	r1, #118	; 0x76
 8001140:	2000      	movs	r0, #0
 8001142:	f002 fc96 	bl	8003a72 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 8001146:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230a      	movs	r3, #10
 800114e:	220a      	movs	r2, #10
 8001150:	2176      	movs	r1, #118	; 0x76
 8001152:	200a      	movs	r0, #10
 8001154:	f002 fc8d 	bl	8003a72 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 8001158:	231f      	movs	r3, #31
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230a      	movs	r3, #10
 800115e:	220a      	movs	r2, #10
 8001160:	2176      	movs	r1, #118	; 0x76
 8001162:	2014      	movs	r0, #20
 8001164:	f002 fc85 	bl	8003a72 <lcdDrawFillRect>

      lcdRequestDraw();
 8001168:	f002 fb14 	bl	8003794 <lcdRequestDraw>
 800116c:	e000      	b.n	8001170 <lcdMain+0x158>
    return;
 800116e:	bf00      	nop
  }
}
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08014240 	.word	0x08014240
 8001178:	0801425c 	.word	0x0801425c
 800117c:	08014264 	.word	0x08014264
 8001180:	0801426c 	.word	0x0801426c
 8001184:	2000a8e8 	.word	0x2000a8e8
 8001188:	08014274 	.word	0x08014274
 800118c:	2000a2c4 	.word	0x2000a2c4
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	08014288 	.word	0x08014288
 8001198:	2000ad94 	.word	0x2000ad94
 800119c:	0801429c 	.word	0x0801429c

080011a0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_Init();
 80011a6:	f009 ff3d 	bl	800b024 <HAL_Init>
  SystemClock_Config();
 80011aa:	f000 f835 	bl	8001218 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <bspInit+0x50>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <bspInit+0x50>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <bspInit+0x50>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <bspInit+0x50>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <bspInit+0x50>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <bspInit+0x50>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <delay>:

void delay(uint32_t ms)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f009 ff83 	bl	800b108 <HAL_Delay>
#endif
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <millis>:

uint32_t millis(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800120e:	f009 ff6f 	bl	800b0f0 <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f010 fd33 	bl	8011c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <SystemClock_Config+0xc8>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <SystemClock_Config+0xcc>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <SystemClock_Config+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001288:	2319      	movs	r3, #25
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800128c:	23c0      	movs	r3, #192	; 0xc0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f00b fc7b 	bl	800cb98 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a8:	f000 f81e 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00b fed5 	bl	800d078 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d4:	f000 f808 	bl	80012e8 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	; 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x6>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f009 fe9c 	bl	800b0c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ADC_IRQHandler+0x10>)
 800139a:	f009 ff1a 	bl	800b1d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000adbc 	.word	0x2000adbc

080013a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM3_IRQHandler+0x10>)
 80013ae:	f00e f927 	bl	800f600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000ac88 	.word	0x2000ac88

080013bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <SPI1_IRQHandler+0x10>)
 80013c2:	f00d fe09 	bl	800efd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000acdc 	.word	0x2000acdc

080013d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART1_IRQHandler+0x10>)
 80013d6:	f00f f809 	bl	80103ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000af24 	.word	0x2000af24

080013e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <SDIO_IRQHandler+0x10>)
 80013ea:	f00c fa7b 	bl	800d8e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000ac04 	.word	0x2000ac04

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f00a fea7 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000ae04 	.word	0x2000ae04

0800140c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA2_Stream2_IRQHandler+0x10>)
 8001412:	f00a fe9d 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000aec4 	.word	0x2000aec4

08001420 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Stream3_IRQHandler+0x10>)
 8001426:	f00a fe93 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000aba4 	.word	0x2000aba4

08001434 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Stream5_IRQHandler+0x10>)
 800143a:	f00a fe89 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000ad34 	.word	0x2000ad34

08001448 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2_Stream6_IRQHandler+0x10>)
 800144e:	f00a fe7f 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000ab44 	.word	0x2000ab44

0800145c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream7_IRQHandler+0x10>)
 8001462:	f00a fe75 	bl	800c150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000ae64 	.word	0x2000ae64

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f010 fbb2 	bl	8011c08 <__errno>
 80014a4:	4602      	mov	r2, r0
 80014a6:	230c      	movs	r3, #12
 80014a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	2000025c 	.word	0x2000025c
 80014d8:	2000af70 	.word	0x2000af70

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x28>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x28>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0x28>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f6:	609a      	str	r2, [r3, #8]
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd3 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f010 fb6d 	bl	8011c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f010 fb59 	bl	8011bf0 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	08021068 	.word	0x08021068
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8001550:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8001554:	2000af6c 	.word	0x2000af6c

08001558 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <DMA1_Stream0_IRQHandler>

0800155a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	60da      	str	r2, [r3, #12]

  return ret;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e026      	b.n	80015f4 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	441a      	add	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	440b      	add	r3, r1
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d00c      	beq.n	80015e8 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6892      	ldr	r2, [r2, #8]
 80015d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015dc:	fb02 f201 	mul.w	r2, r2, r1
 80015e0:	1a9a      	subs	r2, r3, r2
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	e002      	b.n	80015ee <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
      break;
 80015ec:	e006      	b.n	80015fc <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3301      	adds	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8d4      	bhi.n	80015a6 <qbufferRead+0x16>
    }
  }

  return ret;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6892      	ldr	r2, [r2, #8]
 8001620:	fbb3 f1f2 	udiv	r1, r3, r2
 8001624:	fb02 f201 	mul.w	r2, r2, r1
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

  return ret;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <DWT_Delay_Init+0x58>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <DWT_Delay_Init+0x58>)
 8001646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DWT_Delay_Init+0x58>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <DWT_Delay_Init+0x58>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <DWT_Delay_Init+0x5c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001676:	bf00      	nop
     __ASM volatile ("NOP");
 8001678:	bf00      	nop
     __ASM volatile ("NOP");
 800167a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <DWT_Delay_Init+0x5c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001688:	2301      	movs	r3, #1
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000edf0 	.word	0xe000edf0
 8001698:	e0001000 	.word	0xe0001000

0800169c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  bool ret = true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <buttonInit+0x90>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <buttonInit+0x90>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <buttonInit+0x90>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	e019      	b.n	8001712 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <buttonInit+0x94>)
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <buttonInit+0x94>)
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f00a ff96 	bl	800c638 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dde2      	ble.n	80016de <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <buttonInit+0x98>)
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <buttonInit+0x9c>)
 800171c:	f000 feea 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8001720:	7efb      	ldrb	r3, [r7, #27]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	20000004 	.word	0x20000004
 8001734:	0800181d 	.word	0x0800181d
 8001738:	080142ac 	.word	0x080142ac

0800173c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <buttonGetPressed+0xdc>)
 8001756:	4413      	add	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <buttonGetPressed+0x28>
  {
    return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e054      	b.n	800180e <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	7a9b      	ldrb	r3, [r3, #10]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <buttonGetPressed+0x36>
 800176c:	2b01      	cmp	r3, #1
 800176e:	d018      	beq.n	80017a2 <buttonGetPressed+0x66>
 8001770:	e04c      	b.n	800180c <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f00b f9be 	bl	800cb00 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d13a      	bne.n	8001806 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8001790:	f7ff fd3b 	bl	800120a <millis>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2201      	movs	r2, #1
 800179e:	729a      	strb	r2, [r3, #10]
  		  }
  		  break;
 80017a0:	e031      	b.n	8001806 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f00b f9a6 	bl	800cb00 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	7a1b      	ldrb	r3, [r3, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d114      	bne.n	80017ea <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80017c0:	f7ff fd23 	bl	800120a <millis>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	1ad2      	subs	r2, r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d91a      	bls.n	800180a <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2201      	movs	r2, #1
 80017d8:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	7a5b      	ldrb	r3, [r3, #9]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 80017e8:	e00f      	b.n	800180a <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	7a5b      	ldrb	r3, [r3, #9]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
		  break;
 8001804:	e001      	b.n	800180a <buttonGetPressed+0xce>
  		  break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <buttonGetPressed+0xd0>
		  break;
 800180a:	bf00      	nop
  }
  return ret;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004

0800181c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d128      	bne.n	8001882 <cliButton+0x66>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4919      	ldr	r1, [pc, #100]	; (800189c <cliButton+0x80>)
 8001836:	2000      	movs	r0, #0
 8001838:	4798      	blx	r3
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001840:	e018      	b.n	8001874 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	e00c      	b.n	8001862 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff75 	bl	800173c <buttonGetPressed>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <cliButton+0x84>)
 8001858:	f000 fd3c 	bl	80022d4 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3301      	adds	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	ddef      	ble.n	8001848 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <cliButton+0x88>)
 800186a:	f000 fd33 	bl	80022d4 <cliPrintf>

      delay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f7ff fcc0 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8001874:	f000 fe28 	bl	80024c8 <cliKeepLoop>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e1      	bne.n	8001842 <cliButton+0x26>
    }

    ret = true;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <cliButton+0x8c>)
 8001890:	f000 fd20 	bl	80022d4 <cliPrintf>
  }
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	080142b4 	.word	0x080142b4
 80018a0:	080142bc 	.word	0x080142bc
 80018a4:	080142c0 	.word	0x080142c0
 80018a8:	080142c4 	.word	0x080142c4

080018ac <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <cliInit+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <cliInit+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <cliInit+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <cliInit+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <cliInit+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <cliInit+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <cliInit+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <cliInit+0x74>)
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <cliInit+0x78>)
 80018e6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <cliInit+0x74>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <cliInit+0x7c>)
 80018ee:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <cliInit+0x74>)
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <cliInit+0x80>)
 80018f6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <cliInit+0x74>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <cliInit+0x84>)
 80018fe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <cliInit+0x74>)
 8001904:	f000 fb5c 	bl	8001fc0 <cliLineClean>


  cliAdd("help", cliShowList);
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <cliInit+0x88>)
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <cliInit+0x8c>)
 800190c:	f000 fdf2 	bl	80024f4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001910:	490a      	ldr	r1, [pc, #40]	; (800193c <cliInit+0x90>)
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <cliInit+0x94>)
 8001914:	f000 fdee 	bl	80024f4 <cliAdd>

  return true;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000a4a0 	.word	0x2000a4a0
 8001924:	08002385 	.word	0x08002385
 8001928:	080023d5 	.word	0x080023d5
 800192c:	0800242d 	.word	0x0800242d
 8001930:	08002475 	.word	0x08002475
 8001934:	08002589 	.word	0x08002589
 8001938:	080142d4 	.word	0x080142d4
 800193c:	080025f9 	.word	0x080025f9
 8001940:	080142dc 	.word	0x080142dc

08001944 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <cliOpen+0x38>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <cliOpen+0x38>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f004 f97b 	bl	8005c5c <uartOpen>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <cliOpen+0x38>)
 800196c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <cliOpen+0x38>)
 8001970:	7a1b      	ldrb	r3, [r3, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000a4a0 	.word	0x2000a4a0

08001980 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <cliShowLog+0xdc>)
 800198a:	7a5b      	ldrb	r3, [r3, #9]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d061      	beq.n	8001a54 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a98      	ldrb	r0, [r3, #10]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800199a:	461a      	mov	r2, r3
 800199c:	4930      	ldr	r1, [pc, #192]	; (8001a60 <cliShowLog+0xe0>)
 800199e:	f004 fb13 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a98      	ldrb	r0, [r3, #10]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80019ac:	461a      	mov	r2, r3
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <cliShowLog+0xe4>)
 80019b0:	f004 fb0a 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a98      	ldrb	r0, [r3, #10]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80019be:	461a      	mov	r2, r3
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <cliShowLog+0xe8>)
 80019c2:	f004 fb01 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7a98      	ldrb	r0, [r3, #10]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80019d0:	461a      	mov	r2, r3
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <cliShowLog+0xec>)
 80019d4:	f004 faf8 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a98      	ldrb	r0, [r3, #10]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019e2:	461a      	mov	r2, r3
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <cliShowLog+0xf0>)
 80019e6:	f004 faef 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7a98      	ldrb	r0, [r3, #10]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019f4:	461a      	mov	r2, r3
 80019f6:	491f      	ldr	r1, [pc, #124]	; (8001a74 <cliShowLog+0xf4>)
 80019f8:	f004 fae6 	bl	8005fc8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a98      	ldrb	r0, [r3, #10]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a06:	461a      	mov	r2, r3
 8001a08:	491b      	ldr	r1, [pc, #108]	; (8001a78 <cliShowLog+0xf8>)
 8001a0a:	f004 fadd 	bl	8005fc8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e012      	b.n	8001a3a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a98      	ldrb	r0, [r3, #10]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <cliShowLog+0xfc>)
 8001a30:	f004 faca 	bl	8005fc8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	dbe5      	blt.n	8001a14 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a9b      	ldrb	r3, [r3, #10]
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <cliShowLog+0x100>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 faba 	bl	8005fc8 <uartPrintf>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a4a0 	.word	0x2000a4a0
 8001a60:	080142e0 	.word	0x080142e0
 8001a64:	080142f0 	.word	0x080142f0
 8001a68:	08014300 	.word	0x08014300
 8001a6c:	08014310 	.word	0x08014310
 8001a70:	08014320 	.word	0x08014320
 8001a74:	08014330 	.word	0x08014330
 8001a78:	08014340 	.word	0x08014340
 8001a7c:	08014350 	.word	0x08014350
 8001a80:	08014360 	.word	0x08014360

08001a84 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <cliShowPrompt+0x28>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fa98 	bl	8005fc8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <cliShowPrompt+0x2c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fa92 	bl	8005fc8 <uartPrintf>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08014364 	.word	0x08014364
 8001ab0:	08014368 	.word	0x08014368

08001ab4 <cliMain>:

bool cliMain(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <cliMain+0x40>)
 8001aba:	7a1b      	ldrb	r3, [r3, #8]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <cliMain+0x16>
  {
    return false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e012      	b.n	8001af0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <cliMain+0x40>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 f9d6 	bl	8005e80 <uartAvailable>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <cliMain+0x40>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fa14 	bl	8005f0c <uartRead>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <cliMain+0x40>)
 8001aea:	f000 f805 	bl	8001af8 <cliUpdate>
  }

  return true;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000a4a0 	.word	0x2000a4a0

08001af8 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001b10:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7c1b      	ldrb	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8165 	bne.w	8001de6 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b0d      	cmp	r3, #13
 8001b20:	d009      	beq.n	8001b36 <cliUpdate+0x3e>
 8001b22:	2b0d      	cmp	r3, #13
 8001b24:	dc02      	bgt.n	8001b2c <cliUpdate+0x34>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d065      	beq.n	8001bf6 <cliUpdate+0xfe>
 8001b2a:	e0d4      	b.n	8001cd6 <cliUpdate+0x1de>
 8001b2c:	2b1b      	cmp	r3, #27
 8001b2e:	d01c      	beq.n	8001b6a <cliUpdate+0x72>
 8001b30:	2b7f      	cmp	r3, #127	; 0x7f
 8001b32:	d01e      	beq.n	8001b72 <cliUpdate+0x7a>
 8001b34:	e0cf      	b.n	8001cd6 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa57 	bl	8001ff4 <cliLineAdd>
          cliRunCmd(p_cli);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fb22 	bl	8002190 <cliRunCmd>
        }

        line->count = 0;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff8e 	bl	8001a84 <cliShowPrompt>
        break;
 8001b68:	e144      	b.n	8001df4 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	741a      	strb	r2, [r3, #16]
        break;
 8001b70:	e140      	b.n	8001df4 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	f080 8133 	bcs.w	8001dea <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b94:	2301      	movs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	e013      	b.n	8001bc2 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	441a      	add	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	4619      	mov	r1, r3
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	69f9      	ldr	r1, [r7, #28]
 8001bb6:	5c89      	ldrb	r1, [r1, r2]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbe7      	blt.n	8001b9a <cliUpdate+0xa2>
          }

          line->count--;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be0:	461a      	mov	r2, r3
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	498e      	ldr	r1, [pc, #568]	; (8001e28 <cliUpdate+0x330>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 f9ea 	bl	8005fc8 <uartPrintf>
        }
        break;
 8001bf4:	e0f9      	b.n	8001dea <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d055      	beq.n	8001cac <cliUpdate+0x1b4>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d050      	beq.n	8001cac <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10e      	bne.n	8001c38 <cliUpdate+0x140>
          {
            line->count--;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c30:	461a      	mov	r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d231      	bcs.n	8001cac <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	e013      	b.n	8001c86 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c64:	461a      	mov	r2, r3
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	441a      	add	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	4619      	mov	r1, r3
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	440b      	add	r3, r1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	5c89      	ldrb	r1, [r1, r2]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	3301      	adds	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	7ebb      	ldrb	r3, [r7, #26]
 8001c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbe7      	blt.n	8001c5e <cliUpdate+0x166>
            }

            line->count--;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 809b 	beq.w	8001dee <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4957      	ldr	r1, [pc, #348]	; (8001e2c <cliUpdate+0x334>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 f97a 	bl	8005fc8 <uartPrintf>
        }
        break;
 8001cd4:	e08b      	b.n	8001dee <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cdc:	3301      	adds	r3, #1
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	f280 8084 	bge.w	8001df2 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d124      	bne.n	8001d44 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	1cf9      	adds	r1, r7, #3
 8001d00:	2201      	movs	r2, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 f928 	bl	8005f58 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	461a      	mov	r2, r3
 8001d10:	78f9      	ldrb	r1, [r7, #3]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d24e      	bcs.n	8001df2 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e013      	b.n	8001d92 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	5c89      	ldrb	r1, [r1, r2]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	7e7b      	ldrb	r3, [r7, #25]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbe7      	blt.n	8001d6a <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	461a      	mov	r2, r3
 8001da2:	78f9      	ldrb	r1, [r7, #3]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dce:	461a      	mov	r2, r3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4914      	ldr	r1, [pc, #80]	; (8001e30 <cliUpdate+0x338>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f8f2 	bl	8005fc8 <uartPrintf>
          }
        }
        break;
 8001de4:	e005      	b.n	8001df2 <cliUpdate+0x2fa>
    }
  }
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001df2:	bf00      	nop

  switch(p_cli->state)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7c1b      	ldrb	r3, [r3, #16]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	f200 80d3 	bhi.w	8001fa6 <cliUpdate+0x4ae>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <cliUpdate+0x310>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e35 	.word	0x08001e35
 8001e14:	08001f9d 	.word	0x08001f9d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	741a      	strb	r2, [r3, #16]
      break;
 8001e1e:	e0c2      	b.n	8001fa6 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	741a      	strb	r2, [r3, #16]
      break;
 8001e26:	e0be      	b.n	8001fa6 <cliUpdate+0x4ae>
 8001e28:	08014370 	.word	0x08014370
 8001e2c:	08014378 	.word	0x08014378
 8001e30:	08014380 	.word	0x08014380

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b44      	cmp	r3, #68	; 0x44
 8001e3e:	d11a      	bne.n	8001e76 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e5a:	231b      	movs	r3, #27
 8001e5c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e5e:	235b      	movs	r3, #91	; 0x5b
 8001e60:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 f871 	bl	8005f58 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b43      	cmp	r3, #67	; 0x43
 8001e7a:	d11d      	bne.n	8001eb8 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d215      	bcs.n	8001eb8 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e9c:	231b      	movs	r3, #27
 8001e9e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001ea0:	235b      	movs	r3, #91	; 0x5b
 8001ea2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f107 010c 	add.w	r1, r7, #12
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f850 	bl	8005f58 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b41      	cmp	r3, #65	; 0x41
 8001ebc:	d10c      	bne.n	8001ed8 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8db 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f004 f878 	bl	8005fc8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d10c      	bne.n	8001ef8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8cb 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f004 f868 	bl	8005fc8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b31      	cmp	r3, #49	; 0x31
 8001efc:	d10f      	bne.n	8001f1e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	461a      	mov	r2, r3
 8001f0a:	492b      	ldr	r1, [pc, #172]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f0c:	f004 f85c 	bl	8005fc8 <uartPrintf>
        line->cursor = 0;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	2b34      	cmp	r3, #52	; 0x34
 8001f22:	d13f      	bne.n	8001fa4 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d210      	bcs.n	8001f56 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	8afa      	ldrh	r2, [r7, #22]
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <cliUpdate+0x4c4>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 f839 	bl	8005fc8 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	8afa      	ldrh	r2, [r7, #22]
 8001f80:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f820 	bl	8005fc8 <uartPrintf>
        }
        line->cursor = line->count;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2204      	movs	r2, #4
 8001f98:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f9a:	e003      	b.n	8001fa4 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	741a      	strb	r2, [r3, #16]
      break;
 8001fa2:	e000      	b.n	8001fa6 <cliUpdate+0x4ae>
      break;
 8001fa4:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fcea 	bl	8001980 <cliShowLog>

  return ret;
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0801438c 	.word	0x0801438c
 8001fbc:	08014394 	.word	0x08014394

08001fc0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002002:	461a      	mov	r2, r3
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	440b      	add	r3, r1
 8002012:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4610      	mov	r0, r2
 800201a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800201e:	2243      	movs	r2, #67	; 0x43
 8002020:	4619      	mov	r1, r3
 8002022:	f00f fe2b 	bl	8011c7c <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800202c:	2b03      	cmp	r3, #3
 800202e:	d807      	bhi.n	8002040 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002036:	3301      	adds	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002046:	b25a      	sxtb	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002054:	3301      	adds	r3, #1
 8002056:	425a      	negs	r2, r3
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	bf58      	it	pl
 8002062:	4253      	negpl	r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800208e:	2b00      	cmp	r3, #0
 8002090:	d076      	beq.n	8002180 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80020a6:	461a      	mov	r2, r3
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <cliLineChange+0x10c>)
 80020aa:	f003 ff8d 	bl	8005fc8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7818      	ldrb	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020c2:	461a      	mov	r2, r3
 80020c4:	4931      	ldr	r1, [pc, #196]	; (800218c <cliLineChange+0x110>)
 80020c6:	f003 ff7f 	bl	8005fc8 <uartPrintf>
  }


  if (key_up == true)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d125      	bne.n	800211e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020e2:	b25a      	sxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020f8:	4413      	add	r3, r2
 80020fa:	3b01      	subs	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002102:	fb93 f1f2 	sdiv	r1, r3, r2
 8002106:	fb02 f201 	mul.w	r2, r2, r1
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	b25a      	sxtb	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e013      	b.n	8002146 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002124:	3301      	adds	r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800212c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002130:	fb02 f201 	mul.w	r2, r2, r1
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	b25a      	sxtb	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002144:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	4403      	add	r3, r0
 8002158:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800215c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002160:	4611      	mov	r1, r2
 8002162:	2243      	movs	r2, #67	; 0x43
 8002164:	4618      	mov	r0, r3
 8002166:	f00f fd89 	bl	8011c7c <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800217e:	e000      	b.n	8002182 <cliLineChange+0x106>
    return;
 8002180:	bf00      	nop
}
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0801438c 	.word	0x0801438c
 800218c:	0801439c 	.word	0x0801439c

08002190 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002198:	2300      	movs	r3, #0
 800219a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f851 	bl	8002244 <cliParseArgs>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80021a8:	4825      	ldr	r0, [pc, #148]	; (8002240 <cliRunCmd+0xb0>)
 80021aa:	f000 f893 	bl	80022d4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f8b1 	bl	800231c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e033      	b.n	8002228 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe f800 	bl	80001e0 <strcmp>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
        break;
 8002220:	e009      	b.n	8002236 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4293      	cmp	r3, r2
 8002234:	dbc4      	blt.n	80021c0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002236:	7afb      	ldrb	r3, [r7, #11]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	080143a4 	.word	0x080143a4

08002244 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002262:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800226a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <cliParseArgs+0x8c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f107 0208 	add.w	r2, r7, #8
 8002280:	4619      	mov	r1, r3
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f010 fc5e 	bl	8012b44 <strtok_r>
 8002288:	61b8      	str	r0, [r7, #24]
 800228a:	e010      	b.n	80022ae <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	82fa      	strh	r2, [r7, #22]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <cliParseArgs+0x8c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f107 0208 	add.w	r2, r7, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	2000      	movs	r0, #0
 80022a8:	f010 fc4c 	bl	8012b44 <strtok_r>
 80022ac:	61b8      	str	r0, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1eb      	bne.n	800228c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	8afa      	ldrh	r2, [r7, #22]
 80022b8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80022bc:	8afb      	ldrh	r3, [r7, #22]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <cliParseArgs+0x82>
  {
    ret = true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000018 	.word	0x20000018

080022d4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80022d4:	b40f      	push	{r0, r1, r2, r3}
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <cliPrintf+0x44>)
 80022e4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f103 0011 	add.w	r0, r3, #17
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	f010 fce6 	bl	8012cc4 <vsniprintf>
 80022f8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	7818      	ldrb	r0, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3311      	adds	r3, #17
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	f003 fe27 	bl	8005f58 <uartWrite>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002314:	b004      	add	sp, #16
 8002316:	4770      	bx	lr
 8002318:	2000a4a0 	.word	0x2000a4a0

0800231c <cliToUpper>:

void cliToUpper(char *str)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	81fb      	strh	r3, [r7, #14]
 8002328:	e018      	b.n	800235c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002334:	7b7b      	ldrb	r3, [r7, #13]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800233a:	7b7b      	ldrb	r3, [r7, #13]
 800233c:	2b60      	cmp	r3, #96	; 0x60
 800233e:	d905      	bls.n	800234c <cliToUpper+0x30>
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	2b7a      	cmp	r3, #122	; 0x7a
 8002344:	d802      	bhi.n	800234c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002346:	7b7b      	ldrb	r3, [r7, #13]
 8002348:	3b20      	subs	r3, #32
 800234a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	7b7a      	ldrb	r2, [r7, #13]
 8002354:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	81fb      	strh	r3, [r7, #14]
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d9e3      	bls.n	800232a <cliToUpper+0xe>
 8002362:	e000      	b.n	8002366 <cliToUpper+0x4a>
      break;
 8002364:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d105      	bne.n	8002378 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	3b01      	subs	r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  }
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <cliArgsGetData+0x4c>)
 8002394:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	b29a      	uxth	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d301      	bcc.n	80023a8 <cliArgsGetData+0x24>
  {
    return 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e00e      	b.n	80023c6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f010 fc40 	bl	8012c40 <strtoul>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000a4a0 	.word	0x2000a4a0

080023d4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <cliArgsGetFloat+0x54>)
 80023e6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <cliArgsGetFloat+0x28>
  {
    return 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e00d      	b.n	8002418 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f010 fb1b 	bl	8012a48 <strtof>
 8002412:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	ee07 3a90 	vmov	s15, r3
}
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000a4a0 	.word	0x2000a4a0

0800242c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <cliArgsGetStr+0x44>)
 800243c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b29a      	uxth	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002448:	429a      	cmp	r2, r3
 800244a:	d301      	bcc.n	8002450 <cliArgsGetStr+0x24>
  {
    return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e008      	b.n	8002462 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000a4a0 	.word	0x2000a4a0

08002474 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <cliArgsIsStr+0x50>)
 8002486:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	b29a      	uxth	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002492:	429a      	cmp	r2, r3
 8002494:	d301      	bcc.n	800249a <cliArgsIsStr+0x26>
  {
    return 0;
 8002496:	2300      	movs	r3, #0
 8002498:	e010      	b.n	80024bc <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f7fd fe98 	bl	80001e0 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <cliArgsIsStr+0x46>
  {
    ret = true;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000a4a0 	.word	0x2000a4a0

080024c8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <cliKeepLoop+0x28>)
 80024d0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fcd2 	bl	8005e80 <uartAvailable>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <cliKeepLoop+0x1e>
  {
    return true;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024e6:	2300      	movs	r3, #0
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000a4a0 	.word	0x2000a4a0

080024f4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <cliAdd+0x90>)
 8002504:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d901      	bls.n	8002514 <cliAdd+0x20>
  {
    return false;
 8002510:	2300      	movs	r3, #0
 8002512:	e032      	b.n	800257a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800251a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f00f fc6e 	bl	8011e14 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002538:	89fa      	ldrh	r2, [r7, #14]
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800254e:	89fa      	ldrh	r2, [r7, #14]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff feda 	bl	800231c <cliToUpper>

  p_cli->cmd_count++;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800256e:	3301      	adds	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002578:	7dfb      	ldrb	r3, [r7, #23]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000a4a0 	.word	0x2000a4a0

08002588 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <cliShowList+0x60>)
 8002592:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <cliShowList+0x64>)
 8002596:	f7ff fe9d 	bl	80022d4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800259a:	4815      	ldr	r0, [pc, #84]	; (80025f0 <cliShowList+0x68>)
 800259c:	f7ff fe9a 	bl	80022d4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e012      	b.n	80025cc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fe8a 	bl	80022d4 <cliPrintf>
    cliPrintf("\r\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <cliShowList+0x64>)
 80025c2:	f7ff fe87 	bl	80022d4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4293      	cmp	r3, r2
 80025d8:	dbe5      	blt.n	80025a6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <cliShowList+0x6c>)
 80025dc:	f7ff fe7a 	bl	80022d4 <cliPrintf>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000a4a0 	.word	0x2000a4a0
 80025ec:	080143a4 	.word	0x080143a4
 80025f0:	080143a8 	.word	0x080143a8
 80025f4:	080143c8 	.word	0x080143c8

080025f8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002600:	2310      	movs	r3, #16
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002618:	4840      	ldr	r0, [pc, #256]	; (800271c <cliMemoryDump+0x124>)
 800261a:	f7ff fe5b 	bl	80022d4 <cliPrintf>
 800261e:	e07a      	b.n	8002716 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b01      	cmp	r3, #1
 8002624:	dd09      	ble.n	800263a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f010 fb05 	bl	8012c40 <strtoul>
 8002636:	4603      	mov	r3, r0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f010 fafc 	bl	8012c40 <strtoul>
 8002648:	4603      	mov	r3, r0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002650:	4833      	ldr	r0, [pc, #204]	; (8002720 <cliMemoryDump+0x128>)
 8002652:	f7ff fe3f 	bl	80022d4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	e058      	b.n	800270e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	482e      	ldr	r0, [pc, #184]	; (8002724 <cliMemoryDump+0x12c>)
 800266c:	f7ff fe32 	bl	80022d4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	482c      	ldr	r0, [pc, #176]	; (8002728 <cliMemoryDump+0x130>)
 8002678:	f7ff fe2c 	bl	80022d4 <cliPrintf>

    if ((idx%4) == 3)
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	425a      	negs	r2, r3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	bf58      	it	pl
 800268a:	4253      	negpl	r3, r2
 800268c:	2b03      	cmp	r3, #3
 800268e:	d138      	bne.n	8002702 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002690:	4826      	ldr	r0, [pc, #152]	; (800272c <cliMemoryDump+0x134>)
 8002692:	f7ff fe1f 	bl	80022d4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e02c      	b.n	80026f6 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e01d      	b.n	80026e4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b1f      	cmp	r3, #31
 80026b4:	d910      	bls.n	80026d8 <cliMemoryDump+0xe0>
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b7e      	cmp	r3, #126	; 0x7e
 80026c2:	d809      	bhi.n	80026d8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4817      	ldr	r0, [pc, #92]	; (8002730 <cliMemoryDump+0x138>)
 80026d2:	f7ff fdff 	bl	80022d4 <cliPrintf>
 80026d6:	e002      	b.n	80026de <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <cliMemoryDump+0x13c>)
 80026da:	f7ff fdfb 	bl	80022d4 <cliPrintf>
        for (i=0;i<4;i++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	ddde      	ble.n	80026a8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3304      	adds	r3, #4
 80026ee:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	3301      	adds	r3, #1
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	ddcf      	ble.n	800269c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026fc:	480e      	ldr	r0, [pc, #56]	; (8002738 <cliMemoryDump+0x140>)
 80026fe:	f7ff fde9 	bl	80022d4 <cliPrintf>
    }
    addr++;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	3304      	adds	r3, #4
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3301      	adds	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	429a      	cmp	r2, r3
 8002714:	dba2      	blt.n	800265c <cliMemoryDump+0x64>
  }
}
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	080143e8 	.word	0x080143e8
 8002720:	080143fc 	.word	0x080143fc
 8002724:	08014404 	.word	0x08014404
 8002728:	08014410 	.word	0x08014410
 800272c:	08014418 	.word	0x08014418
 8002730:	0801441c 	.word	0x0801441c
 8002734:	08014420 	.word	0x08014420
 8002738:	08014424 	.word	0x08014424

0800273c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002742:	2305      	movs	r3, #5
 8002744:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002746:	2201      	movs	r2, #1
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <Ds18b20_Init+0xec>)
 800274a:	4838      	ldr	r0, [pc, #224]	; (800282c <Ds18b20_Init+0xf0>)
 800274c:	f001 fd57 	bl	80041fe <OneWire_Init>
		TempSensorCount = 0;
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <Ds18b20_Init+0xf4>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002756:	e002      	b.n	800275e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f008 fcd5 	bl	800b108 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800275e:	f008 fcc7 	bl	800b0f0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002768:	429a      	cmp	r2, r3
 800276a:	d9f5      	bls.n	8002758 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800276c:	482f      	ldr	r0, [pc, #188]	; (800282c <Ds18b20_Init+0xf0>)
 800276e:	f001 fe33 	bl	80043d8 <OneWire_First>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <Ds18b20_Init+0xf8>)
 8002778:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800277a:	e019      	b.n	80027b0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	f008 fcc3 	bl	800b108 <HAL_Delay>
			TempSensorCount++;
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <Ds18b20_Init+0xf4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <Ds18b20_Init+0xf4>)
 800278c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <Ds18b20_Init+0xf4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <Ds18b20_Init+0xfc>)
 8002798:	4413      	add	r3, r2
 800279a:	4619      	mov	r1, r3
 800279c:	4823      	ldr	r0, [pc, #140]	; (800282c <Ds18b20_Init+0xf0>)
 800279e:	f001 ff2f 	bl	8004600 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80027a2:	4822      	ldr	r0, [pc, #136]	; (800282c <Ds18b20_Init+0xf0>)
 80027a4:	f001 fe28 	bl	80043f8 <OneWire_Next>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <Ds18b20_Init+0xf8>)
 80027ae:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <Ds18b20_Init+0xf8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e1      	bne.n	800277c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <Ds18b20_Init+0xf4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1bc      	bne.n	8002746 <Ds18b20_Init+0xa>
 80027cc:	e000      	b.n	80027d0 <Ds18b20_Init+0x94>
			break;
 80027ce:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <Ds18b20_Init+0x9e>
		return false;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e022      	b.n	8002820 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	71bb      	strb	r3, [r7, #6]
 80027de:	e019      	b.n	8002814 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80027e0:	2032      	movs	r0, #50	; 0x32
 80027e2:	f008 fc91 	bl	800b108 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <Ds18b20_Init+0xfc>)
 80027ec:	4413      	add	r3, r2
 80027ee:	220c      	movs	r2, #12
 80027f0:	4619      	mov	r1, r3
 80027f2:	480e      	ldr	r0, [pc, #56]	; (800282c <Ds18b20_Init+0xf0>)
 80027f4:	f000 f822 	bl	800283c <DS18B20_SetResolution>
		HAL_Delay(50);
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f008 fc85 	bl	800b108 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <Ds18b20_Init+0xfc>)
 8002804:	4413      	add	r3, r2
 8002806:	4619      	mov	r1, r3
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <Ds18b20_Init+0xf0>)
 800280a:	f000 f8b0 	bl	800296e <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	3301      	adds	r3, #1
 8002812:	71bb      	strb	r3, [r7, #6]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <Ds18b20_Init+0xf4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	79ba      	ldrb	r2, [r7, #6]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3e0      	bcc.n	80027e0 <Ds18b20_Init+0xa4>
	}
	return true;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020400 	.word	0x40020400
 800282c:	2000a8f8 	.word	0x2000a8f8
 8002830:	20000260 	.word	0x20000260
 8002834:	2000a8e4 	.word	0x2000a8e4
 8002838:	2000a8e8 	.word	0x2000a8e8

0800283c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f000 f87e 	bl	800294c <DS18B20_Is>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <DS18B20_SetResolution+0x1e>
		return 0;
 8002856:	2300      	movs	r3, #0
 8002858:	e074      	b.n	8002944 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f001 fcf8 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f001 feae 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002868:	21be      	movs	r1, #190	; 0xbe
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 fd76 	bl	800435c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f001 fd90 	bl	8004396 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f001 fd8d 	bl	8004396 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f001 fd8a 	bl	8004396 <OneWire_ReadByte>
 8002882:	4603      	mov	r3, r0
 8002884:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f001 fd85 	bl	8004396 <OneWire_ReadByte>
 800288c:	4603      	mov	r3, r0
 800288e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f001 fd80 	bl	8004396 <OneWire_ReadByte>
 8002896:	4603      	mov	r3, r0
 8002898:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d108      	bne.n	80028b2 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	f023 0320 	bic.w	r3, r3, #32
 80028ae:	75fb      	strb	r3, [r7, #23]
 80028b0:	e022      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b0a      	cmp	r3, #10
 80028b6:	d108      	bne.n	80028ca <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028be:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	f043 0320 	orr.w	r3, r3, #32
 80028c6:	75fb      	strb	r3, [r7, #23]
 80028c8:	e016      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b0b      	cmp	r3, #11
 80028ce:	d108      	bne.n	80028e2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	f023 0320 	bic.w	r3, r3, #32
 80028de:	75fb      	strb	r3, [r7, #23]
 80028e0:	e00a      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d107      	bne.n	80028f8 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f001 fca9 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 fe5f 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002906:	214e      	movs	r1, #78	; 0x4e
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f001 fd27 	bl	800435c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	4619      	mov	r1, r3
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f001 fd22 	bl	800435c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002918:	7d7b      	ldrb	r3, [r7, #21]
 800291a:	4619      	mov	r1, r3
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f001 fd1d 	bl	800435c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	4619      	mov	r1, r3
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f001 fd18 	bl	800435c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 fc8f 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 fe45 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800293a:	2148      	movs	r1, #72	; 0x48
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f001 fd0d 	bl	800435c <OneWire_WriteByte>

	return 1;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b28      	cmp	r3, #40	; 0x28
 800295a:	d101      	bne.n	8002960 <DS18B20_Is+0x14>
		return 1;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <DS18B20_Is+0x16>

	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f7ff ffe7 	bl	800294c <DS18B20_Is>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002984:	2300      	movs	r3, #0
 8002986:	e049      	b.n	8002a1c <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f001 fc61 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f001 fe17 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002996:	21be      	movs	r1, #190	; 0xbe
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 fcdf 	bl	800435c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fcf9 	bl	8004396 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fcf6 	bl	8004396 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 fcf3 	bl	8004396 <OneWire_ReadByte>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f001 fcee 	bl	8004396 <OneWire_ReadByte>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 fce9 	bl	8004396 <OneWire_ReadByte>
 80029c4:	4603      	mov	r3, r0
 80029c6:	737b      	strb	r3, [r7, #13]

	th = 125;
 80029c8:	237d      	movs	r3, #125	; 0x7d
 80029ca:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80029cc:	23c9      	movs	r3, #201	; 0xc9
 80029ce:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fc3d 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 fdf3 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80029de:	214e      	movs	r1, #78	; 0x4e
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f001 fcbb 	bl	800435c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 fcb6 	bl	800435c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f001 fcb1 	bl	800435c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80029fa:	7b7b      	ldrb	r3, [r7, #13]
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 fcac 	bl	800435c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 fc23 	bl	8004250 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 fdd9 	bl	80045c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002a12:	2148      	movs	r1, #72	; 0x48
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f001 fca1 	bl	800435c <OneWire_WriteByte>

	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
  bool ret = true;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002a2e:	490d      	ldr	r1, [pc, #52]	; (8002a64 <fatfsInit+0x40>)
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <fatfsInit+0x44>)
 8002a32:	f008 fa0b 	bl	800ae4c <FATFS_LinkDriver>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4909      	ldr	r1, [pc, #36]	; (8002a64 <fatfsInit+0x40>)
 8002a40:	480a      	ldr	r0, [pc, #40]	; (8002a6c <fatfsInit+0x48>)
 8002a42:	f006 fdfb 	bl	800963c <f_mount>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <fatfsInit+0x2e>
    {
      is_init = true;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <fatfsInit+0x4c>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <fatfsInit+0x50>)
 8002a54:	4808      	ldr	r0, [pc, #32]	; (8002a78 <fatfsInit+0x54>)
 8002a56:	f7ff fd4d 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000a90c 	.word	0x2000a90c
 8002a68:	080148fc 	.word	0x080148fc
 8002a6c:	2000a910 	.word	0x2000a910
 8002a70:	20000261 	.word	0x20000261
 8002a74:	08002b2d 	.word	0x08002b2d
 8002a78:	08014434 	.word	0x08014434

08002a7c <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0d6      	sub	sp, #344	; 0x158
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f007 fd4d 	bl	800a52e <f_opendir>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8002a9a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d138      	bne.n	8002b14 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002aa2:	f107 0208 	add.w	r2, r7, #8
 8002aa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f007 fde7 	bl	800a680 <f_readdir>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002ab8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d124      	bne.n	8002b0a <fatfsDir+0x8e>
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	7d9b      	ldrb	r3, [r3, #22]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01f      	beq.n	8002b0a <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	7a1b      	ldrb	r3, [r3, #8]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <fatfsDir+0x70>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	f103 0216 	add.w	r2, r3, #22
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	480f      	ldr	r0, [pc, #60]	; (8002b24 <fatfsDir+0xa8>)
 8002ae6:	f7ff fbf5 	bl	80022d4 <cliPrintf>
 8002aea:	e7da      	b.n	8002aa2 <fatfsDir+0x26>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f107 0308 	add.w	r3, r7, #8
 8002af8:	f103 0216 	add.w	r2, r3, #22
 8002afc:	1d39      	adds	r1, r7, #4
 8002afe:	4603      	mov	r3, r0
 8002b00:	6809      	ldr	r1, [r1, #0]
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <fatfsDir+0xac>)
 8002b04:	f7ff fbe6 	bl	80022d4 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002b08:	e7cb      	b.n	8002aa2 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 8002b0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f007 fd90 	bl	800a634 <f_closedir>
  }

  return res;
 8002b14:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	0801443c 	.word	0x0801443c
 8002b28:	08014448 	.word	0x08014448

08002b2c <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d14a      	bne.n	8002bde <cliFatfs+0xb2>
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	498b      	ldr	r1, [pc, #556]	; (8002d7c <cliFatfs+0x250>)
 8002b50:	2000      	movs	r0, #0
 8002b52:	4798      	blx	r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d041      	beq.n	8002bde <cliFatfs+0xb2>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8002b5a:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <cliFatfs+0x254>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4888      	ldr	r0, [pc, #544]	; (8002d84 <cliFatfs+0x258>)
 8002b62:	f7ff fbb7 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8002b66:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <cliFatfs+0x254>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d034      	beq.n	8002bd8 <cliFatfs+0xac>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8002b6e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8002b72:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b76:	4619      	mov	r1, r3
 8002b78:	4883      	ldr	r0, [pc, #524]	; (8002d88 <cliFatfs+0x25c>)
 8002b7a:	f007 fdce 	bl	800a71a <f_getfree>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8002b84:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11f      	bne.n	8002bcc <cliFatfs+0xa0>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8002b8c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	3b02      	subs	r3, #2
 8002b94:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002b98:	8952      	ldrh	r2, [r2, #10]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8002ba2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002ba6:	895b      	ldrh	r3, [r3, #10]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002bae:	fb03 f302 	mul.w	r3, r3, r2
 8002bb2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8002bb6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002bba:	0859      	lsrs	r1, r3, #1
 8002bbc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4871      	ldr	r0, [pc, #452]	; (8002d8c <cliFatfs+0x260>)
 8002bc6:	f7ff fb85 	bl	80022d4 <cliPrintf>
 8002bca:	e005      	b.n	8002bd8 <cliFatfs+0xac>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8002bcc:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	486f      	ldr	r0, [pc, #444]	; (8002d90 <cliFatfs+0x264>)
 8002bd4:	f7ff fb7e 	bl	80022d4 <cliPrintf>
       }
    }

    ret = true;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d11b      	bne.n	8002c20 <cliFatfs+0xf4>
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4969      	ldr	r1, [pc, #420]	; (8002d94 <cliFatfs+0x268>)
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4798      	blx	r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <cliFatfs+0xf4>
  {
    FRESULT res;

    res = fatfsDir("/");
 8002bfa:	4867      	ldr	r0, [pc, #412]	; (8002d98 <cliFatfs+0x26c>)
 8002bfc:	f7ff ff3e 	bl	8002a7c <fatfsDir>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8002c06:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <cliFatfs+0xee>
    {
      cliPrintf(" err : %d\n", res);
 8002c0e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002c12:	4619      	mov	r1, r3
 8002c14:	485e      	ldr	r0, [pc, #376]	; (8002d90 <cliFatfs+0x264>)
 8002c16:	f7ff fb5d 	bl	80022d4 <cliPrintf>
    }

    ret = true;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f040 8092 	bne.w	8002d50 <cliFatfs+0x224>
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	495a      	ldr	r1, [pc, #360]	; (8002d9c <cliFatfs+0x270>)
 8002c34:	2000      	movs	r0, #0
 8002c36:	4798      	blx	r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8088 	beq.w	8002d50 <cliFatfs+0x224>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8002c40:	f7fe fae3 	bl	800120a <millis>
 8002c44:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	220b      	movs	r2, #11
 8002c4e:	4954      	ldr	r1, [pc, #336]	; (8002da0 <cliFatfs+0x274>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f006 fd39 	bl	80096c8 <f_open>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 8002c5c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d165      	bne.n	8002d30 <cliFatfs+0x204>
    {
      f_printf(&log_file, "test1, ");
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	494e      	ldr	r1, [pc, #312]	; (8002da4 <cliFatfs+0x278>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f007 fe82 	bl	800a974 <f_printf>
      f_printf(&log_file, "test2, ");
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	494c      	ldr	r1, [pc, #304]	; (8002da8 <cliFatfs+0x27c>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 fe7c 	bl	800a974 <f_printf>
      f_printf(&log_file, "test3, ");
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	494a      	ldr	r1, [pc, #296]	; (8002dac <cliFatfs+0x280>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f007 fe76 	bl	800a974 <f_printf>
      f_printf(&log_file, ", ");
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4948      	ldr	r1, [pc, #288]	; (8002db0 <cliFatfs+0x284>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f007 fe70 	bl	800a974 <f_printf>
      f_printf(&log_file, "\n");
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4946      	ldr	r1, [pc, #280]	; (8002db4 <cliFatfs+0x288>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f007 fe6a 	bl	800a974 <f_printf>

      for (int i=0; i<8; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002ca6:	e00c      	b.n	8002cc2 <cliFatfs+0x196>
      {
        f_printf(&log_file, "%d \n", i);
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002cb0:	4941      	ldr	r1, [pc, #260]	; (8002db8 <cliFatfs+0x28c>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f007 fe5e 	bl	800a974 <f_printf>
      for (int i=0; i<8; i++)
 8002cb8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8002cc2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002cc6:	2b07      	cmp	r3, #7
 8002cc8:	ddee      	ble.n	8002ca8 <cliFatfs+0x17c>
      }

      f_rewind(&log_file);
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f007 fa23 	bl	800a11c <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8002cd6:	e01c      	b.n	8002d12 <cliFatfs+0x1e6>
      {
        len = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 8002cde:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002ce2:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8002ce6:	f107 0008 	add.w	r0, r7, #8
 8002cea:	2201      	movs	r2, #1
 8002cec:	f006 feba 	bl	8009a64 <f_read>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 8002cf6:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <cliFatfs+0x1f2>
        {
          break;
        }
        if (len == 0)
 8002cfe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <cliFatfs+0x1f6>
        {
          break;
        }

        cliPrintf("%c", data);
 8002d06:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	482b      	ldr	r0, [pc, #172]	; (8002dbc <cliFatfs+0x290>)
 8002d0e:	f7ff fae1 	bl	80022d4 <cliPrintf>
      while(cliKeepLoop())
 8002d12:	f7ff fbd9 	bl	80024c8 <cliKeepLoop>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1dd      	bne.n	8002cd8 <cliFatfs+0x1ac>
 8002d1c:	e002      	b.n	8002d24 <cliFatfs+0x1f8>
          break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <cliFatfs+0x1f8>
          break;
 8002d22:	bf00      	nop
      }

      f_close(&log_file);
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f007 f9cd 	bl	800a0c8 <f_close>
 8002d2e:	e002      	b.n	8002d36 <cliFatfs+0x20a>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8002d30:	4823      	ldr	r0, [pc, #140]	; (8002dc0 <cliFatfs+0x294>)
 8002d32:	f7ff facf 	bl	80022d4 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8002d36:	f7fe fa68 	bl	800120a <millis>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4619      	mov	r1, r3
 8002d44:	481f      	ldr	r0, [pc, #124]	; (8002dc4 <cliFatfs+0x298>)
 8002d46:	f7ff fac5 	bl	80022d4 <cliPrintf>

    ret = true;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8002d50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <cliFatfs+0x244>
  {
    cliPrintf("fatfs info\n");
 8002d5e:	481a      	ldr	r0, [pc, #104]	; (8002dc8 <cliFatfs+0x29c>)
 8002d60:	f7ff fab8 	bl	80022d4 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8002d64:	4819      	ldr	r0, [pc, #100]	; (8002dcc <cliFatfs+0x2a0>)
 8002d66:	f7ff fab5 	bl	80022d4 <cliPrintf>
    cliPrintf("fatfs test\n");
 8002d6a:	4819      	ldr	r0, [pc, #100]	; (8002dd0 <cliFatfs+0x2a4>)
 8002d6c:	f7ff fab2 	bl	80022d4 <cliPrintf>
  }
}
 8002d70:	bf00      	nop
 8002d72:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	0801445c 	.word	0x0801445c
 8002d80:	20000261 	.word	0x20000261
 8002d84:	08014464 	.word	0x08014464
 8002d88:	08014478 	.word	0x08014478
 8002d8c:	0801447c 	.word	0x0801447c
 8002d90:	080144b0 	.word	0x080144b0
 8002d94:	080144bc 	.word	0x080144bc
 8002d98:	080144c0 	.word	0x080144c0
 8002d9c:	080144c4 	.word	0x080144c4
 8002da0:	080144cc 	.word	0x080144cc
 8002da4:	080144d4 	.word	0x080144d4
 8002da8:	080144dc 	.word	0x080144dc
 8002dac:	080144e4 	.word	0x080144e4
 8002db0:	080144ec 	.word	0x080144ec
 8002db4:	080144f0 	.word	0x080144f0
 8002db8:	080144f4 	.word	0x080144f4
 8002dbc:	080144fc 	.word	0x080144fc
 8002dc0:	08014500 	.word	0x08014500
 8002dc4:	08014510 	.word	0x08014510
 8002dc8:	08014518 	.word	0x08014518
 8002dcc:	08014524 	.word	0x08014524
 8002dd0:	08014530 	.word	0x08014530

08002dd4 <gpioInit>:
#endif



bool gpioInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
  bool ret = true;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <gpioInit+0xa0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <gpioInit+0xa0>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <gpioInit+0xa0>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <gpioInit+0xa0>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <gpioInit+0xa0>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <gpioInit+0xa0>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e01e      	b.n	8002e5a <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	4915      	ldr	r1, [pc, #84]	; (8002e78 <gpioInit+0xa4>)
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3308      	adds	r3, #8
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	f000 f826 	bl	8002e84 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	b2d8      	uxtb	r0, r3
 8002e3c:	490e      	ldr	r1, [pc, #56]	; (8002e78 <gpioInit+0xa4>)
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	330b      	adds	r3, #11
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f000 f88a 	bl	8002f68 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	dddd      	ble.n	8002e1c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002e60:	4906      	ldr	r1, [pc, #24]	; (8002e7c <gpioInit+0xa8>)
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <gpioInit+0xac>)
 8002e64:	f7ff fb46 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8002e68:	7afb      	ldrb	r3, [r7, #11]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08014804 	.word	0x08014804
 8002e7c:	08003081 	.word	0x08003081
 8002e80:	0801453c 	.word	0x0801453c

08002e84 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	d901      	bls.n	8002eb2 <gpioPinMode+0x2e>
  {
    return false;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e054      	b.n	8002f5c <gpioPinMode+0xd8>
  }

  switch(mode)
 8002eb2:	79bb      	ldrb	r3, [r7, #6]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d838      	bhi.n	8002f2a <gpioPinMode+0xa6>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <gpioPinMode+0x3c>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002edd 	.word	0x08002edd
 8002ec4:	08002ee7 	.word	0x08002ee7
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	08002efb 	.word	0x08002efb
 8002ed0:	08002f05 	.word	0x08002f05
 8002ed4:	08002f0f 	.word	0x08002f0f
 8002ed8:	08002f19 	.word	0x08002f19
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
      break;
 8002ee4:	e021      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eea:	2301      	movs	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
      break;
 8002eee:	e01c      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]
      break;
 8002ef8:	e017      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
      break;
 8002f02:	e012      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
      break;
 8002f0c:	e00d      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f12:	2302      	movs	r3, #2
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	e008      	b.n	8002f2a <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f24:	2302      	movs	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
      break;
 8002f28:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002f2a:	79fa      	ldrb	r2, [r7, #7]
 8002f2c:	490d      	ldr	r1, [pc, #52]	; (8002f64 <gpioPinMode+0xe0>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	4908      	ldr	r1, [pc, #32]	; (8002f64 <gpioPinMode+0xe0>)
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f107 0208 	add.w	r2, r7, #8
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f009 fb6f 	bl	800c638 <HAL_GPIO_Init>

  return ret;
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08014804 	.word	0x08014804

08002f68 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460a      	mov	r2, r1
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d842      	bhi.n	8003004 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 8002f7e:	79bb      	ldrb	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01f      	beq.n	8002fc4 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002f84:	79fa      	ldrb	r2, [r7, #7]
 8002f86:	4921      	ldr	r1, [pc, #132]	; (800300c <gpioPinWrite+0xa4>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	491d      	ldr	r1, [pc, #116]	; (800300c <gpioPinWrite+0xa4>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29c      	uxth	r4, r3
 8002fa8:	79fa      	ldrb	r2, [r7, #7]
 8002faa:	4918      	ldr	r1, [pc, #96]	; (800300c <gpioPinWrite+0xa4>)
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3309      	adds	r3, #9
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	f009 fdb7 	bl	800cb30 <HAL_GPIO_WritePin>
 8002fc2:	e020      	b.n	8003006 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	4911      	ldr	r1, [pc, #68]	; (800300c <gpioPinWrite+0xa4>)
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	79fa      	ldrb	r2, [r7, #7]
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <gpioPinWrite+0xa4>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29c      	uxth	r4, r3
 8002fe8:	79fa      	ldrb	r2, [r7, #7]
 8002fea:	4908      	ldr	r1, [pc, #32]	; (800300c <gpioPinWrite+0xa4>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	330a      	adds	r3, #10
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	f009 fd97 	bl	800cb30 <HAL_GPIO_WritePin>
 8003002:	e000      	b.n	8003006 <gpioPinWrite+0x9e>
    return;
 8003004:	bf00      	nop
  }
}
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bd90      	pop	{r4, r7, pc}
 800300c:	08014804 	.word	0x08014804

08003010 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800301a:	2300      	movs	r3, #0
 800301c:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d901      	bls.n	8003028 <gpioPinRead+0x18>
  {
    return false;
 8003024:	2300      	movs	r3, #0
 8003026:	e024      	b.n	8003072 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003028:	79fa      	ldrb	r2, [r7, #7]
 800302a:	4914      	ldr	r1, [pc, #80]	; (800307c <gpioPinRead+0x6c>)
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	4910      	ldr	r1, [pc, #64]	; (800307c <gpioPinRead+0x6c>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3304      	adds	r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4619      	mov	r1, r3
 800304e:	f009 fd57 	bl	800cb00 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	4618      	mov	r0, r3
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	4908      	ldr	r1, [pc, #32]	; (800307c <gpioPinRead+0x6c>)
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3309      	adds	r3, #9
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4298      	cmp	r0, r3
 800306a:	d101      	bne.n	8003070 <gpioPinRead+0x60>
  {
    ret = true;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	08014804 	.word	0x08014804

08003080 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d128      	bne.n	80030e6 <cliGpio+0x66>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <cliGpio+0x138>)
 800309a:	2000      	movs	r0, #0
 800309c:	4798      	blx	r3
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 80030a4:	e018      	b.n	80030d8 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e00c      	b.n	80030c6 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ffad 	bl	8003010 <gpioPinRead>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4619      	mov	r1, r3
 80030ba:	4840      	ldr	r0, [pc, #256]	; (80031bc <cliGpio+0x13c>)
 80030bc:	f7ff f90a 	bl	80022d4 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3301      	adds	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b0f      	cmp	r3, #15
 80030ca:	ddef      	ble.n	80030ac <cliGpio+0x2c>
      }
      cliPrintf("\n");
 80030cc:	483c      	ldr	r0, [pc, #240]	; (80031c0 <cliGpio+0x140>)
 80030ce:	f7ff f901 	bl	80022d4 <cliPrintf>
      delay(100);
 80030d2:	2064      	movs	r0, #100	; 0x64
 80030d4:	f7fe f88e 	bl	80011f4 <delay>
    while(cliKeepLoop())
 80030d8:	f7ff f9f6 	bl	80024c8 <cliKeepLoop>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e1      	bne.n	80030a6 <cliGpio+0x26>
    }
    ret = true;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d123      	bne.n	8003136 <cliGpio+0xb6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <cliGpio+0x144>)
 80030f4:	2000      	movs	r0, #0
 80030f6:	4798      	blx	r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01b      	beq.n	8003136 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2001      	movs	r0, #1
 8003104:	4798      	blx	r3
 8003106:	4603      	mov	r3, r0
 8003108:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800310a:	e00d      	b.n	8003128 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 800310c:	7bfc      	ldrb	r4, [r7, #15]
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff7d 	bl	8003010 <gpioPinRead>
 8003116:	4603      	mov	r3, r0
 8003118:	461a      	mov	r2, r3
 800311a:	4621      	mov	r1, r4
 800311c:	482a      	ldr	r0, [pc, #168]	; (80031c8 <cliGpio+0x148>)
 800311e:	f7ff f8d9 	bl	80022d4 <cliPrintf>
      delay(100);
 8003122:	2064      	movs	r0, #100	; 0x64
 8003124:	f7fe f866 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8003128:	f7ff f9ce 	bl	80024c8 <cliKeepLoop>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ec      	bne.n	800310c <cliGpio+0x8c>
    }

    ret = true;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d126      	bne.n	800318c <cliGpio+0x10c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4922      	ldr	r1, [pc, #136]	; (80031cc <cliGpio+0x14c>)
 8003144:	2000      	movs	r0, #0
 8003146:	4798      	blx	r3
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01e      	beq.n	800318c <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2001      	movs	r0, #1
 8003154:	4798      	blx	r3
 8003156:	4603      	mov	r3, r0
 8003158:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2002      	movs	r0, #2
 8003160:	4798      	blx	r3
 8003162:	4603      	mov	r3, r0
 8003164:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8003166:	7b7b      	ldrb	r3, [r7, #13]
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2da      	uxtb	r2, r3
 8003172:	7bbb      	ldrb	r3, [r7, #14]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fef6 	bl	8002f68 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	7b7a      	ldrb	r2, [r7, #13]
 8003180:	4619      	mov	r1, r3
 8003182:	4813      	ldr	r0, [pc, #76]	; (80031d0 <cliGpio+0x150>)
 8003184:	f7ff f8a6 	bl	80022d4 <cliPrintf>
    ret = true;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	f083 0301 	eor.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003198:	480e      	ldr	r0, [pc, #56]	; (80031d4 <cliGpio+0x154>)
 800319a:	f7ff f89b 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800319e:	210f      	movs	r1, #15
 80031a0:	480d      	ldr	r0, [pc, #52]	; (80031d8 <cliGpio+0x158>)
 80031a2:	f7ff f897 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 80031a6:	210f      	movs	r1, #15
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <cliGpio+0x15c>)
 80031aa:	f7ff f893 	bl	80022d4 <cliPrintf>
  }
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	08014544 	.word	0x08014544
 80031bc:	0801454c 	.word	0x0801454c
 80031c0:	08014550 	.word	0x08014550
 80031c4:	08014554 	.word	0x08014554
 80031c8:	0801455c 	.word	0x0801455c
 80031cc:	08014570 	.word	0x08014570
 80031d0:	08014578 	.word	0x08014578
 80031d4:	0801458c 	.word	0x0801458c
 80031d8:	08014598 	.word	0x08014598
 80031dc:	080145ac 	.word	0x080145ac

080031e0 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80031e4:	f7fe f811 	bl	800120a <millis>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <TransferDoneISR+0x40>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <TransferDoneISR+0x44>)
 80031f2:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80031f4:	f7fe f809 	bl	800120a <millis>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <TransferDoneISR+0x40>)
 80031fc:	601a      	str	r2, [r3, #0]

  if (fps_time > 0)
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <TransferDoneISR+0x44>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <TransferDoneISR+0x44>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <TransferDoneISR+0x48>)
 8003214:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <TransferDoneISR+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000284 	.word	0x20000284
 8003224:	20000288 	.word	0x20000288
 8003228:	2000028c 	.word	0x2000028c
 800322c:	20000282 	.word	0x20000282

08003230 <lcdInit>:


bool lcdInit(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <lcdInit+0xa4>)
 8003238:	2264      	movs	r2, #100	; 0x64
 800323a:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 800323c:	f003 fc00 	bl	8006a40 <st7735Init>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <lcdInit+0xa8>)
 8003246:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8003248:	4824      	ldr	r0, [pc, #144]	; (80032dc <lcdInit+0xac>)
 800324a:	f003 fc05 	bl	8006a58 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <lcdInit+0xac>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4823      	ldr	r0, [pc, #140]	; (80032e0 <lcdInit+0xb0>)
 8003254:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	e007      	b.n	800326c <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 800325c:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <lcdInit+0xb4>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2100      	movs	r1, #0
 8003262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3301      	adds	r3, #1
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003272:	dbf3      	blt.n	800325c <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8003274:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003278:	2100      	movs	r1, #0
 800327a:	481a      	ldr	r0, [pc, #104]	; (80032e4 <lcdInit+0xb4>)
 800327c:	f00e fd09 	bl	8011c92 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <lcdInit+0xb8>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	035b      	lsls	r3, r3, #13
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <lcdInit+0xb4>)
 8003290:	4413      	add	r3, r2
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <lcdInit+0xbc>)
 8003294:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8003296:	2300      	movs	r3, #0
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	22a0      	movs	r2, #160	; 0xa0
 800329e:	2100      	movs	r1, #0
 80032a0:	2000      	movs	r0, #0
 80032a2:	f000 fbe6 	bl	8003a72 <lcdDrawFillRect>
  lcdUpdateDraw();
 80032a6:	f000 faad 	bl	8003804 <lcdUpdateDraw>

  lcdSetBackLight(100);
 80032aa:	2064      	movs	r0, #100	; 0x64
 80032ac:	f000 f830 	bl	8003310 <lcdSetBackLight>


  if (is_init != true)
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <lcdInit+0xa8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <lcdInit+0x92>
  {
    return false;
 80032be:	2300      	movs	r3, #0
 80032c0:	e004      	b.n	80032cc <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80032c2:	490b      	ldr	r1, [pc, #44]	; (80032f0 <lcdInit+0xc0>)
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <lcdInit+0xc4>)
 80032c6:	f7ff f915 	bl	80024f4 <cliAdd>
#endif

  return true;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	2000001c 	.word	0x2000001c
 80032d8:	20000280 	.word	0x20000280
 80032dc:	20000264 	.word	0x20000264
 80032e0:	080031e1 	.word	0x080031e1
 80032e4:	200002c0 	.word	0x200002c0
 80032e8:	20000281 	.word	0x20000281
 80032ec:	20000290 	.word	0x20000290
 80032f0:	08003e19 	.word	0x08003e19
 80032f4:	080148c4 	.word	0x080148c4

080032f8 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return is_init;
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <lcdIsInit+0x14>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000280 	.word	0x20000280

08003310 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	2b64      	cmp	r3, #100	; 0x64
 800331e:	bf28      	it	cs
 8003320:	2364      	movcs	r3, #100	; 0x64
 8003322:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <lcdSetBackLight+0x48>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	429a      	cmp	r2, r3
 800332c:	d002      	beq.n	8003334 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <lcdSetBackLight+0x48>)
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <lcdSetBackLight+0x48>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 800333c:	2101      	movs	r1, #1
 800333e:	2001      	movs	r0, #1
 8003340:	f7ff fe12 	bl	8002f68 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8003344:	e003      	b.n	800334e <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8003346:	2100      	movs	r1, #0
 8003348:	2001      	movs	r0, #1
 800334a:	f7ff fe0d 	bl	8002f68 <gpioPinWrite>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2000001c 	.word	0x2000001c

0800335c <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <lcdDrawPixel+0x14>)
 800335e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003362:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000290 	.word	0x20000290

08003374 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8003374:	b510      	push	{r4, lr}
 8003376:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8003378:	f000 fa70 	bl	800385c <lcdGetFrameBuffer>
 800337c:	f500 421f 	add.w	r2, r0, #40704	; 0x9f00
 8003380:	b2a1      	uxth	r1, r4
 8003382:	32fe      	adds	r2, #254	; 0xfe
 8003384:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8003386:	f823 1f02 	strh.w	r1, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800338a:	4293      	cmp	r3, r2
 800338c:	d1fb      	bne.n	8003386 <lcdClearBuffer+0x12>
  }
}
 800338e:	bd10      	pop	{r4, pc}

08003390 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8003390:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003394:	4616      	mov	r6, r2
 8003396:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
 8003398:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 800339c:	0052      	lsls	r2, r2, #1
  int32_t x     = 0;

  while (x < r)
 800339e:	2e00      	cmp	r6, #0
  int32_t ddF_y = -2 * r;
 80033a0:	9200      	str	r2, [sp, #0]
{
 80033a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  while (x < r)
 80033a6:	f340 8090 	ble.w	80034ca <lcdDrawCircleHelper+0x13a>
 80033aa:	f003 0204 	and.w	r2, r3, #4
 80033ae:	9201      	str	r2, [sp, #4]
 80033b0:	f003 0202 	and.w	r2, r3, #2
 80033b4:	9202      	str	r2, [sp, #8]
 80033b6:	f003 0208 	and.w	r2, r3, #8
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	f1c6 0401 	rsb	r4, r6, #1
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 80033c2:	fa1f f880 	uxth.w	r8, r0
 80033c6:	fa1f f981 	uxth.w	r9, r1
 80033ca:	9203      	str	r2, [sp, #12]
 80033cc:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 80033ce:	2500      	movs	r5, #0
 80033d0:	e00a      	b.n	80033e8 <lcdDrawCircleHelper+0x58>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 80033d2:	9b02      	ldr	r3, [sp, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d12e      	bne.n	8003436 <lcdDrawCircleHelper+0xa6>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d144      	bne.n	8003468 <lcdDrawCircleHelper+0xd8>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 80033de:	9b04      	ldr	r3, [sp, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d15a      	bne.n	800349a <lcdDrawCircleHelper+0x10a>
  while (x < r)
 80033e4:	42ae      	cmp	r6, r5
 80033e6:	dd70      	ble.n	80034ca <lcdDrawCircleHelper+0x13a>
    if (f >= 0)
 80033e8:	2c00      	cmp	r4, #0
 80033ea:	db04      	blt.n	80033f6 <lcdDrawCircleHelper+0x66>
      ddF_y += 2;
 80033ec:	9b00      	ldr	r3, [sp, #0]
 80033ee:	3302      	adds	r3, #2
 80033f0:	9300      	str	r3, [sp, #0]
      f     += ddF_y;
 80033f2:	441c      	add	r4, r3
      r--;
 80033f4:	3e01      	subs	r6, #1
    x++;
 80033f6:	3501      	adds	r5, #1
    if (cornername & 0x4)
 80033f8:	9b01      	ldr	r3, [sp, #4]
    f     += ddF_x;
 80033fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80033fe:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0e6      	beq.n	80033d2 <lcdDrawCircleHelper+0x42>
 8003404:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003406:	fa1f fb86 	uxth.w	fp, r6
 800340a:	eb08 0003 	add.w	r0, r8, r3
 800340e:	eb09 010b 	add.w	r1, r9, fp
 8003412:	b280      	uxth	r0, r0
 8003414:	b289      	uxth	r1, r1
 8003416:	4652      	mov	r2, sl
 8003418:	9305      	str	r3, [sp, #20]
 800341a:	f7ff ff9f 	bl	800335c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 800341e:	9b05      	ldr	r3, [sp, #20]
 8003420:	eb08 000b 	add.w	r0, r8, fp
 8003424:	eb09 0103 	add.w	r1, r9, r3
 8003428:	b289      	uxth	r1, r1
 800342a:	b280      	uxth	r0, r0
 800342c:	f7ff ff96 	bl	800335c <lcdDrawPixel>
    if (cornername & 0x2)
 8003430:	9b02      	ldr	r3, [sp, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0d0      	beq.n	80033d8 <lcdDrawCircleHelper+0x48>
 8003436:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003438:	fa1f fb86 	uxth.w	fp, r6
 800343c:	eb08 0003 	add.w	r0, r8, r3
 8003440:	eba9 010b 	sub.w	r1, r9, fp
 8003444:	b280      	uxth	r0, r0
 8003446:	b289      	uxth	r1, r1
 8003448:	4652      	mov	r2, sl
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	f7ff ff86 	bl	800335c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003450:	9b05      	ldr	r3, [sp, #20]
 8003452:	eb08 000b 	add.w	r0, r8, fp
 8003456:	eba9 0103 	sub.w	r1, r9, r3
 800345a:	b289      	uxth	r1, r1
 800345c:	b280      	uxth	r0, r0
 800345e:	f7ff ff7d 	bl	800335c <lcdDrawPixel>
    if (cornername & 0x8)
 8003462:	9b03      	ldr	r3, [sp, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0ba      	beq.n	80033de <lcdDrawCircleHelper+0x4e>
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003468:	b2b3      	uxth	r3, r6
 800346a:	fa1f fb85 	uxth.w	fp, r5
 800346e:	eba8 0003 	sub.w	r0, r8, r3
 8003472:	eb09 010b 	add.w	r1, r9, fp
 8003476:	b280      	uxth	r0, r0
 8003478:	b289      	uxth	r1, r1
 800347a:	4652      	mov	r2, sl
 800347c:	9305      	str	r3, [sp, #20]
 800347e:	f7ff ff6d 	bl	800335c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003482:	9b05      	ldr	r3, [sp, #20]
 8003484:	eba8 000b 	sub.w	r0, r8, fp
 8003488:	eb03 0109 	add.w	r1, r3, r9
 800348c:	b289      	uxth	r1, r1
 800348e:	b280      	uxth	r0, r0
 8003490:	f7ff ff64 	bl	800335c <lcdDrawPixel>
    if (cornername & 0x1)
 8003494:	9b04      	ldr	r3, [sp, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0a4      	beq.n	80033e4 <lcdDrawCircleHelper+0x54>
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 800349a:	b2b3      	uxth	r3, r6
 800349c:	fa1f fb85 	uxth.w	fp, r5
 80034a0:	eba8 0003 	sub.w	r0, r8, r3
 80034a4:	eba9 010b 	sub.w	r1, r9, fp
 80034a8:	b280      	uxth	r0, r0
 80034aa:	b289      	uxth	r1, r1
 80034ac:	4652      	mov	r2, sl
 80034ae:	9305      	str	r3, [sp, #20]
 80034b0:	f7ff ff54 	bl	800335c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 80034b4:	9b05      	ldr	r3, [sp, #20]
 80034b6:	eba8 000b 	sub.w	r0, r8, fp
 80034ba:	eba9 0103 	sub.w	r1, r9, r3
 80034be:	b289      	uxth	r1, r1
 80034c0:	b280      	uxth	r0, r0
 80034c2:	f7ff ff4b 	bl	800335c <lcdDrawPixel>
  while (x < r)
 80034c6:	42ae      	cmp	r6, r5
 80034c8:	dc8e      	bgt.n	80033e8 <lcdDrawCircleHelper+0x58>
    }
  }
}
 80034ca:	b006      	add	sp, #24
 80034cc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080034d0 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 80034d0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80034d4:	b08a      	sub	sp, #40	; 0x28
 80034d6:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80034da:	9206      	str	r2, [sp, #24]
 80034dc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
{
 80034e0:	9604      	str	r6, [sp, #16]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80034e2:	fa1f f984 	uxth.w	r9, r4
{
 80034e6:	4606      	mov	r6, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80034e8:	b280      	uxth	r0, r0
{
 80034ea:	469c      	mov	ip, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80034ec:	f8bd 8010 	ldrh.w	r8, [sp, #16]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80034f0:	f8cd c01c 	str.w	ip, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80034f4:	eb00 0a09 	add.w	sl, r0, r9
 80034f8:	eba5 0b49 	sub.w	fp, r5, r9, lsl #1
 80034fc:	fa0f fa8a 	sxth.w	sl, sl
 8003500:	fa0f fb8b 	sxth.w	fp, fp
 8003504:	9103      	str	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003506:	f8bd e01c 	ldrh.w	lr, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800350a:	9008      	str	r0, [sp, #32]
 800350c:	465a      	mov	r2, fp
 800350e:	4650      	mov	r0, sl
 8003510:	4643      	mov	r3, r8
 8003512:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003516:	f8cd e014 	str.w	lr, [sp, #20]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800351a:	9509      	str	r5, [sp, #36]	; 0x24
 800351c:	f000 fa84 	bl	8003a28 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003520:	9905      	ldr	r1, [sp, #20]
 8003522:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8003526:	3901      	subs	r1, #1
 8003528:	4429      	add	r1, r5
 800352a:	465a      	mov	r2, fp
 800352c:	4650      	mov	r0, sl
 800352e:	4643      	mov	r3, r8
 8003530:	b209      	sxth	r1, r1
 8003532:	f000 fa79 	bl	8003a28 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003536:	9905      	ldr	r1, [sp, #20]
 8003538:	444d      	add	r5, r9
 800353a:	eba1 0949 	sub.w	r9, r1, r9, lsl #1
 800353e:	b22d      	sxth	r5, r5
 8003540:	fa0f f989 	sxth.w	r9, r9
 8003544:	464a      	mov	r2, r9
 8003546:	4629      	mov	r1, r5
 8003548:	4643      	mov	r3, r8
 800354a:	b230      	sxth	r0, r6
 800354c:	f000 fa47 	bl	80039de <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003552:	9a08      	ldr	r2, [sp, #32]
 8003554:	1e58      	subs	r0, r3, #1
 8003556:	4629      	mov	r1, r5
 8003558:	4410      	add	r0, r2

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800355a:	4635      	mov	r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 800355c:	464a      	mov	r2, r9
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800355e:	46b1      	mov	r9, r6
 8003560:	9e03      	ldr	r6, [sp, #12]
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003562:	4643      	mov	r3, r8
 8003564:	b200      	sxth	r0, r0
 8003566:	f000 fa3a 	bl	80039de <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800356a:	eb04 0806 	add.w	r8, r4, r6
 800356e:	4425      	add	r5, r4
 8003570:	9e04      	ldr	r6, [sp, #16]
 8003572:	9600      	str	r6, [sp, #0]
 8003574:	4628      	mov	r0, r5
 8003576:	4641      	mov	r1, r8
 8003578:	4622      	mov	r2, r4
 800357a:	2301      	movs	r3, #1
 800357c:	f7ff ff08 	bl	8003390 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003580:	9a06      	ldr	r2, [sp, #24]
 8003582:	9600      	str	r6, [sp, #0]
 8003584:	444a      	add	r2, r9
 8003586:	eba2 0904 	sub.w	r9, r2, r4
 800358a:	f109 39ff 	add.w	r9, r9, #4294967295
 800358e:	4641      	mov	r1, r8
 8003590:	4648      	mov	r0, r9
 8003592:	4622      	mov	r2, r4
 8003594:	2302      	movs	r3, #2
 8003596:	9604      	str	r6, [sp, #16]
 8003598:	f7ff fefa 	bl	8003390 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800359c:	9e03      	ldr	r6, [sp, #12]
 800359e:	9b07      	ldr	r3, [sp, #28]
 80035a0:	4433      	add	r3, r6
 80035a2:	eba3 0804 	sub.w	r8, r3, r4
 80035a6:	9e04      	ldr	r6, [sp, #16]
 80035a8:	9600      	str	r6, [sp, #0]
 80035aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80035ae:	4648      	mov	r0, r9
 80035b0:	4641      	mov	r1, r8
 80035b2:	4622      	mov	r2, r4
 80035b4:	2304      	movs	r3, #4
 80035b6:	f7ff feeb 	bl	8003390 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80035ba:	4641      	mov	r1, r8
 80035bc:	4628      	mov	r0, r5
 80035be:	4622      	mov	r2, r4
 80035c0:	2308      	movs	r3, #8
 80035c2:	9612      	str	r6, [sp, #72]	; 0x48
}
 80035c4:	b00a      	add	sp, #40	; 0x28
 80035c6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80035ca:	f7ff bee1 	b.w	8003390 <lcdDrawCircleHelper>

080035ce <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 80035ce:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80035d2:	4616      	mov	r6, r2
 80035d4:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 80035d6:	f1c6 0a00 	rsb	sl, r6, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 80035da:	2e00      	cmp	r6, #0
{
 80035dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 80035de:	ebaa 0a06 	sub.w	sl, sl, r6
  while (y < r)
 80035e2:	dd73      	ble.n	80036cc <lcdDrawFillCircleHelper+0xfe>
 80035e4:	3201      	adds	r2, #1
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80035e6:	b292      	uxth	r2, r2
 80035e8:	b280      	uxth	r0, r0
 80035ea:	b289      	uxth	r1, r1
 80035ec:	9203      	str	r2, [sp, #12]
 80035ee:	f003 0201 	and.w	r2, r3, #1
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	f1c6 0401 	rsb	r4, r6, #1
 80035fa:	9001      	str	r0, [sp, #4]
 80035fc:	9102      	str	r1, [sp, #8]
 80035fe:	9205      	str	r2, [sp, #20]
 8003600:	9304      	str	r3, [sp, #16]
  int32_t y     = 0;
 8003602:	2500      	movs	r5, #0
 8003604:	e004      	b.n	8003610 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003606:	9b04      	ldr	r3, [sp, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d137      	bne.n	800367c <lcdDrawFillCircleHelper+0xae>
  while (y < r)
 800360c:	42ae      	cmp	r6, r5
 800360e:	dd5d      	ble.n	80036cc <lcdDrawFillCircleHelper+0xfe>
    if (f >= 0)
 8003610:	2c00      	cmp	r4, #0
    y++;
 8003612:	f105 0501 	add.w	r5, r5, #1
    if (f >= 0)
 8003616:	db03      	blt.n	8003620 <lcdDrawFillCircleHelper+0x52>
      ddF_y += 2;
 8003618:	f10a 0a02 	add.w	sl, sl, #2
      f     += ddF_y;
 800361c:	4454      	add	r4, sl
      r--;
 800361e:	3e01      	subs	r6, #1
    if (cornername & 0x1)
 8003620:	9b05      	ldr	r3, [sp, #20]
    f     += ddF_x;
 8003622:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003626:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ec      	beq.n	8003606 <lcdDrawFillCircleHelper+0x38>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 800362c:	9901      	ldr	r1, [sp, #4]
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003634:	fa1f f986 	uxth.w	r9, r6
 8003638:	eba1 0009 	sub.w	r0, r1, r9
 800363c:	9902      	ldr	r1, [sp, #8]
 800363e:	fa1f f885 	uxth.w	r8, r5
 8003642:	fa1f fb8c 	uxth.w	fp, ip
 8003646:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 800364a:	4441      	add	r1, r8
 800364c:	b212      	sxth	r2, r2
 800364e:	b200      	sxth	r0, r0
 8003650:	b209      	sxth	r1, r1
 8003652:	465b      	mov	r3, fp
 8003654:	f000 f9e8 	bl	8003a28 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003658:	9a02      	ldr	r2, [sp, #8]
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	eb09 0102 	add.w	r1, r9, r2
 8003660:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	eba3 0008 	sub.w	r0, r3, r8
 800366a:	b209      	sxth	r1, r1
 800366c:	465b      	mov	r3, fp
 800366e:	b212      	sxth	r2, r2
 8003670:	b200      	sxth	r0, r0
 8003672:	f000 f9d9 	bl	8003a28 <lcdDrawHLine>
    if (cornername & 0x2)
 8003676:	9b04      	ldr	r3, [sp, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0c7      	beq.n	800360c <lcdDrawFillCircleHelper+0x3e>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 800367c:	9901      	ldr	r1, [sp, #4]
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003684:	fa1f f986 	uxth.w	r9, r6
 8003688:	eba1 0009 	sub.w	r0, r1, r9
 800368c:	9902      	ldr	r1, [sp, #8]
 800368e:	fa1f f885 	uxth.w	r8, r5
 8003692:	fa1f fb8c 	uxth.w	fp, ip
 8003696:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 800369a:	eba1 0108 	sub.w	r1, r1, r8
 800369e:	b212      	sxth	r2, r2
 80036a0:	b200      	sxth	r0, r0
 80036a2:	b209      	sxth	r1, r1
 80036a4:	465b      	mov	r3, fp
 80036a6:	f000 f9bf 	bl	8003a28 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 80036aa:	9a02      	ldr	r2, [sp, #8]
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	eba2 0109 	sub.w	r1, r2, r9
 80036b2:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 80036b6:	9b01      	ldr	r3, [sp, #4]
 80036b8:	eba3 0008 	sub.w	r0, r3, r8
 80036bc:	b209      	sxth	r1, r1
 80036be:	465b      	mov	r3, fp
 80036c0:	b212      	sxth	r2, r2
 80036c2:	b200      	sxth	r0, r0
 80036c4:	f000 f9b0 	bl	8003a28 <lcdDrawHLine>
  while (y < r)
 80036c8:	42ae      	cmp	r6, r5
 80036ca:	dca1      	bgt.n	8003610 <lcdDrawFillCircleHelper+0x42>
    }
  }
}
 80036cc:	b006      	add	sp, #24
 80036ce:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080036d2 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 80036d2:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 80036d6:	b083      	sub	sp, #12
 80036d8:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 80036dc:	4689      	mov	r9, r1
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 80036de:	b2a1      	uxth	r1, r4
{
 80036e0:	461e      	mov	r6, r3
 80036e2:	4615      	mov	r5, r2
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 80036e4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80036e8:	fa1f f28a 	uxth.w	r2, sl
 80036ec:	4449      	add	r1, r9
 80036ee:	9200      	str	r2, [sp, #0]
{
 80036f0:	4680      	mov	r8, r0
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 80036f2:	b22a      	sxth	r2, r5
 80036f4:	b21b      	sxth	r3, r3
 80036f6:	b209      	sxth	r1, r1
 80036f8:	b200      	sxth	r0, r0
 80036fa:	f000 f9ba 	bl	8003a72 <lcdDrawFillRect>

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 80036fe:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003702:	eb09 0106 	add.w	r1, r9, r6
 8003706:	3d01      	subs	r5, #1
 8003708:	44a0      	add	r8, r4
 800370a:	1b09      	subs	r1, r1, r4
 800370c:	4640      	mov	r0, r8
 800370e:	4622      	mov	r2, r4
 8003710:	9500      	str	r5, [sp, #0]
 8003712:	3901      	subs	r1, #1
 8003714:	f8cd a004 	str.w	sl, [sp, #4]
 8003718:	2301      	movs	r3, #1
 800371a:	f7ff ff58 	bl	80035ce <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 800371e:	4640      	mov	r0, r8
 8003720:	eb09 0104 	add.w	r1, r9, r4
 8003724:	4622      	mov	r2, r4
 8003726:	2302      	movs	r3, #2
 8003728:	950a      	str	r5, [sp, #40]	; 0x28
 800372a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
}
 800372e:	b003      	add	sp, #12
 8003730:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003734:	f7ff bf4b 	b.w	80035ce <lcdDrawFillCircleHelper>

08003738 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return fps_count;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <lcdGetFps+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	2000028c 	.word	0x2000028c

08003750 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return fps_time;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <lcdGetFpsTime+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000288 	.word	0x20000288

08003768 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <lcdDrawAvailable+0x28>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f083 0301 	eor.w	r3, r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000282 	.word	0x20000282

08003794 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003794:	b598      	push	{r3, r4, r7, lr}
 8003796:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <lcdRequestDraw+0x5c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	f083 0301 	eor.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <lcdRequestDraw+0x16>
  {
    return false;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e020      	b.n	80037ec <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <lcdRequestDraw+0x60>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <lcdRequestDraw+0x22>
  {
    return false;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e01a      	b.n	80037ec <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <lcdRequestDraw+0x64>)
 80037b8:	689c      	ldr	r4, [r3, #8]
 80037ba:	237f      	movs	r3, #127	; 0x7f
 80037bc:	229f      	movs	r2, #159	; 0x9f
 80037be:	2100      	movs	r1, #0
 80037c0:	2000      	movs	r0, #0
 80037c2:	47a0      	blx	r4

  lcd_request_draw = true;
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <lcdRequestDraw+0x60>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <lcdRequestDraw+0x64>)
 80037cc:	699c      	ldr	r4, [r3, #24]
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <lcdRequestDraw+0x68>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	035b      	lsls	r3, r3, #13
 80037dc:	4a08      	ldr	r2, [pc, #32]	; (8003800 <lcdRequestDraw+0x6c>)
 80037de:	4413      	add	r3, r2
 80037e0:	2200      	movs	r2, #0
 80037e2:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80037e6:	4618      	mov	r0, r3
 80037e8:	47a0      	blx	r4

  return true;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd98      	pop	{r3, r4, r7, pc}
 80037f0:	20000280 	.word	0x20000280
 80037f4:	20000282 	.word	0x20000282
 80037f8:	20000264 	.word	0x20000264
 80037fc:	20000281 	.word	0x20000281
 8003800:	200002c0 	.word	0x200002c0

08003804 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <lcdUpdateDraw+0x54>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d118      	bne.n	800384a <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003818:	f7ff ffbc 	bl	8003794 <lcdRequestDraw>

  pre_time = millis();
 800381c:	f7fd fcf5 	bl	800120a <millis>
 8003820:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003822:	e009      	b.n	8003838 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003824:	2001      	movs	r0, #1
 8003826:	f7fd fce5 	bl	80011f4 <delay>
    if (millis()-pre_time >= 100)
 800382a:	f7fd fcee 	bl	800120a <millis>
 800382e:	4602      	mov	r2, r0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b63      	cmp	r3, #99	; 0x63
 8003836:	d80a      	bhi.n	800384e <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003838:	f7ff ff96 	bl	8003768 <lcdDrawAvailable>
 800383c:	4603      	mov	r3, r0
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ed      	bne.n	8003824 <lcdUpdateDraw+0x20>
 8003848:	e002      	b.n	8003850 <lcdUpdateDraw+0x4c>
    return;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <lcdUpdateDraw+0x4c>
    {
      break;
 800384e:	bf00      	nop
    }
  }
}
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000280 	.word	0x20000280

0800385c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <lcdGetFrameBuffer+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000290 	.word	0x20000290

08003874 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4623      	mov	r3, r4
 8003884:	80fb      	strh	r3, [r7, #6]
 8003886:	4603      	mov	r3, r0
 8003888:	80bb      	strh	r3, [r7, #4]
 800388a:	460b      	mov	r3, r1
 800388c:	807b      	strh	r3, [r7, #2]
 800388e:	4613      	mov	r3, r2
 8003890:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003892:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003896:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80038a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80038a4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80038a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ac:	1acb      	subs	r3, r1, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bfb8      	it	lt
 80038b2:	425b      	neglt	r3, r3
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bfcc      	ite	gt
 80038b8:	2301      	movgt	r3, #1
 80038ba:	2300      	movle	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80038c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	da01      	bge.n	80038cc <lcdDrawLine+0x58>
 80038c8:	2300      	movs	r3, #0
 80038ca:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80038cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da01      	bge.n	80038d8 <lcdDrawLine+0x64>
 80038d4:	2300      	movs	r3, #0
 80038d6:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80038d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da01      	bge.n	80038e4 <lcdDrawLine+0x70>
 80038e0:	2300      	movs	r3, #0
 80038e2:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 80038e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da01      	bge.n	80038f0 <lcdDrawLine+0x7c>
 80038ec:	2300      	movs	r3, #0
 80038ee:	803b      	strh	r3, [r7, #0]


  if (steep)
 80038f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	833b      	strh	r3, [r7, #24]
 80038fc:	88bb      	ldrh	r3, [r7, #4]
 80038fe:	80fb      	strh	r3, [r7, #6]
 8003900:	8b3b      	ldrh	r3, [r7, #24]
 8003902:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	82fb      	strh	r3, [r7, #22]
 8003908:	883b      	ldrh	r3, [r7, #0]
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003910:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003918:	429a      	cmp	r2, r3
 800391a:	dd0b      	ble.n	8003934 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	82bb      	strh	r3, [r7, #20]
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	80fb      	strh	r3, [r7, #6]
 8003924:	8abb      	ldrh	r3, [r7, #20]
 8003926:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003928:	88bb      	ldrh	r3, [r7, #4]
 800392a:	827b      	strh	r3, [r7, #18]
 800392c:	883b      	ldrh	r3, [r7, #0]
 800392e:	80bb      	strh	r3, [r7, #4]
 8003930:	8a7b      	ldrh	r3, [r7, #18]
 8003932:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003934:	887a      	ldrh	r2, [r7, #2]
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800393e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bfb8      	it	lt
 800394c:	425b      	neglt	r3, r3
 800394e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003950:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003954:	0fda      	lsrs	r2, r3, #31
 8003956:	4413      	add	r3, r2
 8003958:	105b      	asrs	r3, r3, #1
 800395a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 800395c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003960:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003964:	429a      	cmp	r2, r3
 8003966:	da02      	bge.n	800396e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003968:	2301      	movs	r3, #1
 800396a:	83bb      	strh	r3, [r7, #28]
 800396c:	e02d      	b.n	80039ca <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 800396e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003972:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003974:	e029      	b.n	80039ca <lcdDrawLine+0x156>
  {
    if (steep)
 8003976:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 800397e:	88bb      	ldrh	r3, [r7, #4]
 8003980:	88f9      	ldrh	r1, [r7, #6]
 8003982:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fce9 	bl	800335c <lcdDrawPixel>
 800398a:	e005      	b.n	8003998 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	88b9      	ldrh	r1, [r7, #4]
 8003990:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fce2 	bl	800335c <lcdDrawPixel>
    }
    err -= dy;
 8003998:	8bfa      	ldrh	r2, [r7, #30]
 800399a:	89fb      	ldrh	r3, [r7, #14]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80039a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da09      	bge.n	80039be <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80039aa:	88ba      	ldrh	r2, [r7, #4]
 80039ac:	8bbb      	ldrh	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80039b4:	8bfa      	ldrh	r2, [r7, #30]
 80039b6:	8a3b      	ldrh	r3, [r7, #16]
 80039b8:	4413      	add	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80039be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	80fb      	strh	r3, [r7, #6]
 80039ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	ddcf      	ble.n	8003976 <lcdDrawLine+0x102>
    }
  }
}
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}

080039de <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80039de:	b590      	push	{r4, r7, lr}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	4604      	mov	r4, r0
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	80fb      	strh	r3, [r7, #6]
 80039f0:	4603      	mov	r3, r0
 80039f2:	80bb      	strh	r3, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 80039fc:	88ba      	ldrh	r2, [r7, #4]
 80039fe:	887b      	ldrh	r3, [r7, #2]
 8003a00:	4413      	add	r3, r2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b21c      	sxth	r4, r3
 8003a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a0e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a12:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a16:	883b      	ldrh	r3, [r7, #0]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	f7ff ff2a 	bl	8003874 <lcdDrawLine>
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}

08003a28 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	80fb      	strh	r3, [r7, #6]
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80bb      	strh	r3, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	807b      	strh	r3, [r7, #2]
 8003a42:	4613      	mov	r3, r2
 8003a44:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b21a      	sxth	r2, r3
 8003a54:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003a58:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a60:	883b      	ldrh	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4623      	mov	r3, r4
 8003a66:	f7ff ff05 	bl	8003874 <lcdDrawLine>
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}

08003a72 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4604      	mov	r4, r0
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4623      	mov	r3, r4
 8003a82:	80fb      	strh	r3, [r7, #6]
 8003a84:	4603      	mov	r3, r0
 8003a86:	80bb      	strh	r3, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	81fb      	strh	r3, [r7, #14]
 8003a94:	e00e      	b.n	8003ab4 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8003a96:	8c3b      	ldrh	r3, [r7, #32]
 8003a98:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003aa0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003aa4:	f7ff ff9b 	bl	80039de <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8003aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	81fb      	strh	r3, [r7, #14]
 8003ab4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003ab8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ac0:	440b      	add	r3, r1
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	dbe7      	blt.n	8003a96 <lcdDrawFillRect+0x24>
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd90      	pop	{r4, r7, pc}
	...

08003ad0 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8003ad0:	b408      	push	{r3}
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b0d8      	sub	sp, #352	; 0x160
 8003ad6:	af02      	add	r7, sp, #8
 8003ad8:	f107 030c 	add.w	r3, r7, #12
 8003adc:	6018      	str	r0, [r3, #0]
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	6019      	str	r1, [r3, #0]
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8003ae8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003aec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8003afa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003afe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003b02:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003b06:	21ff      	movs	r1, #255	; 0xff
 8003b08:	f00f f8dc 	bl	8012cc4 <vsniprintf>
 8003b0c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8003b10:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <lcdPrintf+0x1e0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b67      	ldr	r3, [pc, #412]	; (8003cb4 <lcdPrintf+0x1e4>)
 8003b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d05d      	beq.n	8003bde <lcdPrintf+0x10e>
  {
    for( i=0; i<len; i+=Size_Char )
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b28:	e052      	b.n	8003bd0 <lcdPrintf+0x100>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8003b2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b32:	4413      	add	r3, r2
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <lcdPrintf+0x1e0>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	; (8003cb4 <lcdPrintf+0x1e4>)
 8003b3e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003b42:	f107 0108 	add.w	r1, r7, #8
 8003b46:	f107 000c 	add.w	r0, r7, #12
 8003b4a:	1dbb      	adds	r3, r7, #6
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	4623      	mov	r3, r4
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	6800      	ldr	r0, [r0, #0]
 8003b56:	f000 f903 	bl	8003d60 <disEngFont>

      Size_Char = 1;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <lcdPrintf+0x1e0>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <lcdPrintf+0x1e4>)
 8003b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8003b72:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <lcdPrintf+0x1e0>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <lcdPrintf+0x1e4>)
 8003b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8003b84:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	f107 010c 	add.w	r1, r7, #12
 8003b90:	6809      	ldr	r1, [r1, #0]
 8003b92:	440a      	add	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8003b96:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ba4:	dd0d      	ble.n	8003bc2 <lcdPrintf+0xf2>
      {
        x  = x_Pre;
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003bae:	601a      	str	r2, [r3, #0]
        y += font_height;
 8003bb0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	f107 0108 	add.w	r1, r7, #8
 8003bbc:	6809      	ldr	r1, [r1, #0]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8003bc2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003bc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003bca:	4413      	add	r3, r2
 8003bcc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003bd0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003bd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	dba6      	blt.n	8003b2a <lcdPrintf+0x5a>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8003bdc:	e060      	b.n	8003ca0 <lcdPrintf+0x1d0>
    for( i=0; i<len; i+=Size_Char )
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003be4:	e054      	b.n	8003c90 <lcdPrintf+0x1c0>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8003be6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003bea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003bee:	4413      	add	r3, r2
 8003bf0:	f107 0214 	add.w	r2, r7, #20
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fc30 	bl	800645c <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f107 0214 	add.w	r2, r7, #20
 8003c04:	f107 0108 	add.w	r1, r7, #8
 8003c08:	f107 000c 	add.w	r0, r7, #12
 8003c0c:	6809      	ldr	r1, [r1, #0]
 8003c0e:	6800      	ldr	r0, [r0, #0]
 8003c10:	f000 f852 	bl	8003cb8 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	885b      	ldrh	r3, [r3, #2]
 8003c1a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8003c1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	dd0a      	ble.n	8003c3c <lcdPrintf+0x16c>
        font_width = 16;
 8003c26:	2310      	movs	r3, #16
 8003c28:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	f107 020c 	add.w	r2, r7, #12
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	3210      	adds	r2, #16
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e009      	b.n	8003c50 <lcdPrintf+0x180>
        font_width = 8;
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	f107 020c 	add.w	r2, r7, #12
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8003c50:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	2ba0      	cmp	r3, #160	; 0xa0
 8003c5e:	dd0b      	ble.n	8003c78 <lcdPrintf+0x1a8>
        x  = x_Pre;
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003c68:	601a      	str	r2, [r3, #0]
        y += 16;
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	f107 0208 	add.w	r2, r7, #8
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	3210      	adds	r2, #16
 8003c76:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	889b      	ldrh	r3, [r3, #4]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d00d      	beq.n	8003c9e <lcdPrintf+0x1ce>
    for( i=0; i<len; i+=Size_Char )
 8003c82:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003c86:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c90:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003c94:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dba4      	blt.n	8003be6 <lcdPrintf+0x116>
}
 8003c9c:	e000      	b.n	8003ca0 <lcdPrintf+0x1d0>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8003c9e:	bf00      	nop
}
 8003ca0:	bf00      	nop
 8003ca2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003cac:	b001      	add	sp, #4
 8003cae:	4770      	bx	lr
 8003cb0:	2000001d 	.word	0x2000001d
 8003cb4:	20000020 	.word	0x20000020

08003cb8 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	885b      	ldrh	r3, [r3, #2]
 8003cca:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8003ccc:	8b3b      	ldrh	r3, [r7, #24]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <disHanFont+0x1e>
  {
    FontSize = 2;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	83fb      	strh	r3, [r7, #30]
 8003cda:	e03a      	b.n	8003d52 <disHanFont+0x9a>
  {
    index_x = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	83bb      	strh	r3, [r7, #28]
 8003ce4:	e02e      	b.n	8003d44 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8003ce6:	8bfb      	ldrh	r3, [r7, #30]
 8003ce8:	8b3a      	ldrh	r2, [r7, #24]
 8003cea:	fb02 f203 	mul.w	r2, r2, r3
 8003cee:	8bbb      	ldrh	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	799b      	ldrb	r3, [r3, #6]
 8003cf8:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	837b      	strh	r3, [r7, #26]
 8003cfe:	e01b      	b.n	8003d38 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8003d00:	7d7a      	ldrb	r2, [r7, #21]
 8003d02:	8b7b      	ldrh	r3, [r7, #26]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00d      	beq.n	8003d2c <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	8afb      	ldrh	r3, [r7, #22]
 8003d16:	4413      	add	r3, r2
 8003d18:	b298      	uxth	r0, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	8bfb      	ldrh	r3, [r7, #30]
 8003d20:	4413      	add	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	887a      	ldrh	r2, [r7, #2]
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7ff fb18 	bl	800335c <lcdDrawPixel>
        }
        index_x++;
 8003d2c:	8afb      	ldrh	r3, [r7, #22]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8003d32:	8b7b      	ldrh	r3, [r7, #26]
 8003d34:	3301      	adds	r3, #1
 8003d36:	837b      	strh	r3, [r7, #26]
 8003d38:	8b7b      	ldrh	r3, [r7, #26]
 8003d3a:	2b07      	cmp	r3, #7
 8003d3c:	d9e0      	bls.n	8003d00 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8003d3e:	8bbb      	ldrh	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	83bb      	strh	r3, [r7, #28]
 8003d44:	8bba      	ldrh	r2, [r7, #28]
 8003d46:	8b3b      	ldrh	r3, [r7, #24]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d3cc      	bcc.n	8003ce6 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8003d4c:	8bfb      	ldrh	r3, [r7, #30]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	83fb      	strh	r3, [r7, #30]
 8003d52:	8bfb      	ldrh	r3, [r7, #30]
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	d9c1      	bls.n	8003cdc <disHanFont+0x24>
      }
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e035      	b.n	8003de2 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	3b20      	subs	r3, #32
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	7849      	ldrb	r1, [r1, #1]
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	440b      	add	r3, r1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e01a      	b.n	8003dd0 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00f      	beq.n	8003dca <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	b298      	uxth	r0, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f7ff fac9 	bl	800335c <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d3de      	bcc.n	8003d9a <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	461a      	mov	r2, r3
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d3c3      	bcc.n	8003d76 <disEngFont+0x16>
      }
    }
  }
}
 8003dee:	bf00      	nop
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <lcdSetFont+0x1c>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	7013      	strb	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	2000001d 	.word	0x2000001d

08003e18 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af02      	add	r7, sp, #8
 8003e1e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d163      	bne.n	8003ef4 <cliLcd+0xdc>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	4937      	ldr	r1, [pc, #220]	; (8003f10 <cliLcd+0xf8>)
 8003e32:	2000      	movs	r0, #0
 8003e34:	4798      	blx	r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05b      	beq.n	8003ef4 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8003e3c:	2003      	movs	r0, #3
 8003e3e:	f7ff ffdb 	bl	8003df8 <lcdSetFont>

    while(cliKeepLoop())
 8003e42:	e04b      	b.n	8003edc <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8003e44:	f7ff fc90 	bl	8003768 <lcdDrawAvailable>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d046      	beq.n	8003edc <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7ff fa90 	bl	8003374 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8003e54:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <cliLcd+0xfc>)
 8003e56:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2019      	movs	r0, #25
 8003e5e:	f7ff fe37 	bl	8003ad0 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8003e62:	f7ff fc69 	bl	8003738 <lcdGetFps>
 8003e66:	4603      	mov	r3, r0
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <cliLcd+0x100>)
 8003e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e70:	2110      	movs	r1, #16
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7ff fe2c 	bl	8003ad0 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8003e78:	f7ff fc6a 	bl	8003750 <lcdGetFpsTime>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <cliLcd+0x104>)
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	2120      	movs	r1, #32
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7ff fe21 	bl	8003ad0 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8003e8e:	f7fd f9bc 	bl	800120a <millis>
 8003e92:	4603      	mov	r3, r0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <cliLcd+0x104>)
 8003e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9c:	2130      	movs	r1, #48	; 0x30
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7ff fe16 	bl	8003ad0 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8003ea4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	230a      	movs	r3, #10
 8003eac:	220a      	movs	r2, #10
 8003eae:	2146      	movs	r1, #70	; 0x46
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7ff fdde 	bl	8003a72 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8003eb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	230a      	movs	r3, #10
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	2146      	movs	r1, #70	; 0x46
 8003ec2:	200a      	movs	r0, #10
 8003ec4:	f7ff fdd5 	bl	8003a72 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8003ec8:	231f      	movs	r3, #31
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	230a      	movs	r3, #10
 8003ece:	220a      	movs	r2, #10
 8003ed0:	2146      	movs	r1, #70	; 0x46
 8003ed2:	2014      	movs	r0, #20
 8003ed4:	f7ff fdcd 	bl	8003a72 <lcdDrawFillRect>

        lcdRequestDraw();
 8003ed8:	f7ff fc5c 	bl	8003794 <lcdRequestDraw>
    while(cliKeepLoop())
 8003edc:	f7fe faf4 	bl	80024c8 <cliKeepLoop>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ae      	bne.n	8003e44 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f7ff fa44 	bl	8003374 <lcdClearBuffer>
    lcdUpdateDraw();
 8003eec:	f7ff fc8a 	bl	8003804 <lcdUpdateDraw>

    ret = true;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <cliLcd+0xee>
  {
    cliPrintf("lcd test\n");
 8003f00:	4807      	ldr	r0, [pc, #28]	; (8003f20 <cliLcd+0x108>)
 8003f02:	f7fe f9e7 	bl	80022d4 <cliPrintf>
  }
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	080148c8 	.word	0x080148c8
 8003f14:	080148d0 	.word	0x080148d0
 8003f18:	080148e0 	.word	0x080148e0
 8003f1c:	080148e8 	.word	0x080148e8
 8003f20:	080148f0 	.word	0x080148f0

08003f24 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
  bool ret = true;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <ledInit+0x8c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <ledInit+0x8c>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <ledInit+0x8c>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	e016      	b.n	8003f98 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8003f6a:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <ledInit+0x90>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	889b      	ldrh	r3, [r3, #4]
 8003f74:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8003f76:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <ledInit+0x90>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f7e:	1d3a      	adds	r2, r7, #4
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f008 fb58 	bl	800c638 <HAL_GPIO_Init>

    ledOff(i);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f837 	bl	8004000 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dde5      	ble.n	8003f6a <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003f9e:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <ledInit+0x94>)
 8003fa0:	4806      	ldr	r0, [pc, #24]	; (8003fbc <ledInit+0x98>)
 8003fa2:	f7fe faa7 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8003fa6:	7efb      	ldrb	r3, [r7, #27]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	20000030 	.word	0x20000030
 8003fb8:	08004079 	.word	0x08004079
 8003fbc:	080145c8 	.word	0x080145c8

08003fc0 <ledOn>:

void ledOn(uint8_t ch)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d111      	bne.n	8003ff4 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <ledOn+0x3c>)
 8003fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <ledOn+0x3c>)
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	8899      	ldrh	r1, [r3, #4]
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <ledOn+0x3c>)
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	799b      	ldrb	r3, [r3, #6]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f008 fd9f 	bl	800cb30 <HAL_GPIO_WritePin>
 8003ff2:	e000      	b.n	8003ff6 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8003ff4:	bf00      	nop
}
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000030 	.word	0x20000030

08004000 <ledOff>:

void ledOff(uint8_t ch)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <ledOff+0x3c>)
 8004014:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	4a08      	ldr	r2, [pc, #32]	; (800403c <ledOff+0x3c>)
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4413      	add	r3, r2
 8004020:	8899      	ldrh	r1, [r3, #4]
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	4a05      	ldr	r2, [pc, #20]	; (800403c <ledOff+0x3c>)
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	79db      	ldrb	r3, [r3, #7]
 800402c:	461a      	mov	r2, r3
 800402e:	f008 fd7f 	bl	800cb30 <HAL_GPIO_WritePin>
 8004032:	e000      	b.n	8004036 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8004034:	bf00      	nop
}
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000030 	.word	0x20000030

08004040 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10c      	bne.n	800406a <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <ledToggle+0x34>)
 8004054:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a06      	ldr	r2, [pc, #24]	; (8004074 <ledToggle+0x34>)
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	889b      	ldrh	r3, [r3, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	f008 fd7d 	bl	800cb62 <HAL_GPIO_TogglePin>
 8004068:	e000      	b.n	800406c <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800406a:	bf00      	nop
}
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000030 	.word	0x20000030

08004078 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004080:	2300      	movs	r3, #0
 8004082:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d133      	bne.n	80040f4 <cliLed+0x7c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	491f      	ldr	r1, [pc, #124]	; (8004110 <cliLed+0x98>)
 8004092:	2000      	movs	r0, #0
 8004094:	4798      	blx	r3
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02b      	beq.n	80040f4 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2001      	movs	r0, #1
 80040a2:	4798      	blx	r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2002      	movs	r0, #2
 80040ae:	4798      	blx	r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 80040b4:	7dbb      	ldrb	r3, [r7, #22]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <cliLed+0x48>
    {
      led_ch--;
 80040ba:	7dbb      	ldrb	r3, [r7, #22]
 80040bc:	3b01      	subs	r3, #1
 80040be:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 80040c0:	f7fd f8a3 	bl	800120a <millis>
 80040c4:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 80040c6:	e00e      	b.n	80040e6 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 80040c8:	f7fd f89f 	bl	800120a <millis>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d806      	bhi.n	80040e6 <cliLed+0x6e>
      {
        pre_time = millis();
 80040d8:	f7fd f897 	bl	800120a <millis>
 80040dc:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff ffad 	bl	8004040 <ledToggle>
    while(cliKeepLoop())
 80040e6:	f7fe f9ef 	bl	80024c8 <cliKeepLoop>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1eb      	bne.n	80040c8 <cliLed+0x50>
      }
    }

    ret = true;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	f083 0301 	eor.w	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8004100:	2101      	movs	r1, #1
 8004102:	4804      	ldr	r0, [pc, #16]	; (8004114 <cliLed+0x9c>)
 8004104:	f7fe f8e6 	bl	80022d4 <cliPrintf>
  }
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	080145cc 	.word	0x080145cc
 8004114:	080145d4 	.word	0x080145d4

08004118 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <DWT_Delay_us+0x3c>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004126:	f009 f93f 	bl	800d3a8 <HAL_RCC_GetHCLKFreq>
 800412a:	4602      	mov	r2, r0
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <DWT_Delay_us+0x40>)
 800412e:	fba3 2302 	umull	r2, r3, r3, r2
 8004132:	0c9b      	lsrs	r3, r3, #18
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800413c:	bf00      	nop
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <DWT_Delay_us+0x3c>)
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3f8      	bcc.n	800413e <DWT_Delay_us+0x26>
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e0001000 	.word	0xe0001000
 8004158:	431bde83 	.word	0x431bde83

0800415c <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	619a      	str	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	889a      	ldrh	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	619a      	str	r2, [r3, #24]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80041aa:	2302      	movs	r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	889b      	ldrh	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f107 020c 	add.w	r2, r7, #12
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f008 fa3a 	bl	800c638 <HAL_GPIO_Init>
}
 80041c4:	bf00      	nop
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80041d4:	2311      	movs	r3, #17
 80041d6:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80041dc:	2302      	movs	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	889b      	ldrh	r3, [r3, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f107 020c 	add.w	r2, r7, #12
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f008 fa21 	bl	800c638 <HAL_GPIO_Init>

}
 80041f6:	bf00      	nop
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7ff ffd7 	bl	80041cc <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ffac 	bl	800417c <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8004224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004228:	f7ff ff76 	bl	8004118 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff ff95 	bl	800415c <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8004232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004236:	f7ff ff6f 	bl	8004118 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff ff9e 	bl	800417c <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8004240:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004244:	f7ff ff68 	bl	8004118 <DWT_Delay_us>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff7f 	bl	800415c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ffb4 	bl	80041cc <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004264:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004268:	f7ff ff56 	bl	8004118 <DWT_Delay_us>
	DWT_Delay_us(20);
 800426c:	2014      	movs	r0, #20
 800426e:	f7ff ff53 	bl	8004118 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff91 	bl	800419a <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004278:	2046      	movs	r0, #70	; 0x46
 800427a:	f7ff ff4d 	bl	8004118 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	889b      	ldrh	r3, [r3, #4]
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f008 fc39 	bl	800cb00 <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004292:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004296:	f7ff ff3f 	bl	8004118 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
	if (bit)
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff50 	bl	800415c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff85 	bl	80041cc <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 80042c2:	200a      	movs	r0, #10
 80042c4:	f7ff ff28 	bl	8004118 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff66 	bl	800419a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 80042ce:	2037      	movs	r0, #55	; 0x37
 80042d0:	f7ff ff22 	bl	8004118 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ff60 	bl	800419a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80042da:	e011      	b.n	8004300 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff3d 	bl	800415c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ff72 	bl	80041cc <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 80042e8:	2041      	movs	r0, #65	; 0x41
 80042ea:	f7ff ff15 	bl	8004118 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff53 	bl	800419a <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 80042f4:	2005      	movs	r0, #5
 80042f6:	f7ff ff0f 	bl	8004118 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff4d 	bl	800419a <ONEWIRE_INPUT>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff21 	bl	800415c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ff56 	bl	80041cc <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8004320:	2002      	movs	r0, #2
 8004322:	f7ff fef9 	bl	8004118 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff ff37 	bl	800419a <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 800432c:	200a      	movs	r0, #10
 800432e:	f7ff fef3 	bl	8004118 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	889b      	ldrh	r3, [r3, #4]
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f008 fbdf 	bl	800cb00 <HAL_GPIO_ReadPin>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 800434c:	2032      	movs	r0, #50	; 0x32
 800434e:	f7ff fee3 	bl	8004118 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004368:	2308      	movs	r3, #8
 800436a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 800436c:	e00a      	b.n	8004384 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff93 	bl	80042a4 <OneWire_WriteBit>
		byte >>= 1;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	73fa      	strb	r2, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <OneWire_WriteByte+0x12>
	}
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800439e:	2308      	movs	r3, #8
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	2300      	movs	r3, #0
 80043a4:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80043a6:	e00d      	b.n	80043c4 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80043a8:	7bbb      	ldrb	r3, [r7, #14]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ffaa 	bl	8004308 <OneWire_ReadBit>
 80043b4:	4603      	mov	r3, r0
 80043b6:	01db      	lsls	r3, r3, #7
 80043b8:	b25a      	sxtb	r2, r3
 80043ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043be:	4313      	orrs	r3, r2
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	73fa      	strb	r2, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ec      	bne.n	80043a8 <OneWire_ReadByte+0x12>
	}

	return byte;
 80043ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f816 	bl	8004412 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80043e6:	21f0      	movs	r1, #240	; 0xf0
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f825 	bl	8004438 <OneWire_Search>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004400:	21f0      	movs	r1, #240	; 0xf0
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f818 	bl	8004438 <OneWire_Search>
 8004408:	4603      	mov	r3, r0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	71da      	strb	r2, [r3, #7]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004450:	2301      	movs	r3, #1
 8004452:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7a1b      	ldrb	r3, [r3, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 809a 	bne.w	8004596 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fef4 	bl	8004250 <OneWire_Reset>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	71da      	strb	r2, [r3, #7]
			return 0;
 8004480:	2300      	movs	r3, #0
 8004482:	e09b      	b.n	80045bc <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff67 	bl	800435c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff3a 	bl	8004308 <OneWire_ReadBit>
 8004494:	4603      	mov	r3, r0
 8004496:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff35 	bl	8004308 <OneWire_ReadBit>
 800449e:	4603      	mov	r3, r0
 80044a0:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80044a2:	7a7b      	ldrb	r3, [r7, #9]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d102      	bne.n	80044ae <OneWire_Search+0x76>
 80044a8:	7a3b      	ldrb	r3, [r7, #8]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d064      	beq.n	8004578 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80044ae:	7a7a      	ldrb	r2, [r7, #9]
 80044b0:	7a3b      	ldrb	r3, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d002      	beq.n	80044bc <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80044b6:	7a7b      	ldrb	r3, [r7, #9]
 80044b8:	72bb      	strb	r3, [r7, #10]
 80044ba:	e026      	b.n	800450a <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	799b      	ldrb	r3, [r3, #6]
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d20d      	bcs.n	80044e2 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80044c6:	7b7b      	ldrb	r3, [r7, #13]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	7a5a      	ldrb	r2, [r3, #9]
 80044ce:	7afb      	ldrb	r3, [r7, #11]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	72bb      	strb	r3, [r7, #10]
 80044e0:	e008      	b.n	80044f4 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	799b      	ldrb	r3, [r3, #6]
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80044f4:	7abb      	ldrb	r3, [r7, #10]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80044fe:	7bbb      	ldrb	r3, [r7, #14]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d802      	bhi.n	800450a <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7bba      	ldrb	r2, [r7, #14]
 8004508:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800450a:	7abb      	ldrb	r3, [r7, #10]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10c      	bne.n	800452a <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8004510:	7b7b      	ldrb	r3, [r7, #13]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	7a59      	ldrb	r1, [r3, #9]
 8004518:	7b7b      	ldrb	r3, [r7, #13]
 800451a:	7afa      	ldrb	r2, [r7, #11]
 800451c:	430a      	orrs	r2, r1
 800451e:	b2d1      	uxtb	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	460a      	mov	r2, r1
 8004526:	725a      	strb	r2, [r3, #9]
 8004528:	e010      	b.n	800454c <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800452a:	7b7b      	ldrb	r3, [r7, #13]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	7a5b      	ldrb	r3, [r3, #9]
 8004532:	b25a      	sxtb	r2, r3
 8004534:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004538:	43db      	mvns	r3, r3
 800453a:	b25b      	sxtb	r3, r3
 800453c:	4013      	ands	r3, r2
 800453e:	b25a      	sxtb	r2, r3
 8004540:	7b7b      	ldrb	r3, [r7, #13]
 8004542:	b2d1      	uxtb	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	460a      	mov	r2, r1
 800454a:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800454c:	7abb      	ldrb	r3, [r7, #10]
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fea7 	bl	80042a4 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	3301      	adds	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8004562:	7afb      	ldrb	r3, [r7, #11]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8004568:	7b7b      	ldrb	r3, [r7, #13]
 800456a:	3301      	adds	r3, #1
 800456c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8004572:	7b7b      	ldrb	r3, [r7, #13]
 8004574:	2b07      	cmp	r3, #7
 8004576:	d98a      	bls.n	800448e <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d90b      	bls.n	8004596 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7bba      	ldrb	r2, [r7, #14]
 8004582:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	799b      	ldrb	r3, [r3, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8004596:	7b3b      	ldrb	r3, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <OneWire_Search+0x16c>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	7a5b      	ldrb	r3, [r3, #9]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80045ba:	7b3b      	ldrb	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80045ce:	2155      	movs	r1, #85	; 0x55
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fec3 	bl	800435c <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e00a      	b.n	80045f2 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff feb8 	bl	800435c <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	3301      	adds	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b07      	cmp	r3, #7
 80045f6:	d9f1      	bls.n	80045dc <OneWire_SelectWithPointer+0x18>
	}
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	e00a      	b.n	8004626 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	440b      	add	r3, r1
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	440a      	add	r2, r1
 800461c:	7a52      	ldrb	r2, [r2, #9]
 800461e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	3301      	adds	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	2b07      	cmp	r3, #7
 800462a:	d9f1      	bls.n	8004610 <OneWire_GetFullROM+0x10>
	}
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  bool ret = false;
 800463e:	2300      	movs	r3, #0
 8004640:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <sdInit+0x80>)
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <sdInit+0x84>)
 8004646:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <sdInit+0x80>)
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <sdInit+0x80>)
 8004650:	2200      	movs	r2, #0
 8004652:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004654:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <sdInit+0x80>)
 8004656:	2200      	movs	r2, #0
 8004658:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <sdInit+0x80>)
 800465c:	2200      	movs	r2, #0
 800465e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <sdInit+0x80>)
 8004662:	2200      	movs	r2, #0
 8004664:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <sdInit+0x80>)
 8004668:	2200      	movs	r2, #0
 800466a:	619a      	str	r2, [r3, #24]


  is_detected = false;
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <sdInit+0x88>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <sdInit+0x88>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <sdInit+0x88>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00f      	beq.n	80046a0 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8004680:	480d      	ldr	r0, [pc, #52]	; (80046b8 <sdInit+0x80>)
 8004682:	f008 fec5 	bl	800d410 <HAL_SD_Init>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 800468c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004690:	4809      	ldr	r0, [pc, #36]	; (80046b8 <sdInit+0x80>)
 8004692:	f009 fc91 	bl	800dfb8 <HAL_SD_ConfigWideBusOperation>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <sdInit+0x68>
      {
        ret = true;
 800469c:	2301      	movs	r3, #1
 800469e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <sdInit+0x8c>)
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80046a6:	4908      	ldr	r1, [pc, #32]	; (80046c8 <sdInit+0x90>)
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <sdInit+0x94>)
 80046aa:	f7fd ff23 	bl	80024f4 <cliAdd>
#endif

  return ret;
 80046ae:	79fb      	ldrb	r3, [r7, #7]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000ac04 	.word	0x2000ac04
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	2000a2c1 	.word	0x2000a2c1
 80046c4:	2000a2c0 	.word	0x2000a2c0
 80046c8:	08004bb5 	.word	0x08004bb5
 80046cc:	080145f4 	.word	0x080145f4

080046d0 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return is_init;
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <sdIsInit+0x14>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000a2c0 	.word	0x2000a2c0

080046e8 <sdIsDetected>:

bool sdIsDetected(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7fe fc8f 	bl	8003010 <gpioPinRead>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <sdIsDetected+0x18>
  {
    is_detected = true;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <sdIsDetected+0x28>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	e002      	b.n	8004706 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <sdIsDetected+0x28>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8004706:	4b02      	ldr	r3, [pc, #8]	; (8004710 <sdIsDetected+0x28>)
 8004708:	781b      	ldrb	r3, [r3, #0]
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2000a2c1 	.word	0x2000a2c1

08004714 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8004714:	b5b0      	push	{r4, r5, r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800471c:	2300      	movs	r3, #0
 800471e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <sdGetInfo+0xa4>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d03d      	beq.n	80047aa <sdGetInfo+0x96>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	4821      	ldr	r0, [pc, #132]	; (80047bc <sdGetInfo+0xa8>)
 8004736:	f009 fc13 	bl	800df60 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 800475e:	6a3a      	ldr	r2, [r7, #32]
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	4619      	mov	r1, r3
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f04f 0400 	mov.w	r4, #0
 800477c:	fb03 f502 	mul.w	r5, r3, r2
 8004780:	fb01 f004 	mul.w	r0, r1, r4
 8004784:	4428      	add	r0, r5
 8004786:	fba1 3403 	umull	r3, r4, r1, r3
 800478a:	1902      	adds	r2, r0, r4
 800478c:	4614      	mov	r4, r2
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	0d19      	lsrs	r1, r3, #20
 8004798:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
 800479c:	0d22      	lsrs	r2, r4, #20
 800479e:	460a      	mov	r2, r1
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	621a      	str	r2, [r3, #32]
    ret = true;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80047aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3730      	adds	r7, #48	; 0x30
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bdb0      	pop	{r4, r5, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2000a2c0 	.word	0x2000a2c0
 80047bc:	2000ac04 	.word	0x2000ac04

080047c0 <sdIsBusy>:

bool sdIsBusy(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80047c6:	4808      	ldr	r0, [pc, #32]	; (80047e8 <sdIsBusy+0x28>)
 80047c8:	f009 fc72 	bl	800e0b0 <HAL_SD_GetCardState>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d102      	bne.n	80047d8 <sdIsBusy+0x18>
  {
    is_busy = false;
 80047d2:	2300      	movs	r3, #0
 80047d4:	71fb      	strb	r3, [r7, #7]
 80047d6:	e001      	b.n	80047dc <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80047d8:	2301      	movs	r3, #1
 80047da:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80047dc:	79fb      	ldrb	r3, [r7, #7]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000ac04 	.word	0x2000ac04

080047ec <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 80047f4:	f7fc fd09 	bl	800120a <millis>
 80047f8:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 80047fa:	e009      	b.n	8004810 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 80047fc:	f7ff ffe0 	bl	80047c0 <sdIsBusy>
 8004800:	4603      	mov	r3, r0
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <sdIsReady+0x24>
    {
      return true;
 800480c:	2301      	movs	r3, #1
 800480e:	e008      	b.n	8004822 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8004810:	f7fc fcfb 	bl	800120a <millis>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d8ed      	bhi.n	80047fc <sdIsReady+0x10>
    }
  }

  return false;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  bool ret = false;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <sdReadBlocks+0x8c>)
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	481c      	ldr	r0, [pc, #112]	; (80048bc <sdReadBlocks+0x90>)
 800484c:	f008 fe70 	bl	800d530 <HAL_SD_ReadBlocks_DMA>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d12a      	bne.n	80048ac <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8004856:	f7fc fcd8 	bl	800120a <millis>
 800485a:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 800485c:	e007      	b.n	800486e <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800485e:	f7fc fcd4 	bl	800120a <millis>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d908      	bls.n	8004880 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <sdReadBlocks+0x8c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ef      	bne.n	800485e <sdReadBlocks+0x32>
 800487e:	e00d      	b.n	800489c <sdReadBlocks+0x70>
      {
        break;
 8004880:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8004882:	e00b      	b.n	800489c <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8004884:	f7fc fcc1 	bl	800120a <millis>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8004894:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <sdReadBlocks+0x8c>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
        break;
 800489a:	e004      	b.n	80048a6 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 800489c:	f7ff ff90 	bl	80047c0 <sdIsBusy>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ee      	bne.n	8004884 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <sdReadBlocks+0x8c>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2000a2c2 	.word	0x2000a2c2
 80048bc:	2000ac04 	.word	0x2000ac04

080048c0 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <sdWriteBlocks+0x90>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	481d      	ldr	r0, [pc, #116]	; (8004954 <sdWriteBlocks+0x94>)
 80048e0:	f008 ff10 	bl	800d704 <HAL_SD_WriteBlocks_DMA>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12d      	bne.n	8004946 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 80048ea:	f7fc fc8e 	bl	800120a <millis>
 80048ee:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 80048f0:	e007      	b.n	8004902 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80048f2:	f7fc fc8a 	bl	800120a <millis>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d908      	bls.n	8004914 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <sdWriteBlocks+0x90>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f083 0301 	eor.w	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ef      	bne.n	80048f2 <sdWriteBlocks+0x32>
 8004912:	e000      	b.n	8004916 <sdWriteBlocks+0x56>
      {
        break;
 8004914:	bf00      	nop
      }
    }
    pre_time = millis();
 8004916:	f7fc fc78 	bl	800120a <millis>
 800491a:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 800491c:	e00b      	b.n	8004936 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 800491e:	f7fc fc74 	bl	800120a <millis>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d803      	bhi.n	8004936 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <sdWriteBlocks+0x90>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
        break;
 8004934:	e004      	b.n	8004940 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8004936:	f7ff ff43 	bl	80047c0 <sdIsBusy>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <sdWriteBlocks+0x90>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	2000a2c3 	.word	0x2000a2c3
 8004954:	2000ac04 	.word	0x2000ac04

08004958 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_SD_RxCpltCallback+0x1c>)
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000a2c2 	.word	0x2000a2c2

08004978 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_SD_TxCpltCallback+0x1c>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	2000a2c3 	.word	0x2000a2c3

08004998 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a0:	f107 031c 	add.w	r3, r7, #28
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a77      	ldr	r2, [pc, #476]	; (8004b94 <HAL_SD_MspInit+0x1fc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	f040 80e8 	bne.w	8004b8c <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4a74      	ldr	r2, [pc, #464]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ca:	6313      	str	r3, [r2, #48]	; 0x30
 80049cc:	4b72      	ldr	r3, [pc, #456]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	4b6e      	ldr	r3, [pc, #440]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e0:	4a6d      	ldr	r2, [pc, #436]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049e6:	6453      	str	r3, [r2, #68]	; 0x44
 80049e8:	4b6b      	ldr	r3, [pc, #428]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	4a66      	ldr	r2, [pc, #408]	; (8004b98 <HAL_SD_MspInit+0x200>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6313      	str	r3, [r2, #48]	; 0x30
 8004a04:	4b64      	ldr	r3, [pc, #400]	; (8004b98 <HAL_SD_MspInit+0x200>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	4b60      	ldr	r3, [pc, #384]	; (8004b98 <HAL_SD_MspInit+0x200>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4a5f      	ldr	r2, [pc, #380]	; (8004b98 <HAL_SD_MspInit+0x200>)
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a20:	4b5d      	ldr	r3, [pc, #372]	; (8004b98 <HAL_SD_MspInit+0x200>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8004a2c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8004a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a32:	2302      	movs	r3, #2
 8004a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004a3e:	230c      	movs	r3, #12
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a42:	f107 031c 	add.w	r3, r7, #28
 8004a46:	4619      	mov	r1, r3
 8004a48:	4854      	ldr	r0, [pc, #336]	; (8004b9c <HAL_SD_MspInit+0x204>)
 8004a4a:	f007 fdf5 	bl	800c638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8004a4e:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004a60:	230c      	movs	r3, #12
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	f107 031c 	add.w	r3, r7, #28
 8004a68:	4619      	mov	r1, r3
 8004a6a:	484d      	ldr	r0, [pc, #308]	; (8004ba0 <HAL_SD_MspInit+0x208>)
 8004a6c:	f007 fde4 	bl	800c638 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8004a70:	4b4c      	ldr	r3, [pc, #304]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a72:	4a4d      	ldr	r2, [pc, #308]	; (8004ba8 <HAL_SD_MspInit+0x210>)
 8004a74:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004a76:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a7c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a7e:	4b49      	ldr	r3, [pc, #292]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a84:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a8a:	4b46      	ldr	r3, [pc, #280]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a90:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a92:	4b44      	ldr	r3, [pc, #272]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a98:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a9a:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004a9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004aa0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004aa2:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004aba:	4b3a      	ldr	r3, [pc, #232]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004abc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004ac2:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004ac4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004aca:	4836      	ldr	r0, [pc, #216]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004acc:	f007 f9ba 	bl	800be44 <HAL_DMA_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8004ad6:	f7fc fc07 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a31      	ldr	r2, [pc, #196]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae0:	4a30      	ldr	r2, [pc, #192]	; (8004ba4 <HAL_SD_MspInit+0x20c>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8004ae6:	4b31      	ldr	r3, [pc, #196]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004ae8:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <HAL_SD_MspInit+0x218>)
 8004aea:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004aec:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004af2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004af4:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b00:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b06:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b0e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b10:	4b26      	ldr	r3, [pc, #152]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b16:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b1e:	4b23      	ldr	r3, [pc, #140]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b26:	2204      	movs	r2, #4
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004b30:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004b38:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004b40:	481a      	ldr	r0, [pc, #104]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b42:	f007 f97f 	bl	800be44 <HAL_DMA_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8004b4c:	f7fc fbcc 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b56:	4a15      	ldr	r2, [pc, #84]	; (8004bac <HAL_SD_MspInit+0x214>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2103      	movs	r1, #3
 8004b60:	2031      	movs	r0, #49	; 0x31
 8004b62:	f007 f92a 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004b66:	2031      	movs	r0, #49	; 0x31
 8004b68:	f007 f943 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2103      	movs	r1, #3
 8004b70:	203b      	movs	r0, #59	; 0x3b
 8004b72:	f007 f922 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004b76:	203b      	movs	r0, #59	; 0x3b
 8004b78:	f007 f93b 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2103      	movs	r1, #3
 8004b80:	2045      	movs	r0, #69	; 0x45
 8004b82:	f007 f91a 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004b86:	2045      	movs	r0, #69	; 0x45
 8004b88:	f007 f933 	bl	800bdf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3730      	adds	r7, #48	; 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40020000 	.word	0x40020000
 8004ba0:	40020400 	.word	0x40020400
 8004ba4:	2000ab44 	.word	0x2000ab44
 8004ba8:	400264a0 	.word	0x400264a0
 8004bac:	2000aba4 	.word	0x2000aba4
 8004bb0:	40026458 	.word	0x40026458

08004bb4 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d179      	bne.n	8004cc4 <cliSd+0x110>
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	4968      	ldr	r1, [pc, #416]	; (8004d78 <cliSd+0x1c4>)
 8004bd8:	2000      	movs	r0, #0
 8004bda:	4798      	blx	r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d070      	beq.n	8004cc4 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <cliSd+0x1c8>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	4619      	mov	r1, r3
 8004be8:	4865      	ldr	r0, [pc, #404]	; (8004d80 <cliSd+0x1cc>)
 8004bea:	f7fd fb73 	bl	80022d4 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8004bee:	4b65      	ldr	r3, [pc, #404]	; (8004d84 <cliSd+0x1d0>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4864      	ldr	r0, [pc, #400]	; (8004d88 <cliSd+0x1d4>)
 8004bf6:	f7fd fb6d 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8004bfa:	4b60      	ldr	r3, [pc, #384]	; (8004d7c <cliSd+0x1c8>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d05d      	beq.n	8004cbe <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fd84 	bl	8004714 <sdGetInfo>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d055      	beq.n	8004cbe <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8004c12:	f107 030c 	add.w	r3, r7, #12
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	485c      	ldr	r0, [pc, #368]	; (8004d8c <cliSd+0x1d8>)
 8004c1c:	f7fd fb5a 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8004c20:	f107 030c 	add.w	r3, r7, #12
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4859      	ldr	r0, [pc, #356]	; (8004d90 <cliSd+0x1dc>)
 8004c2a:	f7fd fb53 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4857      	ldr	r0, [pc, #348]	; (8004d94 <cliSd+0x1e0>)
 8004c38:	f7fd fb4c 	bl	80022d4 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4619      	mov	r1, r3
 8004c44:	4854      	ldr	r0, [pc, #336]	; (8004d98 <cliSd+0x1e4>)
 8004c46:	f7fd fb45 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8004c4a:	f107 030c 	add.w	r3, r7, #12
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	4619      	mov	r1, r3
 8004c52:	4852      	ldr	r0, [pc, #328]	; (8004d9c <cliSd+0x1e8>)
 8004c54:	f7fd fb3e 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8004c58:	f107 030c 	add.w	r3, r7, #12
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	484f      	ldr	r0, [pc, #316]	; (8004da0 <cliSd+0x1ec>)
 8004c62:	f7fd fb37 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8004c66:	f107 030c 	add.w	r3, r7, #12
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	484d      	ldr	r0, [pc, #308]	; (8004da4 <cliSd+0x1f0>)
 8004c70:	f7fd fb30 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	484a      	ldr	r0, [pc, #296]	; (8004da8 <cliSd+0x1f4>)
 8004c7e:	f7fd fb29 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	6a18      	ldr	r0, [r3, #32]
 8004c88:	f107 030c 	add.w	r3, r7, #12
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	0a9c      	lsrs	r4, r3, #10
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	0a99      	lsrs	r1, r3, #10
 8004ca0:	4b42      	ldr	r3, [pc, #264]	; (8004dac <cliSd+0x1f8>)
 8004ca2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	1aca      	subs	r2, r1, r3
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	483d      	ldr	r0, [pc, #244]	; (8004db0 <cliSd+0x1fc>)
 8004cba:	f7fd fb0b 	bl	80022d4 <cliPrintf>
      }
    }
    ret = true;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d13e      	bne.n	8004d4c <cliSd+0x198>
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	4937      	ldr	r1, [pc, #220]	; (8004db4 <cliSd+0x200>)
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	4798      	blx	r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d035      	beq.n	8004d4c <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	4798      	blx	r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8004cf0:	f107 010c 	add.w	r1, r7, #12
 8004cf4:	2364      	movs	r3, #100	; 0x64
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8004cfc:	f7ff fd96 	bl	800482c <sdReadBlocks>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01c      	beq.n	8004d40 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004d0c:	e013      	b.n	8004d36 <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8004d0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d12:	0099      	lsls	r1, r3, #2
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d20:	460a      	mov	r2, r1
 8004d22:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8004d26:	4824      	ldr	r0, [pc, #144]	; (8004db8 <cliSd+0x204>)
 8004d28:	f7fd fad4 	bl	80022d4 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8004d2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d30:	3301      	adds	r3, #1
 8004d32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004d36:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3c:	dde7      	ble.n	8004d0e <cliSd+0x15a>
 8004d3e:	e002      	b.n	8004d46 <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8004d40:	481e      	ldr	r0, [pc, #120]	; (8004dbc <cliSd+0x208>)
 8004d42:	f7fd fac7 	bl	80022d4 <cliPrintf>
    }

    ret = true;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8004d4c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004d50:	f083 0301 	eor.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 8004d5a:	4819      	ldr	r0, [pc, #100]	; (8004dc0 <cliSd+0x20c>)
 8004d5c:	f7fd faba 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <cliSd+0x1c8>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 8004d68:	4816      	ldr	r0, [pc, #88]	; (8004dc4 <cliSd+0x210>)
 8004d6a:	f7fd fab3 	bl	80022d4 <cliPrintf>
    }
  }
}
 8004d6e:	bf00      	nop
 8004d70:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd90      	pop	{r4, r7, pc}
 8004d78:	080145f8 	.word	0x080145f8
 8004d7c:	2000a2c0 	.word	0x2000a2c0
 8004d80:	08014600 	.word	0x08014600
 8004d84:	2000a2c1 	.word	0x2000a2c1
 8004d88:	08014614 	.word	0x08014614
 8004d8c:	08014628 	.word	0x08014628
 8004d90:	08014648 	.word	0x08014648
 8004d94:	08014668 	.word	0x08014668
 8004d98:	08014688 	.word	0x08014688
 8004d9c:	080146a8 	.word	0x080146a8
 8004da0:	080146c8 	.word	0x080146c8
 8004da4:	080146e8 	.word	0x080146e8
 8004da8:	08014708 	.word	0x08014708
 8004dac:	cccccccd 	.word	0xcccccccd
 8004db0:	08014728 	.word	0x08014728
 8004db4:	08014754 	.word	0x08014754
 8004db8:	0801475c 	.word	0x0801475c
 8004dbc:	08014770 	.word	0x08014770
 8004dc0:	08014780 	.word	0x08014780
 8004dc4:	0801478c 	.word	0x0801478c

08004dc8 <DWT_Delay_us>:
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <DWT_Delay_us+0x3c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8004dd6:	f008 fae7 	bl	800d3a8 <HAL_RCC_GetHCLKFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <DWT_Delay_us+0x40>)
 8004dde:	fba3 2302 	umull	r2, r3, r3, r2
 8004de2:	0c9b      	lsrs	r3, r3, #18
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004dec:	bf00      	nop
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <DWT_Delay_us+0x3c>)
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3f8      	bcc.n	8004dee <DWT_Delay_us+0x26>
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	e0001000 	.word	0xe0001000
 8004e08:	431bde83 	.word	0x431bde83

08004e0c <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
	bool ret = false;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e18:	f107 031c 	add.w	r3, r7, #28
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e26:	f107 0314 	add.w	r3, r7, #20
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <sonarInit+0xec>)
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <sonarInit+0xf0>)
 8004e40:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <sonarInit+0xec>)
 8004e44:	225f      	movs	r2, #95	; 0x5f
 8004e46:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e48:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <sonarInit+0xec>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8004e4e:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <sonarInit+0xec>)
 8004e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e54:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <sonarInit+0xec>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <sonarInit+0xec>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004e62:	4825      	ldr	r0, [pc, #148]	; (8004ef8 <sonarInit+0xec>)
 8004e64:	f00a fb04 	bl	800f470 <HAL_TIM_Base_Init>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <sonarInit+0x66>
	  {
	    Error_Handler();
 8004e6e:	f7fc fa3b 	bl	80012e8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e76:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004e78:	f107 031c 	add.w	r3, r7, #28
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	481e      	ldr	r0, [pc, #120]	; (8004ef8 <sonarInit+0xec>)
 8004e80:	f00a fd62 	bl	800f948 <HAL_TIM_ConfigClockSource>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <sonarInit+0x82>
	  {
	    Error_Handler();
 8004e8a:	f7fc fa2d 	bl	80012e8 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004e8e:	481a      	ldr	r0, [pc, #104]	; (8004ef8 <sonarInit+0xec>)
 8004e90:	f00a fb19 	bl	800f4c6 <HAL_TIM_IC_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <sonarInit+0x92>
	  {
	    Error_Handler();
 8004e9a:	f7fc fa25 	bl	80012e8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4812      	ldr	r0, [pc, #72]	; (8004ef8 <sonarInit+0xec>)
 8004eae:	f00b f889 	bl	800ffc4 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <sonarInit+0xb0>
	  {
	    Error_Handler();
 8004eb8:	f7fc fa16 	bl	80012e8 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004ecc:	1d3b      	adds	r3, r7, #4
 8004ece:	220c      	movs	r2, #12
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4809      	ldr	r0, [pc, #36]	; (8004ef8 <sonarInit+0xec>)
 8004ed4:	f00a fc9c 	bl	800f810 <HAL_TIM_IC_ConfigChannel>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <sonarInit+0xd6>
	  {
	    Error_Handler();
 8004ede:	f7fc fa03 	bl	80012e8 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8004ee2:	210c      	movs	r1, #12
 8004ee4:	4804      	ldr	r0, [pc, #16]	; (8004ef8 <sonarInit+0xec>)
 8004ee6:	f00a fb23 	bl	800f530 <HAL_TIM_IC_Start_IT>

	return ret;
 8004eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3730      	adds	r7, #48	; 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2000ac88 	.word	0x2000ac88
 8004efc:	40000400 	.word	0x40000400

08004f00 <Sonar_measure>:

bool Sonar_measure(void)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
	bool ret = false;
 8004f06:	2300      	movs	r3, #0
 8004f08:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	; (8005080 <Sonar_measure+0x180>)
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <Sonar_measure+0x18>
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d022      	beq.n	8004f5c <Sonar_measure+0x5c>
 8004f16:	e0a9      	b.n	800506c <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8004f18:	2103      	movs	r1, #3
 8004f1a:	2008      	movs	r0, #8
 8004f1c:	f7fd ffb2 	bl	8002e84 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8004f20:	2101      	movs	r1, #1
 8004f22:	2008      	movs	r0, #8
 8004f24:	f7fe f820 	bl	8002f68 <gpioPinWrite>
			DWT_Delay_us(5);
 8004f28:	2005      	movs	r0, #5
 8004f2a:	f7ff ff4d 	bl	8004dc8 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2008      	movs	r0, #8
 8004f32:	f7fe f819 	bl	8002f68 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8004f36:	2106      	movs	r1, #6
 8004f38:	2008      	movs	r0, #8
 8004f3a:	f7fd ffa3 	bl	8002e84 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8004f3e:	4b50      	ldr	r3, [pc, #320]	; (8005080 <Sonar_measure+0x180>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8004f44:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <Sonar_measure+0x180>)
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	4b4c      	ldr	r3, [pc, #304]	; (8005080 <Sonar_measure+0x180>)
 8004f4e:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8004f50:	f7fc f95b 	bl	800120a <millis>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <Sonar_measure+0x184>)
 8004f58:	601a      	str	r2, [r3, #0]
			break;
 8004f5a:	e087      	b.n	800506c <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8004f5c:	4b48      	ldr	r3, [pc, #288]	; (8005080 <Sonar_measure+0x180>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f083 0301 	eor.w	r3, r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d06a      	beq.n	8005040 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8004f6a:	4b45      	ldr	r3, [pc, #276]	; (8005080 <Sonar_measure+0x180>)
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b44      	ldr	r3, [pc, #272]	; (8005080 <Sonar_measure+0x180>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d907      	bls.n	8004f86 <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8004f76:	4b42      	ldr	r3, [pc, #264]	; (8005080 <Sonar_measure+0x180>)
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <Sonar_measure+0x180>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	4a3f      	ldr	r2, [pc, #252]	; (8005080 <Sonar_measure+0x180>)
 8004f82:	60d3      	str	r3, [r2, #12]
 8004f84:	e00e      	b.n	8004fa4 <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8004f86:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <Sonar_measure+0x180>)
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <Sonar_measure+0x180>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d208      	bcs.n	8004fa4 <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8004f92:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <Sonar_measure+0x180>)
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	4b3a      	ldr	r3, [pc, #232]	; (8005080 <Sonar_measure+0x180>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004fa0:	4a37      	ldr	r2, [pc, #220]	; (8005080 <Sonar_measure+0x180>)
 8004fa2:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <Sonar_measure+0x180>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fb fabf 	bl	8000534 <__aeabi_ui2d>
 8004fb6:	a330      	add	r3, pc, #192	; (adr r3, 8005078 <Sonar_measure+0x178>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f7fb fb34 	bl	8000628 <__aeabi_dmul>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460c      	mov	r4, r1
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f7fb fe06 	bl	8000bd8 <__aeabi_d2uiz>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <Sonar_measure+0x180>)
 8004fd0:	615a      	str	r2, [r3, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <Sonar_measure+0x188>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8004fdc:	79bb      	ldrb	r3, [r7, #6]
 8004fde:	2b0b      	cmp	r3, #11
 8004fe0:	d101      	bne.n	8004fe6 <Sonar_measure+0xe6>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <Sonar_measure+0x180>)
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	4b27      	ldr	r3, [pc, #156]	; (8005088 <Sonar_measure+0x188>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	b211      	sxth	r1, r2
 8004ff0:	4a26      	ldr	r2, [pc, #152]	; (800508c <Sonar_measure+0x18c>)
 8004ff2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <Sonar_measure+0x188>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a24      	ldr	r2, [pc, #144]	; (800508c <Sonar_measure+0x18c>)
 8004ffc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005000:	461a      	mov	r2, r3
 8005002:	4b23      	ldr	r3, [pc, #140]	; (8005090 <Sonar_measure+0x190>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4413      	add	r3, r2
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <Sonar_measure+0x190>)
 800500a:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <Sonar_measure+0x190>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	79ba      	ldrb	r2, [r7, #6]
 8005012:	491e      	ldr	r1, [pc, #120]	; (800508c <Sonar_measure+0x18c>)
 8005014:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <Sonar_measure+0x190>)
 800501c:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 800501e:	79bb      	ldrb	r3, [r7, #6]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <Sonar_measure+0x188>)
 8005022:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <Sonar_measure+0x190>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <Sonar_measure+0x194>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	4a13      	ldr	r2, [pc, #76]	; (8005080 <Sonar_measure+0x180>)
 8005032:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <Sonar_measure+0x180>)
 8005036:	2200      	movs	r2, #0
 8005038:	705a      	strb	r2, [r3, #1]
				ret = true;
 800503a:	2301      	movs	r3, #1
 800503c:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 800503e:	e014      	b.n	800506a <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8005040:	f7fc f8e3 	bl	800120a <millis>
 8005044:	4602      	mov	r2, r0
 8005046:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <Sonar_measure+0x184>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b18      	cmp	r3, #24
 800504e:	d90c      	bls.n	800506a <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <Sonar_measure+0x180>)
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	3301      	adds	r3, #1
 8005056:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <Sonar_measure+0x180>)
 8005058:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <Sonar_measure+0x180>)
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <Sonar_measure+0x180>)
 8005062:	2200      	movs	r2, #0
 8005064:	705a      	strb	r2, [r3, #1]
					ret = false;
 8005066:	2300      	movs	r3, #0
 8005068:	71fb      	strb	r3, [r7, #7]
			break;
 800506a:	bf00      	nop
	}
	return ret;
 800506c:	79fb      	ldrb	r3, [r7, #7]
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	bf00      	nop
 8005078:	75f6fd22 	.word	0x75f6fd22
 800507c:	3f919ce0 	.word	0x3f919ce0
 8005080:	2000a2c4 	.word	0x2000a2c4
 8005084:	2000a2e0 	.word	0x2000a2e0
 8005088:	2000a2e4 	.word	0x2000a2e4
 800508c:	2000a2e8 	.word	0x2000a2e8
 8005090:	2000a300 	.word	0x2000a300
 8005094:	cccccccd 	.word	0xcccccccd

08005098 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	60da      	str	r2, [r3, #12]
 80050ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIM_Base_MspInit+0x94>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d133      	bne.n	8005122 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ca:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4a14      	ldr	r2, [pc, #80]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	6313      	str	r3, [r2, #48]	; 0x30
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_TIM_Base_MspInit+0x98>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050f2:	2302      	movs	r3, #2
 80050f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f6:	2302      	movs	r3, #2
 80050f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050fe:	2300      	movs	r3, #0
 8005100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005102:	2302      	movs	r3, #2
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	4619      	mov	r1, r3
 800510c:	4809      	ldr	r0, [pc, #36]	; (8005134 <HAL_TIM_Base_MspInit+0x9c>)
 800510e:	f007 fa93 	bl	800c638 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005112:	2200      	movs	r2, #0
 8005114:	2101      	movs	r1, #1
 8005116:	201d      	movs	r0, #29
 8005118:	f006 fe4f 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800511c:	201d      	movs	r0, #29
 800511e:	f006 fe68 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005122:	bf00      	nop
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40000400 	.word	0x40000400
 8005130:	40023800 	.word	0x40023800
 8005134:	40020400 	.word	0x40020400

08005138 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	7f1b      	ldrb	r3, [r3, #28]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d129      	bne.n	800519c <HAL_TIM_IC_CaptureCallback+0x64>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d124      	bne.n	800519c <HAL_TIM_IC_CaptureCallback+0x64>
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_TIM_IC_CaptureCallback+0x78>)
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005172:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	4a0b      	ldr	r2, [pc, #44]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800517a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800517e:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8005180:	e00c      	b.n	800519c <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005188:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	4a06      	ldr	r2, [pc, #24]	; (80051a8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005194:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <HAL_TIM_IC_CaptureCallback+0x74>)
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40000400 	.word	0x40000400
 80051ac:	2000a2c4 	.word	0x2000a2c4
 80051b0:	40020400 	.word	0x40020400

080051b4 <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
  bool ret = true;
 80051ba:	2301      	movs	r3, #1
 80051bc:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	e03d      	b.n	8005240 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 80051c4:	4923      	ldr	r1, [pc, #140]	; (8005254 <spiInit+0xa0>)
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 80051d6:	491f      	ldr	r1, [pc, #124]	; (8005254 <spiInit+0xa0>)
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3301      	adds	r3, #1
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 80051ea:	491a      	ldr	r1, [pc, #104]	; (8005254 <spiInit+0xa0>)
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3302      	adds	r3, #2
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 80051fe:	4915      	ldr	r1, [pc, #84]	; (8005254 <spiInit+0xa0>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	3304      	adds	r3, #4
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005212:	4910      	ldr	r1, [pc, #64]	; (8005254 <spiInit+0xa0>)
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3310      	adds	r3, #16
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005226:	490b      	ldr	r1, [pc, #44]	; (8005254 <spiInit+0xa0>)
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	330c      	adds	r3, #12
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3301      	adds	r3, #1
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	ddbe      	ble.n	80051c4 <spiInit+0x10>
  }

  return ret;
 8005246:	78fb      	ldrb	r3, [r7, #3]
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	2000acc8 	.word	0x2000acc8

08005258 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005266:	79fa      	ldrb	r2, [r7, #7]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a23      	ldr	r2, [pc, #140]	; (8005300 <spiBegin+0xa8>)
 8005272:	4413      	add	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <spiBegin+0x28>
 800527c:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 800527e:	e03a      	b.n	80052f6 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a20      	ldr	r2, [pc, #128]	; (8005304 <spiBegin+0xac>)
 8005284:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a1f      	ldr	r2, [pc, #124]	; (8005308 <spiBegin+0xb0>)
 800528a:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <spiBegin+0xac>)
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <spiBegin+0xb4>)
 8005290:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <spiBegin+0xac>)
 8005294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005298:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <spiBegin+0xac>)
 800529c:	2200      	movs	r2, #0
 800529e:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <spiBegin+0xac>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <spiBegin+0xac>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <spiBegin+0xac>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <spiBegin+0xac>)
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <spiBegin+0xac>)
 80052bc:	2200      	movs	r2, #0
 80052be:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052c0:	4b10      	ldr	r3, [pc, #64]	; (8005304 <spiBegin+0xac>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <spiBegin+0xac>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <spiBegin+0xac>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <spiBegin+0xac>)
 80052d4:	220a      	movs	r2, #10
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 80052d8:	480a      	ldr	r0, [pc, #40]	; (8005304 <spiBegin+0xac>)
 80052da:	f009 fc05 	bl	800eae8 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 80052de:	4809      	ldr	r0, [pc, #36]	; (8005304 <spiBegin+0xac>)
 80052e0:	f009 fb9e 	bl	800ea20 <HAL_SPI_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d104      	bne.n	80052f4 <spiBegin+0x9c>
        p_spi->is_open = true;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
        ret = true;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	bf00      	nop
  }

  return ret;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	2000acc8 	.word	0x2000acc8
 8005304:	2000acdc 	.word	0x2000acdc
 8005308:	2000ad34 	.word	0x2000ad34
 800530c:	40013000 	.word	0x40013000

08005310 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	460a      	mov	r2, r1
 800531a:	71fb      	strb	r3, [r7, #7]
 800531c:	4613      	mov	r3, r2
 800531e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005320:	79fa      	ldrb	r2, [r7, #7]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <spiSetDataMode+0xc8>)
 800532c:	4413      	add	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f083 0301 	eor.w	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d147      	bne.n	80053ce <spiSetDataMode+0xbe>


  switch( dataMode )
 800533e:	79bb      	ldrb	r3, [r7, #6]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d845      	bhi.n	80053d0 <spiSetDataMode+0xc0>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <spiSetDataMode+0x3c>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	0800535d 	.word	0x0800535d
 8005350:	08005379 	.word	0x08005379
 8005354:	08005395 	.word	0x08005395
 8005358:	080053b1 	.word	0x080053b1
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4618      	mov	r0, r3
 8005372:	f009 fb55 	bl	800ea20 <HAL_SPI_Init>
      break;
 8005376:	e02b      	b.n	80053d0 <spiSetDataMode+0xc0>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2201      	movs	r2, #1
 8005386:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f009 fb47 	bl	800ea20 <HAL_SPI_Init>
      break;
 8005392:	e01d      	b.n	80053d0 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2202      	movs	r2, #2
 800539a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f009 fb39 	bl	800ea20 <HAL_SPI_Init>
      break;
 80053ae:	e00f      	b.n	80053d0 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2202      	movs	r2, #2
 80053b6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2201      	movs	r2, #1
 80053be:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f009 fb2b 	bl	800ea20 <HAL_SPI_Init>
      break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <spiSetDataMode+0xc0>
  if (p_spi->is_open == false) return;
 80053ce:	bf00      	nop
  }
}
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000acc8 	.word	0x2000acc8

080053dc <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	460a      	mov	r2, r1
 80053e6:	71fb      	strb	r3, [r7, #7]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 80053ec:	79fa      	ldrb	r2, [r7, #7]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <spiSetBitWidth+0x5c>)
 80053f8:	4413      	add	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	f083 0301 	eor.w	r3, r3, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d111      	bne.n	800542e <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8005412:	79bb      	ldrb	r3, [r7, #6]
 8005414:	2b10      	cmp	r3, #16
 8005416:	d104      	bne.n	8005422 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005420:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f009 fafa 	bl	800ea20 <HAL_SPI_Init>
 800542c:	e000      	b.n	8005430 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 800542e:	bf00      	nop
}
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	2000acc8 	.word	0x2000acc8

0800543c <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
 8005442:	4603      	mov	r3, r0
 8005444:	460a      	mov	r2, r1
 8005446:	71fb      	strb	r3, [r7, #7]
 8005448:	4613      	mov	r3, r2
 800544a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 800544c:	79fa      	ldrb	r2, [r7, #7]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4a0d      	ldr	r2, [pc, #52]	; (800548c <spiTransfer8+0x50>)
 8005458:	4413      	add	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f083 0301 	eor.w	r3, r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <spiTransfer8+0x32>
 800546a:	2300      	movs	r3, #0
 800546c:	e00a      	b.n	8005484 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6898      	ldr	r0, [r3, #8]
 8005472:	f107 020b 	add.w	r2, r7, #11
 8005476:	1db9      	adds	r1, r7, #6
 8005478:	230a      	movs	r3, #10
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2301      	movs	r3, #1
 800547e:	f009 fb5b 	bl	800eb38 <HAL_SPI_TransmitReceive>

  return ret;
 8005482:	7afb      	ldrb	r3, [r7, #11]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000acc8 	.word	0x2000acc8

08005490 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 800549e:	7bfa      	ldrb	r2, [r7, #15]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <spiDmaTxStart+0x4c>)
 80054aa:	4413      	add	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2200      	movs	r2, #0
 80054c0:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	b292      	uxth	r2, r2
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f009 fcd5 	bl	800ee7c <HAL_SPI_Transmit_DMA>
 80054d2:	e000      	b.n	80054d6 <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 80054d4:	bf00      	nop
}
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2000acc8 	.word	0x2000acc8

080054e0 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ffc8 	bl	8005490 <spiDmaTxStart>

  t_time = millis();
 8005500:	f7fb fe83 	bl	800120a <millis>
 8005504:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <spiDmaTxTransfer+0x30>
 800550c:	2301      	movs	r3, #1
 800550e:	e013      	b.n	8005538 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f814 	bl	8005540 <spiDmaTxIsDone>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 800551e:	f7fb fe74 	bl	800120a <millis>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d2f0      	bcs.n	8005510 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
      break;
 8005532:	e000      	b.n	8005536 <spiDmaTxTransfer+0x56>
      break;
 8005534:	bf00      	nop
    }
  }

  return ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 800554a:	79fa      	ldrb	r2, [r7, #7]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a09      	ldr	r2, [pc, #36]	; (800557c <spiDmaTxIsDone+0x3c>)
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <spiDmaTxIsDone+0x2c>
 8005568:	2301      	movs	r3, #1
 800556a:	e001      	b.n	8005570 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	785b      	ldrb	r3, [r3, #1]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	2000acc8 	.word	0x2000acc8

08005580 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <spiAttachTxInterrupt+0x40>)
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
 80055b0:	e000      	b.n	80055b4 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 80055b2:	bf00      	nop
}
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	2000acc8 	.word	0x2000acc8

080055c4 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_SPI_ErrorCallback+0x28>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 80055da:	4b04      	ldr	r3, [pc, #16]	; (80055ec <HAL_SPI_ErrorCallback+0x28>)
 80055dc:	2201      	movs	r2, #1
 80055de:	709a      	strb	r2, [r3, #2]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	2000acc8 	.word	0x2000acc8

080055f0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <HAL_SPI_TxCpltCallback+0x38>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d10b      	bne.n	800561e <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <HAL_SPI_TxCpltCallback+0x38>)
 8005608:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4798      	blx	r3
    }
  }
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000acc8 	.word	0x2000acc8

0800562c <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	; 0x28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <HAL_SPI_MspInit+0x120>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d179      	bne.n	8005742 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	4a3e      	ldr	r2, [pc, #248]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800565c:	6313      	str	r3, [r2, #48]	; 0x30
 800565e:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 800566a:	2300      	movs	r3, #0
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	4b38      	ldr	r3, [pc, #224]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	4a37      	ldr	r2, [pc, #220]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005678:	6453      	str	r3, [r2, #68]	; 0x44
 800567a:	4b35      	ldr	r3, [pc, #212]	; (8005750 <HAL_SPI_MspInit+0x124>)
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	4b31      	ldr	r3, [pc, #196]	; (8005750 <HAL_SPI_MspInit+0x124>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	4a30      	ldr	r2, [pc, #192]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6313      	str	r3, [r2, #48]	; 0x30
 8005696:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <HAL_SPI_MspInit+0x124>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80056a2:	23a0      	movs	r3, #160	; 0xa0
 80056a4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a6:	2302      	movs	r3, #2
 80056a8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ae:	2303      	movs	r3, #3
 80056b0:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80056b2:	2305      	movs	r3, #5
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	4619      	mov	r1, r3
 80056bc:	4825      	ldr	r0, [pc, #148]	; (8005754 <HAL_SPI_MspInit+0x128>)
 80056be:	f006 ffbb 	bl	800c638 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <HAL_SPI_MspInit+0x130>)
 80056c6:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80056ce:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056d2:	2240      	movs	r2, #64	; 0x40
 80056d4:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056d8:	2200      	movs	r2, #0
 80056da:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e2:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80056e4:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056ea:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056f2:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80056f4:	4b18      	ldr	r3, [pc, #96]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 8005702:	2200      	movs	r2, #0
 8005704:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005706:	4814      	ldr	r0, [pc, #80]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 8005708:	f006 fb9c 	bl	800be44 <HAL_DMA_Init>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8005712:	f7fb fde9 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 800571a:	649a      	str	r2, [r3, #72]	; 0x48
 800571c:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_SPI_MspInit+0x12c>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005722:	2200      	movs	r2, #0
 8005724:	2100      	movs	r1, #0
 8005726:	2023      	movs	r0, #35	; 0x23
 8005728:	f006 fb47 	bl	800bdba <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800572c:	2023      	movs	r0, #35	; 0x23
 800572e:	f006 fb60 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8005732:	2200      	movs	r2, #0
 8005734:	2105      	movs	r1, #5
 8005736:	2044      	movs	r0, #68	; 0x44
 8005738:	f006 fb3f 	bl	800bdba <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800573c:	2044      	movs	r0, #68	; 0x44
 800573e:	f006 fb58 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005742:	bf00      	nop
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40013000 	.word	0x40013000
 8005750:	40023800 	.word	0x40023800
 8005754:	40020000 	.word	0x40020000
 8005758:	2000ad34 	.word	0x2000ad34
 800575c:	40026488 	.word	0x40026488

08005760 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <HAL_SPI_MspDeInit+0x40>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <HAL_SPI_MspDeInit+0x44>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <HAL_SPI_MspDeInit+0x44>)
 8005778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577c:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 800577e:	21a0      	movs	r1, #160	; 0xa0
 8005780:	4809      	ldr	r0, [pc, #36]	; (80057a8 <HAL_SPI_MspDeInit+0x48>)
 8005782:	f007 f8db 	bl	800c93c <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578a:	4618      	mov	r0, r3
 800578c:	f006 fc08 	bl	800bfa0 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8005790:	2023      	movs	r0, #35	; 0x23
 8005792:	f006 fb3c 	bl	800be0e <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40013000 	.word	0x40013000
 80057a4:	40023800 	.word	0x40023800
 80057a8:	40020000 	.word	0x40020000

080057ac <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
	bool ret = true;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 80057b6:	4b31      	ldr	r3, [pc, #196]	; (800587c <tdsInit+0xd0>)
 80057b8:	2203      	movs	r2, #3
 80057ba:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 80057bc:	4b2f      	ldr	r3, [pc, #188]	; (800587c <tdsInit+0xd0>)
 80057be:	4a30      	ldr	r2, [pc, #192]	; (8005880 <tdsInit+0xd4>)
 80057c0:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <tdsInit+0xd0>)
 80057c4:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80057c8:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <tdsInit+0xd0>)
 80057cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80057d0:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <tdsInit+0xd8>)
 80057e0:	4a29      	ldr	r2, [pc, #164]	; (8005888 <tdsInit+0xdc>)
 80057e2:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <tdsInit+0xd8>)
 80057e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057ea:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <tdsInit+0xd8>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <tdsInit+0xd8>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <tdsInit+0xd8>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <tdsInit+0xd8>)
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <tdsInit+0xd8>)
 8005808:	2200      	movs	r2, #0
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <tdsInit+0xd8>)
 800580e:	4a1f      	ldr	r2, [pc, #124]	; (800588c <tdsInit+0xe0>)
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <tdsInit+0xd8>)
 8005814:	2200      	movs	r2, #0
 8005816:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <tdsInit+0xd8>)
 800581a:	2201      	movs	r2, #1
 800581c:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <tdsInit+0xd8>)
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <tdsInit+0xd8>)
 8005828:	2201      	movs	r2, #1
 800582a:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800582c:	4815      	ldr	r0, [pc, #84]	; (8005884 <tdsInit+0xd8>)
 800582e:	f005 fc8d 	bl	800b14c <HAL_ADC_Init>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <tdsInit+0x90>
	  {
	    Error_Handler();
 8005838:	f7fb fd56 	bl	80012e8 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800583c:	2301      	movs	r3, #1
 800583e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8005840:	2301      	movs	r3, #1
 8005842:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005844:	2307      	movs	r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005848:	1d3b      	adds	r3, r7, #4
 800584a:	4619      	mov	r1, r3
 800584c:	480d      	ldr	r0, [pc, #52]	; (8005884 <tdsInit+0xd8>)
 800584e:	f005 fefd 	bl	800b64c <HAL_ADC_ConfigChannel>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <tdsInit+0xb0>
	  {
	    Error_Handler();
 8005858:	f7fb fd46 	bl	80012e8 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 800585c:	2201      	movs	r2, #1
 800585e:	490c      	ldr	r1, [pc, #48]	; (8005890 <tdsInit+0xe4>)
 8005860:	4808      	ldr	r0, [pc, #32]	; (8005884 <tdsInit+0xd8>)
 8005862:	f005 fdf7 	bl	800b454 <HAL_ADC_Start_DMA>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <tdsInit+0xc4>
	{
		Error_Handler();
 800586c:	f7fb fd3c 	bl	80012e8 <Error_Handler>
	}

	return ret;
 8005870:	7dfb      	ldrb	r3, [r7, #23]

}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	2000ad94 	.word	0x2000ad94
 8005880:	41c80000 	.word	0x41c80000
 8005884:	2000adbc 	.word	0x2000adbc
 8005888:	40012000 	.word	0x40012000
 800588c:	0f000001 	.word	0x0f000001
 8005890:	2000ada4 	.word	0x2000ada4
 8005894:	00000000 	.word	0x00000000

08005898 <tds_measure>:
bool tds_measure(void)
{
 8005898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
	bool ret = true;
 80058a0:	2301      	movs	r3, #1
 80058a2:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 80058a4:	4b8e      	ldr	r3, [pc, #568]	; (8005ae0 <tds_measure+0x248>)
 80058a6:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	ee07 3a90 	vmov	s15, r3
 80058b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fe4d 	bl	8000578 <__aeabi_f2d>
 80058de:	a378      	add	r3, pc, #480	; (adr r3, 8005ac0 <tds_measure+0x228>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fea0 	bl	8000628 <__aeabi_dmul>
 80058e8:	4603      	mov	r3, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4625      	mov	r5, r4
 80058ee:	461c      	mov	r4, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fa fe3f 	bl	8000578 <__aeabi_f2d>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4620      	mov	r0, r4
 8005900:	4629      	mov	r1, r5
 8005902:	f7fa fe91 	bl	8000628 <__aeabi_dmul>
 8005906:	4603      	mov	r3, r0
 8005908:	460c      	mov	r4, r1
 800590a:	4625      	mov	r5, r4
 800590c:	461c      	mov	r4, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fa fe30 	bl	8000578 <__aeabi_f2d>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4620      	mov	r0, r4
 800591e:	4629      	mov	r1, r5
 8005920:	f7fa fe82 	bl	8000628 <__aeabi_dmul>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4625      	mov	r5, r4
 800592a:	461c      	mov	r4, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fe21 	bl	8000578 <__aeabi_f2d>
 8005936:	a364      	add	r3, pc, #400	; (adr r3, 8005ac8 <tds_measure+0x230>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fe74 	bl	8000628 <__aeabi_dmul>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4690      	mov	r8, r2
 8005946:	4699      	mov	r9, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fe13 	bl	8000578 <__aeabi_f2d>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	f7fa fe65 	bl	8000628 <__aeabi_dmul>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fa fca7 	bl	80002b8 <__aeabi_dsub>
 800596a:	4603      	mov	r3, r0
 800596c:	460c      	mov	r4, r1
 800596e:	4625      	mov	r5, r4
 8005970:	461c      	mov	r4, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fdfe 	bl	8000578 <__aeabi_f2d>
 800597c:	a354      	add	r3, pc, #336	; (adr r3, 8005ad0 <tds_measure+0x238>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fa fe51 	bl	8000628 <__aeabi_dmul>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fc95 	bl	80002bc <__adddf3>
 8005992:	4603      	mov	r3, r0
 8005994:	460c      	mov	r4, r1
 8005996:	4625      	mov	r5, r4
 8005998:	461c      	mov	r4, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fa fdea 	bl	8000578 <__aeabi_f2d>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4620      	mov	r0, r4
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7fa fe3c 	bl	8000628 <__aeabi_dmul>
 80059b0:	4603      	mov	r3, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	4618      	mov	r0, r3
 80059b6:	4621      	mov	r1, r4
 80059b8:	f7fb f92e 	bl	8000c18 <__aeabi_d2f>
 80059bc:	4602      	mov	r2, r0
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fa fdd6 	bl	8000578 <__aeabi_f2d>
 80059cc:	4604      	mov	r4, r0
 80059ce:	460d      	mov	r5, r1
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fa fdcf 	bl	8000578 <__aeabi_f2d>
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	4b41      	ldr	r3, [pc, #260]	; (8005ae4 <tds_measure+0x24c>)
 80059e0:	f7fa fc6a 	bl	80002b8 <__aeabi_dsub>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	a33a      	add	r3, pc, #232	; (adr r3, 8005ad8 <tds_measure+0x240>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fe19 	bl	8000628 <__aeabi_dmul>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <tds_measure+0x250>)
 8005a04:	f7fa fc5a 	bl	80002bc <__adddf3>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	4629      	mov	r1, r5
 8005a10:	f7fa ff34 	bl	800087c <__aeabi_ddiv>
 8005a14:	4603      	mov	r3, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	f7fb f8fc 	bl	8000c18 <__aeabi_d2f>
 8005a20:	4602      	mov	r2, r0
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <tds_measure+0x254>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	3301      	adds	r3, #1
 8005a42:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b0b      	cmp	r3, #11
 8005a48:	d101      	bne.n	8005a4e <tds_measure+0x1b6>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <tds_measure+0x254>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a5c:	ee17 2a90 	vmov	r2, s15
 8005a60:	b211      	sxth	r1, r2
 8005a62:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <tds_measure+0x258>)
 8005a64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <tds_measure+0x254>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <tds_measure+0x258>)
 8005a6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <tds_measure+0x25c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <tds_measure+0x25c>)
 8005a7c:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <tds_measure+0x25c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	79fa      	ldrb	r2, [r7, #7]
 8005a84:	491a      	ldr	r1, [pc, #104]	; (8005af0 <tds_measure+0x258>)
 8005a86:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <tds_measure+0x25c>)
 8005a8e:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <tds_measure+0x254>)
 8005a94:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8005a96:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <tds_measure+0x25c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <tds_measure+0x260>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	08db      	lsrs	r3, r3, #3
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8005ab0:	79bb      	ldrb	r3, [r7, #6]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005abc:	f3af 8000 	nop.w
 8005ac0:	a3d70a3d 	.word	0xa3d70a3d
 8005ac4:	4060ad70 	.word	0x4060ad70
 8005ac8:	1eb851ec 	.word	0x1eb851ec
 8005acc:	406ffb85 	.word	0x406ffb85
 8005ad0:	b851eb85 	.word	0xb851eb85
 8005ad4:	408acb1e 	.word	0x408acb1e
 8005ad8:	47ae147b 	.word	0x47ae147b
 8005adc:	3f947ae1 	.word	0x3f947ae1
 8005ae0:	2000ad94 	.word	0x2000ad94
 8005ae4:	40390000 	.word	0x40390000
 8005ae8:	3ff00000 	.word	0x3ff00000
 8005aec:	2000a304 	.word	0x2000a304
 8005af0:	2000a308 	.word	0x2000a308
 8005af4:	2000a320 	.word	0x2000a320
 8005af8:	cccccccd 	.word	0xcccccccd

08005afc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3e      	ldr	r2, [pc, #248]	; (8005c14 <HAL_ADC_MspInit+0x118>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d175      	bne.n	8005c0a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	4a3c      	ldr	r2, [pc, #240]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2e:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	4a35      	ldr	r2, [pc, #212]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	6453      	str	r3, [r2, #68]	; 0x44
 8005b4a:	4b33      	ldr	r3, [pc, #204]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	4a2e      	ldr	r2, [pc, #184]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6313      	str	r3, [r2, #48]	; 0x30
 8005b66:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_ADC_MspInit+0x11c>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005b72:	2302      	movs	r3, #2
 8005b74:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b76:	2303      	movs	r3, #3
 8005b78:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b7e:	f107 0314 	add.w	r3, r7, #20
 8005b82:	4619      	mov	r1, r3
 8005b84:	4825      	ldr	r0, [pc, #148]	; (8005c1c <HAL_ADC_MspInit+0x120>)
 8005b86:	f006 fd57 	bl	800c638 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8005b8a:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005b8c:	4a25      	ldr	r2, [pc, #148]	; (8005c24 <HAL_ADC_MspInit+0x128>)
 8005b8e:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005b90:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b9c:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ba8:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bb0:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bb8:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bc0:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005bc2:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005bce:	4814      	ldr	r0, [pc, #80]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005bd0:	f006 f938 	bl	800be44 <HAL_DMA_Init>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8005bda:	f7fb fb85 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
 8005be4:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <HAL_ADC_MspInit+0x124>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8005bea:	2200      	movs	r2, #0
 8005bec:	2106      	movs	r1, #6
 8005bee:	2012      	movs	r0, #18
 8005bf0:	f006 f8e3 	bl	800bdba <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005bf4:	2012      	movs	r0, #18
 8005bf6:	f006 f8fc 	bl	800bdf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2106      	movs	r1, #6
 8005bfe:	2038      	movs	r0, #56	; 0x38
 8005c00:	f006 f8db 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005c04:	2038      	movs	r0, #56	; 0x38
 8005c06:	f006 f8f4 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40012000 	.word	0x40012000
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40020000 	.word	0x40020000
 8005c20:	2000ae04 	.word	0x2000ae04
 8005c24:	40026410 	.word	0x40026410

08005c28 <uartInit>:
#endif



bool uartInit(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	e007      	b.n	8005c44 <uartInit+0x1c>
  {
    is_open[i] = false;
 8005c34:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <uartInit+0x30>)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3301      	adds	r3, #1
 8005c42:	607b      	str	r3, [r7, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	ddf4      	ble.n	8005c34 <uartInit+0xc>
  }


  return true;
 8005c4a:	2301      	movs	r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	2000a324 	.word	0x2000a324

08005c5c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	6039      	str	r1, [r7, #0]
 8005c66:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <uartOpen+0x1c>
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d078      	beq.n	8005d68 <uartOpen+0x10c>
 8005c76:	e0ef      	b.n	8005e58 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8005c78:	4b7a      	ldr	r3, [pc, #488]	; (8005e64 <uartOpen+0x208>)
 8005c7a:	4a7b      	ldr	r2, [pc, #492]	; (8005e68 <uartOpen+0x20c>)
 8005c7c:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 8005c7e:	4a79      	ldr	r2, [pc, #484]	; (8005e64 <uartOpen+0x208>)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8005c84:	4b77      	ldr	r3, [pc, #476]	; (8005e64 <uartOpen+0x208>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8005c8a:	4b76      	ldr	r3, [pc, #472]	; (8005e64 <uartOpen+0x208>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8005c90:	4b74      	ldr	r3, [pc, #464]	; (8005e64 <uartOpen+0x208>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8005c96:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <uartOpen+0x208>)
 8005c98:	220c      	movs	r2, #12
 8005c9a:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8005c9c:	4b71      	ldr	r3, [pc, #452]	; (8005e64 <uartOpen+0x208>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8005ca2:	4b70      	ldr	r3, [pc, #448]	; (8005e64 <uartOpen+0x208>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8005ca8:	486e      	ldr	r0, [pc, #440]	; (8005e64 <uartOpen+0x208>)
 8005caa:	f00a fa5a 	bl	8010162 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <uartOpen+0x210>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cba:	496d      	ldr	r1, [pc, #436]	; (8005e70 <uartOpen+0x214>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fb fc4c 	bl	800155a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	4b6b      	ldr	r3, [pc, #428]	; (8005e74 <uartOpen+0x218>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	4a6a      	ldr	r2, [pc, #424]	; (8005e74 <uartOpen+0x218>)
 8005ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005cd2:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <uartOpen+0x218>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	203a      	movs	r0, #58	; 0x3a
 8005ce4:	f006 f869 	bl	800bdba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005ce8:	203a      	movs	r0, #58	; 0x3a
 8005cea:	f006 f882 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	2046      	movs	r0, #70	; 0x46
 8005cf4:	f006 f861 	bl	800bdba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005cf8:	2046      	movs	r0, #70	; 0x46
 8005cfa:	f006 f87a 	bl	800bdf2 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8005cfe:	4859      	ldr	r0, [pc, #356]	; (8005e64 <uartOpen+0x208>)
 8005d00:	f00a f9e2 	bl	80100c8 <HAL_UART_Init>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <uartOpen+0xb4>
        {
          ret = false;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8005d0e:	e0a3      	b.n	8005e58 <uartOpen+0x1fc>
          ret = true;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <uartOpen+0x21c>)
 8005d18:	2101      	movs	r1, #1
 8005d1a:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d20:	4953      	ldr	r1, [pc, #332]	; (8005e70 <uartOpen+0x214>)
 8005d22:	4850      	ldr	r0, [pc, #320]	; (8005e64 <uartOpen+0x208>)
 8005d24:	f00a fae2 	bl	80102ec <HAL_UART_Receive_DMA>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <uartOpen+0xd6>
            ret = false;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	4a4d      	ldr	r2, [pc, #308]	; (8005e6c <uartOpen+0x210>)
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4413      	add	r3, r2
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <uartOpen+0x220>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	1a8a      	subs	r2, r1, r2
 8005d48:	4948      	ldr	r1, [pc, #288]	; (8005e6c <uartOpen+0x210>)
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	440b      	add	r3, r1
 8005d4e:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8005d50:	79fa      	ldrb	r2, [r7, #7]
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	4945      	ldr	r1, [pc, #276]	; (8005e6c <uartOpen+0x210>)
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	440a      	add	r2, r1
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	4943      	ldr	r1, [pc, #268]	; (8005e6c <uartOpen+0x210>)
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	440b      	add	r3, r1
 8005d62:	3304      	adds	r3, #4
 8005d64:	601a      	str	r2, [r3, #0]
      break;
 8005d66:	e077      	b.n	8005e58 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <uartOpen+0x208>)
 8005d6a:	4a3f      	ldr	r2, [pc, #252]	; (8005e68 <uartOpen+0x20c>)
 8005d6c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8005d6e:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <uartOpen+0x208>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d74:	4b3b      	ldr	r3, [pc, #236]	; (8005e64 <uartOpen+0x208>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8005d7a:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <uartOpen+0x208>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8005d80:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <uartOpen+0x208>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8005d86:	4b37      	ldr	r3, [pc, #220]	; (8005e64 <uartOpen+0x208>)
 8005d88:	220c      	movs	r2, #12
 8005d8a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d8c:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <uartOpen+0x208>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d92:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <uartOpen+0x208>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8005d98:	4832      	ldr	r0, [pc, #200]	; (8005e64 <uartOpen+0x208>)
 8005d9a:	f00a f9e2 	bl	8010162 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	4a32      	ldr	r2, [pc, #200]	; (8005e6c <uartOpen+0x210>)
 8005da4:	4413      	add	r3, r2
 8005da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005daa:	4931      	ldr	r1, [pc, #196]	; (8005e70 <uartOpen+0x214>)
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fb fbd4 	bl	800155a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <uartOpen+0x218>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <uartOpen+0x218>)
 8005dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc2:	4b2c      	ldr	r3, [pc, #176]	; (8005e74 <uartOpen+0x218>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	203a      	movs	r0, #58	; 0x3a
 8005dd4:	f005 fff1 	bl	800bdba <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005dd8:	203a      	movs	r0, #58	; 0x3a
 8005dda:	f006 f80a 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	2104      	movs	r1, #4
 8005de2:	2046      	movs	r0, #70	; 0x46
 8005de4:	f005 ffe9 	bl	800bdba <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005de8:	2046      	movs	r0, #70	; 0x46
 8005dea:	f006 f802 	bl	800bdf2 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dee:	481d      	ldr	r0, [pc, #116]	; (8005e64 <uartOpen+0x208>)
 8005df0:	f00a f96a 	bl	80100c8 <HAL_UART_Init>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <uartOpen+0x1a4>
      {
        ret = false;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8005dfe:	e02a      	b.n	8005e56 <uartOpen+0x1fa>
        ret = true;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <uartOpen+0x21c>)
 8005e08:	2101      	movs	r1, #1
 8005e0a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e10:	4917      	ldr	r1, [pc, #92]	; (8005e70 <uartOpen+0x214>)
 8005e12:	4814      	ldr	r0, [pc, #80]	; (8005e64 <uartOpen+0x208>)
 8005e14:	f00a fa6a 	bl	80102ec <HAL_UART_Receive_DMA>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <uartOpen+0x1c6>
          ret = false;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <uartOpen+0x210>)
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	4413      	add	r3, r2
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <uartOpen+0x220>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	79fb      	ldrb	r3, [r7, #7]
 8005e36:	1a8a      	subs	r2, r1, r2
 8005e38:	490c      	ldr	r1, [pc, #48]	; (8005e6c <uartOpen+0x210>)
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	440b      	add	r3, r1
 8005e3e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8005e40:	79fa      	ldrb	r2, [r7, #7]
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	4909      	ldr	r1, [pc, #36]	; (8005e6c <uartOpen+0x210>)
 8005e46:	0112      	lsls	r2, r2, #4
 8005e48:	440a      	add	r2, r1
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	4907      	ldr	r1, [pc, #28]	; (8005e6c <uartOpen+0x210>)
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	440b      	add	r3, r1
 8005e52:	3304      	adds	r3, #4
 8005e54:	601a      	str	r2, [r3, #0]
      break;
 8005e56:	bf00      	nop
  }

  return ret;
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000af24 	.word	0x2000af24
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	2000a328 	.word	0x2000a328
 8005e70:	2000a338 	.word	0x2000a338
 8005e74:	40023800 	.word	0x40023800
 8005e78:	2000a324 	.word	0x2000a324
 8005e7c:	2000aec4 	.word	0x2000aec4

08005e80 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <uartAvailable+0x1a>
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d018      	beq.n	8005eca <uartAvailable+0x4a>
 8005e98:	e02f      	b.n	8005efa <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <uartAvailable+0x84>)
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	4413      	add	r3, r2
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	6819      	ldr	r1, [r3, #0]
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <uartAvailable+0x88>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	1a8a      	subs	r2, r1, r2
 8005eb0:	4914      	ldr	r1, [pc, #80]	; (8005f04 <uartAvailable+0x84>)
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	440b      	add	r3, r1
 8005eb6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	4a11      	ldr	r2, [pc, #68]	; (8005f04 <uartAvailable+0x84>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fb fba2 	bl	800160a <qbufferAvailable>
 8005ec6:	60f8      	str	r0, [r7, #12]
      break;
 8005ec8:	e017      	b.n	8005efa <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <uartAvailable+0x84>)
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <uartAvailable+0x88>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	1a8a      	subs	r2, r1, r2
 8005ee0:	4908      	ldr	r1, [pc, #32]	; (8005f04 <uartAvailable+0x84>)
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	440b      	add	r3, r1
 8005ee6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <uartAvailable+0x84>)
 8005eee:	4413      	add	r3, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fb fb8a 	bl	800160a <qbufferAvailable>
 8005ef6:	60f8      	str	r0, [r7, #12]
      break;
 8005ef8:	bf00      	nop
  }

  return ret;
 8005efa:	68fb      	ldr	r3, [r7, #12]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2000a328 	.word	0x2000a328
 8005f08:	2000aec4 	.word	0x2000aec4

08005f0c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <uartRead+0x1a>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d008      	beq.n	8005f36 <uartRead+0x2a>
 8005f24:	e00f      	b.n	8005f46 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8005f26:	f107 030f 	add.w	r3, r7, #15
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4808      	ldr	r0, [pc, #32]	; (8005f50 <uartRead+0x44>)
 8005f30:	f7fb fb2e 	bl	8001590 <qbufferRead>
      break;
 8005f34:	e007      	b.n	8005f46 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8005f36:	f107 030f 	add.w	r3, r7, #15
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4805      	ldr	r0, [pc, #20]	; (8005f54 <uartRead+0x48>)
 8005f40:	f7fb fb26 	bl	8001590 <qbufferRead>
      break;
 8005f44:	bf00      	nop
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	2000a328 	.word	0x2000a328
 8005f54:	2000a338 	.word	0x2000a338

08005f58 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <uartWrite+0x1e>
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d00f      	beq.n	8005f94 <uartWrite+0x3c>
 8005f74:	e020      	b.n	8005fb8 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	2364      	movs	r3, #100	; 0x64
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	4811      	ldr	r0, [pc, #68]	; (8005fc4 <uartWrite+0x6c>)
 8005f80:	f00a f91b 	bl	80101ba <HAL_UART_Transmit>
 8005f84:	4603      	mov	r3, r0
 8005f86:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8005f88:	7cfb      	ldrb	r3, [r7, #19]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d111      	bne.n	8005fb2 <uartWrite+0x5a>
        {
          ret = length;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	617b      	str	r3, [r7, #20]
        }
      break;
 8005f92:	e00e      	b.n	8005fb2 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	2364      	movs	r3, #100	; 0x64
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4809      	ldr	r0, [pc, #36]	; (8005fc4 <uartWrite+0x6c>)
 8005f9e:	f00a f90c 	bl	80101ba <HAL_UART_Transmit>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <uartWrite+0x5e>
      {
        ret = length;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	617b      	str	r3, [r7, #20]
      }
      break;
 8005fb0:	e001      	b.n	8005fb6 <uartWrite+0x5e>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <uartWrite+0x60>
      break;
 8005fb6:	bf00      	nop
  }

  return ret;
 8005fb8:	697b      	ldr	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000af24 	.word	0x2000af24

08005fc8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8005fc8:	b40e      	push	{r1, r2, r3}
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b0c7      	sub	sp, #284	; 0x11c
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	1dfb      	adds	r3, r7, #7
 8005fd4:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8005fd6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005fda:	f107 030c 	add.w	r3, r7, #12
 8005fde:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	f107 0010 	add.w	r0, r7, #16
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ff2:	f00c fe67 	bl	8012cc4 <vsniprintf>
 8005ff6:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8005ffa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ffe:	f107 0110 	add.w	r1, r7, #16
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff ffa6 	bl	8005f58 <uartWrite>
 800600c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006010:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006014:	4618      	mov	r0, r3
 8006016:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800601a:	46bd      	mov	sp, r7
 800601c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr

08006024 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5b      	ldr	r2, [pc, #364]	; (80061d8 <HAL_UART_MspInit+0x18c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	f040 80b0 	bne.w	80061d0 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <HAL_UART_MspInit+0x190>)
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	4a58      	ldr	r2, [pc, #352]	; (80061dc <HAL_UART_MspInit+0x190>)
 800607a:	f043 0310 	orr.w	r3, r3, #16
 800607e:	6453      	str	r3, [r2, #68]	; 0x44
 8006080:	4b56      	ldr	r3, [pc, #344]	; (80061dc <HAL_UART_MspInit+0x190>)
 8006082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	4b52      	ldr	r3, [pc, #328]	; (80061dc <HAL_UART_MspInit+0x190>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4a51      	ldr	r2, [pc, #324]	; (80061dc <HAL_UART_MspInit+0x190>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6313      	str	r3, [r2, #48]	; 0x30
 800609c:	4b4f      	ldr	r3, [pc, #316]	; (80061dc <HAL_UART_MspInit+0x190>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a8:	2300      	movs	r3, #0
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	4b4b      	ldr	r3, [pc, #300]	; (80061dc <HAL_UART_MspInit+0x190>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	4a4a      	ldr	r2, [pc, #296]	; (80061dc <HAL_UART_MspInit+0x190>)
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	6313      	str	r3, [r2, #48]	; 0x30
 80060b8:	4b48      	ldr	r3, [pc, #288]	; (80061dc <HAL_UART_MspInit+0x190>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80060c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ca:	2302      	movs	r3, #2
 80060cc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d2:	2303      	movs	r3, #3
 80060d4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060d6:	2307      	movs	r3, #7
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060da:	f107 0314 	add.w	r3, r7, #20
 80060de:	4619      	mov	r1, r3
 80060e0:	483f      	ldr	r0, [pc, #252]	; (80061e0 <HAL_UART_MspInit+0x194>)
 80060e2:	f006 faa9 	bl	800c638 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80060e6:	2340      	movs	r3, #64	; 0x40
 80060e8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ea:	2302      	movs	r3, #2
 80060ec:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f2:	2303      	movs	r3, #3
 80060f4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060f6:	2307      	movs	r3, #7
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fa:	f107 0314 	add.w	r3, r7, #20
 80060fe:	4619      	mov	r1, r3
 8006100:	4838      	ldr	r0, [pc, #224]	; (80061e4 <HAL_UART_MspInit+0x198>)
 8006102:	f006 fa99 	bl	800c638 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006108:	4a38      	ldr	r2, [pc, #224]	; (80061ec <HAL_UART_MspInit+0x1a0>)
 800610a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800610e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006112:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006114:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800611a:	4b33      	ldr	r3, [pc, #204]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800611c:	2200      	movs	r2, #0
 800611e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006120:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006126:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006128:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800612a:	2200      	movs	r2, #0
 800612c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800612e:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006130:	2200      	movs	r2, #0
 8006132:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006134:	4b2c      	ldr	r3, [pc, #176]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800613a:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800613c:	2200      	movs	r2, #0
 800613e:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006140:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006142:	2200      	movs	r2, #0
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006146:	4828      	ldr	r0, [pc, #160]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 8006148:	f005 fe7c 	bl	800be44 <HAL_DMA_Init>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8006152:	f7fb f8c9 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a23      	ldr	r2, [pc, #140]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800615a:	631a      	str	r2, [r3, #48]	; 0x30
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <HAL_UART_MspInit+0x19c>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 8006164:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <HAL_UART_MspInit+0x1a8>)
 8006166:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 800616a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800616e:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006170:	4b1f      	ldr	r3, [pc, #124]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006176:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 8006178:	2200      	movs	r2, #0
 800617a:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800617c:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 800617e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006182:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006184:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 8006186:	2200      	movs	r2, #0
 8006188:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800618a:	4b19      	ldr	r3, [pc, #100]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 800618c:	2200      	movs	r2, #0
 800618e:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 8006192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006196:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800619e:	4b14      	ldr	r3, [pc, #80]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80061a4:	4812      	ldr	r0, [pc, #72]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 80061a6:	f005 fe4d 	bl	800be44 <HAL_DMA_Init>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80061b0:	f7fb f89a 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a0e      	ldr	r2, [pc, #56]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 80061b8:	635a      	str	r2, [r3, #52]	; 0x34
 80061ba:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <HAL_UART_MspInit+0x1a4>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	2025      	movs	r0, #37	; 0x25
 80061c6:	f005 fdf8 	bl	800bdba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061ca:	2025      	movs	r0, #37	; 0x25
 80061cc:	f005 fe11 	bl	800bdf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80061d0:	bf00      	nop
 80061d2:	3728      	adds	r7, #40	; 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40011000 	.word	0x40011000
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40020000 	.word	0x40020000
 80061e4:	40020400 	.word	0x40020400
 80061e8:	2000ae64 	.word	0x2000ae64
 80061ec:	400264b8 	.word	0x400264b8
 80061f0:	2000aec4 	.word	0x2000aec4
 80061f4:	40026440 	.word	0x40026440

080061f8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a11      	ldr	r2, [pc, #68]	; (800624c <HAL_UART_MspDeInit+0x54>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d11b      	bne.n	8006242 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_UART_MspDeInit+0x58>)
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <HAL_UART_MspDeInit+0x58>)
 8006210:	f023 0310 	bic.w	r3, r3, #16
 8006214:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800621a:	480e      	ldr	r0, [pc, #56]	; (8006254 <HAL_UART_MspDeInit+0x5c>)
 800621c:	f006 fb8e 	bl	800c93c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006220:	2140      	movs	r1, #64	; 0x40
 8006222:	480d      	ldr	r0, [pc, #52]	; (8006258 <HAL_UART_MspDeInit+0x60>)
 8006224:	f006 fb8a 	bl	800c93c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	4618      	mov	r0, r3
 800622e:	f005 feb7 	bl	800bfa0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	4618      	mov	r0, r3
 8006238:	f005 feb2 	bl	800bfa0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800623c:	2025      	movs	r0, #37	; 0x25
 800623e:	f005 fde6 	bl	800be0e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40011000 	.word	0x40011000
 8006250:	40023800 	.word	0x40023800
 8006254:	40020000 	.word	0x40020000
 8006258:	40020400 	.word	0x40020400

0800625c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006266:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <SD_CheckStatus+0x80>)
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 800626c:	f7fe fa30 	bl	80046d0 <sdIsInit>
 8006270:	4603      	mov	r3, r0
 8006272:	f083 0301 	eor.w	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 800627c:	4b17      	ldr	r3, [pc, #92]	; (80062dc <SD_CheckStatus+0x80>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <SD_CheckStatus+0x80>)
 800628a:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 800628c:	f7fe fa2c 	bl	80046e8 <sdIsDetected>
 8006290:	4603      	mov	r3, r0
 8006292:	f083 0301 	eor.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <SD_CheckStatus+0x80>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	f043 0302 	orr.w	r3, r3, #2
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <SD_CheckStatus+0x80>)
 80062aa:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 80062ac:	200a      	movs	r0, #10
 80062ae:	f7fe fa9d 	bl	80047ec <sdIsReady>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f083 0301 	eor.w	r3, r3, #1
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <SD_CheckStatus+0x80>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	4b04      	ldr	r3, [pc, #16]	; (80062dc <SD_CheckStatus+0x80>)
 80062cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80062ce:	4b03      	ldr	r3, [pc, #12]	; (80062dc <SD_CheckStatus+0x80>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	b2db      	uxtb	r3, r3
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000038 	.word	0x20000038

080062e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <SD_initialize+0x40>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 80062f0:	f7fe f9ee 	bl	80046d0 <sdIsInit>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f083 0301 	eor.w	r3, r3, #1
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <SD_initialize+0x40>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <SD_initialize+0x40>)
 800630e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <SD_initialize+0x40>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000038 	.word	0x20000038

08006324 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff ff93 	bl	800625c <SD_CheckStatus>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8006354:	f242 7310 	movw	r3, #10000	; 0x2710
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fe fa65 	bl	800482c <sdReadBlocks>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <SD_read+0x2c>
  {
    res = RES_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 800638a:	f242 7310 	movw	r3, #10000	; 0x2710
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fe fa94 	bl	80048c0 <sdWriteBlocks>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <SD_write+0x2c>
  {
    res = RES_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08c      	sub	sp, #48	; 0x30
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	603a      	str	r2, [r7, #0]
 80063b6:	71fb      	strb	r3, [r7, #7]
 80063b8:	460b      	mov	r3, r1
 80063ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063c2:	4b25      	ldr	r3, [pc, #148]	; (8006458 <SD_ioctl+0xac>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <SD_ioctl+0x28>
 80063d0:	2303      	movs	r3, #3
 80063d2:	e03c      	b.n	800644e <SD_ioctl+0xa2>

  switch (cmd)
 80063d4:	79bb      	ldrb	r3, [r7, #6]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d834      	bhi.n	8006444 <SD_ioctl+0x98>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <SD_ioctl+0x34>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	080063f9 	.word	0x080063f9
 80063e8:	08006411 	.word	0x08006411
 80063ec:	0800642b 	.word	0x0800642b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063f6:	e028      	b.n	800644a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe f989 	bl	8004714 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800640e:	e01c      	b.n	800644a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe f97d 	bl	8004714 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	b29a      	uxth	r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006428:	e00f      	b.n	800644a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe f970 	bl	8004714 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	0a5a      	lsrs	r2, r3, #9
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006442:	e002      	b.n	800644a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006444:	2304      	movs	r3, #4
 8006446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800644a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800644e:	4618      	mov	r0, r3
 8006450:	3730      	adds	r7, #48	; 0x30
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000038 	.word	0x20000038

0800645c <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	3306      	adds	r3, #6
 800646a:	2220      	movs	r2, #32
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f00b fc0f 	bl	8011c92 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <hanFontLoad+0x2e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b0a      	cmp	r3, #10
 8006488:	d107      	bne.n	800649a <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2204      	movs	r2, #4
 800648e:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2201      	movs	r2, #1
 8006494:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8006496:	2304      	movs	r3, #4
 8006498:	e03b      	b.n	8006512 <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da2b      	bge.n	80064fc <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	041a      	lsls	r2, r3, #16
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3301      	adds	r3, #1
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	4313      	orrs	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	3202      	adds	r2, #2
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a16      	ldr	r2, [pc, #88]	; (800651c <hanFontLoad+0xc0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d90e      	bls.n	80064e4 <hanFontLoad+0x88>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <hanFontLoad+0xc4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d80a      	bhi.n	80064e4 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2201      	movs	r2, #1
 80064d2:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2203      	movs	r2, #3
 80064d8:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f91f 	bl	8006720 <hanUniFontLoad>
 80064e2:	e009      	b.n	80064f8 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2202      	movs	r2, #2
 80064ee:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f816 	bl	8006524 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e00a      	b.n	8006512 <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2202      	movs	r2, #2
 8006500:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2201      	movs	r2, #1
 8006506:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa30 	bl	8006970 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8006510:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	00eab07f 	.word	0x00eab07f
 8006520:	00ed9fb0 	.word	0x00ed9fb0

08006524 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	b21a      	sxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3301      	adds	r3, #1
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b21b      	sxth	r3, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	b21b      	sxth	r3, r3
 8006542:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8006544:	89bb      	ldrh	r3, [r7, #12]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fa3c 	bl	80069c4 <hanCnvCodeWan2Johab>
 800654c:	4603      	mov	r3, r0
 800654e:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8006550:	89bb      	ldrh	r3, [r7, #12]
 8006552:	0a9b      	lsrs	r3, r3, #10
 8006554:	b29b      	uxth	r3, r3
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	b29a      	uxth	r2, r3
 800655c:	4b63      	ldr	r3, [pc, #396]	; (80066ec <hanWanFontLoad+0x1c8>)
 800655e:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8006560:	89bb      	ldrh	r3, [r7, #12]
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	b29b      	uxth	r3, r3
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	b29a      	uxth	r2, r3
 800656c:	4b60      	ldr	r3, [pc, #384]	; (80066f0 <hanWanFontLoad+0x1cc>)
 800656e:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8006570:	89bb      	ldrh	r3, [r7, #12]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	b29a      	uxth	r2, r3
 8006578:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <hanWanFontLoad+0x1d0>)
 800657a:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 800657c:	4b5b      	ldr	r3, [pc, #364]	; (80066ec <hanWanFontLoad+0x1c8>)
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	4b5d      	ldr	r3, [pc, #372]	; (80066f8 <hanWanFontLoad+0x1d4>)
 8006584:	5c9b      	ldrb	r3, [r3, r2]
 8006586:	b29a      	uxth	r2, r3
 8006588:	4b58      	ldr	r3, [pc, #352]	; (80066ec <hanWanFontLoad+0x1c8>)
 800658a:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 800658c:	4b58      	ldr	r3, [pc, #352]	; (80066f0 <hanWanFontLoad+0x1cc>)
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	4b5a      	ldr	r3, [pc, #360]	; (80066fc <hanWanFontLoad+0x1d8>)
 8006594:	5c9b      	ldrb	r3, [r3, r2]
 8006596:	b29a      	uxth	r2, r3
 8006598:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <hanWanFontLoad+0x1cc>)
 800659a:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 800659c:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <hanWanFontLoad+0x1d0>)
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b57      	ldr	r3, [pc, #348]	; (8006700 <hanWanFontLoad+0x1dc>)
 80065a4:	5c9b      	ldrb	r3, [r3, r2]
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	4b52      	ldr	r3, [pc, #328]	; (80066f4 <hanWanFontLoad+0x1d0>)
 80065aa:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80065ac:	4b51      	ldr	r3, [pc, #324]	; (80066f4 <hanWanFontLoad+0x1d0>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d006      	beq.n	80065c2 <hanWanFontLoad+0x9e>
 80065b4:	4b4e      	ldr	r3, [pc, #312]	; (80066f0 <hanWanFontLoad+0x1cc>)
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b52      	ldr	r3, [pc, #328]	; (8006704 <hanWanFontLoad+0x1e0>)
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	e005      	b.n	80065ce <hanWanFontLoad+0xaa>
 80065c2:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <hanWanFontLoad+0x1cc>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <hanWanFontLoad+0x1e4>)
 80065ca:	5c9b      	ldrb	r3, [r3, r2]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4a4f      	ldr	r2, [pc, #316]	; (800670c <hanWanFontLoad+0x1e8>)
 80065d0:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80065d2:	4b46      	ldr	r3, [pc, #280]	; (80066ec <hanWanFontLoad+0x1c8>)
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <hanWanFontLoad+0xca>
 80065da:	4b44      	ldr	r3, [pc, #272]	; (80066ec <hanWanFontLoad+0x1c8>)
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d005      	beq.n	80065ee <hanWanFontLoad+0xca>
 80065e2:	4b42      	ldr	r3, [pc, #264]	; (80066ec <hanWanFontLoad+0x1c8>)
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d001      	beq.n	80065ee <hanWanFontLoad+0xca>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <hanWanFontLoad+0xcc>
 80065ee:	2300      	movs	r3, #0
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4a40      	ldr	r2, [pc, #256]	; (80066f4 <hanWanFontLoad+0x1d0>)
 80065f4:	8812      	ldrh	r2, [r2, #0]
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d001      	beq.n	80065fe <hanWanFontLoad+0xda>
 80065fa:	2202      	movs	r2, #2
 80065fc:	e000      	b.n	8006600 <hanWanFontLoad+0xdc>
 80065fe:	2200      	movs	r2, #0
 8006600:	4413      	add	r3, r2
 8006602:	b29a      	uxth	r2, r3
 8006604:	4b42      	ldr	r3, [pc, #264]	; (8006710 <hanWanFontLoad+0x1ec>)
 8006606:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006608:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <hanWanFontLoad+0x1cc>)
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b41      	ldr	r3, [pc, #260]	; (8006714 <hanWanFontLoad+0x1f0>)
 8006610:	5c9b      	ldrb	r3, [r3, r2]
 8006612:	b29a      	uxth	r2, r3
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <hanWanFontLoad+0x1f4>)
 8006616:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006618:	2300      	movs	r3, #0
 800661a:	81fb      	strh	r3, [r7, #14]
 800661c:	e035      	b.n	800668a <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800661e:	4b3b      	ldr	r3, [pc, #236]	; (800670c <hanWanFontLoad+0x1e8>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	461a      	mov	r2, r3
 800662e:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <hanWanFontLoad+0x1c8>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	441a      	add	r2, r3
 8006634:	89fb      	ldrh	r3, [r7, #14]
 8006636:	4939      	ldr	r1, [pc, #228]	; (800671c <hanWanFontLoad+0x1f8>)
 8006638:	0152      	lsls	r2, r2, #5
 800663a:	4413      	add	r3, r2
 800663c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006640:	89fb      	ldrh	r3, [r7, #14]
 8006642:	b2d1      	uxtb	r1, r2
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	4413      	add	r3, r2
 8006648:	460a      	mov	r2, r1
 800664a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4413      	add	r3, r2
 8006652:	7999      	ldrb	r1, [r3, #6]
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <hanWanFontLoad+0x1ec>)
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	2316      	movs	r3, #22
 800665c:	fb03 f302 	mul.w	r3, r3, r2
 8006660:	33a0      	adds	r3, #160	; 0xa0
 8006662:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <hanWanFontLoad+0x1cc>)
 8006664:	8812      	ldrh	r2, [r2, #0]
 8006666:	441a      	add	r2, r3
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	482c      	ldr	r0, [pc, #176]	; (800671c <hanWanFontLoad+0x1f8>)
 800666c:	0152      	lsls	r2, r2, #5
 800666e:	4413      	add	r3, r2
 8006670:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	89fb      	ldrh	r3, [r7, #14]
 8006678:	430a      	orrs	r2, r1
 800667a:	b2d1      	uxtb	r1, r2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4413      	add	r3, r2
 8006680:	460a      	mov	r2, r1
 8006682:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006684:	89fb      	ldrh	r3, [r7, #14]
 8006686:	3301      	adds	r3, #1
 8006688:	81fb      	strh	r3, [r7, #14]
 800668a:	89fb      	ldrh	r3, [r7, #14]
 800668c:	2b1f      	cmp	r3, #31
 800668e:	d9c6      	bls.n	800661e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8006690:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <hanWanFontLoad+0x1d0>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d025      	beq.n	80066e4 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006698:	2300      	movs	r3, #0
 800669a:	81fb      	strh	r3, [r7, #14]
 800669c:	e01f      	b.n	80066de <hanWanFontLoad+0x1ba>
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	4413      	add	r3, r2
 80066a4:	7999      	ldrb	r1, [r3, #6]
 80066a6:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <hanWanFontLoad+0x1f4>)
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	33f8      	adds	r3, #248	; 0xf8
 80066b6:	4a0f      	ldr	r2, [pc, #60]	; (80066f4 <hanWanFontLoad+0x1d0>)
 80066b8:	8812      	ldrh	r2, [r2, #0]
 80066ba:	441a      	add	r2, r3
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	4817      	ldr	r0, [pc, #92]	; (800671c <hanWanFontLoad+0x1f8>)
 80066c0:	0152      	lsls	r2, r2, #5
 80066c2:	4413      	add	r3, r2
 80066c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	89fb      	ldrh	r3, [r7, #14]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	b2d1      	uxtb	r1, r2
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	4413      	add	r3, r2
 80066d4:	460a      	mov	r2, r1
 80066d6:	719a      	strb	r2, [r3, #6]
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	3301      	adds	r3, #1
 80066dc:	81fb      	strh	r3, [r7, #14]
 80066de:	89fb      	ldrh	r3, [r7, #14]
 80066e0:	2b1f      	cmp	r3, #31
 80066e2:	d9dc      	bls.n	800669e <hanWanFontLoad+0x17a>
  }
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000a438 	.word	0x2000a438
 80066f0:	2000a43a 	.word	0x2000a43a
 80066f4:	2000a43c 	.word	0x2000a43c
 80066f8:	08016110 	.word	0x08016110
 80066fc:	08016130 	.word	0x08016130
 8006700:	08016150 	.word	0x08016150
 8006704:	080161e8 	.word	0x080161e8
 8006708:	080161d0 	.word	0x080161d0
 800670c:	2000a43e 	.word	0x2000a43e
 8006710:	2000a440 	.word	0x2000a440
 8006714:	08016200 	.word	0x08016200
 8006718:	2000a442 	.word	0x2000a442
 800671c:	08018700 	.word	0x08018700

08006720 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	031b      	lsls	r3, r3, #12
 8006730:	b21a      	sxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3301      	adds	r3, #1
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	b21b      	sxth	r3, r3
 800673c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8006740:	b21b      	sxth	r3, r3
 8006742:	4313      	orrs	r3, r2
 8006744:	b21a      	sxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3302      	adds	r3, #2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b21b      	sxth	r3, r3
 800674e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006752:	b21b      	sxth	r3, r3
 8006754:	4313      	orrs	r3, r2
 8006756:	b21b      	sxth	r3, r3
 8006758:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 800675a:	89bb      	ldrh	r3, [r7, #12]
 800675c:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8006760:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8006762:	89ba      	ldrh	r2, [r7, #12]
 8006764:	0893      	lsrs	r3, r2, #2
 8006766:	4973      	ldr	r1, [pc, #460]	; (8006934 <hanUniFontLoad+0x214>)
 8006768:	fba1 3103 	umull	r3, r1, r1, r3
 800676c:	460b      	mov	r3, r1
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	1a5b      	subs	r3, r3, r1
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	b29a      	uxth	r2, r3
 8006778:	4b6f      	ldr	r3, [pc, #444]	; (8006938 <hanUniFontLoad+0x218>)
 800677a:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 800677c:	89bb      	ldrh	r3, [r7, #12]
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	4a6c      	ldr	r2, [pc, #432]	; (8006934 <hanUniFontLoad+0x214>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8006788:	89b9      	ldrh	r1, [r7, #12]
 800678a:	4b6c      	ldr	r3, [pc, #432]	; (800693c <hanUniFontLoad+0x21c>)
 800678c:	fba3 2301 	umull	r2, r3, r3, r1
 8006790:	1aca      	subs	r2, r1, r3
 8006792:	0852      	lsrs	r2, r2, #1
 8006794:	4413      	add	r3, r2
 8006796:	091a      	lsrs	r2, r3, #4
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	00da      	lsls	r2, r3, #3
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	1a8b      	subs	r3, r1, r2
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	4b66      	ldr	r3, [pc, #408]	; (8006940 <hanUniFontLoad+0x220>)
 80067a8:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 80067aa:	89ba      	ldrh	r2, [r7, #12]
 80067ac:	4b63      	ldr	r3, [pc, #396]	; (800693c <hanUniFontLoad+0x21c>)
 80067ae:	fba3 1302 	umull	r1, r3, r3, r2
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	0852      	lsrs	r2, r2, #1
 80067b6:	4413      	add	r3, r2
 80067b8:	091b      	lsrs	r3, r3, #4
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	4b61      	ldr	r3, [pc, #388]	; (8006944 <hanUniFontLoad+0x224>)
 80067be:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80067c0:	4b60      	ldr	r3, [pc, #384]	; (8006944 <hanUniFontLoad+0x224>)
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b60      	ldr	r3, [pc, #384]	; (8006948 <hanUniFontLoad+0x228>)
 80067c8:	5c9b      	ldrb	r3, [r3, r2]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	4b5d      	ldr	r3, [pc, #372]	; (8006944 <hanUniFontLoad+0x224>)
 80067ce:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 80067d0:	4b5b      	ldr	r3, [pc, #364]	; (8006940 <hanUniFontLoad+0x220>)
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	4b5d      	ldr	r3, [pc, #372]	; (800694c <hanUniFontLoad+0x22c>)
 80067d8:	5c9b      	ldrb	r3, [r3, r2]
 80067da:	b29a      	uxth	r2, r3
 80067dc:	4b58      	ldr	r3, [pc, #352]	; (8006940 <hanUniFontLoad+0x220>)
 80067de:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80067e0:	4b55      	ldr	r3, [pc, #340]	; (8006938 <hanUniFontLoad+0x218>)
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b5a      	ldr	r3, [pc, #360]	; (8006950 <hanUniFontLoad+0x230>)
 80067e8:	5c9b      	ldrb	r3, [r3, r2]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	4b52      	ldr	r3, [pc, #328]	; (8006938 <hanUniFontLoad+0x218>)
 80067ee:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80067f0:	4b51      	ldr	r3, [pc, #324]	; (8006938 <hanUniFontLoad+0x218>)
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <hanUniFontLoad+0xe6>
 80067f8:	4b51      	ldr	r3, [pc, #324]	; (8006940 <hanUniFontLoad+0x220>)
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b55      	ldr	r3, [pc, #340]	; (8006954 <hanUniFontLoad+0x234>)
 8006800:	5c9b      	ldrb	r3, [r3, r2]
 8006802:	b29b      	uxth	r3, r3
 8006804:	e005      	b.n	8006812 <hanUniFontLoad+0xf2>
 8006806:	4b4e      	ldr	r3, [pc, #312]	; (8006940 <hanUniFontLoad+0x220>)
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	4b52      	ldr	r3, [pc, #328]	; (8006958 <hanUniFontLoad+0x238>)
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	b29b      	uxth	r3, r3
 8006812:	4a52      	ldr	r2, [pc, #328]	; (800695c <hanUniFontLoad+0x23c>)
 8006814:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8006816:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <hanUniFontLoad+0x224>)
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <hanUniFontLoad+0x112>
 800681e:	4b49      	ldr	r3, [pc, #292]	; (8006944 <hanUniFontLoad+0x224>)
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d005      	beq.n	8006832 <hanUniFontLoad+0x112>
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <hanUniFontLoad+0x224>)
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	2b10      	cmp	r3, #16
 800682c:	d001      	beq.n	8006832 <hanUniFontLoad+0x112>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <hanUniFontLoad+0x114>
 8006832:	2300      	movs	r3, #0
 8006834:	b29b      	uxth	r3, r3
 8006836:	4a40      	ldr	r2, [pc, #256]	; (8006938 <hanUniFontLoad+0x218>)
 8006838:	8812      	ldrh	r2, [r2, #0]
 800683a:	2a00      	cmp	r2, #0
 800683c:	d001      	beq.n	8006842 <hanUniFontLoad+0x122>
 800683e:	2202      	movs	r2, #2
 8006840:	e000      	b.n	8006844 <hanUniFontLoad+0x124>
 8006842:	2200      	movs	r2, #0
 8006844:	4413      	add	r3, r2
 8006846:	b29a      	uxth	r2, r3
 8006848:	4b45      	ldr	r3, [pc, #276]	; (8006960 <hanUniFontLoad+0x240>)
 800684a:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 800684c:	4b3c      	ldr	r3, [pc, #240]	; (8006940 <hanUniFontLoad+0x220>)
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	4b44      	ldr	r3, [pc, #272]	; (8006964 <hanUniFontLoad+0x244>)
 8006854:	5c9b      	ldrb	r3, [r3, r2]
 8006856:	b29a      	uxth	r2, r3
 8006858:	4b43      	ldr	r3, [pc, #268]	; (8006968 <hanUniFontLoad+0x248>)
 800685a:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	81fb      	strh	r3, [r7, #14]
 8006860:	e035      	b.n	80068ce <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8006862:	4b3e      	ldr	r3, [pc, #248]	; (800695c <hanUniFontLoad+0x23c>)
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	461a      	mov	r2, r3
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <hanUniFontLoad+0x224>)
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	441a      	add	r2, r3
 8006878:	89fb      	ldrh	r3, [r7, #14]
 800687a:	493c      	ldr	r1, [pc, #240]	; (800696c <hanUniFontLoad+0x24c>)
 800687c:	0152      	lsls	r2, r2, #5
 800687e:	4413      	add	r3, r2
 8006880:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	b2d1      	uxtb	r1, r2
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	4413      	add	r3, r2
 800688c:	460a      	mov	r2, r1
 800688e:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	4413      	add	r3, r2
 8006896:	7999      	ldrb	r1, [r3, #6]
 8006898:	4b31      	ldr	r3, [pc, #196]	; (8006960 <hanUniFontLoad+0x240>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	2316      	movs	r3, #22
 80068a0:	fb03 f302 	mul.w	r3, r3, r2
 80068a4:	33a0      	adds	r3, #160	; 0xa0
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <hanUniFontLoad+0x220>)
 80068a8:	8812      	ldrh	r2, [r2, #0]
 80068aa:	441a      	add	r2, r3
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	482f      	ldr	r0, [pc, #188]	; (800696c <hanUniFontLoad+0x24c>)
 80068b0:	0152      	lsls	r2, r2, #5
 80068b2:	4413      	add	r3, r2
 80068b4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	89fb      	ldrh	r3, [r7, #14]
 80068bc:	430a      	orrs	r2, r1
 80068be:	b2d1      	uxtb	r1, r2
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	4413      	add	r3, r2
 80068c4:	460a      	mov	r2, r1
 80068c6:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	3301      	adds	r3, #1
 80068cc:	81fb      	strh	r3, [r7, #14]
 80068ce:	89fb      	ldrh	r3, [r7, #14]
 80068d0:	2b1f      	cmp	r3, #31
 80068d2:	d9c6      	bls.n	8006862 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 80068d4:	4b18      	ldr	r3, [pc, #96]	; (8006938 <hanUniFontLoad+0x218>)
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d025      	beq.n	8006928 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80068dc:	2300      	movs	r3, #0
 80068de:	81fb      	strh	r3, [r7, #14]
 80068e0:	e01f      	b.n	8006922 <hanUniFontLoad+0x202>
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	4413      	add	r3, r2
 80068e8:	7999      	ldrb	r1, [r3, #6]
 80068ea:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <hanUniFontLoad+0x248>)
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	33f8      	adds	r3, #248	; 0xf8
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <hanUniFontLoad+0x218>)
 80068fc:	8812      	ldrh	r2, [r2, #0]
 80068fe:	441a      	add	r2, r3
 8006900:	89fb      	ldrh	r3, [r7, #14]
 8006902:	481a      	ldr	r0, [pc, #104]	; (800696c <hanUniFontLoad+0x24c>)
 8006904:	0152      	lsls	r2, r2, #5
 8006906:	4413      	add	r3, r2
 8006908:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	89fb      	ldrh	r3, [r7, #14]
 8006910:	430a      	orrs	r2, r1
 8006912:	b2d1      	uxtb	r1, r2
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	4413      	add	r3, r2
 8006918:	460a      	mov	r2, r1
 800691a:	719a      	strb	r2, [r3, #6]
 800691c:	89fb      	ldrh	r3, [r7, #14]
 800691e:	3301      	adds	r3, #1
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	89fb      	ldrh	r3, [r7, #14]
 8006924:	2b1f      	cmp	r3, #31
 8006926:	d9dc      	bls.n	80068e2 <hanUniFontLoad+0x1c2>
  }
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	24924925 	.word	0x24924925
 8006938:	2000a444 	.word	0x2000a444
 800693c:	86186187 	.word	0x86186187
 8006940:	2000a446 	.word	0x2000a446
 8006944:	2000a448 	.word	0x2000a448
 8006948:	08016170 	.word	0x08016170
 800694c:	08016190 	.word	0x08016190
 8006950:	080161b0 	.word	0x080161b0
 8006954:	080161e8 	.word	0x080161e8
 8006958:	080161d0 	.word	0x080161d0
 800695c:	2000a44a 	.word	0x2000a44a
 8006960:	2000a44c 	.word	0x2000a44c
 8006964:	08016200 	.word	0x08016200
 8006968:	2000a44e 	.word	0x2000a44e
 800696c:	08018700 	.word	0x08018700

08006970 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8006980:	7b7b      	ldrb	r3, [r7, #13]
 8006982:	3b20      	subs	r3, #32
 8006984:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8006986:	2300      	movs	r3, #0
 8006988:	81fb      	strh	r3, [r7, #14]
 800698a:	e00f      	b.n	80069ac <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 800698c:	7b7a      	ldrb	r2, [r7, #13]
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	490b      	ldr	r1, [pc, #44]	; (80069c0 <hanEngFontLoad+0x50>)
 8006992:	0112      	lsls	r2, r2, #4
 8006994:	4413      	add	r3, r2
 8006996:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800699a:	89fb      	ldrh	r3, [r7, #14]
 800699c:	b2d1      	uxtb	r1, r2
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	4413      	add	r3, r2
 80069a2:	460a      	mov	r2, r1
 80069a4:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 80069a6:	89fb      	ldrh	r3, [r7, #14]
 80069a8:	3301      	adds	r3, #1
 80069aa:	81fb      	strh	r3, [r7, #14]
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d9ec      	bls.n	800698c <hanEngFontLoad+0x1c>
  }
}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	08014910 	.word	0x08014910

080069c4 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	3bb0      	subs	r3, #176	; 0xb0
 80069de:	225e      	movs	r2, #94	; 0x5e
 80069e0:	fb02 f203 	mul.w	r2, r2, r3
 80069e4:	89bb      	ldrh	r3, [r7, #12]
 80069e6:	3ba1      	subs	r3, #161	; 0xa1
 80069e8:	4413      	add	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 80069ec:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <hanCnvCodeWan2Johab+0x40>)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f4:	b29b      	uxth	r3, r3
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	08016240 	.word	0x08016240

08006a08 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <TransferDoneISR+0x30>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <TransferDoneISR+0x30>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	2002      	movs	r0, #2
 8006a20:	f7fc faa2 	bl	8002f68 <gpioPinWrite>

    if (frameCallBack != NULL)
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <TransferDoneISR+0x34>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <TransferDoneISR+0x34>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4798      	blx	r3
    }
  }
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000a458 	.word	0x2000a458
 8006a3c:	2000a454 	.word	0x2000a454

08006a40 <st7735Init>:


bool st7735Init(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8006a46:	f000 f835 	bl	8006ab4 <st7735Reset>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	71fb      	strb	r3, [r7, #7]

  return ret;
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <st7735InitDriver+0x40>)
 8006a64:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a0c      	ldr	r2, [pc, #48]	; (8006a9c <st7735InitDriver+0x44>)
 8006a6a:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <st7735InitDriver+0x48>)
 8006a70:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <st7735InitDriver+0x4c>)
 8006a76:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <st7735InitDriver+0x50>)
 8006a7c:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <st7735InitDriver+0x54>)
 8006a82:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <st7735InitDriver+0x58>)
 8006a88:	619a      	str	r2, [r3, #24]
  return true;
 8006a8a:	2301      	movs	r3, #1
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	08006a41 	.word	0x08006a41
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006d79 	.word	0x08006d79
 8006aa4:	08006b2d 	.word	0x08006b2d
 8006aa8:	08006b3d 	.word	0x08006b3d
 8006aac:	08006fcd 	.word	0x08006fcd
 8006ab0:	08006f81 	.word	0x08006f81

08006ab4 <st7735Reset>:

bool st7735Reset(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <st7735Reset+0x70>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fbca 	bl	8005258 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8006ac4:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <st7735Reset+0x70>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fc20 	bl	8005310 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <st7735Reset+0x70>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	4914      	ldr	r1, [pc, #80]	; (8006b28 <st7735Reset+0x74>)
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fd52 	bl	8005580 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006adc:	2100      	movs	r1, #0
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f7fc fa42 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	2003      	movs	r0, #3
 8006ae8:	f7fc fa3e 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8006aec:	2101      	movs	r1, #1
 8006aee:	2002      	movs	r0, #2
 8006af0:	f7fc fa3a 	bl	8002f68 <gpioPinWrite>
  delay(10);
 8006af4:	200a      	movs	r0, #10
 8006af6:	f7fa fb7d 	bl	80011f4 <delay>

  st7735InitRegs();
 8006afa:	f000 f863 	bl	8006bc4 <st7735InitRegs>


  st7735SetRotation(1);
 8006afe:	2001      	movs	r0, #1
 8006b00:	f000 f910 	bl	8006d24 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8006b04:	2300      	movs	r3, #0
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	22a0      	movs	r2, #160	; 0xa0
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f000 f97e 	bl	8006e10 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006b14:	2100      	movs	r1, #0
 8006b16:	2001      	movs	r0, #1
 8006b18:	f7fc fa26 	bl	8002f68 <gpioPinWrite>
  return true;
 8006b1c:	2301      	movs	r3, #1
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	2000a450 	.word	0x2000a450
 8006b28:	08006a09 	.word	0x08006a09

08006b2c <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8006b30:	23a0      	movs	r3, #160	; 0xa0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8006b40:	2380      	movs	r3, #128	; 0x80
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <writecommand>:

void writecommand(uint8_t c)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8006b56:	2100      	movs	r1, #0
 8006b58:	2003      	movs	r0, #3
 8006b5a:	f7fc fa05 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006b5e:	2100      	movs	r1, #0
 8006b60:	2002      	movs	r0, #2
 8006b62:	f7fc fa01 	bl	8002f68 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <writecommand+0x38>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	79fa      	ldrb	r2, [r7, #7]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fc64 	bl	800543c <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006b74:	2101      	movs	r1, #1
 8006b76:	2002      	movs	r0, #2
 8006b78:	f7fc f9f6 	bl	8002f68 <gpioPinWrite>
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	2000a450 	.word	0x2000a450

08006b88 <writedata>:

void writedata(uint8_t d)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006b92:	2101      	movs	r1, #1
 8006b94:	2003      	movs	r0, #3
 8006b96:	f7fc f9e7 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2002      	movs	r0, #2
 8006b9e:	f7fc f9e3 	bl	8002f68 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8006ba2:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <writedata+0x38>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	79fa      	ldrb	r2, [r7, #7]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fc46 	bl	800543c <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	2002      	movs	r0, #2
 8006bb4:	f7fc f9d8 	bl	8002f68 <gpioPinWrite>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	2000a450 	.word	0x2000a450

08006bc4 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7ff ffbf 	bl	8006b4c <writecommand>
  delay(10);
 8006bce:	200a      	movs	r0, #10
 8006bd0:	f7fa fb10 	bl	80011f4 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8006bd4:	2011      	movs	r0, #17
 8006bd6:	f7ff ffb9 	bl	8006b4c <writecommand>
  delay(10);
 8006bda:	200a      	movs	r0, #10
 8006bdc:	f7fa fb0a 	bl	80011f4 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8006be0:	20b1      	movs	r0, #177	; 0xb1
 8006be2:	f7ff ffb3 	bl	8006b4c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8006be6:	2001      	movs	r0, #1
 8006be8:	f7ff ffce 	bl	8006b88 <writedata>
  writedata(0x2C);
 8006bec:	202c      	movs	r0, #44	; 0x2c
 8006bee:	f7ff ffcb 	bl	8006b88 <writedata>
  writedata(0x2D);
 8006bf2:	202d      	movs	r0, #45	; 0x2d
 8006bf4:	f7ff ffc8 	bl	8006b88 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8006bf8:	20b2      	movs	r0, #178	; 0xb2
 8006bfa:	f7ff ffa7 	bl	8006b4c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f7ff ffc2 	bl	8006b88 <writedata>
  writedata(0x2C);
 8006c04:	202c      	movs	r0, #44	; 0x2c
 8006c06:	f7ff ffbf 	bl	8006b88 <writedata>
  writedata(0x2D);
 8006c0a:	202d      	movs	r0, #45	; 0x2d
 8006c0c:	f7ff ffbc 	bl	8006b88 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8006c10:	20b3      	movs	r0, #179	; 0xb3
 8006c12:	f7ff ff9b 	bl	8006b4c <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8006c16:	2001      	movs	r0, #1
 8006c18:	f7ff ffb6 	bl	8006b88 <writedata>
  writedata(0x2C);
 8006c1c:	202c      	movs	r0, #44	; 0x2c
 8006c1e:	f7ff ffb3 	bl	8006b88 <writedata>
  writedata(0x2D);
 8006c22:	202d      	movs	r0, #45	; 0x2d
 8006c24:	f7ff ffb0 	bl	8006b88 <writedata>
  writedata(0x01);              //     Line inversion mode
 8006c28:	2001      	movs	r0, #1
 8006c2a:	f7ff ffad 	bl	8006b88 <writedata>
  writedata(0x2C);
 8006c2e:	202c      	movs	r0, #44	; 0x2c
 8006c30:	f7ff ffaa 	bl	8006b88 <writedata>
  writedata(0x2D);
 8006c34:	202d      	movs	r0, #45	; 0x2d
 8006c36:	f7ff ffa7 	bl	8006b88 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8006c3a:	20b4      	movs	r0, #180	; 0xb4
 8006c3c:	f7ff ff86 	bl	8006b4c <writecommand>
  writedata(0x07);              //     No inversion
 8006c40:	2007      	movs	r0, #7
 8006c42:	f7ff ffa1 	bl	8006b88 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8006c46:	20c0      	movs	r0, #192	; 0xc0
 8006c48:	f7ff ff80 	bl	8006b4c <writecommand>
  writedata(0xA2);
 8006c4c:	20a2      	movs	r0, #162	; 0xa2
 8006c4e:	f7ff ff9b 	bl	8006b88 <writedata>
  writedata(0x02);              //     -4.6V
 8006c52:	2002      	movs	r0, #2
 8006c54:	f7ff ff98 	bl	8006b88 <writedata>
  writedata(0x84);              //     AUTO mode
 8006c58:	2084      	movs	r0, #132	; 0x84
 8006c5a:	f7ff ff95 	bl	8006b88 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8006c5e:	20c1      	movs	r0, #193	; 0xc1
 8006c60:	f7ff ff74 	bl	8006b4c <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8006c64:	20c5      	movs	r0, #197	; 0xc5
 8006c66:	f7ff ff8f 	bl	8006b88 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8006c6a:	20c2      	movs	r0, #194	; 0xc2
 8006c6c:	f7ff ff6e 	bl	8006b4c <writecommand>
  writedata(0x0A);              //     Opamp current small
 8006c70:	200a      	movs	r0, #10
 8006c72:	f7ff ff89 	bl	8006b88 <writedata>
  writedata(0x00);              //     Boost frequency
 8006c76:	2000      	movs	r0, #0
 8006c78:	f7ff ff86 	bl	8006b88 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8006c7c:	20c3      	movs	r0, #195	; 0xc3
 8006c7e:	f7ff ff65 	bl	8006b4c <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 8006c82:	208a      	movs	r0, #138	; 0x8a
 8006c84:	f7ff ff80 	bl	8006b88 <writedata>
  writedata(0x2A);
 8006c88:	202a      	movs	r0, #42	; 0x2a
 8006c8a:	f7ff ff7d 	bl	8006b88 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8006c8e:	20c4      	movs	r0, #196	; 0xc4
 8006c90:	f7ff ff5c 	bl	8006b4c <writecommand>
  writedata(0x8A);
 8006c94:	208a      	movs	r0, #138	; 0x8a
 8006c96:	f7ff ff77 	bl	8006b88 <writedata>
  writedata(0xEE);
 8006c9a:	20ee      	movs	r0, #238	; 0xee
 8006c9c:	f7ff ff74 	bl	8006b88 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8006ca0:	20c5      	movs	r0, #197	; 0xc5
 8006ca2:	f7ff ff53 	bl	8006b4c <writecommand>
  writedata(0x0E);
 8006ca6:	200e      	movs	r0, #14
 8006ca8:	f7ff ff6e 	bl	8006b88 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8006cac:	2020      	movs	r0, #32
 8006cae:	f7ff ff4d 	bl	8006b4c <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8006cb2:	2036      	movs	r0, #54	; 0x36
 8006cb4:	f7ff ff4a 	bl	8006b4c <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8006cb8:	20c8      	movs	r0, #200	; 0xc8
 8006cba:	f7ff ff65 	bl	8006b88 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8006cbe:	203a      	movs	r0, #58	; 0x3a
 8006cc0:	f7ff ff44 	bl	8006b4c <writecommand>
  writedata(0x05);              //     16-bit color
 8006cc4:	2005      	movs	r0, #5
 8006cc6:	f7ff ff5f 	bl	8006b88 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8006cca:	202a      	movs	r0, #42	; 0x2a
 8006ccc:	f7ff ff3e 	bl	8006b4c <writecommand>
  writedata(0x00);
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f7ff ff59 	bl	8006b88 <writedata>
  writedata(0x00);              //     XSTART = 0
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7ff ff56 	bl	8006b88 <writedata>
  writedata(0x00);
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7ff ff53 	bl	8006b88 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8006ce2:	209f      	movs	r0, #159	; 0x9f
 8006ce4:	f7ff ff50 	bl	8006b88 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8006ce8:	202b      	movs	r0, #43	; 0x2b
 8006cea:	f7ff ff2f 	bl	8006b4c <writecommand>
  writedata(0x00);
 8006cee:	2000      	movs	r0, #0
 8006cf0:	f7ff ff4a 	bl	8006b88 <writedata>
  writedata(0x00);              //     XSTART = 0
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f7ff ff47 	bl	8006b88 <writedata>
  writedata(0x00);
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f7ff ff44 	bl	8006b88 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8006d00:	207f      	movs	r0, #127	; 0x7f
 8006d02:	f7ff ff41 	bl	8006b88 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8006d06:	2013      	movs	r0, #19
 8006d08:	f7ff ff20 	bl	8006b4c <writecommand>
  delay(10);
 8006d0c:	200a      	movs	r0, #10
 8006d0e:	f7fa fa71 	bl	80011f4 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8006d12:	2029      	movs	r0, #41	; 0x29
 8006d14:	f7ff ff1a 	bl	8006b4c <writecommand>
  delay(10);
 8006d18:	200a      	movs	r0, #10
 8006d1a:	f7fa fa6b 	bl	80011f4 <delay>
}
 8006d1e:	bf00      	nop
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8006d2e:	2036      	movs	r0, #54	; 0x36
 8006d30:	f7ff ff0c 	bl	8006b4c <writecommand>

  switch (mode)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d81a      	bhi.n	8006d70 <st7735SetRotation+0x4c>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <st7735SetRotation+0x1c>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d59 	.word	0x08006d59
 8006d48:	08006d61 	.word	0x08006d61
 8006d4c:	08006d69 	.word	0x08006d69
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8006d50:	20c8      	movs	r0, #200	; 0xc8
 8006d52:	f7ff ff19 	bl	8006b88 <writedata>
     break;
 8006d56:	e00b      	b.n	8006d70 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8006d58:	20a8      	movs	r0, #168	; 0xa8
 8006d5a:	f7ff ff15 	bl	8006b88 <writedata>
     break;
 8006d5e:	e007      	b.n	8006d70 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8006d60:	2008      	movs	r0, #8
 8006d62:	f7ff ff11 	bl	8006b88 <writedata>
    break;
 8006d66:	e003      	b.n	8006d70 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8006d68:	2068      	movs	r0, #104	; 0x68
 8006d6a:	f7ff ff0d 	bl	8006b88 <writedata>
     break;
 8006d6e:	bf00      	nop
  }
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8006d86:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <st7735SetWindow+0x94>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2108      	movs	r1, #8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fb25 	bl	80053dc <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8006d92:	202a      	movs	r0, #42	; 0x2a
 8006d94:	f7ff feda 	bl	8006b4c <writecommand>
  writedata(0x00);
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f7ff fef5 	bl	8006b88 <writedata>
  writedata(x0+colstart);     // XSTART
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff feec 	bl	8006b88 <writedata>
  writedata(0x00);
 8006db0:	2000      	movs	r0, #0
 8006db2:	f7ff fee9 	bl	8006b88 <writedata>
  writedata(x1+colstart);     // XEND
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fee0 	bl	8006b88 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8006dc8:	202b      	movs	r0, #43	; 0x2b
 8006dca:	f7ff febf 	bl	8006b4c <writecommand>
  writedata(0x00);
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f7ff feda 	bl	8006b88 <writedata>
  writedata(y0+rowstart);     // YSTART
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fed1 	bl	8006b88 <writedata>
  writedata(0x00);
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7ff fece 	bl	8006b88 <writedata>
  writedata(y1+rowstart);     // YEND
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4413      	add	r3, r2
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fec5 	bl	8006b88 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8006dfe:	202c      	movs	r0, #44	; 0x2c
 8006e00:	f7ff fea4 	bl	8006b4c <writecommand>
}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	2000a450 	.word	0x2000a450

08006e10 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8006e10:	b5b0      	push	{r4, r5, r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	466b      	mov	r3, sp
 8006e20:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	1e43      	subs	r3, r0, #1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	4603      	mov	r3, r0
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	f04f 0400 	mov.w	r4, #0
 8006e38:	0114      	lsls	r4, r2, #4
 8006e3a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8006e3e:	010b      	lsls	r3, r1, #4
 8006e40:	4603      	mov	r3, r0
 8006e42:	4619      	mov	r1, r3
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	0114      	lsls	r4, r2, #4
 8006e52:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8006e56:	010b      	lsls	r3, r1, #4
 8006e58:	4603      	mov	r3, r0
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	3307      	adds	r3, #7
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	ebad 0d03 	sub.w	sp, sp, r3
 8006e68:	466b      	mov	r3, sp
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 8006e72:	22a0      	movs	r2, #160	; 0xa0
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	da78      	bge.n	8006f6c <st7735FillRect+0x15c>
 8006e7a:	2280      	movs	r2, #128	; 0x80
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	da74      	bge.n	8006f6c <st7735FillRect+0x15c>

  if (x < 0) { w += x; x = 0; }
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da05      	bge.n	8006e94 <st7735FillRect+0x84>
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da05      	bge.n	8006ea6 <st7735FillRect+0x96>
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	22a0      	movs	r2, #160	; 0xa0
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	dd03      	ble.n	8006eba <st7735FillRect+0xaa>
 8006eb2:	22a0      	movs	r2, #160	; 0xa0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	2280      	movs	r2, #128	; 0x80
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	dd03      	ble.n	8006ece <st7735FillRect+0xbe>
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dd4d      	ble.n	8006f70 <st7735FillRect+0x160>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd4a      	ble.n	8006f70 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4413      	add	r3, r2
 8006ee0:	1e59      	subs	r1, r3, #1
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	460a      	mov	r2, r1
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff ff42 	bl	8006d78 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8006ef4:	4b21      	ldr	r3, [pc, #132]	; (8006f7c <st7735FillRect+0x16c>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2110      	movs	r1, #16
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fa6e 	bl	80053dc <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006f00:	2101      	movs	r1, #1
 8006f02:	2003      	movs	r0, #3
 8006f04:	f7fc f830 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006f08:	2100      	movs	r1, #0
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	f7fc f82c 	bl	8002f68 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e008      	b.n	8006f28 <st7735FillRect+0x118>
  {
    line_buf[i] = color;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	b299      	uxth	r1, r3
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	3301      	adds	r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	dbf2      	blt.n	8006f16 <st7735FillRect+0x106>
  }
  for (int i=0; i<h; i++)
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e00e      	b.n	8006f54 <st7735FillRect+0x144>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8006f36:	6939      	ldr	r1, [r7, #16]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7fe facf 	bl	80054e0 <spiDmaTxTransfer>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f083 0301 	eor.w	r3, r3, #1
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <st7735FillRect+0x14e>
  for (int i=0; i<h; i++)
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	3301      	adds	r3, #1
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	dbec      	blt.n	8006f36 <st7735FillRect+0x126>
 8006f5c:	e000      	b.n	8006f60 <st7735FillRect+0x150>
    {
      break;
 8006f5e:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006f60:	2101      	movs	r1, #1
 8006f62:	2002      	movs	r0, #2
 8006f64:	f7fc f800 	bl	8002f68 <gpioPinWrite>
 8006f68:	46ad      	mov	sp, r5
 8006f6a:	e003      	b.n	8006f74 <st7735FillRect+0x164>
  if ((x >= _width) || (y >= _height)) return;
 8006f6c:	bf00      	nop
 8006f6e:	e000      	b.n	8006f72 <st7735FillRect+0x162>
  if ((w < 1) || (h < 1)) return;
 8006f70:	bf00      	nop
 8006f72:	46ad      	mov	sp, r5
}
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bdb0      	pop	{r4, r5, r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	2000a450 	.word	0x2000a450

08006f80 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <st7735SendBuffer+0x44>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <st7735SendBuffer+0x48>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2110      	movs	r1, #16
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe fa1f 	bl	80053dc <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	2003      	movs	r0, #3
 8006fa2:	f7fb ffe1 	bl	8002f68 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2002      	movs	r0, #2
 8006faa:	f7fb ffdd 	bl	8002f68 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f7fe fa93 	bl	80054e0 <spiDmaTxTransfer>
  return true;
 8006fba:	2301      	movs	r3, #1
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	2000a458 	.word	0x2000a458
 8006fc8:	2000a450 	.word	0x2000a450

08006fcc <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8006fd4:	4a04      	ldr	r2, [pc, #16]	; (8006fe8 <st7735SetCallBack+0x1c>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6013      	str	r3, [r2, #0]

  return true;
 8006fda:	2301      	movs	r3, #1
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	2000a454 	.word	0x2000a454

08006fec <hwInit>:




void hwInit(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  bspInit();
 8006ff0:	f7fa f8d6 	bl	80011a0 <bspInit>

  cliInit();
 8006ff4:	f7fa fc5a 	bl	80018ac <cliInit>
  ledInit();
 8006ff8:	f7fc ff94 	bl	8003f24 <ledInit>
  uartInit();
 8006ffc:	f7fe fe14 	bl	8005c28 <uartInit>
  spiInit();
 8007000:	f7fe f8d8 	bl	80051b4 <spiInit>
  DWT_Delay_Init();
 8007004:	f7fa fb1a 	bl	800163c <DWT_Delay_Init>
  buttonInit();
 8007008:	f7fa fb48 	bl	800169c <buttonInit>
  gpioInit();
 800700c:	f7fb fee2 	bl	8002dd4 <gpioInit>
  Ds18b20_Init();
 8007010:	f7fb fb94 	bl	800273c <Ds18b20_Init>
  sonarInit();
 8007014:	f7fd fefa 	bl	8004e0c <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007018:	f7fc f90a 	bl	8003230 <lcdInit>
  tdsInit();
 800701c:	f7fe fbc6 	bl	80057ac <tdsInit>

  if (sdInit() == true)
 8007020:	f7fd fb0a 	bl	8004638 <sdInit>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <hwInit+0x42>
  {
    fatfsInit();
 800702a:	f7fb fcfb 	bl	8002a24 <fatfsInit>
  }
}
 800702e:	bf00      	nop
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800703e:	79fb      	ldrb	r3, [r7, #7]
 8007040:	4a08      	ldr	r2, [pc, #32]	; (8007064 <disk_status+0x30>)
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	79fa      	ldrb	r2, [r7, #7]
 800704c:	4905      	ldr	r1, [pc, #20]	; (8007064 <disk_status+0x30>)
 800704e:	440a      	add	r2, r1
 8007050:	7b12      	ldrb	r2, [r2, #12]
 8007052:	4610      	mov	r0, r2
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]
  return stat;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	2000a488 	.word	0x2000a488

08007068 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <disk_initialize+0x48>)
 800707a:	5cd3      	ldrb	r3, [r2, r3]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d111      	bne.n	80070a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <disk_initialize+0x48>)
 8007084:	2101      	movs	r1, #1
 8007086:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <disk_initialize+0x48>)
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	79fa      	ldrb	r2, [r7, #7]
 8007096:	4906      	ldr	r1, [pc, #24]	; (80070b0 <disk_initialize+0x48>)
 8007098:	440a      	add	r2, r1
 800709a:	7b12      	ldrb	r2, [r2, #12]
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000a488 	.word	0x2000a488

080070b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <disk_read+0x3c>)
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	689c      	ldr	r4, [r3, #8]
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	4a07      	ldr	r2, [pc, #28]	; (80070f0 <disk_read+0x3c>)
 80070d4:	4413      	add	r3, r2
 80070d6:	7b18      	ldrb	r0, [r3, #12]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	47a0      	blx	r4
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd90      	pop	{r4, r7, pc}
 80070ee:	bf00      	nop
 80070f0:	2000a488 	.word	0x2000a488

080070f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <disk_write+0x3c>)
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68dc      	ldr	r4, [r3, #12]
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	4a07      	ldr	r2, [pc, #28]	; (8007130 <disk_write+0x3c>)
 8007114:	4413      	add	r3, r2
 8007116:	7b18      	ldrb	r0, [r3, #12]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	47a0      	blx	r4
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]
  return res;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	bd90      	pop	{r4, r7, pc}
 800712e:	bf00      	nop
 8007130:	2000a488 	.word	0x2000a488

08007134 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	603a      	str	r2, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
 8007140:	460b      	mov	r3, r1
 8007142:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	4a09      	ldr	r2, [pc, #36]	; (800716c <disk_ioctl+0x38>)
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	79fa      	ldrb	r2, [r7, #7]
 8007152:	4906      	ldr	r1, [pc, #24]	; (800716c <disk_ioctl+0x38>)
 8007154:	440a      	add	r2, r1
 8007156:	7b10      	ldrb	r0, [r2, #12]
 8007158:	79b9      	ldrb	r1, [r7, #6]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4798      	blx	r3
 800715e:	4603      	mov	r3, r0
 8007160:	73fb      	strb	r3, [r7, #15]
  return res;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	2000a488 	.word	0x2000a488

08007170 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  return 0;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3301      	adds	r3, #1
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007190:	89fb      	ldrh	r3, [r7, #14]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	b21a      	sxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	b21b      	sxth	r3, r3
 800719c:	4313      	orrs	r3, r2
 800719e:	b21b      	sxth	r3, r3
 80071a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80071a2:	89fb      	ldrh	r3, [r7, #14]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3303      	adds	r3, #3
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	3202      	adds	r2, #2
 80071c8:	7812      	ldrb	r2, [r2, #0]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	3201      	adds	r2, #1
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	021b      	lsls	r3, r3, #8
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7812      	ldrb	r2, [r2, #0]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	887a      	ldrh	r2, [r7, #2]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	887a      	ldrh	r2, [r7, #2]
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	1c53      	adds	r3, r2, #1
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	1c59      	adds	r1, r3, #1
 80072a8:	6179      	str	r1, [r7, #20]
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f1      	bne.n	800729e <mem_cpy+0x1a>
	}
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80072c6:	b480      	push	{r7}
 80072c8:	b087      	sub	sp, #28
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	617a      	str	r2, [r7, #20]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1f3      	bne.n	80072d6 <mem_set+0x10>
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80072fa:	b480      	push	{r7}
 80072fc:	b089      	sub	sp, #36	; 0x24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	61fa      	str	r2, [r7, #28]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	61ba      	str	r2, [r7, #24]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	1acb      	subs	r3, r1, r3
 8007326:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3b01      	subs	r3, #1
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <mem_cmp+0x40>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0eb      	beq.n	8007312 <mem_cmp+0x18>

	return r;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3724      	adds	r7, #36	; 0x24
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007352:	e002      	b.n	800735a <chk_chr+0x12>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3301      	adds	r3, #1
 8007358:	607b      	str	r3, [r7, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <chk_chr+0x26>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	4293      	cmp	r3, r2
 800736c:	d1f2      	bne.n	8007354 <chk_chr+0xc>
	return *str;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	781b      	ldrb	r3, [r3, #0]
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e029      	b.n	80073e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007394:	4a27      	ldr	r2, [pc, #156]	; (8007434 <chk_lock+0xb4>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4413      	add	r3, r2
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01d      	beq.n	80073de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073a2:	4a24      	ldr	r2, [pc, #144]	; (8007434 <chk_lock+0xb4>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	4413      	add	r3, r2
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d116      	bne.n	80073e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80073b4:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <chk_lock+0xb4>)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d10c      	bne.n	80073e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073c8:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <chk_lock+0xb4>)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	4413      	add	r3, r2
 80073d0:	3308      	adds	r3, #8
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80073d8:	429a      	cmp	r2, r3
 80073da:	d102      	bne.n	80073e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80073dc:	e007      	b.n	80073ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d9d2      	bls.n	8007394 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d109      	bne.n	8007408 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <chk_lock+0x80>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d101      	bne.n	8007404 <chk_lock+0x84>
 8007400:	2300      	movs	r3, #0
 8007402:	e010      	b.n	8007426 <chk_lock+0xa6>
 8007404:	2312      	movs	r3, #18
 8007406:	e00e      	b.n	8007426 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <chk_lock+0xa0>
 800740e:	4a09      	ldr	r2, [pc, #36]	; (8007434 <chk_lock+0xb4>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	4413      	add	r3, r2
 8007416:	330c      	adds	r3, #12
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d101      	bne.n	8007424 <chk_lock+0xa4>
 8007420:	2310      	movs	r3, #16
 8007422:	e000      	b.n	8007426 <chk_lock+0xa6>
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000a468 	.word	0x2000a468

08007438 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	e002      	b.n	800744a <enq_lock+0x12>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d806      	bhi.n	800745e <enq_lock+0x26>
 8007450:	4a09      	ldr	r2, [pc, #36]	; (8007478 <enq_lock+0x40>)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4413      	add	r3, r2
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f2      	bne.n	8007444 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b02      	cmp	r3, #2
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	2000a468 	.word	0x2000a468

0800747c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	e01f      	b.n	80074cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800748c:	4a41      	ldr	r2, [pc, #260]	; (8007594 <inc_lock+0x118>)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d113      	bne.n	80074c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800749e:	4a3d      	ldr	r2, [pc, #244]	; (8007594 <inc_lock+0x118>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d109      	bne.n	80074c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80074b2:	4a38      	ldr	r2, [pc, #224]	; (8007594 <inc_lock+0x118>)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	3308      	adds	r3, #8
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d006      	beq.n	80074d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d9dc      	bls.n	800748c <inc_lock+0x10>
 80074d2:	e000      	b.n	80074d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80074d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d132      	bne.n	8007542 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e002      	b.n	80074e8 <inc_lock+0x6c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d806      	bhi.n	80074fc <inc_lock+0x80>
 80074ee:	4a29      	ldr	r2, [pc, #164]	; (8007594 <inc_lock+0x118>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	4413      	add	r3, r2
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f2      	bne.n	80074e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d101      	bne.n	8007506 <inc_lock+0x8a>
 8007502:	2300      	movs	r3, #0
 8007504:	e040      	b.n	8007588 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4922      	ldr	r1, [pc, #136]	; (8007594 <inc_lock+0x118>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	440b      	add	r3, r1
 8007512:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	491e      	ldr	r1, [pc, #120]	; (8007594 <inc_lock+0x118>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	440b      	add	r3, r1
 8007520:	3304      	adds	r3, #4
 8007522:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	491a      	ldr	r1, [pc, #104]	; (8007594 <inc_lock+0x118>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	440b      	add	r3, r1
 8007530:	3308      	adds	r3, #8
 8007532:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007534:	4a17      	ldr	r2, [pc, #92]	; (8007594 <inc_lock+0x118>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	4413      	add	r3, r2
 800753c:	330c      	adds	r3, #12
 800753e:	2200      	movs	r2, #0
 8007540:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <inc_lock+0xe0>
 8007548:	4a12      	ldr	r2, [pc, #72]	; (8007594 <inc_lock+0x118>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	330c      	adds	r3, #12
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <inc_lock+0xe0>
 8007558:	2300      	movs	r3, #0
 800755a:	e015      	b.n	8007588 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d108      	bne.n	8007574 <inc_lock+0xf8>
 8007562:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <inc_lock+0x118>)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	330c      	adds	r3, #12
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	e001      	b.n	8007578 <inc_lock+0xfc>
 8007574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007578:	4906      	ldr	r1, [pc, #24]	; (8007594 <inc_lock+0x118>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	440b      	add	r3, r1
 8007580:	330c      	adds	r3, #12
 8007582:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	2000a468 	.word	0x2000a468

08007598 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d825      	bhi.n	80075f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <dec_lock+0x74>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	330c      	adds	r3, #12
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c0:	d101      	bne.n	80075c6 <dec_lock+0x2e>
 80075c2:	2300      	movs	r3, #0
 80075c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <dec_lock+0x3a>
 80075cc:	89fb      	ldrh	r3, [r7, #14]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80075d2:	4a0e      	ldr	r2, [pc, #56]	; (800760c <dec_lock+0x74>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	4413      	add	r3, r2
 80075da:	330c      	adds	r3, #12
 80075dc:	89fa      	ldrh	r2, [r7, #14]
 80075de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <dec_lock+0x5a>
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <dec_lock+0x74>)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	4413      	add	r3, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	737b      	strb	r3, [r7, #13]
 80075f6:	e001      	b.n	80075fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80075f8:	2302      	movs	r3, #2
 80075fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80075fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2000a468 	.word	0x2000a468

08007610 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e010      	b.n	8007640 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800761e:	4a0d      	ldr	r2, [pc, #52]	; (8007654 <clear_lock+0x44>)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	4413      	add	r3, r2
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d105      	bne.n	800763a <clear_lock+0x2a>
 800762e:	4a09      	ldr	r2, [pc, #36]	; (8007654 <clear_lock+0x44>)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4413      	add	r3, r2
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d9eb      	bls.n	800761e <clear_lock+0xe>
	}
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	2000a468 	.word	0x2000a468

08007658 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	78db      	ldrb	r3, [r3, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d034      	beq.n	80076d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7858      	ldrb	r0, [r3, #1]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800767c:	2301      	movs	r3, #1
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	f7ff fd38 	bl	80070f4 <disk_write>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <sync_window+0x38>
			res = FR_DISK_ERR;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
 800768e:	e022      	b.n	80076d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d217      	bcs.n	80076d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	789b      	ldrb	r3, [r3, #2]
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	e010      	b.n	80076d0 <sync_window+0x78>
					wsect += fs->fsize;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7858      	ldrb	r0, [r3, #1]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80076c2:	2301      	movs	r3, #1
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	f7ff fd15 	bl	80070f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d8eb      	bhi.n	80076ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d01b      	beq.n	8007730 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ffad 	bl	8007658 <sync_window>
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d113      	bne.n	8007730 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7858      	ldrb	r0, [r3, #1]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007712:	2301      	movs	r3, #1
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	f7ff fccd 	bl	80070b4 <disk_read>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007720:	f04f 33ff 	mov.w	r3, #4294967295
 8007724:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007726:	2301      	movs	r3, #1
 8007728:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff ff87 	bl	8007658 <sync_window>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d158      	bne.n	8007806 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d148      	bne.n	80077ee <sync_fs+0xb2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	791b      	ldrb	r3, [r3, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d144      	bne.n	80077ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3334      	adds	r3, #52	; 0x34
 8007768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fda9 	bl	80072c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3334      	adds	r3, #52	; 0x34
 8007778:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800777c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007780:	4618      	mov	r0, r3
 8007782:	f7ff fd38 	bl	80071f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3334      	adds	r3, #52	; 0x34
 800778a:	4921      	ldr	r1, [pc, #132]	; (8007810 <sync_fs+0xd4>)
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fd4d 	bl	800722c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3334      	adds	r3, #52	; 0x34
 8007796:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800779a:	491e      	ldr	r1, [pc, #120]	; (8007814 <sync_fs+0xd8>)
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fd45 	bl	800722c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3334      	adds	r3, #52	; 0x34
 80077a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7ff fd3b 	bl	800722c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3334      	adds	r3, #52	; 0x34
 80077ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	4619      	mov	r1, r3
 80077c4:	4610      	mov	r0, r2
 80077c6:	f7ff fd31 	bl	800722c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7858      	ldrb	r0, [r3, #1]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e2:	2301      	movs	r3, #1
 80077e4:	f7ff fc86 	bl	80070f4 <disk_write>
			fs->fsi_flag = 0;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fc9c 	bl	8007134 <disk_ioctl>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <sync_fs+0xca>
 8007802:	2301      	movs	r3, #1
 8007804:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	41615252 	.word	0x41615252
 8007814:	61417272 	.word	0x61417272

08007818 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	3b02      	subs	r3, #2
 8007826:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	3b02      	subs	r3, #2
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d301      	bcc.n	8007838 <clust2sect+0x20>
 8007834:	2300      	movs	r3, #0
 8007836:	e008      	b.n	800784a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	895b      	ldrh	r3, [r3, #10]
 800783c:	461a      	mov	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	fb03 f202 	mul.w	r2, r3, r2
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	4413      	add	r3, r2
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d904      	bls.n	8007876 <get_fat+0x20>
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e08c      	b.n	8007996 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800787c:	f04f 33ff 	mov.w	r3, #4294967295
 8007880:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d045      	beq.n	8007916 <get_fat+0xc0>
 800788a:	2b03      	cmp	r3, #3
 800788c:	d05d      	beq.n	800794a <get_fat+0xf4>
 800788e:	2b01      	cmp	r3, #1
 8007890:	d177      	bne.n	8007982 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	085b      	lsrs	r3, r3, #1
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4413      	add	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	0a5b      	lsrs	r3, r3, #9
 80078a8:	4413      	add	r3, r2
 80078aa:	4619      	mov	r1, r3
 80078ac:	6938      	ldr	r0, [r7, #16]
 80078ae:	f7ff ff17 	bl	80076e0 <move_window>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d167      	bne.n	8007988 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	60fa      	str	r2, [r7, #12]
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0a5b      	lsrs	r3, r3, #9
 80078d4:	4413      	add	r3, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6938      	ldr	r0, [r7, #16]
 80078da:	f7ff ff01 	bl	80076e0 <move_window>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d153      	bne.n	800798c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4413      	add	r3, r2
 80078ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	461a      	mov	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <get_fat+0xb6>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	091b      	lsrs	r3, r3, #4
 800790a:	e002      	b.n	8007912 <get_fat+0xbc>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007912:	617b      	str	r3, [r7, #20]
			break;
 8007914:	e03f      	b.n	8007996 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	4413      	add	r3, r2
 8007920:	4619      	mov	r1, r3
 8007922:	6938      	ldr	r0, [r7, #16]
 8007924:	f7ff fedc 	bl	80076e0 <move_window>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d130      	bne.n	8007990 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800793c:	4413      	add	r3, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff fc1e 	bl	8007180 <ld_word>
 8007944:	4603      	mov	r3, r0
 8007946:	617b      	str	r3, [r7, #20]
			break;
 8007948:	e025      	b.n	8007996 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	09db      	lsrs	r3, r3, #7
 8007952:	4413      	add	r3, r2
 8007954:	4619      	mov	r1, r3
 8007956:	6938      	ldr	r0, [r7, #16]
 8007958:	f7ff fec2 	bl	80076e0 <move_window>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d118      	bne.n	8007994 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007970:	4413      	add	r3, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff fc1c 	bl	80071b0 <ld_dword>
 8007978:	4603      	mov	r3, r0
 800797a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800797e:	617b      	str	r3, [r7, #20]
			break;
 8007980:	e009      	b.n	8007996 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007982:	2301      	movs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e006      	b.n	8007996 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007994:	bf00      	nop
		}
	}

	return val;
 8007996:	697b      	ldr	r3, [r7, #20]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b089      	sub	sp, #36	; 0x24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80079ac:	2302      	movs	r3, #2
 80079ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	f240 80d6 	bls.w	8007b64 <put_fat+0x1c4>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	429a      	cmp	r2, r3
 80079c0:	f080 80d0 	bcs.w	8007b64 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d073      	beq.n	8007ab4 <put_fat+0x114>
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	f000 8091 	beq.w	8007af4 <put_fat+0x154>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	f040 80c6 	bne.w	8007b64 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	61bb      	str	r3, [r7, #24]
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4413      	add	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	0a5b      	lsrs	r3, r3, #9
 80079ee:	4413      	add	r3, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f7ff fe74 	bl	80076e0 <move_window>
 80079f8:	4603      	mov	r3, r0
 80079fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079fc:	7ffb      	ldrb	r3, [r7, #31]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 80a9 	bne.w	8007b56 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	1c59      	adds	r1, r3, #1
 8007a0e:	61b9      	str	r1, [r7, #24]
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	4413      	add	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <put_fat+0x9e>
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	b25b      	sxtb	r3, r3
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	b25a      	sxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	e001      	b.n	8007a42 <put_fat+0xa2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	0a5b      	lsrs	r3, r3, #9
 8007a54:	4413      	add	r3, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fe41 	bl	80076e0 <move_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d178      	bne.n	8007b5a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a74:	4413      	add	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <put_fat+0xea>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	091b      	lsrs	r3, r3, #4
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	e00e      	b.n	8007aa8 <put_fat+0x108>
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	b25b      	sxtb	r3, r3
 8007a90:	f023 030f 	bic.w	r3, r3, #15
 8007a94:	b25a      	sxtb	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	0a1b      	lsrs	r3, r3, #8
 8007a9a:	b25b      	sxtb	r3, r3
 8007a9c:	f003 030f 	and.w	r3, r3, #15
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	70da      	strb	r2, [r3, #3]
			break;
 8007ab2:	e057      	b.n	8007b64 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	4413      	add	r3, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff fe0d 	bl	80076e0 <move_window>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007aca:	7ffb      	ldrb	r3, [r7, #31]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d146      	bne.n	8007b5e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007ade:	4413      	add	r3, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fb85 	bl	80071f6 <st_word>
			fs->wflag = 1;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	70da      	strb	r2, [r3, #3]
			break;
 8007af2:	e037      	b.n	8007b64 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	09db      	lsrs	r3, r3, #7
 8007afc:	4413      	add	r3, r2
 8007afe:	4619      	mov	r1, r3
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff fded 	bl	80076e0 <move_window>
 8007b06:	4603      	mov	r3, r0
 8007b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007b0a:	7ffb      	ldrb	r3, [r7, #31]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d128      	bne.n	8007b62 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b24:	4413      	add	r3, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fb42 	bl	80071b0 <ld_dword>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b32:	4323      	orrs	r3, r4
 8007b34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007b44:	4413      	add	r3, r2
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff fb6f 	bl	800722c <st_dword>
			fs->wflag = 1;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	70da      	strb	r2, [r3, #3]
			break;
 8007b54:	e006      	b.n	8007b64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007b56:	bf00      	nop
 8007b58:	e004      	b.n	8007b64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007b5a:	bf00      	nop
 8007b5c:	e002      	b.n	8007b64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007b5e:	bf00      	nop
 8007b60:	e000      	b.n	8007b64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007b62:	bf00      	nop
		}
	}
	return res;
 8007b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3724      	adds	r7, #36	; 0x24
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}

08007b6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d904      	bls.n	8007b94 <remove_chain+0x26>
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d301      	bcc.n	8007b98 <remove_chain+0x2a>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e04b      	b.n	8007c30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	69b8      	ldr	r0, [r7, #24]
 8007ba6:	f7ff fefb 	bl	80079a0 <put_fat>
 8007baa:	4603      	mov	r3, r0
 8007bac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007bae:	7ffb      	ldrb	r3, [r7, #31]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <remove_chain+0x4a>
 8007bb4:	7ffb      	ldrb	r3, [r7, #31]
 8007bb6:	e03b      	b.n	8007c30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fe4b 	bl	8007856 <get_fat>
 8007bc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d031      	beq.n	8007c2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <remove_chain+0x64>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e02e      	b.n	8007c30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d101      	bne.n	8007bde <remove_chain+0x70>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e028      	b.n	8007c30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007bde:	2200      	movs	r2, #0
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	69b8      	ldr	r0, [r7, #24]
 8007be4:	f7ff fedc 	bl	80079a0 <put_fat>
 8007be8:	4603      	mov	r3, r0
 8007bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <remove_chain+0x88>
 8007bf2:	7ffb      	ldrb	r3, [r7, #31]
 8007bf4:	e01c      	b.n	8007c30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	695a      	ldr	r2, [r3, #20]
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	3b02      	subs	r3, #2
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d20b      	bcs.n	8007c1c <remove_chain+0xae>
			fs->free_clst++;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3c6      	bcc.n	8007bb8 <remove_chain+0x4a>
 8007c2a:	e000      	b.n	8007c2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3720      	adds	r7, #32
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <create_chain+0x2c>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d31b      	bcc.n	8007c9c <create_chain+0x64>
 8007c64:	2301      	movs	r3, #1
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	e018      	b.n	8007c9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff fdf2 	bl	8007856 <get_fat>
 8007c72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d801      	bhi.n	8007c7e <create_chain+0x46>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e070      	b.n	8007d60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d101      	bne.n	8007c8a <create_chain+0x52>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	e06a      	b.n	8007d60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d201      	bcs.n	8007c98 <create_chain+0x60>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	e063      	b.n	8007d60 <create_chain+0x128>
		scl = clst;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d307      	bcc.n	8007cc0 <create_chain+0x88>
				ncl = 2;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d901      	bls.n	8007cc0 <create_chain+0x88>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e04f      	b.n	8007d60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007cc0:	69f9      	ldr	r1, [r7, #28]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff fdc7 	bl	8007856 <get_fat>
 8007cc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00e      	beq.n	8007cee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d003      	beq.n	8007cde <create_chain+0xa6>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d101      	bne.n	8007ce2 <create_chain+0xaa>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	e03e      	b.n	8007d60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d1da      	bne.n	8007ca0 <create_chain+0x68>
 8007cea:	2300      	movs	r3, #0
 8007cec:	e038      	b.n	8007d60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007cee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	69f9      	ldr	r1, [r7, #28]
 8007cf6:	6938      	ldr	r0, [r7, #16]
 8007cf8:	f7ff fe52 	bl	80079a0 <put_fat>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <create_chain+0xe2>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d006      	beq.n	8007d1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6938      	ldr	r0, [r7, #16]
 8007d12:	f7ff fe45 	bl	80079a0 <put_fat>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d116      	bne.n	8007d4e <create_chain+0x116>
		fs->last_clst = ncl;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	695a      	ldr	r2, [r3, #20]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	3b02      	subs	r3, #2
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d804      	bhi.n	8007d3e <create_chain+0x106>
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	1e5a      	subs	r2, r3, #1
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	f043 0301 	orr.w	r3, r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	711a      	strb	r2, [r3, #4]
 8007d4c:	e007      	b.n	8007d5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d102      	bne.n	8007d5a <create_chain+0x122>
 8007d54:	f04f 33ff 	mov.w	r3, #4294967295
 8007d58:	e000      	b.n	8007d5c <create_chain+0x124>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007d5e:	69fb      	ldr	r3, [r7, #28]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	0a5b      	lsrs	r3, r3, #9
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	8952      	ldrh	r2, [r2, #10]
 8007d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1d1a      	adds	r2, r3, #4
 8007d92:	613a      	str	r2, [r7, #16]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <clmt_clust+0x3a>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e010      	b.n	8007dc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d307      	bcc.n	8007dba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3304      	adds	r3, #4
 8007db6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007db8:	e7e9      	b.n	8007d8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007dba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4413      	add	r3, r2
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007de6:	d204      	bcs.n	8007df2 <dir_sdi+0x22>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007df2:	2302      	movs	r3, #2
 8007df4:	e063      	b.n	8007ebe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <dir_sdi+0x46>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d902      	bls.n	8007e16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10c      	bne.n	8007e36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	8912      	ldrh	r2, [r2, #8]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d301      	bcc.n	8007e2c <dir_sdi+0x5c>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e048      	b.n	8007ebe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	61da      	str	r2, [r3, #28]
 8007e34:	e029      	b.n	8007e8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	895b      	ldrh	r3, [r3, #10]
 8007e3a:	025b      	lsls	r3, r3, #9
 8007e3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e3e:	e019      	b.n	8007e74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fd06 	bl	8007856 <get_fat>
 8007e4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e52:	d101      	bne.n	8007e58 <dir_sdi+0x88>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e032      	b.n	8007ebe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d904      	bls.n	8007e68 <dir_sdi+0x98>
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d301      	bcc.n	8007e6c <dir_sdi+0x9c>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e028      	b.n	8007ebe <dir_sdi+0xee>
			ofs -= csz;
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d2e1      	bcs.n	8007e40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007e7c:	6979      	ldr	r1, [r7, #20]
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7ff fcca 	bl	8007818 <clust2sect>
 8007e84:	4602      	mov	r2, r0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <dir_sdi+0xcc>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e010      	b.n	8007ebe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	0a5b      	lsrs	r3, r3, #9
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb6:	441a      	add	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	3320      	adds	r3, #32
 8007edc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <dir_next+0x28>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eec:	d301      	bcc.n	8007ef2 <dir_next+0x2c>
 8007eee:	2304      	movs	r3, #4
 8007ef0:	e0aa      	b.n	8008048 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 8098 	bne.w	800802e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	095b      	lsrs	r3, r3, #5
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	8912      	ldrh	r2, [r2, #8]
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	f0c0 8088 	bcc.w	800802e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	61da      	str	r2, [r3, #28]
 8007f24:	2304      	movs	r3, #4
 8007f26:	e08f      	b.n	8008048 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	0a5b      	lsrs	r3, r3, #9
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	8952      	ldrh	r2, [r2, #10]
 8007f30:	3a01      	subs	r2, #1
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d17a      	bne.n	800802e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7ff fc88 	bl	8007856 <get_fat>
 8007f46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d801      	bhi.n	8007f52 <dir_next+0x8c>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e07a      	b.n	8008048 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d101      	bne.n	8007f5e <dir_next+0x98>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e074      	b.n	8008048 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d358      	bcc.n	800801a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	61da      	str	r2, [r3, #28]
 8007f74:	2304      	movs	r3, #4
 8007f76:	e067      	b.n	8008048 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7ff fe59 	bl	8007c38 <create_chain>
 8007f86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <dir_next+0xcc>
 8007f8e:	2307      	movs	r3, #7
 8007f90:	e05a      	b.n	8008048 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <dir_next+0xd6>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e055      	b.n	8008048 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d101      	bne.n	8007fa8 <dir_next+0xe2>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e04f      	b.n	8008048 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fb55 	bl	8007658 <sync_window>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <dir_next+0xf2>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e047      	b.n	8008048 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3334      	adds	r3, #52	; 0x34
 8007fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff f97f 	bl	80072c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	6979      	ldr	r1, [r7, #20]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f7ff fc22 	bl	8007818 <clust2sect>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8007fda:	e012      	b.n	8008002 <dir_next+0x13c>
						fs->wflag = 1;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fb38 	bl	8007658 <sync_window>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <dir_next+0x12c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e02a      	b.n	8008048 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	895b      	ldrh	r3, [r3, #10]
 8008006:	461a      	mov	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4293      	cmp	r3, r2
 800800c:	d3e6      	bcc.n	8007fdc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad2      	subs	r2, r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008020:	6979      	ldr	r1, [r7, #20]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fbf8 	bl	8007818 <clust2sect>
 8008028:	4602      	mov	r2, r0
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008040:	441a      	add	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008060:	2100      	movs	r1, #0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff feb4 	bl	8007dd0 <dir_sdi>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d12b      	bne.n	80080ca <dir_alloc+0x7a>
		n = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	4619      	mov	r1, r3
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff fb2f 	bl	80076e0 <move_window>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11d      	bne.n	80080c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2be5      	cmp	r3, #229	; 0xe5
 8008094:	d004      	beq.n	80080a0 <dir_alloc+0x50>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	3301      	adds	r3, #1
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d102      	bne.n	80080b4 <dir_alloc+0x64>
 80080ae:	e00c      	b.n	80080ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80080b4:	2101      	movs	r1, #1
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff ff05 	bl	8007ec6 <dir_next>
 80080bc:	4603      	mov	r3, r0
 80080be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0d7      	beq.n	8008076 <dir_alloc+0x26>
 80080c6:	e000      	b.n	80080ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80080c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d101      	bne.n	80080d4 <dir_alloc+0x84>
 80080d0:	2307      	movs	r3, #7
 80080d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	331a      	adds	r3, #26
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff f847 	bl	8007180 <ld_word>
 80080f2:	4603      	mov	r3, r0
 80080f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d109      	bne.n	8008112 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff f83c 	bl	8007180 <ld_word>
 8008108:	4603      	mov	r3, r0
 800810a:	041b      	lsls	r3, r3, #16
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008112:	68fb      	ldr	r3, [r7, #12]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	331a      	adds	r3, #26
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	b292      	uxth	r2, r2
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff f85f 	bl	80071f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b03      	cmp	r3, #3
 800813e:	d109      	bne.n	8008154 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f103 0214 	add.w	r2, r3, #20
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	0c1b      	lsrs	r3, r3, #16
 800814a:	b29b      	uxth	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	4610      	mov	r0, r2
 8008150:	f7ff f851 	bl	80071f6 <st_word>
	}
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800815c:	b590      	push	{r4, r7, lr}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	331a      	adds	r3, #26
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff f808 	bl	8007180 <ld_word>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <cmp_lfn+0x1e>
 8008176:	2300      	movs	r3, #0
 8008178:	e059      	b.n	800822e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	4613      	mov	r3, r2
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008190:	2301      	movs	r3, #1
 8008192:	81fb      	strh	r3, [r7, #14]
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	e033      	b.n	8008202 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800819a:	4a27      	ldr	r2, [pc, #156]	; (8008238 <cmp_lfn+0xdc>)
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	4413      	add	r3, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe ffe9 	bl	8007180 <ld_word>
 80081ae:	4603      	mov	r3, r0
 80081b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01a      	beq.n	80081ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2bfe      	cmp	r3, #254	; 0xfe
 80081bc:	d812      	bhi.n	80081e4 <cmp_lfn+0x88>
 80081be:	89bb      	ldrh	r3, [r7, #12]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 fea5 	bl	800af10 <ff_wtoupper>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461c      	mov	r4, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	617a      	str	r2, [r7, #20]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4413      	add	r3, r2
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f002 fe99 	bl	800af10 <ff_wtoupper>
 80081de:	4603      	mov	r3, r0
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d001      	beq.n	80081e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80081e4:	2300      	movs	r3, #0
 80081e6:	e022      	b.n	800822e <cmp_lfn+0xd2>
			}
			wc = uc;
 80081e8:	89bb      	ldrh	r3, [r7, #12]
 80081ea:	81fb      	strh	r3, [r7, #14]
 80081ec:	e006      	b.n	80081fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80081ee:	89bb      	ldrh	r3, [r7, #12]
 80081f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d001      	beq.n	80081fc <cmp_lfn+0xa0>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e018      	b.n	800822e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b0c      	cmp	r3, #12
 8008206:	d9c8      	bls.n	800819a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <cmp_lfn+0xd0>
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d008      	beq.n	800822c <cmp_lfn+0xd0>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <cmp_lfn+0xd0>
 8008228:	2300      	movs	r3, #0
 800822a:	e000      	b.n	800822e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800822c:	2301      	movs	r3, #1
}
 800822e:	4618      	mov	r0, r3
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	bd90      	pop	{r4, r7, pc}
 8008236:	bf00      	nop
 8008238:	08020994 	.word	0x08020994

0800823c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	331a      	adds	r3, #26
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe ff98 	bl	8007180 <ld_word>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <pick_lfn+0x1e>
 8008256:	2300      	movs	r3, #0
 8008258:	e04d      	b.n	80082f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008262:	1e5a      	subs	r2, r3, #1
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008270:	2301      	movs	r3, #1
 8008272:	81fb      	strh	r3, [r7, #14]
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	e028      	b.n	80082cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800827a:	4a21      	ldr	r2, [pc, #132]	; (8008300 <pick_lfn+0xc4>)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	4413      	add	r3, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe ff79 	bl	8007180 <ld_word>
 800828e:	4603      	mov	r3, r0
 8008290:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008292:	89fb      	ldrh	r3, [r7, #14]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00f      	beq.n	80082b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2bfe      	cmp	r3, #254	; 0xfe
 800829c:	d901      	bls.n	80082a2 <pick_lfn+0x66>
 800829e:	2300      	movs	r3, #0
 80082a0:	e029      	b.n	80082f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80082a2:	89bb      	ldrh	r3, [r7, #12]
 80082a4:	81fb      	strh	r3, [r7, #14]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	617a      	str	r2, [r7, #20]
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	89fa      	ldrh	r2, [r7, #14]
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	e006      	b.n	80082c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80082b8:	89bb      	ldrh	r3, [r7, #12]
 80082ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082be:	4293      	cmp	r3, r2
 80082c0:	d001      	beq.n	80082c6 <pick_lfn+0x8a>
 80082c2:	2300      	movs	r3, #0
 80082c4:	e017      	b.n	80082f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	3301      	adds	r3, #1
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b0c      	cmp	r3, #12
 80082d0:	d9d3      	bls.n	800827a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2bfe      	cmp	r3, #254	; 0xfe
 80082e2:	d901      	bls.n	80082e8 <pick_lfn+0xac>
 80082e4:	2300      	movs	r3, #0
 80082e6:	e006      	b.n	80082f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	2200      	movs	r2, #0
 80082f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80082f4:	2301      	movs	r3, #1
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	08020994 	.word	0x08020994

08008304 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4611      	mov	r1, r2
 8008310:	461a      	mov	r2, r3
 8008312:	460b      	mov	r3, r1
 8008314:	71fb      	strb	r3, [r7, #7]
 8008316:	4613      	mov	r3, r2
 8008318:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	330d      	adds	r3, #13
 800831e:	79ba      	ldrb	r2, [r7, #6]
 8008320:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	330b      	adds	r3, #11
 8008326:	220f      	movs	r2, #15
 8008328:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	330c      	adds	r3, #12
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	331a      	adds	r3, #26
 8008336:	2100      	movs	r1, #0
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe ff5c 	bl	80071f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	1e5a      	subs	r2, r3, #1
 8008342:	4613      	mov	r3, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	82fb      	strh	r3, [r7, #22]
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008356:	8afb      	ldrh	r3, [r7, #22]
 8008358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800835c:	4293      	cmp	r3, r2
 800835e:	d007      	beq.n	8008370 <put_lfn+0x6c>
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	61fa      	str	r2, [r7, #28]
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008370:	4a17      	ldr	r2, [pc, #92]	; (80083d0 <put_lfn+0xcc>)
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	4413      	add	r3, r2
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	8afa      	ldrh	r2, [r7, #22]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe ff37 	bl	80071f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008388:	8afb      	ldrh	r3, [r7, #22]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <put_lfn+0x90>
 800838e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008392:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	3301      	adds	r3, #1
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b0c      	cmp	r3, #12
 800839e:	d9da      	bls.n	8008356 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80083a0:	8afb      	ldrh	r3, [r7, #22]
 80083a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d006      	beq.n	80083b8 <put_lfn+0xb4>
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d103      	bne.n	80083c0 <put_lfn+0xbc>
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	79fa      	ldrb	r2, [r7, #7]
 80083c4:	701a      	strb	r2, [r3, #0]
}
 80083c6:	bf00      	nop
 80083c8:	3720      	adds	r7, #32
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	08020994 	.word	0x08020994

080083d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	; 0x30
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80083e2:	220b      	movs	r2, #11
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7fe ff4c 	bl	8007284 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d92b      	bls.n	800844a <gen_numname+0x76>
		sr = seq;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80083f6:	e022      	b.n	800843e <gen_numname+0x6a>
			wc = *lfn++;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008402:	2300      	movs	r3, #0
 8008404:	62bb      	str	r3, [r7, #40]	; 0x28
 8008406:	e017      	b.n	8008438 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	005a      	lsls	r2, r3, #1
 800840c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	4413      	add	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008418:	085b      	lsrs	r3, r3, #1
 800841a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <gen_numname+0x5e>
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800842c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008430:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	3301      	adds	r3, #1
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2b0f      	cmp	r3, #15
 800843c:	d9e4      	bls.n	8008408 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1d8      	bne.n	80083f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800844a:	2307      	movs	r3, #7
 800844c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	b2db      	uxtb	r3, r3
 8008458:	3330      	adds	r3, #48	; 0x30
 800845a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800845e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008462:	2b39      	cmp	r3, #57	; 0x39
 8008464:	d904      	bls.n	8008470 <gen_numname+0x9c>
 8008466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800846a:	3307      	adds	r3, #7
 800846c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	1e5a      	subs	r2, r3, #1
 8008474:	62ba      	str	r2, [r7, #40]	; 0x28
 8008476:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800847a:	4413      	add	r3, r2
 800847c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008480:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	603b      	str	r3, [r7, #0]
	} while (seq);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1de      	bne.n	800844e <gen_numname+0x7a>
	ns[i] = '~';
 8008490:	f107 0214 	add.w	r2, r7, #20
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	4413      	add	r3, r2
 8008498:	227e      	movs	r2, #126	; 0x7e
 800849a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
 80084a0:	e002      	b.n	80084a8 <gen_numname+0xd4>
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	3301      	adds	r3, #1
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d205      	bcs.n	80084bc <gen_numname+0xe8>
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	4413      	add	r3, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d1f2      	bne.n	80084a2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b07      	cmp	r3, #7
 80084c0:	d808      	bhi.n	80084d4 <gen_numname+0x100>
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80084c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80084cc:	4413      	add	r3, r2
 80084ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80084d2:	e000      	b.n	80084d6 <gen_numname+0x102>
 80084d4:	2120      	movs	r1, #32
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	627a      	str	r2, [r7, #36]	; 0x24
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	460a      	mov	r2, r1
 80084e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	2b07      	cmp	r3, #7
 80084e8:	d9e8      	bls.n	80084bc <gen_numname+0xe8>
}
 80084ea:	bf00      	nop
 80084ec:	3730      	adds	r7, #48	; 0x30
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b085      	sub	sp, #20
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80084fe:	230b      	movs	r3, #11
 8008500:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	0852      	lsrs	r2, r2, #1
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	4313      	orrs	r3, r2
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	1c59      	adds	r1, r3, #1
 8008512:	6079      	str	r1, [r7, #4]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4413      	add	r3, r2
 8008518:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	3b01      	subs	r3, #1
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1ed      	bne.n	8008502 <sum_sfn+0x10>
	return sum;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800853e:	2304      	movs	r3, #4
 8008540:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008548:	23ff      	movs	r3, #255	; 0xff
 800854a:	757b      	strb	r3, [r7, #21]
 800854c:	23ff      	movs	r3, #255	; 0xff
 800854e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008550:	e081      	b.n	8008656 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4619      	mov	r1, r3
 8008558:	6938      	ldr	r0, [r7, #16]
 800855a:	f7ff f8c1 	bl	80076e0 <move_window>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d17c      	bne.n	8008662 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008570:	7dbb      	ldrb	r3, [r7, #22]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d102      	bne.n	800857c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008576:	2304      	movs	r3, #4
 8008578:	75fb      	strb	r3, [r7, #23]
 800857a:	e077      	b.n	800866c <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	330b      	adds	r3, #11
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008588:	73fb      	strb	r3, [r7, #15]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7bfa      	ldrb	r2, [r7, #15]
 800858e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008590:	7dbb      	ldrb	r3, [r7, #22]
 8008592:	2be5      	cmp	r3, #229	; 0xe5
 8008594:	d00e      	beq.n	80085b4 <dir_read+0x80>
 8008596:	7dbb      	ldrb	r3, [r7, #22]
 8008598:	2b2e      	cmp	r3, #46	; 0x2e
 800859a:	d00b      	beq.n	80085b4 <dir_read+0x80>
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	f023 0320 	bic.w	r3, r3, #32
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	bf0c      	ite	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	2300      	movne	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d002      	beq.n	80085ba <dir_read+0x86>
				ord = 0xFF;
 80085b4:	23ff      	movs	r3, #255	; 0xff
 80085b6:	757b      	strb	r3, [r7, #21]
 80085b8:	e044      	b.n	8008644 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	2b0f      	cmp	r3, #15
 80085be:	d12f      	bne.n	8008620 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80085c0:	7dbb      	ldrb	r3, [r7, #22]
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	7b5b      	ldrb	r3, [r3, #13]
 80085d0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80085d2:	7dbb      	ldrb	r3, [r7, #22]
 80085d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d8:	75bb      	strb	r3, [r7, #22]
 80085da:	7dbb      	ldrb	r3, [r7, #22]
 80085dc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695a      	ldr	r2, [r3, #20]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80085e6:	7dba      	ldrb	r2, [r7, #22]
 80085e8:	7d7b      	ldrb	r3, [r7, #21]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d115      	bne.n	800861a <dir_read+0xe6>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	330d      	adds	r3, #13
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	7d3a      	ldrb	r2, [r7, #20]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d10e      	bne.n	800861a <dir_read+0xe6>
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7ff fe18 	bl	800823c <pick_lfn>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <dir_read+0xe6>
 8008612:	7d7b      	ldrb	r3, [r7, #21]
 8008614:	3b01      	subs	r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	e000      	b.n	800861c <dir_read+0xe8>
 800861a:	23ff      	movs	r3, #255	; 0xff
 800861c:	757b      	strb	r3, [r7, #21]
 800861e:	e011      	b.n	8008644 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008620:	7d7b      	ldrb	r3, [r7, #21]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <dir_read+0x106>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff ff61 	bl	80084f2 <sum_sfn>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	7d3b      	ldrb	r3, [r7, #20]
 8008636:	4293      	cmp	r3, r2
 8008638:	d015      	beq.n	8008666 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008642:	e010      	b.n	8008666 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff fc3d 	bl	8007ec6 <dir_next>
 800864c:	4603      	mov	r3, r0
 800864e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <dir_read+0x136>
	while (dp->sect) {
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f47f af79 	bne.w	8008552 <dir_read+0x1e>
 8008660:	e004      	b.n	800866c <dir_read+0x138>
		if (res != FR_OK) break;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <dir_read+0x138>
					break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <dir_read+0x138>
		if (res != FR_OK) break;
 800866a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <dir_read+0x144>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	61da      	str	r2, [r3, #28]
	return res;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff fb9c 	bl	8007dd0 <dir_sdi>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <dir_find+0x24>
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	e0a9      	b.n	80087fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086a6:	23ff      	movs	r3, #255	; 0xff
 80086a8:	753b      	strb	r3, [r7, #20]
 80086aa:	7d3b      	ldrb	r3, [r7, #20]
 80086ac:	757b      	strb	r3, [r7, #21]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f04f 32ff 	mov.w	r2, #4294967295
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6938      	ldr	r0, [r7, #16]
 80086be:	f7ff f80f 	bl	80076e0 <move_window>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f040 8090 	bne.w	80087ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086d6:	7dbb      	ldrb	r3, [r7, #22]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <dir_find+0x60>
 80086dc:	2304      	movs	r3, #4
 80086de:	75fb      	strb	r3, [r7, #23]
 80086e0:	e08a      	b.n	80087f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	330b      	adds	r3, #11
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80086f6:	7dbb      	ldrb	r3, [r7, #22]
 80086f8:	2be5      	cmp	r3, #229	; 0xe5
 80086fa:	d007      	beq.n	800870c <dir_find+0x8a>
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <dir_find+0x98>
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d006      	beq.n	800871a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800870c:	23ff      	movs	r3, #255	; 0xff
 800870e:	757b      	strb	r3, [r7, #21]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f04f 32ff 	mov.w	r2, #4294967295
 8008716:	631a      	str	r2, [r3, #48]	; 0x30
 8008718:	e05e      	b.n	80087d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d136      	bne.n	800878e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d154      	bne.n	80087d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00d      	beq.n	8008754 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	7b5b      	ldrb	r3, [r3, #13]
 800873e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008740:	7dbb      	ldrb	r3, [r7, #22]
 8008742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008746:	75bb      	strb	r3, [r7, #22]
 8008748:	7dbb      	ldrb	r3, [r7, #22]
 800874a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008754:	7dba      	ldrb	r2, [r7, #22]
 8008756:	7d7b      	ldrb	r3, [r7, #21]
 8008758:	429a      	cmp	r2, r3
 800875a:	d115      	bne.n	8008788 <dir_find+0x106>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	330d      	adds	r3, #13
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	7d3a      	ldrb	r2, [r7, #20]
 8008766:	429a      	cmp	r2, r3
 8008768:	d10e      	bne.n	8008788 <dir_find+0x106>
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f7ff fcf1 	bl	800815c <cmp_lfn>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <dir_find+0x106>
 8008780:	7d7b      	ldrb	r3, [r7, #21]
 8008782:	3b01      	subs	r3, #1
 8008784:	b2db      	uxtb	r3, r3
 8008786:	e000      	b.n	800878a <dir_find+0x108>
 8008788:	23ff      	movs	r3, #255	; 0xff
 800878a:	757b      	strb	r3, [r7, #21]
 800878c:	e024      	b.n	80087d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800878e:	7d7b      	ldrb	r3, [r7, #21]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d109      	bne.n	80087a8 <dir_find+0x126>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a1b      	ldr	r3, [r3, #32]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff feaa 	bl	80084f2 <sum_sfn>
 800879e:	4603      	mov	r3, r0
 80087a0:	461a      	mov	r2, r3
 80087a2:	7d3b      	ldrb	r3, [r7, #20]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d024      	beq.n	80087f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <dir_find+0x14a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a18      	ldr	r0, [r3, #32]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3324      	adds	r3, #36	; 0x24
 80087be:	220b      	movs	r2, #11
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7fe fd9a 	bl	80072fa <mem_cmp>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d014      	beq.n	80087f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087cc:	23ff      	movs	r3, #255	; 0xff
 80087ce:	757b      	strb	r3, [r7, #21]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80087d8:	2100      	movs	r1, #0
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fb73 	bl	8007ec6 <dir_next>
 80087e0:	4603      	mov	r3, r0
 80087e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f43f af65 	beq.w	80086b6 <dir_find+0x34>
 80087ec:	e004      	b.n	80087f8 <dir_find+0x176>
		if (res != FR_OK) break;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80087f2:	bf00      	nop
 80087f4:	e000      	b.n	80087f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80087f6:	bf00      	nop

	return res;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08c      	sub	sp, #48	; 0x30
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008818:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <dir_register+0x20>
 8008820:	2306      	movs	r3, #6
 8008822:	e0e0      	b.n	80089e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
 8008828:	e002      	b.n	8008830 <dir_register+0x2c>
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	3301      	adds	r3, #1
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f4      	bne.n	800882a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008846:	f107 030c 	add.w	r3, r7, #12
 800884a:	220c      	movs	r2, #12
 800884c:	4618      	mov	r0, r3
 800884e:	f7fe fd19 	bl	8007284 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d032      	beq.n	80088c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2240      	movs	r2, #64	; 0x40
 8008860:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008864:	2301      	movs	r3, #1
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
 8008868:	e016      	b.n	8008898 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	f107 010c 	add.w	r1, r7, #12
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	f7ff fdab 	bl	80083d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff feff 	bl	8008682 <dir_find>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800888a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008894:	3301      	adds	r3, #1
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	2b63      	cmp	r3, #99	; 0x63
 800889c:	d9e5      	bls.n	800886a <dir_register+0x66>
 800889e:	e000      	b.n	80088a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80088a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	2b64      	cmp	r3, #100	; 0x64
 80088a6:	d101      	bne.n	80088ac <dir_register+0xa8>
 80088a8:	2307      	movs	r3, #7
 80088aa:	e09c      	b.n	80089e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80088ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	d002      	beq.n	80088ba <dir_register+0xb6>
 80088b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088b8:	e095      	b.n	80089e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80088ba:	7dfa      	ldrb	r2, [r7, #23]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d007      	beq.n	80088dc <dir_register+0xd8>
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	330c      	adds	r3, #12
 80088d0:	4a47      	ldr	r2, [pc, #284]	; (80089f0 <dir_register+0x1ec>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	089b      	lsrs	r3, r3, #2
 80088d8:	3301      	adds	r3, #1
 80088da:	e000      	b.n	80088de <dir_register+0xda>
 80088dc:	2301      	movs	r3, #1
 80088de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80088e0:	6a39      	ldr	r1, [r7, #32]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff fbb4 	bl	8008050 <dir_alloc>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80088ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d148      	bne.n	8008988 <dir_register+0x184>
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	623b      	str	r3, [r7, #32]
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d042      	beq.n	8008988 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695a      	ldr	r2, [r3, #20]
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	015b      	lsls	r3, r3, #5
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fa5e 	bl	8007dd0 <dir_sdi>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800891a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800891e:	2b00      	cmp	r3, #0
 8008920:	d132      	bne.n	8008988 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3324      	adds	r3, #36	; 0x24
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fde3 	bl	80084f2 <sum_sfn>
 800892c:	4603      	mov	r3, r0
 800892e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	4619      	mov	r1, r3
 8008936:	69f8      	ldr	r0, [r7, #28]
 8008938:	f7fe fed2 	bl	80076e0 <move_window>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008946:	2b00      	cmp	r3, #0
 8008948:	d11d      	bne.n	8008986 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	68d8      	ldr	r0, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a19      	ldr	r1, [r3, #32]
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	7efb      	ldrb	r3, [r7, #27]
 8008958:	f7ff fcd4 	bl	8008304 <put_lfn>
				fs->wflag = 1;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	2201      	movs	r2, #1
 8008960:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008962:	2100      	movs	r1, #0
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff faae 	bl	8007ec6 <dir_next>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008974:	2b00      	cmp	r3, #0
 8008976:	d107      	bne.n	8008988 <dir_register+0x184>
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	3b01      	subs	r3, #1
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1d5      	bne.n	8008930 <dir_register+0x12c>
 8008984:	e000      	b.n	8008988 <dir_register+0x184>
				if (res != FR_OK) break;
 8008986:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800898c:	2b00      	cmp	r3, #0
 800898e:	d128      	bne.n	80089e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4619      	mov	r1, r3
 8008996:	69f8      	ldr	r0, [r7, #28]
 8008998:	f7fe fea2 	bl	80076e0 <move_window>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80089a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11b      	bne.n	80089e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	2220      	movs	r2, #32
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fc87 	bl	80072c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a18      	ldr	r0, [r3, #32]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3324      	adds	r3, #36	; 0x24
 80089c0:	220b      	movs	r2, #11
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7fe fc5e 	bl	8007284 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	330c      	adds	r3, #12
 80089d4:	f002 0218 	and.w	r2, r2, #24
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	2201      	movs	r2, #1
 80089e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80089e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3730      	adds	r7, #48	; 0x30
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	4ec4ec4f 	.word	0x4ec4ec4f

080089f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80c9 	beq.w	8008ba6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d032      	beq.n	8008a84 <get_fileinfo+0x90>
			i = j = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008a26:	e01b      	b.n	8008a60 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008a28:	89fb      	ldrh	r3, [r7, #14]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f002 fa33 	bl	800ae98 <ff_convert>
 8008a32:	4603      	mov	r3, r0
 8008a34:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008a36:	89fb      	ldrh	r3, [r7, #14]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <get_fileinfo+0x4e>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	e01a      	b.n	8008a78 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	2bfe      	cmp	r3, #254	; 0xfe
 8008a46:	d902      	bls.n	8008a4e <get_fileinfo+0x5a>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
 8008a4c:	e014      	b.n	8008a78 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	61fa      	str	r2, [r7, #28]
 8008a54:	89fa      	ldrh	r2, [r7, #14]
 8008a56:	b2d1      	uxtb	r1, r2
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1c59      	adds	r1, r3, #1
 8008a68:	61b9      	str	r1, [r7, #24]
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	81fb      	strh	r3, [r7, #14]
 8008a72:	89fb      	ldrh	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1d7      	bne.n	8008a28 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	3316      	adds	r3, #22
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	3316      	adds	r3, #22
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008a98:	e04c      	b.n	8008b34 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1a      	ldr	r2, [r3, #32]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	1c59      	adds	r1, r3, #1
 8008aa2:	61f9      	str	r1, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d100      	bne.n	8008ab2 <get_fileinfo+0xbe>
 8008ab0:	e040      	b.n	8008b34 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	2b05      	cmp	r3, #5
 8008ab6:	d101      	bne.n	8008abc <get_fileinfo+0xc8>
 8008ab8:	23e5      	movs	r3, #229	; 0xe5
 8008aba:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	d10f      	bne.n	8008ae2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8008ac2:	89bb      	ldrh	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d105      	bne.n	8008ad4 <get_fileinfo+0xe0>
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4413      	add	r3, r2
 8008ace:	3316      	adds	r3, #22
 8008ad0:	222e      	movs	r2, #46	; 0x2e
 8008ad2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	61ba      	str	r2, [r7, #24]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4413      	add	r3, r2
 8008ade:	222e      	movs	r2, #46	; 0x2e
 8008ae0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3309      	adds	r3, #9
 8008aea:	7dfa      	ldrb	r2, [r7, #23]
 8008aec:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11c      	bne.n	8008b2e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d913      	bls.n	8008b22 <get_fileinfo+0x12e>
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	2b5a      	cmp	r3, #90	; 0x5a
 8008afe:	d810      	bhi.n	8008b22 <get_fileinfo+0x12e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	330c      	adds	r3, #12
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d901      	bls.n	8008b14 <get_fileinfo+0x120>
 8008b10:	2310      	movs	r3, #16
 8008b12:	e000      	b.n	8008b16 <get_fileinfo+0x122>
 8008b14:	2308      	movs	r3, #8
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	3320      	adds	r3, #32
 8008b20:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	4413      	add	r3, r2
 8008b28:	3316      	adds	r3, #22
 8008b2a:	7dfa      	ldrb	r2, [r7, #23]
 8008b2c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	2b0a      	cmp	r3, #10
 8008b38:	d9af      	bls.n	8008a9a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008b3a:	89bb      	ldrh	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10d      	bne.n	8008b5c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	4413      	add	r3, r2
 8008b46:	3316      	adds	r3, #22
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	330c      	adds	r3, #12
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <get_fileinfo+0x168>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	4413      	add	r3, r2
 8008b62:	3309      	adds	r3, #9
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	7ada      	ldrb	r2, [r3, #11]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	331c      	adds	r3, #28
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fb19 	bl	80071b0 <ld_dword>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	3316      	adds	r3, #22
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fb10 	bl	80071b0 <ld_dword>
 8008b90:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	80da      	strh	r2, [r3, #6]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	809a      	strh	r2, [r3, #4]
 8008ba4:	e000      	b.n	8008ba8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008ba6:	bf00      	nop
}
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	613b      	str	r3, [r7, #16]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	61ba      	str	r2, [r7, #24]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be0:	2b1f      	cmp	r3, #31
 8008be2:	d940      	bls.n	8008c66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008be6:	2b2f      	cmp	r3, #47	; 0x2f
 8008be8:	d006      	beq.n	8008bf8 <create_name+0x48>
 8008bea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bec:	2b5c      	cmp	r3, #92	; 0x5c
 8008bee:	d110      	bne.n	8008c12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008bf0:	e002      	b.n	8008bf8 <create_name+0x48>
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b2f      	cmp	r3, #47	; 0x2f
 8008c02:	d0f6      	beq.n	8008bf2 <create_name+0x42>
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	4413      	add	r3, r2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8008c0e:	d0f0      	beq.n	8008bf2 <create_name+0x42>
			break;
 8008c10:	e02a      	b.n	8008c68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2bfe      	cmp	r3, #254	; 0xfe
 8008c16:	d901      	bls.n	8008c1c <create_name+0x6c>
 8008c18:	2306      	movs	r3, #6
 8008c1a:	e177      	b.n	8008f0c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c24:	2101      	movs	r1, #1
 8008c26:	4618      	mov	r0, r3
 8008c28:	f002 f936 	bl	800ae98 <ff_convert>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <create_name+0x8a>
 8008c36:	2306      	movs	r3, #6
 8008c38:	e168      	b.n	8008f0c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8008c3e:	d809      	bhi.n	8008c54 <create_name+0xa4>
 8008c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c42:	4619      	mov	r1, r3
 8008c44:	48b3      	ldr	r0, [pc, #716]	; (8008f14 <create_name+0x364>)
 8008c46:	f7fe fb7f 	bl	8007348 <chk_chr>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <create_name+0xa4>
 8008c50:	2306      	movs	r3, #6
 8008c52:	e15b      	b.n	8008f0c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	617a      	str	r2, [r7, #20]
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008c64:	e7b4      	b.n	8008bd0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008c66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	441a      	add	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c74:	2b1f      	cmp	r3, #31
 8008c76:	d801      	bhi.n	8008c7c <create_name+0xcc>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	e000      	b.n	8008c7e <create_name+0xce>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008c82:	e011      	b.n	8008ca8 <create_name+0xf8>
		w = lfn[di - 1];
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d002      	beq.n	8008ca2 <create_name+0xf2>
 8008c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca0:	d106      	bne.n	8008cb0 <create_name+0x100>
		di--;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1ea      	bne.n	8008c84 <create_name+0xd4>
 8008cae:	e000      	b.n	8008cb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008cb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <create_name+0x118>
 8008cc4:	2306      	movs	r3, #6
 8008cc6:	e121      	b.n	8008f0c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3324      	adds	r3, #36	; 0x24
 8008ccc:	220b      	movs	r2, #11
 8008cce:	2120      	movs	r1, #32
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe faf8 	bl	80072c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	e002      	b.n	8008ce2 <create_name+0x132>
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d0f5      	beq.n	8008cdc <create_name+0x12c>
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfc:	d0ee      	beq.n	8008cdc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <create_name+0x168>
 8008d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d08:	f043 0303 	orr.w	r3, r3, #3
 8008d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008d10:	e002      	b.n	8008d18 <create_name+0x168>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <create_name+0x182>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	3b01      	subs	r3, #1
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d30:	d1ef      	bne.n	8008d12 <create_name+0x162>

	i = b = 0; ni = 8;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d38:	2300      	movs	r3, #0
 8008d3a:	623b      	str	r3, [r7, #32]
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	61ba      	str	r2, [r7, #24]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8090 	beq.w	8008e78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d006      	beq.n	8008d6c <create_name+0x1bc>
 8008d5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d60:	2b2e      	cmp	r3, #46	; 0x2e
 8008d62:	d10a      	bne.n	8008d7a <create_name+0x1ca>
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d006      	beq.n	8008d7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d70:	f043 0303 	orr.w	r3, r3, #3
 8008d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d78:	e07d      	b.n	8008e76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d203      	bcs.n	8008d8a <create_name+0x1da>
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d123      	bne.n	8008dd2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	2b0b      	cmp	r3, #11
 8008d8e:	d106      	bne.n	8008d9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d94:	f043 0303 	orr.w	r3, r3, #3
 8008d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d9c:	e06f      	b.n	8008e7e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d005      	beq.n	8008db2 <create_name+0x202>
 8008da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008daa:	f043 0303 	orr.w	r3, r3, #3
 8008dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d860      	bhi.n	8008e7c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	623b      	str	r3, [r7, #32]
 8008dc2:	230b      	movs	r3, #11
 8008dc4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008dd0:	e051      	b.n	8008e76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8008dd6:	d914      	bls.n	8008e02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 f85b 	bl	800ae98 <ff_convert>
 8008de2:	4603      	mov	r3, r0
 8008de4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <create_name+0x246>
 8008dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dee:	3b80      	subs	r3, #128	; 0x80
 8008df0:	4a49      	ldr	r2, [pc, #292]	; (8008f18 <create_name+0x368>)
 8008df2:	5cd3      	ldrb	r3, [r2, r3]
 8008df4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dfa:	f043 0302 	orr.w	r3, r3, #2
 8008dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <create_name+0x268>
 8008e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4843      	ldr	r0, [pc, #268]	; (8008f1c <create_name+0x36c>)
 8008e0e:	f7fe fa9b 	bl	8007348 <chk_chr>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d008      	beq.n	8008e2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008e18:	235f      	movs	r3, #95	; 0x5f
 8008e1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e20:	f043 0303 	orr.w	r3, r3, #3
 8008e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e28:	e01b      	b.n	8008e62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d909      	bls.n	8008e44 <create_name+0x294>
 8008e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e32:	2b5a      	cmp	r3, #90	; 0x5a
 8008e34:	d806      	bhi.n	8008e44 <create_name+0x294>
					b |= 2;
 8008e36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e3a:	f043 0302 	orr.w	r3, r3, #2
 8008e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e42:	e00e      	b.n	8008e62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e46:	2b60      	cmp	r3, #96	; 0x60
 8008e48:	d90b      	bls.n	8008e62 <create_name+0x2b2>
 8008e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e4c:	2b7a      	cmp	r3, #122	; 0x7a
 8008e4e:	d808      	bhi.n	8008e62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e54:	f043 0301 	orr.w	r3, r3, #1
 8008e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e5e:	3b20      	subs	r3, #32
 8008e60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	623a      	str	r2, [r7, #32]
 8008e68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e6a:	b2d1      	uxtb	r1, r2
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	4413      	add	r3, r2
 8008e70:	460a      	mov	r2, r1
 8008e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008e76:	e763      	b.n	8008d40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008e78:	bf00      	nop
 8008e7a:	e000      	b.n	8008e7e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008e7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e84:	2be5      	cmp	r3, #229	; 0xe5
 8008e86:	d103      	bne.n	8008e90 <create_name+0x2e0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d104      	bne.n	8008ea0 <create_name+0x2f0>
 8008e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	2b0c      	cmp	r3, #12
 8008eaa:	d005      	beq.n	8008eb8 <create_name+0x308>
 8008eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d105      	bne.n	8008ec4 <create_name+0x314>
 8008eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d117      	bne.n	8008f00 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <create_name+0x338>
 8008edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ee0:	f043 0310 	orr.w	r3, r3, #16
 8008ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d105      	bne.n	8008f00 <create_name+0x350>
 8008ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ef8:	f043 0308 	orr.w	r3, r3, #8
 8008efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008f0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	080147a4 	.word	0x080147a4
 8008f18:	08020914 	.word	0x08020914
 8008f1c:	080147b0 	.word	0x080147b0

08008f20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f34:	e002      	b.n	8008f3c <follow_path+0x1c>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b2f      	cmp	r3, #47	; 0x2f
 8008f42:	d0f8      	beq.n	8008f36 <follow_path+0x16>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b5c      	cmp	r3, #92	; 0x5c
 8008f4a:	d0f4      	beq.n	8008f36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	2b1f      	cmp	r3, #31
 8008f58:	d80a      	bhi.n	8008f70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2280      	movs	r2, #128	; 0x80
 8008f5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008f62:	2100      	movs	r1, #0
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fe ff33 	bl	8007dd0 <dir_sdi>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]
 8008f6e:	e043      	b.n	8008ff8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f70:	463b      	mov	r3, r7
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fe1b 	bl	8008bb0 <create_name>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d134      	bne.n	8008fee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fb7c 	bl	8008682 <dir_find>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d127      	bne.n	8008ff2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d122      	bne.n	8008ff2 <follow_path+0xd2>
 8008fac:	2305      	movs	r3, #5
 8008fae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fb0:	e01f      	b.n	8008ff2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d11c      	bne.n	8008ff6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	799b      	ldrb	r3, [r3, #6]
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008fc8:	2305      	movs	r3, #5
 8008fca:	75fb      	strb	r3, [r7, #23]
 8008fcc:	e014      	b.n	8008ff8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fdc:	4413      	add	r3, r2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7ff f87c 	bl	80080de <ld_clust>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008fec:	e7c0      	b.n	8008f70 <follow_path+0x50>
			if (res != FR_OK) break;
 8008fee:	bf00      	nop
 8008ff0:	e002      	b.n	8008ff8 <follow_path+0xd8>
				break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ff6:	bf00      	nop
			}
		}
	}

	return res;
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009002:	b480      	push	{r7}
 8009004:	b087      	sub	sp, #28
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800900a:	f04f 33ff 	mov.w	r3, #4294967295
 800900e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d031      	beq.n	800907c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e002      	b.n	8009026 <get_ldnumber+0x24>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3301      	adds	r3, #1
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b1f      	cmp	r3, #31
 800902c:	d903      	bls.n	8009036 <get_ldnumber+0x34>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b3a      	cmp	r3, #58	; 0x3a
 8009034:	d1f4      	bne.n	8009020 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b3a      	cmp	r3, #58	; 0x3a
 800903c:	d11c      	bne.n	8009078 <get_ldnumber+0x76>
			tp = *path;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	60fa      	str	r2, [r7, #12]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	3b30      	subs	r3, #48	; 0x30
 800904e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b09      	cmp	r3, #9
 8009054:	d80e      	bhi.n	8009074 <get_ldnumber+0x72>
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	429a      	cmp	r2, r3
 800905c:	d10a      	bne.n	8009074 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d807      	bhi.n	8009074 <get_ldnumber+0x72>
					vol = (int)i;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	3301      	adds	r3, #1
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	e002      	b.n	800907e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800907c:	693b      	ldr	r3, [r7, #16]
}
 800907e:	4618      	mov	r0, r3
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	70da      	strb	r2, [r3, #3]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f04f 32ff 	mov.w	r2, #4294967295
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fe fb1a 	bl	80076e0 <move_window>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <check_fs+0x2a>
 80090b2:	2304      	movs	r3, #4
 80090b4:	e038      	b.n	8009128 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3334      	adds	r3, #52	; 0x34
 80090ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe f85e 	bl	8007180 <ld_word>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d001      	beq.n	80090d4 <check_fs+0x48>
 80090d0:	2303      	movs	r3, #3
 80090d2:	e029      	b.n	8009128 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090da:	2be9      	cmp	r3, #233	; 0xe9
 80090dc:	d009      	beq.n	80090f2 <check_fs+0x66>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090e4:	2beb      	cmp	r3, #235	; 0xeb
 80090e6:	d11e      	bne.n	8009126 <check_fs+0x9a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80090ee:	2b90      	cmp	r3, #144	; 0x90
 80090f0:	d119      	bne.n	8009126 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3334      	adds	r3, #52	; 0x34
 80090f6:	3336      	adds	r3, #54	; 0x36
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe f859 	bl	80071b0 <ld_dword>
 80090fe:	4603      	mov	r3, r0
 8009100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <check_fs+0xa4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d101      	bne.n	800910e <check_fs+0x82>
 800910a:	2300      	movs	r3, #0
 800910c:	e00c      	b.n	8009128 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3334      	adds	r3, #52	; 0x34
 8009112:	3352      	adds	r3, #82	; 0x52
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe f84b 	bl	80071b0 <ld_dword>
 800911a:	4602      	mov	r2, r0
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <check_fs+0xa8>)
 800911e:	429a      	cmp	r2, r3
 8009120:	d101      	bne.n	8009126 <check_fs+0x9a>
 8009122:	2300      	movs	r3, #0
 8009124:	e000      	b.n	8009128 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009126:	2302      	movs	r3, #2
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	00544146 	.word	0x00544146
 8009134:	33544146 	.word	0x33544146

08009138 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b096      	sub	sp, #88	; 0x58
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ff58 	bl	8009002 <get_ldnumber>
 8009152:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	2b00      	cmp	r3, #0
 8009158:	da01      	bge.n	800915e <find_volume+0x26>
 800915a:	230b      	movs	r3, #11
 800915c:	e22e      	b.n	80095bc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800915e:	4aa8      	ldr	r2, [pc, #672]	; (8009400 <find_volume+0x2c8>)
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009166:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <find_volume+0x3a>
 800916e:	230c      	movs	r3, #12
 8009170:	e224      	b.n	80095bc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009176:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01a      	beq.n	80091be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd ff51 	bl	8007034 <disk_status>
 8009192:	4603      	mov	r3, r0
 8009194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10c      	bne.n	80091be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <find_volume+0x82>
 80091aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80091b6:	230a      	movs	r3, #10
 80091b8:	e200      	b.n	80095bc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80091ba:	2300      	movs	r3, #0
 80091bc:	e1fe      	b.n	80095bc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	2200      	movs	r2, #0
 80091c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80091c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd ff49 	bl	8007068 <disk_initialize>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80091dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80091e8:	2303      	movs	r3, #3
 80091ea:	e1e7      	b.n	80095bc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <find_volume+0xca>
 80091f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80091fe:	230a      	movs	r3, #10
 8009200:	e1dc      	b.n	80095bc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800920a:	f7ff ff3f 	bl	800908c <check_fs>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009218:	2b02      	cmp	r3, #2
 800921a:	d14b      	bne.n	80092b4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800921c:	2300      	movs	r3, #0
 800921e:	643b      	str	r3, [r7, #64]	; 0x40
 8009220:	e01f      	b.n	8009262 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009230:	4413      	add	r3, r2
 8009232:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009236:	3304      	adds	r3, #4
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <find_volume+0x114>
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	3308      	adds	r3, #8
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd ffb4 	bl	80071b0 <ld_dword>
 8009248:	4602      	mov	r2, r0
 800924a:	e000      	b.n	800924e <find_volume+0x116>
 800924c:	2200      	movs	r2, #0
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009256:	440b      	add	r3, r1
 8009258:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800925c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800925e:	3301      	adds	r3, #1
 8009260:	643b      	str	r3, [r7, #64]	; 0x40
 8009262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009264:	2b03      	cmp	r3, #3
 8009266:	d9dc      	bls.n	8009222 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009268:	2300      	movs	r3, #0
 800926a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800926c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <find_volume+0x140>
 8009272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009274:	3b01      	subs	r3, #1
 8009276:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009280:	4413      	add	r3, r2
 8009282:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009286:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <find_volume+0x162>
 800928e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009290:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009292:	f7ff fefb 	bl	800908c <check_fs>
 8009296:	4603      	mov	r3, r0
 8009298:	e000      	b.n	800929c <find_volume+0x164>
 800929a:	2303      	movs	r3, #3
 800929c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80092a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d905      	bls.n	80092b4 <find_volume+0x17c>
 80092a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092aa:	3301      	adds	r3, #1
 80092ac:	643b      	str	r3, [r7, #64]	; 0x40
 80092ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d9e1      	bls.n	8009278 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80092b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092b8:	2b04      	cmp	r3, #4
 80092ba:	d101      	bne.n	80092c0 <find_volume+0x188>
 80092bc:	2301      	movs	r3, #1
 80092be:	e17d      	b.n	80095bc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d901      	bls.n	80092cc <find_volume+0x194>
 80092c8:	230d      	movs	r3, #13
 80092ca:	e177      	b.n	80095bc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	3334      	adds	r3, #52	; 0x34
 80092d0:	330b      	adds	r3, #11
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fd ff54 	bl	8007180 <ld_word>
 80092d8:	4603      	mov	r3, r0
 80092da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092de:	d001      	beq.n	80092e4 <find_volume+0x1ac>
 80092e0:	230d      	movs	r3, #13
 80092e2:	e16b      	b.n	80095bc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	3334      	adds	r3, #52	; 0x34
 80092e8:	3316      	adds	r3, #22
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fd ff48 	bl	8007180 <ld_word>
 80092f0:	4603      	mov	r3, r0
 80092f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80092f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <find_volume+0x1d0>
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	3334      	adds	r3, #52	; 0x34
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f7fd ff55 	bl	80071b0 <ld_dword>
 8009306:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800930c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931a:	789b      	ldrb	r3, [r3, #2]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d005      	beq.n	800932c <find_volume+0x1f4>
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	789b      	ldrb	r3, [r3, #2]
 8009324:	2b02      	cmp	r3, #2
 8009326:	d001      	beq.n	800932c <find_volume+0x1f4>
 8009328:	230d      	movs	r3, #13
 800932a:	e147      	b.n	80095bc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	789b      	ldrb	r3, [r3, #2]
 8009330:	461a      	mov	r2, r3
 8009332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009340:	b29a      	uxth	r2, r3
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	895b      	ldrh	r3, [r3, #10]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <find_volume+0x228>
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	895b      	ldrh	r3, [r3, #10]
 8009352:	461a      	mov	r2, r3
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	895b      	ldrh	r3, [r3, #10]
 8009358:	3b01      	subs	r3, #1
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <find_volume+0x22c>
 8009360:	230d      	movs	r3, #13
 8009362:	e12b      	b.n	80095bc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	3334      	adds	r3, #52	; 0x34
 8009368:	3311      	adds	r3, #17
 800936a:	4618      	mov	r0, r3
 800936c:	f7fd ff08 	bl	8007180 <ld_word>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009376:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	891b      	ldrh	r3, [r3, #8]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <find_volume+0x252>
 8009386:	230d      	movs	r3, #13
 8009388:	e118      	b.n	80095bc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	3334      	adds	r3, #52	; 0x34
 800938e:	3313      	adds	r3, #19
 8009390:	4618      	mov	r0, r3
 8009392:	f7fd fef5 	bl	8007180 <ld_word>
 8009396:	4603      	mov	r3, r0
 8009398:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800939a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <find_volume+0x276>
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	3334      	adds	r3, #52	; 0x34
 80093a4:	3320      	adds	r3, #32
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fd ff02 	bl	80071b0 <ld_dword>
 80093ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	3334      	adds	r3, #52	; 0x34
 80093b2:	330e      	adds	r3, #14
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fd fee3 	bl	8007180 <ld_word>
 80093ba:	4603      	mov	r3, r0
 80093bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <find_volume+0x290>
 80093c4:	230d      	movs	r3, #13
 80093c6:	e0f9      	b.n	80095bc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093cc:	4413      	add	r3, r2
 80093ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d0:	8912      	ldrh	r2, [r2, #8]
 80093d2:	0912      	lsrs	r2, r2, #4
 80093d4:	b292      	uxth	r2, r2
 80093d6:	4413      	add	r3, r2
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	429a      	cmp	r2, r3
 80093e0:	d201      	bcs.n	80093e6 <find_volume+0x2ae>
 80093e2:	230d      	movs	r3, #13
 80093e4:	e0ea      	b.n	80095bc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80093e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ee:	8952      	ldrh	r2, [r2, #10]
 80093f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <find_volume+0x2cc>
 80093fc:	230d      	movs	r3, #13
 80093fe:	e0dd      	b.n	80095bc <find_volume+0x484>
 8009400:	2000a45c 	.word	0x2000a45c
		fmt = FS_FAT32;
 8009404:	2303      	movs	r3, #3
 8009406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009410:	4293      	cmp	r3, r2
 8009412:	d802      	bhi.n	800941a <find_volume+0x2e2>
 8009414:	2302      	movs	r3, #2
 8009416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800941a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009420:	4293      	cmp	r3, r2
 8009422:	d802      	bhi.n	800942a <find_volume+0x2f2>
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009430:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009436:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009438:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800943a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943c:	441a      	add	r2, r3
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	441a      	add	r2, r3
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800944c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009450:	2b03      	cmp	r3, #3
 8009452:	d11e      	bne.n	8009492 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	3334      	adds	r3, #52	; 0x34
 8009458:	332a      	adds	r3, #42	; 0x2a
 800945a:	4618      	mov	r0, r3
 800945c:	f7fd fe90 	bl	8007180 <ld_word>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <find_volume+0x332>
 8009466:	230d      	movs	r3, #13
 8009468:	e0a8      	b.n	80095bc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	891b      	ldrh	r3, [r3, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <find_volume+0x33e>
 8009472:	230d      	movs	r3, #13
 8009474:	e0a2      	b.n	80095bc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	3334      	adds	r3, #52	; 0x34
 800947a:	332c      	adds	r3, #44	; 0x2c
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fe97 	bl	80071b0 <ld_dword>
 8009482:	4602      	mov	r2, r0
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	647b      	str	r3, [r7, #68]	; 0x44
 8009490:	e01f      	b.n	80094d2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	891b      	ldrh	r3, [r3, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <find_volume+0x366>
 800949a:	230d      	movs	r3, #13
 800949c:	e08e      	b.n	80095bc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800949e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a4:	441a      	add	r2, r3
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d103      	bne.n	80094ba <find_volume+0x382>
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	e00a      	b.n	80094d0 <find_volume+0x398>
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	4613      	mov	r3, r2
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	4413      	add	r3, r2
 80094c4:	085a      	lsrs	r2, r3, #1
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	69da      	ldr	r2, [r3, #28]
 80094d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80094dc:	0a5b      	lsrs	r3, r3, #9
 80094de:	429a      	cmp	r2, r3
 80094e0:	d201      	bcs.n	80094e6 <find_volume+0x3ae>
 80094e2:	230d      	movs	r3, #13
 80094e4:	e06a      	b.n	80095bc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ec:	615a      	str	r2, [r3, #20]
 80094ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f0:	695a      	ldr	r2, [r3, #20]
 80094f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	2280      	movs	r2, #128	; 0x80
 80094fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80094fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009500:	2b03      	cmp	r3, #3
 8009502:	d149      	bne.n	8009598 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	3334      	adds	r3, #52	; 0x34
 8009508:	3330      	adds	r3, #48	; 0x30
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fe38 	bl	8007180 <ld_word>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d140      	bne.n	8009598 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009518:	3301      	adds	r3, #1
 800951a:	4619      	mov	r1, r3
 800951c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800951e:	f7fe f8df 	bl	80076e0 <move_window>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d137      	bne.n	8009598 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	2200      	movs	r2, #0
 800952c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800952e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009530:	3334      	adds	r3, #52	; 0x34
 8009532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd fe22 	bl	8007180 <ld_word>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009544:	429a      	cmp	r2, r3
 8009546:	d127      	bne.n	8009598 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	3334      	adds	r3, #52	; 0x34
 800954c:	4618      	mov	r0, r3
 800954e:	f7fd fe2f 	bl	80071b0 <ld_dword>
 8009552:	4602      	mov	r2, r0
 8009554:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <find_volume+0x48c>)
 8009556:	429a      	cmp	r2, r3
 8009558:	d11e      	bne.n	8009598 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	3334      	adds	r3, #52	; 0x34
 800955e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009562:	4618      	mov	r0, r3
 8009564:	f7fd fe24 	bl	80071b0 <ld_dword>
 8009568:	4602      	mov	r2, r0
 800956a:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <find_volume+0x490>)
 800956c:	429a      	cmp	r2, r3
 800956e:	d113      	bne.n	8009598 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	3334      	adds	r3, #52	; 0x34
 8009574:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009578:	4618      	mov	r0, r3
 800957a:	f7fd fe19 	bl	80071b0 <ld_dword>
 800957e:	4602      	mov	r2, r0
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	3334      	adds	r3, #52	; 0x34
 8009588:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd fe0f 	bl	80071b0 <ld_dword>
 8009592:	4602      	mov	r2, r0
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800959e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80095a0:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <find_volume+0x494>)
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	4b08      	ldr	r3, [pc, #32]	; (80095cc <find_volume+0x494>)
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	4b07      	ldr	r3, [pc, #28]	; (80095cc <find_volume+0x494>)
 80095ae:	881a      	ldrh	r2, [r3, #0]
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80095b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095b6:	f7fe f82b 	bl	8007610 <clear_lock>
#endif
	return FR_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3758      	adds	r7, #88	; 0x58
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	41615252 	.word	0x41615252
 80095c8:	61417272 	.word	0x61417272
 80095cc:	2000a464 	.word	0x2000a464

080095d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095da:	2309      	movs	r3, #9
 80095dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01c      	beq.n	800961e <validate+0x4e>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d018      	beq.n	800961e <validate+0x4e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d013      	beq.n	800961e <validate+0x4e>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	889a      	ldrh	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	88db      	ldrh	r3, [r3, #6]
 8009600:	429a      	cmp	r2, r3
 8009602:	d10c      	bne.n	800961e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	4618      	mov	r0, r3
 800960c:	f7fd fd12 	bl	8007034 <disk_status>
 8009610:	4603      	mov	r3, r0
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <validate+0x4e>
			res = FR_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <validate+0x5a>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	e000      	b.n	800962c <validate+0x5c>
 800962a:	2300      	movs	r3, #0
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	6013      	str	r3, [r2, #0]
	return res;
 8009630:	7bfb      	ldrb	r3, [r7, #15]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800964e:	f107 0310 	add.w	r3, r7, #16
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff fcd5 	bl	8009002 <get_ldnumber>
 8009658:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	da01      	bge.n	8009664 <f_mount+0x28>
 8009660:	230b      	movs	r3, #11
 8009662:	e02b      	b.n	80096bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009664:	4a17      	ldr	r2, [pc, #92]	; (80096c4 <f_mount+0x88>)
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009674:	69b8      	ldr	r0, [r7, #24]
 8009676:	f7fd ffcb 	bl	8007610 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	490d      	ldr	r1, [pc, #52]	; (80096c4 <f_mount+0x88>)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <f_mount+0x66>
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d001      	beq.n	80096a6 <f_mount+0x6a>
 80096a2:	2300      	movs	r3, #0
 80096a4:	e00a      	b.n	80096bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096a6:	f107 010c 	add.w	r1, r7, #12
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	2200      	movs	r2, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fd41 	bl	8009138 <find_volume>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	2000a45c 	.word	0x2000a45c

080096c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b09a      	sub	sp, #104	; 0x68
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <f_open+0x18>
 80096dc:	2309      	movs	r3, #9
 80096de:	e1bd      	b.n	8009a5c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80096e8:	79fa      	ldrb	r2, [r7, #7]
 80096ea:	f107 0110 	add.w	r1, r7, #16
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fd20 	bl	8009138 <find_volume>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80096fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009702:	2b00      	cmp	r3, #0
 8009704:	f040 81a1 	bne.w	8009a4a <f_open+0x382>
		dj.obj.fs = fs;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800970c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009710:	f001 fbab 	bl	800ae6a <ff_memalloc>
 8009714:	65b8      	str	r0, [r7, #88]	; 0x58
 8009716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <f_open+0x58>
 800971c:	2311      	movs	r3, #17
 800971e:	e19d      	b.n	8009a5c <f_open+0x394>
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009724:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	f107 0314 	add.w	r3, r7, #20
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fbf6 	bl	8008f20 <follow_path>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800973a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800973e:	2b00      	cmp	r3, #0
 8009740:	d11a      	bne.n	8009778 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009742:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009746:	b25b      	sxtb	r3, r3
 8009748:	2b00      	cmp	r3, #0
 800974a:	da03      	bge.n	8009754 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800974c:	2306      	movs	r3, #6
 800974e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009752:	e011      	b.n	8009778 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	bf14      	ite	ne
 800975e:	2301      	movne	r3, #1
 8009760:	2300      	moveq	r3, #0
 8009762:	b2db      	uxtb	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	f107 0314 	add.w	r3, r7, #20
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd fe07 	bl	8007380 <chk_lock>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	f003 031c 	and.w	r3, r3, #28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d07f      	beq.n	8009882 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8009782:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009786:	2b00      	cmp	r3, #0
 8009788:	d017      	beq.n	80097ba <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800978a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800978e:	2b04      	cmp	r3, #4
 8009790:	d10e      	bne.n	80097b0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009792:	f7fd fe51 	bl	8007438 <enq_lock>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d006      	beq.n	80097aa <f_open+0xe2>
 800979c:	f107 0314 	add.w	r3, r7, #20
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff f82f 	bl	8008804 <dir_register>
 80097a6:	4603      	mov	r3, r0
 80097a8:	e000      	b.n	80097ac <f_open+0xe4>
 80097aa:	2312      	movs	r3, #18
 80097ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	f043 0308 	orr.w	r3, r3, #8
 80097b6:	71fb      	strb	r3, [r7, #7]
 80097b8:	e010      	b.n	80097dc <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80097ba:	7ebb      	ldrb	r3, [r7, #26]
 80097bc:	f003 0311 	and.w	r3, r3, #17
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <f_open+0x104>
					res = FR_DENIED;
 80097c4:	2307      	movs	r3, #7
 80097c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80097ca:	e007      	b.n	80097dc <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <f_open+0x114>
 80097d6:	2308      	movs	r3, #8
 80097d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80097dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d168      	bne.n	80098b6 <f_open+0x1ee>
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d063      	beq.n	80098b6 <f_open+0x1ee>
				dw = GET_FATTIME();
 80097ee:	f7fd fcbf 	bl	8007170 <get_fattime>
 80097f2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	330e      	adds	r3, #14
 80097f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fd fd16 	bl	800722c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009802:	3316      	adds	r3, #22
 8009804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd fd10 	bl	800722c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	330b      	adds	r3, #11
 8009810:	2220      	movs	r2, #32
 8009812:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fc5f 	bl	80080de <ld_clust>
 8009820:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009826:	2200      	movs	r2, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fc77 	bl	800811c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800982e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009830:	331c      	adds	r3, #28
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd fcf9 	bl	800722c <st_dword>
					fs->wflag = 1;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2201      	movs	r2, #1
 800983e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009842:	2b00      	cmp	r3, #0
 8009844:	d037      	beq.n	80098b6 <f_open+0x1ee>
						dw = fs->winsect;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800984c:	f107 0314 	add.w	r3, r7, #20
 8009850:	2200      	movs	r2, #0
 8009852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f98a 	bl	8007b6e <remove_chain>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009864:	2b00      	cmp	r3, #0
 8009866:	d126      	bne.n	80098b6 <f_open+0x1ee>
							res = move_window(fs, dw);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800986c:	4618      	mov	r0, r3
 800986e:	f7fd ff37 	bl	80076e0 <move_window>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800987c:	3a01      	subs	r2, #1
 800987e:	611a      	str	r2, [r3, #16]
 8009880:	e019      	b.n	80098b6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009886:	2b00      	cmp	r3, #0
 8009888:	d115      	bne.n	80098b6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800988a:	7ebb      	ldrb	r3, [r7, #26]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <f_open+0x1d4>
					res = FR_NO_FILE;
 8009894:	2304      	movs	r3, #4
 8009896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800989a:	e00c      	b.n	80098b6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <f_open+0x1ee>
 80098a6:	7ebb      	ldrb	r3, [r7, #26]
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <f_open+0x1ee>
						res = FR_DENIED;
 80098b0:	2307      	movs	r3, #7
 80098b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80098b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d128      	bne.n	8009910 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <f_open+0x208>
				mode |= FA_MODIFIED;
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ce:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80098d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	f023 0301 	bic.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	f107 0314 	add.w	r3, r7, #20
 80098f4:	4611      	mov	r1, r2
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fdc0 	bl	800747c <inc_lock>
 80098fc:	4602      	mov	r2, r0
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <f_open+0x248>
 800990a:	2302      	movs	r3, #2
 800990c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009910:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 8095 	bne.w	8009a44 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f7fe fbdc 	bl	80080de <ld_clust>
 8009926:	4602      	mov	r2, r0
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992e:	331c      	adds	r3, #28
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd fc3d 	bl	80071b0 <ld_dword>
 8009936:	4602      	mov	r2, r0
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	88da      	ldrh	r2, [r3, #6]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	79fa      	ldrb	r2, [r7, #7]
 8009954:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3330      	adds	r3, #48	; 0x30
 800996c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009970:	2100      	movs	r1, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd fca7 	bl	80072c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b00      	cmp	r3, #0
 8009980:	d060      	beq.n	8009a44 <f_open+0x37c>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d05c      	beq.n	8009a44 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	895b      	ldrh	r3, [r3, #10]
 8009996:	025b      	lsls	r3, r3, #9
 8009998:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099a6:	e016      	b.n	80099d6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd ff52 	bl	8007856 <get_fat>
 80099b2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80099b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d802      	bhi.n	80099c0 <f_open+0x2f8>
 80099ba:	2302      	movs	r3, #2
 80099bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80099c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	d102      	bne.n	80099ce <f_open+0x306>
 80099c8:	2301      	movs	r3, #1
 80099ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80099ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d103      	bne.n	80099e6 <f_open+0x31e>
 80099de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80099e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d8e0      	bhi.n	80099a8 <f_open+0x2e0>
				}
				fp->clust = clst;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80099ea:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80099ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d127      	bne.n	8009a44 <f_open+0x37c>
 80099f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d022      	beq.n	8009a44 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd ff08 	bl	8007818 <clust2sect>
 8009a08:	64b8      	str	r0, [r7, #72]	; 0x48
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <f_open+0x350>
						res = FR_INT_ERR;
 8009a10:	2302      	movs	r3, #2
 8009a12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a16:	e015      	b.n	8009a44 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a1a:	0a5a      	lsrs	r2, r3, #9
 8009a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a1e:	441a      	add	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	7858      	ldrb	r0, [r3, #1]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	2301      	movs	r3, #1
 8009a34:	f7fd fb3e 	bl	80070b4 <disk_read>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <f_open+0x37c>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009a44:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009a46:	f001 fa1c 	bl	800ae82 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009a4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <f_open+0x390>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3768      	adds	r7, #104	; 0x68
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	; 0x38
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f107 0214 	add.w	r2, r7, #20
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fda3 	bl	80095d0 <validate>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <f_read+0x44>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	7d5b      	ldrb	r3, [r3, #21]
 8009a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <f_read+0x4a>
 8009aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aac:	e115      	b.n	8009cda <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7d1b      	ldrb	r3, [r3, #20]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <f_read+0x5a>
 8009aba:	2307      	movs	r3, #7
 8009abc:	e10d      	b.n	8009cda <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	f240 80fe 	bls.w	8009cd0 <f_read+0x26c>
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009ad8:	e0fa      	b.n	8009cd0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 80c6 	bne.w	8009c74 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	0a5b      	lsrs	r3, r3, #9
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	8952      	ldrh	r2, [r2, #10]
 8009af2:	3a01      	subs	r2, #1
 8009af4:	4013      	ands	r3, r2
 8009af6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d12f      	bne.n	8009b5e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d103      	bne.n	8009b0e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8009b0c:	e013      	b.n	8009b36 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d007      	beq.n	8009b26 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7fe f923 	bl	8007d68 <clmt_clust>
 8009b22:	6338      	str	r0, [r7, #48]	; 0x30
 8009b24:	e007      	b.n	8009b36 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	f7fd fe91 	bl	8007856 <get_fat>
 8009b34:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d804      	bhi.n	8009b46 <f_read+0xe2>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	755a      	strb	r2, [r3, #21]
 8009b42:	2302      	movs	r3, #2
 8009b44:	e0c9      	b.n	8009cda <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d104      	bne.n	8009b58 <f_read+0xf4>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	755a      	strb	r2, [r3, #21]
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0c0      	b.n	8009cda <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f7fd fe56 	bl	8007818 <clust2sect>
 8009b6c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <f_read+0x11a>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2202      	movs	r2, #2
 8009b78:	755a      	strb	r2, [r3, #21]
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e0ad      	b.n	8009cda <f_read+0x276>
			sect += csect;
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	4413      	add	r3, r2
 8009b84:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	0a5b      	lsrs	r3, r3, #9
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d039      	beq.n	8009c06 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	4413      	add	r3, r2
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	8952      	ldrh	r2, [r2, #10]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d905      	bls.n	8009bac <f_read+0x148>
					cc = fs->csize - csect;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	895b      	ldrh	r3, [r3, #10]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	7858      	ldrb	r0, [r3, #1]
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bb6:	f7fd fa7d 	bl	80070b4 <disk_read>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <f_read+0x166>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	755a      	strb	r2, [r3, #21]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e087      	b.n	8009cda <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	7d1b      	ldrb	r3, [r3, #20]
 8009bce:	b25b      	sxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da14      	bge.n	8009bfe <f_read+0x19a>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a1a      	ldr	r2, [r3, #32]
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d90d      	bls.n	8009bfe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a1a      	ldr	r2, [r3, #32]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	025b      	lsls	r3, r3, #9
 8009bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bee:	18d0      	adds	r0, r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3330      	adds	r3, #48	; 0x30
 8009bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	f7fd fb43 	bl	8007284 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	025b      	lsls	r3, r3, #9
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009c04:	e050      	b.n	8009ca8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d02e      	beq.n	8009c6e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	7d1b      	ldrb	r3, [r3, #20]
 8009c14:	b25b      	sxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	da18      	bge.n	8009c4c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	7858      	ldrb	r0, [r3, #1]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6a1a      	ldr	r2, [r3, #32]
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f7fd fa63 	bl	80070f4 <disk_write>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <f_read+0x1da>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	755a      	strb	r2, [r3, #21]
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e04d      	b.n	8009cda <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	7d1b      	ldrb	r3, [r3, #20]
 8009c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	7858      	ldrb	r0, [r3, #1]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c56:	2301      	movs	r3, #1
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	f7fd fa2b 	bl	80070b4 <disk_read>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <f_read+0x20a>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	755a      	strb	r2, [r3, #21]
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e035      	b.n	8009cda <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d901      	bls.n	8009c8e <f_read+0x22a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9c:	4413      	add	r3, r2
 8009c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ca4:	f7fd faee 	bl	8007284 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	4413      	add	r3, r2
 8009cae:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	699a      	ldr	r2, [r3, #24]
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	441a      	add	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	619a      	str	r2, [r3, #24]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	441a      	add	r2, r3
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f47f af01 	bne.w	8009ada <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3738      	adds	r7, #56	; 0x38
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b08c      	sub	sp, #48	; 0x30
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	607a      	str	r2, [r7, #4]
 8009cee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f107 0210 	add.w	r2, r7, #16
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fc64 	bl	80095d0 <validate>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d107      	bne.n	8009d26 <f_write+0x44>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	7d5b      	ldrb	r3, [r3, #21]
 8009d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <f_write+0x4a>
 8009d26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d2a:	e14b      	b.n	8009fc4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	7d1b      	ldrb	r3, [r3, #20]
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <f_write+0x5a>
 8009d38:	2307      	movs	r3, #7
 8009d3a:	e143      	b.n	8009fc4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	699a      	ldr	r2, [r3, #24]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	441a      	add	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	f080 812d 	bcs.w	8009fa8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d56:	e127      	b.n	8009fa8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f040 80e3 	bne.w	8009f2c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	0a5b      	lsrs	r3, r3, #9
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	8952      	ldrh	r2, [r2, #10]
 8009d70:	3a01      	subs	r2, #1
 8009d72:	4013      	ands	r3, r2
 8009d74:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d143      	bne.n	8009e04 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10c      	bne.n	8009d9e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d11a      	bne.n	8009dc6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fd ff4f 	bl	8007c38 <create_chain>
 8009d9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d9c:	e013      	b.n	8009dc6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d007      	beq.n	8009db6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	4619      	mov	r1, r3
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7fd ffdb 	bl	8007d68 <clmt_clust>
 8009db2:	62b8      	str	r0, [r7, #40]	; 0x28
 8009db4:	e007      	b.n	8009dc6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7fd ff3a 	bl	8007c38 <create_chain>
 8009dc4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80f2 	beq.w	8009fb2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d104      	bne.n	8009dde <f_write+0xfc>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	755a      	strb	r2, [r3, #21]
 8009dda:	2302      	movs	r3, #2
 8009ddc:	e0f2      	b.n	8009fc4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d104      	bne.n	8009df0 <f_write+0x10e>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2201      	movs	r2, #1
 8009dea:	755a      	strb	r2, [r3, #21]
 8009dec:	2301      	movs	r3, #1
 8009dee:	e0e9      	b.n	8009fc4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <f_write+0x122>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	7d1b      	ldrb	r3, [r3, #20]
 8009e08:	b25b      	sxtb	r3, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	da18      	bge.n	8009e40 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	7858      	ldrb	r0, [r3, #1]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a1a      	ldr	r2, [r3, #32]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f7fd f969 	bl	80070f4 <disk_write>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d004      	beq.n	8009e32 <f_write+0x150>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	755a      	strb	r2, [r3, #21]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e0c8      	b.n	8009fc4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	7d1b      	ldrb	r3, [r3, #20]
 8009e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7fd fce5 	bl	8007818 <clust2sect>
 8009e4e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <f_write+0x17e>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	755a      	strb	r2, [r3, #21]
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e0b1      	b.n	8009fc4 <f_write+0x2e2>
			sect += csect;
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	4413      	add	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	0a5b      	lsrs	r3, r3, #9
 8009e6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d03c      	beq.n	8009eee <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	4413      	add	r3, r2
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	8952      	ldrh	r2, [r2, #10]
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d905      	bls.n	8009e8e <f_write+0x1ac>
					cc = fs->csize - csect;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	895b      	ldrh	r3, [r3, #10]
 8009e86:	461a      	mov	r2, r3
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	7858      	ldrb	r0, [r3, #1]
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	69f9      	ldr	r1, [r7, #28]
 8009e98:	f7fd f92c 	bl	80070f4 <disk_write>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d004      	beq.n	8009eac <f_write+0x1ca>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	755a      	strb	r2, [r3, #21]
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e08b      	b.n	8009fc4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1a      	ldr	r2, [r3, #32]
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	6a3a      	ldr	r2, [r7, #32]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d915      	bls.n	8009ee6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	025b      	lsls	r3, r3, #9
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f7fd f9d6 	bl	8007284 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	7d1b      	ldrb	r3, [r3, #20]
 8009edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	025b      	lsls	r3, r3, #9
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009eec:	e03f      	b.n	8009f6e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d016      	beq.n	8009f26 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	699a      	ldr	r2, [r3, #24]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d210      	bcs.n	8009f26 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	7858      	ldrb	r0, [r3, #1]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f0e:	2301      	movs	r3, #1
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	f7fd f8cf 	bl	80070b4 <disk_read>
 8009f16:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	755a      	strb	r2, [r3, #21]
 8009f22:	2301      	movs	r3, #1
 8009f24:	e04e      	b.n	8009fc4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f34:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d901      	bls.n	8009f46 <f_write+0x264>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	4413      	add	r3, r2
 8009f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f58:	69f9      	ldr	r1, [r7, #28]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fd f992 	bl	8007284 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	7d1b      	ldrb	r3, [r3, #20]
 8009f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	4413      	add	r3, r2
 8009f74:	61fb      	str	r3, [r7, #28]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	699a      	ldr	r2, [r3, #24]
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	441a      	add	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	619a      	str	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	bf38      	it	cc
 8009f8e:	461a      	movcc	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	60da      	str	r2, [r3, #12]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	441a      	add	r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f47f aed4 	bne.w	8009d58 <f_write+0x76>
 8009fb0:	e000      	b.n	8009fb4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fb2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7d1b      	ldrb	r3, [r3, #20]
 8009fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3730      	adds	r7, #48	; 0x30
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f107 0208 	add.w	r2, r7, #8
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff faf7 	bl	80095d0 <validate>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d168      	bne.n	800a0be <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7d1b      	ldrb	r3, [r3, #20]
 8009ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d062      	beq.n	800a0be <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7d1b      	ldrb	r3, [r3, #20]
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da15      	bge.n	800a02e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	7858      	ldrb	r0, [r3, #1]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	2301      	movs	r3, #1
 800a012:	f7fd f86f 	bl	80070f4 <disk_write>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <f_sync+0x54>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e04f      	b.n	800a0c0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a02e:	f7fd f89f 	bl	8007170 <get_fattime>
 800a032:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f7fd fb4f 	bl	80076e0 <move_window>
 800a042:	4603      	mov	r3, r0
 800a044:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d138      	bne.n	800a0be <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a050:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	330b      	adds	r3, #11
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	330b      	adds	r3, #11
 800a05c:	f042 0220 	orr.w	r2, r2, #32
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	461a      	mov	r2, r3
 800a06e:	68f9      	ldr	r1, [r7, #12]
 800a070:	f7fe f854 	bl	800811c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f103 021c 	add.w	r2, r3, #28
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fd f8d3 	bl	800722c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3316      	adds	r3, #22
 800a08a:	6939      	ldr	r1, [r7, #16]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd f8cd 	bl	800722c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3312      	adds	r3, #18
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd f8ac 	bl	80071f6 <st_word>
					fs->wflag = 1;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd fb48 	bl	800773c <sync_fs>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7d1b      	ldrb	r3, [r3, #20]
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ff7b 	bl	8009fcc <f_sync>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d118      	bne.n	800a112 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f107 0208 	add.w	r2, r7, #8
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff fa71 	bl	80095d0 <validate>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10c      	bne.n	800a112 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fd fa4b 	bl	8007598 <dec_lock>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b090      	sub	sp, #64	; 0x40
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f107 0208 	add.w	r2, r7, #8
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff fa4e 	bl	80095d0 <validate>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a13a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d103      	bne.n	800a14a <f_lseek+0x2e>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	7d5b      	ldrb	r3, [r3, #21]
 800a146:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a14a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <f_lseek+0x3c>
 800a152:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a156:	e1e6      	b.n	800a526 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 80d1 	beq.w	800a304 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d15a      	bne.n	800a220 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	1d1a      	adds	r2, r3, #4
 800a174:	627a      	str	r2, [r7, #36]	; 0x24
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	617b      	str	r3, [r7, #20]
 800a17a:	2302      	movs	r3, #2
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2b00      	cmp	r3, #0
 800a188:	d03a      	beq.n	800a200 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	2300      	movs	r3, #0
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	3302      	adds	r3, #2
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	3301      	adds	r3, #1
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fd fb55 	bl	8007856 <get_fat>
 800a1ac:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d804      	bhi.n	800a1be <f_lseek+0xa2>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	755a      	strb	r2, [r3, #21]
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e1b3      	b.n	800a526 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d104      	bne.n	800a1d0 <f_lseek+0xb4>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	755a      	strb	r2, [r3, #21]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e1aa      	b.n	800a526 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d0de      	beq.n	800a198 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d809      	bhi.n	800a1f6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	627a      	str	r2, [r7, #36]	; 0x24
 800a1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	627a      	str	r2, [r7, #36]	; 0x24
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d3c4      	bcc.n	800a18a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a206:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d803      	bhi.n	800a218 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	e184      	b.n	800a522 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a218:	2311      	movs	r3, #17
 800a21a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a21e:	e180      	b.n	800a522 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d902      	bls.n	800a230 <f_lseek+0x114>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 8172 	beq.w	800a522 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	3b01      	subs	r3, #1
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7fd fd8f 	bl	8007d68 <clmt_clust>
 800a24a:	4602      	mov	r2, r0
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	4619      	mov	r1, r3
 800a258:	4610      	mov	r0, r2
 800a25a:	f7fd fadd 	bl	8007818 <clust2sect>
 800a25e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d104      	bne.n	800a270 <f_lseek+0x154>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	755a      	strb	r2, [r3, #21]
 800a26c:	2302      	movs	r3, #2
 800a26e:	e15a      	b.n	800a526 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	3b01      	subs	r3, #1
 800a274:	0a5b      	lsrs	r3, r3, #9
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	8952      	ldrh	r2, [r2, #10]
 800a27a:	3a01      	subs	r2, #1
 800a27c:	4013      	ands	r3, r2
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	4413      	add	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8148 	beq.w	800a522 <f_lseek+0x406>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	429a      	cmp	r2, r3
 800a29a:	f000 8142 	beq.w	800a522 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	7d1b      	ldrb	r3, [r3, #20]
 800a2a2:	b25b      	sxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	da18      	bge.n	800a2da <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	7858      	ldrb	r0, [r3, #1]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1a      	ldr	r2, [r3, #32]
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f7fc ff1c 	bl	80070f4 <disk_write>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <f_lseek+0x1b0>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	755a      	strb	r2, [r3, #21]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e12c      	b.n	800a526 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7d1b      	ldrb	r3, [r3, #20]
 800a2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	7858      	ldrb	r0, [r3, #1]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	f7fc fee4 	bl	80070b4 <disk_read>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <f_lseek+0x1e0>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	755a      	strb	r2, [r3, #21]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e114      	b.n	800a526 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	621a      	str	r2, [r3, #32]
 800a302:	e10e      	b.n	800a522 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d908      	bls.n	800a320 <f_lseek+0x204>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7d1b      	ldrb	r3, [r3, #20]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d102      	bne.n	800a320 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a32e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 80a7 	beq.w	800a486 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	895b      	ldrh	r3, [r3, #10]
 800a33c:	025b      	lsls	r3, r3, #9
 800a33e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01b      	beq.n	800a37e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	1e5a      	subs	r2, r3, #1
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	1e59      	subs	r1, r3, #1
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d30f      	bcc.n	800a37e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	1e5a      	subs	r2, r3, #1
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	425b      	negs	r3, r3
 800a366:	401a      	ands	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a37c:	e022      	b.n	800a3c4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d119      	bne.n	800a3be <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fd fc52 	bl	8007c38 <create_chain>
 800a394:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d104      	bne.n	800a3a6 <f_lseek+0x28a>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	755a      	strb	r2, [r3, #21]
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e0bf      	b.n	800a526 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ac:	d104      	bne.n	800a3b8 <f_lseek+0x29c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	755a      	strb	r2, [r3, #21]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e0b6      	b.n	800a526 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d05d      	beq.n	800a486 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a3ca:	e03a      	b.n	800a442 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699a      	ldr	r2, [r3, #24]
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	441a      	add	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	f003 0302 	and.w	r3, r3, #2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fd fc21 	bl	8007c38 <create_chain>
 800a3f6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d108      	bne.n	800a410 <f_lseek+0x2f4>
							ofs = 0; break;
 800a3fe:	2300      	movs	r3, #0
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	e022      	b.n	800a44a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fa24 	bl	8007856 <get_fat>
 800a40e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d104      	bne.n	800a422 <f_lseek+0x306>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	755a      	strb	r2, [r3, #21]
 800a41e:	2301      	movs	r3, #1
 800a420:	e081      	b.n	800a526 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2b01      	cmp	r3, #1
 800a426:	d904      	bls.n	800a432 <f_lseek+0x316>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42e:	429a      	cmp	r2, r3
 800a430:	d304      	bcc.n	800a43c <f_lseek+0x320>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2202      	movs	r2, #2
 800a436:	755a      	strb	r2, [r3, #21]
 800a438:	2302      	movs	r3, #2
 800a43a:	e074      	b.n	800a526 <f_lseek+0x40a>
					fp->clust = clst;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a440:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	429a      	cmp	r2, r3
 800a448:	d8c0      	bhi.n	800a3cc <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699a      	ldr	r2, [r3, #24]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	441a      	add	r2, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d012      	beq.n	800a486 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd f9d7 	bl	8007818 <clust2sect>
 800a46a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d104      	bne.n	800a47c <f_lseek+0x360>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2202      	movs	r2, #2
 800a476:	755a      	strb	r2, [r3, #21]
 800a478:	2302      	movs	r3, #2
 800a47a:	e054      	b.n	800a526 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	0a5b      	lsrs	r3, r3, #9
 800a480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a482:	4413      	add	r3, r2
 800a484:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d90a      	bls.n	800a4a8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	7d1b      	ldrb	r3, [r3, #20]
 800a49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d036      	beq.n	800a522 <f_lseek+0x406>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d031      	beq.n	800a522 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7d1b      	ldrb	r3, [r3, #20]
 800a4c2:	b25b      	sxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da18      	bge.n	800a4fa <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	7858      	ldrb	r0, [r3, #1]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1a      	ldr	r2, [r3, #32]
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	f7fc fe0c 	bl	80070f4 <disk_write>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d004      	beq.n	800a4ec <f_lseek+0x3d0>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	755a      	strb	r2, [r3, #21]
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e01c      	b.n	800a526 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	7d1b      	ldrb	r3, [r3, #20]
 800a4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	7858      	ldrb	r0, [r3, #1]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a504:	2301      	movs	r3, #1
 800a506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a508:	f7fc fdd4 	bl	80070b4 <disk_read>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <f_lseek+0x400>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	755a      	strb	r2, [r3, #21]
 800a518:	2301      	movs	r3, #1
 800a51a:	e004      	b.n	800a526 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a520:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a522:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a526:	4618      	mov	r0, r3
 800a528:	3740      	adds	r7, #64	; 0x40
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b086      	sub	sp, #24
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <f_opendir+0x14>
 800a53e:	2309      	movs	r3, #9
 800a540:	e074      	b.n	800a62c <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a546:	f107 0108 	add.w	r1, r7, #8
 800a54a:	463b      	mov	r3, r7
 800a54c:	2200      	movs	r2, #0
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fe fdf2 	bl	8009138 <find_volume>
 800a554:	4603      	mov	r3, r0
 800a556:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d15f      	bne.n	800a61e <f_opendir+0xf0>
		obj->fs = fs;
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a564:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a568:	f000 fc7f 	bl	800ae6a <ff_memalloc>
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <f_opendir+0x4a>
 800a574:	2311      	movs	r3, #17
 800a576:	e059      	b.n	800a62c <f_opendir+0xfe>
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fe fccc 	bl	8008f20 <follow_path>
 800a588:	4603      	mov	r3, r0
 800a58a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d13d      	bne.n	800a60e <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a598:	b25b      	sxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	db12      	blt.n	800a5c4 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	799b      	ldrb	r3, [r3, #6]
 800a5a2:	f003 0310 	and.w	r3, r3, #16
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fd fd93 	bl	80080de <ld_clust>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	609a      	str	r2, [r3, #8]
 800a5be:	e001      	b.n	800a5c4 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a5c0:	2305      	movs	r3, #5
 800a5c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d121      	bne.n	800a60e <f_opendir+0xe0>
				obj->id = fs->id;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	88da      	ldrh	r2, [r3, #6]
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7fd fbfb 	bl	8007dd0 <dir_sdi>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d114      	bne.n	800a60e <f_opendir+0xe0>
					if (obj->sclust) {
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00d      	beq.n	800a608 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7fc ff44 	bl	800747c <inc_lock>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d105      	bne.n	800a60e <f_opendir+0xe0>
 800a602:	2312      	movs	r3, #18
 800a604:	75fb      	strb	r3, [r7, #23]
 800a606:	e002      	b.n	800a60e <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2200      	movs	r2, #0
 800a60c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 fc37 	bl	800ae82 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b04      	cmp	r3, #4
 800a618:	d101      	bne.n	800a61e <f_opendir+0xf0>
 800a61a:	2305      	movs	r3, #5
 800a61c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <f_opendir+0xfc>
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f107 0208 	add.w	r2, r7, #8
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe ffc3 	bl	80095d0 <validate>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d110      	bne.n	800a676 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d006      	beq.n	800a66a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	4618      	mov	r0, r3
 800a662:	f7fc ff99 	bl	8007598 <dec_lock>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f107 020c 	add.w	r2, r7, #12
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe ff9c 	bl	80095d0 <validate>
 800a698:	4603      	mov	r3, r0
 800a69a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d136      	bne.n	800a710 <f_readdir+0x90>
		if (!fno) {
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7fd fb90 	bl	8007dd0 <dir_sdi>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	75fb      	strb	r3, [r7, #23]
 800a6b4:	e02c      	b.n	800a710 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800a6b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a6ba:	f000 fbd6 	bl	800ae6a <ff_memalloc>
 800a6be:	6138      	str	r0, [r7, #16]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <f_readdir+0x4a>
 800a6c6:	2311      	movs	r3, #17
 800a6c8:	e023      	b.n	800a712 <f_readdir+0x92>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7fd ff2e 	bl	8008534 <dir_read>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d101      	bne.n	800a6e6 <f_readdir+0x66>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10e      	bne.n	800a70a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7fe f980 	bl	80089f4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7fd fbe5 	bl	8007ec6 <dir_next>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b04      	cmp	r3, #4
 800a704:	d101      	bne.n	800a70a <f_readdir+0x8a>
 800a706:	2300      	movs	r3, #0
 800a708:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800a70a:	6938      	ldr	r0, [r7, #16]
 800a70c:	f000 fbb9 	bl	800ae82 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b092      	sub	sp, #72	; 0x48
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a726:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a72a:	f107 030c 	add.w	r3, r7, #12
 800a72e:	2200      	movs	r2, #0
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe fd01 	bl	8009138 <find_volume>
 800a736:	4603      	mov	r3, r0
 800a738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a73c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a740:	2b00      	cmp	r3, #0
 800a742:	f040 8099 	bne.w	800a878 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	695a      	ldr	r2, [r3, #20]
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	3b02      	subs	r3, #2
 800a756:	429a      	cmp	r2, r3
 800a758:	d804      	bhi.n	800a764 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	695a      	ldr	r2, [r3, #20]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	e089      	b.n	800a878 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d128      	bne.n	800a7c2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a770:	2302      	movs	r3, #2
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a778:	f107 0314 	add.w	r3, r7, #20
 800a77c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd f869 	bl	8007856 <get_fat>
 800a784:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78c:	d103      	bne.n	800a796 <f_getfree+0x7c>
 800a78e:	2301      	movs	r3, #1
 800a790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a794:	e063      	b.n	800a85e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d103      	bne.n	800a7a4 <f_getfree+0x8a>
 800a79c:	2302      	movs	r3, #2
 800a79e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a7a2:	e05c      	b.n	800a85e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d102      	bne.n	800a7b0 <f_getfree+0x96>
 800a7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d3db      	bcc.n	800a778 <f_getfree+0x5e>
 800a7c0:	e04d      	b.n	800a85e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d113      	bne.n	800a804 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f7fc ff7b 	bl	80076e0 <move_window>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a7f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d131      	bne.n	800a85c <f_getfree+0x142>
							p = fs->win;
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	3334      	adds	r3, #52	; 0x34
 800a7fc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a7fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a802:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d10f      	bne.n	800a82c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f7fc fcb7 	bl	8007180 <ld_word>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <f_getfree+0x104>
 800a818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a81a:	3301      	adds	r3, #1
 800a81c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	3302      	adds	r3, #2
 800a822:	633b      	str	r3, [r7, #48]	; 0x30
 800a824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a826:	3b02      	subs	r3, #2
 800a828:	637b      	str	r3, [r7, #52]	; 0x34
 800a82a:	e010      	b.n	800a84e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a82c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82e:	f7fc fcbf 	bl	80071b0 <ld_dword>
 800a832:	4603      	mov	r3, r0
 800a834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <f_getfree+0x128>
 800a83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a83e:	3301      	adds	r3, #1
 800a840:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	3304      	adds	r3, #4
 800a846:	633b      	str	r3, [r7, #48]	; 0x30
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	3b04      	subs	r3, #4
 800a84c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a850:	3b01      	subs	r3, #1
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1bd      	bne.n	800a7d6 <f_getfree+0xbc>
 800a85a:	e000      	b.n	800a85e <f_getfree+0x144>
							if (res != FR_OK) break;
 800a85c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a862:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a868:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	791a      	ldrb	r2, [r3, #4]
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	f042 0201 	orr.w	r2, r2, #1
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3748      	adds	r7, #72	; 0x48
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	2b0a      	cmp	r3, #10
 800a894:	d103      	bne.n	800a89e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a896:	210d      	movs	r1, #13
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fff3 	bl	800a884 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	db25      	blt.n	800a8f6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	60fa      	str	r2, [r7, #12]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b3c      	cmp	r3, #60	; 0x3c
 800a8bc:	dd12      	ble.n	800a8e4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f103 010c 	add.w	r1, r3, #12
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	f7ff fa08 	bl	8009ce2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d101      	bne.n	800a8de <putc_bfd+0x5a>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e001      	b.n	800a8e2 <putc_bfd+0x5e>
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	e000      	b.n	800a8f8 <putc_bfd+0x74>
	if (i < 0) return;
 800a8f6:	bf00      	nop
}
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	db17      	blt.n	800a93e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f103 010c 	add.w	r1, r3, #12
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	461a      	mov	r2, r3
 800a91e:	f107 030c 	add.w	r3, r7, #12
 800a922:	f7ff f9de 	bl	8009ce2 <f_write>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d108      	bne.n	800a93e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	461a      	mov	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	429a      	cmp	r2, r3
 800a936:	d102      	bne.n	800a93e <putc_flush+0x40>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	e001      	b.n	800a942 <putc_flush+0x44>
	return EOF;
 800a93e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	605a      	str	r2, [r3, #4]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	609a      	str	r2, [r3, #8]
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a974:	b40e      	push	{r1, r2, r3}
 800a976:	b580      	push	{r7, lr}
 800a978:	b0a7      	sub	sp, #156	; 0x9c
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a97e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff ffe0 	bl	800a94a <putc_init>

	va_start(arp, fmt);
 800a98a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a98e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a9a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 81f4 	beq.w	800ad92 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a9aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9ae:	2b25      	cmp	r3, #37	; 0x25
 800a9b0:	d008      	beq.n	800a9c4 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a9b2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a9b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff ff61 	bl	800a884 <putc_bfd>
			continue;
 800a9c2:	e1e5      	b.n	800ad90 <f_printf+0x41c>
		}
		w = f = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a9d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a9e0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a9e4:	2b30      	cmp	r3, #48	; 0x30
 800a9e6:	d10b      	bne.n	800aa00 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a9ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a9fe:	e024      	b.n	800aa4a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800aa00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa04:	2b2d      	cmp	r3, #45	; 0x2d
 800aa06:	d120      	bne.n	800aa4a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800aa08:	2302      	movs	r3, #2
 800aa0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800aa1e:	e014      	b.n	800aa4a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800aa20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa32:	4413      	add	r3, r2
 800aa34:	3b30      	subs	r3, #48	; 0x30
 800aa36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800aa3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800aa4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa4e:	2b2f      	cmp	r3, #47	; 0x2f
 800aa50:	d903      	bls.n	800aa5a <f_printf+0xe6>
 800aa52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa56:	2b39      	cmp	r3, #57	; 0x39
 800aa58:	d9e2      	bls.n	800aa20 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800aa5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa5e:	2b6c      	cmp	r3, #108	; 0x6c
 800aa60:	d003      	beq.n	800aa6a <f_printf+0xf6>
 800aa62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa66:	2b4c      	cmp	r3, #76	; 0x4c
 800aa68:	d10d      	bne.n	800aa86 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800aa6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aa6e:	f043 0304 	orr.w	r3, r3, #4
 800aa72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800aa86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 8183 	beq.w	800ad96 <f_printf+0x422>
		d = c;
 800aa90:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa94:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800aa98:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aa9c:	2b60      	cmp	r3, #96	; 0x60
 800aa9e:	d908      	bls.n	800aab2 <f_printf+0x13e>
 800aaa0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aaa4:	2b7a      	cmp	r3, #122	; 0x7a
 800aaa6:	d804      	bhi.n	800aab2 <f_printf+0x13e>
 800aaa8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aaac:	3b20      	subs	r3, #32
 800aaae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800aab2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aab6:	3b42      	subs	r3, #66	; 0x42
 800aab8:	2b16      	cmp	r3, #22
 800aaba:	f200 8098 	bhi.w	800abee <f_printf+0x27a>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <f_printf+0x150>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800abcf 	.word	0x0800abcf
 800aac8:	0800abb7 	.word	0x0800abb7
 800aacc:	0800abdf 	.word	0x0800abdf
 800aad0:	0800abef 	.word	0x0800abef
 800aad4:	0800abef 	.word	0x0800abef
 800aad8:	0800abef 	.word	0x0800abef
 800aadc:	0800abef 	.word	0x0800abef
 800aae0:	0800abef 	.word	0x0800abef
 800aae4:	0800abef 	.word	0x0800abef
 800aae8:	0800abef 	.word	0x0800abef
 800aaec:	0800abef 	.word	0x0800abef
 800aaf0:	0800abef 	.word	0x0800abef
 800aaf4:	0800abef 	.word	0x0800abef
 800aaf8:	0800abd7 	.word	0x0800abd7
 800aafc:	0800abef 	.word	0x0800abef
 800ab00:	0800abef 	.word	0x0800abef
 800ab04:	0800abef 	.word	0x0800abef
 800ab08:	0800ab21 	.word	0x0800ab21
 800ab0c:	0800abef 	.word	0x0800abef
 800ab10:	0800abdf 	.word	0x0800abdf
 800ab14:	0800abef 	.word	0x0800abef
 800ab18:	0800abef 	.word	0x0800abef
 800ab1c:	0800abe7 	.word	0x0800abe7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ab20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	67ba      	str	r2, [r7, #120]	; 0x78
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab30:	e004      	b.n	800ab3c <f_printf+0x1c8>
 800ab32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab36:	3301      	adds	r3, #1
 800ab38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab42:	4413      	add	r3, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f3      	bne.n	800ab32 <f_printf+0x1be>
			if (!(f & 2)) {
 800ab4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d11a      	bne.n	800ab8c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800ab56:	e005      	b.n	800ab64 <f_printf+0x1f0>
 800ab58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab5c:	2120      	movs	r1, #32
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fe90 	bl	800a884 <putc_bfd>
 800ab64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d8f0      	bhi.n	800ab58 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800ab76:	e009      	b.n	800ab8c <f_printf+0x218>
 800ab78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab7e:	781a      	ldrb	r2, [r3, #0]
 800ab80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab84:	4611      	mov	r1, r2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fe7c 	bl	800a884 <putc_bfd>
 800ab8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1f1      	bne.n	800ab78 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ab94:	e005      	b.n	800aba2 <f_printf+0x22e>
 800ab96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab9a:	2120      	movs	r1, #32
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff fe71 	bl	800a884 <putc_bfd>
 800aba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800abac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d8f0      	bhi.n	800ab96 <f_printf+0x222>
			continue;
 800abb4:	e0ec      	b.n	800ad90 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800abb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb8:	1d1a      	adds	r2, r3, #4
 800abba:	67ba      	str	r2, [r7, #120]	; 0x78
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fe5c 	bl	800a884 <putc_bfd>
 800abcc:	e0e0      	b.n	800ad90 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800abce:	2302      	movs	r3, #2
 800abd0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800abd4:	e014      	b.n	800ac00 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800abd6:	2308      	movs	r3, #8
 800abd8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800abdc:	e010      	b.n	800ac00 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800abde:	230a      	movs	r3, #10
 800abe0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800abe4:	e00c      	b.n	800ac00 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800abe6:	2310      	movs	r3, #16
 800abe8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800abec:	e008      	b.n	800ac00 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800abee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800abf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fe43 	bl	800a884 <putc_bfd>
 800abfe:	e0c7      	b.n	800ad90 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ac00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac04:	f003 0304 	and.w	r3, r3, #4
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d004      	beq.n	800ac16 <f_printf+0x2a2>
 800ac0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac0e:	1d1a      	adds	r2, r3, #4
 800ac10:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	e00c      	b.n	800ac30 <f_printf+0x2bc>
 800ac16:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac1a:	2b44      	cmp	r3, #68	; 0x44
 800ac1c:	d104      	bne.n	800ac28 <f_printf+0x2b4>
 800ac1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac20:	1d1a      	adds	r2, r3, #4
 800ac22:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	e003      	b.n	800ac30 <f_printf+0x2bc>
 800ac28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ac34:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac38:	2b44      	cmp	r3, #68	; 0x44
 800ac3a:	d10e      	bne.n	800ac5a <f_printf+0x2e6>
 800ac3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	da0a      	bge.n	800ac5a <f_printf+0x2e6>
			v = 0 - v;
 800ac44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac48:	425b      	negs	r3, r3
 800ac4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ac4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac52:	f043 0308 	orr.w	r3, r3, #8
 800ac56:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ac60:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ac64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac68:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac6c:	fb02 f201 	mul.w	r2, r2, r1
 800ac70:	1a9b      	subs	r3, r3, r2
 800ac72:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800ac76:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ac7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ac7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ac86:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d90b      	bls.n	800aca6 <f_printf+0x332>
 800ac8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac92:	2b78      	cmp	r3, #120	; 0x78
 800ac94:	d101      	bne.n	800ac9a <f_printf+0x326>
 800ac96:	2227      	movs	r2, #39	; 0x27
 800ac98:	e000      	b.n	800ac9c <f_printf+0x328>
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aca0:	4413      	add	r3, r2
 800aca2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800aca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800acb0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800acb4:	3230      	adds	r2, #48	; 0x30
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800acbc:	440b      	add	r3, r1
 800acbe:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800acc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d003      	beq.n	800acd2 <f_printf+0x35e>
 800acca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acce:	2b1f      	cmp	r3, #31
 800acd0:	d9c6      	bls.n	800ac60 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800acd2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <f_printf+0x380>
 800acde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ace8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800acec:	4413      	add	r3, r2
 800acee:	222d      	movs	r2, #45	; 0x2d
 800acf0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800acf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800acf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <f_printf+0x398>
 800ad08:	2330      	movs	r3, #48	; 0x30
 800ad0a:	e000      	b.n	800ad0e <f_printf+0x39a>
 800ad0c:	2320      	movs	r3, #32
 800ad0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ad12:	e007      	b.n	800ad24 <f_printf+0x3b0>
 800ad14:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff fdb0 	bl	800a884 <putc_bfd>
 800ad24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d108      	bne.n	800ad42 <f_printf+0x3ce>
 800ad30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d8e8      	bhi.n	800ad14 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800ad42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad46:	3b01      	subs	r3, #1
 800ad48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad4c:	f107 020c 	add.w	r2, r7, #12
 800ad50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad54:	4413      	add	r3, r2
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fd90 	bl	800a884 <putc_bfd>
		} while (i);
 800ad64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1ea      	bne.n	800ad42 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800ad6c:	e007      	b.n	800ad7e <f_printf+0x40a>
 800ad6e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff fd83 	bl	800a884 <putc_bfd>
 800ad7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d8ee      	bhi.n	800ad6e <f_printf+0x3fa>
		c = *fmt++;
 800ad90:	e5fe      	b.n	800a990 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ad92:	bf00      	nop
 800ad94:	e000      	b.n	800ad98 <f_printf+0x424>
		if (!c) break;
 800ad96:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ad98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff fdae 	bl	800a8fe <putc_flush>
 800ada2:	4603      	mov	r3, r0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	379c      	adds	r7, #156	; 0x9c
 800ada8:	46bd      	mov	sp, r7
 800adaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adae:	b003      	add	sp, #12
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	4613      	mov	r3, r2
 800adc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adc2:	2301      	movs	r3, #1
 800adc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800adca:	4b1f      	ldr	r3, [pc, #124]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800adcc:	7b9b      	ldrb	r3, [r3, #14]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b01      	cmp	r3, #1
 800add2:	d831      	bhi.n	800ae38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800add4:	4b1c      	ldr	r3, [pc, #112]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800add6:	7b9b      	ldrb	r3, [r3, #14]
 800add8:	b2db      	uxtb	r3, r3
 800adda:	461a      	mov	r2, r3
 800addc:	4b1a      	ldr	r3, [pc, #104]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800adde:	2100      	movs	r1, #0
 800ade0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ade2:	4b19      	ldr	r3, [pc, #100]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800ade4:	7b9b      	ldrb	r3, [r3, #14]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	4a17      	ldr	r2, [pc, #92]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800adf2:	4b15      	ldr	r3, [pc, #84]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800adf4:	7b9b      	ldrb	r3, [r3, #14]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	461a      	mov	r2, r3
 800adfa:	4b13      	ldr	r3, [pc, #76]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800adfc:	4413      	add	r3, r2
 800adfe:	79fa      	ldrb	r2, [r7, #7]
 800ae00:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800ae02:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800ae04:	7b9b      	ldrb	r3, [r3, #14]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	b2d1      	uxtb	r1, r2
 800ae0c:	4a0e      	ldr	r2, [pc, #56]	; (800ae48 <FATFS_LinkDriverEx+0x94>)
 800ae0e:	7391      	strb	r1, [r2, #14]
 800ae10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae12:	7dbb      	ldrb	r3, [r7, #22]
 800ae14:	3330      	adds	r3, #48	; 0x30
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	223a      	movs	r2, #58	; 0x3a
 800ae22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	3302      	adds	r3, #2
 800ae28:	222f      	movs	r2, #47	; 0x2f
 800ae2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3303      	adds	r3, #3
 800ae30:	2200      	movs	r2, #0
 800ae32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	2000a488 	.word	0x2000a488

0800ae4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae56:	2200      	movs	r2, #0
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff ffaa 	bl	800adb4 <FATFS_LinkDriverEx>
 800ae60:	4603      	mov	r3, r0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f006 fef2 	bl	8011c5c <malloc>
 800ae78:	4603      	mov	r3, r0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f006 feee 	bl	8011c6c <free>
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	6039      	str	r1, [r7, #0]
 800aea2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	2b7f      	cmp	r3, #127	; 0x7f
 800aea8:	d802      	bhi.n	800aeb0 <ff_convert+0x18>
		c = chr;
 800aeaa:	88fb      	ldrh	r3, [r7, #6]
 800aeac:	81fb      	strh	r3, [r7, #14]
 800aeae:	e025      	b.n	800aefc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aeb6:	88fb      	ldrh	r3, [r7, #6]
 800aeb8:	2bff      	cmp	r3, #255	; 0xff
 800aeba:	d805      	bhi.n	800aec8 <ff_convert+0x30>
 800aebc:	88fb      	ldrh	r3, [r7, #6]
 800aebe:	3b80      	subs	r3, #128	; 0x80
 800aec0:	4a12      	ldr	r2, [pc, #72]	; (800af0c <ff_convert+0x74>)
 800aec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec6:	e000      	b.n	800aeca <ff_convert+0x32>
 800aec8:	2300      	movs	r3, #0
 800aeca:	81fb      	strh	r3, [r7, #14]
 800aecc:	e016      	b.n	800aefc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aece:	2300      	movs	r3, #0
 800aed0:	81fb      	strh	r3, [r7, #14]
 800aed2:	e009      	b.n	800aee8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800aed4:	89fb      	ldrh	r3, [r7, #14]
 800aed6:	4a0d      	ldr	r2, [pc, #52]	; (800af0c <ff_convert+0x74>)
 800aed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d006      	beq.n	800aef0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aee2:	89fb      	ldrh	r3, [r7, #14]
 800aee4:	3301      	adds	r3, #1
 800aee6:	81fb      	strh	r3, [r7, #14]
 800aee8:	89fb      	ldrh	r3, [r7, #14]
 800aeea:	2b7f      	cmp	r3, #127	; 0x7f
 800aeec:	d9f2      	bls.n	800aed4 <ff_convert+0x3c>
 800aeee:	e000      	b.n	800aef2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aef0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aef2:	89fb      	ldrh	r3, [r7, #14]
 800aef4:	3380      	adds	r3, #128	; 0x80
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aefc:	89fb      	ldrh	r3, [r7, #14]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	080209a4 	.word	0x080209a4

0800af10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af20:	d201      	bcs.n	800af26 <ff_wtoupper+0x16>
 800af22:	4b3e      	ldr	r3, [pc, #248]	; (800b01c <ff_wtoupper+0x10c>)
 800af24:	e000      	b.n	800af28 <ff_wtoupper+0x18>
 800af26:	4b3e      	ldr	r3, [pc, #248]	; (800b020 <ff_wtoupper+0x110>)
 800af28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	1c9a      	adds	r2, r3, #2
 800af2e:	617a      	str	r2, [r7, #20]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800af34:	8a7b      	ldrh	r3, [r7, #18]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d068      	beq.n	800b00c <ff_wtoupper+0xfc>
 800af3a:	88fa      	ldrh	r2, [r7, #6]
 800af3c:	8a7b      	ldrh	r3, [r7, #18]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d364      	bcc.n	800b00c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	1c9a      	adds	r2, r3, #2
 800af46:	617a      	str	r2, [r7, #20]
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	823b      	strh	r3, [r7, #16]
 800af4c:	8a3b      	ldrh	r3, [r7, #16]
 800af4e:	0a1b      	lsrs	r3, r3, #8
 800af50:	81fb      	strh	r3, [r7, #14]
 800af52:	8a3b      	ldrh	r3, [r7, #16]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	8a79      	ldrh	r1, [r7, #18]
 800af5c:	8a3b      	ldrh	r3, [r7, #16]
 800af5e:	440b      	add	r3, r1
 800af60:	429a      	cmp	r2, r3
 800af62:	da49      	bge.n	800aff8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800af64:	89fb      	ldrh	r3, [r7, #14]
 800af66:	2b08      	cmp	r3, #8
 800af68:	d84f      	bhi.n	800b00a <ff_wtoupper+0xfa>
 800af6a:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <ff_wtoupper+0x60>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af95 	.word	0x0800af95
 800af74:	0800afa7 	.word	0x0800afa7
 800af78:	0800afbd 	.word	0x0800afbd
 800af7c:	0800afc5 	.word	0x0800afc5
 800af80:	0800afcd 	.word	0x0800afcd
 800af84:	0800afd5 	.word	0x0800afd5
 800af88:	0800afdd 	.word	0x0800afdd
 800af8c:	0800afe5 	.word	0x0800afe5
 800af90:	0800afed 	.word	0x0800afed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800af94:	88fa      	ldrh	r2, [r7, #6]
 800af96:	8a7b      	ldrh	r3, [r7, #18]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	80fb      	strh	r3, [r7, #6]
 800afa4:	e027      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800afa6:	88fa      	ldrh	r2, [r7, #6]
 800afa8:	8a7b      	ldrh	r3, [r7, #18]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	b29b      	uxth	r3, r3
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	88fa      	ldrh	r2, [r7, #6]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	80fb      	strh	r3, [r7, #6]
 800afba:	e01c      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	3b10      	subs	r3, #16
 800afc0:	80fb      	strh	r3, [r7, #6]
 800afc2:	e018      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800afc4:	88fb      	ldrh	r3, [r7, #6]
 800afc6:	3b20      	subs	r3, #32
 800afc8:	80fb      	strh	r3, [r7, #6]
 800afca:	e014      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800afcc:	88fb      	ldrh	r3, [r7, #6]
 800afce:	3b30      	subs	r3, #48	; 0x30
 800afd0:	80fb      	strh	r3, [r7, #6]
 800afd2:	e010      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800afd4:	88fb      	ldrh	r3, [r7, #6]
 800afd6:	3b1a      	subs	r3, #26
 800afd8:	80fb      	strh	r3, [r7, #6]
 800afda:	e00c      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	3308      	adds	r3, #8
 800afe0:	80fb      	strh	r3, [r7, #6]
 800afe2:	e008      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800afe4:	88fb      	ldrh	r3, [r7, #6]
 800afe6:	3b50      	subs	r3, #80	; 0x50
 800afe8:	80fb      	strh	r3, [r7, #6]
 800afea:	e004      	b.n	800aff6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800afec:	88fb      	ldrh	r3, [r7, #6]
 800afee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800aff2:	80fb      	strh	r3, [r7, #6]
 800aff4:	bf00      	nop
			}
			break;
 800aff6:	e008      	b.n	800b00a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aff8:	89fb      	ldrh	r3, [r7, #14]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d195      	bne.n	800af2a <ff_wtoupper+0x1a>
 800affe:	8a3b      	ldrh	r3, [r7, #16]
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4413      	add	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b008:	e78f      	b.n	800af2a <ff_wtoupper+0x1a>
			break;
 800b00a:	bf00      	nop
	}

	return chr;
 800b00c:	88fb      	ldrh	r3, [r7, #6]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	08020aa4 	.word	0x08020aa4
 800b020:	08020c98 	.word	0x08020c98

0800b024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b028:	4b0e      	ldr	r3, [pc, #56]	; (800b064 <HAL_Init+0x40>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a0d      	ldr	r2, [pc, #52]	; (800b064 <HAL_Init+0x40>)
 800b02e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b034:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <HAL_Init+0x40>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a0a      	ldr	r2, [pc, #40]	; (800b064 <HAL_Init+0x40>)
 800b03a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b03e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b040:	4b08      	ldr	r3, [pc, #32]	; (800b064 <HAL_Init+0x40>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a07      	ldr	r2, [pc, #28]	; (800b064 <HAL_Init+0x40>)
 800b046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b04a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b04c:	2003      	movs	r0, #3
 800b04e:	f000 fea9 	bl	800bda4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b052:	2000      	movs	r0, #0
 800b054:	f000 f808 	bl	800b068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b058:	f7f6 f94a 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	40023c00 	.word	0x40023c00

0800b068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b070:	4b12      	ldr	r3, [pc, #72]	; (800b0bc <HAL_InitTick+0x54>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <HAL_InitTick+0x58>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b07e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b082:	fbb2 f3f3 	udiv	r3, r2, r3
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fecf 	bl	800be2a <HAL_SYSTICK_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e00e      	b.n	800b0b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b0f      	cmp	r3, #15
 800b09a:	d80a      	bhi.n	800b0b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b09c:	2200      	movs	r2, #0
 800b09e:	6879      	ldr	r1, [r7, #4]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	f000 fe89 	bl	800bdba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b0a8:	4a06      	ldr	r2, [pc, #24]	; (800b0c4 <HAL_InitTick+0x5c>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e000      	b.n	800b0b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	20000000 	.word	0x20000000
 800b0c0:	20000060 	.word	0x20000060
 800b0c4:	2000005c 	.word	0x2000005c

0800b0c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <HAL_IncTick+0x20>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <HAL_IncTick+0x24>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	4a04      	ldr	r2, [pc, #16]	; (800b0ec <HAL_IncTick+0x24>)
 800b0da:	6013      	str	r3, [r2, #0]
}
 800b0dc:	bf00      	nop
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000060 	.word	0x20000060
 800b0ec:	2000af64 	.word	0x2000af64

0800b0f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  return uwTick;
 800b0f4:	4b03      	ldr	r3, [pc, #12]	; (800b104 <HAL_GetTick+0x14>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	2000af64 	.word	0x2000af64

0800b108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b110:	f7ff ffee 	bl	800b0f0 <HAL_GetTick>
 800b114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b120:	d005      	beq.n	800b12e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b122:	4b09      	ldr	r3, [pc, #36]	; (800b148 <HAL_Delay+0x40>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b12e:	bf00      	nop
 800b130:	f7ff ffde 	bl	800b0f0 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d8f7      	bhi.n	800b130 <HAL_Delay+0x28>
  {
  }
}
 800b140:	bf00      	nop
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20000060 	.word	0x20000060

0800b14c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e033      	b.n	800b1ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d109      	bne.n	800b17e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7fa fcc6 	bl	8005afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b182:	f003 0310 	and.w	r3, r3, #16
 800b186:	2b00      	cmp	r3, #0
 800b188:	d118      	bne.n	800b1bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b192:	f023 0302 	bic.w	r3, r3, #2
 800b196:	f043 0202 	orr.w	r2, r3, #2
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fb86 	bl	800b8b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	f043 0201 	orr.w	r2, r3, #1
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	641a      	str	r2, [r3, #64]	; 0x40
 800b1ba:	e001      	b.n	800b1c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2301      	moveq	r3, #1
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b20      	cmp	r3, #32
 800b204:	bf0c      	ite	eq
 800b206:	2301      	moveq	r3, #1
 800b208:	2300      	movne	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d049      	beq.n	800b2a8 <HAL_ADC_IRQHandler+0xd6>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d046      	beq.n	800b2a8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21e:	f003 0310 	and.w	r3, r3, #16
 800b222:	2b00      	cmp	r3, #0
 800b224:	d105      	bne.n	800b232 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d12b      	bne.n	800b298 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b244:	2b00      	cmp	r3, #0
 800b246:	d127      	bne.n	800b298 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b252:	2b00      	cmp	r3, #0
 800b254:	d006      	beq.n	800b264 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b260:	2b00      	cmp	r3, #0
 800b262:	d119      	bne.n	800b298 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0220 	bic.w	r2, r2, #32
 800b272:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d105      	bne.n	800b298 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b290:	f043 0201 	orr.w	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9af 	bl	800b5fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f06f 0212 	mvn.w	r2, #18
 800b2a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 0304 	and.w	r3, r3, #4
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	bf0c      	ite	eq
 800b2b6:	2301      	moveq	r3, #1
 800b2b8:	2300      	movne	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c8:	2b80      	cmp	r3, #128	; 0x80
 800b2ca:	bf0c      	ite	eq
 800b2cc:	2301      	moveq	r3, #1
 800b2ce:	2300      	movne	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d057      	beq.n	800b38a <HAL_ADC_IRQHandler+0x1b8>
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d054      	beq.n	800b38a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	f003 0310 	and.w	r3, r3, #16
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d105      	bne.n	800b2f8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d139      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d12b      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d124      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d11d      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	d119      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b354:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d105      	bne.n	800b37a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	f043 0201 	orr.w	r2, r3, #1
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fc16 	bl	800bbac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f06f 020c 	mvn.w	r2, #12
 800b388:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0301 	and.w	r3, r3, #1
 800b394:	2b01      	cmp	r3, #1
 800b396:	bf0c      	ite	eq
 800b398:	2301      	moveq	r3, #1
 800b39a:	2300      	movne	r3, #0
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3aa:	2b40      	cmp	r3, #64	; 0x40
 800b3ac:	bf0c      	ite	eq
 800b3ae:	2301      	moveq	r3, #1
 800b3b0:	2300      	movne	r3, #0
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d017      	beq.n	800b3ec <HAL_ADC_IRQHandler+0x21a>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d014      	beq.n	800b3ec <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d10d      	bne.n	800b3ec <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f921 	bl	800b624 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f06f 0201 	mvn.w	r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 0320 	and.w	r3, r3, #32
 800b3f6:	2b20      	cmp	r3, #32
 800b3f8:	bf0c      	ite	eq
 800b3fa:	2301      	moveq	r3, #1
 800b3fc:	2300      	movne	r3, #0
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b40c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b410:	bf0c      	ite	eq
 800b412:	2301      	moveq	r3, #1
 800b414:	2300      	movne	r3, #0
 800b416:	b2db      	uxtb	r3, r3
 800b418:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d015      	beq.n	800b44c <HAL_ADC_IRQHandler+0x27a>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d012      	beq.n	800b44c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42a:	f043 0202 	orr.w	r2, r3, #2
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f06f 0220 	mvn.w	r2, #32
 800b43a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f8fb 	bl	800b638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f06f 0220 	mvn.w	r2, #32
 800b44a:	601a      	str	r2, [r3, #0]
  }
}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d101      	bne.n	800b472 <HAL_ADC_Start_DMA+0x1e>
 800b46e:	2302      	movs	r3, #2
 800b470:	e0b1      	b.n	800b5d6 <HAL_ADC_Start_DMA+0x182>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b01      	cmp	r3, #1
 800b486:	d018      	beq.n	800b4ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689a      	ldr	r2, [r3, #8]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f042 0201 	orr.w	r2, r2, #1
 800b496:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b498:	4b51      	ldr	r3, [pc, #324]	; (800b5e0 <HAL_ADC_Start_DMA+0x18c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a51      	ldr	r2, [pc, #324]	; (800b5e4 <HAL_ADC_Start_DMA+0x190>)
 800b49e:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a2:	0c9a      	lsrs	r2, r3, #18
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b4ac:	e002      	b.n	800b4b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1f9      	bne.n	800b4ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	f040 8085 	bne.w	800b5d4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b4d2:	f023 0301 	bic.w	r3, r3, #1
 800b4d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b4f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b508:	d106      	bne.n	800b518 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50e:	f023 0206 	bic.w	r2, r3, #6
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	645a      	str	r2, [r3, #68]	; 0x44
 800b516:	e002      	b.n	800b51e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2200      	movs	r2, #0
 800b51c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b526:	4b30      	ldr	r3, [pc, #192]	; (800b5e8 <HAL_ADC_Start_DMA+0x194>)
 800b528:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	4a2f      	ldr	r2, [pc, #188]	; (800b5ec <HAL_ADC_Start_DMA+0x198>)
 800b530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	4a2e      	ldr	r2, [pc, #184]	; (800b5f0 <HAL_ADC_Start_DMA+0x19c>)
 800b538:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	4a2d      	ldr	r2, [pc, #180]	; (800b5f4 <HAL_ADC_Start_DMA+0x1a0>)
 800b540:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b54a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b55a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b56a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	334c      	adds	r3, #76	; 0x4c
 800b576:	4619      	mov	r1, r3
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f000 fd6e 	bl	800c05c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f003 031f 	and.w	r3, r3, #31
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10f      	bne.n	800b5ac <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b596:	2b00      	cmp	r3, #0
 800b598:	d11c      	bne.n	800b5d4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689a      	ldr	r2, [r3, #8]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b5a8:	609a      	str	r2, [r3, #8]
 800b5aa:	e013      	b.n	800b5d4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <HAL_ADC_Start_DMA+0x1a4>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d10e      	bne.n	800b5d4 <HAL_ADC_Start_DMA+0x180>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d107      	bne.n	800b5d4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b5d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20000000 	.word	0x20000000
 800b5e4:	431bde83 	.word	0x431bde83
 800b5e8:	40012300 	.word	0x40012300
 800b5ec:	0800baa9 	.word	0x0800baa9
 800b5f0:	0800bb63 	.word	0x0800bb63
 800b5f4:	0800bb7f 	.word	0x0800bb7f
 800b5f8:	40012000 	.word	0x40012000

0800b5fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b660:	2b01      	cmp	r3, #1
 800b662:	d101      	bne.n	800b668 <HAL_ADC_ConfigChannel+0x1c>
 800b664:	2302      	movs	r3, #2
 800b666:	e113      	b.n	800b890 <HAL_ADC_ConfigChannel+0x244>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b09      	cmp	r3, #9
 800b676:	d925      	bls.n	800b6c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68d9      	ldr	r1, [r3, #12]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	b29b      	uxth	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	4613      	mov	r3, r2
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	4413      	add	r3, r2
 800b68c:	3b1e      	subs	r3, #30
 800b68e:	2207      	movs	r2, #7
 800b690:	fa02 f303 	lsl.w	r3, r2, r3
 800b694:	43da      	mvns	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	400a      	ands	r2, r1
 800b69c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68d9      	ldr	r1, [r3, #12]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	4403      	add	r3, r0
 800b6b6:	3b1e      	subs	r3, #30
 800b6b8:	409a      	lsls	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	60da      	str	r2, [r3, #12]
 800b6c2:	e022      	b.n	800b70a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6919      	ldr	r1, [r3, #16]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	4413      	add	r3, r2
 800b6d8:	2207      	movs	r2, #7
 800b6da:	fa02 f303 	lsl.w	r3, r2, r3
 800b6de:	43da      	mvns	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	400a      	ands	r2, r1
 800b6e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6919      	ldr	r1, [r3, #16]
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689a      	ldr	r2, [r3, #8]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	005b      	lsls	r3, r3, #1
 800b6fe:	4403      	add	r3, r0
 800b700:	409a      	lsls	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	2b06      	cmp	r3, #6
 800b710:	d824      	bhi.n	800b75c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	3b05      	subs	r3, #5
 800b724:	221f      	movs	r2, #31
 800b726:	fa02 f303 	lsl.w	r3, r2, r3
 800b72a:	43da      	mvns	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	400a      	ands	r2, r1
 800b732:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	b29b      	uxth	r3, r3
 800b740:	4618      	mov	r0, r3
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	3b05      	subs	r3, #5
 800b74e:	fa00 f203 	lsl.w	r2, r0, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	635a      	str	r2, [r3, #52]	; 0x34
 800b75a:	e04c      	b.n	800b7f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	2b0c      	cmp	r3, #12
 800b762:	d824      	bhi.n	800b7ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	3b23      	subs	r3, #35	; 0x23
 800b776:	221f      	movs	r2, #31
 800b778:	fa02 f303 	lsl.w	r3, r2, r3
 800b77c:	43da      	mvns	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	400a      	ands	r2, r1
 800b784:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	4618      	mov	r0, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	3b23      	subs	r3, #35	; 0x23
 800b7a0:	fa00 f203 	lsl.w	r2, r0, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b7ac:	e023      	b.n	800b7f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	3b41      	subs	r3, #65	; 0x41
 800b7c0:	221f      	movs	r2, #31
 800b7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c6:	43da      	mvns	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	400a      	ands	r2, r1
 800b7ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	4618      	mov	r0, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	3b41      	subs	r3, #65	; 0x41
 800b7ea:	fa00 f203 	lsl.w	r2, r0, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b7f6:	4b29      	ldr	r3, [pc, #164]	; (800b89c <HAL_ADC_ConfigChannel+0x250>)
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a28      	ldr	r2, [pc, #160]	; (800b8a0 <HAL_ADC_ConfigChannel+0x254>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d10f      	bne.n	800b824 <HAL_ADC_ConfigChannel+0x1d8>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b12      	cmp	r3, #18
 800b80a:	d10b      	bne.n	800b824 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a1d      	ldr	r2, [pc, #116]	; (800b8a0 <HAL_ADC_ConfigChannel+0x254>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d12b      	bne.n	800b886 <HAL_ADC_ConfigChannel+0x23a>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <HAL_ADC_ConfigChannel+0x258>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d003      	beq.n	800b840 <HAL_ADC_ConfigChannel+0x1f4>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b11      	cmp	r3, #17
 800b83e:	d122      	bne.n	800b886 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a11      	ldr	r2, [pc, #68]	; (800b8a4 <HAL_ADC_ConfigChannel+0x258>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d111      	bne.n	800b886 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <HAL_ADC_ConfigChannel+0x25c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a11      	ldr	r2, [pc, #68]	; (800b8ac <HAL_ADC_ConfigChannel+0x260>)
 800b868:	fba2 2303 	umull	r2, r3, r2, r3
 800b86c:	0c9a      	lsrs	r2, r3, #18
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b878:	e002      	b.n	800b880 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1f9      	bne.n	800b87a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	40012300 	.word	0x40012300
 800b8a0:	40012000 	.word	0x40012000
 800b8a4:	10000012 	.word	0x10000012
 800b8a8:	20000000 	.word	0x20000000
 800b8ac:	431bde83 	.word	0x431bde83

0800b8b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b8b8:	4b79      	ldr	r3, [pc, #484]	; (800baa0 <ADC_Init+0x1f0>)
 800b8ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6859      	ldr	r1, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	021a      	lsls	r2, r3, #8
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6859      	ldr	r1, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b92a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6899      	ldr	r1, [r3, #8]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	430a      	orrs	r2, r1
 800b93c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b942:	4a58      	ldr	r2, [pc, #352]	; (800baa4 <ADC_Init+0x1f4>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d022      	beq.n	800b98e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689a      	ldr	r2, [r3, #8]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6899      	ldr	r1, [r3, #8]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6899      	ldr	r1, [r3, #8]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	430a      	orrs	r2, r1
 800b98a:	609a      	str	r2, [r3, #8]
 800b98c:	e00f      	b.n	800b9ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b99c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b9ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 0202 	bic.w	r2, r2, #2
 800b9bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6899      	ldr	r1, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	7e1b      	ldrb	r3, [r3, #24]
 800b9c8:	005a      	lsls	r2, r3, #1
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01b      	beq.n	800ba14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800b9fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6859      	ldr	r1, [r3, #4]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	3b01      	subs	r3, #1
 800ba08:	035a      	lsls	r2, r3, #13
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	605a      	str	r2, [r3, #4]
 800ba12:	e007      	b.n	800ba24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ba22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ba32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	051a      	lsls	r2, r3, #20
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689a      	ldr	r2, [r3, #8]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6899      	ldr	r1, [r3, #8]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba66:	025a      	lsls	r2, r3, #9
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6899      	ldr	r1, [r3, #8]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	029a      	lsls	r2, r3, #10
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	430a      	orrs	r2, r1
 800ba92:	609a      	str	r2, [r3, #8]
}
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	40012300 	.word	0x40012300
 800baa4:	0f000001 	.word	0x0f000001

0800baa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d13c      	bne.n	800bb3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d12b      	bne.n	800bb34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d127      	bne.n	800bb34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d006      	beq.n	800bb00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d119      	bne.n	800bb34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f022 0220 	bic.w	r2, r2, #32
 800bb0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d105      	bne.n	800bb34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2c:	f043 0201 	orr.w	r2, r3, #1
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f7ff fd61 	bl	800b5fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bb3a:	e00e      	b.n	800bb5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb40:	f003 0310 	and.w	r3, r3, #16
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff fd75 	bl	800b638 <HAL_ADC_ErrorCallback>
}
 800bb4e:	e004      	b.n	800bb5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	4798      	blx	r3
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7ff fd4d 	bl	800b610 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bb76:	bf00      	nop
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2240      	movs	r2, #64	; 0x40
 800bb90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	f043 0204 	orr.w	r2, r3, #4
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff fd4a 	bl	800b638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bba4:	bf00      	nop
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f003 0307 	and.w	r3, r3, #7
 800bbce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <__NVIC_SetPriorityGrouping+0x44>)
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bbdc:	4013      	ands	r3, r2
 800bbde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bbe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bbec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bbf2:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <__NVIC_SetPriorityGrouping+0x44>)
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	60d3      	str	r3, [r2, #12]
}
 800bbf8:	bf00      	nop
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	e000ed00 	.word	0xe000ed00

0800bc08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc0c:	4b04      	ldr	r3, [pc, #16]	; (800bc20 <__NVIC_GetPriorityGrouping+0x18>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	0a1b      	lsrs	r3, r3, #8
 800bc12:	f003 0307 	and.w	r3, r3, #7
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	db0b      	blt.n	800bc4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc36:	79fb      	ldrb	r3, [r7, #7]
 800bc38:	f003 021f 	and.w	r2, r3, #31
 800bc3c:	4907      	ldr	r1, [pc, #28]	; (800bc5c <__NVIC_EnableIRQ+0x38>)
 800bc3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc42:	095b      	lsrs	r3, r3, #5
 800bc44:	2001      	movs	r0, #1
 800bc46:	fa00 f202 	lsl.w	r2, r0, r2
 800bc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	e000e100 	.word	0xe000e100

0800bc60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	db10      	blt.n	800bc94 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	f003 021f 	and.w	r2, r3, #31
 800bc78:	4909      	ldr	r1, [pc, #36]	; (800bca0 <__NVIC_DisableIRQ+0x40>)
 800bc7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc7e:	095b      	lsrs	r3, r3, #5
 800bc80:	2001      	movs	r0, #1
 800bc82:	fa00 f202 	lsl.w	r2, r0, r2
 800bc86:	3320      	adds	r3, #32
 800bc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bc8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	e000e100 	.word	0xe000e100

0800bca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	6039      	str	r1, [r7, #0]
 800bcae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	db0a      	blt.n	800bcce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	490c      	ldr	r1, [pc, #48]	; (800bcf0 <__NVIC_SetPriority+0x4c>)
 800bcbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc2:	0112      	lsls	r2, r2, #4
 800bcc4:	b2d2      	uxtb	r2, r2
 800bcc6:	440b      	add	r3, r1
 800bcc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bccc:	e00a      	b.n	800bce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	4908      	ldr	r1, [pc, #32]	; (800bcf4 <__NVIC_SetPriority+0x50>)
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	f003 030f 	and.w	r3, r3, #15
 800bcda:	3b04      	subs	r3, #4
 800bcdc:	0112      	lsls	r2, r2, #4
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	440b      	add	r3, r1
 800bce2:	761a      	strb	r2, [r3, #24]
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	e000e100 	.word	0xe000e100
 800bcf4:	e000ed00 	.word	0xe000ed00

0800bcf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b089      	sub	sp, #36	; 0x24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f003 0307 	and.w	r3, r3, #7
 800bd0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	f1c3 0307 	rsb	r3, r3, #7
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	bf28      	it	cs
 800bd16:	2304      	movcs	r3, #4
 800bd18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	2b06      	cmp	r3, #6
 800bd20:	d902      	bls.n	800bd28 <NVIC_EncodePriority+0x30>
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	3b03      	subs	r3, #3
 800bd26:	e000      	b.n	800bd2a <NVIC_EncodePriority+0x32>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	fa02 f303 	lsl.w	r3, r2, r3
 800bd36:	43da      	mvns	r2, r3
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	401a      	ands	r2, r3
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd40:	f04f 31ff 	mov.w	r1, #4294967295
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	fa01 f303 	lsl.w	r3, r1, r3
 800bd4a:	43d9      	mvns	r1, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd50:	4313      	orrs	r3, r2
         );
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3724      	adds	r7, #36	; 0x24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
	...

0800bd60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd70:	d301      	bcc.n	800bd76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bd72:	2301      	movs	r3, #1
 800bd74:	e00f      	b.n	800bd96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bd76:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <SysTick_Config+0x40>)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bd7e:	210f      	movs	r1, #15
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	f7ff ff8e 	bl	800bca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bd88:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <SysTick_Config+0x40>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <SysTick_Config+0x40>)
 800bd90:	2207      	movs	r2, #7
 800bd92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	e000e010 	.word	0xe000e010

0800bda4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ff07 	bl	800bbc0 <__NVIC_SetPriorityGrouping>
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b086      	sub	sp, #24
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bdcc:	f7ff ff1c 	bl	800bc08 <__NVIC_GetPriorityGrouping>
 800bdd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	68b9      	ldr	r1, [r7, #8]
 800bdd6:	6978      	ldr	r0, [r7, #20]
 800bdd8:	f7ff ff8e 	bl	800bcf8 <NVIC_EncodePriority>
 800bddc:	4602      	mov	r2, r0
 800bdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bde2:	4611      	mov	r1, r2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff ff5d 	bl	800bca4 <__NVIC_SetPriority>
}
 800bdea:	bf00      	nop
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff ff0f 	bl	800bc24 <__NVIC_EnableIRQ>
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	4603      	mov	r3, r0
 800be16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800be18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff ff1f 	bl	800bc60 <__NVIC_DisableIRQ>
}
 800be22:	bf00      	nop
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b082      	sub	sp, #8
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff ff94 	bl	800bd60 <SysTick_Config>
 800be38:	4603      	mov	r3, r0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800be4c:	2300      	movs	r3, #0
 800be4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800be50:	f7ff f94e 	bl	800b0f0 <HAL_GetTick>
 800be54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d101      	bne.n	800be60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e099      	b.n	800bf94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2202      	movs	r2, #2
 800be6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0201 	bic.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800be80:	e00f      	b.n	800bea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800be82:	f7ff f935 	bl	800b0f0 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b05      	cmp	r3, #5
 800be8e:	d908      	bls.n	800bea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2203      	movs	r2, #3
 800be9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e078      	b.n	800bf94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1e8      	bne.n	800be82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4b38      	ldr	r3, [pc, #224]	; (800bf9c <HAL_DMA_Init+0x158>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800beda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef8:	2b04      	cmp	r3, #4
 800befa:	d107      	bne.n	800bf0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf04:	4313      	orrs	r3, r2
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f023 0307 	bic.w	r3, r3, #7
 800bf22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d117      	bne.n	800bf66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00e      	beq.n	800bf66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fafb 	bl	800c544 <DMA_CheckFifoParam>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d008      	beq.n	800bf66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2240      	movs	r2, #64	; 0x40
 800bf58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bf62:	2301      	movs	r3, #1
 800bf64:	e016      	b.n	800bf94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fab2 	bl	800c4d8 <DMA_CalcBaseAndBitshift>
 800bf74:	4603      	mov	r3, r0
 800bf76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf7c:	223f      	movs	r2, #63	; 0x3f
 800bf7e:	409a      	lsls	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	f010803f 	.word	0xf010803f

0800bfa0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e050      	b.n	800c054 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d101      	bne.n	800bfc2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	e048      	b.n	800c054 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f022 0201 	bic.w	r2, r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2200      	movs	r2, #0
 800bff0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2200      	movs	r2, #0
 800bff8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2221      	movs	r2, #33	; 0x21
 800c000:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa68 	bl	800c4d8 <DMA_CalcBaseAndBitshift>
 800c008:	4603      	mov	r3, r0
 800c00a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c034:	223f      	movs	r2, #63	; 0x3f
 800c036:	409a      	lsls	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c072:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d101      	bne.n	800c082 <HAL_DMA_Start_IT+0x26>
 800c07e:	2302      	movs	r3, #2
 800c080:	e040      	b.n	800c104 <HAL_DMA_Start_IT+0xa8>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b01      	cmp	r3, #1
 800c094:	d12f      	bne.n	800c0f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2202      	movs	r2, #2
 800c09a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f9e6 	bl	800c47c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0b4:	223f      	movs	r2, #63	; 0x3f
 800c0b6:	409a      	lsls	r2, r3
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0216 	orr.w	r2, r2, #22
 800c0ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d007      	beq.n	800c0e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0208 	orr.w	r2, r2, #8
 800c0e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f042 0201 	orr.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	e005      	b.n	800c102 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c0fe:	2302      	movs	r3, #2
 800c100:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c102:	7dfb      	ldrb	r3, [r7, #23]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d004      	beq.n	800c12a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2280      	movs	r2, #128	; 0x80
 800c124:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e00c      	b.n	800c144 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2205      	movs	r2, #5
 800c12e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f022 0201 	bic.w	r2, r2, #1
 800c140:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c15c:	4b92      	ldr	r3, [pc, #584]	; (800c3a8 <HAL_DMA_IRQHandler+0x258>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a92      	ldr	r2, [pc, #584]	; (800c3ac <HAL_DMA_IRQHandler+0x25c>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	0a9b      	lsrs	r3, r3, #10
 800c168:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17a:	2208      	movs	r2, #8
 800c17c:	409a      	lsls	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	4013      	ands	r3, r2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d01a      	beq.n	800c1bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0304 	and.w	r3, r3, #4
 800c190:	2b00      	cmp	r3, #0
 800c192:	d013      	beq.n	800c1bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0204 	bic.w	r2, r2, #4
 800c1a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1a8:	2208      	movs	r2, #8
 800c1aa:	409a      	lsls	r2, r3
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1b4:	f043 0201 	orr.w	r2, r3, #1
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	409a      	lsls	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4013      	ands	r3, r2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d012      	beq.n	800c1f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00b      	beq.n	800c1f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1de:	2201      	movs	r2, #1
 800c1e0:	409a      	lsls	r2, r3
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ea:	f043 0202 	orr.w	r2, r3, #2
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	409a      	lsls	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d012      	beq.n	800c228 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00b      	beq.n	800c228 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c214:	2204      	movs	r2, #4
 800c216:	409a      	lsls	r2, r3
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c220:	f043 0204 	orr.w	r2, r3, #4
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c22c:	2210      	movs	r2, #16
 800c22e:	409a      	lsls	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	4013      	ands	r3, r2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d043      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 0308 	and.w	r3, r3, #8
 800c242:	2b00      	cmp	r3, #0
 800c244:	d03c      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c24a:	2210      	movs	r2, #16
 800c24c:	409a      	lsls	r2, r3
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d018      	beq.n	800c292 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d108      	bne.n	800c280 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c272:	2b00      	cmp	r3, #0
 800c274:	d024      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	4798      	blx	r3
 800c27e:	e01f      	b.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01b      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	4798      	blx	r3
 800c290:	e016      	b.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d107      	bne.n	800c2b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f022 0208 	bic.w	r2, r2, #8
 800c2ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	409a      	lsls	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 808e 	beq.w	800c3ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0310 	and.w	r3, r3, #16
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 8086 	beq.w	800c3ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2e6:	2220      	movs	r2, #32
 800c2e8:	409a      	lsls	r2, r3
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d136      	bne.n	800c368 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 0216 	bic.w	r2, r2, #22
 800c308:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	695a      	ldr	r2, [r3, #20]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c318:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d103      	bne.n	800c32a <HAL_DMA_IRQHandler+0x1da>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c326:	2b00      	cmp	r3, #0
 800c328:	d007      	beq.n	800c33a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0208 	bic.w	r2, r2, #8
 800c338:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c33e:	223f      	movs	r2, #63	; 0x3f
 800c340:	409a      	lsls	r2, r3
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d07d      	beq.n	800c45a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	4798      	blx	r3
        }
        return;
 800c366:	e078      	b.n	800c45a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c372:	2b00      	cmp	r3, #0
 800c374:	d01c      	beq.n	800c3b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d030      	beq.n	800c3ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	4798      	blx	r3
 800c394:	e02b      	b.n	800c3ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d027      	beq.n	800c3ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	4798      	blx	r3
 800c3a6:	e022      	b.n	800c3ee <HAL_DMA_IRQHandler+0x29e>
 800c3a8:	20000000 	.word	0x20000000
 800c3ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10f      	bne.n	800c3de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f022 0210 	bic.w	r2, r2, #16
 800c3cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d032      	beq.n	800c45c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d022      	beq.n	800c448 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2205      	movs	r2, #5
 800c406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f022 0201 	bic.w	r2, r2, #1
 800c418:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	3301      	adds	r3, #1
 800c41e:	60bb      	str	r3, [r7, #8]
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	429a      	cmp	r2, r3
 800c424:	d307      	bcc.n	800c436 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f2      	bne.n	800c41a <HAL_DMA_IRQHandler+0x2ca>
 800c434:	e000      	b.n	800c438 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c436:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	4798      	blx	r3
 800c458:	e000      	b.n	800c45c <HAL_DMA_IRQHandler+0x30c>
        return;
 800c45a:	bf00      	nop
    }
  }
}
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop

0800c464 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	2b40      	cmp	r3, #64	; 0x40
 800c4a8:	d108      	bne.n	800c4bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c4ba:	e007      	b.n	800c4cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	60da      	str	r2, [r3, #12]
}
 800c4cc:	bf00      	nop
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	3b10      	subs	r3, #16
 800c4e8:	4a14      	ldr	r2, [pc, #80]	; (800c53c <DMA_CalcBaseAndBitshift+0x64>)
 800c4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ee:	091b      	lsrs	r3, r3, #4
 800c4f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c4f2:	4a13      	ldr	r2, [pc, #76]	; (800c540 <DMA_CalcBaseAndBitshift+0x68>)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b03      	cmp	r3, #3
 800c504:	d909      	bls.n	800c51a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	1d1a      	adds	r2, r3, #4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	659a      	str	r2, [r3, #88]	; 0x58
 800c518:	e007      	b.n	800c52a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c522:	f023 0303 	bic.w	r3, r3, #3
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	aaaaaaab 	.word	0xaaaaaaab
 800c540:	08020d54 	.word	0x08020d54

0800c544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d11f      	bne.n	800c59e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b03      	cmp	r3, #3
 800c562:	d855      	bhi.n	800c610 <DMA_CheckFifoParam+0xcc>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <DMA_CheckFifoParam+0x28>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c57d 	.word	0x0800c57d
 800c570:	0800c58f 	.word	0x0800c58f
 800c574:	0800c57d 	.word	0x0800c57d
 800c578:	0800c611 	.word	0x0800c611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d045      	beq.n	800c614 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c58c:	e042      	b.n	800c614 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c596:	d13f      	bne.n	800c618 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c59c:	e03c      	b.n	800c618 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5a6:	d121      	bne.n	800c5ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d836      	bhi.n	800c61c <DMA_CheckFifoParam+0xd8>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <DMA_CheckFifoParam+0x70>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5c5 	.word	0x0800c5c5
 800c5b8:	0800c5cb 	.word	0x0800c5cb
 800c5bc:	0800c5c5 	.word	0x0800c5c5
 800c5c0:	0800c5dd 	.word	0x0800c5dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c8:	e02f      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d024      	beq.n	800c620 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5da:	e021      	b.n	800c620 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c5e4:	d11e      	bne.n	800c624 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c5ea:	e01b      	b.n	800c624 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d902      	bls.n	800c5f8 <DMA_CheckFifoParam+0xb4>
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d003      	beq.n	800c5fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c5f6:	e018      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5fc:	e015      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	73fb      	strb	r3, [r7, #15]
      break;
 800c60e:	e00b      	b.n	800c628 <DMA_CheckFifoParam+0xe4>
      break;
 800c610:	bf00      	nop
 800c612:	e00a      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;
 800c614:	bf00      	nop
 800c616:	e008      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;
 800c618:	bf00      	nop
 800c61a:	e006      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;
 800c61c:	bf00      	nop
 800c61e:	e004      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;   
 800c624:	bf00      	nop
 800c626:	e000      	b.n	800c62a <DMA_CheckFifoParam+0xe6>
      break;
 800c628:	bf00      	nop
    }
  } 
  
  return status; 
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c638:	b480      	push	{r7}
 800c63a:	b089      	sub	sp, #36	; 0x24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c642:	2300      	movs	r3, #0
 800c644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c646:	2300      	movs	r3, #0
 800c648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c64e:	2300      	movs	r3, #0
 800c650:	61fb      	str	r3, [r7, #28]
 800c652:	e159      	b.n	800c908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c654:	2201      	movs	r2, #1
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	fa02 f303 	lsl.w	r3, r2, r3
 800c65c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	4013      	ands	r3, r2
 800c666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	f040 8148 	bne.w	800c902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d00b      	beq.n	800c692 <HAL_GPIO_Init+0x5a>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d007      	beq.n	800c692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c686:	2b11      	cmp	r3, #17
 800c688:	d003      	beq.n	800c692 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	2b12      	cmp	r3, #18
 800c690:	d130      	bne.n	800c6f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	2203      	movs	r2, #3
 800c69e:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a2:	43db      	mvns	r3, r3
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b6:	69ba      	ldr	r2, [r7, #24]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d0:	43db      	mvns	r3, r3
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	091b      	lsrs	r3, r3, #4
 800c6de:	f003 0201 	and.w	r2, r3, #1
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e8:	69ba      	ldr	r2, [r7, #24]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	005b      	lsls	r3, r3, #1
 800c6fe:	2203      	movs	r2, #3
 800c700:	fa02 f303 	lsl.w	r3, r2, r3
 800c704:	43db      	mvns	r3, r3
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	4013      	ands	r3, r2
 800c70a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	69ba      	ldr	r2, [r7, #24]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d003      	beq.n	800c734 <HAL_GPIO_Init+0xfc>
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	2b12      	cmp	r3, #18
 800c732:	d123      	bne.n	800c77c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	08da      	lsrs	r2, r3, #3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3208      	adds	r2, #8
 800c73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	f003 0307 	and.w	r3, r3, #7
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	220f      	movs	r2, #15
 800c74c:	fa02 f303 	lsl.w	r3, r2, r3
 800c750:	43db      	mvns	r3, r3
 800c752:	69ba      	ldr	r2, [r7, #24]
 800c754:	4013      	ands	r3, r2
 800c756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	691a      	ldr	r2, [r3, #16]
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	fa02 f303 	lsl.w	r3, r2, r3
 800c768:	69ba      	ldr	r2, [r7, #24]
 800c76a:	4313      	orrs	r3, r2
 800c76c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	08da      	lsrs	r2, r3, #3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3208      	adds	r2, #8
 800c776:	69b9      	ldr	r1, [r7, #24]
 800c778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	2203      	movs	r2, #3
 800c788:	fa02 f303 	lsl.w	r3, r2, r3
 800c78c:	43db      	mvns	r3, r3
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	4013      	ands	r3, r2
 800c792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f003 0203 	and.w	r2, r3, #3
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f000 80a2 	beq.w	800c902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	4b56      	ldr	r3, [pc, #344]	; (800c91c <HAL_GPIO_Init+0x2e4>)
 800c7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c6:	4a55      	ldr	r2, [pc, #340]	; (800c91c <HAL_GPIO_Init+0x2e4>)
 800c7c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7cc:	6453      	str	r3, [r2, #68]	; 0x44
 800c7ce:	4b53      	ldr	r3, [pc, #332]	; (800c91c <HAL_GPIO_Init+0x2e4>)
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c7da:	4a51      	ldr	r2, [pc, #324]	; (800c920 <HAL_GPIO_Init+0x2e8>)
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	089b      	lsrs	r3, r3, #2
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	f003 0303 	and.w	r3, r3, #3
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	220f      	movs	r2, #15
 800c7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f6:	43db      	mvns	r3, r3
 800c7f8:	69ba      	ldr	r2, [r7, #24]
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a48      	ldr	r2, [pc, #288]	; (800c924 <HAL_GPIO_Init+0x2ec>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d019      	beq.n	800c83a <HAL_GPIO_Init+0x202>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a47      	ldr	r2, [pc, #284]	; (800c928 <HAL_GPIO_Init+0x2f0>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d013      	beq.n	800c836 <HAL_GPIO_Init+0x1fe>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a46      	ldr	r2, [pc, #280]	; (800c92c <HAL_GPIO_Init+0x2f4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00d      	beq.n	800c832 <HAL_GPIO_Init+0x1fa>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a45      	ldr	r2, [pc, #276]	; (800c930 <HAL_GPIO_Init+0x2f8>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d007      	beq.n	800c82e <HAL_GPIO_Init+0x1f6>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a44      	ldr	r2, [pc, #272]	; (800c934 <HAL_GPIO_Init+0x2fc>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d101      	bne.n	800c82a <HAL_GPIO_Init+0x1f2>
 800c826:	2304      	movs	r3, #4
 800c828:	e008      	b.n	800c83c <HAL_GPIO_Init+0x204>
 800c82a:	2307      	movs	r3, #7
 800c82c:	e006      	b.n	800c83c <HAL_GPIO_Init+0x204>
 800c82e:	2303      	movs	r3, #3
 800c830:	e004      	b.n	800c83c <HAL_GPIO_Init+0x204>
 800c832:	2302      	movs	r3, #2
 800c834:	e002      	b.n	800c83c <HAL_GPIO_Init+0x204>
 800c836:	2301      	movs	r3, #1
 800c838:	e000      	b.n	800c83c <HAL_GPIO_Init+0x204>
 800c83a:	2300      	movs	r3, #0
 800c83c:	69fa      	ldr	r2, [r7, #28]
 800c83e:	f002 0203 	and.w	r2, r2, #3
 800c842:	0092      	lsls	r2, r2, #2
 800c844:	4093      	lsls	r3, r2
 800c846:	69ba      	ldr	r2, [r7, #24]
 800c848:	4313      	orrs	r3, r2
 800c84a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c84c:	4934      	ldr	r1, [pc, #208]	; (800c920 <HAL_GPIO_Init+0x2e8>)
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	089b      	lsrs	r3, r3, #2
 800c852:	3302      	adds	r3, #2
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c85a:	4b37      	ldr	r3, [pc, #220]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	43db      	mvns	r3, r3
 800c864:	69ba      	ldr	r2, [r7, #24]
 800c866:	4013      	ands	r3, r2
 800c868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c876:	69ba      	ldr	r2, [r7, #24]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c87e:	4a2e      	ldr	r2, [pc, #184]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c884:	4b2c      	ldr	r3, [pc, #176]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	43db      	mvns	r3, r3
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	4013      	ands	r3, r2
 800c892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c8a8:	4a23      	ldr	r2, [pc, #140]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c8ae:	4b22      	ldr	r3, [pc, #136]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	43db      	mvns	r3, r3
 800c8b8:	69ba      	ldr	r2, [r7, #24]
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d003      	beq.n	800c8d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c8ca:	69ba      	ldr	r2, [r7, #24]
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c8d2:	4a19      	ldr	r2, [pc, #100]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c8d8:	4b17      	ldr	r3, [pc, #92]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	43db      	mvns	r3, r3
 800c8e2:	69ba      	ldr	r2, [r7, #24]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c8f4:	69ba      	ldr	r2, [r7, #24]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c8fc:	4a0e      	ldr	r2, [pc, #56]	; (800c938 <HAL_GPIO_Init+0x300>)
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3301      	adds	r3, #1
 800c906:	61fb      	str	r3, [r7, #28]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	2b0f      	cmp	r3, #15
 800c90c:	f67f aea2 	bls.w	800c654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c910:	bf00      	nop
 800c912:	3724      	adds	r7, #36	; 0x24
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	40023800 	.word	0x40023800
 800c920:	40013800 	.word	0x40013800
 800c924:	40020000 	.word	0x40020000
 800c928:	40020400 	.word	0x40020400
 800c92c:	40020800 	.word	0x40020800
 800c930:	40020c00 	.word	0x40020c00
 800c934:	40021000 	.word	0x40021000
 800c938:	40013c00 	.word	0x40013c00

0800c93c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c946:	2300      	movs	r3, #0
 800c948:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c94e:	2300      	movs	r3, #0
 800c950:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c952:	2300      	movs	r3, #0
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	e0bb      	b.n	800cad0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c958:	2201      	movs	r2, #1
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	fa02 f303 	lsl.w	r3, r2, r3
 800c960:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4013      	ands	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	429a      	cmp	r2, r3
 800c970:	f040 80ab 	bne.w	800caca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c974:	4a5b      	ldr	r2, [pc, #364]	; (800cae4 <HAL_GPIO_DeInit+0x1a8>)
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	089b      	lsrs	r3, r3, #2
 800c97a:	3302      	adds	r3, #2
 800c97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c980:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	220f      	movs	r2, #15
 800c98c:	fa02 f303 	lsl.w	r3, r2, r3
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	4013      	ands	r3, r2
 800c994:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a53      	ldr	r2, [pc, #332]	; (800cae8 <HAL_GPIO_DeInit+0x1ac>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d019      	beq.n	800c9d2 <HAL_GPIO_DeInit+0x96>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a52      	ldr	r2, [pc, #328]	; (800caec <HAL_GPIO_DeInit+0x1b0>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d013      	beq.n	800c9ce <HAL_GPIO_DeInit+0x92>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a51      	ldr	r2, [pc, #324]	; (800caf0 <HAL_GPIO_DeInit+0x1b4>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d00d      	beq.n	800c9ca <HAL_GPIO_DeInit+0x8e>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a50      	ldr	r2, [pc, #320]	; (800caf4 <HAL_GPIO_DeInit+0x1b8>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d007      	beq.n	800c9c6 <HAL_GPIO_DeInit+0x8a>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a4f      	ldr	r2, [pc, #316]	; (800caf8 <HAL_GPIO_DeInit+0x1bc>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d101      	bne.n	800c9c2 <HAL_GPIO_DeInit+0x86>
 800c9be:	2304      	movs	r3, #4
 800c9c0:	e008      	b.n	800c9d4 <HAL_GPIO_DeInit+0x98>
 800c9c2:	2307      	movs	r3, #7
 800c9c4:	e006      	b.n	800c9d4 <HAL_GPIO_DeInit+0x98>
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e004      	b.n	800c9d4 <HAL_GPIO_DeInit+0x98>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e002      	b.n	800c9d4 <HAL_GPIO_DeInit+0x98>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e000      	b.n	800c9d4 <HAL_GPIO_DeInit+0x98>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	f002 0203 	and.w	r2, r2, #3
 800c9da:	0092      	lsls	r2, r2, #2
 800c9dc:	4093      	lsls	r3, r2
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d132      	bne.n	800ca4a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c9e4:	4b45      	ldr	r3, [pc, #276]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	43db      	mvns	r3, r3
 800c9ec:	4943      	ldr	r1, [pc, #268]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c9f2:	4b42      	ldr	r3, [pc, #264]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	43db      	mvns	r3, r3
 800c9fa:	4940      	ldr	r1, [pc, #256]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ca00:	4b3e      	ldr	r3, [pc, #248]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	43db      	mvns	r3, r3
 800ca08:	493c      	ldr	r1, [pc, #240]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ca0e:	4b3b      	ldr	r3, [pc, #236]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800ca10:	68da      	ldr	r2, [r3, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	43db      	mvns	r3, r3
 800ca16:	4939      	ldr	r1, [pc, #228]	; (800cafc <HAL_GPIO_DeInit+0x1c0>)
 800ca18:	4013      	ands	r3, r2
 800ca1a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	220f      	movs	r2, #15
 800ca26:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ca2c:	4a2d      	ldr	r2, [pc, #180]	; (800cae4 <HAL_GPIO_DeInit+0x1a8>)
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	089b      	lsrs	r3, r3, #2
 800ca32:	3302      	adds	r3, #2
 800ca34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	43da      	mvns	r2, r3
 800ca3c:	4829      	ldr	r0, [pc, #164]	; (800cae4 <HAL_GPIO_DeInit+0x1a8>)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	089b      	lsrs	r3, r3, #2
 800ca42:	400a      	ands	r2, r1
 800ca44:	3302      	adds	r3, #2
 800ca46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	2103      	movs	r1, #3
 800ca54:	fa01 f303 	lsl.w	r3, r1, r3
 800ca58:	43db      	mvns	r3, r3
 800ca5a:	401a      	ands	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	08da      	lsrs	r2, r3, #3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3208      	adds	r2, #8
 800ca68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f003 0307 	and.w	r3, r3, #7
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	220f      	movs	r2, #15
 800ca76:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7a:	43db      	mvns	r3, r3
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	08d2      	lsrs	r2, r2, #3
 800ca80:	4019      	ands	r1, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	3208      	adds	r2, #8
 800ca86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68da      	ldr	r2, [r3, #12]
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	2103      	movs	r1, #3
 800ca94:	fa01 f303 	lsl.w	r3, r1, r3
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	401a      	ands	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	2101      	movs	r1, #1
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	fa01 f303 	lsl.w	r3, r1, r3
 800caac:	43db      	mvns	r3, r3
 800caae:	401a      	ands	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	689a      	ldr	r2, [r3, #8]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	2103      	movs	r1, #3
 800cabe:	fa01 f303 	lsl.w	r3, r1, r3
 800cac2:	43db      	mvns	r3, r3
 800cac4:	401a      	ands	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	3301      	adds	r3, #1
 800cace:	617b      	str	r3, [r7, #20]
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b0f      	cmp	r3, #15
 800cad4:	f67f af40 	bls.w	800c958 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cad8:	bf00      	nop
 800cada:	371c      	adds	r7, #28
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	40013800 	.word	0x40013800
 800cae8:	40020000 	.word	0x40020000
 800caec:	40020400 	.word	0x40020400
 800caf0:	40020800 	.word	0x40020800
 800caf4:	40020c00 	.word	0x40020c00
 800caf8:	40021000 	.word	0x40021000
 800cafc:	40013c00 	.word	0x40013c00

0800cb00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691a      	ldr	r2, [r3, #16]
 800cb10:	887b      	ldrh	r3, [r7, #2]
 800cb12:	4013      	ands	r3, r2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	e001      	b.n	800cb22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	807b      	strh	r3, [r7, #2]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cb40:	787b      	ldrb	r3, [r7, #1]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cb46:	887a      	ldrh	r2, [r7, #2]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cb4c:	e003      	b.n	800cb56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cb4e:	887b      	ldrh	r3, [r7, #2]
 800cb50:	041a      	lsls	r2, r3, #16
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	619a      	str	r2, [r3, #24]
}
 800cb56:	bf00      	nop
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695a      	ldr	r2, [r3, #20]
 800cb72:	887b      	ldrh	r3, [r7, #2]
 800cb74:	401a      	ands	r2, r3
 800cb76:	887b      	ldrh	r3, [r7, #2]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d104      	bne.n	800cb86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cb7c:	887b      	ldrh	r3, [r7, #2]
 800cb7e:	041a      	lsls	r2, r3, #16
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800cb84:	e002      	b.n	800cb8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800cb86:	887a      	ldrh	r2, [r7, #2]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	619a      	str	r2, [r3, #24]
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b086      	sub	sp, #24
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e25b      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d075      	beq.n	800cca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cbb6:	4ba3      	ldr	r3, [pc, #652]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f003 030c 	and.w	r3, r3, #12
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d00c      	beq.n	800cbdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbc2:	4ba0      	ldr	r3, [pc, #640]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cbca:	2b08      	cmp	r3, #8
 800cbcc:	d112      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbce:	4b9d      	ldr	r3, [pc, #628]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbda:	d10b      	bne.n	800cbf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbdc:	4b99      	ldr	r3, [pc, #612]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d05b      	beq.n	800cca0 <HAL_RCC_OscConfig+0x108>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d157      	bne.n	800cca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e236      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbfc:	d106      	bne.n	800cc0c <HAL_RCC_OscConfig+0x74>
 800cbfe:	4b91      	ldr	r3, [pc, #580]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a90      	ldr	r2, [pc, #576]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e01d      	b.n	800cc48 <HAL_RCC_OscConfig+0xb0>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc14:	d10c      	bne.n	800cc30 <HAL_RCC_OscConfig+0x98>
 800cc16:	4b8b      	ldr	r3, [pc, #556]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a8a      	ldr	r2, [pc, #552]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	4b88      	ldr	r3, [pc, #544]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a87      	ldr	r2, [pc, #540]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	e00b      	b.n	800cc48 <HAL_RCC_OscConfig+0xb0>
 800cc30:	4b84      	ldr	r3, [pc, #528]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a83      	ldr	r2, [pc, #524]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	4b81      	ldr	r3, [pc, #516]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a80      	ldr	r2, [pc, #512]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d013      	beq.n	800cc78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc50:	f7fe fa4e 	bl	800b0f0 <HAL_GetTick>
 800cc54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc56:	e008      	b.n	800cc6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc58:	f7fe fa4a 	bl	800b0f0 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b64      	cmp	r3, #100	; 0x64
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e1fb      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc6a:	4b76      	ldr	r3, [pc, #472]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0f0      	beq.n	800cc58 <HAL_RCC_OscConfig+0xc0>
 800cc76:	e014      	b.n	800cca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc78:	f7fe fa3a 	bl	800b0f0 <HAL_GetTick>
 800cc7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc7e:	e008      	b.n	800cc92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc80:	f7fe fa36 	bl	800b0f0 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b64      	cmp	r3, #100	; 0x64
 800cc8c:	d901      	bls.n	800cc92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e1e7      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc92:	4b6c      	ldr	r3, [pc, #432]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f0      	bne.n	800cc80 <HAL_RCC_OscConfig+0xe8>
 800cc9e:	e000      	b.n	800cca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d063      	beq.n	800cd76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ccae:	4b65      	ldr	r3, [pc, #404]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f003 030c 	and.w	r3, r3, #12
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00b      	beq.n	800ccd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccba:	4b62      	ldr	r3, [pc, #392]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d11c      	bne.n	800cd00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccc6:	4b5f      	ldr	r3, [pc, #380]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d116      	bne.n	800cd00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccd2:	4b5c      	ldr	r3, [pc, #368]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0302 	and.w	r3, r3, #2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d005      	beq.n	800ccea <HAL_RCC_OscConfig+0x152>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d001      	beq.n	800ccea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e1bb      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccea:	4b56      	ldr	r3, [pc, #344]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	4952      	ldr	r1, [pc, #328]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccfe:	e03a      	b.n	800cd76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d020      	beq.n	800cd4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd08:	4b4f      	ldr	r3, [pc, #316]	; (800ce48 <HAL_RCC_OscConfig+0x2b0>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd0e:	f7fe f9ef 	bl	800b0f0 <HAL_GetTick>
 800cd12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd14:	e008      	b.n	800cd28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd16:	f7fe f9eb 	bl	800b0f0 <HAL_GetTick>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d901      	bls.n	800cd28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cd24:	2303      	movs	r3, #3
 800cd26:	e19c      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd28:	4b46      	ldr	r3, [pc, #280]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0f0      	beq.n	800cd16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd34:	4b43      	ldr	r3, [pc, #268]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	4940      	ldr	r1, [pc, #256]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cd44:	4313      	orrs	r3, r2
 800cd46:	600b      	str	r3, [r1, #0]
 800cd48:	e015      	b.n	800cd76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd4a:	4b3f      	ldr	r3, [pc, #252]	; (800ce48 <HAL_RCC_OscConfig+0x2b0>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd50:	f7fe f9ce 	bl	800b0f0 <HAL_GetTick>
 800cd54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd56:	e008      	b.n	800cd6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd58:	f7fe f9ca 	bl	800b0f0 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d901      	bls.n	800cd6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e17b      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd6a:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f003 0302 	and.w	r3, r3, #2
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1f0      	bne.n	800cd58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 0308 	and.w	r3, r3, #8
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d030      	beq.n	800cde4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d016      	beq.n	800cdb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd8a:	4b30      	ldr	r3, [pc, #192]	; (800ce4c <HAL_RCC_OscConfig+0x2b4>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd90:	f7fe f9ae 	bl	800b0f0 <HAL_GetTick>
 800cd94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd96:	e008      	b.n	800cdaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd98:	f7fe f9aa 	bl	800b0f0 <HAL_GetTick>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d901      	bls.n	800cdaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e15b      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdaa:	4b26      	ldr	r3, [pc, #152]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f0      	beq.n	800cd98 <HAL_RCC_OscConfig+0x200>
 800cdb6:	e015      	b.n	800cde4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdb8:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <HAL_RCC_OscConfig+0x2b4>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdbe:	f7fe f997 	bl	800b0f0 <HAL_GetTick>
 800cdc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdc4:	e008      	b.n	800cdd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cdc6:	f7fe f993 	bl	800b0f0 <HAL_GetTick>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d901      	bls.n	800cdd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	e144      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cdda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1f0      	bne.n	800cdc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f003 0304 	and.w	r3, r3, #4
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 80a0 	beq.w	800cf32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdf6:	4b13      	ldr	r3, [pc, #76]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10f      	bne.n	800ce22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce02:	2300      	movs	r3, #0
 800ce04:	60bb      	str	r3, [r7, #8]
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0a:	4a0e      	ldr	r2, [pc, #56]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ce0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce10:	6413      	str	r3, [r2, #64]	; 0x40
 800ce12:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <HAL_RCC_OscConfig+0x2ac>)
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce1a:	60bb      	str	r3, [r7, #8]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce22:	4b0b      	ldr	r3, [pc, #44]	; (800ce50 <HAL_RCC_OscConfig+0x2b8>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d121      	bne.n	800ce72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce2e:	4b08      	ldr	r3, [pc, #32]	; (800ce50 <HAL_RCC_OscConfig+0x2b8>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a07      	ldr	r2, [pc, #28]	; (800ce50 <HAL_RCC_OscConfig+0x2b8>)
 800ce34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce3a:	f7fe f959 	bl	800b0f0 <HAL_GetTick>
 800ce3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce40:	e011      	b.n	800ce66 <HAL_RCC_OscConfig+0x2ce>
 800ce42:	bf00      	nop
 800ce44:	40023800 	.word	0x40023800
 800ce48:	42470000 	.word	0x42470000
 800ce4c:	42470e80 	.word	0x42470e80
 800ce50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce54:	f7fe f94c 	bl	800b0f0 <HAL_GetTick>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d901      	bls.n	800ce66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ce62:	2303      	movs	r3, #3
 800ce64:	e0fd      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce66:	4b81      	ldr	r3, [pc, #516]	; (800d06c <HAL_RCC_OscConfig+0x4d4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d0f0      	beq.n	800ce54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d106      	bne.n	800ce88 <HAL_RCC_OscConfig+0x2f0>
 800ce7a:	4b7d      	ldr	r3, [pc, #500]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ce7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce7e:	4a7c      	ldr	r2, [pc, #496]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ce80:	f043 0301 	orr.w	r3, r3, #1
 800ce84:	6713      	str	r3, [r2, #112]	; 0x70
 800ce86:	e01c      	b.n	800cec2 <HAL_RCC_OscConfig+0x32a>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	2b05      	cmp	r3, #5
 800ce8e:	d10c      	bne.n	800ceaa <HAL_RCC_OscConfig+0x312>
 800ce90:	4b77      	ldr	r3, [pc, #476]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ce92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce94:	4a76      	ldr	r2, [pc, #472]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ce96:	f043 0304 	orr.w	r3, r3, #4
 800ce9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ce9c:	4b74      	ldr	r3, [pc, #464]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ce9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea0:	4a73      	ldr	r2, [pc, #460]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	6713      	str	r3, [r2, #112]	; 0x70
 800cea8:	e00b      	b.n	800cec2 <HAL_RCC_OscConfig+0x32a>
 800ceaa:	4b71      	ldr	r3, [pc, #452]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ceac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceae:	4a70      	ldr	r2, [pc, #448]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ceb0:	f023 0301 	bic.w	r3, r3, #1
 800ceb4:	6713      	str	r3, [r2, #112]	; 0x70
 800ceb6:	4b6e      	ldr	r3, [pc, #440]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceba:	4a6d      	ldr	r2, [pc, #436]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cebc:	f023 0304 	bic.w	r3, r3, #4
 800cec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d015      	beq.n	800cef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceca:	f7fe f911 	bl	800b0f0 <HAL_GetTick>
 800cece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ced0:	e00a      	b.n	800cee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ced2:	f7fe f90d 	bl	800b0f0 <HAL_GetTick>
 800ced6:	4602      	mov	r2, r0
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d901      	bls.n	800cee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e0bc      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cee8:	4b61      	ldr	r3, [pc, #388]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800ceea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceec:	f003 0302 	and.w	r3, r3, #2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0ee      	beq.n	800ced2 <HAL_RCC_OscConfig+0x33a>
 800cef4:	e014      	b.n	800cf20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cef6:	f7fe f8fb 	bl	800b0f0 <HAL_GetTick>
 800cefa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cefc:	e00a      	b.n	800cf14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cefe:	f7fe f8f7 	bl	800b0f0 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d901      	bls.n	800cf14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e0a6      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf14:	4b56      	ldr	r3, [pc, #344]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cf16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf18:	f003 0302 	and.w	r3, r3, #2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1ee      	bne.n	800cefe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d105      	bne.n	800cf32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf26:	4b52      	ldr	r3, [pc, #328]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2a:	4a51      	ldr	r2, [pc, #324]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cf2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 8092 	beq.w	800d060 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf3c:	4b4c      	ldr	r3, [pc, #304]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	f003 030c 	and.w	r3, r3, #12
 800cf44:	2b08      	cmp	r3, #8
 800cf46:	d05c      	beq.n	800d002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	699b      	ldr	r3, [r3, #24]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d141      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf50:	4b48      	ldr	r3, [pc, #288]	; (800d074 <HAL_RCC_OscConfig+0x4dc>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf56:	f7fe f8cb 	bl	800b0f0 <HAL_GetTick>
 800cf5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf5c:	e008      	b.n	800cf70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf5e:	f7fe f8c7 	bl	800b0f0 <HAL_GetTick>
 800cf62:	4602      	mov	r2, r0
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d901      	bls.n	800cf70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e078      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf70:	4b3f      	ldr	r3, [pc, #252]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f0      	bne.n	800cf5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	69da      	ldr	r2, [r3, #28]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	431a      	orrs	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8a:	019b      	lsls	r3, r3, #6
 800cf8c:	431a      	orrs	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	085b      	lsrs	r3, r3, #1
 800cf94:	3b01      	subs	r3, #1
 800cf96:	041b      	lsls	r3, r3, #16
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	061b      	lsls	r3, r3, #24
 800cfa0:	4933      	ldr	r1, [pc, #204]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfa6:	4b33      	ldr	r3, [pc, #204]	; (800d074 <HAL_RCC_OscConfig+0x4dc>)
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfac:	f7fe f8a0 	bl	800b0f0 <HAL_GetTick>
 800cfb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfb2:	e008      	b.n	800cfc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfb4:	f7fe f89c 	bl	800b0f0 <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d901      	bls.n	800cfc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e04d      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfc6:	4b2a      	ldr	r3, [pc, #168]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0f0      	beq.n	800cfb4 <HAL_RCC_OscConfig+0x41c>
 800cfd2:	e045      	b.n	800d060 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfd4:	4b27      	ldr	r3, [pc, #156]	; (800d074 <HAL_RCC_OscConfig+0x4dc>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfda:	f7fe f889 	bl	800b0f0 <HAL_GetTick>
 800cfde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfe0:	e008      	b.n	800cff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfe2:	f7fe f885 	bl	800b0f0 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d901      	bls.n	800cff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cff0:	2303      	movs	r3, #3
 800cff2:	e036      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cff4:	4b1e      	ldr	r3, [pc, #120]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1f0      	bne.n	800cfe2 <HAL_RCC_OscConfig+0x44a>
 800d000:	e02e      	b.n	800d060 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e029      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d00e:	4b18      	ldr	r3, [pc, #96]	; (800d070 <HAL_RCC_OscConfig+0x4d8>)
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d11c      	bne.n	800d05c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d115      	bne.n	800d05c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d036:	4013      	ands	r3, r2
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d10d      	bne.n	800d05c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d106      	bne.n	800d05c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d058:	429a      	cmp	r2, r3
 800d05a:	d001      	beq.n	800d060 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e000      	b.n	800d062 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	40007000 	.word	0x40007000
 800d070:	40023800 	.word	0x40023800
 800d074:	42470060 	.word	0x42470060

0800d078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e0cc      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d08c:	4b68      	ldr	r3, [pc, #416]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 030f 	and.w	r3, r3, #15
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	429a      	cmp	r2, r3
 800d098:	d90c      	bls.n	800d0b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d09a:	4b65      	ldr	r3, [pc, #404]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	b2d2      	uxtb	r2, r2
 800d0a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0a2:	4b63      	ldr	r3, [pc, #396]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f003 030f 	and.w	r3, r3, #15
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d001      	beq.n	800d0b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e0b8      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0302 	and.w	r3, r3, #2
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d020      	beq.n	800d102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0304 	and.w	r3, r3, #4
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d005      	beq.n	800d0d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d0cc:	4b59      	ldr	r3, [pc, #356]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	4a58      	ldr	r2, [pc, #352]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d0d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0308 	and.w	r3, r3, #8
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d005      	beq.n	800d0f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d0e4:	4b53      	ldr	r3, [pc, #332]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	4a52      	ldr	r2, [pc, #328]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d0ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d0f0:	4b50      	ldr	r3, [pc, #320]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	494d      	ldr	r1, [pc, #308]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d0fe:	4313      	orrs	r3, r2
 800d100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d044      	beq.n	800d198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d107      	bne.n	800d126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d116:	4b47      	ldr	r3, [pc, #284]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d119      	bne.n	800d156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e07f      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d003      	beq.n	800d136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d132:	2b03      	cmp	r3, #3
 800d134:	d107      	bne.n	800d146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d136:	4b3f      	ldr	r3, [pc, #252]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d109      	bne.n	800d156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e06f      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d146:	4b3b      	ldr	r3, [pc, #236]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 0302 	and.w	r3, r3, #2
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e067      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d156:	4b37      	ldr	r3, [pc, #220]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f023 0203 	bic.w	r2, r3, #3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4934      	ldr	r1, [pc, #208]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d164:	4313      	orrs	r3, r2
 800d166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d168:	f7fd ffc2 	bl	800b0f0 <HAL_GetTick>
 800d16c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d16e:	e00a      	b.n	800d186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d170:	f7fd ffbe 	bl	800b0f0 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d17e:	4293      	cmp	r3, r2
 800d180:	d901      	bls.n	800d186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e04f      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d186:	4b2b      	ldr	r3, [pc, #172]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	f003 020c 	and.w	r2, r3, #12
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	429a      	cmp	r2, r3
 800d196:	d1eb      	bne.n	800d170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d198:	4b25      	ldr	r3, [pc, #148]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 030f 	and.w	r3, r3, #15
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d20c      	bcs.n	800d1c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1a6:	4b22      	ldr	r3, [pc, #136]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	b2d2      	uxtb	r2, r2
 800d1ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1ae:	4b20      	ldr	r3, [pc, #128]	; (800d230 <HAL_RCC_ClockConfig+0x1b8>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 030f 	and.w	r3, r3, #15
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d001      	beq.n	800d1c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e032      	b.n	800d226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d008      	beq.n	800d1de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d1cc:	4b19      	ldr	r3, [pc, #100]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	4916      	ldr	r1, [pc, #88]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f003 0308 	and.w	r3, r3, #8
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d009      	beq.n	800d1fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d1ea:	4b12      	ldr	r3, [pc, #72]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	490e      	ldr	r1, [pc, #56]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d1fe:	f000 f821 	bl	800d244 <HAL_RCC_GetSysClockFreq>
 800d202:	4601      	mov	r1, r0
 800d204:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <HAL_RCC_ClockConfig+0x1bc>)
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	091b      	lsrs	r3, r3, #4
 800d20a:	f003 030f 	and.w	r3, r3, #15
 800d20e:	4a0a      	ldr	r2, [pc, #40]	; (800d238 <HAL_RCC_ClockConfig+0x1c0>)
 800d210:	5cd3      	ldrb	r3, [r2, r3]
 800d212:	fa21 f303 	lsr.w	r3, r1, r3
 800d216:	4a09      	ldr	r2, [pc, #36]	; (800d23c <HAL_RCC_ClockConfig+0x1c4>)
 800d218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <HAL_RCC_ClockConfig+0x1c8>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fd ff22 	bl	800b068 <HAL_InitTick>

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	40023c00 	.word	0x40023c00
 800d234:	40023800 	.word	0x40023800
 800d238:	080147ec 	.word	0x080147ec
 800d23c:	20000000 	.word	0x20000000
 800d240:	2000005c 	.word	0x2000005c

0800d244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d24a:	2300      	movs	r3, #0
 800d24c:	607b      	str	r3, [r7, #4]
 800d24e:	2300      	movs	r3, #0
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	2300      	movs	r3, #0
 800d254:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d25a:	4b50      	ldr	r3, [pc, #320]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	f003 030c 	and.w	r3, r3, #12
 800d262:	2b04      	cmp	r3, #4
 800d264:	d007      	beq.n	800d276 <HAL_RCC_GetSysClockFreq+0x32>
 800d266:	2b08      	cmp	r3, #8
 800d268:	d008      	beq.n	800d27c <HAL_RCC_GetSysClockFreq+0x38>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f040 808d 	bne.w	800d38a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d270:	4b4b      	ldr	r3, [pc, #300]	; (800d3a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d272:	60bb      	str	r3, [r7, #8]
       break;
 800d274:	e08c      	b.n	800d390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d276:	4b4b      	ldr	r3, [pc, #300]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d278:	60bb      	str	r3, [r7, #8]
      break;
 800d27a:	e089      	b.n	800d390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d27c:	4b47      	ldr	r3, [pc, #284]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d286:	4b45      	ldr	r3, [pc, #276]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d023      	beq.n	800d2da <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d292:	4b42      	ldr	r3, [pc, #264]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	099b      	lsrs	r3, r3, #6
 800d298:	f04f 0400 	mov.w	r4, #0
 800d29c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d2a0:	f04f 0200 	mov.w	r2, #0
 800d2a4:	ea03 0501 	and.w	r5, r3, r1
 800d2a8:	ea04 0602 	and.w	r6, r4, r2
 800d2ac:	4a3d      	ldr	r2, [pc, #244]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d2ae:	fb02 f106 	mul.w	r1, r2, r6
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	fb02 f205 	mul.w	r2, r2, r5
 800d2b8:	440a      	add	r2, r1
 800d2ba:	493a      	ldr	r1, [pc, #232]	; (800d3a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d2bc:	fba5 0101 	umull	r0, r1, r5, r1
 800d2c0:	1853      	adds	r3, r2, r1
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f04f 0400 	mov.w	r4, #0
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	4623      	mov	r3, r4
 800d2ce:	f7f3 fcf3 	bl	8000cb8 <__aeabi_uldivmod>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	e049      	b.n	800d36e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d2da:	4b30      	ldr	r3, [pc, #192]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	099b      	lsrs	r3, r3, #6
 800d2e0:	f04f 0400 	mov.w	r4, #0
 800d2e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d2e8:	f04f 0200 	mov.w	r2, #0
 800d2ec:	ea03 0501 	and.w	r5, r3, r1
 800d2f0:	ea04 0602 	and.w	r6, r4, r2
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	f04f 0300 	mov.w	r3, #0
 800d2fc:	f04f 0400 	mov.w	r4, #0
 800d300:	0154      	lsls	r4, r2, #5
 800d302:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d306:	014b      	lsls	r3, r1, #5
 800d308:	4619      	mov	r1, r3
 800d30a:	4622      	mov	r2, r4
 800d30c:	1b49      	subs	r1, r1, r5
 800d30e:	eb62 0206 	sbc.w	r2, r2, r6
 800d312:	f04f 0300 	mov.w	r3, #0
 800d316:	f04f 0400 	mov.w	r4, #0
 800d31a:	0194      	lsls	r4, r2, #6
 800d31c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d320:	018b      	lsls	r3, r1, #6
 800d322:	1a5b      	subs	r3, r3, r1
 800d324:	eb64 0402 	sbc.w	r4, r4, r2
 800d328:	f04f 0100 	mov.w	r1, #0
 800d32c:	f04f 0200 	mov.w	r2, #0
 800d330:	00e2      	lsls	r2, r4, #3
 800d332:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d336:	00d9      	lsls	r1, r3, #3
 800d338:	460b      	mov	r3, r1
 800d33a:	4614      	mov	r4, r2
 800d33c:	195b      	adds	r3, r3, r5
 800d33e:	eb44 0406 	adc.w	r4, r4, r6
 800d342:	f04f 0100 	mov.w	r1, #0
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	02a2      	lsls	r2, r4, #10
 800d34c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d350:	0299      	lsls	r1, r3, #10
 800d352:	460b      	mov	r3, r1
 800d354:	4614      	mov	r4, r2
 800d356:	4618      	mov	r0, r3
 800d358:	4621      	mov	r1, r4
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f04f 0400 	mov.w	r4, #0
 800d360:	461a      	mov	r2, r3
 800d362:	4623      	mov	r3, r4
 800d364:	f7f3 fca8 	bl	8000cb8 <__aeabi_uldivmod>
 800d368:	4603      	mov	r3, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d36e:	4b0b      	ldr	r3, [pc, #44]	; (800d39c <HAL_RCC_GetSysClockFreq+0x158>)
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	0c1b      	lsrs	r3, r3, #16
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	3301      	adds	r3, #1
 800d37a:	005b      	lsls	r3, r3, #1
 800d37c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	fbb2 f3f3 	udiv	r3, r2, r3
 800d386:	60bb      	str	r3, [r7, #8]
      break;
 800d388:	e002      	b.n	800d390 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d38a:	4b05      	ldr	r3, [pc, #20]	; (800d3a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d38c:	60bb      	str	r3, [r7, #8]
      break;
 800d38e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d390:	68bb      	ldr	r3, [r7, #8]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39a:	bf00      	nop
 800d39c:	40023800 	.word	0x40023800
 800d3a0:	00f42400 	.word	0x00f42400
 800d3a4:	017d7840 	.word	0x017d7840

0800d3a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d3ac:	4b03      	ldr	r3, [pc, #12]	; (800d3bc <HAL_RCC_GetHCLKFreq+0x14>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	20000000 	.word	0x20000000

0800d3c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d3c4:	f7ff fff0 	bl	800d3a8 <HAL_RCC_GetHCLKFreq>
 800d3c8:	4601      	mov	r1, r0
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	0a9b      	lsrs	r3, r3, #10
 800d3d0:	f003 0307 	and.w	r3, r3, #7
 800d3d4:	4a03      	ldr	r2, [pc, #12]	; (800d3e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d3d6:	5cd3      	ldrb	r3, [r2, r3]
 800d3d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	40023800 	.word	0x40023800
 800d3e4:	080147fc 	.word	0x080147fc

0800d3e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d3ec:	f7ff ffdc 	bl	800d3a8 <HAL_RCC_GetHCLKFreq>
 800d3f0:	4601      	mov	r1, r0
 800d3f2:	4b05      	ldr	r3, [pc, #20]	; (800d408 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	0b5b      	lsrs	r3, r3, #13
 800d3f8:	f003 0307 	and.w	r3, r3, #7
 800d3fc:	4a03      	ldr	r2, [pc, #12]	; (800d40c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d3fe:	5cd3      	ldrb	r3, [r2, r3]
 800d400:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d404:	4618      	mov	r0, r3
 800d406:	bd80      	pop	{r7, pc}
 800d408:	40023800 	.word	0x40023800
 800d40c:	080147fc 	.word	0x080147fc

0800d410 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e022      	b.n	800d468 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d105      	bne.n	800d43a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7f7 faaf 	bl	8004998 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2203      	movs	r2, #3
 800d43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f814 	bl	800d470 <HAL_SD_InitCard>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e00a      	b.n	800d468 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d470:	b5b0      	push	{r4, r5, r7, lr}
 800d472:	b08e      	sub	sp, #56	; 0x38
 800d474:	af04      	add	r7, sp, #16
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d478:	2300      	movs	r3, #0
 800d47a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d47c:	2300      	movs	r3, #0
 800d47e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d480:	2300      	movs	r3, #0
 800d482:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d484:	2300      	movs	r3, #0
 800d486:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d488:	2300      	movs	r3, #0
 800d48a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d48c:	2376      	movs	r3, #118	; 0x76
 800d48e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681d      	ldr	r5, [r3, #0]
 800d494:	466c      	mov	r4, sp
 800d496:	f107 0314 	add.w	r3, r7, #20
 800d49a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d49e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d4a2:	f107 0308 	add.w	r3, r7, #8
 800d4a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f003 fe3d 	bl	8011128 <SDIO_Init>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e031      	b.n	800d524 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d4c0:	4b1a      	ldr	r3, [pc, #104]	; (800d52c <HAL_SD_InitCard+0xbc>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f003 fe75 	bl	80111ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d4d0:	4b16      	ldr	r3, [pc, #88]	; (800d52c <HAL_SD_InitCard+0xbc>)
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 ffe6 	bl	800e4a8 <SD_PowerON>
 800d4dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e013      	b.n	800d524 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 ff05 	bl	800e30c <SD_InitCard>
 800d502:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00b      	beq.n	800d522 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	431a      	orrs	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e000      	b.n	800d524 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3728      	adds	r7, #40	; 0x28
 800d528:	46bd      	mov	sp, r7
 800d52a:	bdb0      	pop	{r4, r5, r7, pc}
 800d52c:	422580a0 	.word	0x422580a0

0800d530 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08c      	sub	sp, #48	; 0x30
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
 800d53c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d107      	bne.n	800d558 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e0c9      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b01      	cmp	r3, #1
 800d562:	f040 80c2 	bne.w	800d6ea <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	441a      	add	r2, r3
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d576:	429a      	cmp	r2, r3
 800d578:	d907      	bls.n	800d58a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e0b0      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2203      	movs	r2, #3
 800d58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2200      	movs	r2, #0
 800d598:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	6812      	ldr	r2, [r2, #0]
 800d5a4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800d5a8:	f043 0302 	orr.w	r3, r3, #2
 800d5ac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b2:	4a50      	ldr	r2, [pc, #320]	; (800d6f4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d5b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ba:	4a4f      	ldr	r2, [pc, #316]	; (800d6f8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d5bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3380      	adds	r3, #128	; 0x80
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	025b      	lsls	r3, r3, #9
 800d5d8:	089b      	lsrs	r3, r3, #2
 800d5da:	f7fe fd3f 	bl	800c05c <HAL_DMA_Start_IT>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d017      	beq.n	800d614 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d5f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a40      	ldr	r2, [pc, #256]	; (800d6fc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e06b      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d614:	4b3a      	ldr	r3, [pc, #232]	; (800d700 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800d616:	2201      	movs	r2, #1
 800d618:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d002      	beq.n	800d628 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	025b      	lsls	r3, r3, #9
 800d626:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d630:	4618      	mov	r0, r3
 800d632:	f003 fe55 	bl	80112e0 <SDMMC_CmdBlockLength>
 800d636:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00f      	beq.n	800d65e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a2e      	ldr	r2, [pc, #184]	; (800d6fc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d644:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	431a      	orrs	r2, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e046      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d65e:	f04f 33ff 	mov.w	r3, #4294967295
 800d662:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	025b      	lsls	r3, r3, #9
 800d668:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d66a:	2390      	movs	r3, #144	; 0x90
 800d66c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d66e:	2302      	movs	r3, #2
 800d670:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d672:	2300      	movs	r3, #0
 800d674:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d676:	2301      	movs	r3, #1
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f107 0210 	add.w	r2, r7, #16
 800d682:	4611      	mov	r1, r2
 800d684:	4618      	mov	r0, r3
 800d686:	f003 fdff 	bl	8011288 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d90a      	bls.n	800d6a6 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2282      	movs	r2, #130	; 0x82
 800d694:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d69c:	4618      	mov	r0, r3
 800d69e:	f003 fe63 	bl	8011368 <SDMMC_CmdReadMultiBlock>
 800d6a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d6a4:	e009      	b.n	800d6ba <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2281      	movs	r2, #129	; 0x81
 800d6aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f003 fe36 	bl	8011324 <SDMMC_CmdReadSingleBlock>
 800d6b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d012      	beq.n	800d6e6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a0d      	ldr	r2, [pc, #52]	; (800d6fc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d6c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e002      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e000      	b.n	800d6ec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800d6ea:	2302      	movs	r3, #2
  }
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3730      	adds	r7, #48	; 0x30
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	0800e11b 	.word	0x0800e11b
 800d6f8:	0800e18d 	.word	0x0800e18d
 800d6fc:	004005ff 	.word	0x004005ff
 800d700:	4225858c 	.word	0x4225858c

0800d704 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08c      	sub	sp, #48	; 0x30
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d107      	bne.n	800d72c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d728:	2301      	movs	r3, #1
 800d72a:	e0ce      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b01      	cmp	r3, #1
 800d736:	f040 80c7 	bne.w	800d8c8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	441a      	add	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d907      	bls.n	800d75e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d752:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e0b5      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2203      	movs	r2, #3
 800d762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2200      	movs	r2, #0
 800d76c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	6812      	ldr	r2, [r2, #0]
 800d778:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800d77c:	f043 0302 	orr.w	r3, r3, #2
 800d780:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	4a53      	ldr	r2, [pc, #332]	; (800d8d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d78e:	4a52      	ldr	r2, [pc, #328]	; (800d8d8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d790:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d796:	2200      	movs	r2, #0
 800d798:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d002      	beq.n	800d7a8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	025b      	lsls	r3, r3, #9
 800d7a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f003 fd95 	bl	80112e0 <SDMMC_CmdBlockLength>
 800d7b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00f      	beq.n	800d7de <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a46      	ldr	r2, [pc, #280]	; (800d8dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800d7c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e075      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d90a      	bls.n	800d7fa <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	22a0      	movs	r2, #160	; 0xa0
 800d7e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f003 fdfd 	bl	80113f0 <SDMMC_CmdWriteMultiBlock>
 800d7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d7f8:	e009      	b.n	800d80e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2290      	movs	r2, #144	; 0x90
 800d7fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d806:	4618      	mov	r0, r3
 800d808:	f003 fdd0 	bl	80113ac <SDMMC_CmdWriteSingleBlock>
 800d80c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d012      	beq.n	800d83a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a30      	ldr	r2, [pc, #192]	; (800d8dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	431a      	orrs	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e047      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d83a:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d844:	68b9      	ldr	r1, [r7, #8]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3380      	adds	r3, #128	; 0x80
 800d84c:	461a      	mov	r2, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	025b      	lsls	r3, r3, #9
 800d852:	089b      	lsrs	r3, r3, #2
 800d854:	f7fe fc02 	bl	800c05c <HAL_DMA_Start_IT>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d01c      	beq.n	800d898 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	6812      	ldr	r2, [r2, #0]
 800d868:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800d86c:	f023 0302 	bic.w	r3, r3, #2
 800d870:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a19      	ldr	r2, [pc, #100]	; (800d8dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e018      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d898:	f04f 33ff 	mov.w	r3, #4294967295
 800d89c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	025b      	lsls	r3, r3, #9
 800d8a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d8a4:	2390      	movs	r3, #144	; 0x90
 800d8a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f107 0210 	add.w	r2, r7, #16
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f003 fce2 	bl	8011288 <SDIO_ConfigData>

      return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e000      	b.n	800d8ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d8c8:	2302      	movs	r3, #2
  }
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3730      	adds	r7, #48	; 0x30
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0800e0f1 	.word	0x0800e0f1
 800d8d8:	0800e18d 	.word	0x0800e18d
 800d8dc:	004005ff 	.word	0x004005ff
 800d8e0:	4225858c 	.word	0x4225858c

0800d8e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d008      	beq.n	800d912 <HAL_SD_IRQHandler+0x2e>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f003 0308 	and.w	r3, r3, #8
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 ffe2 	bl	800e8d4 <SD_Read_IT>
 800d910:	e165      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 808f 	beq.w	800da40 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d92a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800d93a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d93e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0201 	bic.w	r2, r2, #1
 800d94e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f003 0308 	and.w	r3, r3, #8
 800d956:	2b00      	cmp	r3, #0
 800d958:	d039      	beq.n	800d9ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	2b00      	cmp	r3, #0
 800d962:	d104      	bne.n	800d96e <HAL_SD_IRQHandler+0x8a>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f003 0320 	and.w	r3, r3, #32
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d011      	beq.n	800d992 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4618      	mov	r0, r3
 800d974:	f003 fd5e 	bl	8011434 <SDMMC_CmdStopTransfer>
 800d978:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d008      	beq.n	800d992 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	431a      	orrs	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 f92f 	bl	800dbf0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f240 523a 	movw	r2, #1338	; 0x53a
 800d99a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d104      	bne.n	800d9be <HAL_SD_IRQHandler+0xda>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7f6 ffca 	bl	8004958 <HAL_SD_RxCpltCallback>
 800d9c4:	e10b      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7f6 ffd6 	bl	8004978 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d9cc:	e107      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 8102 	beq.w	800dbde <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f003 0320 	and.w	r3, r3, #32
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d011      	beq.n	800da08 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f003 fd23 	bl	8011434 <SDMMC_CmdStopTransfer>
 800d9ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d008      	beq.n	800da08 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	431a      	orrs	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f8f4 	bl	800dbf0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f040 80e5 	bne.w	800dbde <HAL_SD_IRQHandler+0x2fa>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f003 0302 	and.w	r3, r3, #2
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f040 80df 	bne.w	800dbde <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f022 0208 	bic.w	r2, r2, #8
 800da2e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7f6 ff9d 	bl	8004978 <HAL_SD_TxCpltCallback>
}
 800da3e:	e0ce      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d008      	beq.n	800da60 <HAL_SD_IRQHandler+0x17c>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f003 0308 	and.w	r3, r3, #8
 800da54:	2b00      	cmp	r3, #0
 800da56:	d003      	beq.n	800da60 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 ff8c 	bl	800e976 <SD_Write_IT>
 800da5e:	e0be      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da66:	f240 233a 	movw	r3, #570	; 0x23a
 800da6a:	4013      	ands	r3, r2
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 80b6 	beq.w	800dbde <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da78:	f003 0302 	and.w	r3, r3, #2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	f043 0202 	orr.w	r2, r3, #2
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da92:	f003 0308 	and.w	r3, r3, #8
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9e:	f043 0208 	orr.w	r2, r3, #8
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daac:	f003 0320 	and.w	r3, r3, #32
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab8:	f043 0220 	orr.w	r2, r3, #32
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	f003 0310 	and.w	r3, r3, #16
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad2:	f043 0210 	orr.w	r2, r3, #16
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daec:	f043 0208 	orr.w	r2, r3, #8
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f240 723a 	movw	r2, #1850	; 0x73a
 800dafc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800db0c:	f023 0302 	bic.w	r3, r3, #2
 800db10:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4618      	mov	r0, r3
 800db18:	f003 fc8c 	bl	8011434 <SDMMC_CmdStopTransfer>
 800db1c:	4602      	mov	r2, r0
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db22:	431a      	orrs	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 0308 	and.w	r3, r3, #8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00a      	beq.n	800db48 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f000 f855 	bl	800dbf0 <HAL_SD_ErrorCallback>
}
 800db46:	e04a      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d045      	beq.n	800dbde <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f003 0310 	and.w	r3, r3, #16
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d104      	bne.n	800db66 <HAL_SD_IRQHandler+0x282>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f003 0320 	and.w	r3, r3, #32
 800db62:	2b00      	cmp	r3, #0
 800db64:	d011      	beq.n	800db8a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6a:	4a1f      	ldr	r2, [pc, #124]	; (800dbe8 <HAL_SD_IRQHandler+0x304>)
 800db6c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe faca 	bl	800c10c <HAL_DMA_Abort_IT>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d02f      	beq.n	800dbde <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fb54 	bl	800e230 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800db88:	e029      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f003 0301 	and.w	r3, r3, #1
 800db90:	2b00      	cmp	r3, #0
 800db92:	d104      	bne.n	800db9e <HAL_SD_IRQHandler+0x2ba>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f003 0302 	and.w	r3, r3, #2
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d011      	beq.n	800dbc2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba2:	4a12      	ldr	r2, [pc, #72]	; (800dbec <HAL_SD_IRQHandler+0x308>)
 800dba4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe faae 	bl	800c10c <HAL_DMA_Abort_IT>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d013      	beq.n	800dbde <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 fb6f 	bl	800e29e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dbc0:	e00d      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f814 	bl	800dc04 <HAL_SD_AbortCallback>
}
 800dbdc:	e7ff      	b.n	800dbde <HAL_SD_IRQHandler+0x2fa>
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	0800e231 	.word	0x0800e231
 800dbec:	0800e29f 	.word	0x0800e29f

0800dbf0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc26:	0f9b      	lsrs	r3, r3, #30
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc32:	0e9b      	lsrs	r3, r3, #26
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc44:	0e1b      	lsrs	r3, r3, #24
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	f003 0303 	and.w	r3, r3, #3
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc56:	0c1b      	lsrs	r3, r3, #16
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc78:	0d1b      	lsrs	r3, r3, #20
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc84:	0c1b      	lsrs	r3, r3, #16
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	f003 030f 	and.w	r3, r3, #15
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc96:	0bdb      	lsrs	r3, r3, #15
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dca8:	0b9b      	lsrs	r3, r3, #14
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	f003 0301 	and.w	r3, r3, #1
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcba:	0b5b      	lsrs	r3, r3, #13
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dccc:	0b1b      	lsrs	r3, r3, #12
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d163      	bne.n	800ddb0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcec:	009a      	lsls	r2, r3, #2
 800dcee:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800dcf8:	0f92      	lsrs	r2, r2, #30
 800dcfa:	431a      	orrs	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd04:	0edb      	lsrs	r3, r3, #27
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	f003 0307 	and.w	r3, r3, #7
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd16:	0e1b      	lsrs	r3, r3, #24
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	f003 0307 	and.w	r3, r3, #7
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd28:	0d5b      	lsrs	r3, r3, #21
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f003 0307 	and.w	r3, r3, #7
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3a:	0c9b      	lsrs	r3, r3, #18
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 0307 	and.w	r3, r3, #7
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd4c:	0bdb      	lsrs	r3, r3, #15
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 0307 	and.w	r3, r3, #7
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	1c5a      	adds	r2, r3, #1
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	7e1b      	ldrb	r3, [r3, #24]
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	3302      	adds	r3, #2
 800dd70:	2201      	movs	r2, #1
 800dd72:	fa02 f303 	lsl.w	r3, r2, r3
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dd7a:	fb02 f203 	mul.w	r2, r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	7a1b      	ldrb	r3, [r3, #8]
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	f003 030f 	and.w	r3, r3, #15
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	409a      	lsls	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800dd9c:	0a52      	lsrs	r2, r2, #9
 800dd9e:	fb02 f203 	mul.w	r2, r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ddac:	661a      	str	r2, [r3, #96]	; 0x60
 800ddae:	e031      	b.n	800de14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d11d      	bne.n	800ddf4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddbc:	041b      	lsls	r3, r3, #16
 800ddbe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc6:	0c1b      	lsrs	r3, r3, #16
 800ddc8:	431a      	orrs	r2, r3
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	029a      	lsls	r2, r3, #10
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dde8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	661a      	str	r2, [r3, #96]	; 0x60
 800ddf2:	e00f      	b.n	800de14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a58      	ldr	r2, [pc, #352]	; (800df5c <HAL_SD_GetCardCSD+0x344>)
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	e09d      	b.n	800df50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de18:	0b9b      	lsrs	r3, r3, #14
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2a:	09db      	lsrs	r3, r3, #7
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de32:	b2da      	uxtb	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de42:	b2da      	uxtb	r2, r3
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de4c:	0fdb      	lsrs	r3, r3, #31
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de58:	0f5b      	lsrs	r3, r3, #29
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	f003 0303 	and.w	r3, r3, #3
 800de60:	b2da      	uxtb	r2, r3
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de6a:	0e9b      	lsrs	r3, r3, #26
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f003 0307 	and.w	r3, r3, #7
 800de72:	b2da      	uxtb	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7c:	0d9b      	lsrs	r3, r3, #22
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f003 030f 	and.w	r3, r3, #15
 800de84:	b2da      	uxtb	r2, r3
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8e:	0d5b      	lsrs	r3, r3, #21
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 0301 	and.w	r3, r3, #1
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deaa:	0c1b      	lsrs	r3, r3, #16
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800debe:	0bdb      	lsrs	r3, r3, #15
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	f003 0301 	and.w	r3, r3, #1
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded2:	0b9b      	lsrs	r3, r3, #14
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	f003 0301 	and.w	r3, r3, #1
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dee6:	0b5b      	lsrs	r3, r3, #13
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	f003 0301 	and.w	r3, r3, #1
 800deee:	b2da      	uxtb	r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800defa:	0b1b      	lsrs	r3, r3, #12
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0e:	0a9b      	lsrs	r3, r3, #10
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 0303 	and.w	r3, r3, #3
 800df16:	b2da      	uxtb	r2, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df22:	0a1b      	lsrs	r3, r3, #8
 800df24:	b2db      	uxtb	r3, r3
 800df26:	f003 0303 	and.w	r3, r3, #3
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df36:	085b      	lsrs	r3, r3, #1
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2201      	movs	r2, #1
 800df4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	004005ff 	.word	0x004005ff

0800df60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dfaa:	2300      	movs	r3, #0
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dfb8:	b5b0      	push	{r4, r5, r7, lr}
 800dfba:	b08e      	sub	sp, #56	; 0x38
 800dfbc:	af04      	add	r7, sp, #16
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2203      	movs	r2, #3
 800dfc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d02e      	beq.n	800e030 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfd8:	d106      	bne.n	800dfe8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	639a      	str	r2, [r3, #56]	; 0x38
 800dfe6:	e029      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfee:	d10a      	bne.n	800e006 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fb0f 	bl	800e614 <SD_WideBus_Enable>
 800dff6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	431a      	orrs	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	639a      	str	r2, [r3, #56]	; 0x38
 800e004:	e01a      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10a      	bne.n	800e022 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fb4c 	bl	800e6aa <SD_WideBus_Disable>
 800e012:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	639a      	str	r2, [r3, #56]	; 0x38
 800e020:	e00c      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	639a      	str	r2, [r3, #56]	; 0x38
 800e02e:	e005      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e034:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e040:	2b00      	cmp	r3, #0
 800e042:	d009      	beq.n	800e058 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a18      	ldr	r2, [pc, #96]	; (800e0ac <HAL_SD_ConfigWideBusOperation+0xf4>)
 800e04a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e024      	b.n	800e0a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	689b      	ldr	r3, [r3, #8]
 800e062:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	699b      	ldr	r3, [r3, #24]
 800e078:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681d      	ldr	r5, [r3, #0]
 800e07e:	466c      	mov	r4, sp
 800e080:	f107 0318 	add.w	r3, r7, #24
 800e084:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e08c:	f107 030c 	add.w	r3, r7, #12
 800e090:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e092:	4628      	mov	r0, r5
 800e094:	f003 f848 	bl	8011128 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3728      	adds	r7, #40	; 0x28
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	004005ff 	.word	0x004005ff

0800e0b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e0bc:	f107 030c 	add.w	r3, r7, #12
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fa7e 	bl	800e5c4 <SD_SendStatus>
 800e0c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d005      	beq.n	800e0dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	0a5b      	lsrs	r3, r3, #9
 800e0e0:	f003 030f 	and.w	r3, r3, #15
 800e0e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e0e6:	693b      	ldr	r3, [r7, #16]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e10c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e10e:	bf00      	nop
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e126:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e12c:	2b82      	cmp	r3, #130	; 0x82
 800e12e:	d111      	bne.n	800e154 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4618      	mov	r0, r3
 800e136:	f003 f97d 	bl	8011434 <SDMMC_CmdStopTransfer>
 800e13a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d008      	beq.n	800e154 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	431a      	orrs	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7ff fd4e 	bl	800dbf0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f022 0208 	bic.w	r2, r2, #8
 800e162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f240 523a 	movw	r2, #1338	; 0x53a
 800e16c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2200      	movs	r2, #0
 800e17a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f7f6 fbeb 	bl	8004958 <HAL_SD_RxCpltCallback>
#endif
}
 800e182:	bf00      	nop
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
	...

0800e18c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e198:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7fe f962 	bl	800c464 <HAL_DMA_GetError>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d03e      	beq.n	800e224 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d002      	beq.n	800e1c2 <SD_DMAError+0x36>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d12d      	bne.n	800e21e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a19      	ldr	r2, [pc, #100]	; (800e22c <SD_DMAError+0xa0>)
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e1d8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e1e6:	6978      	ldr	r0, [r7, #20]
 800e1e8:	f7ff ff62 	bl	800e0b0 <HAL_SD_GetCardState>
 800e1ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	2b06      	cmp	r3, #6
 800e1f2:	d002      	beq.n	800e1fa <SD_DMAError+0x6e>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b05      	cmp	r3, #5
 800e1f8:	d10a      	bne.n	800e210 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f003 f918 	bl	8011434 <SDMMC_CmdStopTransfer>
 800e204:	4602      	mov	r2, r0
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e20a:	431a      	orrs	r2, r3
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	2200      	movs	r2, #0
 800e21c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e21e:	6978      	ldr	r0, [r7, #20]
 800e220:	f7ff fce6 	bl	800dbf0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e224:	bf00      	nop
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	004005ff 	.word	0x004005ff

0800e230 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e23c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f240 523a 	movw	r2, #1338	; 0x53a
 800e246:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7ff ff31 	bl	800e0b0 <HAL_SD_GetCardState>
 800e24e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b06      	cmp	r3, #6
 800e262:	d002      	beq.n	800e26a <SD_DMATxAbort+0x3a>
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	2b05      	cmp	r3, #5
 800e268:	d10a      	bne.n	800e280 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f003 f8e0 	bl	8011434 <SDMMC_CmdStopTransfer>
 800e274:	4602      	mov	r2, r0
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e27a:	431a      	orrs	r2, r3
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	2b00      	cmp	r3, #0
 800e286:	d103      	bne.n	800e290 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7ff fcbb 	bl	800dc04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e28e:	e002      	b.n	800e296 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff fcad 	bl	800dbf0 <HAL_SD_ErrorCallback>
}
 800e296:	bf00      	nop
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fefa 	bl	800e0b0 <HAL_SD_GetCardState>
 800e2bc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2b06      	cmp	r3, #6
 800e2d0:	d002      	beq.n	800e2d8 <SD_DMARxAbort+0x3a>
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	2b05      	cmp	r3, #5
 800e2d6:	d10a      	bne.n	800e2ee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f003 f8a9 	bl	8011434 <SDMMC_CmdStopTransfer>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e8:	431a      	orrs	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d103      	bne.n	800e2fe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f7ff fc84 	bl	800dc04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e2fc:	e002      	b.n	800e304 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f7ff fc76 	bl	800dbf0 <HAL_SD_ErrorCallback>
}
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e30c:	b5b0      	push	{r4, r5, r7, lr}
 800e30e:	b094      	sub	sp, #80	; 0x50
 800e310:	af04      	add	r7, sp, #16
 800e312:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e314:	2301      	movs	r3, #1
 800e316:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f002 ff5b 	bl	80111d8 <SDIO_GetPowerState>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d102      	bne.n	800e32e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e328:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e32c:	e0b7      	b.n	800e49e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e332:	2b03      	cmp	r3, #3
 800e334:	d02f      	beq.n	800e396 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f003 f984 	bl	8011648 <SDMMC_CmdSendCID>
 800e340:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <SD_InitCard+0x40>
    {
      return errorstate;
 800e348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e34a:	e0a8      	b.n	800e49e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2100      	movs	r1, #0
 800e352:	4618      	mov	r0, r3
 800e354:	f002 ff85 	bl	8011262 <SDIO_GetResponse>
 800e358:	4602      	mov	r2, r0
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2104      	movs	r1, #4
 800e364:	4618      	mov	r0, r3
 800e366:	f002 ff7c 	bl	8011262 <SDIO_GetResponse>
 800e36a:	4602      	mov	r2, r0
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2108      	movs	r1, #8
 800e376:	4618      	mov	r0, r3
 800e378:	f002 ff73 	bl	8011262 <SDIO_GetResponse>
 800e37c:	4602      	mov	r2, r0
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	210c      	movs	r1, #12
 800e388:	4618      	mov	r0, r3
 800e38a:	f002 ff6a 	bl	8011262 <SDIO_GetResponse>
 800e38e:	4602      	mov	r2, r0
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e39a:	2b03      	cmp	r3, #3
 800e39c:	d00d      	beq.n	800e3ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f107 020e 	add.w	r2, r7, #14
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f003 f98a 	bl	80116c2 <SDMMC_CmdSetRelAdd>
 800e3ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <SD_InitCard+0xae>
    {
      return errorstate;
 800e3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b8:	e071      	b.n	800e49e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	d036      	beq.n	800e430 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e3c2:	89fb      	ldrh	r3, [r7, #14]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3d2:	041b      	lsls	r3, r3, #16
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f003 f954 	bl	8011684 <SDMMC_CmdSendCSD>
 800e3dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d001      	beq.n	800e3e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e6:	e05a      	b.n	800e49e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f002 ff37 	bl	8011262 <SDIO_GetResponse>
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2104      	movs	r1, #4
 800e400:	4618      	mov	r0, r3
 800e402:	f002 ff2e 	bl	8011262 <SDIO_GetResponse>
 800e406:	4602      	mov	r2, r0
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2108      	movs	r1, #8
 800e412:	4618      	mov	r0, r3
 800e414:	f002 ff25 	bl	8011262 <SDIO_GetResponse>
 800e418:	4602      	mov	r2, r0
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	210c      	movs	r1, #12
 800e424:	4618      	mov	r0, r3
 800e426:	f002 ff1c 	bl	8011262 <SDIO_GetResponse>
 800e42a:	4602      	mov	r2, r0
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2104      	movs	r1, #4
 800e436:	4618      	mov	r0, r3
 800e438:	f002 ff13 	bl	8011262 <SDIO_GetResponse>
 800e43c:	4603      	mov	r3, r0
 800e43e:	0d1a      	lsrs	r2, r3, #20
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e444:	f107 0310 	add.w	r3, r7, #16
 800e448:	4619      	mov	r1, r3
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f7ff fbe4 	bl	800dc18 <HAL_SD_GetCardCSD>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e45a:	e020      	b.n	800e49e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6819      	ldr	r1, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e464:	041b      	lsls	r3, r3, #16
 800e466:	f04f 0400 	mov.w	r4, #0
 800e46a:	461a      	mov	r2, r3
 800e46c:	4623      	mov	r3, r4
 800e46e:	4608      	mov	r0, r1
 800e470:	f003 f802 	bl	8011478 <SDMMC_CmdSelDesel>
 800e474:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <SD_InitCard+0x174>
  {
    return errorstate;
 800e47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47e:	e00e      	b.n	800e49e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681d      	ldr	r5, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	466c      	mov	r4, sp
 800e488:	f103 0210 	add.w	r2, r3, #16
 800e48c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e48e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e492:	3304      	adds	r3, #4
 800e494:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e496:	4628      	mov	r0, r5
 800e498:	f002 fe46 	bl	8011128 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3740      	adds	r7, #64	; 0x40
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e4a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	617b      	str	r3, [r7, #20]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f002 fffc 	bl	80114be <SDMMC_CmdGoIdleState>
 800e4c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	e072      	b.n	800e5b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f003 f80f 	bl	80114fa <SDMMC_CmdOperCond>
 800e4dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00d      	beq.n	800e500 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f002 ffe5 	bl	80114be <SDMMC_CmdGoIdleState>
 800e4f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d004      	beq.n	800e506 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	e05b      	b.n	800e5b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2201      	movs	r2, #1
 800e504:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d137      	bne.n	800e57e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2100      	movs	r1, #0
 800e514:	4618      	mov	r0, r3
 800e516:	f003 f80f 	bl	8011538 <SDMMC_CmdAppCommand>
 800e51a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d02d      	beq.n	800e57e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e522:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e526:	e047      	b.n	800e5b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f003 f802 	bl	8011538 <SDMMC_CmdAppCommand>
 800e534:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <SD_PowerON+0x98>
    {
      return errorstate;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	e03b      	b.n	800e5b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	491e      	ldr	r1, [pc, #120]	; (800e5c0 <SD_PowerON+0x118>)
 800e546:	4618      	mov	r0, r3
 800e548:	f003 f818 	bl	801157c <SDMMC_CmdAppOperCommand>
 800e54c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e554:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e558:	e02e      	b.n	800e5b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2100      	movs	r1, #0
 800e560:	4618      	mov	r0, r3
 800e562:	f002 fe7e 	bl	8011262 <SDIO_GetResponse>
 800e566:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	0fdb      	lsrs	r3, r3, #31
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d101      	bne.n	800e574 <SD_PowerON+0xcc>
 800e570:	2301      	movs	r3, #1
 800e572:	e000      	b.n	800e576 <SD_PowerON+0xce>
 800e574:	2300      	movs	r3, #0
 800e576:	613b      	str	r3, [r7, #16]

    count++;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	3301      	adds	r3, #1
 800e57c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e584:	4293      	cmp	r3, r2
 800e586:	d802      	bhi.n	800e58e <SD_PowerON+0xe6>
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d0cc      	beq.n	800e528 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e594:	4293      	cmp	r3, r2
 800e596:	d902      	bls.n	800e59e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e59c:	e00c      	b.n	800e5b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d003      	beq.n	800e5b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	645a      	str	r2, [r3, #68]	; 0x44
 800e5ae:	e002      	b.n	800e5b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	c1100000 	.word	0xc1100000

0800e5c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e5d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5d8:	e018      	b.n	800e60c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e2:	041b      	lsls	r3, r3, #16
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f003 f88c 	bl	8011704 <SDMMC_CmdSendStatus>
 800e5ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	e009      	b.n	800e60c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f002 fe2f 	bl	8011262 <SDIO_GetResponse>
 800e604:	4602      	mov	r2, r0
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e61c:	2300      	movs	r3, #0
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	2300      	movs	r3, #0
 800e622:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2100      	movs	r1, #0
 800e62a:	4618      	mov	r0, r3
 800e62c:	f002 fe19 	bl	8011262 <SDIO_GetResponse>
 800e630:	4603      	mov	r3, r0
 800e632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e63a:	d102      	bne.n	800e642 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e63c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e640:	e02f      	b.n	800e6a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e642:	f107 030c 	add.w	r3, r7, #12
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f879 	bl	800e740 <SD_FindSCR>
 800e64e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	e023      	b.n	800e6a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e660:	2b00      	cmp	r3, #0
 800e662:	d01c      	beq.n	800e69e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e66c:	041b      	lsls	r3, r3, #16
 800e66e:	4619      	mov	r1, r3
 800e670:	4610      	mov	r0, r2
 800e672:	f002 ff61 	bl	8011538 <SDMMC_CmdAppCommand>
 800e676:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	e00f      	b.n	800e6a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2102      	movs	r1, #2
 800e688:	4618      	mov	r0, r3
 800e68a:	f002 ff9a 	bl	80115c2 <SDMMC_CmdBusWidth>
 800e68e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	e003      	b.n	800e6a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e69a:	2300      	movs	r3, #0
 800e69c:	e001      	b.n	800e6a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e69e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3718      	adds	r7, #24
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b086      	sub	sp, #24
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2100      	movs	r1, #0
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f002 fdce 	bl	8011262 <SDIO_GetResponse>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e6d0:	d102      	bne.n	800e6d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e6d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6d6:	e02f      	b.n	800e738 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e6d8:	f107 030c 	add.w	r3, r7, #12
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f82e 	bl	800e740 <SD_FindSCR>
 800e6e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	e023      	b.n	800e738 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d01c      	beq.n	800e734 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e702:	041b      	lsls	r3, r3, #16
 800e704:	4619      	mov	r1, r3
 800e706:	4610      	mov	r0, r2
 800e708:	f002 ff16 	bl	8011538 <SDMMC_CmdAppCommand>
 800e70c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d001      	beq.n	800e718 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	e00f      	b.n	800e738 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2100      	movs	r1, #0
 800e71e:	4618      	mov	r0, r3
 800e720:	f002 ff4f 	bl	80115c2 <SDMMC_CmdBusWidth>
 800e724:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	e003      	b.n	800e738 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e730:	2300      	movs	r3, #0
 800e732:	e001      	b.n	800e738 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e734:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e740:	b590      	push	{r4, r7, lr}
 800e742:	b08f      	sub	sp, #60	; 0x3c
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e74a:	f7fc fcd1 	bl	800b0f0 <HAL_GetTick>
 800e74e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e750:	2300      	movs	r3, #0
 800e752:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e754:	2300      	movs	r3, #0
 800e756:	60bb      	str	r3, [r7, #8]
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2108      	movs	r1, #8
 800e766:	4618      	mov	r0, r3
 800e768:	f002 fdba 	bl	80112e0 <SDMMC_CmdBlockLength>
 800e76c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	e0a9      	b.n	800e8cc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e780:	041b      	lsls	r3, r3, #16
 800e782:	4619      	mov	r1, r3
 800e784:	4610      	mov	r0, r2
 800e786:	f002 fed7 	bl	8011538 <SDMMC_CmdAppCommand>
 800e78a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	e09a      	b.n	800e8cc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e796:	f04f 33ff 	mov.w	r3, #4294967295
 800e79a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e79c:	2308      	movs	r3, #8
 800e79e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e7a0:	2330      	movs	r3, #48	; 0x30
 800e7a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f107 0210 	add.w	r2, r7, #16
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f002 fd64 	bl	8011288 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f002 ff1e 	bl	8011606 <SDMMC_CmdSendSCR>
 800e7ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d022      	beq.n	800e818 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	e07a      	b.n	800e8cc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00e      	beq.n	800e802 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6819      	ldr	r1, [r3, #0]
 800e7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	f107 0208 	add.w	r2, r7, #8
 800e7f0:	18d4      	adds	r4, r2, r3
 800e7f2:	4608      	mov	r0, r1
 800e7f4:	f002 fcc3 	bl	801117e <SDIO_ReadFIFO>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	6023      	str	r3, [r4, #0]
      index++;
 800e7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7fe:	3301      	adds	r3, #1
 800e800:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e802:	f7fc fc75 	bl	800b0f0 <HAL_GetTick>
 800e806:	4602      	mov	r2, r0
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e810:	d102      	bne.n	800e818 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e812:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e816:	e059      	b.n	800e8cc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e81e:	f240 432a 	movw	r3, #1066	; 0x42a
 800e822:	4013      	ands	r3, r2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d0d6      	beq.n	800e7d6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82e:	f003 0308 	and.w	r3, r3, #8
 800e832:	2b00      	cmp	r3, #0
 800e834:	d005      	beq.n	800e842 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2208      	movs	r2, #8
 800e83c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e83e:	2308      	movs	r3, #8
 800e840:	e044      	b.n	800e8cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e848:	f003 0302 	and.w	r3, r3, #2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d005      	beq.n	800e85c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2202      	movs	r2, #2
 800e856:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e858:	2302      	movs	r3, #2
 800e85a:	e037      	b.n	800e8cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d005      	beq.n	800e876 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2220      	movs	r2, #32
 800e870:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e872:	2320      	movs	r3, #32
 800e874:	e02a      	b.n	800e8cc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f240 523a 	movw	r2, #1338	; 0x53a
 800e87e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	061a      	lsls	r2, r3, #24
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	021b      	lsls	r3, r3, #8
 800e888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e88c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	0a1b      	lsrs	r3, r3, #8
 800e892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e896:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	0e1b      	lsrs	r3, r3, #24
 800e89c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a0:	601a      	str	r2, [r3, #0]
    scr++;
 800e8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	061a      	lsls	r2, r3, #24
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	021b      	lsls	r3, r3, #8
 800e8b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	0a1b      	lsrs	r3, r3, #8
 800e8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	0e1b      	lsrs	r3, r3, #24
 800e8c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	373c      	adds	r7, #60	; 0x3c
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}

0800e8d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d03f      	beq.n	800e96e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	e033      	b.n	800e95c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f002 fc40 	bl	801117e <SDIO_ReadFIFO>
 800e8fe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	b2da      	uxtb	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	3301      	adds	r3, #1
 800e90c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	3b01      	subs	r3, #1
 800e912:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	0a1b      	lsrs	r3, r3, #8
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3301      	adds	r3, #1
 800e922:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	3b01      	subs	r3, #1
 800e928:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	0c1b      	lsrs	r3, r3, #16
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	3301      	adds	r3, #1
 800e938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	3b01      	subs	r3, #1
 800e93e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	0e1b      	lsrs	r3, r3, #24
 800e944:	b2da      	uxtb	r2, r3
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	3301      	adds	r3, #1
 800e94e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	3b01      	subs	r3, #1
 800e954:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	3301      	adds	r3, #1
 800e95a:	617b      	str	r3, [r7, #20]
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b07      	cmp	r3, #7
 800e960:	d9c8      	bls.n	800e8f4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e96e:	bf00      	nop
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b086      	sub	sp, #24
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6a1b      	ldr	r3, [r3, #32]
 800e982:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e988:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d043      	beq.n	800ea18 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e990:	2300      	movs	r3, #0
 800e992:	617b      	str	r3, [r7, #20]
 800e994:	e037      	b.n	800ea06 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	021a      	lsls	r2, r3, #8
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	041a      	lsls	r2, r3, #16
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	061a      	lsls	r2, r3, #24
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f107 0208 	add.w	r2, r7, #8
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f002 fbcc 	bl	8011198 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	3301      	adds	r3, #1
 800ea04:	617b      	str	r3, [r7, #20]
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2b07      	cmp	r3, #7
 800ea0a:	d9c4      	bls.n	800e996 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ea18:	bf00      	nop
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d101      	bne.n	800ea32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e056      	b.n	800eae0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2200      	movs	r2, #0
 800ea36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d106      	bne.n	800ea52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7f6 fded 	bl	800562c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2202      	movs	r2, #2
 800ea56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	431a      	orrs	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	431a      	orrs	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	695b      	ldr	r3, [r3, #20]
 800ea84:	431a      	orrs	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	699b      	ldr	r3, [r3, #24]
 800ea8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	69db      	ldr	r3, [r3, #28]
 800ea94:	431a      	orrs	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	ea42 0103 	orr.w	r1, r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	0c1b      	lsrs	r3, r3, #16
 800eab0:	f003 0104 	and.w	r1, r3, #4
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	430a      	orrs	r2, r1
 800eabe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	69da      	ldr	r2, [r3, #28]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eace:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d101      	bne.n	800eafa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e01a      	b.n	800eb30 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2202      	movs	r2, #2
 800eafe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7f6 fe24 	bl	8005760 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08c      	sub	sp, #48	; 0x30
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb46:	2301      	movs	r3, #1
 800eb48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d101      	bne.n	800eb5e <HAL_SPI_TransmitReceive+0x26>
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	e18a      	b.n	800ee74 <HAL_SPI_TransmitReceive+0x33c>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb66:	f7fc fac3 	bl	800b0f0 <HAL_GetTick>
 800eb6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eb7c:	887b      	ldrh	r3, [r7, #2]
 800eb7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eb80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d00f      	beq.n	800eba8 <HAL_SPI_TransmitReceive+0x70>
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb8e:	d107      	bne.n	800eba0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d103      	bne.n	800eba0 <HAL_SPI_TransmitReceive+0x68>
 800eb98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	d003      	beq.n	800eba8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eba0:	2302      	movs	r3, #2
 800eba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eba6:	e15b      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d005      	beq.n	800ebba <HAL_SPI_TransmitReceive+0x82>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <HAL_SPI_TransmitReceive+0x82>
 800ebb4:	887b      	ldrh	r3, [r7, #2]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d103      	bne.n	800ebc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebc0:	e14e      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b04      	cmp	r3, #4
 800ebcc:	d003      	beq.n	800ebd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2205      	movs	r2, #5
 800ebd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	887a      	ldrh	r2, [r7, #2]
 800ebe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	887a      	ldrh	r2, [r7, #2]
 800ebec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	887a      	ldrh	r2, [r7, #2]
 800ebf8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	887a      	ldrh	r2, [r7, #2]
 800ebfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2200      	movs	r2, #0
 800ec04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec16:	2b40      	cmp	r3, #64	; 0x40
 800ec18:	d007      	beq.n	800ec2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec32:	d178      	bne.n	800ed26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d002      	beq.n	800ec42 <HAL_SPI_TransmitReceive+0x10a>
 800ec3c:	8b7b      	ldrh	r3, [r7, #26]
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d166      	bne.n	800ed10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec46:	881a      	ldrh	r2, [r3, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec52:	1c9a      	adds	r2, r3, #2
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec66:	e053      	b.n	800ed10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f003 0302 	and.w	r3, r3, #2
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d11b      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x176>
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d016      	beq.n	800ecae <HAL_SPI_TransmitReceive+0x176>
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d113      	bne.n	800ecae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec8a:	881a      	ldrh	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec96:	1c9a      	adds	r2, r3, #2
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	3b01      	subs	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	f003 0301 	and.w	r3, r3, #1
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d119      	bne.n	800ecf0 <HAL_SPI_TransmitReceive+0x1b8>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d014      	beq.n	800ecf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68da      	ldr	r2, [r3, #12]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd0:	b292      	uxth	r2, r2
 800ecd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd8:	1c9a      	adds	r2, r3, #2
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	3b01      	subs	r3, #1
 800ece6:	b29a      	uxth	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ecec:	2301      	movs	r3, #1
 800ecee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ecf0:	f7fc f9fe 	bl	800b0f0 <HAL_GetTick>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d807      	bhi.n	800ed10 <HAL_SPI_TransmitReceive+0x1d8>
 800ed00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed06:	d003      	beq.n	800ed10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ed08:	2303      	movs	r3, #3
 800ed0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed0e:	e0a7      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1a6      	bne.n	800ec68 <HAL_SPI_TransmitReceive+0x130>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1a1      	bne.n	800ec68 <HAL_SPI_TransmitReceive+0x130>
 800ed24:	e07c      	b.n	800ee20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <HAL_SPI_TransmitReceive+0x1fc>
 800ed2e:	8b7b      	ldrh	r3, [r7, #26]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d16b      	bne.n	800ee0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	330c      	adds	r3, #12
 800ed3e:	7812      	ldrb	r2, [r2, #0]
 800ed40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	3b01      	subs	r3, #1
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed5a:	e057      	b.n	800ee0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	f003 0302 	and.w	r3, r3, #2
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d11c      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x26c>
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d017      	beq.n	800eda4 <HAL_SPI_TransmitReceive+0x26c>
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d114      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	330c      	adds	r3, #12
 800ed84:	7812      	ldrb	r2, [r2, #0]
 800ed86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8c:	1c5a      	adds	r2, r3, #1
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eda0:	2300      	movs	r3, #0
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d119      	bne.n	800ede6 <HAL_SPI_TransmitReceive+0x2ae>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d014      	beq.n	800ede6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68da      	ldr	r2, [r3, #12]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc6:	b2d2      	uxtb	r2, r2
 800edc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edd8:	b29b      	uxth	r3, r3
 800edda:	3b01      	subs	r3, #1
 800eddc:	b29a      	uxth	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ede2:	2301      	movs	r3, #1
 800ede4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ede6:	f7fc f983 	bl	800b0f0 <HAL_GetTick>
 800edea:	4602      	mov	r2, r0
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d803      	bhi.n	800edfe <HAL_SPI_TransmitReceive+0x2c6>
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfc:	d102      	bne.n	800ee04 <HAL_SPI_TransmitReceive+0x2cc>
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d103      	bne.n	800ee0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ee04:	2303      	movs	r3, #3
 800ee06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee0a:	e029      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1a2      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x224>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee1a:	b29b      	uxth	r3, r3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d19d      	bne.n	800ed5c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 fae1 	bl	800f3ec <SPI_EndRxTxTransaction>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d006      	beq.n	800ee3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee30:	2301      	movs	r3, #1
 800ee32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2220      	movs	r2, #32
 800ee3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee3c:	e010      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10b      	bne.n	800ee5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee46:	2300      	movs	r3, #0
 800ee48:	617b      	str	r3, [r7, #20]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	617b      	str	r3, [r7, #20]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	e000      	b.n	800ee60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3730      	adds	r7, #48	; 0x30
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	4613      	mov	r3, r2
 800ee88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d101      	bne.n	800ee9c <HAL_SPI_Transmit_DMA+0x20>
 800ee98:	2302      	movs	r3, #2
 800ee9a:	e093      	b.n	800efc4 <HAL_SPI_Transmit_DMA+0x148>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d002      	beq.n	800eeb6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eeb4:	e081      	b.n	800efba <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <HAL_SPI_Transmit_DMA+0x46>
 800eebc:	88fb      	ldrh	r3, [r7, #6]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d102      	bne.n	800eec8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eec6:	e078      	b.n	800efba <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2203      	movs	r2, #3
 800eecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	88fa      	ldrh	r2, [r7, #6]
 800eee0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	88fa      	ldrh	r2, [r7, #6]
 800eee6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2200      	movs	r2, #0
 800eef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	689b      	ldr	r3, [r3, #8]
 800ef0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef0e:	d107      	bne.n	800ef20 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef24:	4a29      	ldr	r2, [pc, #164]	; (800efcc <HAL_SPI_Transmit_DMA+0x150>)
 800ef26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef2c:	4a28      	ldr	r2, [pc, #160]	; (800efd0 <HAL_SPI_Transmit_DMA+0x154>)
 800ef2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef34:	4a27      	ldr	r2, [pc, #156]	; (800efd4 <HAL_SPI_Transmit_DMA+0x158>)
 800ef36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef48:	4619      	mov	r1, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	330c      	adds	r3, #12
 800ef50:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ef58:	f7fd f880 	bl	800c05c <HAL_DMA_Start_IT>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00c      	beq.n	800ef7c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef66:	f043 0210 	orr.w	r2, r3, #16
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2201      	movs	r2, #1
 800ef76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ef7a:	e01e      	b.n	800efba <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef86:	2b40      	cmp	r3, #64	; 0x40
 800ef88:	d007      	beq.n	800ef9a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef98:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f042 0220 	orr.w	r2, r2, #32
 800efa8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f042 0202 	orr.w	r2, r2, #2
 800efb8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800efc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	0800f295 	.word	0x0800f295
 800efd0:	0800f1ed 	.word	0x0800f1ed
 800efd4:	0800f2b1 	.word	0x0800f2b1

0800efd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	099b      	lsrs	r3, r3, #6
 800eff4:	f003 0301 	and.w	r3, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10f      	bne.n	800f01c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00a      	beq.n	800f01c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	099b      	lsrs	r3, r3, #6
 800f00a:	f003 0301 	and.w	r3, r3, #1
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	4798      	blx	r3
    return;
 800f01a:	e0d8      	b.n	800f1ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00a      	beq.n	800f03e <HAL_SPI_IRQHandler+0x66>
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	09db      	lsrs	r3, r3, #7
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	2b00      	cmp	r3, #0
 800f032:	d004      	beq.n	800f03e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	4798      	blx	r3
    return;
 800f03c:	e0c7      	b.n	800f1ce <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	095b      	lsrs	r3, r3, #5
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10c      	bne.n	800f064 <HAL_SPI_IRQHandler+0x8c>
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	099b      	lsrs	r3, r3, #6
 800f04e:	f003 0301 	and.w	r3, r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	d106      	bne.n	800f064 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	0a1b      	lsrs	r3, r3, #8
 800f05a:	f003 0301 	and.w	r3, r3, #1
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f000 80b5 	beq.w	800f1ce <HAL_SPI_IRQHandler+0x1f6>
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	095b      	lsrs	r3, r3, #5
 800f068:	f003 0301 	and.w	r3, r3, #1
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 80ae 	beq.w	800f1ce <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	099b      	lsrs	r3, r3, #6
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d023      	beq.n	800f0c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f084:	b2db      	uxtb	r3, r3
 800f086:	2b03      	cmp	r3, #3
 800f088:	d011      	beq.n	800f0ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f08e:	f043 0204 	orr.w	r2, r3, #4
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	617b      	str	r3, [r7, #20]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	617b      	str	r3, [r7, #20]
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	e00b      	b.n	800f0c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	613b      	str	r3, [r7, #16]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	613b      	str	r3, [r7, #16]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	693b      	ldr	r3, [r7, #16]
        return;
 800f0c4:	e083      	b.n	800f1ce <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	095b      	lsrs	r3, r3, #5
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d014      	beq.n	800f0fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d6:	f043 0201 	orr.w	r2, r3, #1
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	60fb      	str	r3, [r7, #12]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	0a1b      	lsrs	r3, r3, #8
 800f100:	f003 0301 	and.w	r3, r3, #1
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00c      	beq.n	800f122 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f10c:	f043 0208 	orr.w	r2, r3, #8
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f114:	2300      	movs	r3, #0
 800f116:	60bb      	str	r3, [r7, #8]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	60bb      	str	r3, [r7, #8]
 800f120:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f126:	2b00      	cmp	r3, #0
 800f128:	d050      	beq.n	800f1cc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	685a      	ldr	r2, [r3, #4]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f138:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	f003 0302 	and.w	r3, r3, #2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d104      	bne.n	800f156 <HAL_SPI_IRQHandler+0x17e>
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	2b00      	cmp	r3, #0
 800f154:	d034      	beq.n	800f1c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	685a      	ldr	r2, [r3, #4]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f022 0203 	bic.w	r2, r2, #3
 800f164:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d011      	beq.n	800f192 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f172:	4a18      	ldr	r2, [pc, #96]	; (800f1d4 <HAL_SPI_IRQHandler+0x1fc>)
 800f174:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fc ffc6 	bl	800c10c <HAL_DMA_Abort_IT>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d005      	beq.n	800f192 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f18a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f196:	2b00      	cmp	r3, #0
 800f198:	d016      	beq.n	800f1c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f19e:	4a0d      	ldr	r2, [pc, #52]	; (800f1d4 <HAL_SPI_IRQHandler+0x1fc>)
 800f1a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fc ffb0 	bl	800c10c <HAL_DMA_Abort_IT>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00a      	beq.n	800f1c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f1be:	e003      	b.n	800f1c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7f6 f9ff 	bl	80055c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f1c6:	e000      	b.n	800f1ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f1c8:	bf00      	nop
    return;
 800f1ca:	bf00      	nop
 800f1cc:	bf00      	nop
  }
}
 800f1ce:	3720      	adds	r7, #32
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	0800f2f1 	.word	0x0800f2f1

0800f1d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1fa:	f7fb ff79 	bl	800b0f0 <HAL_GetTick>
 800f1fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f20e:	d03b      	beq.n	800f288 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f022 0220 	bic.w	r2, r2, #32
 800f21e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f022 0202 	bic.w	r2, r2, #2
 800f22e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	2164      	movs	r1, #100	; 0x64
 800f234:	6978      	ldr	r0, [r7, #20]
 800f236:	f000 f8d9 	bl	800f3ec <SPI_EndRxTxTransaction>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f244:	f043 0220 	orr.w	r2, r3, #32
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10a      	bne.n	800f26a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f254:	2300      	movs	r3, #0
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	2200      	movs	r2, #0
 800f26e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f280:	6978      	ldr	r0, [r7, #20]
 800f282:	f7f6 f99f 	bl	80055c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f286:	e002      	b.n	800f28e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f288:	6978      	ldr	r0, [r7, #20]
 800f28a:	f7f6 f9b1 	bl	80055f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff ff98 	bl	800f1d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f2a8:	bf00      	nop
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f022 0203 	bic.w	r2, r2, #3
 800f2cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2d2:	f043 0210 	orr.w	r2, r3, #16
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f2e2:	68f8      	ldr	r0, [r7, #12]
 800f2e4:	f7f6 f96e 	bl	80055c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f2e8:	bf00      	nop
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2200      	movs	r2, #0
 800f302:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2200      	movs	r2, #0
 800f308:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7f6 f95a 	bl	80055c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f310:	bf00      	nop
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	603b      	str	r3, [r7, #0]
 800f324:	4613      	mov	r3, r2
 800f326:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f328:	e04c      	b.n	800f3c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f330:	d048      	beq.n	800f3c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f332:	f7fb fedd 	bl	800b0f0 <HAL_GetTick>
 800f336:	4602      	mov	r2, r0
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	1ad3      	subs	r3, r2, r3
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d902      	bls.n	800f348 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d13d      	bne.n	800f3c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f356:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f360:	d111      	bne.n	800f386 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f36a:	d004      	beq.n	800f376 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f374:	d107      	bne.n	800f386 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f384:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f38e:	d10f      	bne.n	800f3b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f3ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f3c0:	2303      	movs	r3, #3
 800f3c2:	e00f      	b.n	800f3e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	bf0c      	ite	eq
 800f3d4:	2301      	moveq	r3, #1
 800f3d6:	2300      	movne	r3, #0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	461a      	mov	r2, r3
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d1a3      	bne.n	800f32a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b088      	sub	sp, #32
 800f3f0:	af02      	add	r7, sp, #8
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f3f8:	4b1b      	ldr	r3, [pc, #108]	; (800f468 <SPI_EndRxTxTransaction+0x7c>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a1b      	ldr	r2, [pc, #108]	; (800f46c <SPI_EndRxTxTransaction+0x80>)
 800f3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f402:	0d5b      	lsrs	r3, r3, #21
 800f404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f408:	fb02 f303 	mul.w	r3, r2, r3
 800f40c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f416:	d112      	bne.n	800f43e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	2200      	movs	r2, #0
 800f420:	2180      	movs	r1, #128	; 0x80
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff ff78 	bl	800f318 <SPI_WaitFlagStateUntilTimeout>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d016      	beq.n	800f45c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f432:	f043 0220 	orr.w	r2, r3, #32
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f43a:	2303      	movs	r3, #3
 800f43c:	e00f      	b.n	800f45e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00a      	beq.n	800f45a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	3b01      	subs	r3, #1
 800f448:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f454:	2b80      	cmp	r3, #128	; 0x80
 800f456:	d0f2      	beq.n	800f43e <SPI_EndRxTxTransaction+0x52>
 800f458:	e000      	b.n	800f45c <SPI_EndRxTxTransaction+0x70>
        break;
 800f45a:	bf00      	nop
  }

  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20000000 	.word	0x20000000
 800f46c:	165e9f81 	.word	0x165e9f81

0800f470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d101      	bne.n	800f482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e01d      	b.n	800f4be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7f5 fdfe 	bl	8005098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2202      	movs	r2, #2
 800f4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	f000 fb2a 	bl	800fb08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b082      	sub	sp, #8
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e01d      	b.n	800f514 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f815 	bl	800f51c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3304      	adds	r3, #4
 800f502:	4619      	mov	r1, r3
 800f504:	4610      	mov	r0, r2
 800f506:	f000 faff 	bl	800fb08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2201      	movs	r2, #1
 800f50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800f524:	bf00      	nop
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2b0c      	cmp	r3, #12
 800f53e:	d841      	bhi.n	800f5c4 <HAL_TIM_IC_Start_IT+0x94>
 800f540:	a201      	add	r2, pc, #4	; (adr r2, 800f548 <HAL_TIM_IC_Start_IT+0x18>)
 800f542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f546:	bf00      	nop
 800f548:	0800f57d 	.word	0x0800f57d
 800f54c:	0800f5c5 	.word	0x0800f5c5
 800f550:	0800f5c5 	.word	0x0800f5c5
 800f554:	0800f5c5 	.word	0x0800f5c5
 800f558:	0800f58f 	.word	0x0800f58f
 800f55c:	0800f5c5 	.word	0x0800f5c5
 800f560:	0800f5c5 	.word	0x0800f5c5
 800f564:	0800f5c5 	.word	0x0800f5c5
 800f568:	0800f5a1 	.word	0x0800f5a1
 800f56c:	0800f5c5 	.word	0x0800f5c5
 800f570:	0800f5c5 	.word	0x0800f5c5
 800f574:	0800f5c5 	.word	0x0800f5c5
 800f578:	0800f5b3 	.word	0x0800f5b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68da      	ldr	r2, [r3, #12]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f042 0202 	orr.w	r2, r2, #2
 800f58a:	60da      	str	r2, [r3, #12]
      break;
 800f58c:	e01b      	b.n	800f5c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	68da      	ldr	r2, [r3, #12]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f042 0204 	orr.w	r2, r2, #4
 800f59c:	60da      	str	r2, [r3, #12]
      break;
 800f59e:	e012      	b.n	800f5c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68da      	ldr	r2, [r3, #12]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f042 0208 	orr.w	r2, r2, #8
 800f5ae:	60da      	str	r2, [r3, #12]
      break;
 800f5b0:	e009      	b.n	800f5c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68da      	ldr	r2, [r3, #12]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f042 0210 	orr.w	r2, r2, #16
 800f5c0:	60da      	str	r2, [r3, #12]
      break;
 800f5c2:	e000      	b.n	800f5c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800f5c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 fcd2 	bl	800ff78 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	f003 0307 	and.w	r3, r3, #7
 800f5de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2b06      	cmp	r3, #6
 800f5e4:	d007      	beq.n	800f5f6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f042 0201 	orr.w	r2, r2, #1
 800f5f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	f003 0302 	and.w	r3, r3, #2
 800f612:	2b02      	cmp	r3, #2
 800f614:	d122      	bne.n	800f65c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	f003 0302 	and.w	r3, r3, #2
 800f620:	2b02      	cmp	r3, #2
 800f622:	d11b      	bne.n	800f65c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	f06f 0202 	mvn.w	r2, #2
 800f62c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	f003 0303 	and.w	r3, r3, #3
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d003      	beq.n	800f64a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7f5 fd78 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 800f648:	e005      	b.n	800f656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fa3d 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 fa44 	bl	800fade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	f003 0304 	and.w	r3, r3, #4
 800f666:	2b04      	cmp	r3, #4
 800f668:	d122      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	f003 0304 	and.w	r3, r3, #4
 800f674:	2b04      	cmp	r3, #4
 800f676:	d11b      	bne.n	800f6b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f06f 0204 	mvn.w	r2, #4
 800f680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2202      	movs	r2, #2
 800f686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f692:	2b00      	cmp	r3, #0
 800f694:	d003      	beq.n	800f69e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7f5 fd4e 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 800f69c:	e005      	b.n	800f6aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fa13 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 fa1a 	bl	800fade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	f003 0308 	and.w	r3, r3, #8
 800f6ba:	2b08      	cmp	r3, #8
 800f6bc:	d122      	bne.n	800f704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	f003 0308 	and.w	r3, r3, #8
 800f6c8:	2b08      	cmp	r3, #8
 800f6ca:	d11b      	bne.n	800f704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f06f 0208 	mvn.w	r2, #8
 800f6d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2204      	movs	r2, #4
 800f6da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	69db      	ldr	r3, [r3, #28]
 800f6e2:	f003 0303 	and.w	r3, r3, #3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d003      	beq.n	800f6f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f7f5 fd24 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 800f6f0:	e005      	b.n	800f6fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f000 f9e9 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f9f0 	bl	800fade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	691b      	ldr	r3, [r3, #16]
 800f70a:	f003 0310 	and.w	r3, r3, #16
 800f70e:	2b10      	cmp	r3, #16
 800f710:	d122      	bne.n	800f758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	f003 0310 	and.w	r3, r3, #16
 800f71c:	2b10      	cmp	r3, #16
 800f71e:	d11b      	bne.n	800f758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f06f 0210 	mvn.w	r2, #16
 800f728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2208      	movs	r2, #8
 800f72e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	69db      	ldr	r3, [r3, #28]
 800f736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d003      	beq.n	800f746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f7f5 fcfa 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 800f744:	e005      	b.n	800f752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f9bf 	bl	800faca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f9c6 	bl	800fade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	f003 0301 	and.w	r3, r3, #1
 800f762:	2b01      	cmp	r3, #1
 800f764:	d10e      	bne.n	800f784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b01      	cmp	r3, #1
 800f772:	d107      	bne.n	800f784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f06f 0201 	mvn.w	r2, #1
 800f77c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 f999 	bl	800fab6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f78e:	2b80      	cmp	r3, #128	; 0x80
 800f790:	d10e      	bne.n	800f7b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f79c:	2b80      	cmp	r3, #128	; 0x80
 800f79e:	d107      	bne.n	800f7b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fc82 	bl	80100b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ba:	2b40      	cmp	r3, #64	; 0x40
 800f7bc:	d10e      	bne.n	800f7dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7c8:	2b40      	cmp	r3, #64	; 0x40
 800f7ca:	d107      	bne.n	800f7dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f7d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 f98b 	bl	800faf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	f003 0320 	and.w	r3, r3, #32
 800f7e6:	2b20      	cmp	r3, #32
 800f7e8:	d10e      	bne.n	800f808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	f003 0320 	and.w	r3, r3, #32
 800f7f4:	2b20      	cmp	r3, #32
 800f7f6:	d107      	bne.n	800f808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f06f 0220 	mvn.w	r2, #32
 800f800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fc4c 	bl	80100a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f822:	2b01      	cmp	r3, #1
 800f824:	d101      	bne.n	800f82a <HAL_TIM_IC_ConfigChannel+0x1a>
 800f826:	2302      	movs	r3, #2
 800f828:	e08a      	b.n	800f940 <HAL_TIM_IC_ConfigChannel+0x130>
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2201      	movs	r2, #1
 800f82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2202      	movs	r2, #2
 800f836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d11b      	bne.n	800f878 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6818      	ldr	r0, [r3, #0]
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	6819      	ldr	r1, [r3, #0]
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	f000 f9da 	bl	800fc08 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	699a      	ldr	r2, [r3, #24]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	f022 020c 	bic.w	r2, r2, #12
 800f862:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	6999      	ldr	r1, [r3, #24]
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	689a      	ldr	r2, [r3, #8]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	430a      	orrs	r2, r1
 800f874:	619a      	str	r2, [r3, #24]
 800f876:	e05a      	b.n	800f92e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b04      	cmp	r3, #4
 800f87c:	d11c      	bne.n	800f8b8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6818      	ldr	r0, [r3, #0]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	6819      	ldr	r1, [r3, #0]
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	685a      	ldr	r2, [r3, #4]
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	f000 fa52 	bl	800fd36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	699a      	ldr	r2, [r3, #24]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f8a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	6999      	ldr	r1, [r3, #24]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	021a      	lsls	r2, r3, #8
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	619a      	str	r2, [r3, #24]
 800f8b6:	e03a      	b.n	800f92e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b08      	cmp	r3, #8
 800f8bc:	d11b      	bne.n	800f8f6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6818      	ldr	r0, [r3, #0]
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	6819      	ldr	r1, [r3, #0]
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	685a      	ldr	r2, [r3, #4]
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	f000 fa9f 	bl	800fe10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	69da      	ldr	r2, [r3, #28]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f022 020c 	bic.w	r2, r2, #12
 800f8e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	69d9      	ldr	r1, [r3, #28]
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	689a      	ldr	r2, [r3, #8]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	430a      	orrs	r2, r1
 800f8f2:	61da      	str	r2, [r3, #28]
 800f8f4:	e01b      	b.n	800f92e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6818      	ldr	r0, [r3, #0]
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	6819      	ldr	r1, [r3, #0]
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	f000 fabf 	bl	800fe88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	69da      	ldr	r2, [r3, #28]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f918:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	69d9      	ldr	r1, [r3, #28]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	021a      	lsls	r2, r3, #8
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	430a      	orrs	r2, r1
 800f92c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2201      	movs	r2, #1
 800f932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3710      	adds	r7, #16
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d101      	bne.n	800f960 <HAL_TIM_ConfigClockSource+0x18>
 800f95c:	2302      	movs	r3, #2
 800f95e:	e0a6      	b.n	800faae <HAL_TIM_ConfigClockSource+0x166>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2202      	movs	r2, #2
 800f96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f97e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f986:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b40      	cmp	r3, #64	; 0x40
 800f996:	d067      	beq.n	800fa68 <HAL_TIM_ConfigClockSource+0x120>
 800f998:	2b40      	cmp	r3, #64	; 0x40
 800f99a:	d80b      	bhi.n	800f9b4 <HAL_TIM_ConfigClockSource+0x6c>
 800f99c:	2b10      	cmp	r3, #16
 800f99e:	d073      	beq.n	800fa88 <HAL_TIM_ConfigClockSource+0x140>
 800f9a0:	2b10      	cmp	r3, #16
 800f9a2:	d802      	bhi.n	800f9aa <HAL_TIM_ConfigClockSource+0x62>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d06f      	beq.n	800fa88 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f9a8:	e078      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d06c      	beq.n	800fa88 <HAL_TIM_ConfigClockSource+0x140>
 800f9ae:	2b30      	cmp	r3, #48	; 0x30
 800f9b0:	d06a      	beq.n	800fa88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f9b2:	e073      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f9b4:	2b70      	cmp	r3, #112	; 0x70
 800f9b6:	d00d      	beq.n	800f9d4 <HAL_TIM_ConfigClockSource+0x8c>
 800f9b8:	2b70      	cmp	r3, #112	; 0x70
 800f9ba:	d804      	bhi.n	800f9c6 <HAL_TIM_ConfigClockSource+0x7e>
 800f9bc:	2b50      	cmp	r3, #80	; 0x50
 800f9be:	d033      	beq.n	800fa28 <HAL_TIM_ConfigClockSource+0xe0>
 800f9c0:	2b60      	cmp	r3, #96	; 0x60
 800f9c2:	d041      	beq.n	800fa48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f9c4:	e06a      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9ca:	d066      	beq.n	800fa9a <HAL_TIM_ConfigClockSource+0x152>
 800f9cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9d0:	d017      	beq.n	800fa02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f9d2:	e063      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6818      	ldr	r0, [r3, #0]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	6899      	ldr	r1, [r3, #8]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	685a      	ldr	r2, [r3, #4]
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	f000 faa8 	bl	800ff38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f9f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	609a      	str	r2, [r3, #8]
      break;
 800fa00:	e04c      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6818      	ldr	r0, [r3, #0]
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	6899      	ldr	r1, [r3, #8]
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	f000 fa91 	bl	800ff38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fa24:	609a      	str	r2, [r3, #8]
      break;
 800fa26:	e039      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6818      	ldr	r0, [r3, #0]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	6859      	ldr	r1, [r3, #4]
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	461a      	mov	r2, r3
 800fa36:	f000 f94f 	bl	800fcd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2150      	movs	r1, #80	; 0x50
 800fa40:	4618      	mov	r0, r3
 800fa42:	f000 fa5e 	bl	800ff02 <TIM_ITRx_SetConfig>
      break;
 800fa46:	e029      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	6859      	ldr	r1, [r3, #4]
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	461a      	mov	r2, r3
 800fa56:	f000 f9ab 	bl	800fdb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2160      	movs	r1, #96	; 0x60
 800fa60:	4618      	mov	r0, r3
 800fa62:	f000 fa4e 	bl	800ff02 <TIM_ITRx_SetConfig>
      break;
 800fa66:	e019      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6818      	ldr	r0, [r3, #0]
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	6859      	ldr	r1, [r3, #4]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	461a      	mov	r2, r3
 800fa76:	f000 f92f 	bl	800fcd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2140      	movs	r1, #64	; 0x40
 800fa80:	4618      	mov	r0, r3
 800fa82:	f000 fa3e 	bl	800ff02 <TIM_ITRx_SetConfig>
      break;
 800fa86:	e009      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4619      	mov	r1, r3
 800fa92:	4610      	mov	r0, r2
 800fa94:	f000 fa35 	bl	800ff02 <TIM_ITRx_SetConfig>
      break;
 800fa98:	e000      	b.n	800fa9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800fa9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fab6:	b480      	push	{r7}
 800fab8:	b083      	sub	sp, #12
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fabe:	bf00      	nop
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fad2:	bf00      	nop
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr

0800fade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fade:	b480      	push	{r7}
 800fae0:	b083      	sub	sp, #12
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fae6:	bf00      	nop
 800fae8:	370c      	adds	r7, #12
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800faf2:	b480      	push	{r7}
 800faf4:	b083      	sub	sp, #12
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fafa:	bf00      	nop
 800fafc:	370c      	adds	r7, #12
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
	...

0800fb08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a34      	ldr	r2, [pc, #208]	; (800fbec <TIM_Base_SetConfig+0xe4>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d00f      	beq.n	800fb40 <TIM_Base_SetConfig+0x38>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb26:	d00b      	beq.n	800fb40 <TIM_Base_SetConfig+0x38>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a31      	ldr	r2, [pc, #196]	; (800fbf0 <TIM_Base_SetConfig+0xe8>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d007      	beq.n	800fb40 <TIM_Base_SetConfig+0x38>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a30      	ldr	r2, [pc, #192]	; (800fbf4 <TIM_Base_SetConfig+0xec>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d003      	beq.n	800fb40 <TIM_Base_SetConfig+0x38>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a2f      	ldr	r2, [pc, #188]	; (800fbf8 <TIM_Base_SetConfig+0xf0>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d108      	bne.n	800fb52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a25      	ldr	r2, [pc, #148]	; (800fbec <TIM_Base_SetConfig+0xe4>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d01b      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb60:	d017      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a22      	ldr	r2, [pc, #136]	; (800fbf0 <TIM_Base_SetConfig+0xe8>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d013      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a21      	ldr	r2, [pc, #132]	; (800fbf4 <TIM_Base_SetConfig+0xec>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d00f      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a20      	ldr	r2, [pc, #128]	; (800fbf8 <TIM_Base_SetConfig+0xf0>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d00b      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4a1f      	ldr	r2, [pc, #124]	; (800fbfc <TIM_Base_SetConfig+0xf4>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d007      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4a1e      	ldr	r2, [pc, #120]	; (800fc00 <TIM_Base_SetConfig+0xf8>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d003      	beq.n	800fb92 <TIM_Base_SetConfig+0x8a>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4a1d      	ldr	r2, [pc, #116]	; (800fc04 <TIM_Base_SetConfig+0xfc>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d108      	bne.n	800fba4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	695b      	ldr	r3, [r3, #20]
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	689a      	ldr	r2, [r3, #8]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a08      	ldr	r2, [pc, #32]	; (800fbec <TIM_Base_SetConfig+0xe4>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d103      	bne.n	800fbd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	691a      	ldr	r2, [r3, #16]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	615a      	str	r2, [r3, #20]
}
 800fbde:	bf00      	nop
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	40010000 	.word	0x40010000
 800fbf0:	40000400 	.word	0x40000400
 800fbf4:	40000800 	.word	0x40000800
 800fbf8:	40000c00 	.word	0x40000c00
 800fbfc:	40014000 	.word	0x40014000
 800fc00:	40014400 	.word	0x40014400
 800fc04:	40014800 	.word	0x40014800

0800fc08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	f023 0201 	bic.w	r2, r3, #1
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	699b      	ldr	r3, [r3, #24]
 800fc26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	6a1b      	ldr	r3, [r3, #32]
 800fc2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4a24      	ldr	r2, [pc, #144]	; (800fcc4 <TIM_TI1_SetConfig+0xbc>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d013      	beq.n	800fc5e <TIM_TI1_SetConfig+0x56>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc3c:	d00f      	beq.n	800fc5e <TIM_TI1_SetConfig+0x56>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	4a21      	ldr	r2, [pc, #132]	; (800fcc8 <TIM_TI1_SetConfig+0xc0>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d00b      	beq.n	800fc5e <TIM_TI1_SetConfig+0x56>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	4a20      	ldr	r2, [pc, #128]	; (800fccc <TIM_TI1_SetConfig+0xc4>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d007      	beq.n	800fc5e <TIM_TI1_SetConfig+0x56>
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	4a1f      	ldr	r2, [pc, #124]	; (800fcd0 <TIM_TI1_SetConfig+0xc8>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d003      	beq.n	800fc5e <TIM_TI1_SetConfig+0x56>
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	4a1e      	ldr	r2, [pc, #120]	; (800fcd4 <TIM_TI1_SetConfig+0xcc>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d101      	bne.n	800fc62 <TIM_TI1_SetConfig+0x5a>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e000      	b.n	800fc64 <TIM_TI1_SetConfig+0x5c>
 800fc62:	2300      	movs	r3, #0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d008      	beq.n	800fc7a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	f023 0303 	bic.w	r3, r3, #3
 800fc6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	617b      	str	r3, [r7, #20]
 800fc78:	e003      	b.n	800fc82 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	f043 0301 	orr.w	r3, r3, #1
 800fc80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f023 030a 	bic.w	r3, r3, #10
 800fc9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	f003 030a 	and.w	r3, r3, #10
 800fca4:	693a      	ldr	r2, [r7, #16]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	621a      	str	r2, [r3, #32]
}
 800fcb6:	bf00      	nop
 800fcb8:	371c      	adds	r7, #28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	40010000 	.word	0x40010000
 800fcc8:	40000400 	.word	0x40000400
 800fccc:	40000800 	.word	0x40000800
 800fcd0:	40000c00 	.word	0x40000c00
 800fcd4:	40014000 	.word	0x40014000

0800fcd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6a1b      	ldr	r3, [r3, #32]
 800fce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	f023 0201 	bic.w	r2, r3, #1
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	011b      	lsls	r3, r3, #4
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	f023 030a 	bic.w	r3, r3, #10
 800fd14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	621a      	str	r2, [r3, #32]
}
 800fd2a:	bf00      	nop
 800fd2c:	371c      	adds	r7, #28
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr

0800fd36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fd36:	b480      	push	{r7}
 800fd38:	b087      	sub	sp, #28
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	60f8      	str	r0, [r7, #12]
 800fd3e:	60b9      	str	r1, [r7, #8]
 800fd40:	607a      	str	r2, [r7, #4]
 800fd42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a1b      	ldr	r3, [r3, #32]
 800fd48:	f023 0210 	bic.w	r2, r3, #16
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	699b      	ldr	r3, [r3, #24]
 800fd54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a1b      	ldr	r3, [r3, #32]
 800fd5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	021b      	lsls	r3, r3, #8
 800fd68:	697a      	ldr	r2, [r7, #20]
 800fd6a:	4313      	orrs	r3, r2
 800fd6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	031b      	lsls	r3, r3, #12
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	697a      	ldr	r2, [r7, #20]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fd88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	011b      	lsls	r3, r3, #4
 800fd8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	693a      	ldr	r2, [r7, #16]
 800fda2:	621a      	str	r2, [r3, #32]
}
 800fda4:	bf00      	nop
 800fda6:	371c      	adds	r7, #28
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6a1b      	ldr	r3, [r3, #32]
 800fdc0:	f023 0210 	bic.w	r2, r3, #16
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	699b      	ldr	r3, [r3, #24]
 800fdcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	031b      	lsls	r3, r3, #12
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	4313      	orrs	r3, r2
 800fde4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fdec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	011b      	lsls	r3, r3, #4
 800fdf2:	693a      	ldr	r2, [r7, #16]
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	621a      	str	r2, [r3, #32]
}
 800fe04:	bf00      	nop
 800fe06:	371c      	adds	r7, #28
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
 800fe1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6a1b      	ldr	r3, [r3, #32]
 800fe34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	f023 0303 	bic.w	r3, r3, #3
 800fe3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	011b      	lsls	r3, r3, #4
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fe60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	021b      	lsls	r3, r3, #8
 800fe66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fe6a:	693a      	ldr	r2, [r7, #16]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	693a      	ldr	r2, [r7, #16]
 800fe7a:	621a      	str	r2, [r3, #32]
}
 800fe7c:	bf00      	nop
 800fe7e:	371c      	adds	r7, #28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b087      	sub	sp, #28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6a1b      	ldr	r3, [r3, #32]
 800fe9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	69db      	ldr	r3, [r3, #28]
 800fea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6a1b      	ldr	r3, [r3, #32]
 800feac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800feb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	021b      	lsls	r3, r3, #8
 800feba:	697a      	ldr	r2, [r7, #20]
 800febc:	4313      	orrs	r3, r2
 800febe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	031b      	lsls	r3, r3, #12
 800fecc:	b29b      	uxth	r3, r3
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800feda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	031b      	lsls	r3, r3, #12
 800fee0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fee4:	693a      	ldr	r2, [r7, #16]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	697a      	ldr	r2, [r7, #20]
 800feee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	621a      	str	r2, [r3, #32]
}
 800fef6:	bf00      	nop
 800fef8:	371c      	adds	r7, #28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b085      	sub	sp, #20
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff1a:	683a      	ldr	r2, [r7, #0]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	f043 0307 	orr.w	r3, r3, #7
 800ff24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	609a      	str	r2, [r3, #8]
}
 800ff2c:	bf00      	nop
 800ff2e:	3714      	adds	r7, #20
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b087      	sub	sp, #28
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	021a      	lsls	r2, r3, #8
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	697a      	ldr	r2, [r7, #20]
 800ff6a:	609a      	str	r2, [r3, #8]
}
 800ff6c:	bf00      	nop
 800ff6e:	371c      	adds	r7, #28
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	f003 031f 	and.w	r3, r3, #31
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6a1a      	ldr	r2, [r3, #32]
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	43db      	mvns	r3, r3
 800ff9a:	401a      	ands	r2, r3
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6a1a      	ldr	r2, [r3, #32]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	f003 031f 	and.w	r3, r3, #31
 800ffaa:	6879      	ldr	r1, [r7, #4]
 800ffac:	fa01 f303 	lsl.w	r3, r1, r3
 800ffb0:	431a      	orrs	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	621a      	str	r2, [r3, #32]
}
 800ffb6:	bf00      	nop
 800ffb8:	371c      	adds	r7, #28
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
	...

0800ffc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d101      	bne.n	800ffdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ffd8:	2302      	movs	r3, #2
 800ffda:	e050      	b.n	801007e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2202      	movs	r2, #2
 800ffe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a1c      	ldr	r2, [pc, #112]	; (801008c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d018      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010028:	d013      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a18      	ldr	r2, [pc, #96]	; (8010090 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d00e      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4a16      	ldr	r2, [pc, #88]	; (8010094 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d009      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a15      	ldr	r2, [pc, #84]	; (8010098 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d004      	beq.n	8010052 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a13      	ldr	r2, [pc, #76]	; (801009c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d10c      	bne.n	801006c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	4313      	orrs	r3, r2
 8010062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2201      	movs	r2, #1
 8010070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801007c:	2300      	movs	r3, #0
}
 801007e:	4618      	mov	r0, r3
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	40010000 	.word	0x40010000
 8010090:	40000400 	.word	0x40000400
 8010094:	40000800 	.word	0x40000800
 8010098:	40000c00 	.word	0x40000c00
 801009c:	40014000 	.word	0x40014000

080100a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100a8:	bf00      	nop
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80100bc:	bf00      	nop
 80100be:	370c      	adds	r7, #12
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr

080100c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80100d6:	2301      	movs	r3, #1
 80100d8:	e03f      	b.n	801015a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d106      	bne.n	80100f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7f5 ffac 	bl	800604c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2224      	movs	r2, #36	; 0x24
 80100f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801010a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fc8f 	bl	8010a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	691a      	ldr	r2, [r3, #16]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	695a      	ldr	r2, [r3, #20]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	68da      	ldr	r2, [r3, #12]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2220      	movs	r2, #32
 801014c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2220      	movs	r2, #32
 8010154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b082      	sub	sp, #8
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d101      	bne.n	8010174 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010170:	2301      	movs	r3, #1
 8010172:	e01e      	b.n	80101b2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2224      	movs	r2, #36	; 0x24
 8010178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68da      	ldr	r2, [r3, #12]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801018a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7f6 f833 	bl	80061f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2200      	movs	r2, #0
 8010196:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b088      	sub	sp, #32
 80101be:	af02      	add	r7, sp, #8
 80101c0:	60f8      	str	r0, [r7, #12]
 80101c2:	60b9      	str	r1, [r7, #8]
 80101c4:	603b      	str	r3, [r7, #0]
 80101c6:	4613      	mov	r3, r2
 80101c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80101ca:	2300      	movs	r3, #0
 80101cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	2b20      	cmp	r3, #32
 80101d8:	f040 8083 	bne.w	80102e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d002      	beq.n	80101e8 <HAL_UART_Transmit+0x2e>
 80101e2:	88fb      	ldrh	r3, [r7, #6]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d101      	bne.n	80101ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80101e8:	2301      	movs	r3, #1
 80101ea:	e07b      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d101      	bne.n	80101fa <HAL_UART_Transmit+0x40>
 80101f6:	2302      	movs	r3, #2
 80101f8:	e074      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2201      	movs	r2, #1
 80101fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2200      	movs	r2, #0
 8010206:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2221      	movs	r2, #33	; 0x21
 801020c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010210:	f7fa ff6e 	bl	800b0f0 <HAL_GetTick>
 8010214:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	88fa      	ldrh	r2, [r7, #6]
 801021a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	88fa      	ldrh	r2, [r7, #6]
 8010220:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2200      	movs	r2, #0
 8010226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801022a:	e042      	b.n	80102b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010230:	b29b      	uxth	r3, r3
 8010232:	3b01      	subs	r3, #1
 8010234:	b29a      	uxth	r2, r3
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010242:	d122      	bne.n	801028a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2200      	movs	r2, #0
 801024c:	2180      	movs	r1, #128	; 0x80
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f000 fa6c 	bl	801072c <UART_WaitOnFlagUntilTimeout>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801025a:	2303      	movs	r3, #3
 801025c:	e042      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	461a      	mov	r2, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010270:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d103      	bne.n	8010282 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	3302      	adds	r3, #2
 801027e:	60bb      	str	r3, [r7, #8]
 8010280:	e017      	b.n	80102b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	3301      	adds	r3, #1
 8010286:	60bb      	str	r3, [r7, #8]
 8010288:	e013      	b.n	80102b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2200      	movs	r2, #0
 8010292:	2180      	movs	r1, #128	; 0x80
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 fa49 	bl	801072c <UART_WaitOnFlagUntilTimeout>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d001      	beq.n	80102a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80102a0:	2303      	movs	r3, #3
 80102a2:	e01f      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	60ba      	str	r2, [r7, #8]
 80102aa:	781a      	ldrb	r2, [r3, #0]
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d1b7      	bne.n	801022c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2200      	movs	r2, #0
 80102c4:	2140      	movs	r1, #64	; 0x40
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f000 fa30 	bl	801072c <UART_WaitOnFlagUntilTimeout>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e006      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2220      	movs	r2, #32
 80102da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	e000      	b.n	80102e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80102e2:	2302      	movs	r3, #2
  }
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	4613      	mov	r3, r2
 80102f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010300:	b2db      	uxtb	r3, r3
 8010302:	2b20      	cmp	r3, #32
 8010304:	d166      	bne.n	80103d4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d002      	beq.n	8010312 <HAL_UART_Receive_DMA+0x26>
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010312:	2301      	movs	r3, #1
 8010314:	e05f      	b.n	80103d6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801031c:	2b01      	cmp	r3, #1
 801031e:	d101      	bne.n	8010324 <HAL_UART_Receive_DMA+0x38>
 8010320:	2302      	movs	r3, #2
 8010322:	e058      	b.n	80103d6 <HAL_UART_Receive_DMA+0xea>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	88fa      	ldrh	r2, [r7, #6]
 8010336:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2222      	movs	r2, #34	; 0x22
 8010342:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801034a:	4a25      	ldr	r2, [pc, #148]	; (80103e0 <HAL_UART_Receive_DMA+0xf4>)
 801034c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010352:	4a24      	ldr	r2, [pc, #144]	; (80103e4 <HAL_UART_Receive_DMA+0xf8>)
 8010354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801035a:	4a23      	ldr	r2, [pc, #140]	; (80103e8 <HAL_UART_Receive_DMA+0xfc>)
 801035c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010362:	2200      	movs	r2, #0
 8010364:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8010366:	f107 0308 	add.w	r3, r7, #8
 801036a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	3304      	adds	r3, #4
 8010376:	4619      	mov	r1, r3
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	88fb      	ldrh	r3, [r7, #6]
 801037e:	f7fb fe6d 	bl	800c05c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010382:	2300      	movs	r3, #0
 8010384:	613b      	str	r3, [r7, #16]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	613b      	str	r3, [r7, #16]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	613b      	str	r3, [r7, #16]
 8010396:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	68da      	ldr	r2, [r3, #12]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103ae:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	695a      	ldr	r2, [r3, #20]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f042 0201 	orr.w	r2, r2, #1
 80103be:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	695a      	ldr	r2, [r3, #20]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103ce:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80103d0:	2300      	movs	r3, #0
 80103d2:	e000      	b.n	80103d6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80103d4:	2302      	movs	r3, #2
  }
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	08010615 	.word	0x08010615
 80103e4:	0801067d 	.word	0x0801067d
 80103e8:	08010699 	.word	0x08010699

080103ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	695b      	ldr	r3, [r3, #20]
 801040a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801040c:	2300      	movs	r3, #0
 801040e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010410:	2300      	movs	r3, #0
 8010412:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	f003 030f 	and.w	r3, r3, #15
 801041a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10d      	bne.n	801043e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	f003 0320 	and.w	r3, r3, #32
 8010428:	2b00      	cmp	r3, #0
 801042a:	d008      	beq.n	801043e <HAL_UART_IRQHandler+0x52>
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	f003 0320 	and.w	r3, r3, #32
 8010432:	2b00      	cmp	r3, #0
 8010434:	d003      	beq.n	801043e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 fa78 	bl	801092c <UART_Receive_IT>
      return;
 801043c:	e0d1      	b.n	80105e2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 80b0 	beq.w	80105a6 <HAL_UART_IRQHandler+0x1ba>
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	2b00      	cmp	r3, #0
 801044e:	d105      	bne.n	801045c <HAL_UART_IRQHandler+0x70>
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010456:	2b00      	cmp	r3, #0
 8010458:	f000 80a5 	beq.w	80105a6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	f003 0301 	and.w	r3, r3, #1
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <HAL_UART_IRQHandler+0x90>
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801046c:	2b00      	cmp	r3, #0
 801046e:	d005      	beq.n	801047c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010474:	f043 0201 	orr.w	r2, r3, #1
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	f003 0304 	and.w	r3, r3, #4
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00a      	beq.n	801049c <HAL_UART_IRQHandler+0xb0>
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f003 0301 	and.w	r3, r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	d005      	beq.n	801049c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010494:	f043 0202 	orr.w	r2, r3, #2
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	f003 0302 	and.w	r3, r3, #2
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00a      	beq.n	80104bc <HAL_UART_IRQHandler+0xd0>
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d005      	beq.n	80104bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104b4:	f043 0204 	orr.w	r2, r3, #4
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	f003 0308 	and.w	r3, r3, #8
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00f      	beq.n	80104e6 <HAL_UART_IRQHandler+0xfa>
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d104      	bne.n	80104da <HAL_UART_IRQHandler+0xee>
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	f003 0301 	and.w	r3, r3, #1
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d005      	beq.n	80104e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104de:	f043 0208 	orr.w	r2, r3, #8
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d078      	beq.n	80105e0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	f003 0320 	and.w	r3, r3, #32
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d007      	beq.n	8010508 <HAL_UART_IRQHandler+0x11c>
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	f003 0320 	and.w	r3, r3, #32
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d002      	beq.n	8010508 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f000 fa12 	bl	801092c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010512:	2b40      	cmp	r3, #64	; 0x40
 8010514:	bf0c      	ite	eq
 8010516:	2301      	moveq	r3, #1
 8010518:	2300      	movne	r3, #0
 801051a:	b2db      	uxtb	r3, r3
 801051c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010522:	f003 0308 	and.w	r3, r3, #8
 8010526:	2b00      	cmp	r3, #0
 8010528:	d102      	bne.n	8010530 <HAL_UART_IRQHandler+0x144>
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d031      	beq.n	8010594 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f95b 	bl	80107ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	695b      	ldr	r3, [r3, #20]
 801053c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010540:	2b40      	cmp	r3, #64	; 0x40
 8010542:	d123      	bne.n	801058c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	695a      	ldr	r2, [r3, #20]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010552:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010558:	2b00      	cmp	r3, #0
 801055a:	d013      	beq.n	8010584 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010560:	4a21      	ldr	r2, [pc, #132]	; (80105e8 <HAL_UART_IRQHandler+0x1fc>)
 8010562:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010568:	4618      	mov	r0, r3
 801056a:	f7fb fdcf 	bl	800c10c <HAL_DMA_Abort_IT>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d016      	beq.n	80105a2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801057e:	4610      	mov	r0, r2
 8010580:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010582:	e00e      	b.n	80105a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7f5 fd4d 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801058a:	e00a      	b.n	80105a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7f5 fd49 	bl	8006024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010592:	e006      	b.n	80105a2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7f5 fd45 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80105a0:	e01e      	b.n	80105e0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105a2:	bf00      	nop
    return;
 80105a4:	e01c      	b.n	80105e0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80105a6:	69fb      	ldr	r3, [r7, #28]
 80105a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d008      	beq.n	80105c2 <HAL_UART_IRQHandler+0x1d6>
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d003      	beq.n	80105c2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 f948 	bl	8010850 <UART_Transmit_IT>
    return;
 80105c0:	e00f      	b.n	80105e2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00a      	beq.n	80105e2 <HAL_UART_IRQHandler+0x1f6>
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d005      	beq.n	80105e2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 f990 	bl	80108fc <UART_EndTransmit_IT>
    return;
 80105dc:	bf00      	nop
 80105de:	e000      	b.n	80105e2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80105e0:	bf00      	nop
  }
}
 80105e2:	3720      	adds	r7, #32
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	08010829 	.word	0x08010829

080105ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80105f4:	bf00      	nop
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010620:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801062c:	2b00      	cmp	r3, #0
 801062e:	d11e      	bne.n	801066e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	2200      	movs	r2, #0
 8010634:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	68da      	ldr	r2, [r3, #12]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010644:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	695a      	ldr	r2, [r3, #20]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f022 0201 	bic.w	r2, r2, #1
 8010654:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	695a      	ldr	r2, [r3, #20]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010664:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2220      	movs	r2, #32
 801066a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f7f5 fce2 	bl	8006038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010674:	bf00      	nop
 8010676:	3710      	adds	r7, #16
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010688:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7ff ffb8 	bl	8010600 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010690:	bf00      	nop
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80106a0:	2300      	movs	r3, #0
 80106a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	695b      	ldr	r3, [r3, #20]
 80106b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b4:	2b80      	cmp	r3, #128	; 0x80
 80106b6:	bf0c      	ite	eq
 80106b8:	2301      	moveq	r3, #1
 80106ba:	2300      	movne	r3, #0
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b21      	cmp	r3, #33	; 0x21
 80106ca:	d108      	bne.n	80106de <UART_DMAError+0x46>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d005      	beq.n	80106de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	2200      	movs	r2, #0
 80106d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80106d8:	68b8      	ldr	r0, [r7, #8]
 80106da:	f000 f871 	bl	80107c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	695b      	ldr	r3, [r3, #20]
 80106e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106e8:	2b40      	cmp	r3, #64	; 0x40
 80106ea:	bf0c      	ite	eq
 80106ec:	2301      	moveq	r3, #1
 80106ee:	2300      	movne	r3, #0
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b22      	cmp	r3, #34	; 0x22
 80106fe:	d108      	bne.n	8010712 <UART_DMAError+0x7a>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d005      	beq.n	8010712 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2200      	movs	r2, #0
 801070a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801070c:	68b8      	ldr	r0, [r7, #8]
 801070e:	f000 f86d 	bl	80107ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010716:	f043 0210 	orr.w	r2, r3, #16
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801071e:	68b8      	ldr	r0, [r7, #8]
 8010720:	f7f5 fc80 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010724:	bf00      	nop
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	603b      	str	r3, [r7, #0]
 8010738:	4613      	mov	r3, r2
 801073a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801073c:	e02c      	b.n	8010798 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010744:	d028      	beq.n	8010798 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d007      	beq.n	801075c <UART_WaitOnFlagUntilTimeout+0x30>
 801074c:	f7fa fcd0 	bl	800b0f0 <HAL_GetTick>
 8010750:	4602      	mov	r2, r0
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	69ba      	ldr	r2, [r7, #24]
 8010758:	429a      	cmp	r2, r3
 801075a:	d21d      	bcs.n	8010798 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801076a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	695a      	ldr	r2, [r3, #20]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f022 0201 	bic.w	r2, r2, #1
 801077a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2220      	movs	r2, #32
 8010780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2220      	movs	r2, #32
 8010788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2200      	movs	r2, #0
 8010790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	e00f      	b.n	80107b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	4013      	ands	r3, r2
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	bf0c      	ite	eq
 80107a8:	2301      	moveq	r3, #1
 80107aa:	2300      	movne	r3, #0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	461a      	mov	r2, r3
 80107b0:	79fb      	ldrb	r3, [r7, #7]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d0c3      	beq.n	801073e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3710      	adds	r7, #16
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}

080107c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	68da      	ldr	r2, [r3, #12]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80107d6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2220      	movs	r2, #32
 80107dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80107e0:	bf00      	nop
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	68da      	ldr	r2, [r3, #12]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010802:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	695a      	ldr	r2, [r3, #20]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f022 0201 	bic.w	r2, r2, #1
 8010812:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2220      	movs	r2, #32
 8010818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801081c:	bf00      	nop
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2200      	movs	r2, #0
 801083a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2200      	movs	r2, #0
 8010840:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7f5 fbee 	bl	8006024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010848:	bf00      	nop
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801085e:	b2db      	uxtb	r3, r3
 8010860:	2b21      	cmp	r3, #33	; 0x21
 8010862:	d144      	bne.n	80108ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801086c:	d11a      	bne.n	80108a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a1b      	ldr	r3, [r3, #32]
 8010872:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	881b      	ldrh	r3, [r3, #0]
 8010878:	461a      	mov	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010882:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d105      	bne.n	8010898 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a1b      	ldr	r3, [r3, #32]
 8010890:	1c9a      	adds	r2, r3, #2
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	621a      	str	r2, [r3, #32]
 8010896:	e00e      	b.n	80108b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6a1b      	ldr	r3, [r3, #32]
 801089c:	1c5a      	adds	r2, r3, #1
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	621a      	str	r2, [r3, #32]
 80108a2:	e008      	b.n	80108b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6a1b      	ldr	r3, [r3, #32]
 80108a8:	1c59      	adds	r1, r3, #1
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	6211      	str	r1, [r2, #32]
 80108ae:	781a      	ldrb	r2, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	3b01      	subs	r3, #1
 80108be:	b29b      	uxth	r3, r3
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	4619      	mov	r1, r3
 80108c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d10f      	bne.n	80108ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68da      	ldr	r2, [r3, #12]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80108d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	68da      	ldr	r2, [r3, #12]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80108e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e000      	b.n	80108f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80108ee:	2302      	movs	r3, #2
  }
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3714      	adds	r7, #20
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010912:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2220      	movs	r2, #32
 8010918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7ff fe65 	bl	80105ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010922:	2300      	movs	r3, #0
}
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b22      	cmp	r3, #34	; 0x22
 801093e:	d171      	bne.n	8010a24 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010948:	d123      	bne.n	8010992 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801094e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	691b      	ldr	r3, [r3, #16]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d10e      	bne.n	8010976 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	b29b      	uxth	r3, r3
 8010960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010964:	b29a      	uxth	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801096e:	1c9a      	adds	r2, r3, #2
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	629a      	str	r2, [r3, #40]	; 0x28
 8010974:	e029      	b.n	80109ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	b29b      	uxth	r3, r3
 801097e:	b2db      	uxtb	r3, r3
 8010980:	b29a      	uxth	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098a:	1c5a      	adds	r2, r3, #1
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	629a      	str	r2, [r3, #40]	; 0x28
 8010990:	e01b      	b.n	80109ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	691b      	ldr	r3, [r3, #16]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d10a      	bne.n	80109b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	6858      	ldr	r0, [r3, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a4:	1c59      	adds	r1, r3, #1
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	6291      	str	r1, [r2, #40]	; 0x28
 80109aa:	b2c2      	uxtb	r2, r0
 80109ac:	701a      	strb	r2, [r3, #0]
 80109ae:	e00c      	b.n	80109ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	b2da      	uxtb	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109bc:	1c58      	adds	r0, r3, #1
 80109be:	6879      	ldr	r1, [r7, #4]
 80109c0:	6288      	str	r0, [r1, #40]	; 0x28
 80109c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80109c6:	b2d2      	uxtb	r2, r2
 80109c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	3b01      	subs	r3, #1
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	4619      	mov	r1, r3
 80109d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d120      	bne.n	8010a20 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	68da      	ldr	r2, [r3, #12]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f022 0220 	bic.w	r2, r2, #32
 80109ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68da      	ldr	r2, [r3, #12]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80109fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	695a      	ldr	r2, [r3, #20]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f022 0201 	bic.w	r2, r2, #1
 8010a0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2220      	movs	r2, #32
 8010a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f7f5 fb0e 	bl	8006038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	e002      	b.n	8010a26 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	e000      	b.n	8010a26 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010a24:	2302      	movs	r3, #2
  }
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3710      	adds	r7, #16
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a34:	b085      	sub	sp, #20
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	691b      	ldr	r3, [r3, #16]
 8010a40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	68da      	ldr	r2, [r3, #12]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	430a      	orrs	r2, r1
 8010a4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	689a      	ldr	r2, [r3, #8]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	691b      	ldr	r3, [r3, #16]
 8010a58:	431a      	orrs	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	695b      	ldr	r3, [r3, #20]
 8010a5e:	431a      	orrs	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	69db      	ldr	r3, [r3, #28]
 8010a64:	4313      	orrs	r3, r2
 8010a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010a72:	f023 030c 	bic.w	r3, r3, #12
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	6812      	ldr	r2, [r2, #0]
 8010a7a:	68f9      	ldr	r1, [r7, #12]
 8010a7c:	430b      	orrs	r3, r1
 8010a7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	699a      	ldr	r2, [r3, #24]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	430a      	orrs	r2, r1
 8010a94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	69db      	ldr	r3, [r3, #28]
 8010a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a9e:	f040 818b 	bne.w	8010db8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4ac1      	ldr	r2, [pc, #772]	; (8010dac <UART_SetConfig+0x37c>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d005      	beq.n	8010ab8 <UART_SetConfig+0x88>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4abf      	ldr	r2, [pc, #764]	; (8010db0 <UART_SetConfig+0x380>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	f040 80bd 	bne.w	8010c32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010ab8:	f7fc fc96 	bl	800d3e8 <HAL_RCC_GetPCLK2Freq>
 8010abc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	461d      	mov	r5, r3
 8010ac2:	f04f 0600 	mov.w	r6, #0
 8010ac6:	46a8      	mov	r8, r5
 8010ac8:	46b1      	mov	r9, r6
 8010aca:	eb18 0308 	adds.w	r3, r8, r8
 8010ace:	eb49 0409 	adc.w	r4, r9, r9
 8010ad2:	4698      	mov	r8, r3
 8010ad4:	46a1      	mov	r9, r4
 8010ad6:	eb18 0805 	adds.w	r8, r8, r5
 8010ada:	eb49 0906 	adc.w	r9, r9, r6
 8010ade:	f04f 0100 	mov.w	r1, #0
 8010ae2:	f04f 0200 	mov.w	r2, #0
 8010ae6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010aea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010aee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010af2:	4688      	mov	r8, r1
 8010af4:	4691      	mov	r9, r2
 8010af6:	eb18 0005 	adds.w	r0, r8, r5
 8010afa:	eb49 0106 	adc.w	r1, r9, r6
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	461d      	mov	r5, r3
 8010b04:	f04f 0600 	mov.w	r6, #0
 8010b08:	196b      	adds	r3, r5, r5
 8010b0a:	eb46 0406 	adc.w	r4, r6, r6
 8010b0e:	461a      	mov	r2, r3
 8010b10:	4623      	mov	r3, r4
 8010b12:	f7f0 f8d1 	bl	8000cb8 <__aeabi_uldivmod>
 8010b16:	4603      	mov	r3, r0
 8010b18:	460c      	mov	r4, r1
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	4ba5      	ldr	r3, [pc, #660]	; (8010db4 <UART_SetConfig+0x384>)
 8010b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8010b22:	095b      	lsrs	r3, r3, #5
 8010b24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	461d      	mov	r5, r3
 8010b2c:	f04f 0600 	mov.w	r6, #0
 8010b30:	46a9      	mov	r9, r5
 8010b32:	46b2      	mov	sl, r6
 8010b34:	eb19 0309 	adds.w	r3, r9, r9
 8010b38:	eb4a 040a 	adc.w	r4, sl, sl
 8010b3c:	4699      	mov	r9, r3
 8010b3e:	46a2      	mov	sl, r4
 8010b40:	eb19 0905 	adds.w	r9, r9, r5
 8010b44:	eb4a 0a06 	adc.w	sl, sl, r6
 8010b48:	f04f 0100 	mov.w	r1, #0
 8010b4c:	f04f 0200 	mov.w	r2, #0
 8010b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010b54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010b58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010b5c:	4689      	mov	r9, r1
 8010b5e:	4692      	mov	sl, r2
 8010b60:	eb19 0005 	adds.w	r0, r9, r5
 8010b64:	eb4a 0106 	adc.w	r1, sl, r6
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	461d      	mov	r5, r3
 8010b6e:	f04f 0600 	mov.w	r6, #0
 8010b72:	196b      	adds	r3, r5, r5
 8010b74:	eb46 0406 	adc.w	r4, r6, r6
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4623      	mov	r3, r4
 8010b7c:	f7f0 f89c 	bl	8000cb8 <__aeabi_uldivmod>
 8010b80:	4603      	mov	r3, r0
 8010b82:	460c      	mov	r4, r1
 8010b84:	461a      	mov	r2, r3
 8010b86:	4b8b      	ldr	r3, [pc, #556]	; (8010db4 <UART_SetConfig+0x384>)
 8010b88:	fba3 1302 	umull	r1, r3, r3, r2
 8010b8c:	095b      	lsrs	r3, r3, #5
 8010b8e:	2164      	movs	r1, #100	; 0x64
 8010b90:	fb01 f303 	mul.w	r3, r1, r3
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	3332      	adds	r3, #50	; 0x32
 8010b9a:	4a86      	ldr	r2, [pc, #536]	; (8010db4 <UART_SetConfig+0x384>)
 8010b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba0:	095b      	lsrs	r3, r3, #5
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010ba8:	4498      	add	r8, r3
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	461d      	mov	r5, r3
 8010bae:	f04f 0600 	mov.w	r6, #0
 8010bb2:	46a9      	mov	r9, r5
 8010bb4:	46b2      	mov	sl, r6
 8010bb6:	eb19 0309 	adds.w	r3, r9, r9
 8010bba:	eb4a 040a 	adc.w	r4, sl, sl
 8010bbe:	4699      	mov	r9, r3
 8010bc0:	46a2      	mov	sl, r4
 8010bc2:	eb19 0905 	adds.w	r9, r9, r5
 8010bc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8010bca:	f04f 0100 	mov.w	r1, #0
 8010bce:	f04f 0200 	mov.w	r2, #0
 8010bd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010bd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010bda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010bde:	4689      	mov	r9, r1
 8010be0:	4692      	mov	sl, r2
 8010be2:	eb19 0005 	adds.w	r0, r9, r5
 8010be6:	eb4a 0106 	adc.w	r1, sl, r6
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	461d      	mov	r5, r3
 8010bf0:	f04f 0600 	mov.w	r6, #0
 8010bf4:	196b      	adds	r3, r5, r5
 8010bf6:	eb46 0406 	adc.w	r4, r6, r6
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	4623      	mov	r3, r4
 8010bfe:	f7f0 f85b 	bl	8000cb8 <__aeabi_uldivmod>
 8010c02:	4603      	mov	r3, r0
 8010c04:	460c      	mov	r4, r1
 8010c06:	461a      	mov	r2, r3
 8010c08:	4b6a      	ldr	r3, [pc, #424]	; (8010db4 <UART_SetConfig+0x384>)
 8010c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8010c0e:	095b      	lsrs	r3, r3, #5
 8010c10:	2164      	movs	r1, #100	; 0x64
 8010c12:	fb01 f303 	mul.w	r3, r1, r3
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	00db      	lsls	r3, r3, #3
 8010c1a:	3332      	adds	r3, #50	; 0x32
 8010c1c:	4a65      	ldr	r2, [pc, #404]	; (8010db4 <UART_SetConfig+0x384>)
 8010c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c22:	095b      	lsrs	r3, r3, #5
 8010c24:	f003 0207 	and.w	r2, r3, #7
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4442      	add	r2, r8
 8010c2e:	609a      	str	r2, [r3, #8]
 8010c30:	e26f      	b.n	8011112 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010c32:	f7fc fbc5 	bl	800d3c0 <HAL_RCC_GetPCLK1Freq>
 8010c36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	461d      	mov	r5, r3
 8010c3c:	f04f 0600 	mov.w	r6, #0
 8010c40:	46a8      	mov	r8, r5
 8010c42:	46b1      	mov	r9, r6
 8010c44:	eb18 0308 	adds.w	r3, r8, r8
 8010c48:	eb49 0409 	adc.w	r4, r9, r9
 8010c4c:	4698      	mov	r8, r3
 8010c4e:	46a1      	mov	r9, r4
 8010c50:	eb18 0805 	adds.w	r8, r8, r5
 8010c54:	eb49 0906 	adc.w	r9, r9, r6
 8010c58:	f04f 0100 	mov.w	r1, #0
 8010c5c:	f04f 0200 	mov.w	r2, #0
 8010c60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010c64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010c68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010c6c:	4688      	mov	r8, r1
 8010c6e:	4691      	mov	r9, r2
 8010c70:	eb18 0005 	adds.w	r0, r8, r5
 8010c74:	eb49 0106 	adc.w	r1, r9, r6
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	461d      	mov	r5, r3
 8010c7e:	f04f 0600 	mov.w	r6, #0
 8010c82:	196b      	adds	r3, r5, r5
 8010c84:	eb46 0406 	adc.w	r4, r6, r6
 8010c88:	461a      	mov	r2, r3
 8010c8a:	4623      	mov	r3, r4
 8010c8c:	f7f0 f814 	bl	8000cb8 <__aeabi_uldivmod>
 8010c90:	4603      	mov	r3, r0
 8010c92:	460c      	mov	r4, r1
 8010c94:	461a      	mov	r2, r3
 8010c96:	4b47      	ldr	r3, [pc, #284]	; (8010db4 <UART_SetConfig+0x384>)
 8010c98:	fba3 2302 	umull	r2, r3, r3, r2
 8010c9c:	095b      	lsrs	r3, r3, #5
 8010c9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	461d      	mov	r5, r3
 8010ca6:	f04f 0600 	mov.w	r6, #0
 8010caa:	46a9      	mov	r9, r5
 8010cac:	46b2      	mov	sl, r6
 8010cae:	eb19 0309 	adds.w	r3, r9, r9
 8010cb2:	eb4a 040a 	adc.w	r4, sl, sl
 8010cb6:	4699      	mov	r9, r3
 8010cb8:	46a2      	mov	sl, r4
 8010cba:	eb19 0905 	adds.w	r9, r9, r5
 8010cbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8010cc2:	f04f 0100 	mov.w	r1, #0
 8010cc6:	f04f 0200 	mov.w	r2, #0
 8010cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010cce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010cd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010cd6:	4689      	mov	r9, r1
 8010cd8:	4692      	mov	sl, r2
 8010cda:	eb19 0005 	adds.w	r0, r9, r5
 8010cde:	eb4a 0106 	adc.w	r1, sl, r6
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	461d      	mov	r5, r3
 8010ce8:	f04f 0600 	mov.w	r6, #0
 8010cec:	196b      	adds	r3, r5, r5
 8010cee:	eb46 0406 	adc.w	r4, r6, r6
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	4623      	mov	r3, r4
 8010cf6:	f7ef ffdf 	bl	8000cb8 <__aeabi_uldivmod>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	460c      	mov	r4, r1
 8010cfe:	461a      	mov	r2, r3
 8010d00:	4b2c      	ldr	r3, [pc, #176]	; (8010db4 <UART_SetConfig+0x384>)
 8010d02:	fba3 1302 	umull	r1, r3, r3, r2
 8010d06:	095b      	lsrs	r3, r3, #5
 8010d08:	2164      	movs	r1, #100	; 0x64
 8010d0a:	fb01 f303 	mul.w	r3, r1, r3
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	3332      	adds	r3, #50	; 0x32
 8010d14:	4a27      	ldr	r2, [pc, #156]	; (8010db4 <UART_SetConfig+0x384>)
 8010d16:	fba2 2303 	umull	r2, r3, r2, r3
 8010d1a:	095b      	lsrs	r3, r3, #5
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010d22:	4498      	add	r8, r3
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	461d      	mov	r5, r3
 8010d28:	f04f 0600 	mov.w	r6, #0
 8010d2c:	46a9      	mov	r9, r5
 8010d2e:	46b2      	mov	sl, r6
 8010d30:	eb19 0309 	adds.w	r3, r9, r9
 8010d34:	eb4a 040a 	adc.w	r4, sl, sl
 8010d38:	4699      	mov	r9, r3
 8010d3a:	46a2      	mov	sl, r4
 8010d3c:	eb19 0905 	adds.w	r9, r9, r5
 8010d40:	eb4a 0a06 	adc.w	sl, sl, r6
 8010d44:	f04f 0100 	mov.w	r1, #0
 8010d48:	f04f 0200 	mov.w	r2, #0
 8010d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010d58:	4689      	mov	r9, r1
 8010d5a:	4692      	mov	sl, r2
 8010d5c:	eb19 0005 	adds.w	r0, r9, r5
 8010d60:	eb4a 0106 	adc.w	r1, sl, r6
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	461d      	mov	r5, r3
 8010d6a:	f04f 0600 	mov.w	r6, #0
 8010d6e:	196b      	adds	r3, r5, r5
 8010d70:	eb46 0406 	adc.w	r4, r6, r6
 8010d74:	461a      	mov	r2, r3
 8010d76:	4623      	mov	r3, r4
 8010d78:	f7ef ff9e 	bl	8000cb8 <__aeabi_uldivmod>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b0c      	ldr	r3, [pc, #48]	; (8010db4 <UART_SetConfig+0x384>)
 8010d84:	fba3 1302 	umull	r1, r3, r3, r2
 8010d88:	095b      	lsrs	r3, r3, #5
 8010d8a:	2164      	movs	r1, #100	; 0x64
 8010d8c:	fb01 f303 	mul.w	r3, r1, r3
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	00db      	lsls	r3, r3, #3
 8010d94:	3332      	adds	r3, #50	; 0x32
 8010d96:	4a07      	ldr	r2, [pc, #28]	; (8010db4 <UART_SetConfig+0x384>)
 8010d98:	fba2 2303 	umull	r2, r3, r2, r3
 8010d9c:	095b      	lsrs	r3, r3, #5
 8010d9e:	f003 0207 	and.w	r2, r3, #7
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4442      	add	r2, r8
 8010da8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010daa:	e1b2      	b.n	8011112 <UART_SetConfig+0x6e2>
 8010dac:	40011000 	.word	0x40011000
 8010db0:	40011400 	.word	0x40011400
 8010db4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4ad7      	ldr	r2, [pc, #860]	; (801111c <UART_SetConfig+0x6ec>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d005      	beq.n	8010dce <UART_SetConfig+0x39e>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4ad6      	ldr	r2, [pc, #856]	; (8011120 <UART_SetConfig+0x6f0>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	f040 80d1 	bne.w	8010f70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010dce:	f7fc fb0b 	bl	800d3e8 <HAL_RCC_GetPCLK2Freq>
 8010dd2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	469a      	mov	sl, r3
 8010dd8:	f04f 0b00 	mov.w	fp, #0
 8010ddc:	46d0      	mov	r8, sl
 8010dde:	46d9      	mov	r9, fp
 8010de0:	eb18 0308 	adds.w	r3, r8, r8
 8010de4:	eb49 0409 	adc.w	r4, r9, r9
 8010de8:	4698      	mov	r8, r3
 8010dea:	46a1      	mov	r9, r4
 8010dec:	eb18 080a 	adds.w	r8, r8, sl
 8010df0:	eb49 090b 	adc.w	r9, r9, fp
 8010df4:	f04f 0100 	mov.w	r1, #0
 8010df8:	f04f 0200 	mov.w	r2, #0
 8010dfc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010e00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010e04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010e08:	4688      	mov	r8, r1
 8010e0a:	4691      	mov	r9, r2
 8010e0c:	eb1a 0508 	adds.w	r5, sl, r8
 8010e10:	eb4b 0609 	adc.w	r6, fp, r9
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	4619      	mov	r1, r3
 8010e1a:	f04f 0200 	mov.w	r2, #0
 8010e1e:	f04f 0300 	mov.w	r3, #0
 8010e22:	f04f 0400 	mov.w	r4, #0
 8010e26:	0094      	lsls	r4, r2, #2
 8010e28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010e2c:	008b      	lsls	r3, r1, #2
 8010e2e:	461a      	mov	r2, r3
 8010e30:	4623      	mov	r3, r4
 8010e32:	4628      	mov	r0, r5
 8010e34:	4631      	mov	r1, r6
 8010e36:	f7ef ff3f 	bl	8000cb8 <__aeabi_uldivmod>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	461a      	mov	r2, r3
 8010e40:	4bb8      	ldr	r3, [pc, #736]	; (8011124 <UART_SetConfig+0x6f4>)
 8010e42:	fba3 2302 	umull	r2, r3, r3, r2
 8010e46:	095b      	lsrs	r3, r3, #5
 8010e48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	469b      	mov	fp, r3
 8010e50:	f04f 0c00 	mov.w	ip, #0
 8010e54:	46d9      	mov	r9, fp
 8010e56:	46e2      	mov	sl, ip
 8010e58:	eb19 0309 	adds.w	r3, r9, r9
 8010e5c:	eb4a 040a 	adc.w	r4, sl, sl
 8010e60:	4699      	mov	r9, r3
 8010e62:	46a2      	mov	sl, r4
 8010e64:	eb19 090b 	adds.w	r9, r9, fp
 8010e68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010e6c:	f04f 0100 	mov.w	r1, #0
 8010e70:	f04f 0200 	mov.w	r2, #0
 8010e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010e78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010e7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010e80:	4689      	mov	r9, r1
 8010e82:	4692      	mov	sl, r2
 8010e84:	eb1b 0509 	adds.w	r5, fp, r9
 8010e88:	eb4c 060a 	adc.w	r6, ip, sl
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	4619      	mov	r1, r3
 8010e92:	f04f 0200 	mov.w	r2, #0
 8010e96:	f04f 0300 	mov.w	r3, #0
 8010e9a:	f04f 0400 	mov.w	r4, #0
 8010e9e:	0094      	lsls	r4, r2, #2
 8010ea0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010ea4:	008b      	lsls	r3, r1, #2
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	4623      	mov	r3, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	4631      	mov	r1, r6
 8010eae:	f7ef ff03 	bl	8000cb8 <__aeabi_uldivmod>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4b9a      	ldr	r3, [pc, #616]	; (8011124 <UART_SetConfig+0x6f4>)
 8010eba:	fba3 1302 	umull	r1, r3, r3, r2
 8010ebe:	095b      	lsrs	r3, r3, #5
 8010ec0:	2164      	movs	r1, #100	; 0x64
 8010ec2:	fb01 f303 	mul.w	r3, r1, r3
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	011b      	lsls	r3, r3, #4
 8010eca:	3332      	adds	r3, #50	; 0x32
 8010ecc:	4a95      	ldr	r2, [pc, #596]	; (8011124 <UART_SetConfig+0x6f4>)
 8010ece:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed2:	095b      	lsrs	r3, r3, #5
 8010ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ed8:	4498      	add	r8, r3
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	469b      	mov	fp, r3
 8010ede:	f04f 0c00 	mov.w	ip, #0
 8010ee2:	46d9      	mov	r9, fp
 8010ee4:	46e2      	mov	sl, ip
 8010ee6:	eb19 0309 	adds.w	r3, r9, r9
 8010eea:	eb4a 040a 	adc.w	r4, sl, sl
 8010eee:	4699      	mov	r9, r3
 8010ef0:	46a2      	mov	sl, r4
 8010ef2:	eb19 090b 	adds.w	r9, r9, fp
 8010ef6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010efa:	f04f 0100 	mov.w	r1, #0
 8010efe:	f04f 0200 	mov.w	r2, #0
 8010f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f0e:	4689      	mov	r9, r1
 8010f10:	4692      	mov	sl, r2
 8010f12:	eb1b 0509 	adds.w	r5, fp, r9
 8010f16:	eb4c 060a 	adc.w	r6, ip, sl
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	f04f 0200 	mov.w	r2, #0
 8010f24:	f04f 0300 	mov.w	r3, #0
 8010f28:	f04f 0400 	mov.w	r4, #0
 8010f2c:	0094      	lsls	r4, r2, #2
 8010f2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010f32:	008b      	lsls	r3, r1, #2
 8010f34:	461a      	mov	r2, r3
 8010f36:	4623      	mov	r3, r4
 8010f38:	4628      	mov	r0, r5
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	f7ef febc 	bl	8000cb8 <__aeabi_uldivmod>
 8010f40:	4603      	mov	r3, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	461a      	mov	r2, r3
 8010f46:	4b77      	ldr	r3, [pc, #476]	; (8011124 <UART_SetConfig+0x6f4>)
 8010f48:	fba3 1302 	umull	r1, r3, r3, r2
 8010f4c:	095b      	lsrs	r3, r3, #5
 8010f4e:	2164      	movs	r1, #100	; 0x64
 8010f50:	fb01 f303 	mul.w	r3, r1, r3
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	011b      	lsls	r3, r3, #4
 8010f58:	3332      	adds	r3, #50	; 0x32
 8010f5a:	4a72      	ldr	r2, [pc, #456]	; (8011124 <UART_SetConfig+0x6f4>)
 8010f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f60:	095b      	lsrs	r3, r3, #5
 8010f62:	f003 020f 	and.w	r2, r3, #15
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4442      	add	r2, r8
 8010f6c:	609a      	str	r2, [r3, #8]
 8010f6e:	e0d0      	b.n	8011112 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010f70:	f7fc fa26 	bl	800d3c0 <HAL_RCC_GetPCLK1Freq>
 8010f74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	469a      	mov	sl, r3
 8010f7a:	f04f 0b00 	mov.w	fp, #0
 8010f7e:	46d0      	mov	r8, sl
 8010f80:	46d9      	mov	r9, fp
 8010f82:	eb18 0308 	adds.w	r3, r8, r8
 8010f86:	eb49 0409 	adc.w	r4, r9, r9
 8010f8a:	4698      	mov	r8, r3
 8010f8c:	46a1      	mov	r9, r4
 8010f8e:	eb18 080a 	adds.w	r8, r8, sl
 8010f92:	eb49 090b 	adc.w	r9, r9, fp
 8010f96:	f04f 0100 	mov.w	r1, #0
 8010f9a:	f04f 0200 	mov.w	r2, #0
 8010f9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010fa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010fa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010faa:	4688      	mov	r8, r1
 8010fac:	4691      	mov	r9, r2
 8010fae:	eb1a 0508 	adds.w	r5, sl, r8
 8010fb2:	eb4b 0609 	adc.w	r6, fp, r9
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f04f 0200 	mov.w	r2, #0
 8010fc0:	f04f 0300 	mov.w	r3, #0
 8010fc4:	f04f 0400 	mov.w	r4, #0
 8010fc8:	0094      	lsls	r4, r2, #2
 8010fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010fce:	008b      	lsls	r3, r1, #2
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	4623      	mov	r3, r4
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	4631      	mov	r1, r6
 8010fd8:	f7ef fe6e 	bl	8000cb8 <__aeabi_uldivmod>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4b50      	ldr	r3, [pc, #320]	; (8011124 <UART_SetConfig+0x6f4>)
 8010fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8010fe8:	095b      	lsrs	r3, r3, #5
 8010fea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	469b      	mov	fp, r3
 8010ff2:	f04f 0c00 	mov.w	ip, #0
 8010ff6:	46d9      	mov	r9, fp
 8010ff8:	46e2      	mov	sl, ip
 8010ffa:	eb19 0309 	adds.w	r3, r9, r9
 8010ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8011002:	4699      	mov	r9, r3
 8011004:	46a2      	mov	sl, r4
 8011006:	eb19 090b 	adds.w	r9, r9, fp
 801100a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801100e:	f04f 0100 	mov.w	r1, #0
 8011012:	f04f 0200 	mov.w	r2, #0
 8011016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801101a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801101e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011022:	4689      	mov	r9, r1
 8011024:	4692      	mov	sl, r2
 8011026:	eb1b 0509 	adds.w	r5, fp, r9
 801102a:	eb4c 060a 	adc.w	r6, ip, sl
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	4619      	mov	r1, r3
 8011034:	f04f 0200 	mov.w	r2, #0
 8011038:	f04f 0300 	mov.w	r3, #0
 801103c:	f04f 0400 	mov.w	r4, #0
 8011040:	0094      	lsls	r4, r2, #2
 8011042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011046:	008b      	lsls	r3, r1, #2
 8011048:	461a      	mov	r2, r3
 801104a:	4623      	mov	r3, r4
 801104c:	4628      	mov	r0, r5
 801104e:	4631      	mov	r1, r6
 8011050:	f7ef fe32 	bl	8000cb8 <__aeabi_uldivmod>
 8011054:	4603      	mov	r3, r0
 8011056:	460c      	mov	r4, r1
 8011058:	461a      	mov	r2, r3
 801105a:	4b32      	ldr	r3, [pc, #200]	; (8011124 <UART_SetConfig+0x6f4>)
 801105c:	fba3 1302 	umull	r1, r3, r3, r2
 8011060:	095b      	lsrs	r3, r3, #5
 8011062:	2164      	movs	r1, #100	; 0x64
 8011064:	fb01 f303 	mul.w	r3, r1, r3
 8011068:	1ad3      	subs	r3, r2, r3
 801106a:	011b      	lsls	r3, r3, #4
 801106c:	3332      	adds	r3, #50	; 0x32
 801106e:	4a2d      	ldr	r2, [pc, #180]	; (8011124 <UART_SetConfig+0x6f4>)
 8011070:	fba2 2303 	umull	r2, r3, r2, r3
 8011074:	095b      	lsrs	r3, r3, #5
 8011076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801107a:	4498      	add	r8, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	469b      	mov	fp, r3
 8011080:	f04f 0c00 	mov.w	ip, #0
 8011084:	46d9      	mov	r9, fp
 8011086:	46e2      	mov	sl, ip
 8011088:	eb19 0309 	adds.w	r3, r9, r9
 801108c:	eb4a 040a 	adc.w	r4, sl, sl
 8011090:	4699      	mov	r9, r3
 8011092:	46a2      	mov	sl, r4
 8011094:	eb19 090b 	adds.w	r9, r9, fp
 8011098:	eb4a 0a0c 	adc.w	sl, sl, ip
 801109c:	f04f 0100 	mov.w	r1, #0
 80110a0:	f04f 0200 	mov.w	r2, #0
 80110a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80110a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80110ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80110b0:	4689      	mov	r9, r1
 80110b2:	4692      	mov	sl, r2
 80110b4:	eb1b 0509 	adds.w	r5, fp, r9
 80110b8:	eb4c 060a 	adc.w	r6, ip, sl
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	4619      	mov	r1, r3
 80110c2:	f04f 0200 	mov.w	r2, #0
 80110c6:	f04f 0300 	mov.w	r3, #0
 80110ca:	f04f 0400 	mov.w	r4, #0
 80110ce:	0094      	lsls	r4, r2, #2
 80110d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80110d4:	008b      	lsls	r3, r1, #2
 80110d6:	461a      	mov	r2, r3
 80110d8:	4623      	mov	r3, r4
 80110da:	4628      	mov	r0, r5
 80110dc:	4631      	mov	r1, r6
 80110de:	f7ef fdeb 	bl	8000cb8 <__aeabi_uldivmod>
 80110e2:	4603      	mov	r3, r0
 80110e4:	460c      	mov	r4, r1
 80110e6:	461a      	mov	r2, r3
 80110e8:	4b0e      	ldr	r3, [pc, #56]	; (8011124 <UART_SetConfig+0x6f4>)
 80110ea:	fba3 1302 	umull	r1, r3, r3, r2
 80110ee:	095b      	lsrs	r3, r3, #5
 80110f0:	2164      	movs	r1, #100	; 0x64
 80110f2:	fb01 f303 	mul.w	r3, r1, r3
 80110f6:	1ad3      	subs	r3, r2, r3
 80110f8:	011b      	lsls	r3, r3, #4
 80110fa:	3332      	adds	r3, #50	; 0x32
 80110fc:	4a09      	ldr	r2, [pc, #36]	; (8011124 <UART_SetConfig+0x6f4>)
 80110fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011102:	095b      	lsrs	r3, r3, #5
 8011104:	f003 020f 	and.w	r2, r3, #15
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4442      	add	r2, r8
 801110e:	609a      	str	r2, [r3, #8]
}
 8011110:	e7ff      	b.n	8011112 <UART_SetConfig+0x6e2>
 8011112:	bf00      	nop
 8011114:	3714      	adds	r7, #20
 8011116:	46bd      	mov	sp, r7
 8011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111c:	40011000 	.word	0x40011000
 8011120:	40011400 	.word	0x40011400
 8011124:	51eb851f 	.word	0x51eb851f

08011128 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011128:	b084      	sub	sp, #16
 801112a:	b480      	push	{r7}
 801112c:	b085      	sub	sp, #20
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	f107 001c 	add.w	r0, r7, #28
 8011136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801113e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011140:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011142:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011146:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011148:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801114a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801114e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011152:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	4313      	orrs	r3, r2
 8011158:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011162:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011166:	68fa      	ldr	r2, [r7, #12]
 8011168:	431a      	orrs	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	b004      	add	sp, #16
 801117c:	4770      	bx	lr

0801117e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801117e:	b480      	push	{r7}
 8011180:	b083      	sub	sp, #12
 8011182:	af00      	add	r7, sp, #0
 8011184:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801118c:	4618      	mov	r0, r3
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111ac:	2300      	movs	r3, #0
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	370c      	adds	r7, #12
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr

080111ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2203      	movs	r2, #3
 80111c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80111c8:	2002      	movs	r0, #2
 80111ca:	f7f9 ff9d 	bl	800b108 <HAL_Delay>
  
  return HAL_OK;
 80111ce:	2300      	movs	r3, #0
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f003 0303 	and.w	r3, r3, #3
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011212:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011218:	431a      	orrs	r2, r3
                       Command->CPSM);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801121e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	4313      	orrs	r3, r2
 8011224:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801122e:	f023 030f 	bic.w	r3, r3, #15
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	431a      	orrs	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr

08011248 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	b2db      	uxtb	r3, r3
}
 8011256:	4618      	mov	r0, r3
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr

08011262 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011262:	b480      	push	{r7}
 8011264:	b085      	sub	sp, #20
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
 801126a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	3314      	adds	r3, #20
 8011270:	461a      	mov	r2, r3
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	4413      	add	r3, r2
 8011276:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
}  
 801127c:	4618      	mov	r0, r3
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	685a      	ldr	r2, [r3, #4]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80112b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80112ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80112bc:	68fa      	ldr	r2, [r7, #12]
 80112be:	4313      	orrs	r3, r2
 80112c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	431a      	orrs	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80112d2:	2300      	movs	r3, #0

}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3714      	adds	r7, #20
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b088      	sub	sp, #32
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80112ee:	2310      	movs	r3, #16
 80112f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80112f2:	2340      	movs	r3, #64	; 0x40
 80112f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80112f6:	2300      	movs	r3, #0
 80112f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80112fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011300:	f107 0308 	add.w	r3, r7, #8
 8011304:	4619      	mov	r1, r3
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7ff ff74 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011310:	2110      	movs	r1, #16
 8011312:	6878      	ldr	r0, [r7, #4]
 8011314:	f000 fa40 	bl	8011798 <SDMMC_GetCmdResp1>
 8011318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801131a:	69fb      	ldr	r3, [r7, #28]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3720      	adds	r7, #32
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011332:	2311      	movs	r3, #17
 8011334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011336:	2340      	movs	r3, #64	; 0x40
 8011338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801133a:	2300      	movs	r3, #0
 801133c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011342:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	4619      	mov	r1, r3
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff ff52 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011350:	f241 3288 	movw	r2, #5000	; 0x1388
 8011354:	2111      	movs	r1, #17
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 fa1e 	bl	8011798 <SDMMC_GetCmdResp1>
 801135c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801135e:	69fb      	ldr	r3, [r7, #28]
}
 8011360:	4618      	mov	r0, r3
 8011362:	3720      	adds	r7, #32
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b088      	sub	sp, #32
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011376:	2312      	movs	r3, #18
 8011378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801137a:	2340      	movs	r3, #64	; 0x40
 801137c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801137e:	2300      	movs	r3, #0
 8011380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011386:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011388:	f107 0308 	add.w	r3, r7, #8
 801138c:	4619      	mov	r1, r3
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7ff ff30 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011394:	f241 3288 	movw	r2, #5000	; 0x1388
 8011398:	2112      	movs	r1, #18
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 f9fc 	bl	8011798 <SDMMC_GetCmdResp1>
 80113a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113a2:	69fb      	ldr	r3, [r7, #28]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3720      	adds	r7, #32
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b088      	sub	sp, #32
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80113ba:	2318      	movs	r3, #24
 80113bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80113be:	2340      	movs	r3, #64	; 0x40
 80113c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80113c2:	2300      	movs	r3, #0
 80113c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80113c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80113cc:	f107 0308 	add.w	r3, r7, #8
 80113d0:	4619      	mov	r1, r3
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7ff ff0e 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80113d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80113dc:	2118      	movs	r1, #24
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 f9da 	bl	8011798 <SDMMC_GetCmdResp1>
 80113e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113e6:	69fb      	ldr	r3, [r7, #28]
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3720      	adds	r7, #32
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b088      	sub	sp, #32
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80113fe:	2319      	movs	r3, #25
 8011400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011402:	2340      	movs	r3, #64	; 0x40
 8011404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011406:	2300      	movs	r3, #0
 8011408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801140e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011410:	f107 0308 	add.w	r3, r7, #8
 8011414:	4619      	mov	r1, r3
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7ff feec 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011420:	2119      	movs	r1, #25
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 f9b8 	bl	8011798 <SDMMC_GetCmdResp1>
 8011428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801142a:	69fb      	ldr	r3, [r7, #28]
}
 801142c:	4618      	mov	r0, r3
 801142e:	3720      	adds	r7, #32
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801143c:	2300      	movs	r3, #0
 801143e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011440:	230c      	movs	r3, #12
 8011442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011444:	2340      	movs	r3, #64	; 0x40
 8011446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011448:	2300      	movs	r3, #0
 801144a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801144c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011450:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011452:	f107 0308 	add.w	r3, r7, #8
 8011456:	4619      	mov	r1, r3
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f7ff fecb 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801145e:	4a05      	ldr	r2, [pc, #20]	; (8011474 <SDMMC_CmdStopTransfer+0x40>)
 8011460:	210c      	movs	r1, #12
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f000 f998 	bl	8011798 <SDMMC_GetCmdResp1>
 8011468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801146a:	69fb      	ldr	r3, [r7, #28]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3720      	adds	r7, #32
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	05f5e100 	.word	0x05f5e100

08011478 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08a      	sub	sp, #40	; 0x28
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011488:	2307      	movs	r3, #7
 801148a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801148c:	2340      	movs	r3, #64	; 0x40
 801148e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011490:	2300      	movs	r3, #0
 8011492:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011498:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801149a:	f107 0310 	add.w	r3, r7, #16
 801149e:	4619      	mov	r1, r3
 80114a0:	68f8      	ldr	r0, [r7, #12]
 80114a2:	f7ff fea7 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80114a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80114aa:	2107      	movs	r1, #7
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f000 f973 	bl	8011798 <SDMMC_GetCmdResp1>
 80114b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3728      	adds	r7, #40	; 0x28
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80114be:	b580      	push	{r7, lr}
 80114c0:	b088      	sub	sp, #32
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80114c6:	2300      	movs	r3, #0
 80114c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80114ca:	2300      	movs	r3, #0
 80114cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80114ce:	2300      	movs	r3, #0
 80114d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80114d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80114dc:	f107 0308 	add.w	r3, r7, #8
 80114e0:	4619      	mov	r1, r3
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff fe86 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f000 f92d 	bl	8011748 <SDMMC_GetCmdError>
 80114ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114f0:	69fb      	ldr	r3, [r7, #28]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3720      	adds	r7, #32
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b088      	sub	sp, #32
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011502:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011508:	2308      	movs	r3, #8
 801150a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801150c:	2340      	movs	r3, #64	; 0x40
 801150e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011510:	2300      	movs	r3, #0
 8011512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801151a:	f107 0308 	add.w	r3, r7, #8
 801151e:	4619      	mov	r1, r3
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7ff fe67 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 fb16 	bl	8011b58 <SDMMC_GetCmdResp7>
 801152c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801152e:	69fb      	ldr	r3, [r7, #28]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3720      	adds	r7, #32
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011546:	2337      	movs	r3, #55	; 0x37
 8011548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801154a:	2340      	movs	r3, #64	; 0x40
 801154c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801154e:	2300      	movs	r3, #0
 8011550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011558:	f107 0308 	add.w	r3, r7, #8
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7ff fe48 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011564:	f241 3288 	movw	r2, #5000	; 0x1388
 8011568:	2137      	movs	r1, #55	; 0x37
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 f914 	bl	8011798 <SDMMC_GetCmdResp1>
 8011570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011572:	69fb      	ldr	r3, [r7, #28]
}
 8011574:	4618      	mov	r0, r3
 8011576:	3720      	adds	r7, #32
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b088      	sub	sp, #32
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801158c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011592:	2329      	movs	r3, #41	; 0x29
 8011594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011596:	2340      	movs	r3, #64	; 0x40
 8011598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801159a:	2300      	movs	r3, #0
 801159c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115a4:	f107 0308 	add.w	r3, r7, #8
 80115a8:	4619      	mov	r1, r3
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7ff fe22 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 fa23 	bl	80119fc <SDMMC_GetCmdResp3>
 80115b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115b8:	69fb      	ldr	r3, [r7, #28]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3720      	adds	r7, #32
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}

080115c2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b088      	sub	sp, #32
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
 80115ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80115d0:	2306      	movs	r3, #6
 80115d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80115d4:	2340      	movs	r3, #64	; 0x40
 80115d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80115d8:	2300      	movs	r3, #0
 80115da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80115dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80115e2:	f107 0308 	add.w	r3, r7, #8
 80115e6:	4619      	mov	r1, r3
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f7ff fe03 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80115ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80115f2:	2106      	movs	r1, #6
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 f8cf 	bl	8011798 <SDMMC_GetCmdResp1>
 80115fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115fc:	69fb      	ldr	r3, [r7, #28]
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3720      	adds	r7, #32
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}

08011606 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8011606:	b580      	push	{r7, lr}
 8011608:	b088      	sub	sp, #32
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801160e:	2300      	movs	r3, #0
 8011610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011612:	2333      	movs	r3, #51	; 0x33
 8011614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011616:	2340      	movs	r3, #64	; 0x40
 8011618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801161a:	2300      	movs	r3, #0
 801161c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801161e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011624:	f107 0308 	add.w	r3, r7, #8
 8011628:	4619      	mov	r1, r3
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7ff fde2 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011630:	f241 3288 	movw	r2, #5000	; 0x1388
 8011634:	2133      	movs	r1, #51	; 0x33
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f000 f8ae 	bl	8011798 <SDMMC_GetCmdResp1>
 801163c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801163e:	69fb      	ldr	r3, [r7, #28]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3720      	adds	r7, #32
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b088      	sub	sp, #32
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011650:	2300      	movs	r3, #0
 8011652:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011654:	2302      	movs	r3, #2
 8011656:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011658:	23c0      	movs	r3, #192	; 0xc0
 801165a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801165c:	2300      	movs	r3, #0
 801165e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011664:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011666:	f107 0308 	add.w	r3, r7, #8
 801166a:	4619      	mov	r1, r3
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7ff fdc1 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f97c 	bl	8011970 <SDMMC_GetCmdResp2>
 8011678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801167a:	69fb      	ldr	r3, [r7, #28]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3720      	adds	r7, #32
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b088      	sub	sp, #32
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011692:	2309      	movs	r3, #9
 8011694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011696:	23c0      	movs	r3, #192	; 0xc0
 8011698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801169a:	2300      	movs	r3, #0
 801169c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80116a4:	f107 0308 	add.w	r3, r7, #8
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff fda2 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 f95d 	bl	8011970 <SDMMC_GetCmdResp2>
 80116b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116b8:	69fb      	ldr	r3, [r7, #28]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b088      	sub	sp, #32
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80116cc:	2300      	movs	r3, #0
 80116ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80116d0:	2303      	movs	r3, #3
 80116d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80116d4:	2340      	movs	r3, #64	; 0x40
 80116d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80116d8:	2300      	movs	r3, #0
 80116da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80116dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80116e2:	f107 0308 	add.w	r3, r7, #8
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f7ff fd83 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80116ee:	683a      	ldr	r2, [r7, #0]
 80116f0:	2103      	movs	r1, #3
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f9bc 	bl	8011a70 <SDMMC_GetCmdResp6>
 80116f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116fa:	69fb      	ldr	r3, [r7, #28]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3720      	adds	r7, #32
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b088      	sub	sp, #32
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011712:	230d      	movs	r3, #13
 8011714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011716:	2340      	movs	r3, #64	; 0x40
 8011718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801171a:	2300      	movs	r3, #0
 801171c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011724:	f107 0308 	add.w	r3, r7, #8
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7ff fd62 	bl	80111f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011730:	f241 3288 	movw	r2, #5000	; 0x1388
 8011734:	210d      	movs	r1, #13
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 f82e 	bl	8011798 <SDMMC_GetCmdResp1>
 801173c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801173e:	69fb      	ldr	r3, [r7, #28]
}
 8011740:	4618      	mov	r0, r3
 8011742:	3720      	adds	r7, #32
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}

08011748 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011748:	b490      	push	{r4, r7}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011750:	4b0f      	ldr	r3, [pc, #60]	; (8011790 <SDMMC_GetCmdError+0x48>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a0f      	ldr	r2, [pc, #60]	; (8011794 <SDMMC_GetCmdError+0x4c>)
 8011756:	fba2 2303 	umull	r2, r3, r2, r3
 801175a:	0a5b      	lsrs	r3, r3, #9
 801175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011760:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011764:	4623      	mov	r3, r4
 8011766:	1e5c      	subs	r4, r3, #1
 8011768:	2b00      	cmp	r3, #0
 801176a:	d102      	bne.n	8011772 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801176c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011770:	e009      	b.n	8011786 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0f2      	beq.n	8011764 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	22c5      	movs	r2, #197	; 0xc5
 8011782:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011784:	2300      	movs	r3, #0
}
 8011786:	4618      	mov	r0, r3
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bc90      	pop	{r4, r7}
 801178e:	4770      	bx	lr
 8011790:	20000000 	.word	0x20000000
 8011794:	10624dd3 	.word	0x10624dd3

08011798 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b087      	sub	sp, #28
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	460b      	mov	r3, r1
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80117a6:	4b6f      	ldr	r3, [pc, #444]	; (8011964 <SDMMC_GetCmdResp1+0x1cc>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4a6f      	ldr	r2, [pc, #444]	; (8011968 <SDMMC_GetCmdResp1+0x1d0>)
 80117ac:	fba2 2303 	umull	r2, r3, r2, r3
 80117b0:	0a5b      	lsrs	r3, r3, #9
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80117b8:	4623      	mov	r3, r4
 80117ba:	1e5c      	subs	r4, r3, #1
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d102      	bne.n	80117c6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117c4:	e0c9      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d0f0      	beq.n	80117b8 <SDMMC_GetCmdResp1+0x20>
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1eb      	bne.n	80117b8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117e4:	f003 0304 	and.w	r3, r3, #4
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d004      	beq.n	80117f6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2204      	movs	r2, #4
 80117f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117f2:	2304      	movs	r3, #4
 80117f4:	e0b1      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117fa:	f003 0301 	and.w	r3, r3, #1
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d004      	beq.n	801180c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2201      	movs	r2, #1
 8011806:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011808:	2301      	movs	r3, #1
 801180a:	e0a6      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	22c5      	movs	r2, #197	; 0xc5
 8011810:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f7ff fd18 	bl	8011248 <SDIO_GetCommandResponse>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
 801181c:	7afb      	ldrb	r3, [r7, #11]
 801181e:	4293      	cmp	r3, r2
 8011820:	d001      	beq.n	8011826 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011822:	2301      	movs	r3, #1
 8011824:	e099      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011826:	2100      	movs	r1, #0
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	f7ff fd1a 	bl	8011262 <SDIO_GetResponse>
 801182e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011830:	693a      	ldr	r2, [r7, #16]
 8011832:	4b4e      	ldr	r3, [pc, #312]	; (801196c <SDMMC_GetCmdResp1+0x1d4>)
 8011834:	4013      	ands	r3, r2
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801183a:	2300      	movs	r3, #0
 801183c:	e08d      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	2b00      	cmp	r3, #0
 8011842:	da02      	bge.n	801184a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011844:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011848:	e087      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011850:	2b00      	cmp	r3, #0
 8011852:	d001      	beq.n	8011858 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011854:	2340      	movs	r3, #64	; 0x40
 8011856:	e080      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011862:	2380      	movs	r3, #128	; 0x80
 8011864:	e079      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011874:	e071      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011884:	e069      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011894:	e061      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80118a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80118a4:	e059      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80118b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118b4:	e051      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80118c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80118c4:	e049      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80118d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80118d4:	e041      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80118e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118e4:	e039      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d002      	beq.n	80118f6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80118f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118f4:	e031      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d002      	beq.n	8011906 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011904:	e029      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801190c:	2b00      	cmp	r3, #0
 801190e:	d002      	beq.n	8011916 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011910:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011914:	e021      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801191c:	2b00      	cmp	r3, #0
 801191e:	d002      	beq.n	8011926 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011924:	e019      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801192c:	2b00      	cmp	r3, #0
 801192e:	d002      	beq.n	8011936 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011934:	e011      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801193c:	2b00      	cmp	r3, #0
 801193e:	d002      	beq.n	8011946 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011940:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011944:	e009      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	f003 0308 	and.w	r3, r3, #8
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011950:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011954:	e001      	b.n	801195a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801195a:	4618      	mov	r0, r3
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	bd90      	pop	{r4, r7, pc}
 8011962:	bf00      	nop
 8011964:	20000000 	.word	0x20000000
 8011968:	10624dd3 	.word	0x10624dd3
 801196c:	fdffe008 	.word	0xfdffe008

08011970 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011970:	b490      	push	{r4, r7}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011978:	4b1e      	ldr	r3, [pc, #120]	; (80119f4 <SDMMC_GetCmdResp2+0x84>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4a1e      	ldr	r2, [pc, #120]	; (80119f8 <SDMMC_GetCmdResp2+0x88>)
 801197e:	fba2 2303 	umull	r2, r3, r2, r3
 8011982:	0a5b      	lsrs	r3, r3, #9
 8011984:	f241 3288 	movw	r2, #5000	; 0x1388
 8011988:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801198c:	4623      	mov	r3, r4
 801198e:	1e5c      	subs	r4, r3, #1
 8011990:	2b00      	cmp	r3, #0
 8011992:	d102      	bne.n	801199a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011998:	e026      	b.n	80119e8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801199e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d0f0      	beq.n	801198c <SDMMC_GetCmdResp2+0x1c>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d1eb      	bne.n	801198c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119b8:	f003 0304 	and.w	r3, r3, #4
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d004      	beq.n	80119ca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2204      	movs	r2, #4
 80119c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119c6:	2304      	movs	r3, #4
 80119c8:	e00e      	b.n	80119e8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ce:	f003 0301 	and.w	r3, r3, #1
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d004      	beq.n	80119e0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2201      	movs	r2, #1
 80119da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119dc:	2301      	movs	r3, #1
 80119de:	e003      	b.n	80119e8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	22c5      	movs	r2, #197	; 0xc5
 80119e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119e6:	2300      	movs	r3, #0
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bc90      	pop	{r4, r7}
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	20000000 	.word	0x20000000
 80119f8:	10624dd3 	.word	0x10624dd3

080119fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80119fc:	b490      	push	{r4, r7}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a04:	4b18      	ldr	r3, [pc, #96]	; (8011a68 <SDMMC_GetCmdResp3+0x6c>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4a18      	ldr	r2, [pc, #96]	; (8011a6c <SDMMC_GetCmdResp3+0x70>)
 8011a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8011a0e:	0a5b      	lsrs	r3, r3, #9
 8011a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011a18:	4623      	mov	r3, r4
 8011a1a:	1e5c      	subs	r4, r3, #1
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d102      	bne.n	8011a26 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a24:	e01b      	b.n	8011a5e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a2a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0f0      	beq.n	8011a18 <SDMMC_GetCmdResp3+0x1c>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1eb      	bne.n	8011a18 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a44:	f003 0304 	and.w	r3, r3, #4
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d004      	beq.n	8011a56 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2204      	movs	r2, #4
 8011a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a52:	2304      	movs	r3, #4
 8011a54:	e003      	b.n	8011a5e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	22c5      	movs	r2, #197	; 0xc5
 8011a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bc90      	pop	{r4, r7}
 8011a66:	4770      	bx	lr
 8011a68:	20000000 	.word	0x20000000
 8011a6c:	10624dd3 	.word	0x10624dd3

08011a70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a70:	b590      	push	{r4, r7, lr}
 8011a72:	b087      	sub	sp, #28
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	460b      	mov	r3, r1
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a7e:	4b34      	ldr	r3, [pc, #208]	; (8011b50 <SDMMC_GetCmdResp6+0xe0>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a34      	ldr	r2, [pc, #208]	; (8011b54 <SDMMC_GetCmdResp6+0xe4>)
 8011a84:	fba2 2303 	umull	r2, r3, r2, r3
 8011a88:	0a5b      	lsrs	r3, r3, #9
 8011a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a8e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011a92:	4623      	mov	r3, r4
 8011a94:	1e5c      	subs	r4, r3, #1
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a9e:	e052      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d0f0      	beq.n	8011a92 <SDMMC_GetCmdResp6+0x22>
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1eb      	bne.n	8011a92 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011abe:	f003 0304 	and.w	r3, r3, #4
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d004      	beq.n	8011ad0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	2204      	movs	r2, #4
 8011aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011acc:	2304      	movs	r3, #4
 8011ace:	e03a      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad4:	f003 0301 	and.w	r3, r3, #1
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d004      	beq.n	8011ae6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e02f      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7ff fbae 	bl	8011248 <SDIO_GetCommandResponse>
 8011aec:	4603      	mov	r3, r0
 8011aee:	461a      	mov	r2, r3
 8011af0:	7afb      	ldrb	r3, [r7, #11]
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d001      	beq.n	8011afa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011af6:	2301      	movs	r3, #1
 8011af8:	e025      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	22c5      	movs	r2, #197	; 0xc5
 8011afe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011b00:	2100      	movs	r1, #0
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f7ff fbad 	bl	8011262 <SDIO_GetResponse>
 8011b08:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d106      	bne.n	8011b22 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	0c1b      	lsrs	r3, r3, #16
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e011      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d002      	beq.n	8011b32 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b30:	e009      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b40:	e001      	b.n	8011b46 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	371c      	adds	r7, #28
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd90      	pop	{r4, r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	20000000 	.word	0x20000000
 8011b54:	10624dd3 	.word	0x10624dd3

08011b58 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011b58:	b490      	push	{r4, r7}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b60:	4b21      	ldr	r3, [pc, #132]	; (8011be8 <SDMMC_GetCmdResp7+0x90>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a21      	ldr	r2, [pc, #132]	; (8011bec <SDMMC_GetCmdResp7+0x94>)
 8011b66:	fba2 2303 	umull	r2, r3, r2, r3
 8011b6a:	0a5b      	lsrs	r3, r3, #9
 8011b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011b74:	4623      	mov	r3, r4
 8011b76:	1e5c      	subs	r4, r3, #1
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b80:	e02c      	b.n	8011bdc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b86:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d0f0      	beq.n	8011b74 <SDMMC_GetCmdResp7+0x1c>
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1eb      	bne.n	8011b74 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ba0:	f003 0304 	and.w	r3, r3, #4
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d004      	beq.n	8011bb2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2204      	movs	r2, #4
 8011bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011bae:	2304      	movs	r3, #4
 8011bb0:	e014      	b.n	8011bdc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bb6:	f003 0301 	and.w	r3, r3, #1
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d004      	beq.n	8011bc8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e009      	b.n	8011bdc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2240      	movs	r2, #64	; 0x40
 8011bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011bda:	2300      	movs	r3, #0
  
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3710      	adds	r7, #16
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bc90      	pop	{r4, r7}
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop
 8011be8:	20000000 	.word	0x20000000
 8011bec:	10624dd3 	.word	0x10624dd3

08011bf0 <main>:




int main(void)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	af00      	add	r7, sp, #0
  hwInit();
 8011bf4:	f7f5 f9fa 	bl	8006fec <hwInit>
  apInit();
 8011bf8:	f7ef f9de 	bl	8000fb8 <apInit>

  apMain();
 8011bfc:	f7ef f9e5 	bl	8000fca <apMain>

  return 0;
 8011c00:	2300      	movs	r3, #0
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	bd80      	pop	{r7, pc}
	...

08011c08 <__errno>:
 8011c08:	4b01      	ldr	r3, [pc, #4]	; (8011c10 <__errno+0x8>)
 8011c0a:	6818      	ldr	r0, [r3, #0]
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop
 8011c10:	20000064 	.word	0x20000064

08011c14 <__libc_init_array>:
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	4e0d      	ldr	r6, [pc, #52]	; (8011c4c <__libc_init_array+0x38>)
 8011c18:	4c0d      	ldr	r4, [pc, #52]	; (8011c50 <__libc_init_array+0x3c>)
 8011c1a:	1ba4      	subs	r4, r4, r6
 8011c1c:	10a4      	asrs	r4, r4, #2
 8011c1e:	2500      	movs	r5, #0
 8011c20:	42a5      	cmp	r5, r4
 8011c22:	d109      	bne.n	8011c38 <__libc_init_array+0x24>
 8011c24:	4e0b      	ldr	r6, [pc, #44]	; (8011c54 <__libc_init_array+0x40>)
 8011c26:	4c0c      	ldr	r4, [pc, #48]	; (8011c58 <__libc_init_array+0x44>)
 8011c28:	f002 faec 	bl	8014204 <_init>
 8011c2c:	1ba4      	subs	r4, r4, r6
 8011c2e:	10a4      	asrs	r4, r4, #2
 8011c30:	2500      	movs	r5, #0
 8011c32:	42a5      	cmp	r5, r4
 8011c34:	d105      	bne.n	8011c42 <__libc_init_array+0x2e>
 8011c36:	bd70      	pop	{r4, r5, r6, pc}
 8011c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c3c:	4798      	blx	r3
 8011c3e:	3501      	adds	r5, #1
 8011c40:	e7ee      	b.n	8011c20 <__libc_init_array+0xc>
 8011c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c46:	4798      	blx	r3
 8011c48:	3501      	adds	r5, #1
 8011c4a:	e7f2      	b.n	8011c32 <__libc_init_array+0x1e>
 8011c4c:	08021060 	.word	0x08021060
 8011c50:	08021060 	.word	0x08021060
 8011c54:	08021060 	.word	0x08021060
 8011c58:	08021064 	.word	0x08021064

08011c5c <malloc>:
 8011c5c:	4b02      	ldr	r3, [pc, #8]	; (8011c68 <malloc+0xc>)
 8011c5e:	4601      	mov	r1, r0
 8011c60:	6818      	ldr	r0, [r3, #0]
 8011c62:	f000 b86d 	b.w	8011d40 <_malloc_r>
 8011c66:	bf00      	nop
 8011c68:	20000064 	.word	0x20000064

08011c6c <free>:
 8011c6c:	4b02      	ldr	r3, [pc, #8]	; (8011c78 <free+0xc>)
 8011c6e:	4601      	mov	r1, r0
 8011c70:	6818      	ldr	r0, [r3, #0]
 8011c72:	f000 b817 	b.w	8011ca4 <_free_r>
 8011c76:	bf00      	nop
 8011c78:	20000064 	.word	0x20000064

08011c7c <memcpy>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	1e43      	subs	r3, r0, #1
 8011c80:	440a      	add	r2, r1
 8011c82:	4291      	cmp	r1, r2
 8011c84:	d100      	bne.n	8011c88 <memcpy+0xc>
 8011c86:	bd10      	pop	{r4, pc}
 8011c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c90:	e7f7      	b.n	8011c82 <memcpy+0x6>

08011c92 <memset>:
 8011c92:	4402      	add	r2, r0
 8011c94:	4603      	mov	r3, r0
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d100      	bne.n	8011c9c <memset+0xa>
 8011c9a:	4770      	bx	lr
 8011c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8011ca0:	e7f9      	b.n	8011c96 <memset+0x4>
	...

08011ca4 <_free_r>:
 8011ca4:	b538      	push	{r3, r4, r5, lr}
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	2900      	cmp	r1, #0
 8011caa:	d045      	beq.n	8011d38 <_free_r+0x94>
 8011cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cb0:	1f0c      	subs	r4, r1, #4
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	bfb8      	it	lt
 8011cb6:	18e4      	addlt	r4, r4, r3
 8011cb8:	f001 fb4f 	bl	801335a <__malloc_lock>
 8011cbc:	4a1f      	ldr	r2, [pc, #124]	; (8011d3c <_free_r+0x98>)
 8011cbe:	6813      	ldr	r3, [r2, #0]
 8011cc0:	4610      	mov	r0, r2
 8011cc2:	b933      	cbnz	r3, 8011cd2 <_free_r+0x2e>
 8011cc4:	6063      	str	r3, [r4, #4]
 8011cc6:	6014      	str	r4, [r2, #0]
 8011cc8:	4628      	mov	r0, r5
 8011cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cce:	f001 bb45 	b.w	801335c <__malloc_unlock>
 8011cd2:	42a3      	cmp	r3, r4
 8011cd4:	d90c      	bls.n	8011cf0 <_free_r+0x4c>
 8011cd6:	6821      	ldr	r1, [r4, #0]
 8011cd8:	1862      	adds	r2, r4, r1
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	bf04      	itt	eq
 8011cde:	681a      	ldreq	r2, [r3, #0]
 8011ce0:	685b      	ldreq	r3, [r3, #4]
 8011ce2:	6063      	str	r3, [r4, #4]
 8011ce4:	bf04      	itt	eq
 8011ce6:	1852      	addeq	r2, r2, r1
 8011ce8:	6022      	streq	r2, [r4, #0]
 8011cea:	6004      	str	r4, [r0, #0]
 8011cec:	e7ec      	b.n	8011cc8 <_free_r+0x24>
 8011cee:	4613      	mov	r3, r2
 8011cf0:	685a      	ldr	r2, [r3, #4]
 8011cf2:	b10a      	cbz	r2, 8011cf8 <_free_r+0x54>
 8011cf4:	42a2      	cmp	r2, r4
 8011cf6:	d9fa      	bls.n	8011cee <_free_r+0x4a>
 8011cf8:	6819      	ldr	r1, [r3, #0]
 8011cfa:	1858      	adds	r0, r3, r1
 8011cfc:	42a0      	cmp	r0, r4
 8011cfe:	d10b      	bne.n	8011d18 <_free_r+0x74>
 8011d00:	6820      	ldr	r0, [r4, #0]
 8011d02:	4401      	add	r1, r0
 8011d04:	1858      	adds	r0, r3, r1
 8011d06:	4282      	cmp	r2, r0
 8011d08:	6019      	str	r1, [r3, #0]
 8011d0a:	d1dd      	bne.n	8011cc8 <_free_r+0x24>
 8011d0c:	6810      	ldr	r0, [r2, #0]
 8011d0e:	6852      	ldr	r2, [r2, #4]
 8011d10:	605a      	str	r2, [r3, #4]
 8011d12:	4401      	add	r1, r0
 8011d14:	6019      	str	r1, [r3, #0]
 8011d16:	e7d7      	b.n	8011cc8 <_free_r+0x24>
 8011d18:	d902      	bls.n	8011d20 <_free_r+0x7c>
 8011d1a:	230c      	movs	r3, #12
 8011d1c:	602b      	str	r3, [r5, #0]
 8011d1e:	e7d3      	b.n	8011cc8 <_free_r+0x24>
 8011d20:	6820      	ldr	r0, [r4, #0]
 8011d22:	1821      	adds	r1, r4, r0
 8011d24:	428a      	cmp	r2, r1
 8011d26:	bf04      	itt	eq
 8011d28:	6811      	ldreq	r1, [r2, #0]
 8011d2a:	6852      	ldreq	r2, [r2, #4]
 8011d2c:	6062      	str	r2, [r4, #4]
 8011d2e:	bf04      	itt	eq
 8011d30:	1809      	addeq	r1, r1, r0
 8011d32:	6021      	streq	r1, [r4, #0]
 8011d34:	605c      	str	r4, [r3, #4]
 8011d36:	e7c7      	b.n	8011cc8 <_free_r+0x24>
 8011d38:	bd38      	pop	{r3, r4, r5, pc}
 8011d3a:	bf00      	nop
 8011d3c:	2000a498 	.word	0x2000a498

08011d40 <_malloc_r>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	1ccd      	adds	r5, r1, #3
 8011d44:	f025 0503 	bic.w	r5, r5, #3
 8011d48:	3508      	adds	r5, #8
 8011d4a:	2d0c      	cmp	r5, #12
 8011d4c:	bf38      	it	cc
 8011d4e:	250c      	movcc	r5, #12
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	4606      	mov	r6, r0
 8011d54:	db01      	blt.n	8011d5a <_malloc_r+0x1a>
 8011d56:	42a9      	cmp	r1, r5
 8011d58:	d903      	bls.n	8011d62 <_malloc_r+0x22>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	6033      	str	r3, [r6, #0]
 8011d5e:	2000      	movs	r0, #0
 8011d60:	bd70      	pop	{r4, r5, r6, pc}
 8011d62:	f001 fafa 	bl	801335a <__malloc_lock>
 8011d66:	4a21      	ldr	r2, [pc, #132]	; (8011dec <_malloc_r+0xac>)
 8011d68:	6814      	ldr	r4, [r2, #0]
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	b991      	cbnz	r1, 8011d94 <_malloc_r+0x54>
 8011d6e:	4c20      	ldr	r4, [pc, #128]	; (8011df0 <_malloc_r+0xb0>)
 8011d70:	6823      	ldr	r3, [r4, #0]
 8011d72:	b91b      	cbnz	r3, 8011d7c <_malloc_r+0x3c>
 8011d74:	4630      	mov	r0, r6
 8011d76:	f000 f83d 	bl	8011df4 <_sbrk_r>
 8011d7a:	6020      	str	r0, [r4, #0]
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f000 f838 	bl	8011df4 <_sbrk_r>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d124      	bne.n	8011dd2 <_malloc_r+0x92>
 8011d88:	230c      	movs	r3, #12
 8011d8a:	6033      	str	r3, [r6, #0]
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f001 fae5 	bl	801335c <__malloc_unlock>
 8011d92:	e7e4      	b.n	8011d5e <_malloc_r+0x1e>
 8011d94:	680b      	ldr	r3, [r1, #0]
 8011d96:	1b5b      	subs	r3, r3, r5
 8011d98:	d418      	bmi.n	8011dcc <_malloc_r+0x8c>
 8011d9a:	2b0b      	cmp	r3, #11
 8011d9c:	d90f      	bls.n	8011dbe <_malloc_r+0x7e>
 8011d9e:	600b      	str	r3, [r1, #0]
 8011da0:	50cd      	str	r5, [r1, r3]
 8011da2:	18cc      	adds	r4, r1, r3
 8011da4:	4630      	mov	r0, r6
 8011da6:	f001 fad9 	bl	801335c <__malloc_unlock>
 8011daa:	f104 000b 	add.w	r0, r4, #11
 8011dae:	1d23      	adds	r3, r4, #4
 8011db0:	f020 0007 	bic.w	r0, r0, #7
 8011db4:	1ac3      	subs	r3, r0, r3
 8011db6:	d0d3      	beq.n	8011d60 <_malloc_r+0x20>
 8011db8:	425a      	negs	r2, r3
 8011dba:	50e2      	str	r2, [r4, r3]
 8011dbc:	e7d0      	b.n	8011d60 <_malloc_r+0x20>
 8011dbe:	428c      	cmp	r4, r1
 8011dc0:	684b      	ldr	r3, [r1, #4]
 8011dc2:	bf16      	itet	ne
 8011dc4:	6063      	strne	r3, [r4, #4]
 8011dc6:	6013      	streq	r3, [r2, #0]
 8011dc8:	460c      	movne	r4, r1
 8011dca:	e7eb      	b.n	8011da4 <_malloc_r+0x64>
 8011dcc:	460c      	mov	r4, r1
 8011dce:	6849      	ldr	r1, [r1, #4]
 8011dd0:	e7cc      	b.n	8011d6c <_malloc_r+0x2c>
 8011dd2:	1cc4      	adds	r4, r0, #3
 8011dd4:	f024 0403 	bic.w	r4, r4, #3
 8011dd8:	42a0      	cmp	r0, r4
 8011dda:	d005      	beq.n	8011de8 <_malloc_r+0xa8>
 8011ddc:	1a21      	subs	r1, r4, r0
 8011dde:	4630      	mov	r0, r6
 8011de0:	f000 f808 	bl	8011df4 <_sbrk_r>
 8011de4:	3001      	adds	r0, #1
 8011de6:	d0cf      	beq.n	8011d88 <_malloc_r+0x48>
 8011de8:	6025      	str	r5, [r4, #0]
 8011dea:	e7db      	b.n	8011da4 <_malloc_r+0x64>
 8011dec:	2000a498 	.word	0x2000a498
 8011df0:	2000a49c 	.word	0x2000a49c

08011df4 <_sbrk_r>:
 8011df4:	b538      	push	{r3, r4, r5, lr}
 8011df6:	4c06      	ldr	r4, [pc, #24]	; (8011e10 <_sbrk_r+0x1c>)
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	4608      	mov	r0, r1
 8011dfe:	6023      	str	r3, [r4, #0]
 8011e00:	f7ef fb36 	bl	8001470 <_sbrk>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_sbrk_r+0x1a>
 8011e08:	6823      	ldr	r3, [r4, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_sbrk_r+0x1a>
 8011e0c:	602b      	str	r3, [r5, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	2000af68 	.word	0x2000af68

08011e14 <strcpy>:
 8011e14:	4603      	mov	r3, r0
 8011e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e1a:	f803 2b01 	strb.w	r2, [r3], #1
 8011e1e:	2a00      	cmp	r2, #0
 8011e20:	d1f9      	bne.n	8011e16 <strcpy+0x2>
 8011e22:	4770      	bx	lr

08011e24 <sulp>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	4604      	mov	r4, r0
 8011e28:	460d      	mov	r5, r1
 8011e2a:	ec45 4b10 	vmov	d0, r4, r5
 8011e2e:	4616      	mov	r6, r2
 8011e30:	f001 fd60 	bl	80138f4 <__ulp>
 8011e34:	ec51 0b10 	vmov	r0, r1, d0
 8011e38:	b17e      	cbz	r6, 8011e5a <sulp+0x36>
 8011e3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011e3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	dd09      	ble.n	8011e5a <sulp+0x36>
 8011e46:	051b      	lsls	r3, r3, #20
 8011e48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011e4c:	2400      	movs	r4, #0
 8011e4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011e52:	4622      	mov	r2, r4
 8011e54:	462b      	mov	r3, r5
 8011e56:	f7ee fbe7 	bl	8000628 <__aeabi_dmul>
 8011e5a:	bd70      	pop	{r4, r5, r6, pc}
 8011e5c:	0000      	movs	r0, r0
	...

08011e60 <_strtod_l>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	461f      	mov	r7, r3
 8011e66:	b0a1      	sub	sp, #132	; 0x84
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4681      	mov	r9, r0
 8011e6c:	4638      	mov	r0, r7
 8011e6e:	460e      	mov	r6, r1
 8011e70:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e72:	931c      	str	r3, [sp, #112]	; 0x70
 8011e74:	f001 fa5d 	bl	8013332 <__localeconv_l>
 8011e78:	4680      	mov	r8, r0
 8011e7a:	6800      	ldr	r0, [r0, #0]
 8011e7c:	f7ee f9ba 	bl	80001f4 <strlen>
 8011e80:	f04f 0a00 	mov.w	sl, #0
 8011e84:	4604      	mov	r4, r0
 8011e86:	f04f 0b00 	mov.w	fp, #0
 8011e8a:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e8e:	781a      	ldrb	r2, [r3, #0]
 8011e90:	2a0d      	cmp	r2, #13
 8011e92:	d832      	bhi.n	8011efa <_strtod_l+0x9a>
 8011e94:	2a09      	cmp	r2, #9
 8011e96:	d236      	bcs.n	8011f06 <_strtod_l+0xa6>
 8011e98:	2a00      	cmp	r2, #0
 8011e9a:	d03e      	beq.n	8011f1a <_strtod_l+0xba>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8011ea0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011ea2:	782b      	ldrb	r3, [r5, #0]
 8011ea4:	2b30      	cmp	r3, #48	; 0x30
 8011ea6:	f040 80ac 	bne.w	8012002 <_strtod_l+0x1a2>
 8011eaa:	786b      	ldrb	r3, [r5, #1]
 8011eac:	2b58      	cmp	r3, #88	; 0x58
 8011eae:	d001      	beq.n	8011eb4 <_strtod_l+0x54>
 8011eb0:	2b78      	cmp	r3, #120	; 0x78
 8011eb2:	d167      	bne.n	8011f84 <_strtod_l+0x124>
 8011eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011eb6:	9301      	str	r3, [sp, #4]
 8011eb8:	ab1c      	add	r3, sp, #112	; 0x70
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	9702      	str	r7, [sp, #8]
 8011ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8011ec0:	4a88      	ldr	r2, [pc, #544]	; (80120e4 <_strtod_l+0x284>)
 8011ec2:	a91b      	add	r1, sp, #108	; 0x6c
 8011ec4:	4648      	mov	r0, r9
 8011ec6:	f000 ff5a 	bl	8012d7e <__gethex>
 8011eca:	f010 0407 	ands.w	r4, r0, #7
 8011ece:	4606      	mov	r6, r0
 8011ed0:	d005      	beq.n	8011ede <_strtod_l+0x7e>
 8011ed2:	2c06      	cmp	r4, #6
 8011ed4:	d12b      	bne.n	8011f2e <_strtod_l+0xce>
 8011ed6:	3501      	adds	r5, #1
 8011ed8:	2300      	movs	r3, #0
 8011eda:	951b      	str	r5, [sp, #108]	; 0x6c
 8011edc:	930d      	str	r3, [sp, #52]	; 0x34
 8011ede:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f040 859a 	bne.w	8012a1a <_strtod_l+0xbba>
 8011ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ee8:	b1e3      	cbz	r3, 8011f24 <_strtod_l+0xc4>
 8011eea:	4652      	mov	r2, sl
 8011eec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011ef0:	ec43 2b10 	vmov	d0, r2, r3
 8011ef4:	b021      	add	sp, #132	; 0x84
 8011ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011efa:	2a2b      	cmp	r2, #43	; 0x2b
 8011efc:	d015      	beq.n	8011f2a <_strtod_l+0xca>
 8011efe:	2a2d      	cmp	r2, #45	; 0x2d
 8011f00:	d004      	beq.n	8011f0c <_strtod_l+0xac>
 8011f02:	2a20      	cmp	r2, #32
 8011f04:	d1ca      	bne.n	8011e9c <_strtod_l+0x3c>
 8011f06:	3301      	adds	r3, #1
 8011f08:	931b      	str	r3, [sp, #108]	; 0x6c
 8011f0a:	e7bf      	b.n	8011e8c <_strtod_l+0x2c>
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	920d      	str	r2, [sp, #52]	; 0x34
 8011f10:	1c5a      	adds	r2, r3, #1
 8011f12:	921b      	str	r2, [sp, #108]	; 0x6c
 8011f14:	785b      	ldrb	r3, [r3, #1]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d1c2      	bne.n	8011ea0 <_strtod_l+0x40>
 8011f1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f1c:	961b      	str	r6, [sp, #108]	; 0x6c
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f040 8579 	bne.w	8012a16 <_strtod_l+0xbb6>
 8011f24:	4652      	mov	r2, sl
 8011f26:	465b      	mov	r3, fp
 8011f28:	e7e2      	b.n	8011ef0 <_strtod_l+0x90>
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	e7ef      	b.n	8011f0e <_strtod_l+0xae>
 8011f2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011f30:	b13a      	cbz	r2, 8011f42 <_strtod_l+0xe2>
 8011f32:	2135      	movs	r1, #53	; 0x35
 8011f34:	a81e      	add	r0, sp, #120	; 0x78
 8011f36:	f001 fdd5 	bl	8013ae4 <__copybits>
 8011f3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f3c:	4648      	mov	r0, r9
 8011f3e:	f001 fa42 	bl	80133c6 <_Bfree>
 8011f42:	3c01      	subs	r4, #1
 8011f44:	2c04      	cmp	r4, #4
 8011f46:	d806      	bhi.n	8011f56 <_strtod_l+0xf6>
 8011f48:	e8df f004 	tbb	[pc, r4]
 8011f4c:	1714030a 	.word	0x1714030a
 8011f50:	0a          	.byte	0x0a
 8011f51:	00          	.byte	0x00
 8011f52:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011f56:	0730      	lsls	r0, r6, #28
 8011f58:	d5c1      	bpl.n	8011ede <_strtod_l+0x7e>
 8011f5a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011f5e:	e7be      	b.n	8011ede <_strtod_l+0x7e>
 8011f60:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011f64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011f66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011f6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011f6e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011f72:	e7f0      	b.n	8011f56 <_strtod_l+0xf6>
 8011f74:	f8df b170 	ldr.w	fp, [pc, #368]	; 80120e8 <_strtod_l+0x288>
 8011f78:	e7ed      	b.n	8011f56 <_strtod_l+0xf6>
 8011f7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011f7e:	f04f 3aff 	mov.w	sl, #4294967295
 8011f82:	e7e8      	b.n	8011f56 <_strtod_l+0xf6>
 8011f84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f86:	1c5a      	adds	r2, r3, #1
 8011f88:	921b      	str	r2, [sp, #108]	; 0x6c
 8011f8a:	785b      	ldrb	r3, [r3, #1]
 8011f8c:	2b30      	cmp	r3, #48	; 0x30
 8011f8e:	d0f9      	beq.n	8011f84 <_strtod_l+0x124>
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d0a4      	beq.n	8011ede <_strtod_l+0x7e>
 8011f94:	2301      	movs	r3, #1
 8011f96:	2500      	movs	r5, #0
 8011f98:	9306      	str	r3, [sp, #24]
 8011f9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f9c:	9308      	str	r3, [sp, #32]
 8011f9e:	9507      	str	r5, [sp, #28]
 8011fa0:	9505      	str	r5, [sp, #20]
 8011fa2:	220a      	movs	r2, #10
 8011fa4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011fa6:	7807      	ldrb	r7, [r0, #0]
 8011fa8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011fac:	b2d9      	uxtb	r1, r3
 8011fae:	2909      	cmp	r1, #9
 8011fb0:	d929      	bls.n	8012006 <_strtod_l+0x1a6>
 8011fb2:	4622      	mov	r2, r4
 8011fb4:	f8d8 1000 	ldr.w	r1, [r8]
 8011fb8:	f002 f8be 	bl	8014138 <strncmp>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	d031      	beq.n	8012024 <_strtod_l+0x1c4>
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	9c05      	ldr	r4, [sp, #20]
 8011fc4:	9004      	str	r0, [sp, #16]
 8011fc6:	463b      	mov	r3, r7
 8011fc8:	4602      	mov	r2, r0
 8011fca:	2b65      	cmp	r3, #101	; 0x65
 8011fcc:	d001      	beq.n	8011fd2 <_strtod_l+0x172>
 8011fce:	2b45      	cmp	r3, #69	; 0x45
 8011fd0:	d114      	bne.n	8011ffc <_strtod_l+0x19c>
 8011fd2:	b924      	cbnz	r4, 8011fde <_strtod_l+0x17e>
 8011fd4:	b910      	cbnz	r0, 8011fdc <_strtod_l+0x17c>
 8011fd6:	9b06      	ldr	r3, [sp, #24]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d09e      	beq.n	8011f1a <_strtod_l+0xba>
 8011fdc:	2400      	movs	r4, #0
 8011fde:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011fe0:	1c73      	adds	r3, r6, #1
 8011fe2:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fe4:	7873      	ldrb	r3, [r6, #1]
 8011fe6:	2b2b      	cmp	r3, #43	; 0x2b
 8011fe8:	d078      	beq.n	80120dc <_strtod_l+0x27c>
 8011fea:	2b2d      	cmp	r3, #45	; 0x2d
 8011fec:	d070      	beq.n	80120d0 <_strtod_l+0x270>
 8011fee:	f04f 0c00 	mov.w	ip, #0
 8011ff2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011ff6:	2f09      	cmp	r7, #9
 8011ff8:	d97c      	bls.n	80120f4 <_strtod_l+0x294>
 8011ffa:	961b      	str	r6, [sp, #108]	; 0x6c
 8011ffc:	f04f 0e00 	mov.w	lr, #0
 8012000:	e09a      	b.n	8012138 <_strtod_l+0x2d8>
 8012002:	2300      	movs	r3, #0
 8012004:	e7c7      	b.n	8011f96 <_strtod_l+0x136>
 8012006:	9905      	ldr	r1, [sp, #20]
 8012008:	2908      	cmp	r1, #8
 801200a:	bfdd      	ittte	le
 801200c:	9907      	ldrle	r1, [sp, #28]
 801200e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012012:	9307      	strle	r3, [sp, #28]
 8012014:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012018:	9b05      	ldr	r3, [sp, #20]
 801201a:	3001      	adds	r0, #1
 801201c:	3301      	adds	r3, #1
 801201e:	9305      	str	r3, [sp, #20]
 8012020:	901b      	str	r0, [sp, #108]	; 0x6c
 8012022:	e7bf      	b.n	8011fa4 <_strtod_l+0x144>
 8012024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012026:	191a      	adds	r2, r3, r4
 8012028:	921b      	str	r2, [sp, #108]	; 0x6c
 801202a:	9a05      	ldr	r2, [sp, #20]
 801202c:	5d1b      	ldrb	r3, [r3, r4]
 801202e:	2a00      	cmp	r2, #0
 8012030:	d037      	beq.n	80120a2 <_strtod_l+0x242>
 8012032:	9c05      	ldr	r4, [sp, #20]
 8012034:	4602      	mov	r2, r0
 8012036:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801203a:	2909      	cmp	r1, #9
 801203c:	d913      	bls.n	8012066 <_strtod_l+0x206>
 801203e:	2101      	movs	r1, #1
 8012040:	9104      	str	r1, [sp, #16]
 8012042:	e7c2      	b.n	8011fca <_strtod_l+0x16a>
 8012044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012046:	1c5a      	adds	r2, r3, #1
 8012048:	921b      	str	r2, [sp, #108]	; 0x6c
 801204a:	785b      	ldrb	r3, [r3, #1]
 801204c:	3001      	adds	r0, #1
 801204e:	2b30      	cmp	r3, #48	; 0x30
 8012050:	d0f8      	beq.n	8012044 <_strtod_l+0x1e4>
 8012052:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012056:	2a08      	cmp	r2, #8
 8012058:	f200 84e4 	bhi.w	8012a24 <_strtod_l+0xbc4>
 801205c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801205e:	9208      	str	r2, [sp, #32]
 8012060:	4602      	mov	r2, r0
 8012062:	2000      	movs	r0, #0
 8012064:	4604      	mov	r4, r0
 8012066:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801206a:	f100 0101 	add.w	r1, r0, #1
 801206e:	d012      	beq.n	8012096 <_strtod_l+0x236>
 8012070:	440a      	add	r2, r1
 8012072:	eb00 0c04 	add.w	ip, r0, r4
 8012076:	4621      	mov	r1, r4
 8012078:	270a      	movs	r7, #10
 801207a:	458c      	cmp	ip, r1
 801207c:	d113      	bne.n	80120a6 <_strtod_l+0x246>
 801207e:	1821      	adds	r1, r4, r0
 8012080:	2908      	cmp	r1, #8
 8012082:	f104 0401 	add.w	r4, r4, #1
 8012086:	4404      	add	r4, r0
 8012088:	dc19      	bgt.n	80120be <_strtod_l+0x25e>
 801208a:	9b07      	ldr	r3, [sp, #28]
 801208c:	210a      	movs	r1, #10
 801208e:	fb01 e303 	mla	r3, r1, r3, lr
 8012092:	9307      	str	r3, [sp, #28]
 8012094:	2100      	movs	r1, #0
 8012096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012098:	1c58      	adds	r0, r3, #1
 801209a:	901b      	str	r0, [sp, #108]	; 0x6c
 801209c:	785b      	ldrb	r3, [r3, #1]
 801209e:	4608      	mov	r0, r1
 80120a0:	e7c9      	b.n	8012036 <_strtod_l+0x1d6>
 80120a2:	9805      	ldr	r0, [sp, #20]
 80120a4:	e7d3      	b.n	801204e <_strtod_l+0x1ee>
 80120a6:	2908      	cmp	r1, #8
 80120a8:	f101 0101 	add.w	r1, r1, #1
 80120ac:	dc03      	bgt.n	80120b6 <_strtod_l+0x256>
 80120ae:	9b07      	ldr	r3, [sp, #28]
 80120b0:	437b      	muls	r3, r7
 80120b2:	9307      	str	r3, [sp, #28]
 80120b4:	e7e1      	b.n	801207a <_strtod_l+0x21a>
 80120b6:	2910      	cmp	r1, #16
 80120b8:	bfd8      	it	le
 80120ba:	437d      	mulle	r5, r7
 80120bc:	e7dd      	b.n	801207a <_strtod_l+0x21a>
 80120be:	2c10      	cmp	r4, #16
 80120c0:	bfdc      	itt	le
 80120c2:	210a      	movle	r1, #10
 80120c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80120c8:	e7e4      	b.n	8012094 <_strtod_l+0x234>
 80120ca:	2301      	movs	r3, #1
 80120cc:	9304      	str	r3, [sp, #16]
 80120ce:	e781      	b.n	8011fd4 <_strtod_l+0x174>
 80120d0:	f04f 0c01 	mov.w	ip, #1
 80120d4:	1cb3      	adds	r3, r6, #2
 80120d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80120d8:	78b3      	ldrb	r3, [r6, #2]
 80120da:	e78a      	b.n	8011ff2 <_strtod_l+0x192>
 80120dc:	f04f 0c00 	mov.w	ip, #0
 80120e0:	e7f8      	b.n	80120d4 <_strtod_l+0x274>
 80120e2:	bf00      	nop
 80120e4:	08020d68 	.word	0x08020d68
 80120e8:	7ff00000 	.word	0x7ff00000
 80120ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120ee:	1c5f      	adds	r7, r3, #1
 80120f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80120f2:	785b      	ldrb	r3, [r3, #1]
 80120f4:	2b30      	cmp	r3, #48	; 0x30
 80120f6:	d0f9      	beq.n	80120ec <_strtod_l+0x28c>
 80120f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80120fc:	2f08      	cmp	r7, #8
 80120fe:	f63f af7d 	bhi.w	8011ffc <_strtod_l+0x19c>
 8012102:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012106:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012108:	930a      	str	r3, [sp, #40]	; 0x28
 801210a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801210c:	1c5f      	adds	r7, r3, #1
 801210e:	971b      	str	r7, [sp, #108]	; 0x6c
 8012110:	785b      	ldrb	r3, [r3, #1]
 8012112:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012116:	f1b8 0f09 	cmp.w	r8, #9
 801211a:	d937      	bls.n	801218c <_strtod_l+0x32c>
 801211c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801211e:	1a7f      	subs	r7, r7, r1
 8012120:	2f08      	cmp	r7, #8
 8012122:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012126:	dc37      	bgt.n	8012198 <_strtod_l+0x338>
 8012128:	45be      	cmp	lr, r7
 801212a:	bfa8      	it	ge
 801212c:	46be      	movge	lr, r7
 801212e:	f1bc 0f00 	cmp.w	ip, #0
 8012132:	d001      	beq.n	8012138 <_strtod_l+0x2d8>
 8012134:	f1ce 0e00 	rsb	lr, lr, #0
 8012138:	2c00      	cmp	r4, #0
 801213a:	d151      	bne.n	80121e0 <_strtod_l+0x380>
 801213c:	2800      	cmp	r0, #0
 801213e:	f47f aece 	bne.w	8011ede <_strtod_l+0x7e>
 8012142:	9a06      	ldr	r2, [sp, #24]
 8012144:	2a00      	cmp	r2, #0
 8012146:	f47f aeca 	bne.w	8011ede <_strtod_l+0x7e>
 801214a:	9a04      	ldr	r2, [sp, #16]
 801214c:	2a00      	cmp	r2, #0
 801214e:	f47f aee4 	bne.w	8011f1a <_strtod_l+0xba>
 8012152:	2b4e      	cmp	r3, #78	; 0x4e
 8012154:	d027      	beq.n	80121a6 <_strtod_l+0x346>
 8012156:	dc21      	bgt.n	801219c <_strtod_l+0x33c>
 8012158:	2b49      	cmp	r3, #73	; 0x49
 801215a:	f47f aede 	bne.w	8011f1a <_strtod_l+0xba>
 801215e:	49a0      	ldr	r1, [pc, #640]	; (80123e0 <_strtod_l+0x580>)
 8012160:	a81b      	add	r0, sp, #108	; 0x6c
 8012162:	f001 f83f 	bl	80131e4 <__match>
 8012166:	2800      	cmp	r0, #0
 8012168:	f43f aed7 	beq.w	8011f1a <_strtod_l+0xba>
 801216c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801216e:	499d      	ldr	r1, [pc, #628]	; (80123e4 <_strtod_l+0x584>)
 8012170:	3b01      	subs	r3, #1
 8012172:	a81b      	add	r0, sp, #108	; 0x6c
 8012174:	931b      	str	r3, [sp, #108]	; 0x6c
 8012176:	f001 f835 	bl	80131e4 <__match>
 801217a:	b910      	cbnz	r0, 8012182 <_strtod_l+0x322>
 801217c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801217e:	3301      	adds	r3, #1
 8012180:	931b      	str	r3, [sp, #108]	; 0x6c
 8012182:	f8df b274 	ldr.w	fp, [pc, #628]	; 80123f8 <_strtod_l+0x598>
 8012186:	f04f 0a00 	mov.w	sl, #0
 801218a:	e6a8      	b.n	8011ede <_strtod_l+0x7e>
 801218c:	210a      	movs	r1, #10
 801218e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012192:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012196:	e7b8      	b.n	801210a <_strtod_l+0x2aa>
 8012198:	46be      	mov	lr, r7
 801219a:	e7c8      	b.n	801212e <_strtod_l+0x2ce>
 801219c:	2b69      	cmp	r3, #105	; 0x69
 801219e:	d0de      	beq.n	801215e <_strtod_l+0x2fe>
 80121a0:	2b6e      	cmp	r3, #110	; 0x6e
 80121a2:	f47f aeba 	bne.w	8011f1a <_strtod_l+0xba>
 80121a6:	4990      	ldr	r1, [pc, #576]	; (80123e8 <_strtod_l+0x588>)
 80121a8:	a81b      	add	r0, sp, #108	; 0x6c
 80121aa:	f001 f81b 	bl	80131e4 <__match>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	f43f aeb3 	beq.w	8011f1a <_strtod_l+0xba>
 80121b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b28      	cmp	r3, #40	; 0x28
 80121ba:	d10e      	bne.n	80121da <_strtod_l+0x37a>
 80121bc:	aa1e      	add	r2, sp, #120	; 0x78
 80121be:	498b      	ldr	r1, [pc, #556]	; (80123ec <_strtod_l+0x58c>)
 80121c0:	a81b      	add	r0, sp, #108	; 0x6c
 80121c2:	f001 f823 	bl	801320c <__hexnan>
 80121c6:	2805      	cmp	r0, #5
 80121c8:	d107      	bne.n	80121da <_strtod_l+0x37a>
 80121ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80121cc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80121d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80121d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80121d8:	e681      	b.n	8011ede <_strtod_l+0x7e>
 80121da:	f8df b224 	ldr.w	fp, [pc, #548]	; 8012400 <_strtod_l+0x5a0>
 80121de:	e7d2      	b.n	8012186 <_strtod_l+0x326>
 80121e0:	ebae 0302 	sub.w	r3, lr, r2
 80121e4:	9306      	str	r3, [sp, #24]
 80121e6:	9b05      	ldr	r3, [sp, #20]
 80121e8:	9807      	ldr	r0, [sp, #28]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	bf08      	it	eq
 80121ee:	4623      	moveq	r3, r4
 80121f0:	2c10      	cmp	r4, #16
 80121f2:	9305      	str	r3, [sp, #20]
 80121f4:	46a0      	mov	r8, r4
 80121f6:	bfa8      	it	ge
 80121f8:	f04f 0810 	movge.w	r8, #16
 80121fc:	f7ee f99a 	bl	8000534 <__aeabi_ui2d>
 8012200:	2c09      	cmp	r4, #9
 8012202:	4682      	mov	sl, r0
 8012204:	468b      	mov	fp, r1
 8012206:	dc13      	bgt.n	8012230 <_strtod_l+0x3d0>
 8012208:	9b06      	ldr	r3, [sp, #24]
 801220a:	2b00      	cmp	r3, #0
 801220c:	f43f ae67 	beq.w	8011ede <_strtod_l+0x7e>
 8012210:	9b06      	ldr	r3, [sp, #24]
 8012212:	dd7a      	ble.n	801230a <_strtod_l+0x4aa>
 8012214:	2b16      	cmp	r3, #22
 8012216:	dc61      	bgt.n	80122dc <_strtod_l+0x47c>
 8012218:	4a75      	ldr	r2, [pc, #468]	; (80123f0 <_strtod_l+0x590>)
 801221a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801221e:	e9de 0100 	ldrd	r0, r1, [lr]
 8012222:	4652      	mov	r2, sl
 8012224:	465b      	mov	r3, fp
 8012226:	f7ee f9ff 	bl	8000628 <__aeabi_dmul>
 801222a:	4682      	mov	sl, r0
 801222c:	468b      	mov	fp, r1
 801222e:	e656      	b.n	8011ede <_strtod_l+0x7e>
 8012230:	4b6f      	ldr	r3, [pc, #444]	; (80123f0 <_strtod_l+0x590>)
 8012232:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012236:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801223a:	f7ee f9f5 	bl	8000628 <__aeabi_dmul>
 801223e:	4606      	mov	r6, r0
 8012240:	4628      	mov	r0, r5
 8012242:	460f      	mov	r7, r1
 8012244:	f7ee f976 	bl	8000534 <__aeabi_ui2d>
 8012248:	4602      	mov	r2, r0
 801224a:	460b      	mov	r3, r1
 801224c:	4630      	mov	r0, r6
 801224e:	4639      	mov	r1, r7
 8012250:	f7ee f834 	bl	80002bc <__adddf3>
 8012254:	2c0f      	cmp	r4, #15
 8012256:	4682      	mov	sl, r0
 8012258:	468b      	mov	fp, r1
 801225a:	ddd5      	ble.n	8012208 <_strtod_l+0x3a8>
 801225c:	9b06      	ldr	r3, [sp, #24]
 801225e:	eba4 0808 	sub.w	r8, r4, r8
 8012262:	4498      	add	r8, r3
 8012264:	f1b8 0f00 	cmp.w	r8, #0
 8012268:	f340 8096 	ble.w	8012398 <_strtod_l+0x538>
 801226c:	f018 030f 	ands.w	r3, r8, #15
 8012270:	d00a      	beq.n	8012288 <_strtod_l+0x428>
 8012272:	495f      	ldr	r1, [pc, #380]	; (80123f0 <_strtod_l+0x590>)
 8012274:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012278:	4652      	mov	r2, sl
 801227a:	465b      	mov	r3, fp
 801227c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012280:	f7ee f9d2 	bl	8000628 <__aeabi_dmul>
 8012284:	4682      	mov	sl, r0
 8012286:	468b      	mov	fp, r1
 8012288:	f038 080f 	bics.w	r8, r8, #15
 801228c:	d073      	beq.n	8012376 <_strtod_l+0x516>
 801228e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012292:	dd47      	ble.n	8012324 <_strtod_l+0x4c4>
 8012294:	2400      	movs	r4, #0
 8012296:	46a0      	mov	r8, r4
 8012298:	9407      	str	r4, [sp, #28]
 801229a:	9405      	str	r4, [sp, #20]
 801229c:	2322      	movs	r3, #34	; 0x22
 801229e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80123f8 <_strtod_l+0x598>
 80122a2:	f8c9 3000 	str.w	r3, [r9]
 80122a6:	f04f 0a00 	mov.w	sl, #0
 80122aa:	9b07      	ldr	r3, [sp, #28]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	f43f ae16 	beq.w	8011ede <_strtod_l+0x7e>
 80122b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80122b4:	4648      	mov	r0, r9
 80122b6:	f001 f886 	bl	80133c6 <_Bfree>
 80122ba:	9905      	ldr	r1, [sp, #20]
 80122bc:	4648      	mov	r0, r9
 80122be:	f001 f882 	bl	80133c6 <_Bfree>
 80122c2:	4641      	mov	r1, r8
 80122c4:	4648      	mov	r0, r9
 80122c6:	f001 f87e 	bl	80133c6 <_Bfree>
 80122ca:	9907      	ldr	r1, [sp, #28]
 80122cc:	4648      	mov	r0, r9
 80122ce:	f001 f87a 	bl	80133c6 <_Bfree>
 80122d2:	4621      	mov	r1, r4
 80122d4:	4648      	mov	r0, r9
 80122d6:	f001 f876 	bl	80133c6 <_Bfree>
 80122da:	e600      	b.n	8011ede <_strtod_l+0x7e>
 80122dc:	9a06      	ldr	r2, [sp, #24]
 80122de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80122e2:	4293      	cmp	r3, r2
 80122e4:	dbba      	blt.n	801225c <_strtod_l+0x3fc>
 80122e6:	4d42      	ldr	r5, [pc, #264]	; (80123f0 <_strtod_l+0x590>)
 80122e8:	f1c4 040f 	rsb	r4, r4, #15
 80122ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80122f0:	4652      	mov	r2, sl
 80122f2:	465b      	mov	r3, fp
 80122f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122f8:	f7ee f996 	bl	8000628 <__aeabi_dmul>
 80122fc:	9b06      	ldr	r3, [sp, #24]
 80122fe:	1b1c      	subs	r4, r3, r4
 8012300:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012304:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012308:	e78d      	b.n	8012226 <_strtod_l+0x3c6>
 801230a:	f113 0f16 	cmn.w	r3, #22
 801230e:	dba5      	blt.n	801225c <_strtod_l+0x3fc>
 8012310:	4a37      	ldr	r2, [pc, #220]	; (80123f0 <_strtod_l+0x590>)
 8012312:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012316:	e9d2 2300 	ldrd	r2, r3, [r2]
 801231a:	4650      	mov	r0, sl
 801231c:	4659      	mov	r1, fp
 801231e:	f7ee faad 	bl	800087c <__aeabi_ddiv>
 8012322:	e782      	b.n	801222a <_strtod_l+0x3ca>
 8012324:	2300      	movs	r3, #0
 8012326:	4e33      	ldr	r6, [pc, #204]	; (80123f4 <_strtod_l+0x594>)
 8012328:	ea4f 1828 	mov.w	r8, r8, asr #4
 801232c:	4650      	mov	r0, sl
 801232e:	4659      	mov	r1, fp
 8012330:	461d      	mov	r5, r3
 8012332:	f1b8 0f01 	cmp.w	r8, #1
 8012336:	dc21      	bgt.n	801237c <_strtod_l+0x51c>
 8012338:	b10b      	cbz	r3, 801233e <_strtod_l+0x4de>
 801233a:	4682      	mov	sl, r0
 801233c:	468b      	mov	fp, r1
 801233e:	4b2d      	ldr	r3, [pc, #180]	; (80123f4 <_strtod_l+0x594>)
 8012340:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012344:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012348:	4652      	mov	r2, sl
 801234a:	465b      	mov	r3, fp
 801234c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012350:	f7ee f96a 	bl	8000628 <__aeabi_dmul>
 8012354:	4b28      	ldr	r3, [pc, #160]	; (80123f8 <_strtod_l+0x598>)
 8012356:	460a      	mov	r2, r1
 8012358:	400b      	ands	r3, r1
 801235a:	4928      	ldr	r1, [pc, #160]	; (80123fc <_strtod_l+0x59c>)
 801235c:	428b      	cmp	r3, r1
 801235e:	4682      	mov	sl, r0
 8012360:	d898      	bhi.n	8012294 <_strtod_l+0x434>
 8012362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012366:	428b      	cmp	r3, r1
 8012368:	bf86      	itte	hi
 801236a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012404 <_strtod_l+0x5a4>
 801236e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012372:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012376:	2300      	movs	r3, #0
 8012378:	9304      	str	r3, [sp, #16]
 801237a:	e077      	b.n	801246c <_strtod_l+0x60c>
 801237c:	f018 0f01 	tst.w	r8, #1
 8012380:	d006      	beq.n	8012390 <_strtod_l+0x530>
 8012382:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	f7ee f94d 	bl	8000628 <__aeabi_dmul>
 801238e:	2301      	movs	r3, #1
 8012390:	3501      	adds	r5, #1
 8012392:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012396:	e7cc      	b.n	8012332 <_strtod_l+0x4d2>
 8012398:	d0ed      	beq.n	8012376 <_strtod_l+0x516>
 801239a:	f1c8 0800 	rsb	r8, r8, #0
 801239e:	f018 020f 	ands.w	r2, r8, #15
 80123a2:	d00a      	beq.n	80123ba <_strtod_l+0x55a>
 80123a4:	4b12      	ldr	r3, [pc, #72]	; (80123f0 <_strtod_l+0x590>)
 80123a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123aa:	4650      	mov	r0, sl
 80123ac:	4659      	mov	r1, fp
 80123ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b2:	f7ee fa63 	bl	800087c <__aeabi_ddiv>
 80123b6:	4682      	mov	sl, r0
 80123b8:	468b      	mov	fp, r1
 80123ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80123be:	d0da      	beq.n	8012376 <_strtod_l+0x516>
 80123c0:	f1b8 0f1f 	cmp.w	r8, #31
 80123c4:	dd20      	ble.n	8012408 <_strtod_l+0x5a8>
 80123c6:	2400      	movs	r4, #0
 80123c8:	46a0      	mov	r8, r4
 80123ca:	9407      	str	r4, [sp, #28]
 80123cc:	9405      	str	r4, [sp, #20]
 80123ce:	2322      	movs	r3, #34	; 0x22
 80123d0:	f04f 0a00 	mov.w	sl, #0
 80123d4:	f04f 0b00 	mov.w	fp, #0
 80123d8:	f8c9 3000 	str.w	r3, [r9]
 80123dc:	e765      	b.n	80122aa <_strtod_l+0x44a>
 80123de:	bf00      	nop
 80123e0:	08020d5c 	.word	0x08020d5c
 80123e4:	08020d5f 	.word	0x08020d5f
 80123e8:	08020d65 	.word	0x08020d65
 80123ec:	08020d7c 	.word	0x08020d7c
 80123f0:	08020e50 	.word	0x08020e50
 80123f4:	08020e28 	.word	0x08020e28
 80123f8:	7ff00000 	.word	0x7ff00000
 80123fc:	7ca00000 	.word	0x7ca00000
 8012400:	fff80000 	.word	0xfff80000
 8012404:	7fefffff 	.word	0x7fefffff
 8012408:	f018 0310 	ands.w	r3, r8, #16
 801240c:	bf18      	it	ne
 801240e:	236a      	movne	r3, #106	; 0x6a
 8012410:	4da0      	ldr	r5, [pc, #640]	; (8012694 <_strtod_l+0x834>)
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	4650      	mov	r0, sl
 8012416:	4659      	mov	r1, fp
 8012418:	2300      	movs	r3, #0
 801241a:	f1b8 0f00 	cmp.w	r8, #0
 801241e:	f300 810a 	bgt.w	8012636 <_strtod_l+0x7d6>
 8012422:	b10b      	cbz	r3, 8012428 <_strtod_l+0x5c8>
 8012424:	4682      	mov	sl, r0
 8012426:	468b      	mov	fp, r1
 8012428:	9b04      	ldr	r3, [sp, #16]
 801242a:	b1bb      	cbz	r3, 801245c <_strtod_l+0x5fc>
 801242c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012430:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012434:	2b00      	cmp	r3, #0
 8012436:	4659      	mov	r1, fp
 8012438:	dd10      	ble.n	801245c <_strtod_l+0x5fc>
 801243a:	2b1f      	cmp	r3, #31
 801243c:	f340 8107 	ble.w	801264e <_strtod_l+0x7ee>
 8012440:	2b34      	cmp	r3, #52	; 0x34
 8012442:	bfde      	ittt	le
 8012444:	3b20      	suble	r3, #32
 8012446:	f04f 32ff 	movle.w	r2, #4294967295
 801244a:	fa02 f303 	lslle.w	r3, r2, r3
 801244e:	f04f 0a00 	mov.w	sl, #0
 8012452:	bfcc      	ite	gt
 8012454:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012458:	ea03 0b01 	andle.w	fp, r3, r1
 801245c:	2200      	movs	r2, #0
 801245e:	2300      	movs	r3, #0
 8012460:	4650      	mov	r0, sl
 8012462:	4659      	mov	r1, fp
 8012464:	f7ee fb48 	bl	8000af8 <__aeabi_dcmpeq>
 8012468:	2800      	cmp	r0, #0
 801246a:	d1ac      	bne.n	80123c6 <_strtod_l+0x566>
 801246c:	9b07      	ldr	r3, [sp, #28]
 801246e:	9300      	str	r3, [sp, #0]
 8012470:	9a05      	ldr	r2, [sp, #20]
 8012472:	9908      	ldr	r1, [sp, #32]
 8012474:	4623      	mov	r3, r4
 8012476:	4648      	mov	r0, r9
 8012478:	f000 fff7 	bl	801346a <__s2b>
 801247c:	9007      	str	r0, [sp, #28]
 801247e:	2800      	cmp	r0, #0
 8012480:	f43f af08 	beq.w	8012294 <_strtod_l+0x434>
 8012484:	9a06      	ldr	r2, [sp, #24]
 8012486:	9b06      	ldr	r3, [sp, #24]
 8012488:	2a00      	cmp	r2, #0
 801248a:	f1c3 0300 	rsb	r3, r3, #0
 801248e:	bfa8      	it	ge
 8012490:	2300      	movge	r3, #0
 8012492:	930e      	str	r3, [sp, #56]	; 0x38
 8012494:	2400      	movs	r4, #0
 8012496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801249a:	9316      	str	r3, [sp, #88]	; 0x58
 801249c:	46a0      	mov	r8, r4
 801249e:	9b07      	ldr	r3, [sp, #28]
 80124a0:	4648      	mov	r0, r9
 80124a2:	6859      	ldr	r1, [r3, #4]
 80124a4:	f000 ff5b 	bl	801335e <_Balloc>
 80124a8:	9005      	str	r0, [sp, #20]
 80124aa:	2800      	cmp	r0, #0
 80124ac:	f43f aef6 	beq.w	801229c <_strtod_l+0x43c>
 80124b0:	9b07      	ldr	r3, [sp, #28]
 80124b2:	691a      	ldr	r2, [r3, #16]
 80124b4:	3202      	adds	r2, #2
 80124b6:	f103 010c 	add.w	r1, r3, #12
 80124ba:	0092      	lsls	r2, r2, #2
 80124bc:	300c      	adds	r0, #12
 80124be:	f7ff fbdd 	bl	8011c7c <memcpy>
 80124c2:	aa1e      	add	r2, sp, #120	; 0x78
 80124c4:	a91d      	add	r1, sp, #116	; 0x74
 80124c6:	ec4b ab10 	vmov	d0, sl, fp
 80124ca:	4648      	mov	r0, r9
 80124cc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80124d0:	f001 fa86 	bl	80139e0 <__d2b>
 80124d4:	901c      	str	r0, [sp, #112]	; 0x70
 80124d6:	2800      	cmp	r0, #0
 80124d8:	f43f aee0 	beq.w	801229c <_strtod_l+0x43c>
 80124dc:	2101      	movs	r1, #1
 80124de:	4648      	mov	r0, r9
 80124e0:	f001 f84f 	bl	8013582 <__i2b>
 80124e4:	4680      	mov	r8, r0
 80124e6:	2800      	cmp	r0, #0
 80124e8:	f43f aed8 	beq.w	801229c <_strtod_l+0x43c>
 80124ec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80124ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80124f0:	2e00      	cmp	r6, #0
 80124f2:	bfab      	itete	ge
 80124f4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80124f6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80124f8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80124fa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80124fc:	bfac      	ite	ge
 80124fe:	18f7      	addge	r7, r6, r3
 8012500:	1b9d      	sublt	r5, r3, r6
 8012502:	9b04      	ldr	r3, [sp, #16]
 8012504:	1af6      	subs	r6, r6, r3
 8012506:	4416      	add	r6, r2
 8012508:	4b63      	ldr	r3, [pc, #396]	; (8012698 <_strtod_l+0x838>)
 801250a:	3e01      	subs	r6, #1
 801250c:	429e      	cmp	r6, r3
 801250e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012512:	f280 80af 	bge.w	8012674 <_strtod_l+0x814>
 8012516:	1b9b      	subs	r3, r3, r6
 8012518:	2b1f      	cmp	r3, #31
 801251a:	eba2 0203 	sub.w	r2, r2, r3
 801251e:	f04f 0101 	mov.w	r1, #1
 8012522:	f300 809b 	bgt.w	801265c <_strtod_l+0x7fc>
 8012526:	fa01 f303 	lsl.w	r3, r1, r3
 801252a:	930f      	str	r3, [sp, #60]	; 0x3c
 801252c:	2300      	movs	r3, #0
 801252e:	930a      	str	r3, [sp, #40]	; 0x28
 8012530:	18be      	adds	r6, r7, r2
 8012532:	9b04      	ldr	r3, [sp, #16]
 8012534:	42b7      	cmp	r7, r6
 8012536:	4415      	add	r5, r2
 8012538:	441d      	add	r5, r3
 801253a:	463b      	mov	r3, r7
 801253c:	bfa8      	it	ge
 801253e:	4633      	movge	r3, r6
 8012540:	42ab      	cmp	r3, r5
 8012542:	bfa8      	it	ge
 8012544:	462b      	movge	r3, r5
 8012546:	2b00      	cmp	r3, #0
 8012548:	bfc2      	ittt	gt
 801254a:	1af6      	subgt	r6, r6, r3
 801254c:	1aed      	subgt	r5, r5, r3
 801254e:	1aff      	subgt	r7, r7, r3
 8012550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012552:	b1bb      	cbz	r3, 8012584 <_strtod_l+0x724>
 8012554:	4641      	mov	r1, r8
 8012556:	461a      	mov	r2, r3
 8012558:	4648      	mov	r0, r9
 801255a:	f001 f8b1 	bl	80136c0 <__pow5mult>
 801255e:	4680      	mov	r8, r0
 8012560:	2800      	cmp	r0, #0
 8012562:	f43f ae9b 	beq.w	801229c <_strtod_l+0x43c>
 8012566:	4601      	mov	r1, r0
 8012568:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801256a:	4648      	mov	r0, r9
 801256c:	f001 f812 	bl	8013594 <__multiply>
 8012570:	900c      	str	r0, [sp, #48]	; 0x30
 8012572:	2800      	cmp	r0, #0
 8012574:	f43f ae92 	beq.w	801229c <_strtod_l+0x43c>
 8012578:	991c      	ldr	r1, [sp, #112]	; 0x70
 801257a:	4648      	mov	r0, r9
 801257c:	f000 ff23 	bl	80133c6 <_Bfree>
 8012580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012582:	931c      	str	r3, [sp, #112]	; 0x70
 8012584:	2e00      	cmp	r6, #0
 8012586:	dc7a      	bgt.n	801267e <_strtod_l+0x81e>
 8012588:	9b06      	ldr	r3, [sp, #24]
 801258a:	2b00      	cmp	r3, #0
 801258c:	dd08      	ble.n	80125a0 <_strtod_l+0x740>
 801258e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012590:	9905      	ldr	r1, [sp, #20]
 8012592:	4648      	mov	r0, r9
 8012594:	f001 f894 	bl	80136c0 <__pow5mult>
 8012598:	9005      	str	r0, [sp, #20]
 801259a:	2800      	cmp	r0, #0
 801259c:	f43f ae7e 	beq.w	801229c <_strtod_l+0x43c>
 80125a0:	2d00      	cmp	r5, #0
 80125a2:	dd08      	ble.n	80125b6 <_strtod_l+0x756>
 80125a4:	462a      	mov	r2, r5
 80125a6:	9905      	ldr	r1, [sp, #20]
 80125a8:	4648      	mov	r0, r9
 80125aa:	f001 f8d7 	bl	801375c <__lshift>
 80125ae:	9005      	str	r0, [sp, #20]
 80125b0:	2800      	cmp	r0, #0
 80125b2:	f43f ae73 	beq.w	801229c <_strtod_l+0x43c>
 80125b6:	2f00      	cmp	r7, #0
 80125b8:	dd08      	ble.n	80125cc <_strtod_l+0x76c>
 80125ba:	4641      	mov	r1, r8
 80125bc:	463a      	mov	r2, r7
 80125be:	4648      	mov	r0, r9
 80125c0:	f001 f8cc 	bl	801375c <__lshift>
 80125c4:	4680      	mov	r8, r0
 80125c6:	2800      	cmp	r0, #0
 80125c8:	f43f ae68 	beq.w	801229c <_strtod_l+0x43c>
 80125cc:	9a05      	ldr	r2, [sp, #20]
 80125ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80125d0:	4648      	mov	r0, r9
 80125d2:	f001 f931 	bl	8013838 <__mdiff>
 80125d6:	4604      	mov	r4, r0
 80125d8:	2800      	cmp	r0, #0
 80125da:	f43f ae5f 	beq.w	801229c <_strtod_l+0x43c>
 80125de:	68c3      	ldr	r3, [r0, #12]
 80125e0:	930c      	str	r3, [sp, #48]	; 0x30
 80125e2:	2300      	movs	r3, #0
 80125e4:	60c3      	str	r3, [r0, #12]
 80125e6:	4641      	mov	r1, r8
 80125e8:	f001 f90c 	bl	8013804 <__mcmp>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	da55      	bge.n	801269c <_strtod_l+0x83c>
 80125f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125f2:	b9e3      	cbnz	r3, 801262e <_strtod_l+0x7ce>
 80125f4:	f1ba 0f00 	cmp.w	sl, #0
 80125f8:	d119      	bne.n	801262e <_strtod_l+0x7ce>
 80125fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80125fe:	b9b3      	cbnz	r3, 801262e <_strtod_l+0x7ce>
 8012600:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012604:	0d1b      	lsrs	r3, r3, #20
 8012606:	051b      	lsls	r3, r3, #20
 8012608:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801260c:	d90f      	bls.n	801262e <_strtod_l+0x7ce>
 801260e:	6963      	ldr	r3, [r4, #20]
 8012610:	b913      	cbnz	r3, 8012618 <_strtod_l+0x7b8>
 8012612:	6923      	ldr	r3, [r4, #16]
 8012614:	2b01      	cmp	r3, #1
 8012616:	dd0a      	ble.n	801262e <_strtod_l+0x7ce>
 8012618:	4621      	mov	r1, r4
 801261a:	2201      	movs	r2, #1
 801261c:	4648      	mov	r0, r9
 801261e:	f001 f89d 	bl	801375c <__lshift>
 8012622:	4641      	mov	r1, r8
 8012624:	4604      	mov	r4, r0
 8012626:	f001 f8ed 	bl	8013804 <__mcmp>
 801262a:	2800      	cmp	r0, #0
 801262c:	dc67      	bgt.n	80126fe <_strtod_l+0x89e>
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d171      	bne.n	8012718 <_strtod_l+0x8b8>
 8012634:	e63d      	b.n	80122b2 <_strtod_l+0x452>
 8012636:	f018 0f01 	tst.w	r8, #1
 801263a:	d004      	beq.n	8012646 <_strtod_l+0x7e6>
 801263c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012640:	f7ed fff2 	bl	8000628 <__aeabi_dmul>
 8012644:	2301      	movs	r3, #1
 8012646:	ea4f 0868 	mov.w	r8, r8, asr #1
 801264a:	3508      	adds	r5, #8
 801264c:	e6e5      	b.n	801241a <_strtod_l+0x5ba>
 801264e:	f04f 32ff 	mov.w	r2, #4294967295
 8012652:	fa02 f303 	lsl.w	r3, r2, r3
 8012656:	ea03 0a0a 	and.w	sl, r3, sl
 801265a:	e6ff      	b.n	801245c <_strtod_l+0x5fc>
 801265c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012660:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012664:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012668:	36e2      	adds	r6, #226	; 0xe2
 801266a:	fa01 f306 	lsl.w	r3, r1, r6
 801266e:	930a      	str	r3, [sp, #40]	; 0x28
 8012670:	910f      	str	r1, [sp, #60]	; 0x3c
 8012672:	e75d      	b.n	8012530 <_strtod_l+0x6d0>
 8012674:	2300      	movs	r3, #0
 8012676:	930a      	str	r3, [sp, #40]	; 0x28
 8012678:	2301      	movs	r3, #1
 801267a:	930f      	str	r3, [sp, #60]	; 0x3c
 801267c:	e758      	b.n	8012530 <_strtod_l+0x6d0>
 801267e:	4632      	mov	r2, r6
 8012680:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012682:	4648      	mov	r0, r9
 8012684:	f001 f86a 	bl	801375c <__lshift>
 8012688:	901c      	str	r0, [sp, #112]	; 0x70
 801268a:	2800      	cmp	r0, #0
 801268c:	f47f af7c 	bne.w	8012588 <_strtod_l+0x728>
 8012690:	e604      	b.n	801229c <_strtod_l+0x43c>
 8012692:	bf00      	nop
 8012694:	08020d90 	.word	0x08020d90
 8012698:	fffffc02 	.word	0xfffffc02
 801269c:	465d      	mov	r5, fp
 801269e:	f040 8086 	bne.w	80127ae <_strtod_l+0x94e>
 80126a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126a8:	b32a      	cbz	r2, 80126f6 <_strtod_l+0x896>
 80126aa:	4aaf      	ldr	r2, [pc, #700]	; (8012968 <_strtod_l+0xb08>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d153      	bne.n	8012758 <_strtod_l+0x8f8>
 80126b0:	9b04      	ldr	r3, [sp, #16]
 80126b2:	4650      	mov	r0, sl
 80126b4:	b1d3      	cbz	r3, 80126ec <_strtod_l+0x88c>
 80126b6:	4aad      	ldr	r2, [pc, #692]	; (801296c <_strtod_l+0xb0c>)
 80126b8:	402a      	ands	r2, r5
 80126ba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80126be:	f04f 31ff 	mov.w	r1, #4294967295
 80126c2:	d816      	bhi.n	80126f2 <_strtod_l+0x892>
 80126c4:	0d12      	lsrs	r2, r2, #20
 80126c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80126ca:	fa01 f303 	lsl.w	r3, r1, r3
 80126ce:	4298      	cmp	r0, r3
 80126d0:	d142      	bne.n	8012758 <_strtod_l+0x8f8>
 80126d2:	4ba7      	ldr	r3, [pc, #668]	; (8012970 <_strtod_l+0xb10>)
 80126d4:	429d      	cmp	r5, r3
 80126d6:	d102      	bne.n	80126de <_strtod_l+0x87e>
 80126d8:	3001      	adds	r0, #1
 80126da:	f43f addf 	beq.w	801229c <_strtod_l+0x43c>
 80126de:	4ba3      	ldr	r3, [pc, #652]	; (801296c <_strtod_l+0xb0c>)
 80126e0:	402b      	ands	r3, r5
 80126e2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80126e6:	f04f 0a00 	mov.w	sl, #0
 80126ea:	e7a0      	b.n	801262e <_strtod_l+0x7ce>
 80126ec:	f04f 33ff 	mov.w	r3, #4294967295
 80126f0:	e7ed      	b.n	80126ce <_strtod_l+0x86e>
 80126f2:	460b      	mov	r3, r1
 80126f4:	e7eb      	b.n	80126ce <_strtod_l+0x86e>
 80126f6:	bb7b      	cbnz	r3, 8012758 <_strtod_l+0x8f8>
 80126f8:	f1ba 0f00 	cmp.w	sl, #0
 80126fc:	d12c      	bne.n	8012758 <_strtod_l+0x8f8>
 80126fe:	9904      	ldr	r1, [sp, #16]
 8012700:	4a9a      	ldr	r2, [pc, #616]	; (801296c <_strtod_l+0xb0c>)
 8012702:	465b      	mov	r3, fp
 8012704:	b1f1      	cbz	r1, 8012744 <_strtod_l+0x8e4>
 8012706:	ea02 010b 	and.w	r1, r2, fp
 801270a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801270e:	dc19      	bgt.n	8012744 <_strtod_l+0x8e4>
 8012710:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012714:	f77f ae5b 	ble.w	80123ce <_strtod_l+0x56e>
 8012718:	4a96      	ldr	r2, [pc, #600]	; (8012974 <_strtod_l+0xb14>)
 801271a:	2300      	movs	r3, #0
 801271c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012720:	4650      	mov	r0, sl
 8012722:	4659      	mov	r1, fp
 8012724:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012728:	f7ed ff7e 	bl	8000628 <__aeabi_dmul>
 801272c:	4682      	mov	sl, r0
 801272e:	468b      	mov	fp, r1
 8012730:	2900      	cmp	r1, #0
 8012732:	f47f adbe 	bne.w	80122b2 <_strtod_l+0x452>
 8012736:	2800      	cmp	r0, #0
 8012738:	f47f adbb 	bne.w	80122b2 <_strtod_l+0x452>
 801273c:	2322      	movs	r3, #34	; 0x22
 801273e:	f8c9 3000 	str.w	r3, [r9]
 8012742:	e5b6      	b.n	80122b2 <_strtod_l+0x452>
 8012744:	4013      	ands	r3, r2
 8012746:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801274a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801274e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012752:	f04f 3aff 	mov.w	sl, #4294967295
 8012756:	e76a      	b.n	801262e <_strtod_l+0x7ce>
 8012758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801275a:	b193      	cbz	r3, 8012782 <_strtod_l+0x922>
 801275c:	422b      	tst	r3, r5
 801275e:	f43f af66 	beq.w	801262e <_strtod_l+0x7ce>
 8012762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012764:	9a04      	ldr	r2, [sp, #16]
 8012766:	4650      	mov	r0, sl
 8012768:	4659      	mov	r1, fp
 801276a:	b173      	cbz	r3, 801278a <_strtod_l+0x92a>
 801276c:	f7ff fb5a 	bl	8011e24 <sulp>
 8012770:	4602      	mov	r2, r0
 8012772:	460b      	mov	r3, r1
 8012774:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012778:	f7ed fda0 	bl	80002bc <__adddf3>
 801277c:	4682      	mov	sl, r0
 801277e:	468b      	mov	fp, r1
 8012780:	e755      	b.n	801262e <_strtod_l+0x7ce>
 8012782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012784:	ea13 0f0a 	tst.w	r3, sl
 8012788:	e7e9      	b.n	801275e <_strtod_l+0x8fe>
 801278a:	f7ff fb4b 	bl	8011e24 <sulp>
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012796:	f7ed fd8f 	bl	80002b8 <__aeabi_dsub>
 801279a:	2200      	movs	r2, #0
 801279c:	2300      	movs	r3, #0
 801279e:	4682      	mov	sl, r0
 80127a0:	468b      	mov	fp, r1
 80127a2:	f7ee f9a9 	bl	8000af8 <__aeabi_dcmpeq>
 80127a6:	2800      	cmp	r0, #0
 80127a8:	f47f ae11 	bne.w	80123ce <_strtod_l+0x56e>
 80127ac:	e73f      	b.n	801262e <_strtod_l+0x7ce>
 80127ae:	4641      	mov	r1, r8
 80127b0:	4620      	mov	r0, r4
 80127b2:	f001 f964 	bl	8013a7e <__ratio>
 80127b6:	ec57 6b10 	vmov	r6, r7, d0
 80127ba:	2200      	movs	r2, #0
 80127bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80127c0:	ee10 0a10 	vmov	r0, s0
 80127c4:	4639      	mov	r1, r7
 80127c6:	f7ee f9ab 	bl	8000b20 <__aeabi_dcmple>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d077      	beq.n	80128be <_strtod_l+0xa5e>
 80127ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d04a      	beq.n	801286a <_strtod_l+0xa0a>
 80127d4:	4b68      	ldr	r3, [pc, #416]	; (8012978 <_strtod_l+0xb18>)
 80127d6:	2200      	movs	r2, #0
 80127d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80127dc:	4f66      	ldr	r7, [pc, #408]	; (8012978 <_strtod_l+0xb18>)
 80127de:	2600      	movs	r6, #0
 80127e0:	4b62      	ldr	r3, [pc, #392]	; (801296c <_strtod_l+0xb0c>)
 80127e2:	402b      	ands	r3, r5
 80127e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80127e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127e8:	4b64      	ldr	r3, [pc, #400]	; (801297c <_strtod_l+0xb1c>)
 80127ea:	429a      	cmp	r2, r3
 80127ec:	f040 80ce 	bne.w	801298c <_strtod_l+0xb2c>
 80127f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80127f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80127f8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80127fc:	ec4b ab10 	vmov	d0, sl, fp
 8012800:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012804:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012808:	f001 f874 	bl	80138f4 <__ulp>
 801280c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012810:	ec53 2b10 	vmov	r2, r3, d0
 8012814:	f7ed ff08 	bl	8000628 <__aeabi_dmul>
 8012818:	4652      	mov	r2, sl
 801281a:	465b      	mov	r3, fp
 801281c:	f7ed fd4e 	bl	80002bc <__adddf3>
 8012820:	460b      	mov	r3, r1
 8012822:	4952      	ldr	r1, [pc, #328]	; (801296c <_strtod_l+0xb0c>)
 8012824:	4a56      	ldr	r2, [pc, #344]	; (8012980 <_strtod_l+0xb20>)
 8012826:	4019      	ands	r1, r3
 8012828:	4291      	cmp	r1, r2
 801282a:	4682      	mov	sl, r0
 801282c:	d95b      	bls.n	80128e6 <_strtod_l+0xa86>
 801282e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012830:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012834:	4293      	cmp	r3, r2
 8012836:	d103      	bne.n	8012840 <_strtod_l+0x9e0>
 8012838:	9b08      	ldr	r3, [sp, #32]
 801283a:	3301      	adds	r3, #1
 801283c:	f43f ad2e 	beq.w	801229c <_strtod_l+0x43c>
 8012840:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012970 <_strtod_l+0xb10>
 8012844:	f04f 3aff 	mov.w	sl, #4294967295
 8012848:	991c      	ldr	r1, [sp, #112]	; 0x70
 801284a:	4648      	mov	r0, r9
 801284c:	f000 fdbb 	bl	80133c6 <_Bfree>
 8012850:	9905      	ldr	r1, [sp, #20]
 8012852:	4648      	mov	r0, r9
 8012854:	f000 fdb7 	bl	80133c6 <_Bfree>
 8012858:	4641      	mov	r1, r8
 801285a:	4648      	mov	r0, r9
 801285c:	f000 fdb3 	bl	80133c6 <_Bfree>
 8012860:	4621      	mov	r1, r4
 8012862:	4648      	mov	r0, r9
 8012864:	f000 fdaf 	bl	80133c6 <_Bfree>
 8012868:	e619      	b.n	801249e <_strtod_l+0x63e>
 801286a:	f1ba 0f00 	cmp.w	sl, #0
 801286e:	d11a      	bne.n	80128a6 <_strtod_l+0xa46>
 8012870:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012874:	b9eb      	cbnz	r3, 80128b2 <_strtod_l+0xa52>
 8012876:	2200      	movs	r2, #0
 8012878:	4b3f      	ldr	r3, [pc, #252]	; (8012978 <_strtod_l+0xb18>)
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	f7ee f945 	bl	8000b0c <__aeabi_dcmplt>
 8012882:	b9c8      	cbnz	r0, 80128b8 <_strtod_l+0xa58>
 8012884:	4630      	mov	r0, r6
 8012886:	4639      	mov	r1, r7
 8012888:	2200      	movs	r2, #0
 801288a:	4b3e      	ldr	r3, [pc, #248]	; (8012984 <_strtod_l+0xb24>)
 801288c:	f7ed fecc 	bl	8000628 <__aeabi_dmul>
 8012890:	4606      	mov	r6, r0
 8012892:	460f      	mov	r7, r1
 8012894:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012898:	9618      	str	r6, [sp, #96]	; 0x60
 801289a:	9319      	str	r3, [sp, #100]	; 0x64
 801289c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80128a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80128a4:	e79c      	b.n	80127e0 <_strtod_l+0x980>
 80128a6:	f1ba 0f01 	cmp.w	sl, #1
 80128aa:	d102      	bne.n	80128b2 <_strtod_l+0xa52>
 80128ac:	2d00      	cmp	r5, #0
 80128ae:	f43f ad8e 	beq.w	80123ce <_strtod_l+0x56e>
 80128b2:	2200      	movs	r2, #0
 80128b4:	4b34      	ldr	r3, [pc, #208]	; (8012988 <_strtod_l+0xb28>)
 80128b6:	e78f      	b.n	80127d8 <_strtod_l+0x978>
 80128b8:	2600      	movs	r6, #0
 80128ba:	4f32      	ldr	r7, [pc, #200]	; (8012984 <_strtod_l+0xb24>)
 80128bc:	e7ea      	b.n	8012894 <_strtod_l+0xa34>
 80128be:	4b31      	ldr	r3, [pc, #196]	; (8012984 <_strtod_l+0xb24>)
 80128c0:	4630      	mov	r0, r6
 80128c2:	4639      	mov	r1, r7
 80128c4:	2200      	movs	r2, #0
 80128c6:	f7ed feaf 	bl	8000628 <__aeabi_dmul>
 80128ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128cc:	4606      	mov	r6, r0
 80128ce:	460f      	mov	r7, r1
 80128d0:	b933      	cbnz	r3, 80128e0 <_strtod_l+0xa80>
 80128d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128d6:	9010      	str	r0, [sp, #64]	; 0x40
 80128d8:	9311      	str	r3, [sp, #68]	; 0x44
 80128da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80128de:	e7df      	b.n	80128a0 <_strtod_l+0xa40>
 80128e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80128e4:	e7f9      	b.n	80128da <_strtod_l+0xa7a>
 80128e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80128ea:	9b04      	ldr	r3, [sp, #16]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d1ab      	bne.n	8012848 <_strtod_l+0x9e8>
 80128f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80128f4:	0d1b      	lsrs	r3, r3, #20
 80128f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128f8:	051b      	lsls	r3, r3, #20
 80128fa:	429a      	cmp	r2, r3
 80128fc:	465d      	mov	r5, fp
 80128fe:	d1a3      	bne.n	8012848 <_strtod_l+0x9e8>
 8012900:	4639      	mov	r1, r7
 8012902:	4630      	mov	r0, r6
 8012904:	f7ee f940 	bl	8000b88 <__aeabi_d2iz>
 8012908:	f7ed fe24 	bl	8000554 <__aeabi_i2d>
 801290c:	460b      	mov	r3, r1
 801290e:	4602      	mov	r2, r0
 8012910:	4639      	mov	r1, r7
 8012912:	4630      	mov	r0, r6
 8012914:	f7ed fcd0 	bl	80002b8 <__aeabi_dsub>
 8012918:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801291a:	4606      	mov	r6, r0
 801291c:	460f      	mov	r7, r1
 801291e:	b933      	cbnz	r3, 801292e <_strtod_l+0xace>
 8012920:	f1ba 0f00 	cmp.w	sl, #0
 8012924:	d103      	bne.n	801292e <_strtod_l+0xace>
 8012926:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801292a:	2d00      	cmp	r5, #0
 801292c:	d06d      	beq.n	8012a0a <_strtod_l+0xbaa>
 801292e:	a30a      	add	r3, pc, #40	; (adr r3, 8012958 <_strtod_l+0xaf8>)
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	4630      	mov	r0, r6
 8012936:	4639      	mov	r1, r7
 8012938:	f7ee f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801293c:	2800      	cmp	r0, #0
 801293e:	f47f acb8 	bne.w	80122b2 <_strtod_l+0x452>
 8012942:	a307      	add	r3, pc, #28	; (adr r3, 8012960 <_strtod_l+0xb00>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	4630      	mov	r0, r6
 801294a:	4639      	mov	r1, r7
 801294c:	f7ee f8fc 	bl	8000b48 <__aeabi_dcmpgt>
 8012950:	2800      	cmp	r0, #0
 8012952:	f43f af79 	beq.w	8012848 <_strtod_l+0x9e8>
 8012956:	e4ac      	b.n	80122b2 <_strtod_l+0x452>
 8012958:	94a03595 	.word	0x94a03595
 801295c:	3fdfffff 	.word	0x3fdfffff
 8012960:	35afe535 	.word	0x35afe535
 8012964:	3fe00000 	.word	0x3fe00000
 8012968:	000fffff 	.word	0x000fffff
 801296c:	7ff00000 	.word	0x7ff00000
 8012970:	7fefffff 	.word	0x7fefffff
 8012974:	39500000 	.word	0x39500000
 8012978:	3ff00000 	.word	0x3ff00000
 801297c:	7fe00000 	.word	0x7fe00000
 8012980:	7c9fffff 	.word	0x7c9fffff
 8012984:	3fe00000 	.word	0x3fe00000
 8012988:	bff00000 	.word	0xbff00000
 801298c:	9b04      	ldr	r3, [sp, #16]
 801298e:	b333      	cbz	r3, 80129de <_strtod_l+0xb7e>
 8012990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012992:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012996:	d822      	bhi.n	80129de <_strtod_l+0xb7e>
 8012998:	a327      	add	r3, pc, #156	; (adr r3, 8012a38 <_strtod_l+0xbd8>)
 801299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299e:	4630      	mov	r0, r6
 80129a0:	4639      	mov	r1, r7
 80129a2:	f7ee f8bd 	bl	8000b20 <__aeabi_dcmple>
 80129a6:	b1a0      	cbz	r0, 80129d2 <_strtod_l+0xb72>
 80129a8:	4639      	mov	r1, r7
 80129aa:	4630      	mov	r0, r6
 80129ac:	f7ee f914 	bl	8000bd8 <__aeabi_d2uiz>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	bf08      	it	eq
 80129b4:	2001      	moveq	r0, #1
 80129b6:	f7ed fdbd 	bl	8000534 <__aeabi_ui2d>
 80129ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129bc:	4606      	mov	r6, r0
 80129be:	460f      	mov	r7, r1
 80129c0:	bb03      	cbnz	r3, 8012a04 <_strtod_l+0xba4>
 80129c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129c6:	9012      	str	r0, [sp, #72]	; 0x48
 80129c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80129ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80129ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80129d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80129d6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80129da:	1a9b      	subs	r3, r3, r2
 80129dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80129de:	ed9d 0b08 	vldr	d0, [sp, #32]
 80129e2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80129e6:	f000 ff85 	bl	80138f4 <__ulp>
 80129ea:	4650      	mov	r0, sl
 80129ec:	ec53 2b10 	vmov	r2, r3, d0
 80129f0:	4659      	mov	r1, fp
 80129f2:	f7ed fe19 	bl	8000628 <__aeabi_dmul>
 80129f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80129fa:	f7ed fc5f 	bl	80002bc <__adddf3>
 80129fe:	4682      	mov	sl, r0
 8012a00:	468b      	mov	fp, r1
 8012a02:	e772      	b.n	80128ea <_strtod_l+0xa8a>
 8012a04:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012a08:	e7df      	b.n	80129ca <_strtod_l+0xb6a>
 8012a0a:	a30d      	add	r3, pc, #52	; (adr r3, 8012a40 <_strtod_l+0xbe0>)
 8012a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a10:	f7ee f87c 	bl	8000b0c <__aeabi_dcmplt>
 8012a14:	e79c      	b.n	8012950 <_strtod_l+0xaf0>
 8012a16:	2300      	movs	r3, #0
 8012a18:	930d      	str	r3, [sp, #52]	; 0x34
 8012a1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a1e:	6013      	str	r3, [r2, #0]
 8012a20:	f7ff ba61 	b.w	8011ee6 <_strtod_l+0x86>
 8012a24:	2b65      	cmp	r3, #101	; 0x65
 8012a26:	f04f 0200 	mov.w	r2, #0
 8012a2a:	f43f ab4e 	beq.w	80120ca <_strtod_l+0x26a>
 8012a2e:	2101      	movs	r1, #1
 8012a30:	4614      	mov	r4, r2
 8012a32:	9104      	str	r1, [sp, #16]
 8012a34:	f7ff bacb 	b.w	8011fce <_strtod_l+0x16e>
 8012a38:	ffc00000 	.word	0xffc00000
 8012a3c:	41dfffff 	.word	0x41dfffff
 8012a40:	94a03595 	.word	0x94a03595
 8012a44:	3fcfffff 	.word	0x3fcfffff

08012a48 <strtof>:
 8012a48:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8012a4c:	4e24      	ldr	r6, [pc, #144]	; (8012ae0 <strtof+0x98>)
 8012a4e:	4a25      	ldr	r2, [pc, #148]	; (8012ae4 <strtof+0x9c>)
 8012a50:	6834      	ldr	r4, [r6, #0]
 8012a52:	6a23      	ldr	r3, [r4, #32]
 8012a54:	ed2d 8b02 	vpush	{d8}
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	bf08      	it	eq
 8012a5c:	4613      	moveq	r3, r2
 8012a5e:	460a      	mov	r2, r1
 8012a60:	4601      	mov	r1, r0
 8012a62:	4620      	mov	r0, r4
 8012a64:	f7ff f9fc 	bl	8011e60 <_strtod_l>
 8012a68:	ec55 4b10 	vmov	r4, r5, d0
 8012a6c:	ee10 2a10 	vmov	r2, s0
 8012a70:	462b      	mov	r3, r5
 8012a72:	ee10 0a10 	vmov	r0, s0
 8012a76:	4629      	mov	r1, r5
 8012a78:	f7ee f870 	bl	8000b5c <__aeabi_dcmpun>
 8012a7c:	b130      	cbz	r0, 8012a8c <strtof+0x44>
 8012a7e:	ecbd 8b02 	vpop	{d8}
 8012a82:	2000      	movs	r0, #0
 8012a84:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8012a88:	f001 bb50 	b.w	801412c <nanf>
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	4629      	mov	r1, r5
 8012a90:	f7ee f8c2 	bl	8000c18 <__aeabi_d2f>
 8012a94:	ee08 0a10 	vmov	s16, r0
 8012a98:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012ae8 <strtof+0xa0>
 8012a9c:	eeb0 7ac8 	vabs.f32	s14, s16
 8012aa0:	eeb4 7a67 	vcmp.f32	s14, s15
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	dd14      	ble.n	8012ad4 <strtof+0x8c>
 8012aaa:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8012aae:	f04f 32ff 	mov.w	r2, #4294967295
 8012ab2:	4b0e      	ldr	r3, [pc, #56]	; (8012aec <strtof+0xa4>)
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	4649      	mov	r1, r9
 8012ab8:	f7ee f850 	bl	8000b5c <__aeabi_dcmpun>
 8012abc:	b938      	cbnz	r0, 8012ace <strtof+0x86>
 8012abe:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac2:	4b0a      	ldr	r3, [pc, #40]	; (8012aec <strtof+0xa4>)
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	4649      	mov	r1, r9
 8012ac8:	f7ee f82a 	bl	8000b20 <__aeabi_dcmple>
 8012acc:	b110      	cbz	r0, 8012ad4 <strtof+0x8c>
 8012ace:	6833      	ldr	r3, [r6, #0]
 8012ad0:	2222      	movs	r2, #34	; 0x22
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8012ad8:	ecbd 8b02 	vpop	{d8}
 8012adc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012ae0:	20000064 	.word	0x20000064
 8012ae4:	200000c8 	.word	0x200000c8
 8012ae8:	7f7fffff 	.word	0x7f7fffff
 8012aec:	7fefffff 	.word	0x7fefffff

08012af0 <__strtok_r>:
 8012af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012af2:	b918      	cbnz	r0, 8012afc <__strtok_r+0xc>
 8012af4:	6810      	ldr	r0, [r2, #0]
 8012af6:	b908      	cbnz	r0, 8012afc <__strtok_r+0xc>
 8012af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012afa:	4620      	mov	r0, r4
 8012afc:	4604      	mov	r4, r0
 8012afe:	460f      	mov	r7, r1
 8012b00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012b04:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b08:	b91e      	cbnz	r6, 8012b12 <__strtok_r+0x22>
 8012b0a:	b96d      	cbnz	r5, 8012b28 <__strtok_r+0x38>
 8012b0c:	6015      	str	r5, [r2, #0]
 8012b0e:	4628      	mov	r0, r5
 8012b10:	e7f2      	b.n	8012af8 <__strtok_r+0x8>
 8012b12:	42b5      	cmp	r5, r6
 8012b14:	d1f6      	bne.n	8012b04 <__strtok_r+0x14>
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d1ef      	bne.n	8012afa <__strtok_r+0xa>
 8012b1a:	6014      	str	r4, [r2, #0]
 8012b1c:	7003      	strb	r3, [r0, #0]
 8012b1e:	e7eb      	b.n	8012af8 <__strtok_r+0x8>
 8012b20:	462b      	mov	r3, r5
 8012b22:	e00d      	b.n	8012b40 <__strtok_r+0x50>
 8012b24:	b926      	cbnz	r6, 8012b30 <__strtok_r+0x40>
 8012b26:	461c      	mov	r4, r3
 8012b28:	4623      	mov	r3, r4
 8012b2a:	460f      	mov	r7, r1
 8012b2c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8012b30:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b34:	42b5      	cmp	r5, r6
 8012b36:	d1f5      	bne.n	8012b24 <__strtok_r+0x34>
 8012b38:	2d00      	cmp	r5, #0
 8012b3a:	d0f1      	beq.n	8012b20 <__strtok_r+0x30>
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	7021      	strb	r1, [r4, #0]
 8012b40:	6013      	str	r3, [r2, #0]
 8012b42:	e7d9      	b.n	8012af8 <__strtok_r+0x8>

08012b44 <strtok_r>:
 8012b44:	2301      	movs	r3, #1
 8012b46:	f7ff bfd3 	b.w	8012af0 <__strtok_r>

08012b4a <_strtoul_l.isra.0>:
 8012b4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b4e:	4680      	mov	r8, r0
 8012b50:	4689      	mov	r9, r1
 8012b52:	4692      	mov	sl, r2
 8012b54:	461e      	mov	r6, r3
 8012b56:	460f      	mov	r7, r1
 8012b58:	463d      	mov	r5, r7
 8012b5a:	9808      	ldr	r0, [sp, #32]
 8012b5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b60:	f000 fbe4 	bl	801332c <__locale_ctype_ptr_l>
 8012b64:	4420      	add	r0, r4
 8012b66:	7843      	ldrb	r3, [r0, #1]
 8012b68:	f013 0308 	ands.w	r3, r3, #8
 8012b6c:	d130      	bne.n	8012bd0 <_strtoul_l.isra.0+0x86>
 8012b6e:	2c2d      	cmp	r4, #45	; 0x2d
 8012b70:	d130      	bne.n	8012bd4 <_strtoul_l.isra.0+0x8a>
 8012b72:	787c      	ldrb	r4, [r7, #1]
 8012b74:	1cbd      	adds	r5, r7, #2
 8012b76:	2101      	movs	r1, #1
 8012b78:	2e00      	cmp	r6, #0
 8012b7a:	d05c      	beq.n	8012c36 <_strtoul_l.isra.0+0xec>
 8012b7c:	2e10      	cmp	r6, #16
 8012b7e:	d109      	bne.n	8012b94 <_strtoul_l.isra.0+0x4a>
 8012b80:	2c30      	cmp	r4, #48	; 0x30
 8012b82:	d107      	bne.n	8012b94 <_strtoul_l.isra.0+0x4a>
 8012b84:	782b      	ldrb	r3, [r5, #0]
 8012b86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012b8a:	2b58      	cmp	r3, #88	; 0x58
 8012b8c:	d14e      	bne.n	8012c2c <_strtoul_l.isra.0+0xe2>
 8012b8e:	786c      	ldrb	r4, [r5, #1]
 8012b90:	2610      	movs	r6, #16
 8012b92:	3502      	adds	r5, #2
 8012b94:	f04f 32ff 	mov.w	r2, #4294967295
 8012b98:	2300      	movs	r3, #0
 8012b9a:	fbb2 f2f6 	udiv	r2, r2, r6
 8012b9e:	fb06 fc02 	mul.w	ip, r6, r2
 8012ba2:	ea6f 0c0c 	mvn.w	ip, ip
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012bac:	2f09      	cmp	r7, #9
 8012bae:	d817      	bhi.n	8012be0 <_strtoul_l.isra.0+0x96>
 8012bb0:	463c      	mov	r4, r7
 8012bb2:	42a6      	cmp	r6, r4
 8012bb4:	dd23      	ble.n	8012bfe <_strtoul_l.isra.0+0xb4>
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	db1e      	blt.n	8012bf8 <_strtoul_l.isra.0+0xae>
 8012bba:	4282      	cmp	r2, r0
 8012bbc:	d31c      	bcc.n	8012bf8 <_strtoul_l.isra.0+0xae>
 8012bbe:	d101      	bne.n	8012bc4 <_strtoul_l.isra.0+0x7a>
 8012bc0:	45a4      	cmp	ip, r4
 8012bc2:	db19      	blt.n	8012bf8 <_strtoul_l.isra.0+0xae>
 8012bc4:	fb00 4006 	mla	r0, r0, r6, r4
 8012bc8:	2301      	movs	r3, #1
 8012bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012bce:	e7eb      	b.n	8012ba8 <_strtoul_l.isra.0+0x5e>
 8012bd0:	462f      	mov	r7, r5
 8012bd2:	e7c1      	b.n	8012b58 <_strtoul_l.isra.0+0xe>
 8012bd4:	2c2b      	cmp	r4, #43	; 0x2b
 8012bd6:	bf04      	itt	eq
 8012bd8:	1cbd      	addeq	r5, r7, #2
 8012bda:	787c      	ldrbeq	r4, [r7, #1]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	e7cb      	b.n	8012b78 <_strtoul_l.isra.0+0x2e>
 8012be0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012be4:	2f19      	cmp	r7, #25
 8012be6:	d801      	bhi.n	8012bec <_strtoul_l.isra.0+0xa2>
 8012be8:	3c37      	subs	r4, #55	; 0x37
 8012bea:	e7e2      	b.n	8012bb2 <_strtoul_l.isra.0+0x68>
 8012bec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012bf0:	2f19      	cmp	r7, #25
 8012bf2:	d804      	bhi.n	8012bfe <_strtoul_l.isra.0+0xb4>
 8012bf4:	3c57      	subs	r4, #87	; 0x57
 8012bf6:	e7dc      	b.n	8012bb2 <_strtoul_l.isra.0+0x68>
 8012bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bfc:	e7e5      	b.n	8012bca <_strtoul_l.isra.0+0x80>
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	da09      	bge.n	8012c16 <_strtoul_l.isra.0+0xcc>
 8012c02:	2322      	movs	r3, #34	; 0x22
 8012c04:	f8c8 3000 	str.w	r3, [r8]
 8012c08:	f04f 30ff 	mov.w	r0, #4294967295
 8012c0c:	f1ba 0f00 	cmp.w	sl, #0
 8012c10:	d107      	bne.n	8012c22 <_strtoul_l.isra.0+0xd8>
 8012c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c16:	b101      	cbz	r1, 8012c1a <_strtoul_l.isra.0+0xd0>
 8012c18:	4240      	negs	r0, r0
 8012c1a:	f1ba 0f00 	cmp.w	sl, #0
 8012c1e:	d0f8      	beq.n	8012c12 <_strtoul_l.isra.0+0xc8>
 8012c20:	b10b      	cbz	r3, 8012c26 <_strtoul_l.isra.0+0xdc>
 8012c22:	f105 39ff 	add.w	r9, r5, #4294967295
 8012c26:	f8ca 9000 	str.w	r9, [sl]
 8012c2a:	e7f2      	b.n	8012c12 <_strtoul_l.isra.0+0xc8>
 8012c2c:	2430      	movs	r4, #48	; 0x30
 8012c2e:	2e00      	cmp	r6, #0
 8012c30:	d1b0      	bne.n	8012b94 <_strtoul_l.isra.0+0x4a>
 8012c32:	2608      	movs	r6, #8
 8012c34:	e7ae      	b.n	8012b94 <_strtoul_l.isra.0+0x4a>
 8012c36:	2c30      	cmp	r4, #48	; 0x30
 8012c38:	d0a4      	beq.n	8012b84 <_strtoul_l.isra.0+0x3a>
 8012c3a:	260a      	movs	r6, #10
 8012c3c:	e7aa      	b.n	8012b94 <_strtoul_l.isra.0+0x4a>
	...

08012c40 <strtoul>:
 8012c40:	4b08      	ldr	r3, [pc, #32]	; (8012c64 <strtoul+0x24>)
 8012c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c44:	681c      	ldr	r4, [r3, #0]
 8012c46:	4d08      	ldr	r5, [pc, #32]	; (8012c68 <strtoul+0x28>)
 8012c48:	6a23      	ldr	r3, [r4, #32]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	bf08      	it	eq
 8012c4e:	462b      	moveq	r3, r5
 8012c50:	9300      	str	r3, [sp, #0]
 8012c52:	4613      	mov	r3, r2
 8012c54:	460a      	mov	r2, r1
 8012c56:	4601      	mov	r1, r0
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7ff ff76 	bl	8012b4a <_strtoul_l.isra.0>
 8012c5e:	b003      	add	sp, #12
 8012c60:	bd30      	pop	{r4, r5, pc}
 8012c62:	bf00      	nop
 8012c64:	20000064 	.word	0x20000064
 8012c68:	200000c8 	.word	0x200000c8

08012c6c <_vsniprintf_r>:
 8012c6c:	b530      	push	{r4, r5, lr}
 8012c6e:	1e14      	subs	r4, r2, #0
 8012c70:	4605      	mov	r5, r0
 8012c72:	b09b      	sub	sp, #108	; 0x6c
 8012c74:	4618      	mov	r0, r3
 8012c76:	da05      	bge.n	8012c84 <_vsniprintf_r+0x18>
 8012c78:	238b      	movs	r3, #139	; 0x8b
 8012c7a:	602b      	str	r3, [r5, #0]
 8012c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c80:	b01b      	add	sp, #108	; 0x6c
 8012c82:	bd30      	pop	{r4, r5, pc}
 8012c84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012c8c:	bf14      	ite	ne
 8012c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c92:	4623      	moveq	r3, r4
 8012c94:	9302      	str	r3, [sp, #8]
 8012c96:	9305      	str	r3, [sp, #20]
 8012c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c9c:	9100      	str	r1, [sp, #0]
 8012c9e:	9104      	str	r1, [sp, #16]
 8012ca0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012ca8:	4669      	mov	r1, sp
 8012caa:	4628      	mov	r0, r5
 8012cac:	f000 ffbe 	bl	8013c2c <_svfiprintf_r>
 8012cb0:	1c43      	adds	r3, r0, #1
 8012cb2:	bfbc      	itt	lt
 8012cb4:	238b      	movlt	r3, #139	; 0x8b
 8012cb6:	602b      	strlt	r3, [r5, #0]
 8012cb8:	2c00      	cmp	r4, #0
 8012cba:	d0e1      	beq.n	8012c80 <_vsniprintf_r+0x14>
 8012cbc:	9b00      	ldr	r3, [sp, #0]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	701a      	strb	r2, [r3, #0]
 8012cc2:	e7dd      	b.n	8012c80 <_vsniprintf_r+0x14>

08012cc4 <vsniprintf>:
 8012cc4:	b507      	push	{r0, r1, r2, lr}
 8012cc6:	9300      	str	r3, [sp, #0]
 8012cc8:	4613      	mov	r3, r2
 8012cca:	460a      	mov	r2, r1
 8012ccc:	4601      	mov	r1, r0
 8012cce:	4803      	ldr	r0, [pc, #12]	; (8012cdc <vsniprintf+0x18>)
 8012cd0:	6800      	ldr	r0, [r0, #0]
 8012cd2:	f7ff ffcb 	bl	8012c6c <_vsniprintf_r>
 8012cd6:	b003      	add	sp, #12
 8012cd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012cdc:	20000064 	.word	0x20000064

08012ce0 <rshift>:
 8012ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce2:	6906      	ldr	r6, [r0, #16]
 8012ce4:	114b      	asrs	r3, r1, #5
 8012ce6:	429e      	cmp	r6, r3
 8012ce8:	f100 0414 	add.w	r4, r0, #20
 8012cec:	dd30      	ble.n	8012d50 <rshift+0x70>
 8012cee:	f011 011f 	ands.w	r1, r1, #31
 8012cf2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012cf6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012cfa:	d108      	bne.n	8012d0e <rshift+0x2e>
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	42b2      	cmp	r2, r6
 8012d00:	460b      	mov	r3, r1
 8012d02:	d211      	bcs.n	8012d28 <rshift+0x48>
 8012d04:	f852 3b04 	ldr.w	r3, [r2], #4
 8012d08:	f841 3b04 	str.w	r3, [r1], #4
 8012d0c:	e7f7      	b.n	8012cfe <rshift+0x1e>
 8012d0e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012d12:	f1c1 0c20 	rsb	ip, r1, #32
 8012d16:	40cd      	lsrs	r5, r1
 8012d18:	3204      	adds	r2, #4
 8012d1a:	4623      	mov	r3, r4
 8012d1c:	42b2      	cmp	r2, r6
 8012d1e:	4617      	mov	r7, r2
 8012d20:	d30c      	bcc.n	8012d3c <rshift+0x5c>
 8012d22:	601d      	str	r5, [r3, #0]
 8012d24:	b105      	cbz	r5, 8012d28 <rshift+0x48>
 8012d26:	3304      	adds	r3, #4
 8012d28:	1b1a      	subs	r2, r3, r4
 8012d2a:	42a3      	cmp	r3, r4
 8012d2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d30:	bf08      	it	eq
 8012d32:	2300      	moveq	r3, #0
 8012d34:	6102      	str	r2, [r0, #16]
 8012d36:	bf08      	it	eq
 8012d38:	6143      	streq	r3, [r0, #20]
 8012d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d3c:	683f      	ldr	r7, [r7, #0]
 8012d3e:	fa07 f70c 	lsl.w	r7, r7, ip
 8012d42:	433d      	orrs	r5, r7
 8012d44:	f843 5b04 	str.w	r5, [r3], #4
 8012d48:	f852 5b04 	ldr.w	r5, [r2], #4
 8012d4c:	40cd      	lsrs	r5, r1
 8012d4e:	e7e5      	b.n	8012d1c <rshift+0x3c>
 8012d50:	4623      	mov	r3, r4
 8012d52:	e7e9      	b.n	8012d28 <rshift+0x48>

08012d54 <__hexdig_fun>:
 8012d54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012d58:	2b09      	cmp	r3, #9
 8012d5a:	d802      	bhi.n	8012d62 <__hexdig_fun+0xe>
 8012d5c:	3820      	subs	r0, #32
 8012d5e:	b2c0      	uxtb	r0, r0
 8012d60:	4770      	bx	lr
 8012d62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012d66:	2b05      	cmp	r3, #5
 8012d68:	d801      	bhi.n	8012d6e <__hexdig_fun+0x1a>
 8012d6a:	3847      	subs	r0, #71	; 0x47
 8012d6c:	e7f7      	b.n	8012d5e <__hexdig_fun+0xa>
 8012d6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012d72:	2b05      	cmp	r3, #5
 8012d74:	d801      	bhi.n	8012d7a <__hexdig_fun+0x26>
 8012d76:	3827      	subs	r0, #39	; 0x27
 8012d78:	e7f1      	b.n	8012d5e <__hexdig_fun+0xa>
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	4770      	bx	lr

08012d7e <__gethex>:
 8012d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d82:	b08b      	sub	sp, #44	; 0x2c
 8012d84:	468a      	mov	sl, r1
 8012d86:	9002      	str	r0, [sp, #8]
 8012d88:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012d8a:	9306      	str	r3, [sp, #24]
 8012d8c:	4690      	mov	r8, r2
 8012d8e:	f000 fad0 	bl	8013332 <__localeconv_l>
 8012d92:	6803      	ldr	r3, [r0, #0]
 8012d94:	9303      	str	r3, [sp, #12]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ed fa2c 	bl	80001f4 <strlen>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	9001      	str	r0, [sp, #4]
 8012da0:	4403      	add	r3, r0
 8012da2:	f04f 0b00 	mov.w	fp, #0
 8012da6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012daa:	9307      	str	r3, [sp, #28]
 8012dac:	f8da 3000 	ldr.w	r3, [sl]
 8012db0:	3302      	adds	r3, #2
 8012db2:	461f      	mov	r7, r3
 8012db4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012db8:	2830      	cmp	r0, #48	; 0x30
 8012dba:	d06c      	beq.n	8012e96 <__gethex+0x118>
 8012dbc:	f7ff ffca 	bl	8012d54 <__hexdig_fun>
 8012dc0:	4604      	mov	r4, r0
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	d16a      	bne.n	8012e9c <__gethex+0x11e>
 8012dc6:	9a01      	ldr	r2, [sp, #4]
 8012dc8:	9903      	ldr	r1, [sp, #12]
 8012dca:	4638      	mov	r0, r7
 8012dcc:	f001 f9b4 	bl	8014138 <strncmp>
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d166      	bne.n	8012ea2 <__gethex+0x124>
 8012dd4:	9b01      	ldr	r3, [sp, #4]
 8012dd6:	5cf8      	ldrb	r0, [r7, r3]
 8012dd8:	18fe      	adds	r6, r7, r3
 8012dda:	f7ff ffbb 	bl	8012d54 <__hexdig_fun>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d062      	beq.n	8012ea8 <__gethex+0x12a>
 8012de2:	4633      	mov	r3, r6
 8012de4:	7818      	ldrb	r0, [r3, #0]
 8012de6:	2830      	cmp	r0, #48	; 0x30
 8012de8:	461f      	mov	r7, r3
 8012dea:	f103 0301 	add.w	r3, r3, #1
 8012dee:	d0f9      	beq.n	8012de4 <__gethex+0x66>
 8012df0:	f7ff ffb0 	bl	8012d54 <__hexdig_fun>
 8012df4:	fab0 f580 	clz	r5, r0
 8012df8:	096d      	lsrs	r5, r5, #5
 8012dfa:	4634      	mov	r4, r6
 8012dfc:	f04f 0b01 	mov.w	fp, #1
 8012e00:	463a      	mov	r2, r7
 8012e02:	4616      	mov	r6, r2
 8012e04:	3201      	adds	r2, #1
 8012e06:	7830      	ldrb	r0, [r6, #0]
 8012e08:	f7ff ffa4 	bl	8012d54 <__hexdig_fun>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d1f8      	bne.n	8012e02 <__gethex+0x84>
 8012e10:	9a01      	ldr	r2, [sp, #4]
 8012e12:	9903      	ldr	r1, [sp, #12]
 8012e14:	4630      	mov	r0, r6
 8012e16:	f001 f98f 	bl	8014138 <strncmp>
 8012e1a:	b950      	cbnz	r0, 8012e32 <__gethex+0xb4>
 8012e1c:	b954      	cbnz	r4, 8012e34 <__gethex+0xb6>
 8012e1e:	9b01      	ldr	r3, [sp, #4]
 8012e20:	18f4      	adds	r4, r6, r3
 8012e22:	4622      	mov	r2, r4
 8012e24:	4616      	mov	r6, r2
 8012e26:	3201      	adds	r2, #1
 8012e28:	7830      	ldrb	r0, [r6, #0]
 8012e2a:	f7ff ff93 	bl	8012d54 <__hexdig_fun>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d1f8      	bne.n	8012e24 <__gethex+0xa6>
 8012e32:	b10c      	cbz	r4, 8012e38 <__gethex+0xba>
 8012e34:	1ba4      	subs	r4, r4, r6
 8012e36:	00a4      	lsls	r4, r4, #2
 8012e38:	7833      	ldrb	r3, [r6, #0]
 8012e3a:	2b50      	cmp	r3, #80	; 0x50
 8012e3c:	d001      	beq.n	8012e42 <__gethex+0xc4>
 8012e3e:	2b70      	cmp	r3, #112	; 0x70
 8012e40:	d140      	bne.n	8012ec4 <__gethex+0x146>
 8012e42:	7873      	ldrb	r3, [r6, #1]
 8012e44:	2b2b      	cmp	r3, #43	; 0x2b
 8012e46:	d031      	beq.n	8012eac <__gethex+0x12e>
 8012e48:	2b2d      	cmp	r3, #45	; 0x2d
 8012e4a:	d033      	beq.n	8012eb4 <__gethex+0x136>
 8012e4c:	1c71      	adds	r1, r6, #1
 8012e4e:	f04f 0900 	mov.w	r9, #0
 8012e52:	7808      	ldrb	r0, [r1, #0]
 8012e54:	f7ff ff7e 	bl	8012d54 <__hexdig_fun>
 8012e58:	1e43      	subs	r3, r0, #1
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	2b18      	cmp	r3, #24
 8012e5e:	d831      	bhi.n	8012ec4 <__gethex+0x146>
 8012e60:	f1a0 0210 	sub.w	r2, r0, #16
 8012e64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012e68:	f7ff ff74 	bl	8012d54 <__hexdig_fun>
 8012e6c:	1e43      	subs	r3, r0, #1
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	2b18      	cmp	r3, #24
 8012e72:	d922      	bls.n	8012eba <__gethex+0x13c>
 8012e74:	f1b9 0f00 	cmp.w	r9, #0
 8012e78:	d000      	beq.n	8012e7c <__gethex+0xfe>
 8012e7a:	4252      	negs	r2, r2
 8012e7c:	4414      	add	r4, r2
 8012e7e:	f8ca 1000 	str.w	r1, [sl]
 8012e82:	b30d      	cbz	r5, 8012ec8 <__gethex+0x14a>
 8012e84:	f1bb 0f00 	cmp.w	fp, #0
 8012e88:	bf0c      	ite	eq
 8012e8a:	2706      	moveq	r7, #6
 8012e8c:	2700      	movne	r7, #0
 8012e8e:	4638      	mov	r0, r7
 8012e90:	b00b      	add	sp, #44	; 0x2c
 8012e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e96:	f10b 0b01 	add.w	fp, fp, #1
 8012e9a:	e78a      	b.n	8012db2 <__gethex+0x34>
 8012e9c:	2500      	movs	r5, #0
 8012e9e:	462c      	mov	r4, r5
 8012ea0:	e7ae      	b.n	8012e00 <__gethex+0x82>
 8012ea2:	463e      	mov	r6, r7
 8012ea4:	2501      	movs	r5, #1
 8012ea6:	e7c7      	b.n	8012e38 <__gethex+0xba>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	e7fb      	b.n	8012ea4 <__gethex+0x126>
 8012eac:	f04f 0900 	mov.w	r9, #0
 8012eb0:	1cb1      	adds	r1, r6, #2
 8012eb2:	e7ce      	b.n	8012e52 <__gethex+0xd4>
 8012eb4:	f04f 0901 	mov.w	r9, #1
 8012eb8:	e7fa      	b.n	8012eb0 <__gethex+0x132>
 8012eba:	230a      	movs	r3, #10
 8012ebc:	fb03 0202 	mla	r2, r3, r2, r0
 8012ec0:	3a10      	subs	r2, #16
 8012ec2:	e7cf      	b.n	8012e64 <__gethex+0xe6>
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	e7da      	b.n	8012e7e <__gethex+0x100>
 8012ec8:	1bf3      	subs	r3, r6, r7
 8012eca:	3b01      	subs	r3, #1
 8012ecc:	4629      	mov	r1, r5
 8012ece:	2b07      	cmp	r3, #7
 8012ed0:	dc49      	bgt.n	8012f66 <__gethex+0x1e8>
 8012ed2:	9802      	ldr	r0, [sp, #8]
 8012ed4:	f000 fa43 	bl	801335e <_Balloc>
 8012ed8:	9b01      	ldr	r3, [sp, #4]
 8012eda:	f100 0914 	add.w	r9, r0, #20
 8012ede:	f04f 0b00 	mov.w	fp, #0
 8012ee2:	f1c3 0301 	rsb	r3, r3, #1
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	f8cd 9010 	str.w	r9, [sp, #16]
 8012eec:	46da      	mov	sl, fp
 8012eee:	9308      	str	r3, [sp, #32]
 8012ef0:	42b7      	cmp	r7, r6
 8012ef2:	d33b      	bcc.n	8012f6c <__gethex+0x1ee>
 8012ef4:	9804      	ldr	r0, [sp, #16]
 8012ef6:	f840 ab04 	str.w	sl, [r0], #4
 8012efa:	eba0 0009 	sub.w	r0, r0, r9
 8012efe:	1080      	asrs	r0, r0, #2
 8012f00:	6128      	str	r0, [r5, #16]
 8012f02:	0147      	lsls	r7, r0, #5
 8012f04:	4650      	mov	r0, sl
 8012f06:	f000 faee 	bl	80134e6 <__hi0bits>
 8012f0a:	f8d8 6000 	ldr.w	r6, [r8]
 8012f0e:	1a3f      	subs	r7, r7, r0
 8012f10:	42b7      	cmp	r7, r6
 8012f12:	dd64      	ble.n	8012fde <__gethex+0x260>
 8012f14:	1bbf      	subs	r7, r7, r6
 8012f16:	4639      	mov	r1, r7
 8012f18:	4628      	mov	r0, r5
 8012f1a:	f000 fdfd 	bl	8013b18 <__any_on>
 8012f1e:	4682      	mov	sl, r0
 8012f20:	b178      	cbz	r0, 8012f42 <__gethex+0x1c4>
 8012f22:	1e7b      	subs	r3, r7, #1
 8012f24:	1159      	asrs	r1, r3, #5
 8012f26:	f003 021f 	and.w	r2, r3, #31
 8012f2a:	f04f 0a01 	mov.w	sl, #1
 8012f2e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012f32:	fa0a f202 	lsl.w	r2, sl, r2
 8012f36:	420a      	tst	r2, r1
 8012f38:	d003      	beq.n	8012f42 <__gethex+0x1c4>
 8012f3a:	4553      	cmp	r3, sl
 8012f3c:	dc46      	bgt.n	8012fcc <__gethex+0x24e>
 8012f3e:	f04f 0a02 	mov.w	sl, #2
 8012f42:	4639      	mov	r1, r7
 8012f44:	4628      	mov	r0, r5
 8012f46:	f7ff fecb 	bl	8012ce0 <rshift>
 8012f4a:	443c      	add	r4, r7
 8012f4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f50:	42a3      	cmp	r3, r4
 8012f52:	da52      	bge.n	8012ffa <__gethex+0x27c>
 8012f54:	4629      	mov	r1, r5
 8012f56:	9802      	ldr	r0, [sp, #8]
 8012f58:	f000 fa35 	bl	80133c6 <_Bfree>
 8012f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f5e:	2300      	movs	r3, #0
 8012f60:	6013      	str	r3, [r2, #0]
 8012f62:	27a3      	movs	r7, #163	; 0xa3
 8012f64:	e793      	b.n	8012e8e <__gethex+0x110>
 8012f66:	3101      	adds	r1, #1
 8012f68:	105b      	asrs	r3, r3, #1
 8012f6a:	e7b0      	b.n	8012ece <__gethex+0x150>
 8012f6c:	1e73      	subs	r3, r6, #1
 8012f6e:	9305      	str	r3, [sp, #20]
 8012f70:	9a07      	ldr	r2, [sp, #28]
 8012f72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d018      	beq.n	8012fac <__gethex+0x22e>
 8012f7a:	f1bb 0f20 	cmp.w	fp, #32
 8012f7e:	d107      	bne.n	8012f90 <__gethex+0x212>
 8012f80:	9b04      	ldr	r3, [sp, #16]
 8012f82:	f8c3 a000 	str.w	sl, [r3]
 8012f86:	3304      	adds	r3, #4
 8012f88:	f04f 0a00 	mov.w	sl, #0
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	46d3      	mov	fp, sl
 8012f90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012f94:	f7ff fede 	bl	8012d54 <__hexdig_fun>
 8012f98:	f000 000f 	and.w	r0, r0, #15
 8012f9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8012fa0:	ea4a 0a00 	orr.w	sl, sl, r0
 8012fa4:	f10b 0b04 	add.w	fp, fp, #4
 8012fa8:	9b05      	ldr	r3, [sp, #20]
 8012faa:	e00d      	b.n	8012fc8 <__gethex+0x24a>
 8012fac:	9b05      	ldr	r3, [sp, #20]
 8012fae:	9a08      	ldr	r2, [sp, #32]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	42bb      	cmp	r3, r7
 8012fb4:	d3e1      	bcc.n	8012f7a <__gethex+0x1fc>
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	9a01      	ldr	r2, [sp, #4]
 8012fba:	9903      	ldr	r1, [sp, #12]
 8012fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8012fbe:	f001 f8bb 	bl	8014138 <strncmp>
 8012fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d1d8      	bne.n	8012f7a <__gethex+0x1fc>
 8012fc8:	461e      	mov	r6, r3
 8012fca:	e791      	b.n	8012ef0 <__gethex+0x172>
 8012fcc:	1eb9      	subs	r1, r7, #2
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f000 fda2 	bl	8013b18 <__any_on>
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d0b2      	beq.n	8012f3e <__gethex+0x1c0>
 8012fd8:	f04f 0a03 	mov.w	sl, #3
 8012fdc:	e7b1      	b.n	8012f42 <__gethex+0x1c4>
 8012fde:	da09      	bge.n	8012ff4 <__gethex+0x276>
 8012fe0:	1bf7      	subs	r7, r6, r7
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	463a      	mov	r2, r7
 8012fe6:	9802      	ldr	r0, [sp, #8]
 8012fe8:	f000 fbb8 	bl	801375c <__lshift>
 8012fec:	1be4      	subs	r4, r4, r7
 8012fee:	4605      	mov	r5, r0
 8012ff0:	f100 0914 	add.w	r9, r0, #20
 8012ff4:	f04f 0a00 	mov.w	sl, #0
 8012ff8:	e7a8      	b.n	8012f4c <__gethex+0x1ce>
 8012ffa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012ffe:	42a0      	cmp	r0, r4
 8013000:	dd6a      	ble.n	80130d8 <__gethex+0x35a>
 8013002:	1b04      	subs	r4, r0, r4
 8013004:	42a6      	cmp	r6, r4
 8013006:	dc2e      	bgt.n	8013066 <__gethex+0x2e8>
 8013008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801300c:	2b02      	cmp	r3, #2
 801300e:	d022      	beq.n	8013056 <__gethex+0x2d8>
 8013010:	2b03      	cmp	r3, #3
 8013012:	d024      	beq.n	801305e <__gethex+0x2e0>
 8013014:	2b01      	cmp	r3, #1
 8013016:	d115      	bne.n	8013044 <__gethex+0x2c6>
 8013018:	42a6      	cmp	r6, r4
 801301a:	d113      	bne.n	8013044 <__gethex+0x2c6>
 801301c:	2e01      	cmp	r6, #1
 801301e:	dc0b      	bgt.n	8013038 <__gethex+0x2ba>
 8013020:	9a06      	ldr	r2, [sp, #24]
 8013022:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	2301      	movs	r3, #1
 801302a:	612b      	str	r3, [r5, #16]
 801302c:	f8c9 3000 	str.w	r3, [r9]
 8013030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013032:	2762      	movs	r7, #98	; 0x62
 8013034:	601d      	str	r5, [r3, #0]
 8013036:	e72a      	b.n	8012e8e <__gethex+0x110>
 8013038:	1e71      	subs	r1, r6, #1
 801303a:	4628      	mov	r0, r5
 801303c:	f000 fd6c 	bl	8013b18 <__any_on>
 8013040:	2800      	cmp	r0, #0
 8013042:	d1ed      	bne.n	8013020 <__gethex+0x2a2>
 8013044:	4629      	mov	r1, r5
 8013046:	9802      	ldr	r0, [sp, #8]
 8013048:	f000 f9bd 	bl	80133c6 <_Bfree>
 801304c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801304e:	2300      	movs	r3, #0
 8013050:	6013      	str	r3, [r2, #0]
 8013052:	2750      	movs	r7, #80	; 0x50
 8013054:	e71b      	b.n	8012e8e <__gethex+0x110>
 8013056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0e1      	beq.n	8013020 <__gethex+0x2a2>
 801305c:	e7f2      	b.n	8013044 <__gethex+0x2c6>
 801305e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013060:	2b00      	cmp	r3, #0
 8013062:	d1dd      	bne.n	8013020 <__gethex+0x2a2>
 8013064:	e7ee      	b.n	8013044 <__gethex+0x2c6>
 8013066:	1e67      	subs	r7, r4, #1
 8013068:	f1ba 0f00 	cmp.w	sl, #0
 801306c:	d131      	bne.n	80130d2 <__gethex+0x354>
 801306e:	b127      	cbz	r7, 801307a <__gethex+0x2fc>
 8013070:	4639      	mov	r1, r7
 8013072:	4628      	mov	r0, r5
 8013074:	f000 fd50 	bl	8013b18 <__any_on>
 8013078:	4682      	mov	sl, r0
 801307a:	117a      	asrs	r2, r7, #5
 801307c:	2301      	movs	r3, #1
 801307e:	f007 071f 	and.w	r7, r7, #31
 8013082:	fa03 f707 	lsl.w	r7, r3, r7
 8013086:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801308a:	4621      	mov	r1, r4
 801308c:	421f      	tst	r7, r3
 801308e:	4628      	mov	r0, r5
 8013090:	bf18      	it	ne
 8013092:	f04a 0a02 	orrne.w	sl, sl, #2
 8013096:	1b36      	subs	r6, r6, r4
 8013098:	f7ff fe22 	bl	8012ce0 <rshift>
 801309c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80130a0:	2702      	movs	r7, #2
 80130a2:	f1ba 0f00 	cmp.w	sl, #0
 80130a6:	d048      	beq.n	801313a <__gethex+0x3bc>
 80130a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80130ac:	2b02      	cmp	r3, #2
 80130ae:	d015      	beq.n	80130dc <__gethex+0x35e>
 80130b0:	2b03      	cmp	r3, #3
 80130b2:	d017      	beq.n	80130e4 <__gethex+0x366>
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d109      	bne.n	80130cc <__gethex+0x34e>
 80130b8:	f01a 0f02 	tst.w	sl, #2
 80130bc:	d006      	beq.n	80130cc <__gethex+0x34e>
 80130be:	f8d9 3000 	ldr.w	r3, [r9]
 80130c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80130c6:	f01a 0f01 	tst.w	sl, #1
 80130ca:	d10e      	bne.n	80130ea <__gethex+0x36c>
 80130cc:	f047 0710 	orr.w	r7, r7, #16
 80130d0:	e033      	b.n	801313a <__gethex+0x3bc>
 80130d2:	f04f 0a01 	mov.w	sl, #1
 80130d6:	e7d0      	b.n	801307a <__gethex+0x2fc>
 80130d8:	2701      	movs	r7, #1
 80130da:	e7e2      	b.n	80130a2 <__gethex+0x324>
 80130dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130de:	f1c3 0301 	rsb	r3, r3, #1
 80130e2:	9315      	str	r3, [sp, #84]	; 0x54
 80130e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d0f0      	beq.n	80130cc <__gethex+0x34e>
 80130ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80130ee:	f105 0314 	add.w	r3, r5, #20
 80130f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80130f6:	eb03 010a 	add.w	r1, r3, sl
 80130fa:	f04f 0c00 	mov.w	ip, #0
 80130fe:	4618      	mov	r0, r3
 8013100:	f853 2b04 	ldr.w	r2, [r3], #4
 8013104:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013108:	d01c      	beq.n	8013144 <__gethex+0x3c6>
 801310a:	3201      	adds	r2, #1
 801310c:	6002      	str	r2, [r0, #0]
 801310e:	2f02      	cmp	r7, #2
 8013110:	f105 0314 	add.w	r3, r5, #20
 8013114:	d138      	bne.n	8013188 <__gethex+0x40a>
 8013116:	f8d8 2000 	ldr.w	r2, [r8]
 801311a:	3a01      	subs	r2, #1
 801311c:	42b2      	cmp	r2, r6
 801311e:	d10a      	bne.n	8013136 <__gethex+0x3b8>
 8013120:	1171      	asrs	r1, r6, #5
 8013122:	2201      	movs	r2, #1
 8013124:	f006 061f 	and.w	r6, r6, #31
 8013128:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801312c:	fa02 f606 	lsl.w	r6, r2, r6
 8013130:	421e      	tst	r6, r3
 8013132:	bf18      	it	ne
 8013134:	4617      	movne	r7, r2
 8013136:	f047 0720 	orr.w	r7, r7, #32
 801313a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801313c:	601d      	str	r5, [r3, #0]
 801313e:	9b06      	ldr	r3, [sp, #24]
 8013140:	601c      	str	r4, [r3, #0]
 8013142:	e6a4      	b.n	8012e8e <__gethex+0x110>
 8013144:	4299      	cmp	r1, r3
 8013146:	f843 cc04 	str.w	ip, [r3, #-4]
 801314a:	d8d8      	bhi.n	80130fe <__gethex+0x380>
 801314c:	68ab      	ldr	r3, [r5, #8]
 801314e:	4599      	cmp	r9, r3
 8013150:	db12      	blt.n	8013178 <__gethex+0x3fa>
 8013152:	6869      	ldr	r1, [r5, #4]
 8013154:	9802      	ldr	r0, [sp, #8]
 8013156:	3101      	adds	r1, #1
 8013158:	f000 f901 	bl	801335e <_Balloc>
 801315c:	692a      	ldr	r2, [r5, #16]
 801315e:	3202      	adds	r2, #2
 8013160:	f105 010c 	add.w	r1, r5, #12
 8013164:	4683      	mov	fp, r0
 8013166:	0092      	lsls	r2, r2, #2
 8013168:	300c      	adds	r0, #12
 801316a:	f7fe fd87 	bl	8011c7c <memcpy>
 801316e:	4629      	mov	r1, r5
 8013170:	9802      	ldr	r0, [sp, #8]
 8013172:	f000 f928 	bl	80133c6 <_Bfree>
 8013176:	465d      	mov	r5, fp
 8013178:	692b      	ldr	r3, [r5, #16]
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013180:	612a      	str	r2, [r5, #16]
 8013182:	2201      	movs	r2, #1
 8013184:	615a      	str	r2, [r3, #20]
 8013186:	e7c2      	b.n	801310e <__gethex+0x390>
 8013188:	692a      	ldr	r2, [r5, #16]
 801318a:	454a      	cmp	r2, r9
 801318c:	dd0b      	ble.n	80131a6 <__gethex+0x428>
 801318e:	2101      	movs	r1, #1
 8013190:	4628      	mov	r0, r5
 8013192:	f7ff fda5 	bl	8012ce0 <rshift>
 8013196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801319a:	3401      	adds	r4, #1
 801319c:	42a3      	cmp	r3, r4
 801319e:	f6ff aed9 	blt.w	8012f54 <__gethex+0x1d6>
 80131a2:	2701      	movs	r7, #1
 80131a4:	e7c7      	b.n	8013136 <__gethex+0x3b8>
 80131a6:	f016 061f 	ands.w	r6, r6, #31
 80131aa:	d0fa      	beq.n	80131a2 <__gethex+0x424>
 80131ac:	449a      	add	sl, r3
 80131ae:	f1c6 0620 	rsb	r6, r6, #32
 80131b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80131b6:	f000 f996 	bl	80134e6 <__hi0bits>
 80131ba:	42b0      	cmp	r0, r6
 80131bc:	dbe7      	blt.n	801318e <__gethex+0x410>
 80131be:	e7f0      	b.n	80131a2 <__gethex+0x424>

080131c0 <L_shift>:
 80131c0:	f1c2 0208 	rsb	r2, r2, #8
 80131c4:	0092      	lsls	r2, r2, #2
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	f1c2 0620 	rsb	r6, r2, #32
 80131cc:	6843      	ldr	r3, [r0, #4]
 80131ce:	6804      	ldr	r4, [r0, #0]
 80131d0:	fa03 f506 	lsl.w	r5, r3, r6
 80131d4:	432c      	orrs	r4, r5
 80131d6:	40d3      	lsrs	r3, r2
 80131d8:	6004      	str	r4, [r0, #0]
 80131da:	f840 3f04 	str.w	r3, [r0, #4]!
 80131de:	4288      	cmp	r0, r1
 80131e0:	d3f4      	bcc.n	80131cc <L_shift+0xc>
 80131e2:	bd70      	pop	{r4, r5, r6, pc}

080131e4 <__match>:
 80131e4:	b530      	push	{r4, r5, lr}
 80131e6:	6803      	ldr	r3, [r0, #0]
 80131e8:	3301      	adds	r3, #1
 80131ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131ee:	b914      	cbnz	r4, 80131f6 <__match+0x12>
 80131f0:	6003      	str	r3, [r0, #0]
 80131f2:	2001      	movs	r0, #1
 80131f4:	bd30      	pop	{r4, r5, pc}
 80131f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80131fe:	2d19      	cmp	r5, #25
 8013200:	bf98      	it	ls
 8013202:	3220      	addls	r2, #32
 8013204:	42a2      	cmp	r2, r4
 8013206:	d0f0      	beq.n	80131ea <__match+0x6>
 8013208:	2000      	movs	r0, #0
 801320a:	e7f3      	b.n	80131f4 <__match+0x10>

0801320c <__hexnan>:
 801320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013210:	680b      	ldr	r3, [r1, #0]
 8013212:	6801      	ldr	r1, [r0, #0]
 8013214:	115f      	asrs	r7, r3, #5
 8013216:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801321a:	f013 031f 	ands.w	r3, r3, #31
 801321e:	b087      	sub	sp, #28
 8013220:	bf18      	it	ne
 8013222:	3704      	addne	r7, #4
 8013224:	2500      	movs	r5, #0
 8013226:	1f3e      	subs	r6, r7, #4
 8013228:	4682      	mov	sl, r0
 801322a:	4690      	mov	r8, r2
 801322c:	9301      	str	r3, [sp, #4]
 801322e:	f847 5c04 	str.w	r5, [r7, #-4]
 8013232:	46b1      	mov	r9, r6
 8013234:	4634      	mov	r4, r6
 8013236:	9502      	str	r5, [sp, #8]
 8013238:	46ab      	mov	fp, r5
 801323a:	784a      	ldrb	r2, [r1, #1]
 801323c:	1c4b      	adds	r3, r1, #1
 801323e:	9303      	str	r3, [sp, #12]
 8013240:	b342      	cbz	r2, 8013294 <__hexnan+0x88>
 8013242:	4610      	mov	r0, r2
 8013244:	9105      	str	r1, [sp, #20]
 8013246:	9204      	str	r2, [sp, #16]
 8013248:	f7ff fd84 	bl	8012d54 <__hexdig_fun>
 801324c:	2800      	cmp	r0, #0
 801324e:	d143      	bne.n	80132d8 <__hexnan+0xcc>
 8013250:	9a04      	ldr	r2, [sp, #16]
 8013252:	9905      	ldr	r1, [sp, #20]
 8013254:	2a20      	cmp	r2, #32
 8013256:	d818      	bhi.n	801328a <__hexnan+0x7e>
 8013258:	9b02      	ldr	r3, [sp, #8]
 801325a:	459b      	cmp	fp, r3
 801325c:	dd13      	ble.n	8013286 <__hexnan+0x7a>
 801325e:	454c      	cmp	r4, r9
 8013260:	d206      	bcs.n	8013270 <__hexnan+0x64>
 8013262:	2d07      	cmp	r5, #7
 8013264:	dc04      	bgt.n	8013270 <__hexnan+0x64>
 8013266:	462a      	mov	r2, r5
 8013268:	4649      	mov	r1, r9
 801326a:	4620      	mov	r0, r4
 801326c:	f7ff ffa8 	bl	80131c0 <L_shift>
 8013270:	4544      	cmp	r4, r8
 8013272:	d944      	bls.n	80132fe <__hexnan+0xf2>
 8013274:	2300      	movs	r3, #0
 8013276:	f1a4 0904 	sub.w	r9, r4, #4
 801327a:	f844 3c04 	str.w	r3, [r4, #-4]
 801327e:	f8cd b008 	str.w	fp, [sp, #8]
 8013282:	464c      	mov	r4, r9
 8013284:	461d      	mov	r5, r3
 8013286:	9903      	ldr	r1, [sp, #12]
 8013288:	e7d7      	b.n	801323a <__hexnan+0x2e>
 801328a:	2a29      	cmp	r2, #41	; 0x29
 801328c:	d14a      	bne.n	8013324 <__hexnan+0x118>
 801328e:	3102      	adds	r1, #2
 8013290:	f8ca 1000 	str.w	r1, [sl]
 8013294:	f1bb 0f00 	cmp.w	fp, #0
 8013298:	d044      	beq.n	8013324 <__hexnan+0x118>
 801329a:	454c      	cmp	r4, r9
 801329c:	d206      	bcs.n	80132ac <__hexnan+0xa0>
 801329e:	2d07      	cmp	r5, #7
 80132a0:	dc04      	bgt.n	80132ac <__hexnan+0xa0>
 80132a2:	462a      	mov	r2, r5
 80132a4:	4649      	mov	r1, r9
 80132a6:	4620      	mov	r0, r4
 80132a8:	f7ff ff8a 	bl	80131c0 <L_shift>
 80132ac:	4544      	cmp	r4, r8
 80132ae:	d928      	bls.n	8013302 <__hexnan+0xf6>
 80132b0:	4643      	mov	r3, r8
 80132b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80132b6:	f843 2b04 	str.w	r2, [r3], #4
 80132ba:	42a6      	cmp	r6, r4
 80132bc:	d2f9      	bcs.n	80132b2 <__hexnan+0xa6>
 80132be:	2200      	movs	r2, #0
 80132c0:	f843 2b04 	str.w	r2, [r3], #4
 80132c4:	429e      	cmp	r6, r3
 80132c6:	d2fb      	bcs.n	80132c0 <__hexnan+0xb4>
 80132c8:	6833      	ldr	r3, [r6, #0]
 80132ca:	b91b      	cbnz	r3, 80132d4 <__hexnan+0xc8>
 80132cc:	4546      	cmp	r6, r8
 80132ce:	d127      	bne.n	8013320 <__hexnan+0x114>
 80132d0:	2301      	movs	r3, #1
 80132d2:	6033      	str	r3, [r6, #0]
 80132d4:	2005      	movs	r0, #5
 80132d6:	e026      	b.n	8013326 <__hexnan+0x11a>
 80132d8:	3501      	adds	r5, #1
 80132da:	2d08      	cmp	r5, #8
 80132dc:	f10b 0b01 	add.w	fp, fp, #1
 80132e0:	dd06      	ble.n	80132f0 <__hexnan+0xe4>
 80132e2:	4544      	cmp	r4, r8
 80132e4:	d9cf      	bls.n	8013286 <__hexnan+0x7a>
 80132e6:	2300      	movs	r3, #0
 80132e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80132ec:	2501      	movs	r5, #1
 80132ee:	3c04      	subs	r4, #4
 80132f0:	6822      	ldr	r2, [r4, #0]
 80132f2:	f000 000f 	and.w	r0, r0, #15
 80132f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80132fa:	6020      	str	r0, [r4, #0]
 80132fc:	e7c3      	b.n	8013286 <__hexnan+0x7a>
 80132fe:	2508      	movs	r5, #8
 8013300:	e7c1      	b.n	8013286 <__hexnan+0x7a>
 8013302:	9b01      	ldr	r3, [sp, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d0df      	beq.n	80132c8 <__hexnan+0xbc>
 8013308:	f04f 32ff 	mov.w	r2, #4294967295
 801330c:	f1c3 0320 	rsb	r3, r3, #32
 8013310:	fa22 f303 	lsr.w	r3, r2, r3
 8013314:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013318:	401a      	ands	r2, r3
 801331a:	f847 2c04 	str.w	r2, [r7, #-4]
 801331e:	e7d3      	b.n	80132c8 <__hexnan+0xbc>
 8013320:	3e04      	subs	r6, #4
 8013322:	e7d1      	b.n	80132c8 <__hexnan+0xbc>
 8013324:	2004      	movs	r0, #4
 8013326:	b007      	add	sp, #28
 8013328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801332c <__locale_ctype_ptr_l>:
 801332c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013330:	4770      	bx	lr

08013332 <__localeconv_l>:
 8013332:	30f0      	adds	r0, #240	; 0xf0
 8013334:	4770      	bx	lr

08013336 <__ascii_mbtowc>:
 8013336:	b082      	sub	sp, #8
 8013338:	b901      	cbnz	r1, 801333c <__ascii_mbtowc+0x6>
 801333a:	a901      	add	r1, sp, #4
 801333c:	b142      	cbz	r2, 8013350 <__ascii_mbtowc+0x1a>
 801333e:	b14b      	cbz	r3, 8013354 <__ascii_mbtowc+0x1e>
 8013340:	7813      	ldrb	r3, [r2, #0]
 8013342:	600b      	str	r3, [r1, #0]
 8013344:	7812      	ldrb	r2, [r2, #0]
 8013346:	1c10      	adds	r0, r2, #0
 8013348:	bf18      	it	ne
 801334a:	2001      	movne	r0, #1
 801334c:	b002      	add	sp, #8
 801334e:	4770      	bx	lr
 8013350:	4610      	mov	r0, r2
 8013352:	e7fb      	b.n	801334c <__ascii_mbtowc+0x16>
 8013354:	f06f 0001 	mvn.w	r0, #1
 8013358:	e7f8      	b.n	801334c <__ascii_mbtowc+0x16>

0801335a <__malloc_lock>:
 801335a:	4770      	bx	lr

0801335c <__malloc_unlock>:
 801335c:	4770      	bx	lr

0801335e <_Balloc>:
 801335e:	b570      	push	{r4, r5, r6, lr}
 8013360:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013362:	4604      	mov	r4, r0
 8013364:	460e      	mov	r6, r1
 8013366:	b93d      	cbnz	r5, 8013378 <_Balloc+0x1a>
 8013368:	2010      	movs	r0, #16
 801336a:	f7fe fc77 	bl	8011c5c <malloc>
 801336e:	6260      	str	r0, [r4, #36]	; 0x24
 8013370:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013374:	6005      	str	r5, [r0, #0]
 8013376:	60c5      	str	r5, [r0, #12]
 8013378:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801337a:	68eb      	ldr	r3, [r5, #12]
 801337c:	b183      	cbz	r3, 80133a0 <_Balloc+0x42>
 801337e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013386:	b9b8      	cbnz	r0, 80133b8 <_Balloc+0x5a>
 8013388:	2101      	movs	r1, #1
 801338a:	fa01 f506 	lsl.w	r5, r1, r6
 801338e:	1d6a      	adds	r2, r5, #5
 8013390:	0092      	lsls	r2, r2, #2
 8013392:	4620      	mov	r0, r4
 8013394:	f000 fbe1 	bl	8013b5a <_calloc_r>
 8013398:	b160      	cbz	r0, 80133b4 <_Balloc+0x56>
 801339a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801339e:	e00e      	b.n	80133be <_Balloc+0x60>
 80133a0:	2221      	movs	r2, #33	; 0x21
 80133a2:	2104      	movs	r1, #4
 80133a4:	4620      	mov	r0, r4
 80133a6:	f000 fbd8 	bl	8013b5a <_calloc_r>
 80133aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133ac:	60e8      	str	r0, [r5, #12]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d1e4      	bne.n	801337e <_Balloc+0x20>
 80133b4:	2000      	movs	r0, #0
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	6802      	ldr	r2, [r0, #0]
 80133ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80133be:	2300      	movs	r3, #0
 80133c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133c4:	e7f7      	b.n	80133b6 <_Balloc+0x58>

080133c6 <_Bfree>:
 80133c6:	b570      	push	{r4, r5, r6, lr}
 80133c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80133ca:	4606      	mov	r6, r0
 80133cc:	460d      	mov	r5, r1
 80133ce:	b93c      	cbnz	r4, 80133e0 <_Bfree+0x1a>
 80133d0:	2010      	movs	r0, #16
 80133d2:	f7fe fc43 	bl	8011c5c <malloc>
 80133d6:	6270      	str	r0, [r6, #36]	; 0x24
 80133d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133dc:	6004      	str	r4, [r0, #0]
 80133de:	60c4      	str	r4, [r0, #12]
 80133e0:	b13d      	cbz	r5, 80133f2 <_Bfree+0x2c>
 80133e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133e4:	686a      	ldr	r2, [r5, #4]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133ec:	6029      	str	r1, [r5, #0]
 80133ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80133f2:	bd70      	pop	{r4, r5, r6, pc}

080133f4 <__multadd>:
 80133f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f8:	690d      	ldr	r5, [r1, #16]
 80133fa:	461f      	mov	r7, r3
 80133fc:	4606      	mov	r6, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	f101 0c14 	add.w	ip, r1, #20
 8013404:	2300      	movs	r3, #0
 8013406:	f8dc 0000 	ldr.w	r0, [ip]
 801340a:	b281      	uxth	r1, r0
 801340c:	fb02 7101 	mla	r1, r2, r1, r7
 8013410:	0c0f      	lsrs	r7, r1, #16
 8013412:	0c00      	lsrs	r0, r0, #16
 8013414:	fb02 7000 	mla	r0, r2, r0, r7
 8013418:	b289      	uxth	r1, r1
 801341a:	3301      	adds	r3, #1
 801341c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013420:	429d      	cmp	r5, r3
 8013422:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013426:	f84c 1b04 	str.w	r1, [ip], #4
 801342a:	dcec      	bgt.n	8013406 <__multadd+0x12>
 801342c:	b1d7      	cbz	r7, 8013464 <__multadd+0x70>
 801342e:	68a3      	ldr	r3, [r4, #8]
 8013430:	42ab      	cmp	r3, r5
 8013432:	dc12      	bgt.n	801345a <__multadd+0x66>
 8013434:	6861      	ldr	r1, [r4, #4]
 8013436:	4630      	mov	r0, r6
 8013438:	3101      	adds	r1, #1
 801343a:	f7ff ff90 	bl	801335e <_Balloc>
 801343e:	6922      	ldr	r2, [r4, #16]
 8013440:	3202      	adds	r2, #2
 8013442:	f104 010c 	add.w	r1, r4, #12
 8013446:	4680      	mov	r8, r0
 8013448:	0092      	lsls	r2, r2, #2
 801344a:	300c      	adds	r0, #12
 801344c:	f7fe fc16 	bl	8011c7c <memcpy>
 8013450:	4621      	mov	r1, r4
 8013452:	4630      	mov	r0, r6
 8013454:	f7ff ffb7 	bl	80133c6 <_Bfree>
 8013458:	4644      	mov	r4, r8
 801345a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801345e:	3501      	adds	r5, #1
 8013460:	615f      	str	r7, [r3, #20]
 8013462:	6125      	str	r5, [r4, #16]
 8013464:	4620      	mov	r0, r4
 8013466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801346a <__s2b>:
 801346a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801346e:	460c      	mov	r4, r1
 8013470:	4615      	mov	r5, r2
 8013472:	461f      	mov	r7, r3
 8013474:	2209      	movs	r2, #9
 8013476:	3308      	adds	r3, #8
 8013478:	4606      	mov	r6, r0
 801347a:	fb93 f3f2 	sdiv	r3, r3, r2
 801347e:	2100      	movs	r1, #0
 8013480:	2201      	movs	r2, #1
 8013482:	429a      	cmp	r2, r3
 8013484:	db20      	blt.n	80134c8 <__s2b+0x5e>
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ff69 	bl	801335e <_Balloc>
 801348c:	9b08      	ldr	r3, [sp, #32]
 801348e:	6143      	str	r3, [r0, #20]
 8013490:	2d09      	cmp	r5, #9
 8013492:	f04f 0301 	mov.w	r3, #1
 8013496:	6103      	str	r3, [r0, #16]
 8013498:	dd19      	ble.n	80134ce <__s2b+0x64>
 801349a:	f104 0809 	add.w	r8, r4, #9
 801349e:	46c1      	mov	r9, r8
 80134a0:	442c      	add	r4, r5
 80134a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80134a6:	4601      	mov	r1, r0
 80134a8:	3b30      	subs	r3, #48	; 0x30
 80134aa:	220a      	movs	r2, #10
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7ff ffa1 	bl	80133f4 <__multadd>
 80134b2:	45a1      	cmp	r9, r4
 80134b4:	d1f5      	bne.n	80134a2 <__s2b+0x38>
 80134b6:	eb08 0405 	add.w	r4, r8, r5
 80134ba:	3c08      	subs	r4, #8
 80134bc:	1b2d      	subs	r5, r5, r4
 80134be:	1963      	adds	r3, r4, r5
 80134c0:	42bb      	cmp	r3, r7
 80134c2:	db07      	blt.n	80134d4 <__s2b+0x6a>
 80134c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c8:	0052      	lsls	r2, r2, #1
 80134ca:	3101      	adds	r1, #1
 80134cc:	e7d9      	b.n	8013482 <__s2b+0x18>
 80134ce:	340a      	adds	r4, #10
 80134d0:	2509      	movs	r5, #9
 80134d2:	e7f3      	b.n	80134bc <__s2b+0x52>
 80134d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80134d8:	4601      	mov	r1, r0
 80134da:	3b30      	subs	r3, #48	; 0x30
 80134dc:	220a      	movs	r2, #10
 80134de:	4630      	mov	r0, r6
 80134e0:	f7ff ff88 	bl	80133f4 <__multadd>
 80134e4:	e7eb      	b.n	80134be <__s2b+0x54>

080134e6 <__hi0bits>:
 80134e6:	0c02      	lsrs	r2, r0, #16
 80134e8:	0412      	lsls	r2, r2, #16
 80134ea:	4603      	mov	r3, r0
 80134ec:	b9b2      	cbnz	r2, 801351c <__hi0bits+0x36>
 80134ee:	0403      	lsls	r3, r0, #16
 80134f0:	2010      	movs	r0, #16
 80134f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80134f6:	bf04      	itt	eq
 80134f8:	021b      	lsleq	r3, r3, #8
 80134fa:	3008      	addeq	r0, #8
 80134fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013500:	bf04      	itt	eq
 8013502:	011b      	lsleq	r3, r3, #4
 8013504:	3004      	addeq	r0, #4
 8013506:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801350a:	bf04      	itt	eq
 801350c:	009b      	lsleq	r3, r3, #2
 801350e:	3002      	addeq	r0, #2
 8013510:	2b00      	cmp	r3, #0
 8013512:	db06      	blt.n	8013522 <__hi0bits+0x3c>
 8013514:	005b      	lsls	r3, r3, #1
 8013516:	d503      	bpl.n	8013520 <__hi0bits+0x3a>
 8013518:	3001      	adds	r0, #1
 801351a:	4770      	bx	lr
 801351c:	2000      	movs	r0, #0
 801351e:	e7e8      	b.n	80134f2 <__hi0bits+0xc>
 8013520:	2020      	movs	r0, #32
 8013522:	4770      	bx	lr

08013524 <__lo0bits>:
 8013524:	6803      	ldr	r3, [r0, #0]
 8013526:	f013 0207 	ands.w	r2, r3, #7
 801352a:	4601      	mov	r1, r0
 801352c:	d00b      	beq.n	8013546 <__lo0bits+0x22>
 801352e:	07da      	lsls	r2, r3, #31
 8013530:	d423      	bmi.n	801357a <__lo0bits+0x56>
 8013532:	0798      	lsls	r0, r3, #30
 8013534:	bf49      	itett	mi
 8013536:	085b      	lsrmi	r3, r3, #1
 8013538:	089b      	lsrpl	r3, r3, #2
 801353a:	2001      	movmi	r0, #1
 801353c:	600b      	strmi	r3, [r1, #0]
 801353e:	bf5c      	itt	pl
 8013540:	600b      	strpl	r3, [r1, #0]
 8013542:	2002      	movpl	r0, #2
 8013544:	4770      	bx	lr
 8013546:	b298      	uxth	r0, r3
 8013548:	b9a8      	cbnz	r0, 8013576 <__lo0bits+0x52>
 801354a:	0c1b      	lsrs	r3, r3, #16
 801354c:	2010      	movs	r0, #16
 801354e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013552:	bf04      	itt	eq
 8013554:	0a1b      	lsreq	r3, r3, #8
 8013556:	3008      	addeq	r0, #8
 8013558:	071a      	lsls	r2, r3, #28
 801355a:	bf04      	itt	eq
 801355c:	091b      	lsreq	r3, r3, #4
 801355e:	3004      	addeq	r0, #4
 8013560:	079a      	lsls	r2, r3, #30
 8013562:	bf04      	itt	eq
 8013564:	089b      	lsreq	r3, r3, #2
 8013566:	3002      	addeq	r0, #2
 8013568:	07da      	lsls	r2, r3, #31
 801356a:	d402      	bmi.n	8013572 <__lo0bits+0x4e>
 801356c:	085b      	lsrs	r3, r3, #1
 801356e:	d006      	beq.n	801357e <__lo0bits+0x5a>
 8013570:	3001      	adds	r0, #1
 8013572:	600b      	str	r3, [r1, #0]
 8013574:	4770      	bx	lr
 8013576:	4610      	mov	r0, r2
 8013578:	e7e9      	b.n	801354e <__lo0bits+0x2a>
 801357a:	2000      	movs	r0, #0
 801357c:	4770      	bx	lr
 801357e:	2020      	movs	r0, #32
 8013580:	4770      	bx	lr

08013582 <__i2b>:
 8013582:	b510      	push	{r4, lr}
 8013584:	460c      	mov	r4, r1
 8013586:	2101      	movs	r1, #1
 8013588:	f7ff fee9 	bl	801335e <_Balloc>
 801358c:	2201      	movs	r2, #1
 801358e:	6144      	str	r4, [r0, #20]
 8013590:	6102      	str	r2, [r0, #16]
 8013592:	bd10      	pop	{r4, pc}

08013594 <__multiply>:
 8013594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013598:	4614      	mov	r4, r2
 801359a:	690a      	ldr	r2, [r1, #16]
 801359c:	6923      	ldr	r3, [r4, #16]
 801359e:	429a      	cmp	r2, r3
 80135a0:	bfb8      	it	lt
 80135a2:	460b      	movlt	r3, r1
 80135a4:	4688      	mov	r8, r1
 80135a6:	bfbc      	itt	lt
 80135a8:	46a0      	movlt	r8, r4
 80135aa:	461c      	movlt	r4, r3
 80135ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80135b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80135b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80135bc:	eb07 0609 	add.w	r6, r7, r9
 80135c0:	42b3      	cmp	r3, r6
 80135c2:	bfb8      	it	lt
 80135c4:	3101      	addlt	r1, #1
 80135c6:	f7ff feca 	bl	801335e <_Balloc>
 80135ca:	f100 0514 	add.w	r5, r0, #20
 80135ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80135d2:	462b      	mov	r3, r5
 80135d4:	2200      	movs	r2, #0
 80135d6:	4573      	cmp	r3, lr
 80135d8:	d316      	bcc.n	8013608 <__multiply+0x74>
 80135da:	f104 0214 	add.w	r2, r4, #20
 80135de:	f108 0114 	add.w	r1, r8, #20
 80135e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80135e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80135ea:	9300      	str	r3, [sp, #0]
 80135ec:	9b00      	ldr	r3, [sp, #0]
 80135ee:	9201      	str	r2, [sp, #4]
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d80c      	bhi.n	801360e <__multiply+0x7a>
 80135f4:	2e00      	cmp	r6, #0
 80135f6:	dd03      	ble.n	8013600 <__multiply+0x6c>
 80135f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d05d      	beq.n	80136bc <__multiply+0x128>
 8013600:	6106      	str	r6, [r0, #16]
 8013602:	b003      	add	sp, #12
 8013604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013608:	f843 2b04 	str.w	r2, [r3], #4
 801360c:	e7e3      	b.n	80135d6 <__multiply+0x42>
 801360e:	f8b2 b000 	ldrh.w	fp, [r2]
 8013612:	f1bb 0f00 	cmp.w	fp, #0
 8013616:	d023      	beq.n	8013660 <__multiply+0xcc>
 8013618:	4689      	mov	r9, r1
 801361a:	46ac      	mov	ip, r5
 801361c:	f04f 0800 	mov.w	r8, #0
 8013620:	f859 4b04 	ldr.w	r4, [r9], #4
 8013624:	f8dc a000 	ldr.w	sl, [ip]
 8013628:	b2a3      	uxth	r3, r4
 801362a:	fa1f fa8a 	uxth.w	sl, sl
 801362e:	fb0b a303 	mla	r3, fp, r3, sl
 8013632:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013636:	f8dc 4000 	ldr.w	r4, [ip]
 801363a:	4443      	add	r3, r8
 801363c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013640:	fb0b 840a 	mla	r4, fp, sl, r8
 8013644:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013648:	46e2      	mov	sl, ip
 801364a:	b29b      	uxth	r3, r3
 801364c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013650:	454f      	cmp	r7, r9
 8013652:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013656:	f84a 3b04 	str.w	r3, [sl], #4
 801365a:	d82b      	bhi.n	80136b4 <__multiply+0x120>
 801365c:	f8cc 8004 	str.w	r8, [ip, #4]
 8013660:	9b01      	ldr	r3, [sp, #4]
 8013662:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013666:	3204      	adds	r2, #4
 8013668:	f1ba 0f00 	cmp.w	sl, #0
 801366c:	d020      	beq.n	80136b0 <__multiply+0x11c>
 801366e:	682b      	ldr	r3, [r5, #0]
 8013670:	4689      	mov	r9, r1
 8013672:	46a8      	mov	r8, r5
 8013674:	f04f 0b00 	mov.w	fp, #0
 8013678:	f8b9 c000 	ldrh.w	ip, [r9]
 801367c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013680:	fb0a 440c 	mla	r4, sl, ip, r4
 8013684:	445c      	add	r4, fp
 8013686:	46c4      	mov	ip, r8
 8013688:	b29b      	uxth	r3, r3
 801368a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801368e:	f84c 3b04 	str.w	r3, [ip], #4
 8013692:	f859 3b04 	ldr.w	r3, [r9], #4
 8013696:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801369a:	0c1b      	lsrs	r3, r3, #16
 801369c:	fb0a b303 	mla	r3, sl, r3, fp
 80136a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80136a4:	454f      	cmp	r7, r9
 80136a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80136aa:	d805      	bhi.n	80136b8 <__multiply+0x124>
 80136ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80136b0:	3504      	adds	r5, #4
 80136b2:	e79b      	b.n	80135ec <__multiply+0x58>
 80136b4:	46d4      	mov	ip, sl
 80136b6:	e7b3      	b.n	8013620 <__multiply+0x8c>
 80136b8:	46e0      	mov	r8, ip
 80136ba:	e7dd      	b.n	8013678 <__multiply+0xe4>
 80136bc:	3e01      	subs	r6, #1
 80136be:	e799      	b.n	80135f4 <__multiply+0x60>

080136c0 <__pow5mult>:
 80136c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c4:	4615      	mov	r5, r2
 80136c6:	f012 0203 	ands.w	r2, r2, #3
 80136ca:	4606      	mov	r6, r0
 80136cc:	460f      	mov	r7, r1
 80136ce:	d007      	beq.n	80136e0 <__pow5mult+0x20>
 80136d0:	3a01      	subs	r2, #1
 80136d2:	4c21      	ldr	r4, [pc, #132]	; (8013758 <__pow5mult+0x98>)
 80136d4:	2300      	movs	r3, #0
 80136d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136da:	f7ff fe8b 	bl	80133f4 <__multadd>
 80136de:	4607      	mov	r7, r0
 80136e0:	10ad      	asrs	r5, r5, #2
 80136e2:	d035      	beq.n	8013750 <__pow5mult+0x90>
 80136e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80136e6:	b93c      	cbnz	r4, 80136f8 <__pow5mult+0x38>
 80136e8:	2010      	movs	r0, #16
 80136ea:	f7fe fab7 	bl	8011c5c <malloc>
 80136ee:	6270      	str	r0, [r6, #36]	; 0x24
 80136f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136f4:	6004      	str	r4, [r0, #0]
 80136f6:	60c4      	str	r4, [r0, #12]
 80136f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013700:	b94c      	cbnz	r4, 8013716 <__pow5mult+0x56>
 8013702:	f240 2171 	movw	r1, #625	; 0x271
 8013706:	4630      	mov	r0, r6
 8013708:	f7ff ff3b 	bl	8013582 <__i2b>
 801370c:	2300      	movs	r3, #0
 801370e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013712:	4604      	mov	r4, r0
 8013714:	6003      	str	r3, [r0, #0]
 8013716:	f04f 0800 	mov.w	r8, #0
 801371a:	07eb      	lsls	r3, r5, #31
 801371c:	d50a      	bpl.n	8013734 <__pow5mult+0x74>
 801371e:	4639      	mov	r1, r7
 8013720:	4622      	mov	r2, r4
 8013722:	4630      	mov	r0, r6
 8013724:	f7ff ff36 	bl	8013594 <__multiply>
 8013728:	4639      	mov	r1, r7
 801372a:	4681      	mov	r9, r0
 801372c:	4630      	mov	r0, r6
 801372e:	f7ff fe4a 	bl	80133c6 <_Bfree>
 8013732:	464f      	mov	r7, r9
 8013734:	106d      	asrs	r5, r5, #1
 8013736:	d00b      	beq.n	8013750 <__pow5mult+0x90>
 8013738:	6820      	ldr	r0, [r4, #0]
 801373a:	b938      	cbnz	r0, 801374c <__pow5mult+0x8c>
 801373c:	4622      	mov	r2, r4
 801373e:	4621      	mov	r1, r4
 8013740:	4630      	mov	r0, r6
 8013742:	f7ff ff27 	bl	8013594 <__multiply>
 8013746:	6020      	str	r0, [r4, #0]
 8013748:	f8c0 8000 	str.w	r8, [r0]
 801374c:	4604      	mov	r4, r0
 801374e:	e7e4      	b.n	801371a <__pow5mult+0x5a>
 8013750:	4638      	mov	r0, r7
 8013752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013756:	bf00      	nop
 8013758:	08020f18 	.word	0x08020f18

0801375c <__lshift>:
 801375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013760:	460c      	mov	r4, r1
 8013762:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013766:	6923      	ldr	r3, [r4, #16]
 8013768:	6849      	ldr	r1, [r1, #4]
 801376a:	eb0a 0903 	add.w	r9, sl, r3
 801376e:	68a3      	ldr	r3, [r4, #8]
 8013770:	4607      	mov	r7, r0
 8013772:	4616      	mov	r6, r2
 8013774:	f109 0501 	add.w	r5, r9, #1
 8013778:	42ab      	cmp	r3, r5
 801377a:	db32      	blt.n	80137e2 <__lshift+0x86>
 801377c:	4638      	mov	r0, r7
 801377e:	f7ff fdee 	bl	801335e <_Balloc>
 8013782:	2300      	movs	r3, #0
 8013784:	4680      	mov	r8, r0
 8013786:	f100 0114 	add.w	r1, r0, #20
 801378a:	461a      	mov	r2, r3
 801378c:	4553      	cmp	r3, sl
 801378e:	db2b      	blt.n	80137e8 <__lshift+0x8c>
 8013790:	6920      	ldr	r0, [r4, #16]
 8013792:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013796:	f104 0314 	add.w	r3, r4, #20
 801379a:	f016 021f 	ands.w	r2, r6, #31
 801379e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137a6:	d025      	beq.n	80137f4 <__lshift+0x98>
 80137a8:	f1c2 0e20 	rsb	lr, r2, #32
 80137ac:	2000      	movs	r0, #0
 80137ae:	681e      	ldr	r6, [r3, #0]
 80137b0:	468a      	mov	sl, r1
 80137b2:	4096      	lsls	r6, r2
 80137b4:	4330      	orrs	r0, r6
 80137b6:	f84a 0b04 	str.w	r0, [sl], #4
 80137ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80137be:	459c      	cmp	ip, r3
 80137c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80137c4:	d814      	bhi.n	80137f0 <__lshift+0x94>
 80137c6:	6048      	str	r0, [r1, #4]
 80137c8:	b108      	cbz	r0, 80137ce <__lshift+0x72>
 80137ca:	f109 0502 	add.w	r5, r9, #2
 80137ce:	3d01      	subs	r5, #1
 80137d0:	4638      	mov	r0, r7
 80137d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80137d6:	4621      	mov	r1, r4
 80137d8:	f7ff fdf5 	bl	80133c6 <_Bfree>
 80137dc:	4640      	mov	r0, r8
 80137de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137e2:	3101      	adds	r1, #1
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	e7c7      	b.n	8013778 <__lshift+0x1c>
 80137e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80137ec:	3301      	adds	r3, #1
 80137ee:	e7cd      	b.n	801378c <__lshift+0x30>
 80137f0:	4651      	mov	r1, sl
 80137f2:	e7dc      	b.n	80137ae <__lshift+0x52>
 80137f4:	3904      	subs	r1, #4
 80137f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80137fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80137fe:	459c      	cmp	ip, r3
 8013800:	d8f9      	bhi.n	80137f6 <__lshift+0x9a>
 8013802:	e7e4      	b.n	80137ce <__lshift+0x72>

08013804 <__mcmp>:
 8013804:	6903      	ldr	r3, [r0, #16]
 8013806:	690a      	ldr	r2, [r1, #16]
 8013808:	1a9b      	subs	r3, r3, r2
 801380a:	b530      	push	{r4, r5, lr}
 801380c:	d10c      	bne.n	8013828 <__mcmp+0x24>
 801380e:	0092      	lsls	r2, r2, #2
 8013810:	3014      	adds	r0, #20
 8013812:	3114      	adds	r1, #20
 8013814:	1884      	adds	r4, r0, r2
 8013816:	4411      	add	r1, r2
 8013818:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801381c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013820:	4295      	cmp	r5, r2
 8013822:	d003      	beq.n	801382c <__mcmp+0x28>
 8013824:	d305      	bcc.n	8013832 <__mcmp+0x2e>
 8013826:	2301      	movs	r3, #1
 8013828:	4618      	mov	r0, r3
 801382a:	bd30      	pop	{r4, r5, pc}
 801382c:	42a0      	cmp	r0, r4
 801382e:	d3f3      	bcc.n	8013818 <__mcmp+0x14>
 8013830:	e7fa      	b.n	8013828 <__mcmp+0x24>
 8013832:	f04f 33ff 	mov.w	r3, #4294967295
 8013836:	e7f7      	b.n	8013828 <__mcmp+0x24>

08013838 <__mdiff>:
 8013838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801383c:	460d      	mov	r5, r1
 801383e:	4607      	mov	r7, r0
 8013840:	4611      	mov	r1, r2
 8013842:	4628      	mov	r0, r5
 8013844:	4614      	mov	r4, r2
 8013846:	f7ff ffdd 	bl	8013804 <__mcmp>
 801384a:	1e06      	subs	r6, r0, #0
 801384c:	d108      	bne.n	8013860 <__mdiff+0x28>
 801384e:	4631      	mov	r1, r6
 8013850:	4638      	mov	r0, r7
 8013852:	f7ff fd84 	bl	801335e <_Balloc>
 8013856:	2301      	movs	r3, #1
 8013858:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013860:	bfa4      	itt	ge
 8013862:	4623      	movge	r3, r4
 8013864:	462c      	movge	r4, r5
 8013866:	4638      	mov	r0, r7
 8013868:	6861      	ldr	r1, [r4, #4]
 801386a:	bfa6      	itte	ge
 801386c:	461d      	movge	r5, r3
 801386e:	2600      	movge	r6, #0
 8013870:	2601      	movlt	r6, #1
 8013872:	f7ff fd74 	bl	801335e <_Balloc>
 8013876:	692b      	ldr	r3, [r5, #16]
 8013878:	60c6      	str	r6, [r0, #12]
 801387a:	6926      	ldr	r6, [r4, #16]
 801387c:	f105 0914 	add.w	r9, r5, #20
 8013880:	f104 0214 	add.w	r2, r4, #20
 8013884:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013888:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801388c:	f100 0514 	add.w	r5, r0, #20
 8013890:	f04f 0e00 	mov.w	lr, #0
 8013894:	f852 ab04 	ldr.w	sl, [r2], #4
 8013898:	f859 4b04 	ldr.w	r4, [r9], #4
 801389c:	fa1e f18a 	uxtah	r1, lr, sl
 80138a0:	b2a3      	uxth	r3, r4
 80138a2:	1ac9      	subs	r1, r1, r3
 80138a4:	0c23      	lsrs	r3, r4, #16
 80138a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80138aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80138ae:	b289      	uxth	r1, r1
 80138b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80138b4:	45c8      	cmp	r8, r9
 80138b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80138ba:	4694      	mov	ip, r2
 80138bc:	f845 3b04 	str.w	r3, [r5], #4
 80138c0:	d8e8      	bhi.n	8013894 <__mdiff+0x5c>
 80138c2:	45bc      	cmp	ip, r7
 80138c4:	d304      	bcc.n	80138d0 <__mdiff+0x98>
 80138c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80138ca:	b183      	cbz	r3, 80138ee <__mdiff+0xb6>
 80138cc:	6106      	str	r6, [r0, #16]
 80138ce:	e7c5      	b.n	801385c <__mdiff+0x24>
 80138d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80138d4:	fa1e f381 	uxtah	r3, lr, r1
 80138d8:	141a      	asrs	r2, r3, #16
 80138da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80138de:	b29b      	uxth	r3, r3
 80138e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80138e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80138e8:	f845 3b04 	str.w	r3, [r5], #4
 80138ec:	e7e9      	b.n	80138c2 <__mdiff+0x8a>
 80138ee:	3e01      	subs	r6, #1
 80138f0:	e7e9      	b.n	80138c6 <__mdiff+0x8e>
	...

080138f4 <__ulp>:
 80138f4:	4b12      	ldr	r3, [pc, #72]	; (8013940 <__ulp+0x4c>)
 80138f6:	ee10 2a90 	vmov	r2, s1
 80138fa:	401a      	ands	r2, r3
 80138fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013900:	2b00      	cmp	r3, #0
 8013902:	dd04      	ble.n	801390e <__ulp+0x1a>
 8013904:	2000      	movs	r0, #0
 8013906:	4619      	mov	r1, r3
 8013908:	ec41 0b10 	vmov	d0, r0, r1
 801390c:	4770      	bx	lr
 801390e:	425b      	negs	r3, r3
 8013910:	151b      	asrs	r3, r3, #20
 8013912:	2b13      	cmp	r3, #19
 8013914:	f04f 0000 	mov.w	r0, #0
 8013918:	f04f 0100 	mov.w	r1, #0
 801391c:	dc04      	bgt.n	8013928 <__ulp+0x34>
 801391e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013922:	fa42 f103 	asr.w	r1, r2, r3
 8013926:	e7ef      	b.n	8013908 <__ulp+0x14>
 8013928:	3b14      	subs	r3, #20
 801392a:	2b1e      	cmp	r3, #30
 801392c:	f04f 0201 	mov.w	r2, #1
 8013930:	bfda      	itte	le
 8013932:	f1c3 031f 	rsble	r3, r3, #31
 8013936:	fa02 f303 	lslle.w	r3, r2, r3
 801393a:	4613      	movgt	r3, r2
 801393c:	4618      	mov	r0, r3
 801393e:	e7e3      	b.n	8013908 <__ulp+0x14>
 8013940:	7ff00000 	.word	0x7ff00000

08013944 <__b2d>:
 8013944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013946:	6905      	ldr	r5, [r0, #16]
 8013948:	f100 0714 	add.w	r7, r0, #20
 801394c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013950:	1f2e      	subs	r6, r5, #4
 8013952:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013956:	4620      	mov	r0, r4
 8013958:	f7ff fdc5 	bl	80134e6 <__hi0bits>
 801395c:	f1c0 0320 	rsb	r3, r0, #32
 8013960:	280a      	cmp	r0, #10
 8013962:	600b      	str	r3, [r1, #0]
 8013964:	f8df c074 	ldr.w	ip, [pc, #116]	; 80139dc <__b2d+0x98>
 8013968:	dc14      	bgt.n	8013994 <__b2d+0x50>
 801396a:	f1c0 0e0b 	rsb	lr, r0, #11
 801396e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013972:	42b7      	cmp	r7, r6
 8013974:	ea41 030c 	orr.w	r3, r1, ip
 8013978:	bf34      	ite	cc
 801397a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801397e:	2100      	movcs	r1, #0
 8013980:	3015      	adds	r0, #21
 8013982:	fa04 f000 	lsl.w	r0, r4, r0
 8013986:	fa21 f10e 	lsr.w	r1, r1, lr
 801398a:	ea40 0201 	orr.w	r2, r0, r1
 801398e:	ec43 2b10 	vmov	d0, r2, r3
 8013992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013994:	42b7      	cmp	r7, r6
 8013996:	bf3a      	itte	cc
 8013998:	f1a5 0608 	subcc.w	r6, r5, #8
 801399c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80139a0:	2100      	movcs	r1, #0
 80139a2:	380b      	subs	r0, #11
 80139a4:	d015      	beq.n	80139d2 <__b2d+0x8e>
 80139a6:	4084      	lsls	r4, r0
 80139a8:	f1c0 0520 	rsb	r5, r0, #32
 80139ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80139b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80139b4:	42be      	cmp	r6, r7
 80139b6:	fa21 fc05 	lsr.w	ip, r1, r5
 80139ba:	ea44 030c 	orr.w	r3, r4, ip
 80139be:	bf8c      	ite	hi
 80139c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80139c4:	2400      	movls	r4, #0
 80139c6:	fa01 f000 	lsl.w	r0, r1, r0
 80139ca:	40ec      	lsrs	r4, r5
 80139cc:	ea40 0204 	orr.w	r2, r0, r4
 80139d0:	e7dd      	b.n	801398e <__b2d+0x4a>
 80139d2:	ea44 030c 	orr.w	r3, r4, ip
 80139d6:	460a      	mov	r2, r1
 80139d8:	e7d9      	b.n	801398e <__b2d+0x4a>
 80139da:	bf00      	nop
 80139dc:	3ff00000 	.word	0x3ff00000

080139e0 <__d2b>:
 80139e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139e4:	460e      	mov	r6, r1
 80139e6:	2101      	movs	r1, #1
 80139e8:	ec59 8b10 	vmov	r8, r9, d0
 80139ec:	4615      	mov	r5, r2
 80139ee:	f7ff fcb6 	bl	801335e <_Balloc>
 80139f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80139f6:	4607      	mov	r7, r0
 80139f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139fc:	bb34      	cbnz	r4, 8013a4c <__d2b+0x6c>
 80139fe:	9301      	str	r3, [sp, #4]
 8013a00:	f1b8 0300 	subs.w	r3, r8, #0
 8013a04:	d027      	beq.n	8013a56 <__d2b+0x76>
 8013a06:	a802      	add	r0, sp, #8
 8013a08:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013a0c:	f7ff fd8a 	bl	8013524 <__lo0bits>
 8013a10:	9900      	ldr	r1, [sp, #0]
 8013a12:	b1f0      	cbz	r0, 8013a52 <__d2b+0x72>
 8013a14:	9a01      	ldr	r2, [sp, #4]
 8013a16:	f1c0 0320 	rsb	r3, r0, #32
 8013a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a1e:	430b      	orrs	r3, r1
 8013a20:	40c2      	lsrs	r2, r0
 8013a22:	617b      	str	r3, [r7, #20]
 8013a24:	9201      	str	r2, [sp, #4]
 8013a26:	9b01      	ldr	r3, [sp, #4]
 8013a28:	61bb      	str	r3, [r7, #24]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	bf14      	ite	ne
 8013a2e:	2102      	movne	r1, #2
 8013a30:	2101      	moveq	r1, #1
 8013a32:	6139      	str	r1, [r7, #16]
 8013a34:	b1c4      	cbz	r4, 8013a68 <__d2b+0x88>
 8013a36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013a3a:	4404      	add	r4, r0
 8013a3c:	6034      	str	r4, [r6, #0]
 8013a3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a42:	6028      	str	r0, [r5, #0]
 8013a44:	4638      	mov	r0, r7
 8013a46:	b003      	add	sp, #12
 8013a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a50:	e7d5      	b.n	80139fe <__d2b+0x1e>
 8013a52:	6179      	str	r1, [r7, #20]
 8013a54:	e7e7      	b.n	8013a26 <__d2b+0x46>
 8013a56:	a801      	add	r0, sp, #4
 8013a58:	f7ff fd64 	bl	8013524 <__lo0bits>
 8013a5c:	9b01      	ldr	r3, [sp, #4]
 8013a5e:	617b      	str	r3, [r7, #20]
 8013a60:	2101      	movs	r1, #1
 8013a62:	6139      	str	r1, [r7, #16]
 8013a64:	3020      	adds	r0, #32
 8013a66:	e7e5      	b.n	8013a34 <__d2b+0x54>
 8013a68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a70:	6030      	str	r0, [r6, #0]
 8013a72:	6918      	ldr	r0, [r3, #16]
 8013a74:	f7ff fd37 	bl	80134e6 <__hi0bits>
 8013a78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013a7c:	e7e1      	b.n	8013a42 <__d2b+0x62>

08013a7e <__ratio>:
 8013a7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a82:	4688      	mov	r8, r1
 8013a84:	4669      	mov	r1, sp
 8013a86:	4681      	mov	r9, r0
 8013a88:	f7ff ff5c 	bl	8013944 <__b2d>
 8013a8c:	a901      	add	r1, sp, #4
 8013a8e:	4640      	mov	r0, r8
 8013a90:	ec57 6b10 	vmov	r6, r7, d0
 8013a94:	f7ff ff56 	bl	8013944 <__b2d>
 8013a98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013aa0:	eba3 0c02 	sub.w	ip, r3, r2
 8013aa4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013aa8:	1a9b      	subs	r3, r3, r2
 8013aaa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013aae:	ec5b ab10 	vmov	sl, fp, d0
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	bfce      	itee	gt
 8013ab6:	463a      	movgt	r2, r7
 8013ab8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013abc:	465a      	movle	r2, fp
 8013abe:	4659      	mov	r1, fp
 8013ac0:	463d      	mov	r5, r7
 8013ac2:	bfd4      	ite	le
 8013ac4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013ac8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013acc:	4630      	mov	r0, r6
 8013ace:	ee10 2a10 	vmov	r2, s0
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	4629      	mov	r1, r5
 8013ad6:	f7ec fed1 	bl	800087c <__aeabi_ddiv>
 8013ada:	ec41 0b10 	vmov	d0, r0, r1
 8013ade:	b003      	add	sp, #12
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013ae4 <__copybits>:
 8013ae4:	3901      	subs	r1, #1
 8013ae6:	b510      	push	{r4, lr}
 8013ae8:	1149      	asrs	r1, r1, #5
 8013aea:	6914      	ldr	r4, [r2, #16]
 8013aec:	3101      	adds	r1, #1
 8013aee:	f102 0314 	add.w	r3, r2, #20
 8013af2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013af6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013afa:	42a3      	cmp	r3, r4
 8013afc:	4602      	mov	r2, r0
 8013afe:	d303      	bcc.n	8013b08 <__copybits+0x24>
 8013b00:	2300      	movs	r3, #0
 8013b02:	428a      	cmp	r2, r1
 8013b04:	d305      	bcc.n	8013b12 <__copybits+0x2e>
 8013b06:	bd10      	pop	{r4, pc}
 8013b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b0c:	f840 2b04 	str.w	r2, [r0], #4
 8013b10:	e7f3      	b.n	8013afa <__copybits+0x16>
 8013b12:	f842 3b04 	str.w	r3, [r2], #4
 8013b16:	e7f4      	b.n	8013b02 <__copybits+0x1e>

08013b18 <__any_on>:
 8013b18:	f100 0214 	add.w	r2, r0, #20
 8013b1c:	6900      	ldr	r0, [r0, #16]
 8013b1e:	114b      	asrs	r3, r1, #5
 8013b20:	4298      	cmp	r0, r3
 8013b22:	b510      	push	{r4, lr}
 8013b24:	db11      	blt.n	8013b4a <__any_on+0x32>
 8013b26:	dd0a      	ble.n	8013b3e <__any_on+0x26>
 8013b28:	f011 011f 	ands.w	r1, r1, #31
 8013b2c:	d007      	beq.n	8013b3e <__any_on+0x26>
 8013b2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013b32:	fa24 f001 	lsr.w	r0, r4, r1
 8013b36:	fa00 f101 	lsl.w	r1, r0, r1
 8013b3a:	428c      	cmp	r4, r1
 8013b3c:	d10b      	bne.n	8013b56 <__any_on+0x3e>
 8013b3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d803      	bhi.n	8013b4e <__any_on+0x36>
 8013b46:	2000      	movs	r0, #0
 8013b48:	bd10      	pop	{r4, pc}
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	e7f7      	b.n	8013b3e <__any_on+0x26>
 8013b4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013b52:	2900      	cmp	r1, #0
 8013b54:	d0f5      	beq.n	8013b42 <__any_on+0x2a>
 8013b56:	2001      	movs	r0, #1
 8013b58:	e7f6      	b.n	8013b48 <__any_on+0x30>

08013b5a <_calloc_r>:
 8013b5a:	b538      	push	{r3, r4, r5, lr}
 8013b5c:	fb02 f401 	mul.w	r4, r2, r1
 8013b60:	4621      	mov	r1, r4
 8013b62:	f7fe f8ed 	bl	8011d40 <_malloc_r>
 8013b66:	4605      	mov	r5, r0
 8013b68:	b118      	cbz	r0, 8013b72 <_calloc_r+0x18>
 8013b6a:	4622      	mov	r2, r4
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	f7fe f890 	bl	8011c92 <memset>
 8013b72:	4628      	mov	r0, r5
 8013b74:	bd38      	pop	{r3, r4, r5, pc}

08013b76 <__ssputs_r>:
 8013b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b7a:	688e      	ldr	r6, [r1, #8]
 8013b7c:	429e      	cmp	r6, r3
 8013b7e:	4682      	mov	sl, r0
 8013b80:	460c      	mov	r4, r1
 8013b82:	4690      	mov	r8, r2
 8013b84:	4699      	mov	r9, r3
 8013b86:	d837      	bhi.n	8013bf8 <__ssputs_r+0x82>
 8013b88:	898a      	ldrh	r2, [r1, #12]
 8013b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b8e:	d031      	beq.n	8013bf4 <__ssputs_r+0x7e>
 8013b90:	6825      	ldr	r5, [r4, #0]
 8013b92:	6909      	ldr	r1, [r1, #16]
 8013b94:	1a6f      	subs	r7, r5, r1
 8013b96:	6965      	ldr	r5, [r4, #20]
 8013b98:	2302      	movs	r3, #2
 8013b9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8013ba2:	f109 0301 	add.w	r3, r9, #1
 8013ba6:	443b      	add	r3, r7
 8013ba8:	429d      	cmp	r5, r3
 8013baa:	bf38      	it	cc
 8013bac:	461d      	movcc	r5, r3
 8013bae:	0553      	lsls	r3, r2, #21
 8013bb0:	d530      	bpl.n	8013c14 <__ssputs_r+0x9e>
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	f7fe f8c4 	bl	8011d40 <_malloc_r>
 8013bb8:	4606      	mov	r6, r0
 8013bba:	b950      	cbnz	r0, 8013bd2 <__ssputs_r+0x5c>
 8013bbc:	230c      	movs	r3, #12
 8013bbe:	f8ca 3000 	str.w	r3, [sl]
 8013bc2:	89a3      	ldrh	r3, [r4, #12]
 8013bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc8:	81a3      	strh	r3, [r4, #12]
 8013bca:	f04f 30ff 	mov.w	r0, #4294967295
 8013bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bd2:	463a      	mov	r2, r7
 8013bd4:	6921      	ldr	r1, [r4, #16]
 8013bd6:	f7fe f851 	bl	8011c7c <memcpy>
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013be4:	81a3      	strh	r3, [r4, #12]
 8013be6:	6126      	str	r6, [r4, #16]
 8013be8:	6165      	str	r5, [r4, #20]
 8013bea:	443e      	add	r6, r7
 8013bec:	1bed      	subs	r5, r5, r7
 8013bee:	6026      	str	r6, [r4, #0]
 8013bf0:	60a5      	str	r5, [r4, #8]
 8013bf2:	464e      	mov	r6, r9
 8013bf4:	454e      	cmp	r6, r9
 8013bf6:	d900      	bls.n	8013bfa <__ssputs_r+0x84>
 8013bf8:	464e      	mov	r6, r9
 8013bfa:	4632      	mov	r2, r6
 8013bfc:	4641      	mov	r1, r8
 8013bfe:	6820      	ldr	r0, [r4, #0]
 8013c00:	f000 fab9 	bl	8014176 <memmove>
 8013c04:	68a3      	ldr	r3, [r4, #8]
 8013c06:	1b9b      	subs	r3, r3, r6
 8013c08:	60a3      	str	r3, [r4, #8]
 8013c0a:	6823      	ldr	r3, [r4, #0]
 8013c0c:	441e      	add	r6, r3
 8013c0e:	6026      	str	r6, [r4, #0]
 8013c10:	2000      	movs	r0, #0
 8013c12:	e7dc      	b.n	8013bce <__ssputs_r+0x58>
 8013c14:	462a      	mov	r2, r5
 8013c16:	f000 fac7 	bl	80141a8 <_realloc_r>
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	d1e2      	bne.n	8013be6 <__ssputs_r+0x70>
 8013c20:	6921      	ldr	r1, [r4, #16]
 8013c22:	4650      	mov	r0, sl
 8013c24:	f7fe f83e 	bl	8011ca4 <_free_r>
 8013c28:	e7c8      	b.n	8013bbc <__ssputs_r+0x46>
	...

08013c2c <_svfiprintf_r>:
 8013c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c30:	461d      	mov	r5, r3
 8013c32:	898b      	ldrh	r3, [r1, #12]
 8013c34:	061f      	lsls	r7, r3, #24
 8013c36:	b09d      	sub	sp, #116	; 0x74
 8013c38:	4680      	mov	r8, r0
 8013c3a:	460c      	mov	r4, r1
 8013c3c:	4616      	mov	r6, r2
 8013c3e:	d50f      	bpl.n	8013c60 <_svfiprintf_r+0x34>
 8013c40:	690b      	ldr	r3, [r1, #16]
 8013c42:	b96b      	cbnz	r3, 8013c60 <_svfiprintf_r+0x34>
 8013c44:	2140      	movs	r1, #64	; 0x40
 8013c46:	f7fe f87b 	bl	8011d40 <_malloc_r>
 8013c4a:	6020      	str	r0, [r4, #0]
 8013c4c:	6120      	str	r0, [r4, #16]
 8013c4e:	b928      	cbnz	r0, 8013c5c <_svfiprintf_r+0x30>
 8013c50:	230c      	movs	r3, #12
 8013c52:	f8c8 3000 	str.w	r3, [r8]
 8013c56:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5a:	e0c8      	b.n	8013dee <_svfiprintf_r+0x1c2>
 8013c5c:	2340      	movs	r3, #64	; 0x40
 8013c5e:	6163      	str	r3, [r4, #20]
 8013c60:	2300      	movs	r3, #0
 8013c62:	9309      	str	r3, [sp, #36]	; 0x24
 8013c64:	2320      	movs	r3, #32
 8013c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c6a:	2330      	movs	r3, #48	; 0x30
 8013c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c70:	9503      	str	r5, [sp, #12]
 8013c72:	f04f 0b01 	mov.w	fp, #1
 8013c76:	4637      	mov	r7, r6
 8013c78:	463d      	mov	r5, r7
 8013c7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013c7e:	b10b      	cbz	r3, 8013c84 <_svfiprintf_r+0x58>
 8013c80:	2b25      	cmp	r3, #37	; 0x25
 8013c82:	d13e      	bne.n	8013d02 <_svfiprintf_r+0xd6>
 8013c84:	ebb7 0a06 	subs.w	sl, r7, r6
 8013c88:	d00b      	beq.n	8013ca2 <_svfiprintf_r+0x76>
 8013c8a:	4653      	mov	r3, sl
 8013c8c:	4632      	mov	r2, r6
 8013c8e:	4621      	mov	r1, r4
 8013c90:	4640      	mov	r0, r8
 8013c92:	f7ff ff70 	bl	8013b76 <__ssputs_r>
 8013c96:	3001      	adds	r0, #1
 8013c98:	f000 80a4 	beq.w	8013de4 <_svfiprintf_r+0x1b8>
 8013c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c9e:	4453      	add	r3, sl
 8013ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ca2:	783b      	ldrb	r3, [r7, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	f000 809d 	beq.w	8013de4 <_svfiprintf_r+0x1b8>
 8013caa:	2300      	movs	r3, #0
 8013cac:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cb4:	9304      	str	r3, [sp, #16]
 8013cb6:	9307      	str	r3, [sp, #28]
 8013cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8013cbe:	462f      	mov	r7, r5
 8013cc0:	2205      	movs	r2, #5
 8013cc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013cc6:	4850      	ldr	r0, [pc, #320]	; (8013e08 <_svfiprintf_r+0x1dc>)
 8013cc8:	f7ec faa2 	bl	8000210 <memchr>
 8013ccc:	9b04      	ldr	r3, [sp, #16]
 8013cce:	b9d0      	cbnz	r0, 8013d06 <_svfiprintf_r+0xda>
 8013cd0:	06d9      	lsls	r1, r3, #27
 8013cd2:	bf44      	itt	mi
 8013cd4:	2220      	movmi	r2, #32
 8013cd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013cda:	071a      	lsls	r2, r3, #28
 8013cdc:	bf44      	itt	mi
 8013cde:	222b      	movmi	r2, #43	; 0x2b
 8013ce0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013ce4:	782a      	ldrb	r2, [r5, #0]
 8013ce6:	2a2a      	cmp	r2, #42	; 0x2a
 8013ce8:	d015      	beq.n	8013d16 <_svfiprintf_r+0xea>
 8013cea:	9a07      	ldr	r2, [sp, #28]
 8013cec:	462f      	mov	r7, r5
 8013cee:	2000      	movs	r0, #0
 8013cf0:	250a      	movs	r5, #10
 8013cf2:	4639      	mov	r1, r7
 8013cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cf8:	3b30      	subs	r3, #48	; 0x30
 8013cfa:	2b09      	cmp	r3, #9
 8013cfc:	d94d      	bls.n	8013d9a <_svfiprintf_r+0x16e>
 8013cfe:	b1b8      	cbz	r0, 8013d30 <_svfiprintf_r+0x104>
 8013d00:	e00f      	b.n	8013d22 <_svfiprintf_r+0xf6>
 8013d02:	462f      	mov	r7, r5
 8013d04:	e7b8      	b.n	8013c78 <_svfiprintf_r+0x4c>
 8013d06:	4a40      	ldr	r2, [pc, #256]	; (8013e08 <_svfiprintf_r+0x1dc>)
 8013d08:	1a80      	subs	r0, r0, r2
 8013d0a:	fa0b f000 	lsl.w	r0, fp, r0
 8013d0e:	4318      	orrs	r0, r3
 8013d10:	9004      	str	r0, [sp, #16]
 8013d12:	463d      	mov	r5, r7
 8013d14:	e7d3      	b.n	8013cbe <_svfiprintf_r+0x92>
 8013d16:	9a03      	ldr	r2, [sp, #12]
 8013d18:	1d11      	adds	r1, r2, #4
 8013d1a:	6812      	ldr	r2, [r2, #0]
 8013d1c:	9103      	str	r1, [sp, #12]
 8013d1e:	2a00      	cmp	r2, #0
 8013d20:	db01      	blt.n	8013d26 <_svfiprintf_r+0xfa>
 8013d22:	9207      	str	r2, [sp, #28]
 8013d24:	e004      	b.n	8013d30 <_svfiprintf_r+0x104>
 8013d26:	4252      	negs	r2, r2
 8013d28:	f043 0302 	orr.w	r3, r3, #2
 8013d2c:	9207      	str	r2, [sp, #28]
 8013d2e:	9304      	str	r3, [sp, #16]
 8013d30:	783b      	ldrb	r3, [r7, #0]
 8013d32:	2b2e      	cmp	r3, #46	; 0x2e
 8013d34:	d10c      	bne.n	8013d50 <_svfiprintf_r+0x124>
 8013d36:	787b      	ldrb	r3, [r7, #1]
 8013d38:	2b2a      	cmp	r3, #42	; 0x2a
 8013d3a:	d133      	bne.n	8013da4 <_svfiprintf_r+0x178>
 8013d3c:	9b03      	ldr	r3, [sp, #12]
 8013d3e:	1d1a      	adds	r2, r3, #4
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	9203      	str	r2, [sp, #12]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	bfb8      	it	lt
 8013d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d4c:	3702      	adds	r7, #2
 8013d4e:	9305      	str	r3, [sp, #20]
 8013d50:	4d2e      	ldr	r5, [pc, #184]	; (8013e0c <_svfiprintf_r+0x1e0>)
 8013d52:	7839      	ldrb	r1, [r7, #0]
 8013d54:	2203      	movs	r2, #3
 8013d56:	4628      	mov	r0, r5
 8013d58:	f7ec fa5a 	bl	8000210 <memchr>
 8013d5c:	b138      	cbz	r0, 8013d6e <_svfiprintf_r+0x142>
 8013d5e:	2340      	movs	r3, #64	; 0x40
 8013d60:	1b40      	subs	r0, r0, r5
 8013d62:	fa03 f000 	lsl.w	r0, r3, r0
 8013d66:	9b04      	ldr	r3, [sp, #16]
 8013d68:	4303      	orrs	r3, r0
 8013d6a:	3701      	adds	r7, #1
 8013d6c:	9304      	str	r3, [sp, #16]
 8013d6e:	7839      	ldrb	r1, [r7, #0]
 8013d70:	4827      	ldr	r0, [pc, #156]	; (8013e10 <_svfiprintf_r+0x1e4>)
 8013d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d76:	2206      	movs	r2, #6
 8013d78:	1c7e      	adds	r6, r7, #1
 8013d7a:	f7ec fa49 	bl	8000210 <memchr>
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	d038      	beq.n	8013df4 <_svfiprintf_r+0x1c8>
 8013d82:	4b24      	ldr	r3, [pc, #144]	; (8013e14 <_svfiprintf_r+0x1e8>)
 8013d84:	bb13      	cbnz	r3, 8013dcc <_svfiprintf_r+0x1a0>
 8013d86:	9b03      	ldr	r3, [sp, #12]
 8013d88:	3307      	adds	r3, #7
 8013d8a:	f023 0307 	bic.w	r3, r3, #7
 8013d8e:	3308      	adds	r3, #8
 8013d90:	9303      	str	r3, [sp, #12]
 8013d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d94:	444b      	add	r3, r9
 8013d96:	9309      	str	r3, [sp, #36]	; 0x24
 8013d98:	e76d      	b.n	8013c76 <_svfiprintf_r+0x4a>
 8013d9a:	fb05 3202 	mla	r2, r5, r2, r3
 8013d9e:	2001      	movs	r0, #1
 8013da0:	460f      	mov	r7, r1
 8013da2:	e7a6      	b.n	8013cf2 <_svfiprintf_r+0xc6>
 8013da4:	2300      	movs	r3, #0
 8013da6:	3701      	adds	r7, #1
 8013da8:	9305      	str	r3, [sp, #20]
 8013daa:	4619      	mov	r1, r3
 8013dac:	250a      	movs	r5, #10
 8013dae:	4638      	mov	r0, r7
 8013db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013db4:	3a30      	subs	r2, #48	; 0x30
 8013db6:	2a09      	cmp	r2, #9
 8013db8:	d903      	bls.n	8013dc2 <_svfiprintf_r+0x196>
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d0c8      	beq.n	8013d50 <_svfiprintf_r+0x124>
 8013dbe:	9105      	str	r1, [sp, #20]
 8013dc0:	e7c6      	b.n	8013d50 <_svfiprintf_r+0x124>
 8013dc2:	fb05 2101 	mla	r1, r5, r1, r2
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	4607      	mov	r7, r0
 8013dca:	e7f0      	b.n	8013dae <_svfiprintf_r+0x182>
 8013dcc:	ab03      	add	r3, sp, #12
 8013dce:	9300      	str	r3, [sp, #0]
 8013dd0:	4622      	mov	r2, r4
 8013dd2:	4b11      	ldr	r3, [pc, #68]	; (8013e18 <_svfiprintf_r+0x1ec>)
 8013dd4:	a904      	add	r1, sp, #16
 8013dd6:	4640      	mov	r0, r8
 8013dd8:	f3af 8000 	nop.w
 8013ddc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013de0:	4681      	mov	r9, r0
 8013de2:	d1d6      	bne.n	8013d92 <_svfiprintf_r+0x166>
 8013de4:	89a3      	ldrh	r3, [r4, #12]
 8013de6:	065b      	lsls	r3, r3, #25
 8013de8:	f53f af35 	bmi.w	8013c56 <_svfiprintf_r+0x2a>
 8013dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dee:	b01d      	add	sp, #116	; 0x74
 8013df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df4:	ab03      	add	r3, sp, #12
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	4622      	mov	r2, r4
 8013dfa:	4b07      	ldr	r3, [pc, #28]	; (8013e18 <_svfiprintf_r+0x1ec>)
 8013dfc:	a904      	add	r1, sp, #16
 8013dfe:	4640      	mov	r0, r8
 8013e00:	f000 f882 	bl	8013f08 <_printf_i>
 8013e04:	e7ea      	b.n	8013ddc <_svfiprintf_r+0x1b0>
 8013e06:	bf00      	nop
 8013e08:	08020f24 	.word	0x08020f24
 8013e0c:	08020f2a 	.word	0x08020f2a
 8013e10:	08020f2e 	.word	0x08020f2e
 8013e14:	00000000 	.word	0x00000000
 8013e18:	08013b77 	.word	0x08013b77

08013e1c <_printf_common>:
 8013e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e20:	4691      	mov	r9, r2
 8013e22:	461f      	mov	r7, r3
 8013e24:	688a      	ldr	r2, [r1, #8]
 8013e26:	690b      	ldr	r3, [r1, #16]
 8013e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	bfb8      	it	lt
 8013e30:	4613      	movlt	r3, r2
 8013e32:	f8c9 3000 	str.w	r3, [r9]
 8013e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	460c      	mov	r4, r1
 8013e3e:	b112      	cbz	r2, 8013e46 <_printf_common+0x2a>
 8013e40:	3301      	adds	r3, #1
 8013e42:	f8c9 3000 	str.w	r3, [r9]
 8013e46:	6823      	ldr	r3, [r4, #0]
 8013e48:	0699      	lsls	r1, r3, #26
 8013e4a:	bf42      	ittt	mi
 8013e4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013e50:	3302      	addmi	r3, #2
 8013e52:	f8c9 3000 	strmi.w	r3, [r9]
 8013e56:	6825      	ldr	r5, [r4, #0]
 8013e58:	f015 0506 	ands.w	r5, r5, #6
 8013e5c:	d107      	bne.n	8013e6e <_printf_common+0x52>
 8013e5e:	f104 0a19 	add.w	sl, r4, #25
 8013e62:	68e3      	ldr	r3, [r4, #12]
 8013e64:	f8d9 2000 	ldr.w	r2, [r9]
 8013e68:	1a9b      	subs	r3, r3, r2
 8013e6a:	42ab      	cmp	r3, r5
 8013e6c:	dc28      	bgt.n	8013ec0 <_printf_common+0xa4>
 8013e6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013e72:	6822      	ldr	r2, [r4, #0]
 8013e74:	3300      	adds	r3, #0
 8013e76:	bf18      	it	ne
 8013e78:	2301      	movne	r3, #1
 8013e7a:	0692      	lsls	r2, r2, #26
 8013e7c:	d42d      	bmi.n	8013eda <_printf_common+0xbe>
 8013e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e82:	4639      	mov	r1, r7
 8013e84:	4630      	mov	r0, r6
 8013e86:	47c0      	blx	r8
 8013e88:	3001      	adds	r0, #1
 8013e8a:	d020      	beq.n	8013ece <_printf_common+0xb2>
 8013e8c:	6823      	ldr	r3, [r4, #0]
 8013e8e:	68e5      	ldr	r5, [r4, #12]
 8013e90:	f8d9 2000 	ldr.w	r2, [r9]
 8013e94:	f003 0306 	and.w	r3, r3, #6
 8013e98:	2b04      	cmp	r3, #4
 8013e9a:	bf08      	it	eq
 8013e9c:	1aad      	subeq	r5, r5, r2
 8013e9e:	68a3      	ldr	r3, [r4, #8]
 8013ea0:	6922      	ldr	r2, [r4, #16]
 8013ea2:	bf0c      	ite	eq
 8013ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ea8:	2500      	movne	r5, #0
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	bfc4      	itt	gt
 8013eae:	1a9b      	subgt	r3, r3, r2
 8013eb0:	18ed      	addgt	r5, r5, r3
 8013eb2:	f04f 0900 	mov.w	r9, #0
 8013eb6:	341a      	adds	r4, #26
 8013eb8:	454d      	cmp	r5, r9
 8013eba:	d11a      	bne.n	8013ef2 <_printf_common+0xd6>
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	e008      	b.n	8013ed2 <_printf_common+0xb6>
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	4652      	mov	r2, sl
 8013ec4:	4639      	mov	r1, r7
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	47c0      	blx	r8
 8013eca:	3001      	adds	r0, #1
 8013ecc:	d103      	bne.n	8013ed6 <_printf_common+0xba>
 8013ece:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ed6:	3501      	adds	r5, #1
 8013ed8:	e7c3      	b.n	8013e62 <_printf_common+0x46>
 8013eda:	18e1      	adds	r1, r4, r3
 8013edc:	1c5a      	adds	r2, r3, #1
 8013ede:	2030      	movs	r0, #48	; 0x30
 8013ee0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ee4:	4422      	add	r2, r4
 8013ee6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013eee:	3302      	adds	r3, #2
 8013ef0:	e7c5      	b.n	8013e7e <_printf_common+0x62>
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	4622      	mov	r2, r4
 8013ef6:	4639      	mov	r1, r7
 8013ef8:	4630      	mov	r0, r6
 8013efa:	47c0      	blx	r8
 8013efc:	3001      	adds	r0, #1
 8013efe:	d0e6      	beq.n	8013ece <_printf_common+0xb2>
 8013f00:	f109 0901 	add.w	r9, r9, #1
 8013f04:	e7d8      	b.n	8013eb8 <_printf_common+0x9c>
	...

08013f08 <_printf_i>:
 8013f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013f10:	460c      	mov	r4, r1
 8013f12:	7e09      	ldrb	r1, [r1, #24]
 8013f14:	b085      	sub	sp, #20
 8013f16:	296e      	cmp	r1, #110	; 0x6e
 8013f18:	4617      	mov	r7, r2
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	4698      	mov	r8, r3
 8013f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f20:	f000 80b3 	beq.w	801408a <_printf_i+0x182>
 8013f24:	d822      	bhi.n	8013f6c <_printf_i+0x64>
 8013f26:	2963      	cmp	r1, #99	; 0x63
 8013f28:	d036      	beq.n	8013f98 <_printf_i+0x90>
 8013f2a:	d80a      	bhi.n	8013f42 <_printf_i+0x3a>
 8013f2c:	2900      	cmp	r1, #0
 8013f2e:	f000 80b9 	beq.w	80140a4 <_printf_i+0x19c>
 8013f32:	2958      	cmp	r1, #88	; 0x58
 8013f34:	f000 8083 	beq.w	801403e <_printf_i+0x136>
 8013f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013f40:	e032      	b.n	8013fa8 <_printf_i+0xa0>
 8013f42:	2964      	cmp	r1, #100	; 0x64
 8013f44:	d001      	beq.n	8013f4a <_printf_i+0x42>
 8013f46:	2969      	cmp	r1, #105	; 0x69
 8013f48:	d1f6      	bne.n	8013f38 <_printf_i+0x30>
 8013f4a:	6820      	ldr	r0, [r4, #0]
 8013f4c:	6813      	ldr	r3, [r2, #0]
 8013f4e:	0605      	lsls	r5, r0, #24
 8013f50:	f103 0104 	add.w	r1, r3, #4
 8013f54:	d52a      	bpl.n	8013fac <_printf_i+0xa4>
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	6011      	str	r1, [r2, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	da03      	bge.n	8013f66 <_printf_i+0x5e>
 8013f5e:	222d      	movs	r2, #45	; 0x2d
 8013f60:	425b      	negs	r3, r3
 8013f62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013f66:	486f      	ldr	r0, [pc, #444]	; (8014124 <_printf_i+0x21c>)
 8013f68:	220a      	movs	r2, #10
 8013f6a:	e039      	b.n	8013fe0 <_printf_i+0xd8>
 8013f6c:	2973      	cmp	r1, #115	; 0x73
 8013f6e:	f000 809d 	beq.w	80140ac <_printf_i+0x1a4>
 8013f72:	d808      	bhi.n	8013f86 <_printf_i+0x7e>
 8013f74:	296f      	cmp	r1, #111	; 0x6f
 8013f76:	d020      	beq.n	8013fba <_printf_i+0xb2>
 8013f78:	2970      	cmp	r1, #112	; 0x70
 8013f7a:	d1dd      	bne.n	8013f38 <_printf_i+0x30>
 8013f7c:	6823      	ldr	r3, [r4, #0]
 8013f7e:	f043 0320 	orr.w	r3, r3, #32
 8013f82:	6023      	str	r3, [r4, #0]
 8013f84:	e003      	b.n	8013f8e <_printf_i+0x86>
 8013f86:	2975      	cmp	r1, #117	; 0x75
 8013f88:	d017      	beq.n	8013fba <_printf_i+0xb2>
 8013f8a:	2978      	cmp	r1, #120	; 0x78
 8013f8c:	d1d4      	bne.n	8013f38 <_printf_i+0x30>
 8013f8e:	2378      	movs	r3, #120	; 0x78
 8013f90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f94:	4864      	ldr	r0, [pc, #400]	; (8014128 <_printf_i+0x220>)
 8013f96:	e055      	b.n	8014044 <_printf_i+0x13c>
 8013f98:	6813      	ldr	r3, [r2, #0]
 8013f9a:	1d19      	adds	r1, r3, #4
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	6011      	str	r1, [r2, #0]
 8013fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e08c      	b.n	80140c6 <_printf_i+0x1be>
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	6011      	str	r1, [r2, #0]
 8013fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013fb4:	bf18      	it	ne
 8013fb6:	b21b      	sxthne	r3, r3
 8013fb8:	e7cf      	b.n	8013f5a <_printf_i+0x52>
 8013fba:	6813      	ldr	r3, [r2, #0]
 8013fbc:	6825      	ldr	r5, [r4, #0]
 8013fbe:	1d18      	adds	r0, r3, #4
 8013fc0:	6010      	str	r0, [r2, #0]
 8013fc2:	0628      	lsls	r0, r5, #24
 8013fc4:	d501      	bpl.n	8013fca <_printf_i+0xc2>
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	e002      	b.n	8013fd0 <_printf_i+0xc8>
 8013fca:	0668      	lsls	r0, r5, #25
 8013fcc:	d5fb      	bpl.n	8013fc6 <_printf_i+0xbe>
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	4854      	ldr	r0, [pc, #336]	; (8014124 <_printf_i+0x21c>)
 8013fd2:	296f      	cmp	r1, #111	; 0x6f
 8013fd4:	bf14      	ite	ne
 8013fd6:	220a      	movne	r2, #10
 8013fd8:	2208      	moveq	r2, #8
 8013fda:	2100      	movs	r1, #0
 8013fdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013fe0:	6865      	ldr	r5, [r4, #4]
 8013fe2:	60a5      	str	r5, [r4, #8]
 8013fe4:	2d00      	cmp	r5, #0
 8013fe6:	f2c0 8095 	blt.w	8014114 <_printf_i+0x20c>
 8013fea:	6821      	ldr	r1, [r4, #0]
 8013fec:	f021 0104 	bic.w	r1, r1, #4
 8013ff0:	6021      	str	r1, [r4, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d13d      	bne.n	8014072 <_printf_i+0x16a>
 8013ff6:	2d00      	cmp	r5, #0
 8013ff8:	f040 808e 	bne.w	8014118 <_printf_i+0x210>
 8013ffc:	4665      	mov	r5, ip
 8013ffe:	2a08      	cmp	r2, #8
 8014000:	d10b      	bne.n	801401a <_printf_i+0x112>
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	07db      	lsls	r3, r3, #31
 8014006:	d508      	bpl.n	801401a <_printf_i+0x112>
 8014008:	6923      	ldr	r3, [r4, #16]
 801400a:	6862      	ldr	r2, [r4, #4]
 801400c:	429a      	cmp	r2, r3
 801400e:	bfde      	ittt	le
 8014010:	2330      	movle	r3, #48	; 0x30
 8014012:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014016:	f105 35ff 	addle.w	r5, r5, #4294967295
 801401a:	ebac 0305 	sub.w	r3, ip, r5
 801401e:	6123      	str	r3, [r4, #16]
 8014020:	f8cd 8000 	str.w	r8, [sp]
 8014024:	463b      	mov	r3, r7
 8014026:	aa03      	add	r2, sp, #12
 8014028:	4621      	mov	r1, r4
 801402a:	4630      	mov	r0, r6
 801402c:	f7ff fef6 	bl	8013e1c <_printf_common>
 8014030:	3001      	adds	r0, #1
 8014032:	d14d      	bne.n	80140d0 <_printf_i+0x1c8>
 8014034:	f04f 30ff 	mov.w	r0, #4294967295
 8014038:	b005      	add	sp, #20
 801403a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801403e:	4839      	ldr	r0, [pc, #228]	; (8014124 <_printf_i+0x21c>)
 8014040:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014044:	6813      	ldr	r3, [r2, #0]
 8014046:	6821      	ldr	r1, [r4, #0]
 8014048:	1d1d      	adds	r5, r3, #4
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	6015      	str	r5, [r2, #0]
 801404e:	060a      	lsls	r2, r1, #24
 8014050:	d50b      	bpl.n	801406a <_printf_i+0x162>
 8014052:	07ca      	lsls	r2, r1, #31
 8014054:	bf44      	itt	mi
 8014056:	f041 0120 	orrmi.w	r1, r1, #32
 801405a:	6021      	strmi	r1, [r4, #0]
 801405c:	b91b      	cbnz	r3, 8014066 <_printf_i+0x15e>
 801405e:	6822      	ldr	r2, [r4, #0]
 8014060:	f022 0220 	bic.w	r2, r2, #32
 8014064:	6022      	str	r2, [r4, #0]
 8014066:	2210      	movs	r2, #16
 8014068:	e7b7      	b.n	8013fda <_printf_i+0xd2>
 801406a:	064d      	lsls	r5, r1, #25
 801406c:	bf48      	it	mi
 801406e:	b29b      	uxthmi	r3, r3
 8014070:	e7ef      	b.n	8014052 <_printf_i+0x14a>
 8014072:	4665      	mov	r5, ip
 8014074:	fbb3 f1f2 	udiv	r1, r3, r2
 8014078:	fb02 3311 	mls	r3, r2, r1, r3
 801407c:	5cc3      	ldrb	r3, [r0, r3]
 801407e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014082:	460b      	mov	r3, r1
 8014084:	2900      	cmp	r1, #0
 8014086:	d1f5      	bne.n	8014074 <_printf_i+0x16c>
 8014088:	e7b9      	b.n	8013ffe <_printf_i+0xf6>
 801408a:	6813      	ldr	r3, [r2, #0]
 801408c:	6825      	ldr	r5, [r4, #0]
 801408e:	6961      	ldr	r1, [r4, #20]
 8014090:	1d18      	adds	r0, r3, #4
 8014092:	6010      	str	r0, [r2, #0]
 8014094:	0628      	lsls	r0, r5, #24
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	d501      	bpl.n	801409e <_printf_i+0x196>
 801409a:	6019      	str	r1, [r3, #0]
 801409c:	e002      	b.n	80140a4 <_printf_i+0x19c>
 801409e:	066a      	lsls	r2, r5, #25
 80140a0:	d5fb      	bpl.n	801409a <_printf_i+0x192>
 80140a2:	8019      	strh	r1, [r3, #0]
 80140a4:	2300      	movs	r3, #0
 80140a6:	6123      	str	r3, [r4, #16]
 80140a8:	4665      	mov	r5, ip
 80140aa:	e7b9      	b.n	8014020 <_printf_i+0x118>
 80140ac:	6813      	ldr	r3, [r2, #0]
 80140ae:	1d19      	adds	r1, r3, #4
 80140b0:	6011      	str	r1, [r2, #0]
 80140b2:	681d      	ldr	r5, [r3, #0]
 80140b4:	6862      	ldr	r2, [r4, #4]
 80140b6:	2100      	movs	r1, #0
 80140b8:	4628      	mov	r0, r5
 80140ba:	f7ec f8a9 	bl	8000210 <memchr>
 80140be:	b108      	cbz	r0, 80140c4 <_printf_i+0x1bc>
 80140c0:	1b40      	subs	r0, r0, r5
 80140c2:	6060      	str	r0, [r4, #4]
 80140c4:	6863      	ldr	r3, [r4, #4]
 80140c6:	6123      	str	r3, [r4, #16]
 80140c8:	2300      	movs	r3, #0
 80140ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140ce:	e7a7      	b.n	8014020 <_printf_i+0x118>
 80140d0:	6923      	ldr	r3, [r4, #16]
 80140d2:	462a      	mov	r2, r5
 80140d4:	4639      	mov	r1, r7
 80140d6:	4630      	mov	r0, r6
 80140d8:	47c0      	blx	r8
 80140da:	3001      	adds	r0, #1
 80140dc:	d0aa      	beq.n	8014034 <_printf_i+0x12c>
 80140de:	6823      	ldr	r3, [r4, #0]
 80140e0:	079b      	lsls	r3, r3, #30
 80140e2:	d413      	bmi.n	801410c <_printf_i+0x204>
 80140e4:	68e0      	ldr	r0, [r4, #12]
 80140e6:	9b03      	ldr	r3, [sp, #12]
 80140e8:	4298      	cmp	r0, r3
 80140ea:	bfb8      	it	lt
 80140ec:	4618      	movlt	r0, r3
 80140ee:	e7a3      	b.n	8014038 <_printf_i+0x130>
 80140f0:	2301      	movs	r3, #1
 80140f2:	464a      	mov	r2, r9
 80140f4:	4639      	mov	r1, r7
 80140f6:	4630      	mov	r0, r6
 80140f8:	47c0      	blx	r8
 80140fa:	3001      	adds	r0, #1
 80140fc:	d09a      	beq.n	8014034 <_printf_i+0x12c>
 80140fe:	3501      	adds	r5, #1
 8014100:	68e3      	ldr	r3, [r4, #12]
 8014102:	9a03      	ldr	r2, [sp, #12]
 8014104:	1a9b      	subs	r3, r3, r2
 8014106:	42ab      	cmp	r3, r5
 8014108:	dcf2      	bgt.n	80140f0 <_printf_i+0x1e8>
 801410a:	e7eb      	b.n	80140e4 <_printf_i+0x1dc>
 801410c:	2500      	movs	r5, #0
 801410e:	f104 0919 	add.w	r9, r4, #25
 8014112:	e7f5      	b.n	8014100 <_printf_i+0x1f8>
 8014114:	2b00      	cmp	r3, #0
 8014116:	d1ac      	bne.n	8014072 <_printf_i+0x16a>
 8014118:	7803      	ldrb	r3, [r0, #0]
 801411a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801411e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014122:	e76c      	b.n	8013ffe <_printf_i+0xf6>
 8014124:	08020f35 	.word	0x08020f35
 8014128:	08020f46 	.word	0x08020f46

0801412c <nanf>:
 801412c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014134 <nanf+0x8>
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop
 8014134:	7fc00000 	.word	0x7fc00000

08014138 <strncmp>:
 8014138:	b510      	push	{r4, lr}
 801413a:	b16a      	cbz	r2, 8014158 <strncmp+0x20>
 801413c:	3901      	subs	r1, #1
 801413e:	1884      	adds	r4, r0, r2
 8014140:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014144:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014148:	4293      	cmp	r3, r2
 801414a:	d103      	bne.n	8014154 <strncmp+0x1c>
 801414c:	42a0      	cmp	r0, r4
 801414e:	d001      	beq.n	8014154 <strncmp+0x1c>
 8014150:	2b00      	cmp	r3, #0
 8014152:	d1f5      	bne.n	8014140 <strncmp+0x8>
 8014154:	1a98      	subs	r0, r3, r2
 8014156:	bd10      	pop	{r4, pc}
 8014158:	4610      	mov	r0, r2
 801415a:	e7fc      	b.n	8014156 <strncmp+0x1e>

0801415c <__ascii_wctomb>:
 801415c:	b149      	cbz	r1, 8014172 <__ascii_wctomb+0x16>
 801415e:	2aff      	cmp	r2, #255	; 0xff
 8014160:	bf85      	ittet	hi
 8014162:	238a      	movhi	r3, #138	; 0x8a
 8014164:	6003      	strhi	r3, [r0, #0]
 8014166:	700a      	strbls	r2, [r1, #0]
 8014168:	f04f 30ff 	movhi.w	r0, #4294967295
 801416c:	bf98      	it	ls
 801416e:	2001      	movls	r0, #1
 8014170:	4770      	bx	lr
 8014172:	4608      	mov	r0, r1
 8014174:	4770      	bx	lr

08014176 <memmove>:
 8014176:	4288      	cmp	r0, r1
 8014178:	b510      	push	{r4, lr}
 801417a:	eb01 0302 	add.w	r3, r1, r2
 801417e:	d807      	bhi.n	8014190 <memmove+0x1a>
 8014180:	1e42      	subs	r2, r0, #1
 8014182:	4299      	cmp	r1, r3
 8014184:	d00a      	beq.n	801419c <memmove+0x26>
 8014186:	f811 4b01 	ldrb.w	r4, [r1], #1
 801418a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801418e:	e7f8      	b.n	8014182 <memmove+0xc>
 8014190:	4283      	cmp	r3, r0
 8014192:	d9f5      	bls.n	8014180 <memmove+0xa>
 8014194:	1881      	adds	r1, r0, r2
 8014196:	1ad2      	subs	r2, r2, r3
 8014198:	42d3      	cmn	r3, r2
 801419a:	d100      	bne.n	801419e <memmove+0x28>
 801419c:	bd10      	pop	{r4, pc}
 801419e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80141a6:	e7f7      	b.n	8014198 <memmove+0x22>

080141a8 <_realloc_r>:
 80141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141aa:	4607      	mov	r7, r0
 80141ac:	4614      	mov	r4, r2
 80141ae:	460e      	mov	r6, r1
 80141b0:	b921      	cbnz	r1, 80141bc <_realloc_r+0x14>
 80141b2:	4611      	mov	r1, r2
 80141b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141b8:	f7fd bdc2 	b.w	8011d40 <_malloc_r>
 80141bc:	b922      	cbnz	r2, 80141c8 <_realloc_r+0x20>
 80141be:	f7fd fd71 	bl	8011ca4 <_free_r>
 80141c2:	4625      	mov	r5, r4
 80141c4:	4628      	mov	r0, r5
 80141c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c8:	f000 f814 	bl	80141f4 <_malloc_usable_size_r>
 80141cc:	42a0      	cmp	r0, r4
 80141ce:	d20f      	bcs.n	80141f0 <_realloc_r+0x48>
 80141d0:	4621      	mov	r1, r4
 80141d2:	4638      	mov	r0, r7
 80141d4:	f7fd fdb4 	bl	8011d40 <_malloc_r>
 80141d8:	4605      	mov	r5, r0
 80141da:	2800      	cmp	r0, #0
 80141dc:	d0f2      	beq.n	80141c4 <_realloc_r+0x1c>
 80141de:	4631      	mov	r1, r6
 80141e0:	4622      	mov	r2, r4
 80141e2:	f7fd fd4b 	bl	8011c7c <memcpy>
 80141e6:	4631      	mov	r1, r6
 80141e8:	4638      	mov	r0, r7
 80141ea:	f7fd fd5b 	bl	8011ca4 <_free_r>
 80141ee:	e7e9      	b.n	80141c4 <_realloc_r+0x1c>
 80141f0:	4635      	mov	r5, r6
 80141f2:	e7e7      	b.n	80141c4 <_realloc_r+0x1c>

080141f4 <_malloc_usable_size_r>:
 80141f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141f8:	1f18      	subs	r0, r3, #4
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bfbc      	itt	lt
 80141fe:	580b      	ldrlt	r3, [r1, r0]
 8014200:	18c0      	addlt	r0, r0, r3
 8014202:	4770      	bx	lr

08014204 <_init>:
 8014204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014206:	bf00      	nop
 8014208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801420a:	bc08      	pop	{r3}
 801420c:	469e      	mov	lr, r3
 801420e:	4770      	bx	lr

08014210 <_fini>:
 8014210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014212:	bf00      	nop
 8014214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014216:	bc08      	pop	{r3}
 8014218:	469e      	mov	lr, r3
 801421a:	4770      	bx	lr


Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ce70  080158c0  080158c0  000258c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022730  08022730  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08022730  08022730  00032730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022738  08022738  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022738  08022738  00032738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802273c  0802273c  0003273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08022740  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad2c  20000240  08022974  00040240  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000af6c  08022974  0004af6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e1a0  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000637c  00000000  00000000  0006e404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001db0  00000000  00000000  00074780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ad0  00000000  00000000  00076530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001face  00000000  00000000  00078000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000210bf  00000000  00000000  00097ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009dc24  00000000  00000000  000b8b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001567b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008748  00000000  00000000  0015682c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015874 	.word	0x08015874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	08015874 	.word	0x08015874

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:
#include "ap.h"

void lcdMain(void);

void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fcbf 	bl	8001944 <cliOpen>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <apMain>:

void apMain(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fd0:	f000 f91b 	bl	800120a <millis>
 8000fd4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fd6:	f000 f918 	bl	800120a <millis>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d302      	bcc.n	8000fec <apMain+0x22>
    {
      pre_time = millis();
 8000fe6:	f000 f910 	bl	800120a <millis>
 8000fea:	6078      	str	r0, [r7, #4]

    }
    //Ds18b20_ManualConvert();

    Sonar_measure();
 8000fec:	f004 f998 	bl	8005320 <Sonar_measure>
    tds_measure();
 8000ff0:	f004 fe62 	bl	8005cb8 <tds_measure>

    if(buttonGetPressed(_DEF_BUTTON1))
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fba1 	bl	800173c <buttonGetPressed>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <apMain+0x3e>
    {
    	ledOn(_DEF_LED1);
 8001000:	2000      	movs	r0, #0
 8001002:	f003 f9b5 	bl	8004370 <ledOn>
 8001006:	e002      	b.n	800100e <apMain+0x44>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001008:	2000      	movs	r0, #0
 800100a:	f003 f9d1 	bl	80043b0 <ledOff>
    }
    cliMain();
 800100e:	f000 fd51 	bl	8001ab4 <cliMain>
    lcdMain();
 8001012:	f000 f801 	bl	8001018 <lcdMain>
    if (millis()-pre_time >= 1000)
 8001016:	e7de      	b.n	8000fd6 <apMain+0xc>

08001018 <lcdMain>:
  }
}


void lcdMain(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 800101e:	f002 fb43 	bl	80036a8 <lcdIsInit>
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 809f 	bne.w	800116e <lcdMain+0x156>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 8001030:	f002 fd72 	bl	8003b18 <lcdDrawAvailable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 809a 	beq.w	8001170 <lcdMain+0x158>
  {
      lcdClearBuffer(black);
 800103c:	2000      	movs	r0, #0
 800103e:	f002 fb71 	bl	8003724 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 8001042:	2003      	movs	r0, #3
 8001044:	f003 f8b0 	bl	80041a8 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <lcdMain+0x15c>)
 800104a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f002 ff15 	bl	8003e80 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001056:	f002 fd47 	bl	8003ae8 <lcdGetFps>
 800105a:	4603      	mov	r3, r0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <lcdMain+0x160>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	2110      	movs	r1, #16
 8001066:	2000      	movs	r0, #0
 8001068:	f002 ff0a 	bl	8003e80 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 800106c:	f002 fd48 	bl	8003b00 <lcdGetFpsTime>
 8001070:	4603      	mov	r3, r0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <lcdMain+0x164>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	2120      	movs	r1, #32
 800107c:	2000      	movs	r0, #0
 800107e:	f002 feff 	bl	8003e80 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 8001082:	f000 f8c2 	bl	800120a <millis>
 8001086:	4603      	mov	r3, r0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <lcdMain+0x164>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	2000      	movs	r0, #0
 8001094:	f002 fef4 	bl	8003e80 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2305      	movs	r3, #5
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2311      	movs	r3, #17
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	2110      	movs	r1, #16
 80010a8:	2046      	movs	r0, #70	; 0x46
 80010aa:	f002 fbe9 	bl	8003880 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, blue);
 80010ae:	231f      	movs	r3, #31
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2305      	movs	r3, #5
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	230f      	movs	r3, #15
 80010b8:	2232      	movs	r2, #50	; 0x32
 80010ba:	2111      	movs	r1, #17
 80010bc:	2047      	movs	r0, #71	; 0x47
 80010be:	f002 fce0 	bl	8003a82 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f003 f870 	bl	80041a8 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <lcdMain+0x168>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	2115      	movs	r1, #21
 80010d0:	204b      	movs	r0, #75	; 0x4b
 80010d2:	f002 fed5 	bl	8003e80 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f003 f866 	bl	80041a8 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3d 도" , (int32_t) ds18b20[0].Temperature);
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <lcdMain+0x16c>)
 80010de:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <lcdMain+0x170>)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 fec3 	bl	8003e80 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <lcdMain+0x174>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <lcdMain+0x178>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <lcdMain+0x17c>)
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	2150      	movs	r1, #80	; 0x50
 8001110:	2000      	movs	r0, #0
 8001112:	f002 feb5 	bl	8003e80 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4d ppm" , (int32_t) tds_tbl[0].filter_tdsValue);
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <lcdMain+0x180>)
 8001118:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <lcdMain+0x184>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	2160      	movs	r1, #96	; 0x60
 800112e:	2000      	movs	r0, #0
 8001130:	f002 fea6 	bl	8003e80 <lcdPrintf>

      lcdDrawFillRect( 0, 118, 10, 10, red);
 8001134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	230a      	movs	r3, #10
 800113c:	220a      	movs	r2, #10
 800113e:	2176      	movs	r1, #118	; 0x76
 8001140:	2000      	movs	r0, #0
 8001142:	f002 fe6e 	bl	8003e22 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 8001146:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230a      	movs	r3, #10
 800114e:	220a      	movs	r2, #10
 8001150:	2176      	movs	r1, #118	; 0x76
 8001152:	200a      	movs	r0, #10
 8001154:	f002 fe65 	bl	8003e22 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 8001158:	231f      	movs	r3, #31
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230a      	movs	r3, #10
 800115e:	220a      	movs	r2, #10
 8001160:	2176      	movs	r1, #118	; 0x76
 8001162:	2014      	movs	r0, #20
 8001164:	f002 fe5d 	bl	8003e22 <lcdDrawFillRect>

      lcdRequestDraw();
 8001168:	f002 fcec 	bl	8003b44 <lcdRequestDraw>
 800116c:	e000      	b.n	8001170 <lcdMain+0x158>
    return;
 800116e:	bf00      	nop
  }
}
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	080158c0 	.word	0x080158c0
 8001178:	080158dc 	.word	0x080158dc
 800117c:	080158e4 	.word	0x080158e4
 8001180:	080158ec 	.word	0x080158ec
 8001184:	2000a8e8 	.word	0x2000a8e8
 8001188:	080158f4 	.word	0x080158f4
 800118c:	2000a2c4 	.word	0x2000a2c4
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	08015908 	.word	0x08015908
 8001198:	2000ad94 	.word	0x2000ad94
 800119c:	0801591c 	.word	0x0801591c

080011a0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_Init();
 80011a6:	f00a f94d 	bl	800b444 <HAL_Init>
  SystemClock_Config();
 80011aa:	f000 f835 	bl	8001218 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <bspInit+0x50>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <bspInit+0x50>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <bspInit+0x50>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <bspInit+0x50>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <bspInit+0x50>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <bspInit+0x50>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <delay>:

void delay(uint32_t ms)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f00a f993 	bl	800b528 <HAL_Delay>
#endif
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <millis>:

uint32_t millis(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800120e:	f00a f97f 	bl	800b510 <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f010 ff43 	bl	80120b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <SystemClock_Config+0xc8>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <SystemClock_Config+0xcc>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <SystemClock_Config+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001288:	2319      	movs	r3, #25
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800128c:	23c0      	movs	r3, #192	; 0xc0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f00b fe8b 	bl	800cfb8 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a8:	f000 f81e 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00c f8e5 	bl	800d498 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d4:	f000 f808 	bl	80012e8 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	; 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x6>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f00a f8ac 	bl	800b4e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ADC_IRQHandler+0x10>)
 800139a:	f00a f92a 	bl	800b5f2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000adbc 	.word	0x2000adbc

080013a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM3_IRQHandler+0x10>)
 80013ae:	f00e fb37 	bl	800fa20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000ac88 	.word	0x2000ac88

080013bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <SPI1_IRQHandler+0x10>)
 80013c2:	f00e f819 	bl	800f3f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000acdc 	.word	0x2000acdc

080013d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART1_IRQHandler+0x10>)
 80013d6:	f00f fa19 	bl	801080c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000af24 	.word	0x2000af24

080013e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <SDIO_IRQHandler+0x10>)
 80013ea:	f00c fc8b 	bl	800dd04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000ac04 	.word	0x2000ac04

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f00b f8b7 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000ae04 	.word	0x2000ae04

0800140c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA2_Stream2_IRQHandler+0x10>)
 8001412:	f00b f8ad 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000aec4 	.word	0x2000aec4

08001420 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Stream3_IRQHandler+0x10>)
 8001426:	f00b f8a3 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000aba4 	.word	0x2000aba4

08001434 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Stream5_IRQHandler+0x10>)
 800143a:	f00b f899 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000ad34 	.word	0x2000ad34

08001448 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2_Stream6_IRQHandler+0x10>)
 800144e:	f00b f88f 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000ab44 	.word	0x2000ab44

0800145c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream7_IRQHandler+0x10>)
 8001462:	f00b f885 	bl	800c570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000ae64 	.word	0x2000ae64

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f010 fdc2 	bl	8012028 <__errno>
 80014a4:	4602      	mov	r2, r0
 80014a6:	230c      	movs	r3, #12
 80014a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	2000025c 	.word	0x2000025c
 80014d8:	2000af70 	.word	0x2000af70

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x28>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x28>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0x28>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f6:	609a      	str	r2, [r3, #8]
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd3 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f010 fd7d 	bl	8012034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f010 fd69 	bl	8012010 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	08022740 	.word	0x08022740
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8001550:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8001554:	2000af6c 	.word	0x2000af6c

08001558 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <DMA1_Stream0_IRQHandler>

0800155a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	60da      	str	r2, [r3, #12]

  return ret;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e026      	b.n	80015f4 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	441a      	add	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	440b      	add	r3, r1
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d00c      	beq.n	80015e8 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6892      	ldr	r2, [r2, #8]
 80015d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015dc:	fb02 f201 	mul.w	r2, r2, r1
 80015e0:	1a9a      	subs	r2, r3, r2
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	e002      	b.n	80015ee <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
      break;
 80015ec:	e006      	b.n	80015fc <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3301      	adds	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8d4      	bhi.n	80015a6 <qbufferRead+0x16>
    }
  }

  return ret;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6892      	ldr	r2, [r2, #8]
 8001620:	fbb3 f1f2 	udiv	r1, r3, r2
 8001624:	fb02 f201 	mul.w	r2, r2, r1
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

  return ret;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <DWT_Delay_Init+0x58>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <DWT_Delay_Init+0x58>)
 8001646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DWT_Delay_Init+0x58>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <DWT_Delay_Init+0x58>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <DWT_Delay_Init+0x5c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001676:	bf00      	nop
     __ASM volatile ("NOP");
 8001678:	bf00      	nop
     __ASM volatile ("NOP");
 800167a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <DWT_Delay_Init+0x5c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001688:	2301      	movs	r3, #1
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000edf0 	.word	0xe000edf0
 8001698:	e0001000 	.word	0xe0001000

0800169c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  bool ret = true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <buttonInit+0x90>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <buttonInit+0x90>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <buttonInit+0x90>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	e019      	b.n	8001712 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <buttonInit+0x94>)
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <buttonInit+0x94>)
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f00b f9a6 	bl	800ca58 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dde2      	ble.n	80016de <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <buttonInit+0x98>)
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <buttonInit+0x9c>)
 800171c:	f000 feea 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8001720:	7efb      	ldrb	r3, [r7, #27]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	20000004 	.word	0x20000004
 8001734:	0800181d 	.word	0x0800181d
 8001738:	0801592c 	.word	0x0801592c

0800173c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <buttonGetPressed+0xdc>)
 8001756:	4413      	add	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <buttonGetPressed+0x28>
  {
    return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e054      	b.n	800180e <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	7a9b      	ldrb	r3, [r3, #10]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <buttonGetPressed+0x36>
 800176c:	2b01      	cmp	r3, #1
 800176e:	d018      	beq.n	80017a2 <buttonGetPressed+0x66>
 8001770:	e04c      	b.n	800180c <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f00b fbce 	bl	800cf20 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d13a      	bne.n	8001806 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8001790:	f7ff fd3b 	bl	800120a <millis>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2201      	movs	r2, #1
 800179e:	729a      	strb	r2, [r3, #10]
  		  }
  		  break;
 80017a0:	e031      	b.n	8001806 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f00b fbb6 	bl	800cf20 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	7a1b      	ldrb	r3, [r3, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d114      	bne.n	80017ea <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80017c0:	f7ff fd23 	bl	800120a <millis>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	1ad2      	subs	r2, r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d91a      	bls.n	800180a <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2201      	movs	r2, #1
 80017d8:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	7a5b      	ldrb	r3, [r3, #9]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 80017e8:	e00f      	b.n	800180a <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	7a5b      	ldrb	r3, [r3, #9]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
		  break;
 8001804:	e001      	b.n	800180a <buttonGetPressed+0xce>
  		  break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <buttonGetPressed+0xd0>
		  break;
 800180a:	bf00      	nop
  }
  return ret;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004

0800181c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d128      	bne.n	8001882 <cliButton+0x66>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4919      	ldr	r1, [pc, #100]	; (800189c <cliButton+0x80>)
 8001836:	2000      	movs	r0, #0
 8001838:	4798      	blx	r3
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001840:	e018      	b.n	8001874 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	e00c      	b.n	8001862 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff75 	bl	800173c <buttonGetPressed>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <cliButton+0x84>)
 8001858:	f000 fd3c 	bl	80022d4 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3301      	adds	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	ddef      	ble.n	8001848 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <cliButton+0x88>)
 800186a:	f000 fd33 	bl	80022d4 <cliPrintf>

      delay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f7ff fcc0 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8001874:	f000 fe28 	bl	80024c8 <cliKeepLoop>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e1      	bne.n	8001842 <cliButton+0x26>
    }

    ret = true;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <cliButton+0x8c>)
 8001890:	f000 fd20 	bl	80022d4 <cliPrintf>
  }
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	08015934 	.word	0x08015934
 80018a0:	0801593c 	.word	0x0801593c
 80018a4:	08015940 	.word	0x08015940
 80018a8:	08015944 	.word	0x08015944

080018ac <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <cliInit+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <cliInit+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <cliInit+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <cliInit+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <cliInit+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <cliInit+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <cliInit+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <cliInit+0x74>)
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <cliInit+0x78>)
 80018e6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <cliInit+0x74>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <cliInit+0x7c>)
 80018ee:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <cliInit+0x74>)
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <cliInit+0x80>)
 80018f6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <cliInit+0x74>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <cliInit+0x84>)
 80018fe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <cliInit+0x74>)
 8001904:	f000 fb5c 	bl	8001fc0 <cliLineClean>


  cliAdd("help", cliShowList);
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <cliInit+0x88>)
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <cliInit+0x8c>)
 800190c:	f000 fdf2 	bl	80024f4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001910:	490a      	ldr	r1, [pc, #40]	; (800193c <cliInit+0x90>)
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <cliInit+0x94>)
 8001914:	f000 fdee 	bl	80024f4 <cliAdd>

  return true;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000a4a0 	.word	0x2000a4a0
 8001924:	08002385 	.word	0x08002385
 8001928:	080023d5 	.word	0x080023d5
 800192c:	0800242d 	.word	0x0800242d
 8001930:	08002475 	.word	0x08002475
 8001934:	08002589 	.word	0x08002589
 8001938:	08015954 	.word	0x08015954
 800193c:	080025f9 	.word	0x080025f9
 8001940:	0801595c 	.word	0x0801595c

08001944 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <cliOpen+0x38>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <cliOpen+0x38>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f004 fb8b 	bl	800607c <uartOpen>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <cliOpen+0x38>)
 800196c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <cliOpen+0x38>)
 8001970:	7a1b      	ldrb	r3, [r3, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000a4a0 	.word	0x2000a4a0

08001980 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <cliShowLog+0xdc>)
 800198a:	7a5b      	ldrb	r3, [r3, #9]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d061      	beq.n	8001a54 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a98      	ldrb	r0, [r3, #10]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800199a:	461a      	mov	r2, r3
 800199c:	4930      	ldr	r1, [pc, #192]	; (8001a60 <cliShowLog+0xe0>)
 800199e:	f004 fd23 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a98      	ldrb	r0, [r3, #10]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80019ac:	461a      	mov	r2, r3
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <cliShowLog+0xe4>)
 80019b0:	f004 fd1a 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a98      	ldrb	r0, [r3, #10]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80019be:	461a      	mov	r2, r3
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <cliShowLog+0xe8>)
 80019c2:	f004 fd11 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7a98      	ldrb	r0, [r3, #10]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80019d0:	461a      	mov	r2, r3
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <cliShowLog+0xec>)
 80019d4:	f004 fd08 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a98      	ldrb	r0, [r3, #10]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019e2:	461a      	mov	r2, r3
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <cliShowLog+0xf0>)
 80019e6:	f004 fcff 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7a98      	ldrb	r0, [r3, #10]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019f4:	461a      	mov	r2, r3
 80019f6:	491f      	ldr	r1, [pc, #124]	; (8001a74 <cliShowLog+0xf4>)
 80019f8:	f004 fcf6 	bl	80063e8 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a98      	ldrb	r0, [r3, #10]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a06:	461a      	mov	r2, r3
 8001a08:	491b      	ldr	r1, [pc, #108]	; (8001a78 <cliShowLog+0xf8>)
 8001a0a:	f004 fced 	bl	80063e8 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e012      	b.n	8001a3a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a98      	ldrb	r0, [r3, #10]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <cliShowLog+0xfc>)
 8001a30:	f004 fcda 	bl	80063e8 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	dbe5      	blt.n	8001a14 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a9b      	ldrb	r3, [r3, #10]
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <cliShowLog+0x100>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fcca 	bl	80063e8 <uartPrintf>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a4a0 	.word	0x2000a4a0
 8001a60:	08015960 	.word	0x08015960
 8001a64:	08015970 	.word	0x08015970
 8001a68:	08015980 	.word	0x08015980
 8001a6c:	08015990 	.word	0x08015990
 8001a70:	080159a0 	.word	0x080159a0
 8001a74:	080159b0 	.word	0x080159b0
 8001a78:	080159c0 	.word	0x080159c0
 8001a7c:	080159d0 	.word	0x080159d0
 8001a80:	080159e0 	.word	0x080159e0

08001a84 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <cliShowPrompt+0x28>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fca8 	bl	80063e8 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <cliShowPrompt+0x2c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fca2 	bl	80063e8 <uartPrintf>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	080159e4 	.word	0x080159e4
 8001ab0:	080159e8 	.word	0x080159e8

08001ab4 <cliMain>:

bool cliMain(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <cliMain+0x40>)
 8001aba:	7a1b      	ldrb	r3, [r3, #8]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <cliMain+0x16>
  {
    return false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e012      	b.n	8001af0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <cliMain+0x40>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fbe6 	bl	80062a0 <uartAvailable>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <cliMain+0x40>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fc24 	bl	800632c <uartRead>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <cliMain+0x40>)
 8001aea:	f000 f805 	bl	8001af8 <cliUpdate>
  }

  return true;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000a4a0 	.word	0x2000a4a0

08001af8 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001b10:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7c1b      	ldrb	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8165 	bne.w	8001de6 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b0d      	cmp	r3, #13
 8001b20:	d009      	beq.n	8001b36 <cliUpdate+0x3e>
 8001b22:	2b0d      	cmp	r3, #13
 8001b24:	dc02      	bgt.n	8001b2c <cliUpdate+0x34>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d065      	beq.n	8001bf6 <cliUpdate+0xfe>
 8001b2a:	e0d4      	b.n	8001cd6 <cliUpdate+0x1de>
 8001b2c:	2b1b      	cmp	r3, #27
 8001b2e:	d01c      	beq.n	8001b6a <cliUpdate+0x72>
 8001b30:	2b7f      	cmp	r3, #127	; 0x7f
 8001b32:	d01e      	beq.n	8001b72 <cliUpdate+0x7a>
 8001b34:	e0cf      	b.n	8001cd6 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa57 	bl	8001ff4 <cliLineAdd>
          cliRunCmd(p_cli);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fb22 	bl	8002190 <cliRunCmd>
        }

        line->count = 0;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff8e 	bl	8001a84 <cliShowPrompt>
        break;
 8001b68:	e144      	b.n	8001df4 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	741a      	strb	r2, [r3, #16]
        break;
 8001b70:	e140      	b.n	8001df4 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	f080 8133 	bcs.w	8001dea <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b94:	2301      	movs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	e013      	b.n	8001bc2 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	441a      	add	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	4619      	mov	r1, r3
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	69f9      	ldr	r1, [r7, #28]
 8001bb6:	5c89      	ldrb	r1, [r1, r2]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbe7      	blt.n	8001b9a <cliUpdate+0xa2>
          }

          line->count--;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be0:	461a      	mov	r2, r3
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	498e      	ldr	r1, [pc, #568]	; (8001e28 <cliUpdate+0x330>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 fbfa 	bl	80063e8 <uartPrintf>
        }
        break;
 8001bf4:	e0f9      	b.n	8001dea <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d055      	beq.n	8001cac <cliUpdate+0x1b4>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d050      	beq.n	8001cac <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10e      	bne.n	8001c38 <cliUpdate+0x140>
          {
            line->count--;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c30:	461a      	mov	r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d231      	bcs.n	8001cac <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	e013      	b.n	8001c86 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c64:	461a      	mov	r2, r3
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	441a      	add	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	4619      	mov	r1, r3
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	440b      	add	r3, r1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	5c89      	ldrb	r1, [r1, r2]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	3301      	adds	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	7ebb      	ldrb	r3, [r7, #26]
 8001c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbe7      	blt.n	8001c5e <cliUpdate+0x166>
            }

            line->count--;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 809b 	beq.w	8001dee <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4957      	ldr	r1, [pc, #348]	; (8001e2c <cliUpdate+0x334>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fb8a 	bl	80063e8 <uartPrintf>
        }
        break;
 8001cd4:	e08b      	b.n	8001dee <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cdc:	3301      	adds	r3, #1
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	f280 8084 	bge.w	8001df2 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d124      	bne.n	8001d44 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	1cf9      	adds	r1, r7, #3
 8001d00:	2201      	movs	r2, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fb38 	bl	8006378 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	461a      	mov	r2, r3
 8001d10:	78f9      	ldrb	r1, [r7, #3]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d24e      	bcs.n	8001df2 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e013      	b.n	8001d92 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	5c89      	ldrb	r1, [r1, r2]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	7e7b      	ldrb	r3, [r7, #25]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbe7      	blt.n	8001d6a <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	461a      	mov	r2, r3
 8001da2:	78f9      	ldrb	r1, [r7, #3]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dce:	461a      	mov	r2, r3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4914      	ldr	r1, [pc, #80]	; (8001e30 <cliUpdate+0x338>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 fb02 	bl	80063e8 <uartPrintf>
          }
        }
        break;
 8001de4:	e005      	b.n	8001df2 <cliUpdate+0x2fa>
    }
  }
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001df2:	bf00      	nop

  switch(p_cli->state)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7c1b      	ldrb	r3, [r3, #16]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	f200 80d3 	bhi.w	8001fa6 <cliUpdate+0x4ae>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <cliUpdate+0x310>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e35 	.word	0x08001e35
 8001e14:	08001f9d 	.word	0x08001f9d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	741a      	strb	r2, [r3, #16]
      break;
 8001e1e:	e0c2      	b.n	8001fa6 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	741a      	strb	r2, [r3, #16]
      break;
 8001e26:	e0be      	b.n	8001fa6 <cliUpdate+0x4ae>
 8001e28:	080159f0 	.word	0x080159f0
 8001e2c:	080159f8 	.word	0x080159f8
 8001e30:	08015a00 	.word	0x08015a00

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b44      	cmp	r3, #68	; 0x44
 8001e3e:	d11a      	bne.n	8001e76 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e5a:	231b      	movs	r3, #27
 8001e5c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e5e:	235b      	movs	r3, #91	; 0x5b
 8001e60:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fa81 	bl	8006378 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b43      	cmp	r3, #67	; 0x43
 8001e7a:	d11d      	bne.n	8001eb8 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d215      	bcs.n	8001eb8 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e9c:	231b      	movs	r3, #27
 8001e9e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001ea0:	235b      	movs	r3, #91	; 0x5b
 8001ea2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f107 010c 	add.w	r1, r7, #12
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fa60 	bl	8006378 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b41      	cmp	r3, #65	; 0x41
 8001ebc:	d10c      	bne.n	8001ed8 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8db 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f004 fa88 	bl	80063e8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d10c      	bne.n	8001ef8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8cb 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f004 fa78 	bl	80063e8 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b31      	cmp	r3, #49	; 0x31
 8001efc:	d10f      	bne.n	8001f1e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	461a      	mov	r2, r3
 8001f0a:	492b      	ldr	r1, [pc, #172]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f0c:	f004 fa6c 	bl	80063e8 <uartPrintf>
        line->cursor = 0;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	2b34      	cmp	r3, #52	; 0x34
 8001f22:	d13f      	bne.n	8001fa4 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d210      	bcs.n	8001f56 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	8afa      	ldrh	r2, [r7, #22]
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <cliUpdate+0x4c4>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fa49 	bl	80063e8 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	8afa      	ldrh	r2, [r7, #22]
 8001f80:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 fa30 	bl	80063e8 <uartPrintf>
        }
        line->cursor = line->count;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2204      	movs	r2, #4
 8001f98:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f9a:	e003      	b.n	8001fa4 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	741a      	strb	r2, [r3, #16]
      break;
 8001fa2:	e000      	b.n	8001fa6 <cliUpdate+0x4ae>
      break;
 8001fa4:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fcea 	bl	8001980 <cliShowLog>

  return ret;
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	08015a0c 	.word	0x08015a0c
 8001fbc:	08015a14 	.word	0x08015a14

08001fc0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002002:	461a      	mov	r2, r3
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	440b      	add	r3, r1
 8002012:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4610      	mov	r0, r2
 800201a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800201e:	2243      	movs	r2, #67	; 0x43
 8002020:	4619      	mov	r1, r3
 8002022:	f010 f83b 	bl	801209c <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800202c:	2b03      	cmp	r3, #3
 800202e:	d807      	bhi.n	8002040 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002036:	3301      	adds	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002046:	b25a      	sxtb	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002054:	3301      	adds	r3, #1
 8002056:	425a      	negs	r2, r3
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	bf58      	it	pl
 8002062:	4253      	negpl	r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800208e:	2b00      	cmp	r3, #0
 8002090:	d076      	beq.n	8002180 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80020a6:	461a      	mov	r2, r3
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <cliLineChange+0x10c>)
 80020aa:	f004 f99d 	bl	80063e8 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7818      	ldrb	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020c2:	461a      	mov	r2, r3
 80020c4:	4931      	ldr	r1, [pc, #196]	; (800218c <cliLineChange+0x110>)
 80020c6:	f004 f98f 	bl	80063e8 <uartPrintf>
  }


  if (key_up == true)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d125      	bne.n	800211e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020e2:	b25a      	sxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020f8:	4413      	add	r3, r2
 80020fa:	3b01      	subs	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002102:	fb93 f1f2 	sdiv	r1, r3, r2
 8002106:	fb02 f201 	mul.w	r2, r2, r1
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	b25a      	sxtb	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e013      	b.n	8002146 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002124:	3301      	adds	r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800212c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002130:	fb02 f201 	mul.w	r2, r2, r1
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	b25a      	sxtb	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002144:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	4403      	add	r3, r0
 8002158:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800215c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002160:	4611      	mov	r1, r2
 8002162:	2243      	movs	r2, #67	; 0x43
 8002164:	4618      	mov	r0, r3
 8002166:	f00f ff99 	bl	801209c <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800217e:	e000      	b.n	8002182 <cliLineChange+0x106>
    return;
 8002180:	bf00      	nop
}
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	08015a0c 	.word	0x08015a0c
 800218c:	08015a1c 	.word	0x08015a1c

08002190 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002198:	2300      	movs	r3, #0
 800219a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f851 	bl	8002244 <cliParseArgs>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80021a8:	4825      	ldr	r0, [pc, #148]	; (8002240 <cliRunCmd+0xb0>)
 80021aa:	f000 f893 	bl	80022d4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f8b1 	bl	800231c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e033      	b.n	8002228 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe f800 	bl	80001e0 <strcmp>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
        break;
 8002220:	e009      	b.n	8002236 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4293      	cmp	r3, r2
 8002234:	dbc4      	blt.n	80021c0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002236:	7afb      	ldrb	r3, [r7, #11]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	08015a24 	.word	0x08015a24

08002244 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002262:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800226a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <cliParseArgs+0x8c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f107 0208 	add.w	r2, r7, #8
 8002280:	4619      	mov	r1, r3
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f011 faca 	bl	801381c <strtok_r>
 8002288:	61b8      	str	r0, [r7, #24]
 800228a:	e010      	b.n	80022ae <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	82fa      	strh	r2, [r7, #22]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <cliParseArgs+0x8c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f107 0208 	add.w	r2, r7, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	2000      	movs	r0, #0
 80022a8:	f011 fab8 	bl	801381c <strtok_r>
 80022ac:	61b8      	str	r0, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1eb      	bne.n	800228c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	8afa      	ldrh	r2, [r7, #22]
 80022b8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80022bc:	8afb      	ldrh	r3, [r7, #22]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <cliParseArgs+0x82>
  {
    ret = true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000018 	.word	0x20000018

080022d4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80022d4:	b40f      	push	{r0, r1, r2, r3}
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <cliPrintf+0x44>)
 80022e4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f103 0011 	add.w	r0, r3, #17
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	f011 fb52 	bl	801399c <vsniprintf>
 80022f8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	7818      	ldrb	r0, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3311      	adds	r3, #17
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	f004 f837 	bl	8006378 <uartWrite>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002314:	b004      	add	sp, #16
 8002316:	4770      	bx	lr
 8002318:	2000a4a0 	.word	0x2000a4a0

0800231c <cliToUpper>:

void cliToUpper(char *str)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	81fb      	strh	r3, [r7, #14]
 8002328:	e018      	b.n	800235c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002334:	7b7b      	ldrb	r3, [r7, #13]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800233a:	7b7b      	ldrb	r3, [r7, #13]
 800233c:	2b60      	cmp	r3, #96	; 0x60
 800233e:	d905      	bls.n	800234c <cliToUpper+0x30>
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	2b7a      	cmp	r3, #122	; 0x7a
 8002344:	d802      	bhi.n	800234c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002346:	7b7b      	ldrb	r3, [r7, #13]
 8002348:	3b20      	subs	r3, #32
 800234a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	7b7a      	ldrb	r2, [r7, #13]
 8002354:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	81fb      	strh	r3, [r7, #14]
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d9e3      	bls.n	800232a <cliToUpper+0xe>
 8002362:	e000      	b.n	8002366 <cliToUpper+0x4a>
      break;
 8002364:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d105      	bne.n	8002378 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	3b01      	subs	r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  }
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <cliArgsGetData+0x4c>)
 8002394:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	b29a      	uxth	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d301      	bcc.n	80023a8 <cliArgsGetData+0x24>
  {
    return 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e00e      	b.n	80023c6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f011 faac 	bl	8013918 <strtoul>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000a4a0 	.word	0x2000a4a0

080023d4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <cliArgsGetFloat+0x54>)
 80023e6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <cliArgsGetFloat+0x28>
  {
    return 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e00d      	b.n	8002418 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f011 f987 	bl	8013720 <strtof>
 8002412:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	ee07 3a90 	vmov	s15, r3
}
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000a4a0 	.word	0x2000a4a0

0800242c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <cliArgsGetStr+0x44>)
 800243c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b29a      	uxth	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002448:	429a      	cmp	r2, r3
 800244a:	d301      	bcc.n	8002450 <cliArgsGetStr+0x24>
  {
    return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e008      	b.n	8002462 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000a4a0 	.word	0x2000a4a0

08002474 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <cliArgsIsStr+0x50>)
 8002486:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	b29a      	uxth	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002492:	429a      	cmp	r2, r3
 8002494:	d301      	bcc.n	800249a <cliArgsIsStr+0x26>
  {
    return 0;
 8002496:	2300      	movs	r3, #0
 8002498:	e010      	b.n	80024bc <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f7fd fe98 	bl	80001e0 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <cliArgsIsStr+0x46>
  {
    ret = true;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000a4a0 	.word	0x2000a4a0

080024c8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <cliKeepLoop+0x28>)
 80024d0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fee2 	bl	80062a0 <uartAvailable>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <cliKeepLoop+0x1e>
  {
    return true;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024e6:	2300      	movs	r3, #0
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000a4a0 	.word	0x2000a4a0

080024f4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <cliAdd+0x90>)
 8002504:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d901      	bls.n	8002514 <cliAdd+0x20>
  {
    return false;
 8002510:	2300      	movs	r3, #0
 8002512:	e032      	b.n	800257a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800251a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f010 fada 	bl	8012aec <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002538:	89fa      	ldrh	r2, [r7, #14]
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800254e:	89fa      	ldrh	r2, [r7, #14]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff feda 	bl	800231c <cliToUpper>

  p_cli->cmd_count++;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800256e:	3301      	adds	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002578:	7dfb      	ldrb	r3, [r7, #23]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000a4a0 	.word	0x2000a4a0

08002588 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <cliShowList+0x60>)
 8002592:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <cliShowList+0x64>)
 8002596:	f7ff fe9d 	bl	80022d4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800259a:	4815      	ldr	r0, [pc, #84]	; (80025f0 <cliShowList+0x68>)
 800259c:	f7ff fe9a 	bl	80022d4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e012      	b.n	80025cc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fe8a 	bl	80022d4 <cliPrintf>
    cliPrintf("\r\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <cliShowList+0x64>)
 80025c2:	f7ff fe87 	bl	80022d4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4293      	cmp	r3, r2
 80025d8:	dbe5      	blt.n	80025a6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <cliShowList+0x6c>)
 80025dc:	f7ff fe7a 	bl	80022d4 <cliPrintf>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000a4a0 	.word	0x2000a4a0
 80025ec:	08015a24 	.word	0x08015a24
 80025f0:	08015a28 	.word	0x08015a28
 80025f4:	08015a48 	.word	0x08015a48

080025f8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002600:	2310      	movs	r3, #16
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002618:	4840      	ldr	r0, [pc, #256]	; (800271c <cliMemoryDump+0x124>)
 800261a:	f7ff fe5b 	bl	80022d4 <cliPrintf>
 800261e:	e07a      	b.n	8002716 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b01      	cmp	r3, #1
 8002624:	dd09      	ble.n	800263a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f011 f971 	bl	8013918 <strtoul>
 8002636:	4603      	mov	r3, r0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f011 f968 	bl	8013918 <strtoul>
 8002648:	4603      	mov	r3, r0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002650:	4833      	ldr	r0, [pc, #204]	; (8002720 <cliMemoryDump+0x128>)
 8002652:	f7ff fe3f 	bl	80022d4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	e058      	b.n	800270e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	482e      	ldr	r0, [pc, #184]	; (8002724 <cliMemoryDump+0x12c>)
 800266c:	f7ff fe32 	bl	80022d4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	482c      	ldr	r0, [pc, #176]	; (8002728 <cliMemoryDump+0x130>)
 8002678:	f7ff fe2c 	bl	80022d4 <cliPrintf>

    if ((idx%4) == 3)
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	425a      	negs	r2, r3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	bf58      	it	pl
 800268a:	4253      	negpl	r3, r2
 800268c:	2b03      	cmp	r3, #3
 800268e:	d138      	bne.n	8002702 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002690:	4826      	ldr	r0, [pc, #152]	; (800272c <cliMemoryDump+0x134>)
 8002692:	f7ff fe1f 	bl	80022d4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e02c      	b.n	80026f6 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e01d      	b.n	80026e4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b1f      	cmp	r3, #31
 80026b4:	d910      	bls.n	80026d8 <cliMemoryDump+0xe0>
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b7e      	cmp	r3, #126	; 0x7e
 80026c2:	d809      	bhi.n	80026d8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4817      	ldr	r0, [pc, #92]	; (8002730 <cliMemoryDump+0x138>)
 80026d2:	f7ff fdff 	bl	80022d4 <cliPrintf>
 80026d6:	e002      	b.n	80026de <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <cliMemoryDump+0x13c>)
 80026da:	f7ff fdfb 	bl	80022d4 <cliPrintf>
        for (i=0;i<4;i++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	ddde      	ble.n	80026a8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3304      	adds	r3, #4
 80026ee:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	3301      	adds	r3, #1
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	ddcf      	ble.n	800269c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026fc:	480e      	ldr	r0, [pc, #56]	; (8002738 <cliMemoryDump+0x140>)
 80026fe:	f7ff fde9 	bl	80022d4 <cliPrintf>
    }
    addr++;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	3304      	adds	r3, #4
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3301      	adds	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	429a      	cmp	r2, r3
 8002714:	dba2      	blt.n	800265c <cliMemoryDump+0x64>
  }
}
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08015a68 	.word	0x08015a68
 8002720:	08015a7c 	.word	0x08015a7c
 8002724:	08015a84 	.word	0x08015a84
 8002728:	08015a90 	.word	0x08015a90
 800272c:	08015a98 	.word	0x08015a98
 8002730:	08015a9c 	.word	0x08015a9c
 8002734:	08015aa0 	.word	0x08015aa0
 8002738:	08015aa4 	.word	0x08015aa4

0800273c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002742:	2305      	movs	r3, #5
 8002744:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002746:	2201      	movs	r2, #1
 8002748:	4939      	ldr	r1, [pc, #228]	; (8002830 <Ds18b20_Init+0xf4>)
 800274a:	483a      	ldr	r0, [pc, #232]	; (8002834 <Ds18b20_Init+0xf8>)
 800274c:	f001 ff2f 	bl	80045ae <OneWire_Init>
		TempSensorCount = 0;
 8002750:	4b39      	ldr	r3, [pc, #228]	; (8002838 <Ds18b20_Init+0xfc>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002756:	e002      	b.n	800275e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f008 fee5 	bl	800b528 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800275e:	f008 fed7 	bl	800b510 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002768:	429a      	cmp	r2, r3
 800276a:	d9f5      	bls.n	8002758 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800276c:	4831      	ldr	r0, [pc, #196]	; (8002834 <Ds18b20_Init+0xf8>)
 800276e:	f002 f80b 	bl	8004788 <OneWire_First>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <Ds18b20_Init+0x100>)
 8002778:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800277a:	e019      	b.n	80027b0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	f008 fed3 	bl	800b528 <HAL_Delay>
			TempSensorCount++;
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <Ds18b20_Init+0xfc>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <Ds18b20_Init+0xfc>)
 800278c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <Ds18b20_Init+0xfc>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <Ds18b20_Init+0x104>)
 8002798:	4413      	add	r3, r2
 800279a:	4619      	mov	r1, r3
 800279c:	4825      	ldr	r0, [pc, #148]	; (8002834 <Ds18b20_Init+0xf8>)
 800279e:	f002 f907 	bl	80049b0 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80027a2:	4824      	ldr	r0, [pc, #144]	; (8002834 <Ds18b20_Init+0xf8>)
 80027a4:	f002 f800 	bl	80047a8 <OneWire_Next>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <Ds18b20_Init+0x100>)
 80027ae:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <Ds18b20_Init+0x100>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e1      	bne.n	800277c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <Ds18b20_Init+0xfc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1bc      	bne.n	8002746 <Ds18b20_Init+0xa>
 80027cc:	e000      	b.n	80027d0 <Ds18b20_Init+0x94>
			break;
 80027ce:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <Ds18b20_Init+0x9e>
		return false;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e026      	b.n	8002828 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	71bb      	strb	r3, [r7, #6]
 80027de:	e019      	b.n	8002814 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80027e0:	2032      	movs	r0, #50	; 0x32
 80027e2:	f008 fea1 	bl	800b528 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <Ds18b20_Init+0x104>)
 80027ec:	4413      	add	r3, r2
 80027ee:	220c      	movs	r2, #12
 80027f0:	4619      	mov	r1, r3
 80027f2:	4810      	ldr	r0, [pc, #64]	; (8002834 <Ds18b20_Init+0xf8>)
 80027f4:	f000 f9b0 	bl	8002b58 <DS18B20_SetResolution>
		HAL_Delay(50);
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f008 fe95 	bl	800b528 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <Ds18b20_Init+0x104>)
 8002804:	4413      	add	r3, r2
 8002806:	4619      	mov	r1, r3
 8002808:	480a      	ldr	r0, [pc, #40]	; (8002834 <Ds18b20_Init+0xf8>)
 800280a:	f000 fa3e 	bl	8002c8a <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	3301      	adds	r3, #1
 8002812:	71bb      	strb	r3, [r7, #6]
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <Ds18b20_Init+0xfc>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	79ba      	ldrb	r2, [r7, #6]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3e0      	bcc.n	80027e0 <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 800281e:	4909      	ldr	r1, [pc, #36]	; (8002844 <Ds18b20_Init+0x108>)
 8002820:	4809      	ldr	r0, [pc, #36]	; (8002848 <Ds18b20_Init+0x10c>)
 8002822:	f7ff fe67 	bl	80024f4 <cliAdd>
	#endif

	return true;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40020400 	.word	0x40020400
 8002834:	2000a8f8 	.word	0x2000a8f8
 8002838:	20000260 	.word	0x20000260
 800283c:	2000a8e4 	.word	0x2000a8e4
 8002840:	2000a8e8 	.word	0x2000a8e8
 8002844:	08002d59 	.word	0x08002d59
 8002848:	08015ab4 	.word	0x08015ab4

0800284c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	Ds18b20Timeout= HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002852:	4b33      	ldr	r3, [pc, #204]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 8002854:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002858:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 800285a:	4832      	ldr	r0, [pc, #200]	; (8002924 <Ds18b20_ManualConvert+0xd8>)
 800285c:	f000 f868 	bl	8002930 <DS18B20_StartAll>
	HAL_Delay(100);
 8002860:	2064      	movs	r0, #100	; 0x64
 8002862:	f008 fe61 	bl	800b528 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8002866:	e00c      	b.n	8002882 <Ds18b20_ManualConvert+0x36>
	{
		HAL_Delay(10);
 8002868:	200a      	movs	r0, #10
 800286a:	f008 fe5d 	bl	800b528 <HAL_Delay>
		Ds18b20Timeout-=1;
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 8002878:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 8002882:	4828      	ldr	r0, [pc, #160]	; (8002924 <Ds18b20_ManualConvert+0xd8>)
 8002884:	f000 fa5c 	bl	8002d40 <DS18B20_AllDone>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ec      	beq.n	8002868 <Ds18b20_ManualConvert+0x1c>
 800288e:	e000      	b.n	8002892 <Ds18b20_ManualConvert+0x46>
			break;
 8002890:	bf00      	nop
	}
	if(Ds18b20Timeout>0)
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d024      	beq.n	80028e4 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	71fb      	strb	r3, [r7, #7]
 800289e:	e01b      	b.n	80028d8 <Ds18b20_ManualConvert+0x8c>
		{
			HAL_Delay(100);
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	f008 fe41 	bl	800b528 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <Ds18b20_ManualConvert+0xdc>)
 80028ac:	1899      	adds	r1, r3, r2
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3308      	adds	r3, #8
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <Ds18b20_ManualConvert+0xdc>)
 80028b6:	4413      	add	r3, r2
 80028b8:	79fc      	ldrb	r4, [r7, #7]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4819      	ldr	r0, [pc, #100]	; (8002924 <Ds18b20_ManualConvert+0xd8>)
 80028be:	f000 f84b 	bl	8002958 <DS18B20_Read>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <Ds18b20_ManualConvert+0xdc>)
 80028c8:	0123      	lsls	r3, r4, #4
 80028ca:	4413      	add	r3, r2
 80028cc:	330c      	adds	r3, #12
 80028ce:	460a      	mov	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	3301      	adds	r3, #1
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <Ds18b20_ManualConvert+0xe0>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	79fa      	ldrb	r2, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d3de      	bcc.n	80028a0 <Ds18b20_ManualConvert+0x54>
 80028e2:	e011      	b.n	8002908 <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	71bb      	strb	r3, [r7, #6]
 80028e8:	e009      	b.n	80028fe <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 80028ea:	79bb      	ldrb	r3, [r7, #6]
 80028ec:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <Ds18b20_ManualConvert+0xdc>)
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	330c      	adds	r3, #12
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80028f8:	79bb      	ldrb	r3, [r7, #6]
 80028fa:	3301      	adds	r3, #1
 80028fc:	71bb      	strb	r3, [r7, #6]
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <Ds18b20_ManualConvert+0xe0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	79ba      	ldrb	r2, [r7, #6]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3f0      	bcc.n	80028ea <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <Ds18b20_ManualConvert+0xd4>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <Ds18b20_ManualConvert+0xc8>
		return false;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <Ds18b20_ManualConvert+0xca>
	else
		return true;
 8002914:	2301      	movs	r3, #1
//	  		  }
//			  break;
//	  }
//	#endif
//	  return true;
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	20000262 	.word	0x20000262
 8002924:	2000a8f8 	.word	0x2000a8f8
 8002928:	2000a8e8 	.word	0x2000a8e8
 800292c:	20000260 	.word	0x20000260

08002930 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f001 fe61 	bl	8004600 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800293e:	21cc      	movs	r1, #204	; 0xcc
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f001 fee3 	bl	800470c <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002946:	2144      	movs	r1, #68	; 0x44
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f001 fedf 	bl	800470c <OneWire_WriteByte>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b08b      	sub	sp, #44	; 0x2c
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f000 f97a 	bl	8002c68 <DS18B20_Is>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <DS18B20_Read+0x26>
		return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e0e1      	b.n	8002b42 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 fe9a 	bl	80046b8 <OneWire_ReadBit>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 800298a:	2300      	movs	r3, #0
 800298c:	e0d9      	b.n	8002b42 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f001 fe36 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f001 ffec 	bl	8004974 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800299c:	21be      	movs	r1, #190	; 0xbe
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f001 feb4 	bl	800470c <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e00d      	b.n	80029c6 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80029aa:	7ffc      	ldrb	r4, [r7, #31]
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f001 feca 	bl	8004746 <OneWire_ReadByte>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ba:	4423      	add	r3, r4
 80029bc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	3301      	adds	r3, #1
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d9ee      	bls.n	80029aa <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2108      	movs	r1, #8
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 f808 	bl	80049e8 <OneWire_CRC8>
 80029d8:	4603      	mov	r3, r0
 80029da:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 80029dc:	7f3b      	ldrb	r3, [r7, #28]
 80029de:	7fba      	ldrb	r2, [r7, #30]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e0ac      	b.n	8002b42 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80029e8:	7d3b      	ldrb	r3, [r7, #20]
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	7d7b      	ldrb	r3, [r7, #21]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f001 fe01 	bl	8004600 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80029fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da05      	bge.n	8002a12 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002a06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a08:	425b      	negs	r3, r3
 8002a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002a12:	7e3b      	ldrb	r3, [r7, #24]
 8002a14:	115b      	asrs	r3, r3, #5
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3309      	adds	r3, #9
 8002a20:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002a22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3a:	b25a      	sxtb	r2, r3
 8002a3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002a46:	7f7b      	ldrb	r3, [r7, #29]
 8002a48:	3b09      	subs	r3, #9
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d858      	bhi.n	8002b00 <DS18B20_Read+0x1a8>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <DS18B20_Read+0xfc>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002ab5 	.word	0x08002ab5
 8002a60:	08002add 	.word	0x08002add
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a76:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002a7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a86:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002a8a:	e03e      	b.n	8002b0a <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002a8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002aa2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aa6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002ab2:	e02a      	b.n	8002b0a <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ace:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002ada:	e016      	b.n	8002b0a <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002adc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002aee:	edd7 7a08 	vldr	s15, [r7, #32]
 8002af2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b4c <DS18B20_Read+0x1f4>
 8002af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afa:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002afe:	e004      	b.n	8002b0a <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <DS18B20_Read+0x1f8>)
 8002b02:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002b0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1e:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002b22:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002b2a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002b54 <DS18B20_Read+0x1fc>
 8002b2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	372c      	adds	r7, #44	; 0x2c
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	3d800000 	.word	0x3d800000
 8002b50:	437f0000 	.word	0x437f0000
 8002b54:	00000000 	.word	0x00000000

08002b58 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002b66:	68b8      	ldr	r0, [r7, #8]
 8002b68:	f000 f87e 	bl	8002c68 <DS18B20_Is>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <DS18B20_SetResolution+0x1e>
		return 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e074      	b.n	8002c60 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f001 fd42 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f001 fef8 	bl	8004974 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002b84:	21be      	movs	r1, #190	; 0xbe
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f001 fdc0 	bl	800470c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f001 fdda 	bl	8004746 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 fdd7 	bl	8004746 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f001 fdd4 	bl	8004746 <OneWire_ReadByte>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 fdcf 	bl	8004746 <OneWire_ReadByte>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f001 fdca 	bl	8004746 <OneWire_ReadByte>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d108      	bne.n	8002bce <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	f023 0320 	bic.w	r3, r3, #32
 8002bca:	75fb      	strb	r3, [r7, #23]
 8002bcc:	e022      	b.n	8002c14 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b0a      	cmp	r3, #10
 8002bd2:	d108      	bne.n	8002be6 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bda:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	75fb      	strb	r3, [r7, #23]
 8002be4:	e016      	b.n	8002c14 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b0b      	cmp	r3, #11
 8002bea:	d108      	bne.n	8002bfe <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	f023 0320 	bic.w	r3, r3, #32
 8002bfa:	75fb      	strb	r3, [r7, #23]
 8002bfc:	e00a      	b.n	8002c14 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d107      	bne.n	8002c14 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f001 fcf3 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f001 fea9 	bl	8004974 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002c22:	214e      	movs	r1, #78	; 0x4e
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f001 fd71 	bl	800470c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002c2a:	7dbb      	ldrb	r3, [r7, #22]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f001 fd6c 	bl	800470c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002c34:	7d7b      	ldrb	r3, [r7, #21]
 8002c36:	4619      	mov	r1, r3
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f001 fd67 	bl	800470c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 fd62 	bl	800470c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f001 fcd9 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f001 fe8f 	bl	8004974 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002c56:	2148      	movs	r1, #72	; 0x48
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 fd57 	bl	800470c <OneWire_WriteByte>

	return 1;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b28      	cmp	r3, #40	; 0x28
 8002c76:	d101      	bne.n	8002c7c <DS18B20_Is+0x14>
		return 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <DS18B20_Is+0x16>

	return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002c94:	6838      	ldr	r0, [r7, #0]
 8002c96:	f7ff ffe7 	bl	8002c68 <DS18B20_Is>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e049      	b.n	8002d38 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f001 fcab 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 fe61 	bl	8004974 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002cb2:	21be      	movs	r1, #190	; 0xbe
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f001 fd29 	bl	800470c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f001 fd43 	bl	8004746 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 fd40 	bl	8004746 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f001 fd3d 	bl	8004746 <OneWire_ReadByte>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 fd38 	bl	8004746 <OneWire_ReadByte>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f001 fd33 	bl	8004746 <OneWire_ReadByte>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002ce4:	237d      	movs	r3, #125	; 0x7d
 8002ce6:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002ce8:	23c9      	movs	r3, #201	; 0xc9
 8002cea:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f001 fc87 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f001 fe3d 	bl	8004974 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002cfa:	214e      	movs	r1, #78	; 0x4e
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f001 fd05 	bl	800470c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 fd00 	bl	800470c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f001 fcfb 	bl	800470c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002d16:	7b7b      	ldrb	r3, [r7, #13]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f001 fcf6 	bl	800470c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 fc6d 	bl	8004600 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 fe23 	bl	8004974 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002d2e:	2148      	movs	r1, #72	; 0x48
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f001 fceb 	bl	800470c <OneWire_WriteByte>

	return 1;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f001 fcb5 	bl	80046b8 <OneWire_ReadBit>
 8002d4e:	4603      	mov	r3, r0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d11d      	bne.n	8002da8 <cliDS18B20+0x50>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4914      	ldr	r1, [pc, #80]	; (8002dc4 <cliDS18B20+0x6c>)
 8002d72:	2000      	movs	r0, #0
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <cliDS18B20+0x50>
  {

	  while(cliKeepLoop())
 8002d7c:	e00d      	b.n	8002d9a <cliDS18B20+0x42>
	  {
		  Ds18b20_ManualConvert();
 8002d7e:	f7ff fd65 	bl	800284c <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <cliDS18B20+0x70>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	480d      	ldr	r0, [pc, #52]	; (8002dcc <cliDS18B20+0x74>)
 8002d96:	f7ff fa9d 	bl	80022d4 <cliPrintf>
	  while(cliKeepLoop())
 8002d9a:	f7ff fb95 	bl	80024c8 <cliKeepLoop>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ec      	bne.n	8002d7e <cliDS18B20+0x26>
	  }
    ret = true;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <cliDS18B20+0x62>
  {
    cliPrintf("DS18B20 test\n");
 8002db4:	4806      	ldr	r0, [pc, #24]	; (8002dd0 <cliDS18B20+0x78>)
 8002db6:	f7ff fa8d 	bl	80022d4 <cliPrintf>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08015abc 	.word	0x08015abc
 8002dc8:	2000a8e8 	.word	0x2000a8e8
 8002dcc:	08015ac4 	.word	0x08015ac4
 8002dd0:	08015adc 	.word	0x08015adc

08002dd4 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  bool ret = true;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <fatfsInit+0x40>)
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <fatfsInit+0x44>)
 8002de2:	f008 fa43 	bl	800b26c <FATFS_LinkDriver>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002dec:	2200      	movs	r2, #0
 8002dee:	4909      	ldr	r1, [pc, #36]	; (8002e14 <fatfsInit+0x40>)
 8002df0:	480a      	ldr	r0, [pc, #40]	; (8002e1c <fatfsInit+0x48>)
 8002df2:	f006 fe33 	bl	8009a5c <f_mount>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <fatfsInit+0x2e>
    {
      is_init = true;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <fatfsInit+0x4c>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <fatfsInit+0x50>)
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <fatfsInit+0x54>)
 8002e06:	f7ff fb75 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	2000a90c 	.word	0x2000a90c
 8002e18:	08015fb4 	.word	0x08015fb4
 8002e1c:	2000a910 	.word	0x2000a910
 8002e20:	20000264 	.word	0x20000264
 8002e24:	08002edd 	.word	0x08002edd
 8002e28:	08015aec 	.word	0x08015aec

08002e2c <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b0d6      	sub	sp, #344	; 0x158
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f007 fd85 	bl	800a94e <f_opendir>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8002e4a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d138      	bne.n	8002ec4 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002e52:	f107 0208 	add.w	r2, r7, #8
 8002e56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f007 fe1f 	bl	800aaa0 <f_readdir>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002e68:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d124      	bne.n	8002eba <fatfsDir+0x8e>
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	7d9b      	ldrb	r3, [r3, #22]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01f      	beq.n	8002eba <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	7a1b      	ldrb	r3, [r3, #8]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <fatfsDir+0x70>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	f103 0216 	add.w	r2, r3, #22
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	480f      	ldr	r0, [pc, #60]	; (8002ed4 <fatfsDir+0xa8>)
 8002e96:	f7ff fa1d 	bl	80022d4 <cliPrintf>
 8002e9a:	e7da      	b.n	8002e52 <fatfsDir+0x26>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	f103 0216 	add.w	r2, r3, #22
 8002eac:	1d39      	adds	r1, r7, #4
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6809      	ldr	r1, [r1, #0]
 8002eb2:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <fatfsDir+0xac>)
 8002eb4:	f7ff fa0e 	bl	80022d4 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8002eb8:	e7cb      	b.n	8002e52 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 8002eba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f007 fdc8 	bl	800aa54 <f_closedir>
  }

  return res;
 8002ec4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	08015af4 	.word	0x08015af4
 8002ed8:	08015b00 	.word	0x08015b00

08002edc <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d14a      	bne.n	8002f8e <cliFatfs+0xb2>
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	498b      	ldr	r1, [pc, #556]	; (800312c <cliFatfs+0x250>)
 8002f00:	2000      	movs	r0, #0
 8002f02:	4798      	blx	r3
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d041      	beq.n	8002f8e <cliFatfs+0xb2>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8002f0a:	4b89      	ldr	r3, [pc, #548]	; (8003130 <cliFatfs+0x254>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4888      	ldr	r0, [pc, #544]	; (8003134 <cliFatfs+0x258>)
 8002f12:	f7ff f9df 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8002f16:	4b86      	ldr	r3, [pc, #536]	; (8003130 <cliFatfs+0x254>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d034      	beq.n	8002f88 <cliFatfs+0xac>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8002f1e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8002f22:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002f26:	4619      	mov	r1, r3
 8002f28:	4883      	ldr	r0, [pc, #524]	; (8003138 <cliFatfs+0x25c>)
 8002f2a:	f007 fe06 	bl	800ab3a <f_getfree>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8002f34:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11f      	bne.n	8002f7c <cliFatfs+0xa0>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8002f3c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	3b02      	subs	r3, #2
 8002f44:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002f48:	8952      	ldrh	r2, [r2, #10]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8002f52:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f56:	895b      	ldrh	r3, [r3, #10]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002f5e:	fb03 f302 	mul.w	r3, r3, r2
 8002f62:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8002f66:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002f6a:	0859      	lsrs	r1, r3, #1
 8002f6c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	461a      	mov	r2, r3
 8002f74:	4871      	ldr	r0, [pc, #452]	; (800313c <cliFatfs+0x260>)
 8002f76:	f7ff f9ad 	bl	80022d4 <cliPrintf>
 8002f7a:	e005      	b.n	8002f88 <cliFatfs+0xac>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8002f7c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002f80:	4619      	mov	r1, r3
 8002f82:	486f      	ldr	r0, [pc, #444]	; (8003140 <cliFatfs+0x264>)
 8002f84:	f7ff f9a6 	bl	80022d4 <cliPrintf>
       }
    }

    ret = true;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d11b      	bne.n	8002fd0 <cliFatfs+0xf4>
 8002f98:	1d3b      	adds	r3, r7, #4
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	4969      	ldr	r1, [pc, #420]	; (8003144 <cliFatfs+0x268>)
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	4798      	blx	r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d012      	beq.n	8002fd0 <cliFatfs+0xf4>
  {
    FRESULT res;

    res = fatfsDir("/");
 8002faa:	4867      	ldr	r0, [pc, #412]	; (8003148 <cliFatfs+0x26c>)
 8002fac:	f7ff ff3e 	bl	8002e2c <fatfsDir>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8002fb6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <cliFatfs+0xee>
    {
      cliPrintf(" err : %d\n", res);
 8002fbe:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	485e      	ldr	r0, [pc, #376]	; (8003140 <cliFatfs+0x264>)
 8002fc6:	f7ff f985 	bl	80022d4 <cliPrintf>
    }

    ret = true;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	f040 8092 	bne.w	8003100 <cliFatfs+0x224>
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	495a      	ldr	r1, [pc, #360]	; (800314c <cliFatfs+0x270>)
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	4798      	blx	r3
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8088 	beq.w	8003100 <cliFatfs+0x224>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8002ff0:	f7fe f90b 	bl	800120a <millis>
 8002ff4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002ff8:	f107 0308 	add.w	r3, r7, #8
 8002ffc:	220b      	movs	r2, #11
 8002ffe:	4954      	ldr	r1, [pc, #336]	; (8003150 <cliFatfs+0x274>)
 8003000:	4618      	mov	r0, r3
 8003002:	f006 fd71 	bl	8009ae8 <f_open>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 800300c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8003010:	2b00      	cmp	r3, #0
 8003012:	d165      	bne.n	80030e0 <cliFatfs+0x204>
    {
      f_printf(&log_file, "test1, ");
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	494e      	ldr	r1, [pc, #312]	; (8003154 <cliFatfs+0x278>)
 800301a:	4618      	mov	r0, r3
 800301c:	f007 feba 	bl	800ad94 <f_printf>
      f_printf(&log_file, "test2, ");
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	494c      	ldr	r1, [pc, #304]	; (8003158 <cliFatfs+0x27c>)
 8003026:	4618      	mov	r0, r3
 8003028:	f007 feb4 	bl	800ad94 <f_printf>
      f_printf(&log_file, "test3, ");
 800302c:	f107 0308 	add.w	r3, r7, #8
 8003030:	494a      	ldr	r1, [pc, #296]	; (800315c <cliFatfs+0x280>)
 8003032:	4618      	mov	r0, r3
 8003034:	f007 feae 	bl	800ad94 <f_printf>
      f_printf(&log_file, ", ");
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	4948      	ldr	r1, [pc, #288]	; (8003160 <cliFatfs+0x284>)
 800303e:	4618      	mov	r0, r3
 8003040:	f007 fea8 	bl	800ad94 <f_printf>
      f_printf(&log_file, "\n");
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	4946      	ldr	r1, [pc, #280]	; (8003164 <cliFatfs+0x288>)
 800304a:	4618      	mov	r0, r3
 800304c:	f007 fea2 	bl	800ad94 <f_printf>

      for (int i=0; i<8; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003056:	e00c      	b.n	8003072 <cliFatfs+0x196>
      {
        f_printf(&log_file, "%d \n", i);
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003060:	4941      	ldr	r1, [pc, #260]	; (8003168 <cliFatfs+0x28c>)
 8003062:	4618      	mov	r0, r3
 8003064:	f007 fe96 	bl	800ad94 <f_printf>
      for (int i=0; i<8; i++)
 8003068:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800306c:	3301      	adds	r3, #1
 800306e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8003072:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8003076:	2b07      	cmp	r3, #7
 8003078:	ddee      	ble.n	8003058 <cliFatfs+0x17c>
      }

      f_rewind(&log_file);
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f007 fa5b 	bl	800a53c <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8003086:	e01c      	b.n	80030c2 <cliFatfs+0x1e6>
      {
        len = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 800308e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8003092:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8003096:	f107 0008 	add.w	r0, r7, #8
 800309a:	2201      	movs	r2, #1
 800309c:	f006 fef2 	bl	8009e84 <f_read>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80030a6:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <cliFatfs+0x1f2>
        {
          break;
        }
        if (len == 0)
 80030ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <cliFatfs+0x1f6>
        {
          break;
        }

        cliPrintf("%c", data);
 80030b6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80030ba:	4619      	mov	r1, r3
 80030bc:	482b      	ldr	r0, [pc, #172]	; (800316c <cliFatfs+0x290>)
 80030be:	f7ff f909 	bl	80022d4 <cliPrintf>
      while(cliKeepLoop())
 80030c2:	f7ff fa01 	bl	80024c8 <cliKeepLoop>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1dd      	bne.n	8003088 <cliFatfs+0x1ac>
 80030cc:	e002      	b.n	80030d4 <cliFatfs+0x1f8>
          break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <cliFatfs+0x1f8>
          break;
 80030d2:	bf00      	nop
      }

      f_close(&log_file);
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	4618      	mov	r0, r3
 80030da:	f007 fa05 	bl	800a4e8 <f_close>
 80030de:	e002      	b.n	80030e6 <cliFatfs+0x20a>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 80030e0:	4823      	ldr	r0, [pc, #140]	; (8003170 <cliFatfs+0x294>)
 80030e2:	f7ff f8f7 	bl	80022d4 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 80030e6:	f7fe f890 	bl	800120a <millis>
 80030ea:	4602      	mov	r2, r0
 80030ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	4619      	mov	r1, r3
 80030f4:	481f      	ldr	r0, [pc, #124]	; (8003174 <cliFatfs+0x298>)
 80030f6:	f7ff f8ed 	bl	80022d4 <cliPrintf>

    ret = true;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8003100:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <cliFatfs+0x244>
  {
    cliPrintf("fatfs info\n");
 800310e:	481a      	ldr	r0, [pc, #104]	; (8003178 <cliFatfs+0x29c>)
 8003110:	f7ff f8e0 	bl	80022d4 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8003114:	4819      	ldr	r0, [pc, #100]	; (800317c <cliFatfs+0x2a0>)
 8003116:	f7ff f8dd 	bl	80022d4 <cliPrintf>
    cliPrintf("fatfs test\n");
 800311a:	4819      	ldr	r0, [pc, #100]	; (8003180 <cliFatfs+0x2a4>)
 800311c:	f7ff f8da 	bl	80022d4 <cliPrintf>
  }
}
 8003120:	bf00      	nop
 8003122:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	08015b14 	.word	0x08015b14
 8003130:	20000264 	.word	0x20000264
 8003134:	08015b1c 	.word	0x08015b1c
 8003138:	08015b30 	.word	0x08015b30
 800313c:	08015b34 	.word	0x08015b34
 8003140:	08015b68 	.word	0x08015b68
 8003144:	08015b74 	.word	0x08015b74
 8003148:	08015b78 	.word	0x08015b78
 800314c:	08015b7c 	.word	0x08015b7c
 8003150:	08015b84 	.word	0x08015b84
 8003154:	08015b8c 	.word	0x08015b8c
 8003158:	08015b94 	.word	0x08015b94
 800315c:	08015b9c 	.word	0x08015b9c
 8003160:	08015ba4 	.word	0x08015ba4
 8003164:	08015ba8 	.word	0x08015ba8
 8003168:	08015bac 	.word	0x08015bac
 800316c:	08015bb4 	.word	0x08015bb4
 8003170:	08015bb8 	.word	0x08015bb8
 8003174:	08015bc8 	.word	0x08015bc8
 8003178:	08015bd0 	.word	0x08015bd0
 800317c:	08015bdc 	.word	0x08015bdc
 8003180:	08015be8 	.word	0x08015be8

08003184 <gpioInit>:
#endif



bool gpioInit(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
  bool ret = true;
 800318a:	2301      	movs	r3, #1
 800318c:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <gpioInit+0xa0>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a23      	ldr	r2, [pc, #140]	; (8003224 <gpioInit+0xa0>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <gpioInit+0xa0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <gpioInit+0xa0>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <gpioInit+0xa0>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <gpioInit+0xa0>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e01e      	b.n	800320a <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	b2d8      	uxtb	r0, r3
 80031d0:	4915      	ldr	r1, [pc, #84]	; (8003228 <gpioInit+0xa4>)
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3308      	adds	r3, #8
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	f000 f826 	bl	8003234 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	b2d8      	uxtb	r0, r3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <gpioInit+0xa4>)
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	330b      	adds	r3, #11
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	f000 f88a 	bl	8003318 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	dddd      	ble.n	80031cc <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8003210:	4906      	ldr	r1, [pc, #24]	; (800322c <gpioInit+0xa8>)
 8003212:	4807      	ldr	r0, [pc, #28]	; (8003230 <gpioInit+0xac>)
 8003214:	f7ff f96e 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8003218:	7afb      	ldrb	r3, [r7, #11]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	08015ebc 	.word	0x08015ebc
 800322c:	08003431 	.word	0x08003431
 8003230:	08015bf4 	.word	0x08015bf4

08003234 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	460a      	mov	r2, r1
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	4613      	mov	r3, r2
 8003242:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8003244:	2301      	movs	r3, #1
 8003246:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d901      	bls.n	8003262 <gpioPinMode+0x2e>
  {
    return false;
 800325e:	2300      	movs	r3, #0
 8003260:	e054      	b.n	800330c <gpioPinMode+0xd8>
  }

  switch(mode)
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d838      	bhi.n	80032da <gpioPinMode+0xa6>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <gpioPinMode+0x3c>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	0800328d 	.word	0x0800328d
 8003274:	08003297 	.word	0x08003297
 8003278:	080032a1 	.word	0x080032a1
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080032bf 	.word	0x080032bf
 8003288:	080032c9 	.word	0x080032c9
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
      break;
 8003294:	e021      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329a:	2301      	movs	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
      break;
 800329e:	e01c      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032a4:	2302      	movs	r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
      break;
 80032a8:	e017      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032aa:	2301      	movs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
      break;
 80032b2:	e012      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b4:	2301      	movs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
      break;
 80032bc:	e00d      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032be:	2301      	movs	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032c2:	2302      	movs	r3, #2
 80032c4:	613b      	str	r3, [r7, #16]
      break;
 80032c6:	e008      	b.n	80032da <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032d4:	2302      	movs	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
      break;
 80032d8:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 80032da:	79fa      	ldrb	r2, [r7, #7]
 80032dc:	490d      	ldr	r1, [pc, #52]	; (8003314 <gpioPinMode+0xe0>)
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3304      	adds	r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80032ee:	79fa      	ldrb	r2, [r7, #7]
 80032f0:	4908      	ldr	r1, [pc, #32]	; (8003314 <gpioPinMode+0xe0>)
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f107 0208 	add.w	r2, r7, #8
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f009 fba7 	bl	800ca58 <HAL_GPIO_Init>

  return ret;
 800330a:	7ffb      	ldrb	r3, [r7, #31]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	08015ebc 	.word	0x08015ebc

08003318 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	460a      	mov	r2, r1
 8003322:	71fb      	strb	r3, [r7, #7]
 8003324:	4613      	mov	r3, r2
 8003326:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d842      	bhi.n	80033b4 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01f      	beq.n	8003374 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	4921      	ldr	r1, [pc, #132]	; (80033bc <gpioPinWrite+0xa4>)
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	79fa      	ldrb	r2, [r7, #7]
 8003346:	491d      	ldr	r1, [pc, #116]	; (80033bc <gpioPinWrite+0xa4>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3304      	adds	r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29c      	uxth	r4, r3
 8003358:	79fa      	ldrb	r2, [r7, #7]
 800335a:	4918      	ldr	r1, [pc, #96]	; (80033bc <gpioPinWrite+0xa4>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3309      	adds	r3, #9
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4621      	mov	r1, r4
 800336e:	f009 fdef 	bl	800cf50 <HAL_GPIO_WritePin>
 8003372:	e020      	b.n	80033b6 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003374:	79fa      	ldrb	r2, [r7, #7]
 8003376:	4911      	ldr	r1, [pc, #68]	; (80033bc <gpioPinWrite+0xa4>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	490d      	ldr	r1, [pc, #52]	; (80033bc <gpioPinWrite+0xa4>)
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3304      	adds	r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29c      	uxth	r4, r3
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <gpioPinWrite+0xa4>)
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	330a      	adds	r3, #10
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4621      	mov	r1, r4
 80033ae:	f009 fdcf 	bl	800cf50 <HAL_GPIO_WritePin>
 80033b2:	e000      	b.n	80033b6 <gpioPinWrite+0x9e>
    return;
 80033b4:	bf00      	nop
  }
}
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	08015ebc 	.word	0x08015ebc

080033c0 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b0f      	cmp	r3, #15
 80033d2:	d901      	bls.n	80033d8 <gpioPinRead+0x18>
  {
    return false;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e024      	b.n	8003422 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80033d8:	79fa      	ldrb	r2, [r7, #7]
 80033da:	4914      	ldr	r1, [pc, #80]	; (800342c <gpioPinRead+0x6c>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	6818      	ldr	r0, [r3, #0]
 80033e8:	79fa      	ldrb	r2, [r7, #7]
 80033ea:	4910      	ldr	r1, [pc, #64]	; (800342c <gpioPinRead+0x6c>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3304      	adds	r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	f009 fd8f 	bl	800cf20 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	4618      	mov	r0, r3
 8003406:	79fa      	ldrb	r2, [r7, #7]
 8003408:	4908      	ldr	r1, [pc, #32]	; (800342c <gpioPinRead+0x6c>)
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3309      	adds	r3, #9
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4298      	cmp	r0, r3
 800341a:	d101      	bne.n	8003420 <gpioPinRead+0x60>
  {
    ret = true;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	08015ebc 	.word	0x08015ebc

08003430 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d128      	bne.n	8003496 <cliGpio+0x66>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	4947      	ldr	r1, [pc, #284]	; (8003568 <cliGpio+0x138>)
 800344a:	2000      	movs	r0, #0
 800344c:	4798      	blx	r3
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8003454:	e018      	b.n	8003488 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e00c      	b.n	8003476 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ffad 	bl	80033c0 <gpioPinRead>
 8003466:	4603      	mov	r3, r0
 8003468:	4619      	mov	r1, r3
 800346a:	4840      	ldr	r0, [pc, #256]	; (800356c <cliGpio+0x13c>)
 800346c:	f7fe ff32 	bl	80022d4 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3301      	adds	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	ddef      	ble.n	800345c <cliGpio+0x2c>
      }
      cliPrintf("\n");
 800347c:	483c      	ldr	r0, [pc, #240]	; (8003570 <cliGpio+0x140>)
 800347e:	f7fe ff29 	bl	80022d4 <cliPrintf>
      delay(100);
 8003482:	2064      	movs	r0, #100	; 0x64
 8003484:	f7fd feb6 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8003488:	f7ff f81e 	bl	80024c8 <cliKeepLoop>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e1      	bne.n	8003456 <cliGpio+0x26>
    }
    ret = true;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d123      	bne.n	80034e6 <cliGpio+0xb6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4934      	ldr	r1, [pc, #208]	; (8003574 <cliGpio+0x144>)
 80034a4:	2000      	movs	r0, #0
 80034a6:	4798      	blx	r3
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01b      	beq.n	80034e6 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2001      	movs	r0, #1
 80034b4:	4798      	blx	r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80034ba:	e00d      	b.n	80034d8 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80034bc:	7bfc      	ldrb	r4, [r7, #15]
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff7d 	bl	80033c0 <gpioPinRead>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	4621      	mov	r1, r4
 80034cc:	482a      	ldr	r0, [pc, #168]	; (8003578 <cliGpio+0x148>)
 80034ce:	f7fe ff01 	bl	80022d4 <cliPrintf>
      delay(100);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f7fd fe8e 	bl	80011f4 <delay>
    while(cliKeepLoop())
 80034d8:	f7fe fff6 	bl	80024c8 <cliKeepLoop>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1ec      	bne.n	80034bc <cliGpio+0x8c>
    }

    ret = true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d126      	bne.n	800353c <cliGpio+0x10c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4922      	ldr	r1, [pc, #136]	; (800357c <cliGpio+0x14c>)
 80034f4:	2000      	movs	r0, #0
 80034f6:	4798      	blx	r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01e      	beq.n	800353c <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2001      	movs	r0, #1
 8003504:	4798      	blx	r3
 8003506:	4603      	mov	r3, r0
 8003508:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2002      	movs	r0, #2
 8003510:	4798      	blx	r3
 8003512:	4603      	mov	r3, r0
 8003514:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8003516:	7b7b      	ldrb	r3, [r7, #13]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2da      	uxtb	r2, r3
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fef6 	bl	8003318 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 800352c:	7bbb      	ldrb	r3, [r7, #14]
 800352e:	7b7a      	ldrb	r2, [r7, #13]
 8003530:	4619      	mov	r1, r3
 8003532:	4813      	ldr	r0, [pc, #76]	; (8003580 <cliGpio+0x150>)
 8003534:	f7fe fece 	bl	80022d4 <cliPrintf>
    ret = true;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003548:	480e      	ldr	r0, [pc, #56]	; (8003584 <cliGpio+0x154>)
 800354a:	f7fe fec3 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800354e:	210f      	movs	r1, #15
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <cliGpio+0x158>)
 8003552:	f7fe febf 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003556:	210f      	movs	r1, #15
 8003558:	480c      	ldr	r0, [pc, #48]	; (800358c <cliGpio+0x15c>)
 800355a:	f7fe febb 	bl	80022d4 <cliPrintf>
  }
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd90      	pop	{r4, r7, pc}
 8003566:	bf00      	nop
 8003568:	08015bfc 	.word	0x08015bfc
 800356c:	08015c04 	.word	0x08015c04
 8003570:	08015c08 	.word	0x08015c08
 8003574:	08015c0c 	.word	0x08015c0c
 8003578:	08015c14 	.word	0x08015c14
 800357c:	08015c28 	.word	0x08015c28
 8003580:	08015c30 	.word	0x08015c30
 8003584:	08015c44 	.word	0x08015c44
 8003588:	08015c50 	.word	0x08015c50
 800358c:	08015c64 	.word	0x08015c64

08003590 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8003594:	f7fd fe39 	bl	800120a <millis>
 8003598:	4602      	mov	r2, r0
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <TransferDoneISR+0x40>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <TransferDoneISR+0x44>)
 80035a2:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80035a4:	f7fd fe31 	bl	800120a <millis>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <TransferDoneISR+0x40>)
 80035ac:	601a      	str	r2, [r3, #0]

  if (fps_time > 0)
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <TransferDoneISR+0x44>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <TransferDoneISR+0x44>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <TransferDoneISR+0x48>)
 80035c4:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <TransferDoneISR+0x4c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000288 	.word	0x20000288
 80035d4:	2000028c 	.word	0x2000028c
 80035d8:	20000290 	.word	0x20000290
 80035dc:	20000286 	.word	0x20000286

080035e0 <lcdInit>:


bool lcdInit(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af02      	add	r7, sp, #8
  backlight_value = 100;
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <lcdInit+0xa4>)
 80035e8:	2264      	movs	r2, #100	; 0x64
 80035ea:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 80035ec:	f003 fc38 	bl	8006e60 <st7735Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <lcdInit+0xa8>)
 80035f6:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 80035f8:	4824      	ldr	r0, [pc, #144]	; (800368c <lcdInit+0xac>)
 80035fa:	f003 fc3d 	bl	8006e78 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <lcdInit+0xac>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4823      	ldr	r0, [pc, #140]	; (8003690 <lcdInit+0xb0>)
 8003604:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	e007      	b.n	800361c <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <lcdInit+0xb4>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2100      	movs	r1, #0
 8003612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3301      	adds	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003622:	dbf3      	blt.n	800360c <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8003624:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003628:	2100      	movs	r1, #0
 800362a:	481a      	ldr	r0, [pc, #104]	; (8003694 <lcdInit+0xb4>)
 800362c:	f00e fd41 	bl	80120b2 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <lcdInit+0xb8>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	035b      	lsls	r3, r3, #13
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <lcdInit+0xb4>)
 8003640:	4413      	add	r3, r2
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <lcdInit+0xbc>)
 8003644:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	22a0      	movs	r2, #160	; 0xa0
 800364e:	2100      	movs	r1, #0
 8003650:	2000      	movs	r0, #0
 8003652:	f000 fbe6 	bl	8003e22 <lcdDrawFillRect>
  lcdUpdateDraw();
 8003656:	f000 faad 	bl	8003bb4 <lcdUpdateDraw>

  lcdSetBackLight(100);
 800365a:	2064      	movs	r0, #100	; 0x64
 800365c:	f000 f830 	bl	80036c0 <lcdSetBackLight>


  if (is_init != true)
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <lcdInit+0xa8>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	f083 0301 	eor.w	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <lcdInit+0x92>
  {
    return false;
 800366e:	2300      	movs	r3, #0
 8003670:	e004      	b.n	800367c <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8003672:	490b      	ldr	r1, [pc, #44]	; (80036a0 <lcdInit+0xc0>)
 8003674:	480b      	ldr	r0, [pc, #44]	; (80036a4 <lcdInit+0xc4>)
 8003676:	f7fe ff3d 	bl	80024f4 <cliAdd>
#endif

  return true;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	2000001c 	.word	0x2000001c
 8003688:	20000284 	.word	0x20000284
 800368c:	20000268 	.word	0x20000268
 8003690:	08003591 	.word	0x08003591
 8003694:	200002c0 	.word	0x200002c0
 8003698:	20000285 	.word	0x20000285
 800369c:	20000294 	.word	0x20000294
 80036a0:	080041c9 	.word	0x080041c9
 80036a4:	08015f7c 	.word	0x08015f7c

080036a8 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return is_init;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <lcdIsInit+0x14>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000284 	.word	0x20000284

080036c0 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	bf28      	it	cs
 80036d0:	2364      	movcs	r3, #100	; 0x64
 80036d2:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <lcdSetBackLight+0x48>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	79fa      	ldrb	r2, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d002      	beq.n	80036e4 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <lcdSetBackLight+0x48>)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <lcdSetBackLight+0x48>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 80036ec:	2101      	movs	r1, #1
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7ff fe12 	bl	8003318 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 80036f4:	e003      	b.n	80036fe <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 80036f6:	2100      	movs	r1, #0
 80036f8:	2001      	movs	r0, #1
 80036fa:	f7ff fe0d 	bl	8003318 <gpioPinWrite>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2000001c 	.word	0x2000001c

0800370c <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <lcdDrawPixel+0x14>)
 800370e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003712:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000294 	.word	0x20000294

08003724 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8003724:	b510      	push	{r4, lr}
 8003726:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8003728:	f000 fa70 	bl	8003c0c <lcdGetFrameBuffer>
 800372c:	f500 421f 	add.w	r2, r0, #40704	; 0x9f00
 8003730:	b2a1      	uxth	r1, r4
 8003732:	32fe      	adds	r2, #254	; 0xfe
 8003734:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8003736:	f823 1f02 	strh.w	r1, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800373a:	4293      	cmp	r3, r2
 800373c:	d1fb      	bne.n	8003736 <lcdClearBuffer+0x12>
  }
}
 800373e:	bd10      	pop	{r4, pc}

08003740 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8003740:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003744:	4616      	mov	r6, r2
 8003746:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
 8003748:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 800374c:	0052      	lsls	r2, r2, #1
  int32_t x     = 0;

  while (x < r)
 800374e:	2e00      	cmp	r6, #0
  int32_t ddF_y = -2 * r;
 8003750:	9200      	str	r2, [sp, #0]
{
 8003752:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  while (x < r)
 8003756:	f340 8090 	ble.w	800387a <lcdDrawCircleHelper+0x13a>
 800375a:	f003 0204 	and.w	r2, r3, #4
 800375e:	9201      	str	r2, [sp, #4]
 8003760:	f003 0202 	and.w	r2, r3, #2
 8003764:	9202      	str	r2, [sp, #8]
 8003766:	f003 0208 	and.w	r2, r3, #8
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	f1c6 0401 	rsb	r4, r6, #1
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003772:	fa1f f880 	uxth.w	r8, r0
 8003776:	fa1f f981 	uxth.w	r9, r1
 800377a:	9203      	str	r2, [sp, #12]
 800377c:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 800377e:	2500      	movs	r5, #0
 8003780:	e00a      	b.n	8003798 <lcdDrawCircleHelper+0x58>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8003782:	9b02      	ldr	r3, [sp, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d12e      	bne.n	80037e6 <lcdDrawCircleHelper+0xa6>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d144      	bne.n	8003818 <lcdDrawCircleHelper+0xd8>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 800378e:	9b04      	ldr	r3, [sp, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d15a      	bne.n	800384a <lcdDrawCircleHelper+0x10a>
  while (x < r)
 8003794:	42ae      	cmp	r6, r5
 8003796:	dd70      	ble.n	800387a <lcdDrawCircleHelper+0x13a>
    if (f >= 0)
 8003798:	2c00      	cmp	r4, #0
 800379a:	db04      	blt.n	80037a6 <lcdDrawCircleHelper+0x66>
      ddF_y += 2;
 800379c:	9b00      	ldr	r3, [sp, #0]
 800379e:	3302      	adds	r3, #2
 80037a0:	9300      	str	r3, [sp, #0]
      f     += ddF_y;
 80037a2:	441c      	add	r4, r3
      r--;
 80037a4:	3e01      	subs	r6, #1
    x++;
 80037a6:	3501      	adds	r5, #1
    if (cornername & 0x4)
 80037a8:	9b01      	ldr	r3, [sp, #4]
    f     += ddF_x;
 80037aa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80037ae:	3401      	adds	r4, #1
    if (cornername & 0x4)
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0e6      	beq.n	8003782 <lcdDrawCircleHelper+0x42>
 80037b4:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 + r, color);
 80037b6:	fa1f fb86 	uxth.w	fp, r6
 80037ba:	eb08 0003 	add.w	r0, r8, r3
 80037be:	eb09 010b 	add.w	r1, r9, fp
 80037c2:	b280      	uxth	r0, r0
 80037c4:	b289      	uxth	r1, r1
 80037c6:	4652      	mov	r2, sl
 80037c8:	9305      	str	r3, [sp, #20]
 80037ca:	f7ff ff9f 	bl	800370c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 80037ce:	9b05      	ldr	r3, [sp, #20]
 80037d0:	eb08 000b 	add.w	r0, r8, fp
 80037d4:	eb09 0103 	add.w	r1, r9, r3
 80037d8:	b289      	uxth	r1, r1
 80037da:	b280      	uxth	r0, r0
 80037dc:	f7ff ff96 	bl	800370c <lcdDrawPixel>
    if (cornername & 0x2)
 80037e0:	9b02      	ldr	r3, [sp, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0d0      	beq.n	8003788 <lcdDrawCircleHelper+0x48>
 80037e6:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 - r, color);
 80037e8:	fa1f fb86 	uxth.w	fp, r6
 80037ec:	eb08 0003 	add.w	r0, r8, r3
 80037f0:	eba9 010b 	sub.w	r1, r9, fp
 80037f4:	b280      	uxth	r0, r0
 80037f6:	b289      	uxth	r1, r1
 80037f8:	4652      	mov	r2, sl
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	f7ff ff86 	bl	800370c <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003800:	9b05      	ldr	r3, [sp, #20]
 8003802:	eb08 000b 	add.w	r0, r8, fp
 8003806:	eba9 0103 	sub.w	r1, r9, r3
 800380a:	b289      	uxth	r1, r1
 800380c:	b280      	uxth	r0, r0
 800380e:	f7ff ff7d 	bl	800370c <lcdDrawPixel>
    if (cornername & 0x8)
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ba      	beq.n	800378e <lcdDrawCircleHelper+0x4e>
      lcdDrawPixel(x0 - r, y0 + x, color);
 8003818:	b2b3      	uxth	r3, r6
 800381a:	fa1f fb85 	uxth.w	fp, r5
 800381e:	eba8 0003 	sub.w	r0, r8, r3
 8003822:	eb09 010b 	add.w	r1, r9, fp
 8003826:	b280      	uxth	r0, r0
 8003828:	b289      	uxth	r1, r1
 800382a:	4652      	mov	r2, sl
 800382c:	9305      	str	r3, [sp, #20]
 800382e:	f7ff ff6d 	bl	800370c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003832:	9b05      	ldr	r3, [sp, #20]
 8003834:	eba8 000b 	sub.w	r0, r8, fp
 8003838:	eb03 0109 	add.w	r1, r3, r9
 800383c:	b289      	uxth	r1, r1
 800383e:	b280      	uxth	r0, r0
 8003840:	f7ff ff64 	bl	800370c <lcdDrawPixel>
    if (cornername & 0x1)
 8003844:	9b04      	ldr	r3, [sp, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0a4      	beq.n	8003794 <lcdDrawCircleHelper+0x54>
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 800384a:	b2b3      	uxth	r3, r6
 800384c:	fa1f fb85 	uxth.w	fp, r5
 8003850:	eba8 0003 	sub.w	r0, r8, r3
 8003854:	eba9 010b 	sub.w	r1, r9, fp
 8003858:	b280      	uxth	r0, r0
 800385a:	b289      	uxth	r1, r1
 800385c:	4652      	mov	r2, sl
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	f7ff ff54 	bl	800370c <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8003864:	9b05      	ldr	r3, [sp, #20]
 8003866:	eba8 000b 	sub.w	r0, r8, fp
 800386a:	eba9 0103 	sub.w	r1, r9, r3
 800386e:	b289      	uxth	r1, r1
 8003870:	b280      	uxth	r0, r0
 8003872:	f7ff ff4b 	bl	800370c <lcdDrawPixel>
  while (x < r)
 8003876:	42ae      	cmp	r6, r5
 8003878:	dc8e      	bgt.n	8003798 <lcdDrawCircleHelper+0x58>
    }
  }
}
 800387a:	b006      	add	sp, #24
 800387c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003880 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003880:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003884:	b08a      	sub	sp, #40	; 0x28
 8003886:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800388a:	9206      	str	r2, [sp, #24]
 800388c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
{
 8003890:	9604      	str	r6, [sp, #16]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003892:	fa1f f984 	uxth.w	r9, r4
{
 8003896:	4606      	mov	r6, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003898:	b280      	uxth	r0, r0
{
 800389a:	469c      	mov	ip, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800389c:	f8bd 8010 	ldrh.w	r8, [sp, #16]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80038a0:	f8cd c01c 	str.w	ip, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038a4:	eb00 0a09 	add.w	sl, r0, r9
 80038a8:	eba5 0b49 	sub.w	fp, r5, r9, lsl #1
 80038ac:	fa0f fa8a 	sxth.w	sl, sl
 80038b0:	fa0f fb8b 	sxth.w	fp, fp
 80038b4:	9103      	str	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80038b6:	f8bd e01c 	ldrh.w	lr, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038ba:	9008      	str	r0, [sp, #32]
 80038bc:	465a      	mov	r2, fp
 80038be:	4650      	mov	r0, sl
 80038c0:	4643      	mov	r3, r8
 80038c2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80038c6:	f8cd e014 	str.w	lr, [sp, #20]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80038ca:	9509      	str	r5, [sp, #36]	; 0x24
 80038cc:	f000 fa84 	bl	8003dd8 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80038d0:	9905      	ldr	r1, [sp, #20]
 80038d2:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 80038d6:	3901      	subs	r1, #1
 80038d8:	4429      	add	r1, r5
 80038da:	465a      	mov	r2, fp
 80038dc:	4650      	mov	r0, sl
 80038de:	4643      	mov	r3, r8
 80038e0:	b209      	sxth	r1, r1
 80038e2:	f000 fa79 	bl	8003dd8 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 80038e6:	9905      	ldr	r1, [sp, #20]
 80038e8:	444d      	add	r5, r9
 80038ea:	eba1 0949 	sub.w	r9, r1, r9, lsl #1
 80038ee:	b22d      	sxth	r5, r5
 80038f0:	fa0f f989 	sxth.w	r9, r9
 80038f4:	464a      	mov	r2, r9
 80038f6:	4629      	mov	r1, r5
 80038f8:	4643      	mov	r3, r8
 80038fa:	b230      	sxth	r0, r6
 80038fc:	f000 fa47 	bl	8003d8e <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003902:	9a08      	ldr	r2, [sp, #32]
 8003904:	1e58      	subs	r0, r3, #1
 8003906:	4629      	mov	r1, r5
 8003908:	4410      	add	r0, r2

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800390a:	4635      	mov	r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 800390c:	464a      	mov	r2, r9
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800390e:	46b1      	mov	r9, r6
 8003910:	9e03      	ldr	r6, [sp, #12]
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003912:	4643      	mov	r3, r8
 8003914:	b200      	sxth	r0, r0
 8003916:	f000 fa3a 	bl	8003d8e <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800391a:	eb04 0806 	add.w	r8, r4, r6
 800391e:	4425      	add	r5, r4
 8003920:	9e04      	ldr	r6, [sp, #16]
 8003922:	9600      	str	r6, [sp, #0]
 8003924:	4628      	mov	r0, r5
 8003926:	4641      	mov	r1, r8
 8003928:	4622      	mov	r2, r4
 800392a:	2301      	movs	r3, #1
 800392c:	f7ff ff08 	bl	8003740 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003930:	9a06      	ldr	r2, [sp, #24]
 8003932:	9600      	str	r6, [sp, #0]
 8003934:	444a      	add	r2, r9
 8003936:	eba2 0904 	sub.w	r9, r2, r4
 800393a:	f109 39ff 	add.w	r9, r9, #4294967295
 800393e:	4641      	mov	r1, r8
 8003940:	4648      	mov	r0, r9
 8003942:	4622      	mov	r2, r4
 8003944:	2302      	movs	r3, #2
 8003946:	9604      	str	r6, [sp, #16]
 8003948:	f7ff fefa 	bl	8003740 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800394c:	9e03      	ldr	r6, [sp, #12]
 800394e:	9b07      	ldr	r3, [sp, #28]
 8003950:	4433      	add	r3, r6
 8003952:	eba3 0804 	sub.w	r8, r3, r4
 8003956:	9e04      	ldr	r6, [sp, #16]
 8003958:	9600      	str	r6, [sp, #0]
 800395a:	f108 38ff 	add.w	r8, r8, #4294967295
 800395e:	4648      	mov	r0, r9
 8003960:	4641      	mov	r1, r8
 8003962:	4622      	mov	r2, r4
 8003964:	2304      	movs	r3, #4
 8003966:	f7ff feeb 	bl	8003740 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 800396a:	4641      	mov	r1, r8
 800396c:	4628      	mov	r0, r5
 800396e:	4622      	mov	r2, r4
 8003970:	2308      	movs	r3, #8
 8003972:	9612      	str	r6, [sp, #72]	; 0x48
}
 8003974:	b00a      	add	sp, #40	; 0x28
 8003976:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 800397a:	f7ff bee1 	b.w	8003740 <lcdDrawCircleHelper>

0800397e <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 800397e:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003982:	4616      	mov	r6, r2
 8003984:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8003986:	f1c6 0a00 	rsb	sl, r6, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 800398a:	2e00      	cmp	r6, #0
{
 800398c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 800398e:	ebaa 0a06 	sub.w	sl, sl, r6
  while (y < r)
 8003992:	dd73      	ble.n	8003a7c <lcdDrawFillCircleHelper+0xfe>
 8003994:	3201      	adds	r2, #1
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003996:	b292      	uxth	r2, r2
 8003998:	b280      	uxth	r0, r0
 800399a:	b289      	uxth	r1, r1
 800399c:	9203      	str	r2, [sp, #12]
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	f1c6 0401 	rsb	r4, r6, #1
 80039aa:	9001      	str	r0, [sp, #4]
 80039ac:	9102      	str	r1, [sp, #8]
 80039ae:	9205      	str	r2, [sp, #20]
 80039b0:	9304      	str	r3, [sp, #16]
  int32_t y     = 0;
 80039b2:	2500      	movs	r5, #0
 80039b4:	e004      	b.n	80039c0 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 80039b6:	9b04      	ldr	r3, [sp, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d137      	bne.n	8003a2c <lcdDrawFillCircleHelper+0xae>
  while (y < r)
 80039bc:	42ae      	cmp	r6, r5
 80039be:	dd5d      	ble.n	8003a7c <lcdDrawFillCircleHelper+0xfe>
    if (f >= 0)
 80039c0:	2c00      	cmp	r4, #0
    y++;
 80039c2:	f105 0501 	add.w	r5, r5, #1
    if (f >= 0)
 80039c6:	db03      	blt.n	80039d0 <lcdDrawFillCircleHelper+0x52>
      ddF_y += 2;
 80039c8:	f10a 0a02 	add.w	sl, sl, #2
      f     += ddF_y;
 80039cc:	4454      	add	r4, sl
      r--;
 80039ce:	3e01      	subs	r6, #1
    if (cornername & 0x1)
 80039d0:	9b05      	ldr	r3, [sp, #20]
    f     += ddF_x;
 80039d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80039d6:	3401      	adds	r4, #1
    if (cornername & 0x1)
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ec      	beq.n	80039b6 <lcdDrawFillCircleHelper+0x38>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80039dc:	9901      	ldr	r1, [sp, #4]
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80039e4:	fa1f f986 	uxth.w	r9, r6
 80039e8:	eba1 0009 	sub.w	r0, r1, r9
 80039ec:	9902      	ldr	r1, [sp, #8]
 80039ee:	fa1f f885 	uxth.w	r8, r5
 80039f2:	fa1f fb8c 	uxth.w	fp, ip
 80039f6:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 80039fa:	4441      	add	r1, r8
 80039fc:	b212      	sxth	r2, r2
 80039fe:	b200      	sxth	r0, r0
 8003a00:	b209      	sxth	r1, r1
 8003a02:	465b      	mov	r3, fp
 8003a04:	f000 f9e8 	bl	8003dd8 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8003a08:	9a02      	ldr	r2, [sp, #8]
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	eb09 0102 	add.w	r1, r9, r2
 8003a10:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003a14:	9b01      	ldr	r3, [sp, #4]
 8003a16:	eba3 0008 	sub.w	r0, r3, r8
 8003a1a:	b209      	sxth	r1, r1
 8003a1c:	465b      	mov	r3, fp
 8003a1e:	b212      	sxth	r2, r2
 8003a20:	b200      	sxth	r0, r0
 8003a22:	f000 f9d9 	bl	8003dd8 <lcdDrawHLine>
    if (cornername & 0x2)
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0c7      	beq.n	80039bc <lcdDrawFillCircleHelper+0x3e>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003a2c:	9901      	ldr	r1, [sp, #4]
 8003a2e:	9b03      	ldr	r3, [sp, #12]
 8003a30:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003a34:	fa1f f986 	uxth.w	r9, r6
 8003a38:	eba1 0009 	sub.w	r0, r1, r9
 8003a3c:	9902      	ldr	r1, [sp, #8]
 8003a3e:	fa1f f885 	uxth.w	r8, r5
 8003a42:	fa1f fb8c 	uxth.w	fp, ip
 8003a46:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 8003a4a:	eba1 0108 	sub.w	r1, r1, r8
 8003a4e:	b212      	sxth	r2, r2
 8003a50:	b200      	sxth	r0, r0
 8003a52:	b209      	sxth	r1, r1
 8003a54:	465b      	mov	r3, fp
 8003a56:	f000 f9bf 	bl	8003dd8 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8003a5a:	9a02      	ldr	r2, [sp, #8]
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	eba2 0109 	sub.w	r1, r2, r9
 8003a62:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003a66:	9b01      	ldr	r3, [sp, #4]
 8003a68:	eba3 0008 	sub.w	r0, r3, r8
 8003a6c:	b209      	sxth	r1, r1
 8003a6e:	465b      	mov	r3, fp
 8003a70:	b212      	sxth	r2, r2
 8003a72:	b200      	sxth	r0, r0
 8003a74:	f000 f9b0 	bl	8003dd8 <lcdDrawHLine>
  while (y < r)
 8003a78:	42ae      	cmp	r6, r5
 8003a7a:	dca1      	bgt.n	80039c0 <lcdDrawFillCircleHelper+0x42>
    }
  }
}
 8003a7c:	b006      	add	sp, #24
 8003a7e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003a82 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003a82:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003a86:	b083      	sub	sp, #12
 8003a88:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 8003a8c:	4689      	mov	r9, r1
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003a8e:	b2a1      	uxth	r1, r4
{
 8003a90:	461e      	mov	r6, r3
 8003a92:	4615      	mov	r5, r2
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003a94:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003a98:	fa1f f28a 	uxth.w	r2, sl
 8003a9c:	4449      	add	r1, r9
 8003a9e:	9200      	str	r2, [sp, #0]
{
 8003aa0:	4680      	mov	r8, r0
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003aa2:	b22a      	sxth	r2, r5
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	b209      	sxth	r1, r1
 8003aa8:	b200      	sxth	r0, r0
 8003aaa:	f000 f9ba 	bl	8003e22 <lcdDrawFillRect>

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003aae:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003ab2:	eb09 0106 	add.w	r1, r9, r6
 8003ab6:	3d01      	subs	r5, #1
 8003ab8:	44a0      	add	r8, r4
 8003aba:	1b09      	subs	r1, r1, r4
 8003abc:	4640      	mov	r0, r8
 8003abe:	4622      	mov	r2, r4
 8003ac0:	9500      	str	r5, [sp, #0]
 8003ac2:	3901      	subs	r1, #1
 8003ac4:	f8cd a004 	str.w	sl, [sp, #4]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f7ff ff58 	bl	800397e <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003ace:	4640      	mov	r0, r8
 8003ad0:	eb09 0104 	add.w	r1, r9, r4
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	950a      	str	r5, [sp, #40]	; 0x28
 8003ada:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
}
 8003ade:	b003      	add	sp, #12
 8003ae0:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003ae4:	f7ff bf4b 	b.w	800397e <lcdDrawFillCircleHelper>

08003ae8 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return fps_count;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <lcdGetFps+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000290 	.word	0x20000290

08003b00 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return fps_time;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <lcdGetFpsTime+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000028c 	.word	0x2000028c

08003b18 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <lcdDrawAvailable+0x28>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20000286 	.word	0x20000286

08003b44 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8003b44:	b598      	push	{r3, r4, r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  if (is_init != true)
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <lcdRequestDraw+0x5c>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <lcdRequestDraw+0x16>
  {
    return false;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e020      	b.n	8003b9c <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <lcdRequestDraw+0x60>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <lcdRequestDraw+0x22>
  {
    return false;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e01a      	b.n	8003b9c <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <lcdRequestDraw+0x64>)
 8003b68:	689c      	ldr	r4, [r3, #8]
 8003b6a:	237f      	movs	r3, #127	; 0x7f
 8003b6c:	229f      	movs	r2, #159	; 0x9f
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2000      	movs	r0, #0
 8003b72:	47a0      	blx	r4

  lcd_request_draw = true;
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <lcdRequestDraw+0x60>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <lcdRequestDraw+0x64>)
 8003b7c:	699c      	ldr	r4, [r3, #24]
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <lcdRequestDraw+0x68>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	035b      	lsls	r3, r3, #13
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <lcdRequestDraw+0x6c>)
 8003b8e:	4413      	add	r3, r2
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003b96:	4618      	mov	r0, r3
 8003b98:	47a0      	blx	r4

  return true;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd98      	pop	{r3, r4, r7, pc}
 8003ba0:	20000284 	.word	0x20000284
 8003ba4:	20000286 	.word	0x20000286
 8003ba8:	20000268 	.word	0x20000268
 8003bac:	20000285 	.word	0x20000285
 8003bb0:	200002c0 	.word	0x200002c0

08003bb4 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <lcdUpdateDraw+0x54>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d118      	bne.n	8003bfa <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003bc8:	f7ff ffbc 	bl	8003b44 <lcdRequestDraw>

  pre_time = millis();
 8003bcc:	f7fd fb1d 	bl	800120a <millis>
 8003bd0:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003bd2:	e009      	b.n	8003be8 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fd fb0d 	bl	80011f4 <delay>
    if (millis()-pre_time >= 100)
 8003bda:	f7fd fb16 	bl	800120a <millis>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b63      	cmp	r3, #99	; 0x63
 8003be6:	d80a      	bhi.n	8003bfe <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003be8:	f7ff ff96 	bl	8003b18 <lcdDrawAvailable>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ed      	bne.n	8003bd4 <lcdUpdateDraw+0x20>
 8003bf8:	e002      	b.n	8003c00 <lcdUpdateDraw+0x4c>
    return;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <lcdUpdateDraw+0x4c>
    {
      break;
 8003bfe:	bf00      	nop
    }
  }
}
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000284 	.word	0x20000284

08003c0c <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <lcdGetFrameBuffer+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000294 	.word	0x20000294

08003c24 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	80fb      	strh	r3, [r7, #6]
 8003c36:	4603      	mov	r3, r0
 8003c38:	80bb      	strh	r3, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003c42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003c50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003c54:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5c:	1acb      	subs	r3, r1, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bfb8      	it	lt
 8003c62:	425b      	neglt	r3, r3
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bfcc      	ite	gt
 8003c68:	2301      	movgt	r3, #1
 8003c6a:	2300      	movle	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	da01      	bge.n	8003c7c <lcdDrawLine+0x58>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8003c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da01      	bge.n	8003c88 <lcdDrawLine+0x64>
 8003c84:	2300      	movs	r3, #0
 8003c86:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da01      	bge.n	8003c94 <lcdDrawLine+0x70>
 8003c90:	2300      	movs	r3, #0
 8003c92:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003c94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da01      	bge.n	8003ca0 <lcdDrawLine+0x7c>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003ca0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	833b      	strh	r3, [r7, #24]
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	80fb      	strh	r3, [r7, #6]
 8003cb0:	8b3b      	ldrh	r3, [r7, #24]
 8003cb2:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	82fb      	strh	r3, [r7, #22]
 8003cb8:	883b      	ldrh	r3, [r7, #0]
 8003cba:	807b      	strh	r3, [r7, #2]
 8003cbc:	8afb      	ldrh	r3, [r7, #22]
 8003cbe:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003cc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	dd0b      	ble.n	8003ce4 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	82bb      	strh	r3, [r7, #20]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	80fb      	strh	r3, [r7, #6]
 8003cd4:	8abb      	ldrh	r3, [r7, #20]
 8003cd6:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003cd8:	88bb      	ldrh	r3, [r7, #4]
 8003cda:	827b      	strh	r3, [r7, #18]
 8003cdc:	883b      	ldrh	r3, [r7, #0]
 8003cde:	80bb      	strh	r3, [r7, #4]
 8003ce0:	8a7b      	ldrh	r3, [r7, #18]
 8003ce2:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003ce4:	887a      	ldrh	r2, [r7, #2]
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003cee:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003cf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfb8      	it	lt
 8003cfc:	425b      	neglt	r3, r3
 8003cfe:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d04:	0fda      	lsrs	r2, r3, #31
 8003d06:	4413      	add	r3, r2
 8003d08:	105b      	asrs	r3, r3, #1
 8003d0a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8003d0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003d10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	da02      	bge.n	8003d1e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	83bb      	strh	r3, [r7, #28]
 8003d1c:	e02d      	b.n	8003d7a <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8003d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d22:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003d24:	e029      	b.n	8003d7a <lcdDrawLine+0x156>
  {
    if (steep)
 8003d26:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8003d2e:	88bb      	ldrh	r3, [r7, #4]
 8003d30:	88f9      	ldrh	r1, [r7, #6]
 8003d32:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fce9 	bl	800370c <lcdDrawPixel>
 8003d3a:	e005      	b.n	8003d48 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	88b9      	ldrh	r1, [r7, #4]
 8003d40:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fce2 	bl	800370c <lcdDrawPixel>
    }
    err -= dy;
 8003d48:	8bfa      	ldrh	r2, [r7, #30]
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8003d52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da09      	bge.n	8003d6e <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8003d5a:	88ba      	ldrh	r2, [r7, #4]
 8003d5c:	8bbb      	ldrh	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8003d64:	8bfa      	ldrh	r2, [r7, #30]
 8003d66:	8a3b      	ldrh	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8003d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	80fb      	strh	r3, [r7, #6]
 8003d7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	ddcf      	ble.n	8003d26 <lcdDrawLine+0x102>
    }
  }
}
 8003d86:	bf00      	nop
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}

08003d8e <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003d8e:	b590      	push	{r4, r7, lr}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	4604      	mov	r4, r0
 8003d96:	4608      	mov	r0, r1
 8003d98:	4611      	mov	r1, r2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	80fb      	strh	r3, [r7, #6]
 8003da0:	4603      	mov	r3, r0
 8003da2:	80bb      	strh	r3, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
 8003da8:	4613      	mov	r3, r2
 8003daa:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8003dac:	88ba      	ldrh	r2, [r7, #4]
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	4413      	add	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b21c      	sxth	r4, r3
 8003dba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003dc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dc6:	883b      	ldrh	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	4623      	mov	r3, r4
 8003dcc:	f7ff ff2a 	bl	8003c24 <lcdDrawLine>
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	4604      	mov	r4, r0
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	80fb      	strh	r3, [r7, #6]
 8003dea:	4603      	mov	r3, r0
 8003dec:	80bb      	strh	r3, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	807b      	strh	r3, [r7, #2]
 8003df2:	4613      	mov	r3, r2
 8003df4:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b21a      	sxth	r2, r3
 8003e04:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e0c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e10:	883b      	ldrh	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4623      	mov	r3, r4
 8003e16:	f7ff ff05 	bl	8003c24 <lcdDrawLine>
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd90      	pop	{r4, r7, pc}

08003e22 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003e22:	b590      	push	{r4, r7, lr}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4623      	mov	r3, r4
 8003e32:	80fb      	strh	r3, [r7, #6]
 8003e34:	4603      	mov	r3, r0
 8003e36:	80bb      	strh	r3, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	81fb      	strh	r3, [r7, #14]
 8003e44:	e00e      	b.n	8003e64 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8003e46:	8c3b      	ldrh	r3, [r7, #32]
 8003e48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e50:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003e54:	f7ff ff9b 	bl	8003d8e <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8003e58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	81fb      	strh	r3, [r7, #14]
 8003e64:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003e68:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003e6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e70:	440b      	add	r3, r1
 8003e72:	429a      	cmp	r2, r3
 8003e74:	dbe7      	blt.n	8003e46 <lcdDrawFillRect+0x24>
  }
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}
	...

08003e80 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8003e80:	b408      	push	{r3}
 8003e82:	b590      	push	{r4, r7, lr}
 8003e84:	b0d8      	sub	sp, #352	; 0x160
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	6018      	str	r0, [r3, #0]
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	6019      	str	r1, [r3, #0]
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8003e98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8003eaa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003eae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003eb2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003eb6:	21ff      	movs	r1, #255	; 0xff
 8003eb8:	f00f fd70 	bl	801399c <vsniprintf>
 8003ebc:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8003ec0:	4b67      	ldr	r3, [pc, #412]	; (8004060 <lcdPrintf+0x1e0>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b67      	ldr	r3, [pc, #412]	; (8004064 <lcdPrintf+0x1e4>)
 8003ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d05d      	beq.n	8003f8e <lcdPrintf+0x10e>
  {
    for( i=0; i<len; i+=Size_Char )
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ed8:	e052      	b.n	8003f80 <lcdPrintf+0x100>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8003eda:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ede:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ee2:	4413      	add	r3, r2
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <lcdPrintf+0x1e0>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4b5d      	ldr	r3, [pc, #372]	; (8004064 <lcdPrintf+0x1e4>)
 8003eee:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003ef2:	f107 0108 	add.w	r1, r7, #8
 8003ef6:	f107 000c 	add.w	r0, r7, #12
 8003efa:	1dbb      	adds	r3, r7, #6
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4623      	mov	r3, r4
 8003f02:	6809      	ldr	r1, [r1, #0]
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	f000 f903 	bl	8004110 <disEngFont>

      Size_Char = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <lcdPrintf+0x1e0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b53      	ldr	r3, [pc, #332]	; (8004064 <lcdPrintf+0x1e4>)
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8003f22:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <lcdPrintf+0x1e0>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <lcdPrintf+0x1e4>)
 8003f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8003f34:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	f107 010c 	add.w	r1, r7, #12
 8003f40:	6809      	ldr	r1, [r1, #0]
 8003f42:	440a      	add	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8003f46:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	2ba0      	cmp	r3, #160	; 0xa0
 8003f54:	dd0d      	ble.n	8003f72 <lcdPrintf+0xf2>
      {
        x  = x_Pre;
 8003f56:	f107 030c 	add.w	r3, r7, #12
 8003f5a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003f5e:	601a      	str	r2, [r3, #0]
        y += font_height;
 8003f60:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8003f64:	f107 0308 	add.w	r3, r7, #8
 8003f68:	f107 0108 	add.w	r1, r7, #8
 8003f6c:	6809      	ldr	r1, [r1, #0]
 8003f6e:	440a      	add	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8003f72:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003f76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f80:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003f84:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	dba6      	blt.n	8003eda <lcdPrintf+0x5a>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8003f8c:	e060      	b.n	8004050 <lcdPrintf+0x1d0>
    for( i=0; i<len; i+=Size_Char )
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003f94:	e054      	b.n	8004040 <lcdPrintf+0x1c0>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8003f96:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003f9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f107 0214 	add.w	r2, r7, #20
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f002 fc68 	bl	800687c <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8003fac:	1dbb      	adds	r3, r7, #6
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	f107 0214 	add.w	r2, r7, #20
 8003fb4:	f107 0108 	add.w	r1, r7, #8
 8003fb8:	f107 000c 	add.w	r0, r7, #12
 8003fbc:	6809      	ldr	r1, [r1, #0]
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	f000 f852 	bl	8004068 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	885b      	ldrh	r3, [r3, #2]
 8003fca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8003fce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	dd0a      	ble.n	8003fec <lcdPrintf+0x16c>
        font_width = 16;
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	f107 020c 	add.w	r2, r7, #12
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	3210      	adds	r2, #16
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e009      	b.n	8004000 <lcdPrintf+0x180>
        font_width = 8;
 8003fec:	2308      	movs	r3, #8
 8003fee:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8003ff2:	f107 030c 	add.w	r3, r7, #12
 8003ff6:	f107 020c 	add.w	r2, r7, #12
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	3208      	adds	r2, #8
 8003ffe:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8004000:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4413      	add	r3, r2
 800400c:	2ba0      	cmp	r3, #160	; 0xa0
 800400e:	dd0b      	ble.n	8004028 <lcdPrintf+0x1a8>
        x  = x_Pre;
 8004010:	f107 030c 	add.w	r3, r7, #12
 8004014:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004018:	601a      	str	r2, [r3, #0]
        y += 16;
 800401a:	f107 0308 	add.w	r3, r7, #8
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	3210      	adds	r2, #16
 8004026:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	889b      	ldrh	r3, [r3, #4]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d00d      	beq.n	800404e <lcdPrintf+0x1ce>
    for( i=0; i<len; i+=Size_Char )
 8004032:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004036:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800403a:	4413      	add	r3, r2
 800403c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004040:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004044:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004048:	429a      	cmp	r2, r3
 800404a:	dba4      	blt.n	8003f96 <lcdPrintf+0x116>
}
 800404c:	e000      	b.n	8004050 <lcdPrintf+0x1d0>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800404e:	bf00      	nop
}
 8004050:	bf00      	nop
 8004052:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800405c:	b001      	add	sp, #4
 800405e:	4770      	bx	lr
 8004060:	2000001d 	.word	0x2000001d
 8004064:	20000020 	.word	0x20000020

08004068 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	885b      	ldrh	r3, [r3, #2]
 800407a:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 800407c:	8b3b      	ldrh	r3, [r7, #24]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <disHanFont+0x1e>
  {
    FontSize = 2;
 8004082:	2302      	movs	r3, #2
 8004084:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8004086:	2300      	movs	r3, #0
 8004088:	83fb      	strh	r3, [r7, #30]
 800408a:	e03a      	b.n	8004102 <disHanFont+0x9a>
  {
    index_x = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8004090:	2300      	movs	r3, #0
 8004092:	83bb      	strh	r3, [r7, #28]
 8004094:	e02e      	b.n	80040f4 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8004096:	8bfb      	ldrh	r3, [r7, #30]
 8004098:	8b3a      	ldrh	r2, [r7, #24]
 800409a:	fb02 f203 	mul.w	r2, r2, r3
 800409e:	8bbb      	ldrh	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	799b      	ldrb	r3, [r3, #6]
 80040a8:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80040aa:	2300      	movs	r3, #0
 80040ac:	837b      	strh	r3, [r7, #26]
 80040ae:	e01b      	b.n	80040e8 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 80040b0:	7d7a      	ldrb	r2, [r7, #21]
 80040b2:	8b7b      	ldrh	r3, [r7, #26]
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	8afb      	ldrh	r3, [r7, #22]
 80040c6:	4413      	add	r3, r2
 80040c8:	b298      	uxth	r0, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	8bfb      	ldrh	r3, [r7, #30]
 80040d0:	4413      	add	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	4619      	mov	r1, r3
 80040d8:	f7ff fb18 	bl	800370c <lcdDrawPixel>
        }
        index_x++;
 80040dc:	8afb      	ldrh	r3, [r7, #22]
 80040de:	3301      	adds	r3, #1
 80040e0:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	3301      	adds	r3, #1
 80040e6:	837b      	strh	r3, [r7, #26]
 80040e8:	8b7b      	ldrh	r3, [r7, #26]
 80040ea:	2b07      	cmp	r3, #7
 80040ec:	d9e0      	bls.n	80040b0 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80040ee:	8bbb      	ldrh	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	83bb      	strh	r3, [r7, #28]
 80040f4:	8bba      	ldrh	r2, [r7, #28]
 80040f6:	8b3b      	ldrh	r3, [r7, #24]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d3cc      	bcc.n	8004096 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80040fc:	8bfb      	ldrh	r3, [r7, #30]
 80040fe:	3301      	adds	r3, #1
 8004100:	83fb      	strh	r3, [r7, #30]
 8004102:	8bfb      	ldrh	r3, [r7, #30]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d9c1      	bls.n	800408c <disHanFont+0x24>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e035      	b.n	8004192 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	3b20      	subs	r3, #32
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	7849      	ldrb	r1, [r1, #1]
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4619      	mov	r1, r3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	440b      	add	r3, r1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e01a      	b.n	8004180 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	b29a      	uxth	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	b29b      	uxth	r3, r3
 8004162:	4413      	add	r3, r2
 8004164:	b298      	uxth	r0, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	b29a      	uxth	r2, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	b29b      	uxth	r3, r3
 800416e:	4413      	add	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004174:	4619      	mov	r1, r3
 8004176:	f7ff fac9 	bl	800370c <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	3301      	adds	r3, #1
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4293      	cmp	r3, r2
 800418a:	d3de      	bcc.n	800414a <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	3301      	adds	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	785b      	ldrb	r3, [r3, #1]
 8004196:	461a      	mov	r2, r3
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4293      	cmp	r3, r2
 800419c:	d3c3      	bcc.n	8004126 <disEngFont+0x16>
      }
    }
  }
}
 800419e:	bf00      	nop
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <lcdSetFont+0x1c>)
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	7013      	strb	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	2000001d 	.word	0x2000001d

080041c8 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d163      	bne.n	80042a4 <cliLcd+0xdc>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <cliLcd+0xf8>)
 80041e2:	2000      	movs	r0, #0
 80041e4:	4798      	blx	r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05b      	beq.n	80042a4 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 80041ec:	2003      	movs	r0, #3
 80041ee:	f7ff ffdb 	bl	80041a8 <lcdSetFont>

    while(cliKeepLoop())
 80041f2:	e04b      	b.n	800428c <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 80041f4:	f7ff fc90 	bl	8003b18 <lcdDrawAvailable>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d046      	beq.n	800428c <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 80041fe:	2000      	movs	r0, #0
 8004200:	f7ff fa90 	bl	8003724 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8004204:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <cliLcd+0xfc>)
 8004206:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800420a:	2100      	movs	r1, #0
 800420c:	2019      	movs	r0, #25
 800420e:	f7ff fe37 	bl	8003e80 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8004212:	f7ff fc69 	bl	8003ae8 <lcdGetFps>
 8004216:	4603      	mov	r3, r0
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <cliLcd+0x100>)
 800421c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004220:	2110      	movs	r1, #16
 8004222:	2000      	movs	r0, #0
 8004224:	f7ff fe2c 	bl	8003e80 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8004228:	f7ff fc6a 	bl	8003b00 <lcdGetFpsTime>
 800422c:	4603      	mov	r3, r0
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4b26      	ldr	r3, [pc, #152]	; (80042cc <cliLcd+0x104>)
 8004232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004236:	2120      	movs	r1, #32
 8004238:	2000      	movs	r0, #0
 800423a:	f7ff fe21 	bl	8003e80 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 800423e:	f7fc ffe4 	bl	800120a <millis>
 8004242:	4603      	mov	r3, r0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <cliLcd+0x104>)
 8004248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424c:	2130      	movs	r1, #48	; 0x30
 800424e:	2000      	movs	r0, #0
 8004250:	f7ff fe16 	bl	8003e80 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8004254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	230a      	movs	r3, #10
 800425c:	220a      	movs	r2, #10
 800425e:	2146      	movs	r1, #70	; 0x46
 8004260:	2000      	movs	r0, #0
 8004262:	f7ff fdde 	bl	8003e22 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8004266:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	230a      	movs	r3, #10
 800426e:	220a      	movs	r2, #10
 8004270:	2146      	movs	r1, #70	; 0x46
 8004272:	200a      	movs	r0, #10
 8004274:	f7ff fdd5 	bl	8003e22 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8004278:	231f      	movs	r3, #31
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	230a      	movs	r3, #10
 800427e:	220a      	movs	r2, #10
 8004280:	2146      	movs	r1, #70	; 0x46
 8004282:	2014      	movs	r0, #20
 8004284:	f7ff fdcd 	bl	8003e22 <lcdDrawFillRect>

        lcdRequestDraw();
 8004288:	f7ff fc5c 	bl	8003b44 <lcdRequestDraw>
    while(cliKeepLoop())
 800428c:	f7fe f91c 	bl	80024c8 <cliKeepLoop>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1ae      	bne.n	80041f4 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8004296:	2000      	movs	r0, #0
 8004298:	f7ff fa44 	bl	8003724 <lcdClearBuffer>
    lcdUpdateDraw();
 800429c:	f7ff fc8a 	bl	8003bb4 <lcdUpdateDraw>

    ret = true;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	f083 0301 	eor.w	r3, r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <cliLcd+0xee>
  {
    cliPrintf("lcd test\n");
 80042b0:	4807      	ldr	r0, [pc, #28]	; (80042d0 <cliLcd+0x108>)
 80042b2:	f7fe f80f 	bl	80022d4 <cliPrintf>
  }
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08015f80 	.word	0x08015f80
 80042c4:	08015f88 	.word	0x08015f88
 80042c8:	08015f98 	.word	0x08015f98
 80042cc:	08015fa0 	.word	0x08015fa0
 80042d0:	08015fa8 	.word	0x08015fa8

080042d4 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80042da:	2301      	movs	r3, #1
 80042dc:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <ledInit+0x8c>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <ledInit+0x8c>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <ledInit+0x8c>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004308:	2301      	movs	r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	e016      	b.n	8004348 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <ledInit+0x90>)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4413      	add	r3, r2
 8004322:	889b      	ldrh	r3, [r3, #4]
 8004324:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <ledInit+0x90>)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800432e:	1d3a      	adds	r2, r7, #4
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f008 fb90 	bl	800ca58 <HAL_GPIO_Init>

    ledOff(i);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f837 	bl	80043b0 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	dde5      	ble.n	800431a <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 800434e:	4906      	ldr	r1, [pc, #24]	; (8004368 <ledInit+0x94>)
 8004350:	4806      	ldr	r0, [pc, #24]	; (800436c <ledInit+0x98>)
 8004352:	f7fe f8cf 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8004356:	7efb      	ldrb	r3, [r7, #27]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	20000030 	.word	0x20000030
 8004368:	08004429 	.word	0x08004429
 800436c:	08015c80 	.word	0x08015c80

08004370 <ledOn>:

void ledOn(uint8_t ch)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <ledOn+0x3c>)
 8004384:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	4a08      	ldr	r2, [pc, #32]	; (80043ac <ledOn+0x3c>)
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	8899      	ldrh	r1, [r3, #4]
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <ledOn+0x3c>)
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	799b      	ldrb	r3, [r3, #6]
 800439c:	461a      	mov	r2, r3
 800439e:	f008 fdd7 	bl	800cf50 <HAL_GPIO_WritePin>
 80043a2:	e000      	b.n	80043a6 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 80043a4:	bf00      	nop
}
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000030 	.word	0x20000030

080043b0 <ledOff>:

void ledOff(uint8_t ch)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d111      	bne.n	80043e4 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <ledOff+0x3c>)
 80043c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <ledOff+0x3c>)
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	8899      	ldrh	r1, [r3, #4]
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	4a05      	ldr	r2, [pc, #20]	; (80043ec <ledOff+0x3c>)
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	79db      	ldrb	r3, [r3, #7]
 80043dc:	461a      	mov	r2, r3
 80043de:	f008 fdb7 	bl	800cf50 <HAL_GPIO_WritePin>
 80043e2:	e000      	b.n	80043e6 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80043e4:	bf00      	nop
}
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000030 	.word	0x20000030

080043f0 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10c      	bne.n	800441a <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <ledToggle+0x34>)
 8004404:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	4a06      	ldr	r2, [pc, #24]	; (8004424 <ledToggle+0x34>)
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	4413      	add	r3, r2
 8004410:	889b      	ldrh	r3, [r3, #4]
 8004412:	4619      	mov	r1, r3
 8004414:	f008 fdb5 	bl	800cf82 <HAL_GPIO_TogglePin>
 8004418:	e000      	b.n	800441c <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 800441a:	bf00      	nop
}
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000030 	.word	0x20000030

08004428 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004430:	2300      	movs	r3, #0
 8004432:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d133      	bne.n	80044a4 <cliLed+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	491f      	ldr	r1, [pc, #124]	; (80044c0 <cliLed+0x98>)
 8004442:	2000      	movs	r0, #0
 8004444:	4798      	blx	r3
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02b      	beq.n	80044a4 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2001      	movs	r0, #1
 8004452:	4798      	blx	r3
 8004454:	4603      	mov	r3, r0
 8004456:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2002      	movs	r0, #2
 800445e:	4798      	blx	r3
 8004460:	4603      	mov	r3, r0
 8004462:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8004464:	7dbb      	ldrb	r3, [r7, #22]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <cliLed+0x48>
    {
      led_ch--;
 800446a:	7dbb      	ldrb	r3, [r7, #22]
 800446c:	3b01      	subs	r3, #1
 800446e:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8004470:	f7fc fecb 	bl	800120a <millis>
 8004474:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8004476:	e00e      	b.n	8004496 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8004478:	f7fc fec7 	bl	800120a <millis>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d806      	bhi.n	8004496 <cliLed+0x6e>
      {
        pre_time = millis();
 8004488:	f7fc febf 	bl	800120a <millis>
 800448c:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 800448e:	7dbb      	ldrb	r3, [r7, #22]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ffad 	bl	80043f0 <ledToggle>
    while(cliKeepLoop())
 8004496:	f7fe f817 	bl	80024c8 <cliKeepLoop>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1eb      	bne.n	8004478 <cliLed+0x50>
      }
    }

    ret = true;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	f083 0301 	eor.w	r3, r3, #1
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80044b0:	2101      	movs	r1, #1
 80044b2:	4804      	ldr	r0, [pc, #16]	; (80044c4 <cliLed+0x9c>)
 80044b4:	f7fd ff0e 	bl	80022d4 <cliPrintf>
  }
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08015c84 	.word	0x08015c84
 80044c4:	08015c8c 	.word	0x08015c8c

080044c8 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <DWT_Delay_us+0x3c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80044d6:	f009 f977 	bl	800d7c8 <HAL_RCC_GetHCLKFreq>
 80044da:	4602      	mov	r2, r0
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <DWT_Delay_us+0x40>)
 80044de:	fba3 2302 	umull	r2, r3, r3, r2
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80044ec:	bf00      	nop
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <DWT_Delay_us+0x3c>)
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3f8      	bcc.n	80044ee <DWT_Delay_us+0x26>
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	e0001000 	.word	0xe0001000
 8004508:	431bde83 	.word	0x431bde83

0800450c <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	889b      	ldrh	r3, [r3, #4]
 8004518:	041a      	lsls	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	619a      	str	r2, [r3, #24]
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	889a      	ldrh	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	619a      	str	r2, [r3, #24]
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	889b      	ldrh	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f107 020c 	add.w	r2, r7, #12
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f008 fa72 	bl	800ca58 <HAL_GPIO_Init>
}
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8004584:	2311      	movs	r3, #17
 8004586:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800458c:	2302      	movs	r3, #2
 800458e:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	889b      	ldrh	r3, [r3, #4]
 8004594:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f107 020c 	add.w	r2, r7, #12
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f008 fa59 	bl	800ca58 <HAL_GPIO_Init>

}
 80045a6:	bf00      	nop
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	4613      	mov	r3, r2
 80045ba:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ffd7 	bl	800457c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ffac 	bl	800452c <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 80045d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045d8:	f7ff ff76 	bl	80044c8 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff ff95 	bl	800450c <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 80045e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045e6:	f7ff ff6f 	bl	80044c8 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff9e 	bl	800452c <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 80045f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045f4:	f7ff ff68 	bl	80044c8 <DWT_Delay_us>
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff7f 	bl	800450c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffb4 	bl	800457c <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8004614:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8004618:	f7ff ff56 	bl	80044c8 <DWT_Delay_us>
	DWT_Delay_us(20);
 800461c:	2014      	movs	r0, #20
 800461e:	f7ff ff53 	bl	80044c8 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff91 	bl	800454a <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8004628:	2046      	movs	r0, #70	; 0x46
 800462a:	f7ff ff4d 	bl	80044c8 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	889b      	ldrh	r3, [r3, #4]
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f008 fc71 	bl	800cf20 <HAL_GPIO_ReadPin>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8004642:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8004646:	f7ff ff3f 	bl	80044c8 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800464a:	7bfb      	ldrb	r3, [r7, #15]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ff50 	bl	800450c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff85 	bl	800457c <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8004672:	200a      	movs	r0, #10
 8004674:	f7ff ff28 	bl	80044c8 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff66 	bl	800454a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 800467e:	2037      	movs	r0, #55	; 0x37
 8004680:	f7ff ff22 	bl	80044c8 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff60 	bl	800454a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 800468a:	e011      	b.n	80046b0 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff3d 	bl	800450c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ff72 	bl	800457c <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8004698:	2041      	movs	r0, #65	; 0x41
 800469a:	f7ff ff15 	bl	80044c8 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff53 	bl	800454a <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 80046a4:	2005      	movs	r0, #5
 80046a6:	f7ff ff0f 	bl	80044c8 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff4d 	bl	800454a <ONEWIRE_INPUT>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff21 	bl	800450c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ff56 	bl	800457c <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7ff fef9 	bl	80044c8 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ff37 	bl	800454a <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 80046dc:	200a      	movs	r0, #10
 80046de:	f7ff fef3 	bl	80044c8 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	889b      	ldrh	r3, [r3, #4]
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f008 fc17 	bl	800cf20 <HAL_GPIO_ReadPin>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 80046fc:	2032      	movs	r0, #50	; 0x32
 80046fe:	f7ff fee3 	bl	80044c8 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8004718:	2308      	movs	r3, #8
 800471a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 800471c:	e00a      	b.n	8004734 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff93 	bl	8004654 <OneWire_WriteBit>
		byte >>= 1;
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	1e5a      	subs	r2, r3, #1
 8004738:	73fa      	strb	r2, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1ef      	bne.n	800471e <OneWire_WriteByte+0x12>
	}
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800474e:	2308      	movs	r3, #8
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	2300      	movs	r3, #0
 8004754:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004756:	e00d      	b.n	8004774 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff ffaa 	bl	80046b8 <OneWire_ReadBit>
 8004764:	4603      	mov	r3, r0
 8004766:	01db      	lsls	r3, r3, #7
 8004768:	b25a      	sxtb	r2, r3
 800476a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800476e:	4313      	orrs	r3, r2
 8004770:	b25b      	sxtb	r3, r3
 8004772:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	73fa      	strb	r2, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ec      	bne.n	8004758 <OneWire_ReadByte+0x12>
	}

	return byte;
 800477e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f816 	bl	80047c2 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004796:	21f0      	movs	r1, #240	; 0xf0
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f825 	bl	80047e8 <OneWire_Search>
 800479e:	4603      	mov	r3, r0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80047b0:	21f0      	movs	r1, #240	; 0xf0
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f818 	bl	80047e8 <OneWire_Search>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	71da      	strb	r2, [r3, #7]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004800:	2301      	movs	r3, #1
 8004802:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7a1b      	ldrb	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f040 809a 	bne.w	8004946 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fef4 	bl	8004600 <OneWire_Reset>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	71da      	strb	r2, [r3, #7]
			return 0;
 8004830:	2300      	movs	r3, #0
 8004832:	e09b      	b.n	800496c <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff67 	bl	800470c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff3a 	bl	80046b8 <OneWire_ReadBit>
 8004844:	4603      	mov	r3, r0
 8004846:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ff35 	bl	80046b8 <OneWire_ReadBit>
 800484e:	4603      	mov	r3, r0
 8004850:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8004852:	7a7b      	ldrb	r3, [r7, #9]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <OneWire_Search+0x76>
 8004858:	7a3b      	ldrb	r3, [r7, #8]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d064      	beq.n	8004928 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 800485e:	7a7a      	ldrb	r2, [r7, #9]
 8004860:	7a3b      	ldrb	r3, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d002      	beq.n	800486c <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8004866:	7a7b      	ldrb	r3, [r7, #9]
 8004868:	72bb      	strb	r3, [r7, #10]
 800486a:	e026      	b.n	80048ba <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	799b      	ldrb	r3, [r3, #6]
 8004870:	7bfa      	ldrb	r2, [r7, #15]
 8004872:	429a      	cmp	r2, r3
 8004874:	d20d      	bcs.n	8004892 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8004876:	7b7b      	ldrb	r3, [r7, #13]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4413      	add	r3, r2
 800487c:	7a5a      	ldrb	r2, [r3, #9]
 800487e:	7afb      	ldrb	r3, [r7, #11]
 8004880:	4013      	ands	r3, r2
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	72bb      	strb	r3, [r7, #10]
 8004890:	e008      	b.n	80048a4 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	799b      	ldrb	r3, [r3, #6]
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	429a      	cmp	r2, r3
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80048a4:	7abb      	ldrb	r3, [r7, #10]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80048ae:	7bbb      	ldrb	r3, [r7, #14]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d802      	bhi.n	80048ba <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7bba      	ldrb	r2, [r7, #14]
 80048b8:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 80048ba:	7abb      	ldrb	r3, [r7, #10]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10c      	bne.n	80048da <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80048c0:	7b7b      	ldrb	r3, [r7, #13]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	7a59      	ldrb	r1, [r3, #9]
 80048c8:	7b7b      	ldrb	r3, [r7, #13]
 80048ca:	7afa      	ldrb	r2, [r7, #11]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	b2d1      	uxtb	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	460a      	mov	r2, r1
 80048d6:	725a      	strb	r2, [r3, #9]
 80048d8:	e010      	b.n	80048fc <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	7a5b      	ldrb	r3, [r3, #9]
 80048e2:	b25a      	sxtb	r2, r3
 80048e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	4013      	ands	r3, r2
 80048ee:	b25a      	sxtb	r2, r3
 80048f0:	7b7b      	ldrb	r3, [r7, #13]
 80048f2:	b2d1      	uxtb	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4413      	add	r3, r2
 80048f8:	460a      	mov	r2, r1
 80048fa:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80048fc:	7abb      	ldrb	r3, [r7, #10]
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fea7 	bl	8004654 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	3301      	adds	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8004912:	7afb      	ldrb	r3, [r7, #11]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8004918:	7b7b      	ldrb	r3, [r7, #13]
 800491a:	3301      	adds	r3, #1
 800491c:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8004922:	7b7b      	ldrb	r3, [r7, #13]
 8004924:	2b07      	cmp	r3, #7
 8004926:	d98a      	bls.n	800483e <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d90b      	bls.n	8004946 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	7bba      	ldrb	r2, [r7, #14]
 8004932:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	799b      	ldrb	r3, [r3, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8004946:	7b3b      	ldrb	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <OneWire_Search+0x16c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7a5b      	ldrb	r3, [r3, #9]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800496a:	7b3b      	ldrb	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800497e:	2155      	movs	r1, #85	; 0x55
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fec3 	bl	800470c <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
 800498a:	e00a      	b.n	80049a2 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4413      	add	r3, r2
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff feb8 	bl	800470c <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	3301      	adds	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b07      	cmp	r3, #7
 80049a6:	d9f1      	bls.n	800498c <OneWire_SelectWithPointer+0x18>
	}
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e00a      	b.n	80049d6 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	440b      	add	r3, r1
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	440a      	add	r2, r1
 80049cc:	7a52      	ldrb	r2, [r2, #9]
 80049ce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	3301      	adds	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b07      	cmp	r3, #7
 80049da:	d9f1      	bls.n	80049c0 <OneWire_GetFullROM+0x10>
	}
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80049f8:	e022      	b.n	8004a40 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8004a04:	2308      	movs	r3, #8
 8004a06:	737b      	strb	r3, [r7, #13]
 8004a08:	e017      	b.n	8004a3a <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	7bbb      	ldrb	r3, [r7, #14]
 8004a0e:	4053      	eors	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8004a1e:	7b3b      	ldrb	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8004a34:	7b7b      	ldrb	r3, [r7, #13]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	737b      	strb	r3, [r7, #13]
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e4      	bne.n	8004a0a <OneWire_CRC8+0x22>
	while (len--) {
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	70fa      	strb	r2, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1d7      	bne.n	80049fa <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
  bool ret = false;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8004a62:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <sdInit+0x80>)
 8004a64:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <sdInit+0x84>)
 8004a66:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <sdInit+0x80>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8004a6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <sdInit+0x80>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a74:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <sdInit+0x80>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <sdInit+0x80>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a80:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <sdInit+0x80>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <sdInit+0x80>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <sdInit+0x88>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <sdInit+0x88>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <sdInit+0x88>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00f      	beq.n	8004ac0 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8004aa0:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <sdInit+0x80>)
 8004aa2:	f008 fec5 	bl	800d830 <HAL_SD_Init>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8004aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <sdInit+0x80>)
 8004ab2:	f009 fc91 	bl	800e3d8 <HAL_SD_ConfigWideBusOperation>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <sdInit+0x68>
      {
        ret = true;
 8004abc:	2301      	movs	r3, #1
 8004abe:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8004ac0:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <sdInit+0x8c>)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8004ac6:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <sdInit+0x90>)
 8004ac8:	4808      	ldr	r0, [pc, #32]	; (8004aec <sdInit+0x94>)
 8004aca:	f7fd fd13 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8004ace:	79fb      	ldrb	r3, [r7, #7]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	2000ac04 	.word	0x2000ac04
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	2000a2c1 	.word	0x2000a2c1
 8004ae4:	2000a2c0 	.word	0x2000a2c0
 8004ae8:	08004fd5 	.word	0x08004fd5
 8004aec:	08015cac 	.word	0x08015cac

08004af0 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return is_init;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <sdIsInit+0x14>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	2000a2c0 	.word	0x2000a2c0

08004b08 <sdIsDetected>:

bool sdIsDetected(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f7fe fc57 	bl	80033c0 <gpioPinRead>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <sdIsDetected+0x18>
  {
    is_detected = true;
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <sdIsDetected+0x28>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e002      	b.n	8004b26 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <sdIsDetected+0x28>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8004b26:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <sdIsDetected+0x28>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	2000a2c1 	.word	0x2000a2c1

08004b34 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8004b34:	b5b0      	push	{r4, r5, r7, lr}
 8004b36:	b08c      	sub	sp, #48	; 0x30
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <sdGetInfo+0xa4>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03d      	beq.n	8004bca <sdGetInfo+0x96>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4619      	mov	r1, r3
 8004b54:	4821      	ldr	r0, [pc, #132]	; (8004bdc <sdGetInfo+0xa8>)
 8004b56:	f009 fc13 	bl	800e380 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	fb03 f502 	mul.w	r5, r3, r2
 8004ba0:	fb01 f004 	mul.w	r0, r1, r4
 8004ba4:	4428      	add	r0, r5
 8004ba6:	fba1 3403 	umull	r3, r4, r1, r3
 8004baa:	1902      	adds	r2, r0, r4
 8004bac:	4614      	mov	r4, r2
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	0d19      	lsrs	r1, r3, #20
 8004bb8:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
 8004bbc:	0d22      	lsrs	r2, r4, #20
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	621a      	str	r2, [r3, #32]
    ret = true;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8004bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3730      	adds	r7, #48	; 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000a2c0 	.word	0x2000a2c0
 8004bdc:	2000ac04 	.word	0x2000ac04

08004be0 <sdIsBusy>:

bool sdIsBusy(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8004be6:	4808      	ldr	r0, [pc, #32]	; (8004c08 <sdIsBusy+0x28>)
 8004be8:	f009 fc72 	bl	800e4d0 <HAL_SD_GetCardState>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d102      	bne.n	8004bf8 <sdIsBusy+0x18>
  {
    is_busy = false;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	71fb      	strb	r3, [r7, #7]
 8004bf6:	e001      	b.n	8004bfc <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2000ac04 	.word	0x2000ac04

08004c0c <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8004c14:	f7fc faf9 	bl	800120a <millis>
 8004c18:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8004c1a:	e009      	b.n	8004c30 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8004c1c:	f7ff ffe0 	bl	8004be0 <sdIsBusy>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f083 0301 	eor.w	r3, r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <sdIsReady+0x24>
    {
      return true;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e008      	b.n	8004c42 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8004c30:	f7fc faeb 	bl	800120a <millis>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d8ed      	bhi.n	8004c1c <sdIsReady+0x10>
    }
  }

  return false;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <sdReadBlocks+0x8c>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	481c      	ldr	r0, [pc, #112]	; (8004cdc <sdReadBlocks+0x90>)
 8004c6c:	f008 fe70 	bl	800d950 <HAL_SD_ReadBlocks_DMA>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d12a      	bne.n	8004ccc <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8004c76:	f7fc fac8 	bl	800120a <millis>
 8004c7a:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8004c7c:	e007      	b.n	8004c8e <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8004c7e:	f7fc fac4 	bl	800120a <millis>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d908      	bls.n	8004ca0 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <sdReadBlocks+0x8c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f083 0301 	eor.w	r3, r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1ef      	bne.n	8004c7e <sdReadBlocks+0x32>
 8004c9e:	e00d      	b.n	8004cbc <sdReadBlocks+0x70>
      {
        break;
 8004ca0:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8004ca2:	e00b      	b.n	8004cbc <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8004ca4:	f7fc fab1 	bl	800120a <millis>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d803      	bhi.n	8004cbc <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <sdReadBlocks+0x8c>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
        break;
 8004cba:	e004      	b.n	8004cc6 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8004cbc:	f7ff ff90 	bl	8004be0 <sdIsBusy>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ee      	bne.n	8004ca4 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8004cc6:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <sdReadBlocks+0x8c>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000a2c2 	.word	0x2000a2c2
 8004cdc:	2000ac04 	.word	0x2000ac04

08004ce0 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <sdWriteBlocks+0x90>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	481d      	ldr	r0, [pc, #116]	; (8004d74 <sdWriteBlocks+0x94>)
 8004d00:	f008 ff10 	bl	800db24 <HAL_SD_WriteBlocks_DMA>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d12d      	bne.n	8004d66 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 8004d0a:	f7fc fa7e 	bl	800120a <millis>
 8004d0e:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8004d10:	e007      	b.n	8004d22 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8004d12:	f7fc fa7a 	bl	800120a <millis>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d908      	bls.n	8004d34 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <sdWriteBlocks+0x90>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f083 0301 	eor.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ef      	bne.n	8004d12 <sdWriteBlocks+0x32>
 8004d32:	e000      	b.n	8004d36 <sdWriteBlocks+0x56>
      {
        break;
 8004d34:	bf00      	nop
      }
    }
    pre_time = millis();
 8004d36:	f7fc fa68 	bl	800120a <millis>
 8004d3a:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8004d3c:	e00b      	b.n	8004d56 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8004d3e:	f7fc fa64 	bl	800120a <millis>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d803      	bhi.n	8004d56 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <sdWriteBlocks+0x90>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
        break;
 8004d54:	e004      	b.n	8004d60 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8004d56:	f7ff ff43 	bl	8004be0 <sdIsBusy>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ee      	bne.n	8004d3e <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <sdWriteBlocks+0x90>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	2000a2c3 	.word	0x2000a2c3
 8004d74:	2000ac04 	.word	0x2000ac04

08004d78 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_SD_RxCpltCallback+0x1c>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	2000a2c2 	.word	0x2000a2c2

08004d98 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <HAL_SD_TxCpltCallback+0x1c>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000a2c3 	.word	0x2000a2c3

08004db8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	f107 031c 	add.w	r3, r7, #28
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a77      	ldr	r2, [pc, #476]	; (8004fb4 <HAL_SD_MspInit+0x1fc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f040 80e8 	bne.w	8004fac <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	4b75      	ldr	r3, [pc, #468]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dea:	6313      	str	r3, [r2, #48]	; 0x30
 8004dec:	4b72      	ldr	r3, [pc, #456]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	4b6e      	ldr	r3, [pc, #440]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	4a6d      	ldr	r2, [pc, #436]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e06:	6453      	str	r3, [r2, #68]	; 0x44
 8004e08:	4b6b      	ldr	r3, [pc, #428]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4a66      	ldr	r2, [pc, #408]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6313      	str	r3, [r2, #48]	; 0x30
 8004e24:	4b64      	ldr	r3, [pc, #400]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	4b60      	ldr	r3, [pc, #384]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	4a5f      	ldr	r2, [pc, #380]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e3a:	f043 0302 	orr.w	r3, r3, #2
 8004e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e40:	4b5d      	ldr	r3, [pc, #372]	; (8004fb8 <HAL_SD_MspInit+0x200>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8004e4c:	f44f 7350 	mov.w	r3, #832	; 0x340
 8004e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e52:	2302      	movs	r3, #2
 8004e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004e5e:	230c      	movs	r3, #12
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e62:	f107 031c 	add.w	r3, r7, #28
 8004e66:	4619      	mov	r1, r3
 8004e68:	4854      	ldr	r0, [pc, #336]	; (8004fbc <HAL_SD_MspInit+0x204>)
 8004e6a:	f007 fdf5 	bl	800ca58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8004e6e:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004e80:	230c      	movs	r3, #12
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	4619      	mov	r1, r3
 8004e8a:	484d      	ldr	r0, [pc, #308]	; (8004fc0 <HAL_SD_MspInit+0x208>)
 8004e8c:	f007 fde4 	bl	800ca58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8004e90:	4b4c      	ldr	r3, [pc, #304]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004e92:	4a4d      	ldr	r2, [pc, #308]	; (8004fc8 <HAL_SD_MspInit+0x210>)
 8004e94:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004e96:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e9c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e9e:	4b49      	ldr	r3, [pc, #292]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ea4:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004eaa:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eb0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004eb2:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004eb8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004eba:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ebc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ec0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004ec2:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ec8:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ece:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ed4:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004eda:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004edc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004ee2:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004ee4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004eea:	4836      	ldr	r0, [pc, #216]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004eec:	f007 f9ba 	bl	800c264 <HAL_DMA_Init>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8004ef6:	f7fc f9f7 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a31      	ldr	r2, [pc, #196]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
 8004f00:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <HAL_SD_MspInit+0x20c>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8004f06:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f08:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <HAL_SD_MspInit+0x218>)
 8004f0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f12:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f20:	4b2a      	ldr	r3, [pc, #168]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f26:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f28:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f30:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f36:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004f38:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f3e:	4b23      	ldr	r3, [pc, #140]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f46:	2204      	movs	r2, #4
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f4a:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004f50:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004f60:	481a      	ldr	r0, [pc, #104]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f62:	f007 f97f 	bl	800c264 <HAL_DMA_Init>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8004f6c:	f7fc f9bc 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f74:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f76:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_SD_MspInit+0x214>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2103      	movs	r1, #3
 8004f80:	2031      	movs	r0, #49	; 0x31
 8004f82:	f007 f92a 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004f86:	2031      	movs	r0, #49	; 0x31
 8004f88:	f007 f943 	bl	800c212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2103      	movs	r1, #3
 8004f90:	203b      	movs	r0, #59	; 0x3b
 8004f92:	f007 f922 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004f96:	203b      	movs	r0, #59	; 0x3b
 8004f98:	f007 f93b 	bl	800c212 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2103      	movs	r1, #3
 8004fa0:	2045      	movs	r0, #69	; 0x45
 8004fa2:	f007 f91a 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004fa6:	2045      	movs	r0, #69	; 0x45
 8004fa8:	f007 f933 	bl	800c212 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004fac:	bf00      	nop
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40020000 	.word	0x40020000
 8004fc0:	40020400 	.word	0x40020400
 8004fc4:	2000ab44 	.word	0x2000ab44
 8004fc8:	400264a0 	.word	0x400264a0
 8004fcc:	2000aba4 	.word	0x2000aba4
 8004fd0:	40026458 	.word	0x40026458

08004fd4 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d179      	bne.n	80050e4 <cliSd+0x110>
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4968      	ldr	r1, [pc, #416]	; (8005198 <cliSd+0x1c4>)
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4798      	blx	r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d070      	beq.n	80050e4 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8005002:	4b66      	ldr	r3, [pc, #408]	; (800519c <cliSd+0x1c8>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	4865      	ldr	r0, [pc, #404]	; (80051a0 <cliSd+0x1cc>)
 800500a:	f7fd f963 	bl	80022d4 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <cliSd+0x1d0>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	4864      	ldr	r0, [pc, #400]	; (80051a8 <cliSd+0x1d4>)
 8005016:	f7fd f95d 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 800501a:	4b60      	ldr	r3, [pc, #384]	; (800519c <cliSd+0x1c8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d05d      	beq.n	80050de <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fd84 	bl	8004b34 <sdGetInfo>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d055      	beq.n	80050de <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	485c      	ldr	r0, [pc, #368]	; (80051ac <cliSd+0x1d8>)
 800503c:	f7fd f94a 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4619      	mov	r1, r3
 8005048:	4859      	ldr	r0, [pc, #356]	; (80051b0 <cliSd+0x1dc>)
 800504a:	f7fd f943 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 800504e:	f107 030c 	add.w	r3, r7, #12
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4619      	mov	r1, r3
 8005056:	4857      	ldr	r0, [pc, #348]	; (80051b4 <cliSd+0x1e0>)
 8005058:	f7fd f93c 	bl	80022d4 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 800505c:	f107 030c 	add.w	r3, r7, #12
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	4619      	mov	r1, r3
 8005064:	4854      	ldr	r0, [pc, #336]	; (80051b8 <cliSd+0x1e4>)
 8005066:	f7fd f935 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4619      	mov	r1, r3
 8005072:	4852      	ldr	r0, [pc, #328]	; (80051bc <cliSd+0x1e8>)
 8005074:	f7fd f92e 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4619      	mov	r1, r3
 8005080:	484f      	ldr	r0, [pc, #316]	; (80051c0 <cliSd+0x1ec>)
 8005082:	f7fd f927 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8005086:	f107 030c 	add.w	r3, r7, #12
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4619      	mov	r1, r3
 800508e:	484d      	ldr	r0, [pc, #308]	; (80051c4 <cliSd+0x1f0>)
 8005090:	f7fd f920 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	4619      	mov	r1, r3
 800509c:	484a      	ldr	r0, [pc, #296]	; (80051c8 <cliSd+0x1f4>)
 800509e:	f7fd f919 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80050a2:	f107 030c 	add.w	r3, r7, #12
 80050a6:	6a18      	ldr	r0, [r3, #32]
 80050a8:	f107 030c 	add.w	r3, r7, #12
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	0a9c      	lsrs	r4, r3, #10
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	0a99      	lsrs	r1, r3, #10
 80050c0:	4b42      	ldr	r3, [pc, #264]	; (80051cc <cliSd+0x1f8>)
 80050c2:	fba3 2301 	umull	r2, r3, r3, r1
 80050c6:	08da      	lsrs	r2, r3, #3
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	1aca      	subs	r2, r1, r3
 80050d2:	4613      	mov	r3, r2
 80050d4:	4622      	mov	r2, r4
 80050d6:	4601      	mov	r1, r0
 80050d8:	483d      	ldr	r0, [pc, #244]	; (80051d0 <cliSd+0x1fc>)
 80050da:	f7fd f8fb 	bl	80022d4 <cliPrintf>
      }
    }
    ret = true;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d13e      	bne.n	800516c <cliSd+0x198>
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <cliSd+0x200>)
 80050f6:	2000      	movs	r0, #0
 80050f8:	4798      	blx	r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d035      	beq.n	800516c <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2001      	movs	r0, #1
 8005108:	4798      	blx	r3
 800510a:	4603      	mov	r3, r0
 800510c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8005110:	f107 010c 	add.w	r1, r7, #12
 8005114:	2364      	movs	r3, #100	; 0x64
 8005116:	2201      	movs	r2, #1
 8005118:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 800511c:	f7ff fd96 	bl	8004c4c <sdReadBlocks>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01c      	beq.n	8005160 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800512c:	e013      	b.n	8005156 <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 800512e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005132:	0099      	lsls	r1, r3, #2
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005140:	460a      	mov	r2, r1
 8005142:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8005146:	4824      	ldr	r0, [pc, #144]	; (80051d8 <cliSd+0x204>)
 8005148:	f7fd f8c4 	bl	80022d4 <cliPrintf>
      for (int i=0; i<512/4; i++)
 800514c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005150:	3301      	adds	r3, #1
 8005152:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005156:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800515a:	2b7f      	cmp	r3, #127	; 0x7f
 800515c:	dde7      	ble.n	800512e <cliSd+0x15a>
 800515e:	e002      	b.n	8005166 <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8005160:	481e      	ldr	r0, [pc, #120]	; (80051dc <cliSd+0x208>)
 8005162:	f7fd f8b7 	bl	80022d4 <cliPrintf>
    }

    ret = true;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 800516c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8005170:	f083 0301 	eor.w	r3, r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 800517a:	4819      	ldr	r0, [pc, #100]	; (80051e0 <cliSd+0x20c>)
 800517c:	f7fd f8aa 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <cliSd+0x1c8>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 8005188:	4816      	ldr	r0, [pc, #88]	; (80051e4 <cliSd+0x210>)
 800518a:	f7fd f8a3 	bl	80022d4 <cliPrintf>
    }
  }
}
 800518e:	bf00      	nop
 8005190:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}
 8005198:	08015cb0 	.word	0x08015cb0
 800519c:	2000a2c0 	.word	0x2000a2c0
 80051a0:	08015cb8 	.word	0x08015cb8
 80051a4:	2000a2c1 	.word	0x2000a2c1
 80051a8:	08015ccc 	.word	0x08015ccc
 80051ac:	08015ce0 	.word	0x08015ce0
 80051b0:	08015d00 	.word	0x08015d00
 80051b4:	08015d20 	.word	0x08015d20
 80051b8:	08015d40 	.word	0x08015d40
 80051bc:	08015d60 	.word	0x08015d60
 80051c0:	08015d80 	.word	0x08015d80
 80051c4:	08015da0 	.word	0x08015da0
 80051c8:	08015dc0 	.word	0x08015dc0
 80051cc:	cccccccd 	.word	0xcccccccd
 80051d0:	08015de0 	.word	0x08015de0
 80051d4:	08015e0c 	.word	0x08015e0c
 80051d8:	08015e14 	.word	0x08015e14
 80051dc:	08015e28 	.word	0x08015e28
 80051e0:	08015e38 	.word	0x08015e38
 80051e4:	08015e44 	.word	0x08015e44

080051e8 <DWT_Delay_us>:
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <DWT_Delay_us+0x3c>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80051f6:	f008 fae7 	bl	800d7c8 <HAL_RCC_GetHCLKFreq>
 80051fa:	4602      	mov	r2, r0
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <DWT_Delay_us+0x40>)
 80051fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005202:	0c9b      	lsrs	r3, r3, #18
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800520c:	bf00      	nop
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <DWT_Delay_us+0x3c>)
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	d3f8      	bcc.n	800520e <DWT_Delay_us+0x26>
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	e0001000 	.word	0xe0001000
 8005228:	431bde83 	.word	0x431bde83

0800522c <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
	bool ret = false;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	605a      	str	r2, [r3, #4]
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	605a      	str	r2, [r3, #4]
 8005258:	609a      	str	r2, [r3, #8]
 800525a:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <sonarInit+0xec>)
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <sonarInit+0xf0>)
 8005260:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8005262:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <sonarInit+0xec>)
 8005264:	225f      	movs	r2, #95	; 0x5f
 8005266:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <sonarInit+0xec>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <sonarInit+0xec>)
 8005270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005274:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005276:	4b28      	ldr	r3, [pc, #160]	; (8005318 <sonarInit+0xec>)
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <sonarInit+0xec>)
 800527e:	2200      	movs	r2, #0
 8005280:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005282:	4825      	ldr	r0, [pc, #148]	; (8005318 <sonarInit+0xec>)
 8005284:	f00a fb04 	bl	800f890 <HAL_TIM_Base_Init>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <sonarInit+0x66>
	  {
	    Error_Handler();
 800528e:	f7fc f82b 	bl	80012e8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005296:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005298:	f107 031c 	add.w	r3, r7, #28
 800529c:	4619      	mov	r1, r3
 800529e:	481e      	ldr	r0, [pc, #120]	; (8005318 <sonarInit+0xec>)
 80052a0:	f00a fd62 	bl	800fd68 <HAL_TIM_ConfigClockSource>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <sonarInit+0x82>
	  {
	    Error_Handler();
 80052aa:	f7fc f81d 	bl	80012e8 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80052ae:	481a      	ldr	r0, [pc, #104]	; (8005318 <sonarInit+0xec>)
 80052b0:	f00a fb19 	bl	800f8e6 <HAL_TIM_IC_Init>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <sonarInit+0x92>
	  {
	    Error_Handler();
 80052ba:	f7fc f815 	bl	80012e8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052c6:	f107 0314 	add.w	r3, r7, #20
 80052ca:	4619      	mov	r1, r3
 80052cc:	4812      	ldr	r0, [pc, #72]	; (8005318 <sonarInit+0xec>)
 80052ce:	f00b f889 	bl	80103e4 <HAL_TIMEx_MasterConfigSynchronization>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <sonarInit+0xb0>
	  {
	    Error_Handler();
 80052d8:	f7fc f806 	bl	80012e8 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80052dc:	2300      	movs	r3, #0
 80052de:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80052e0:	2301      	movs	r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	220c      	movs	r2, #12
 80052f0:	4619      	mov	r1, r3
 80052f2:	4809      	ldr	r0, [pc, #36]	; (8005318 <sonarInit+0xec>)
 80052f4:	f00a fc9c 	bl	800fc30 <HAL_TIM_IC_ConfigChannel>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <sonarInit+0xd6>
	  {
	    Error_Handler();
 80052fe:	f7fb fff3 	bl	80012e8 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8005302:	210c      	movs	r1, #12
 8005304:	4804      	ldr	r0, [pc, #16]	; (8005318 <sonarInit+0xec>)
 8005306:	f00a fb23 	bl	800f950 <HAL_TIM_IC_Start_IT>

	return ret;
 800530a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800530e:	4618      	mov	r0, r3
 8005310:	3730      	adds	r7, #48	; 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000ac88 	.word	0x2000ac88
 800531c:	40000400 	.word	0x40000400

08005320 <Sonar_measure>:

bool Sonar_measure(void)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
	bool ret = false;
 8005326:	2300      	movs	r3, #0
 8005328:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 800532a:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <Sonar_measure+0x180>)
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <Sonar_measure+0x18>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d022      	beq.n	800537c <Sonar_measure+0x5c>
 8005336:	e0a9      	b.n	800548c <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8005338:	2103      	movs	r1, #3
 800533a:	2008      	movs	r0, #8
 800533c:	f7fd ff7a 	bl	8003234 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8005340:	2101      	movs	r1, #1
 8005342:	2008      	movs	r0, #8
 8005344:	f7fd ffe8 	bl	8003318 <gpioPinWrite>
			DWT_Delay_us(5);
 8005348:	2005      	movs	r0, #5
 800534a:	f7ff ff4d 	bl	80051e8 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 800534e:	2100      	movs	r1, #0
 8005350:	2008      	movs	r0, #8
 8005352:	f7fd ffe1 	bl	8003318 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8005356:	2106      	movs	r1, #6
 8005358:	2008      	movs	r0, #8
 800535a:	f7fd ff6b 	bl	8003234 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 800535e:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <Sonar_measure+0x180>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8005364:	4b4e      	ldr	r3, [pc, #312]	; (80054a0 <Sonar_measure+0x180>)
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	3301      	adds	r3, #1
 800536a:	b2da      	uxtb	r2, r3
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <Sonar_measure+0x180>)
 800536e:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8005370:	f7fb ff4b 	bl	800120a <millis>
 8005374:	4602      	mov	r2, r0
 8005376:	4b4b      	ldr	r3, [pc, #300]	; (80054a4 <Sonar_measure+0x184>)
 8005378:	601a      	str	r2, [r3, #0]
			break;
 800537a:	e087      	b.n	800548c <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 800537c:	4b48      	ldr	r3, [pc, #288]	; (80054a0 <Sonar_measure+0x180>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06a      	beq.n	8005460 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 800538a:	4b45      	ldr	r3, [pc, #276]	; (80054a0 <Sonar_measure+0x180>)
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <Sonar_measure+0x180>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d907      	bls.n	80053a6 <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8005396:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <Sonar_measure+0x180>)
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <Sonar_measure+0x180>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <Sonar_measure+0x180>)
 80053a2:	60d3      	str	r3, [r2, #12]
 80053a4:	e00e      	b.n	80053c4 <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 80053a6:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <Sonar_measure+0x180>)
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <Sonar_measure+0x180>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d208      	bcs.n	80053c4 <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 80053b2:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <Sonar_measure+0x180>)
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <Sonar_measure+0x180>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80053c0:	4a37      	ldr	r2, [pc, #220]	; (80054a0 <Sonar_measure+0x180>)
 80053c2:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 80053c4:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <Sonar_measure+0x180>)
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f8af 	bl	8000534 <__aeabi_ui2d>
 80053d6:	a330      	add	r3, pc, #192	; (adr r3, 8005498 <Sonar_measure+0x178>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f924 	bl	8000628 <__aeabi_dmul>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4618      	mov	r0, r3
 80053e6:	4621      	mov	r1, r4
 80053e8:	f7fb fbf6 	bl	8000bd8 <__aeabi_d2uiz>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <Sonar_measure+0x180>)
 80053f0:	615a      	str	r2, [r3, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 80053f2:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <Sonar_measure+0x188>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	3301      	adds	r3, #1
 80053fa:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 80053fc:	79bb      	ldrb	r3, [r7, #6]
 80053fe:	2b0b      	cmp	r3, #11
 8005400:	d101      	bne.n	8005406 <Sonar_measure+0xe6>
 8005402:	2300      	movs	r3, #0
 8005404:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8005406:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <Sonar_measure+0x180>)
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <Sonar_measure+0x188>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	b211      	sxth	r1, r2
 8005410:	4a26      	ldr	r2, [pc, #152]	; (80054ac <Sonar_measure+0x18c>)
 8005412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <Sonar_measure+0x188>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <Sonar_measure+0x18c>)
 800541c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005420:	461a      	mov	r2, r3
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <Sonar_measure+0x190>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4413      	add	r3, r2
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <Sonar_measure+0x190>)
 800542a:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <Sonar_measure+0x190>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	79ba      	ldrb	r2, [r7, #6]
 8005432:	491e      	ldr	r1, [pc, #120]	; (80054ac <Sonar_measure+0x18c>)
 8005434:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <Sonar_measure+0x190>)
 800543c:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 800543e:	79bb      	ldrb	r3, [r7, #6]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <Sonar_measure+0x188>)
 8005442:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <Sonar_measure+0x190>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <Sonar_measure+0x194>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <Sonar_measure+0x180>)
 8005452:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <Sonar_measure+0x180>)
 8005456:	2200      	movs	r2, #0
 8005458:	705a      	strb	r2, [r3, #1]
				ret = true;
 800545a:	2301      	movs	r3, #1
 800545c:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 800545e:	e014      	b.n	800548a <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8005460:	f7fb fed3 	bl	800120a <millis>
 8005464:	4602      	mov	r2, r0
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <Sonar_measure+0x184>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b18      	cmp	r3, #24
 800546e:	d90c      	bls.n	800548a <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <Sonar_measure+0x180>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	3301      	adds	r3, #1
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <Sonar_measure+0x180>)
 8005478:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <Sonar_measure+0x180>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <Sonar_measure+0x180>)
 8005482:	2200      	movs	r2, #0
 8005484:	705a      	strb	r2, [r3, #1]
					ret = false;
 8005486:	2300      	movs	r3, #0
 8005488:	71fb      	strb	r3, [r7, #7]
			break;
 800548a:	bf00      	nop
	}
	return ret;
 800548c:	79fb      	ldrb	r3, [r7, #7]
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	bf00      	nop
 8005498:	75f6fd22 	.word	0x75f6fd22
 800549c:	3f919ce0 	.word	0x3f919ce0
 80054a0:	2000a2c4 	.word	0x2000a2c4
 80054a4:	2000a2e0 	.word	0x2000a2e0
 80054a8:	2000a2e4 	.word	0x2000a2e4
 80054ac:	2000a2e8 	.word	0x2000a2e8
 80054b0:	2000a300 	.word	0x2000a300
 80054b4:	cccccccd 	.word	0xcccccccd

080054b8 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	; 0x28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_TIM_Base_MspInit+0x94>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d133      	bne.n	8005542 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	6313      	str	r3, [r2, #48]	; 0x30
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_TIM_Base_MspInit+0x98>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005512:	2302      	movs	r3, #2
 8005514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005516:	2302      	movs	r3, #2
 8005518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005522:	2302      	movs	r3, #2
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005526:	f107 0314 	add.w	r3, r7, #20
 800552a:	4619      	mov	r1, r3
 800552c:	4809      	ldr	r0, [pc, #36]	; (8005554 <HAL_TIM_Base_MspInit+0x9c>)
 800552e:	f007 fa93 	bl	800ca58 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005532:	2200      	movs	r2, #0
 8005534:	2101      	movs	r1, #1
 8005536:	201d      	movs	r0, #29
 8005538:	f006 fe4f 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800553c:	201d      	movs	r0, #29
 800553e:	f006 fe68 	bl	800c212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40000400 	.word	0x40000400
 8005550:	40023800 	.word	0x40023800
 8005554:	40020400 	.word	0x40020400

08005558 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	7f1b      	ldrb	r3, [r3, #28]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d129      	bne.n	80055bc <HAL_TIM_IC_CaptureCallback+0x64>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d124      	bne.n	80055bc <HAL_TIM_IC_CaptureCallback+0x64>
 8005572:	4b16      	ldr	r3, [pc, #88]	; (80055cc <HAL_TIM_IC_CaptureCallback+0x74>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <HAL_TIM_IC_CaptureCallback+0x78>)
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <HAL_TIM_IC_CaptureCallback+0x74>)
 8005592:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 800559a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800559e:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 80055a0:	e00c      	b.n	80055bc <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <HAL_TIM_IC_CaptureCallback+0x74>)
 80055a8:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 80055aa:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4a06      	ldr	r2, [pc, #24]	; (80055c8 <HAL_TIM_IC_CaptureCallback+0x70>)
 80055b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b4:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_TIM_IC_CaptureCallback+0x74>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40000400 	.word	0x40000400
 80055cc:	2000a2c4 	.word	0x2000a2c4
 80055d0:	40020400 	.word	0x40020400

080055d4 <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80055da:	2301      	movs	r3, #1
 80055dc:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	e03d      	b.n	8005660 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 80055e4:	4923      	ldr	r1, [pc, #140]	; (8005674 <spiInit+0xa0>)
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 80055f6:	491f      	ldr	r1, [pc, #124]	; (8005674 <spiInit+0xa0>)
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3301      	adds	r3, #1
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 800560a:	491a      	ldr	r1, [pc, #104]	; (8005674 <spiInit+0xa0>)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3302      	adds	r3, #2
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 800561e:	4915      	ldr	r1, [pc, #84]	; (8005674 <spiInit+0xa0>)
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3304      	adds	r3, #4
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8005632:	4910      	ldr	r1, [pc, #64]	; (8005674 <spiInit+0xa0>)
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3310      	adds	r3, #16
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8005646:	490b      	ldr	r1, [pc, #44]	; (8005674 <spiInit+0xa0>)
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	330c      	adds	r3, #12
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3301      	adds	r3, #1
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	ddbe      	ble.n	80055e4 <spiInit+0x10>
  }

  return ret;
 8005666:	78fb      	ldrb	r3, [r7, #3]
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	2000acc8 	.word	0x2000acc8

08005678 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8005686:	79fa      	ldrb	r2, [r7, #7]
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4a23      	ldr	r2, [pc, #140]	; (8005720 <spiBegin+0xa8>)
 8005692:	4413      	add	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <spiBegin+0x28>
 800569c:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 800569e:	e03a      	b.n	8005716 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a20      	ldr	r2, [pc, #128]	; (8005724 <spiBegin+0xac>)
 80056a4:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <spiBegin+0xb0>)
 80056aa:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <spiBegin+0xac>)
 80056ae:	4a1f      	ldr	r2, [pc, #124]	; (800572c <spiBegin+0xb4>)
 80056b0:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <spiBegin+0xac>)
 80056b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056b8:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <spiBegin+0xac>)
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <spiBegin+0xac>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <spiBegin+0xac>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <spiBegin+0xac>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <spiBegin+0xac>)
 80056d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d8:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <spiBegin+0xac>)
 80056dc:	2200      	movs	r2, #0
 80056de:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056e0:	4b10      	ldr	r3, [pc, #64]	; (8005724 <spiBegin+0xac>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <spiBegin+0xac>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <spiBegin+0xac>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <spiBegin+0xac>)
 80056f4:	220a      	movs	r2, #10
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 80056f8:	480a      	ldr	r0, [pc, #40]	; (8005724 <spiBegin+0xac>)
 80056fa:	f009 fc05 	bl	800ef08 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 80056fe:	4809      	ldr	r0, [pc, #36]	; (8005724 <spiBegin+0xac>)
 8005700:	f009 fb9e 	bl	800ee40 <HAL_SPI_Init>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <spiBegin+0x9c>
        p_spi->is_open = true;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
        ret = true;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	bf00      	nop
  }

  return ret;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	2000acc8 	.word	0x2000acc8
 8005724:	2000acdc 	.word	0x2000acdc
 8005728:	2000ad34 	.word	0x2000ad34
 800572c:	40013000 	.word	0x40013000

08005730 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	460a      	mov	r2, r1
 800573a:	71fb      	strb	r3, [r7, #7]
 800573c:	4613      	mov	r3, r2
 800573e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8005740:	79fa      	ldrb	r2, [r7, #7]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <spiSetDataMode+0xc8>)
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d147      	bne.n	80057ee <spiSetDataMode+0xbe>


  switch( dataMode )
 800575e:	79bb      	ldrb	r3, [r7, #6]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d845      	bhi.n	80057f0 <spiSetDataMode+0xc0>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <spiSetDataMode+0x3c>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	0800577d 	.word	0x0800577d
 8005770:	08005799 	.word	0x08005799
 8005774:	080057b5 	.word	0x080057b5
 8005778:	080057d1 	.word	0x080057d1
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f009 fb55 	bl	800ee40 <HAL_SPI_Init>
      break;
 8005796:	e02b      	b.n	80057f0 <spiSetDataMode+0xc0>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2201      	movs	r2, #1
 80057a6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f009 fb47 	bl	800ee40 <HAL_SPI_Init>
      break;
 80057b2:	e01d      	b.n	80057f0 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2202      	movs	r2, #2
 80057ba:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2200      	movs	r2, #0
 80057c2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f009 fb39 	bl	800ee40 <HAL_SPI_Init>
      break;
 80057ce:	e00f      	b.n	80057f0 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2202      	movs	r2, #2
 80057d6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2201      	movs	r2, #1
 80057de:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f009 fb2b 	bl	800ee40 <HAL_SPI_Init>
      break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <spiSetDataMode+0xc0>
  if (p_spi->is_open == false) return;
 80057ee:	bf00      	nop
  }
}
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	2000acc8 	.word	0x2000acc8

080057fc <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	460a      	mov	r2, r1
 8005806:	71fb      	strb	r3, [r7, #7]
 8005808:	4613      	mov	r3, r2
 800580a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a10      	ldr	r2, [pc, #64]	; (8005858 <spiSetBitWidth+0x5c>)
 8005818:	4413      	add	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f083 0301 	eor.w	r3, r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d111      	bne.n	800584e <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8005832:	79bb      	ldrb	r3, [r7, #6]
 8005834:	2b10      	cmp	r3, #16
 8005836:	d104      	bne.n	8005842 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005840:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f009 fafa 	bl	800ee40 <HAL_SPI_Init>
 800584c:	e000      	b.n	8005850 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 800584e:	bf00      	nop
}
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	2000acc8 	.word	0x2000acc8

0800585c <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af02      	add	r7, sp, #8
 8005862:	4603      	mov	r3, r0
 8005864:	460a      	mov	r2, r1
 8005866:	71fb      	strb	r3, [r7, #7]
 8005868:	4613      	mov	r3, r2
 800586a:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 800586c:	79fa      	ldrb	r2, [r7, #7]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <spiTransfer8+0x50>)
 8005878:	4413      	add	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f083 0301 	eor.w	r3, r3, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <spiTransfer8+0x32>
 800588a:	2300      	movs	r3, #0
 800588c:	e00a      	b.n	80058a4 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6898      	ldr	r0, [r3, #8]
 8005892:	f107 020b 	add.w	r2, r7, #11
 8005896:	1db9      	adds	r1, r7, #6
 8005898:	230a      	movs	r3, #10
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	2301      	movs	r3, #1
 800589e:	f009 fb5b 	bl	800ef58 <HAL_SPI_TransmitReceive>

  return ret;
 80058a2:	7afb      	ldrb	r3, [r7, #11]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	2000acc8 	.word	0x2000acc8

080058b0 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 80058be:	7bfa      	ldrb	r2, [r7, #15]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <spiDmaTxStart+0x4c>)
 80058ca:	4413      	add	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	f083 0301 	eor.w	r3, r3, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2200      	movs	r2, #0
 80058e0:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	b292      	uxth	r2, r2
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f009 fcd5 	bl	800f29c <HAL_SPI_Transmit_DMA>
 80058f2:	e000      	b.n	80058f6 <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 80058f4:	bf00      	nop
}
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2000acc8 	.word	0x2000acc8

08005900 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8005910:	2301      	movs	r3, #1
 8005912:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff ffc8 	bl	80058b0 <spiDmaTxStart>

  t_time = millis();
 8005920:	f7fb fc73 	bl	800120a <millis>
 8005924:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <spiDmaTxTransfer+0x30>
 800592c:	2301      	movs	r3, #1
 800592e:	e013      	b.n	8005958 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f814 	bl	8005960 <spiDmaTxIsDone>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 800593e:	f7fb fc64 	bl	800120a <millis>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d2f0      	bcs.n	8005930 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
      break;
 8005952:	e000      	b.n	8005956 <spiDmaTxTransfer+0x56>
      break;
 8005954:	bf00      	nop
    }
  }

  return ret;
 8005956:	7dfb      	ldrb	r3, [r7, #23]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 800596a:	79fa      	ldrb	r2, [r7, #7]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4a09      	ldr	r2, [pc, #36]	; (800599c <spiDmaTxIsDone+0x3c>)
 8005976:	4413      	add	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <spiDmaTxIsDone+0x2c>
 8005988:	2301      	movs	r3, #1
 800598a:	e001      	b.n	8005990 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	785b      	ldrb	r3, [r3, #1]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000acc8 	.word	0x2000acc8

080059a0 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80059ac:	79fa      	ldrb	r2, [r7, #7]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <spiAttachTxInterrupt+0x40>)
 80059b8:	4413      	add	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	f083 0301 	eor.w	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d103      	bne.n	80059d2 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	e000      	b.n	80059d4 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 80059d2:	bf00      	nop
}
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	2000acc8 	.word	0x2000acc8

080059e4 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_SPI_ErrorCallback+0x28>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 80059fa:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <HAL_SPI_ErrorCallback+0x28>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	709a      	strb	r2, [r3, #2]
  }
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	2000acc8 	.word	0x2000acc8

08005a10 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_SPI_TxCpltCallback+0x38>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10b      	bne.n	8005a3e <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_SPI_TxCpltCallback+0x38>)
 8005a28:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4798      	blx	r3
    }
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	2000acc8 	.word	0x2000acc8

08005a4c <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	60da      	str	r2, [r3, #12]
 8005a62:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a40      	ldr	r2, [pc, #256]	; (8005b6c <HAL_SPI_MspInit+0x120>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d179      	bne.n	8005b62 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	4a3e      	ldr	r2, [pc, #248]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7e:	4b3c      	ldr	r3, [pc, #240]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	4a37      	ldr	r2, [pc, #220]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a98:	6453      	str	r3, [r2, #68]	; 0x44
 8005a9a:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a30      	ldr	r2, [pc, #192]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b2e      	ldr	r3, [pc, #184]	; (8005b70 <HAL_SPI_MspInit+0x124>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005ac2:	23a0      	movs	r3, #160	; 0xa0
 8005ac4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005ad2:	2305      	movs	r3, #5
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4619      	mov	r1, r3
 8005adc:	4825      	ldr	r0, [pc, #148]	; (8005b74 <HAL_SPI_MspInit+0x128>)
 8005ade:	f006 ffbb 	bl	800ca58 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8005ae2:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005ae4:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <HAL_SPI_MspInit+0x130>)
 8005ae6:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005ae8:	4b23      	ldr	r3, [pc, #140]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005aea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005aee:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005af0:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005af2:	2240      	movs	r2, #64	; 0x40
 8005af4:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005afc:	4b1e      	ldr	r3, [pc, #120]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b02:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b04:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b0a:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b12:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005b14:	4b18      	ldr	r3, [pc, #96]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b1a:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b20:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005b26:	4814      	ldr	r0, [pc, #80]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b28:	f006 fb9c 	bl	800c264 <HAL_DMA_Init>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8005b32:	f7fb fbd9 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a0f      	ldr	r2, [pc, #60]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b3a:	649a      	str	r2, [r3, #72]	; 0x48
 8005b3c:	4a0e      	ldr	r2, [pc, #56]	; (8005b78 <HAL_SPI_MspInit+0x12c>)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005b42:	2200      	movs	r2, #0
 8005b44:	2100      	movs	r1, #0
 8005b46:	2023      	movs	r0, #35	; 0x23
 8005b48:	f006 fb47 	bl	800c1da <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005b4c:	2023      	movs	r0, #35	; 0x23
 8005b4e:	f006 fb60 	bl	800c212 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2105      	movs	r1, #5
 8005b56:	2044      	movs	r0, #68	; 0x44
 8005b58:	f006 fb3f 	bl	800c1da <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005b5c:	2044      	movs	r0, #68	; 0x44
 8005b5e:	f006 fb58 	bl	800c212 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	; 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40013000 	.word	0x40013000
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40020000 	.word	0x40020000
 8005b78:	2000ad34 	.word	0x2000ad34
 8005b7c:	40026488 	.word	0x40026488

08005b80 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <HAL_SPI_MspDeInit+0x40>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d111      	bne.n	8005bb6 <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <HAL_SPI_MspDeInit+0x44>)
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	4a0b      	ldr	r2, [pc, #44]	; (8005bc4 <HAL_SPI_MspDeInit+0x44>)
 8005b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b9c:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8005b9e:	21a0      	movs	r1, #160	; 0xa0
 8005ba0:	4809      	ldr	r0, [pc, #36]	; (8005bc8 <HAL_SPI_MspDeInit+0x48>)
 8005ba2:	f007 f8db 	bl	800cd5c <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	4618      	mov	r0, r3
 8005bac:	f006 fc08 	bl	800c3c0 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8005bb0:	2023      	movs	r0, #35	; 0x23
 8005bb2:	f006 fb3c 	bl	800c22e <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40013000 	.word	0x40013000
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	40020000 	.word	0x40020000

08005bcc <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
	bool ret = true;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 8005bd6:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <tdsInit+0xd0>)
 8005bd8:	2203      	movs	r2, #3
 8005bda:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <tdsInit+0xd0>)
 8005bde:	4a30      	ldr	r2, [pc, #192]	; (8005ca0 <tdsInit+0xd4>)
 8005be0:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8005be2:	4b2e      	ldr	r3, [pc, #184]	; (8005c9c <tdsInit+0xd0>)
 8005be4:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005be8:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8005bea:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <tdsInit+0xd0>)
 8005bec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005bf0:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
 8005bfc:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8005bfe:	4b29      	ldr	r3, [pc, #164]	; (8005ca4 <tdsInit+0xd8>)
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <tdsInit+0xdc>)
 8005c02:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <tdsInit+0xd8>)
 8005c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c0a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005c0c:	4b25      	ldr	r3, [pc, #148]	; (8005ca4 <tdsInit+0xd8>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8005c12:	4b24      	ldr	r3, [pc, #144]	; (8005ca4 <tdsInit+0xd8>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8005c18:	4b22      	ldr	r3, [pc, #136]	; (8005ca4 <tdsInit+0xd8>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c1e:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <tdsInit+0xd8>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c26:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <tdsInit+0xd8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <tdsInit+0xd8>)
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <tdsInit+0xe0>)
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c32:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <tdsInit+0xd8>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <tdsInit+0xd8>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005c3e:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <tdsInit+0xd8>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <tdsInit+0xd8>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c4c:	4815      	ldr	r0, [pc, #84]	; (8005ca4 <tdsInit+0xd8>)
 8005c4e:	f005 fc8d 	bl	800b56c <HAL_ADC_Init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <tdsInit+0x90>
	  {
	    Error_Handler();
 8005c58:	f7fb fb46 	bl	80012e8 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005c64:	2307      	movs	r3, #7
 8005c66:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	480d      	ldr	r0, [pc, #52]	; (8005ca4 <tdsInit+0xd8>)
 8005c6e:	f005 fefd 	bl	800ba6c <HAL_ADC_ConfigChannel>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <tdsInit+0xb0>
	  {
	    Error_Handler();
 8005c78:	f7fb fb36 	bl	80012e8 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	490c      	ldr	r1, [pc, #48]	; (8005cb0 <tdsInit+0xe4>)
 8005c80:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <tdsInit+0xd8>)
 8005c82:	f005 fdf7 	bl	800b874 <HAL_ADC_Start_DMA>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <tdsInit+0xc4>
	{
		Error_Handler();
 8005c8c:	f7fb fb2c 	bl	80012e8 <Error_Handler>
	}

	return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]

}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000ad94 	.word	0x2000ad94
 8005ca0:	41c80000 	.word	0x41c80000
 8005ca4:	2000adbc 	.word	0x2000adbc
 8005ca8:	40012000 	.word	0x40012000
 8005cac:	0f000001 	.word	0x0f000001
 8005cb0:	2000ada4 	.word	0x2000ada4
 8005cb4:	00000000 	.word	0x00000000

08005cb8 <tds_measure>:
bool tds_measure(void)
{
 8005cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
	bool ret = true;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8005cc4:	4b8e      	ldr	r3, [pc, #568]	; (8005f00 <tds_measure+0x248>)
 8005cc6:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fa fc3d 	bl	8000578 <__aeabi_f2d>
 8005cfe:	a378      	add	r3, pc, #480	; (adr r3, 8005ee0 <tds_measure+0x228>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fc90 	bl	8000628 <__aeabi_dmul>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4625      	mov	r5, r4
 8005d0e:	461c      	mov	r4, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fa fc2f 	bl	8000578 <__aeabi_f2d>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4620      	mov	r0, r4
 8005d20:	4629      	mov	r1, r5
 8005d22:	f7fa fc81 	bl	8000628 <__aeabi_dmul>
 8005d26:	4603      	mov	r3, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	4625      	mov	r5, r4
 8005d2c:	461c      	mov	r4, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fa fc20 	bl	8000578 <__aeabi_f2d>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7fa fc72 	bl	8000628 <__aeabi_dmul>
 8005d44:	4603      	mov	r3, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4625      	mov	r5, r4
 8005d4a:	461c      	mov	r4, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fc11 	bl	8000578 <__aeabi_f2d>
 8005d56:	a364      	add	r3, pc, #400	; (adr r3, 8005ee8 <tds_measure+0x230>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fc64 	bl	8000628 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4690      	mov	r8, r2
 8005d66:	4699      	mov	r9, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa fc03 	bl	8000578 <__aeabi_f2d>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	f7fa fc55 	bl	8000628 <__aeabi_dmul>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4620      	mov	r0, r4
 8005d84:	4629      	mov	r1, r5
 8005d86:	f7fa fa97 	bl	80002b8 <__aeabi_dsub>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	4625      	mov	r5, r4
 8005d90:	461c      	mov	r4, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fa fbee 	bl	8000578 <__aeabi_f2d>
 8005d9c:	a354      	add	r3, pc, #336	; (adr r3, 8005ef0 <tds_measure+0x238>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fc41 	bl	8000628 <__aeabi_dmul>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4620      	mov	r0, r4
 8005dac:	4629      	mov	r1, r5
 8005dae:	f7fa fa85 	bl	80002bc <__adddf3>
 8005db2:	4603      	mov	r3, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	4625      	mov	r5, r4
 8005db8:	461c      	mov	r4, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa fbda 	bl	8000578 <__aeabi_f2d>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fc2c 	bl	8000628 <__aeabi_dmul>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f7fa ff1e 	bl	8000c18 <__aeabi_d2f>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fbc6 	bl	8000578 <__aeabi_f2d>
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa fbbf 	bl	8000578 <__aeabi_f2d>
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <tds_measure+0x24c>)
 8005e00:	f7fa fa5a 	bl	80002b8 <__aeabi_dsub>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	a33a      	add	r3, pc, #232	; (adr r3, 8005ef8 <tds_measure+0x240>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fc09 	bl	8000628 <__aeabi_dmul>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <tds_measure+0x250>)
 8005e24:	f7fa fa4a 	bl	80002bc <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fd24 	bl	800087c <__aeabi_ddiv>
 8005e34:	4603      	mov	r3, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	4618      	mov	r0, r3
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	f7fa feec 	bl	8000c18 <__aeabi_d2f>
 8005e40:	4602      	mov	r2, r0
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8005e5a:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <tds_measure+0x254>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	3301      	adds	r3, #1
 8005e62:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	2b0b      	cmp	r3, #11
 8005e68:	d101      	bne.n	8005e6e <tds_measure+0x1b6>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <tds_measure+0x254>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e7c:	ee17 2a90 	vmov	r2, s15
 8005e80:	b211      	sxth	r1, r2
 8005e82:	4a23      	ldr	r2, [pc, #140]	; (8005f10 <tds_measure+0x258>)
 8005e84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8005e88:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <tds_measure+0x254>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a20      	ldr	r2, [pc, #128]	; (8005f10 <tds_measure+0x258>)
 8005e8e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005e92:	461a      	mov	r2, r3
 8005e94:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <tds_measure+0x25c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <tds_measure+0x25c>)
 8005e9c:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <tds_measure+0x25c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	79fa      	ldrb	r2, [r7, #7]
 8005ea4:	491a      	ldr	r1, [pc, #104]	; (8005f10 <tds_measure+0x258>)
 8005ea6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <tds_measure+0x25c>)
 8005eae:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <tds_measure+0x254>)
 8005eb4:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8005eb6:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <tds_measure+0x25c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <tds_measure+0x260>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	08db      	lsrs	r3, r3, #3
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8005ed0:	79bb      	ldrb	r3, [r7, #6]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005edc:	f3af 8000 	nop.w
 8005ee0:	a3d70a3d 	.word	0xa3d70a3d
 8005ee4:	4060ad70 	.word	0x4060ad70
 8005ee8:	1eb851ec 	.word	0x1eb851ec
 8005eec:	406ffb85 	.word	0x406ffb85
 8005ef0:	b851eb85 	.word	0xb851eb85
 8005ef4:	408acb1e 	.word	0x408acb1e
 8005ef8:	47ae147b 	.word	0x47ae147b
 8005efc:	3f947ae1 	.word	0x3f947ae1
 8005f00:	2000ad94 	.word	0x2000ad94
 8005f04:	40390000 	.word	0x40390000
 8005f08:	3ff00000 	.word	0x3ff00000
 8005f0c:	2000a304 	.word	0x2000a304
 8005f10:	2000a308 	.word	0x2000a308
 8005f14:	2000a320 	.word	0x2000a320
 8005f18:	cccccccd 	.word	0xcccccccd

08005f1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a3e      	ldr	r2, [pc, #248]	; (8006034 <HAL_ADC_MspInit+0x118>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d175      	bne.n	800602a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b3a      	ldr	r3, [pc, #232]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f68:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6313      	str	r3, [r2, #48]	; 0x30
 8005f86:	4b2c      	ldr	r3, [pc, #176]	; (8006038 <HAL_ADC_MspInit+0x11c>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005f92:	2302      	movs	r3, #2
 8005f94:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f96:	2303      	movs	r3, #3
 8005f98:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f9e:	f107 0314 	add.w	r3, r7, #20
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4825      	ldr	r0, [pc, #148]	; (800603c <HAL_ADC_MspInit+0x120>)
 8005fa6:	f006 fd57 	bl	800ca58 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <HAL_ADC_MspInit+0x128>)
 8005fae:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fbc:	4b20      	ldr	r3, [pc, #128]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005fc2:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fc8:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005fca:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fd0:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fd8:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005fda:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fe0:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005fee:	4814      	ldr	r0, [pc, #80]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8005ff0:	f006 f938 	bl	800c264 <HAL_DMA_Init>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8005ffa:	f7fb f975 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
 8006004:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <HAL_ADC_MspInit+0x124>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800600a:	2200      	movs	r2, #0
 800600c:	2106      	movs	r1, #6
 800600e:	2012      	movs	r0, #18
 8006010:	f006 f8e3 	bl	800c1da <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006014:	2012      	movs	r0, #18
 8006016:	f006 f8fc 	bl	800c212 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 800601a:	2200      	movs	r2, #0
 800601c:	2106      	movs	r1, #6
 800601e:	2038      	movs	r0, #56	; 0x38
 8006020:	f006 f8db 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006024:	2038      	movs	r0, #56	; 0x38
 8006026:	f006 f8f4 	bl	800c212 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800602a:	bf00      	nop
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40012000 	.word	0x40012000
 8006038:	40023800 	.word	0x40023800
 800603c:	40020000 	.word	0x40020000
 8006040:	2000ae04 	.word	0x2000ae04
 8006044:	40026410 	.word	0x40026410

08006048 <uartInit>:
#endif



bool uartInit(void)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	e007      	b.n	8006064 <uartInit+0x1c>
  {
    is_open[i] = false;
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <uartInit+0x30>)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3301      	adds	r3, #1
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	ddf4      	ble.n	8006054 <uartInit+0xc>
  }


  return true;
 800606a:	2301      	movs	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	2000a324 	.word	0x2000a324

0800607c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <uartOpen+0x1c>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d078      	beq.n	8006188 <uartOpen+0x10c>
 8006096:	e0ef      	b.n	8006278 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8006098:	4b7a      	ldr	r3, [pc, #488]	; (8006284 <uartOpen+0x208>)
 800609a:	4a7b      	ldr	r2, [pc, #492]	; (8006288 <uartOpen+0x20c>)
 800609c:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800609e:	4a79      	ldr	r2, [pc, #484]	; (8006284 <uartOpen+0x208>)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80060a4:	4b77      	ldr	r3, [pc, #476]	; (8006284 <uartOpen+0x208>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 80060aa:	4b76      	ldr	r3, [pc, #472]	; (8006284 <uartOpen+0x208>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 80060b0:	4b74      	ldr	r3, [pc, #464]	; (8006284 <uartOpen+0x208>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 80060b6:	4b73      	ldr	r3, [pc, #460]	; (8006284 <uartOpen+0x208>)
 80060b8:	220c      	movs	r2, #12
 80060ba:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80060bc:	4b71      	ldr	r3, [pc, #452]	; (8006284 <uartOpen+0x208>)
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 80060c2:	4b70      	ldr	r3, [pc, #448]	; (8006284 <uartOpen+0x208>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 80060c8:	486e      	ldr	r0, [pc, #440]	; (8006284 <uartOpen+0x208>)
 80060ca:	f00a fa5a 	bl	8010582 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	4a6e      	ldr	r2, [pc, #440]	; (800628c <uartOpen+0x210>)
 80060d4:	4413      	add	r3, r2
 80060d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060da:	496d      	ldr	r1, [pc, #436]	; (8006290 <uartOpen+0x214>)
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fb fa3c 	bl	800155a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 80060e2:	2300      	movs	r3, #0
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	4b6b      	ldr	r3, [pc, #428]	; (8006294 <uartOpen+0x218>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	4a6a      	ldr	r2, [pc, #424]	; (8006294 <uartOpen+0x218>)
 80060ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060f0:	6313      	str	r3, [r2, #48]	; 0x30
 80060f2:	4b68      	ldr	r3, [pc, #416]	; (8006294 <uartOpen+0x218>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060fa:	613b      	str	r3, [r7, #16]
 80060fc:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80060fe:	2200      	movs	r2, #0
 8006100:	2104      	movs	r1, #4
 8006102:	203a      	movs	r0, #58	; 0x3a
 8006104:	f006 f869 	bl	800c1da <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006108:	203a      	movs	r0, #58	; 0x3a
 800610a:	f006 f882 	bl	800c212 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800610e:	2200      	movs	r2, #0
 8006110:	2104      	movs	r1, #4
 8006112:	2046      	movs	r0, #70	; 0x46
 8006114:	f006 f861 	bl	800c1da <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006118:	2046      	movs	r0, #70	; 0x46
 800611a:	f006 f87a 	bl	800c212 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 800611e:	4859      	ldr	r0, [pc, #356]	; (8006284 <uartOpen+0x208>)
 8006120:	f00a f9e2 	bl	80104e8 <HAL_UART_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <uartOpen+0xb4>
        {
          ret = false;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 800612e:	e0a3      	b.n	8006278 <uartOpen+0x1fc>
          ret = true;
 8006130:	2301      	movs	r3, #1
 8006132:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	4a58      	ldr	r2, [pc, #352]	; (8006298 <uartOpen+0x21c>)
 8006138:	2101      	movs	r1, #1
 800613a:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800613c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006140:	4953      	ldr	r1, [pc, #332]	; (8006290 <uartOpen+0x214>)
 8006142:	4850      	ldr	r0, [pc, #320]	; (8006284 <uartOpen+0x208>)
 8006144:	f00a fae2 	bl	801070c <HAL_UART_Receive_DMA>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <uartOpen+0xd6>
            ret = false;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	4a4d      	ldr	r2, [pc, #308]	; (800628c <uartOpen+0x210>)
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	4413      	add	r3, r2
 800615a:	3308      	adds	r3, #8
 800615c:	6819      	ldr	r1, [r3, #0]
 800615e:	4b4f      	ldr	r3, [pc, #316]	; (800629c <uartOpen+0x220>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	1a8a      	subs	r2, r1, r2
 8006168:	4948      	ldr	r1, [pc, #288]	; (800628c <uartOpen+0x210>)
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	440b      	add	r3, r1
 800616e:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8006170:	79fa      	ldrb	r2, [r7, #7]
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4945      	ldr	r1, [pc, #276]	; (800628c <uartOpen+0x210>)
 8006176:	0112      	lsls	r2, r2, #4
 8006178:	440a      	add	r2, r1
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	4943      	ldr	r1, [pc, #268]	; (800628c <uartOpen+0x210>)
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	440b      	add	r3, r1
 8006182:	3304      	adds	r3, #4
 8006184:	601a      	str	r2, [r3, #0]
      break;
 8006186:	e077      	b.n	8006278 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8006188:	4b3e      	ldr	r3, [pc, #248]	; (8006284 <uartOpen+0x208>)
 800618a:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <uartOpen+0x20c>)
 800618c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <uartOpen+0x208>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006194:	4b3b      	ldr	r3, [pc, #236]	; (8006284 <uartOpen+0x208>)
 8006196:	2200      	movs	r2, #0
 8006198:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800619a:	4b3a      	ldr	r3, [pc, #232]	; (8006284 <uartOpen+0x208>)
 800619c:	2200      	movs	r2, #0
 800619e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80061a0:	4b38      	ldr	r3, [pc, #224]	; (8006284 <uartOpen+0x208>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <uartOpen+0x208>)
 80061a8:	220c      	movs	r2, #12
 80061aa:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061ac:	4b35      	ldr	r3, [pc, #212]	; (8006284 <uartOpen+0x208>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061b2:	4b34      	ldr	r3, [pc, #208]	; (8006284 <uartOpen+0x208>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80061b8:	4832      	ldr	r0, [pc, #200]	; (8006284 <uartOpen+0x208>)
 80061ba:	f00a f9e2 	bl	8010582 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	4a32      	ldr	r2, [pc, #200]	; (800628c <uartOpen+0x210>)
 80061c4:	4413      	add	r3, r2
 80061c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061ca:	4931      	ldr	r1, [pc, #196]	; (8006290 <uartOpen+0x214>)
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fb f9c4 	bl	800155a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <uartOpen+0x218>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4a2e      	ldr	r2, [pc, #184]	; (8006294 <uartOpen+0x218>)
 80061dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061e0:	6313      	str	r3, [r2, #48]	; 0x30
 80061e2:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <uartOpen+0x218>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2104      	movs	r1, #4
 80061f2:	203a      	movs	r0, #58	; 0x3a
 80061f4:	f005 fff1 	bl	800c1da <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80061f8:	203a      	movs	r0, #58	; 0x3a
 80061fa:	f006 f80a 	bl	800c212 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80061fe:	2200      	movs	r2, #0
 8006200:	2104      	movs	r1, #4
 8006202:	2046      	movs	r0, #70	; 0x46
 8006204:	f005 ffe9 	bl	800c1da <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8006208:	2046      	movs	r0, #70	; 0x46
 800620a:	f006 f802 	bl	800c212 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 800620e:	481d      	ldr	r0, [pc, #116]	; (8006284 <uartOpen+0x208>)
 8006210:	f00a f96a 	bl	80104e8 <HAL_UART_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <uartOpen+0x1a4>
      {
        ret = false;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 800621e:	e02a      	b.n	8006276 <uartOpen+0x1fa>
        ret = true;
 8006220:	2301      	movs	r3, #1
 8006222:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <uartOpen+0x21c>)
 8006228:	2101      	movs	r1, #1
 800622a:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 800622c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006230:	4917      	ldr	r1, [pc, #92]	; (8006290 <uartOpen+0x214>)
 8006232:	4814      	ldr	r0, [pc, #80]	; (8006284 <uartOpen+0x208>)
 8006234:	f00a fa6a 	bl	801070c <HAL_UART_Receive_DMA>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <uartOpen+0x1c6>
          ret = false;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	4a11      	ldr	r2, [pc, #68]	; (800628c <uartOpen+0x210>)
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	3308      	adds	r3, #8
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <uartOpen+0x220>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	1a8a      	subs	r2, r1, r2
 8006258:	490c      	ldr	r1, [pc, #48]	; (800628c <uartOpen+0x210>)
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	440b      	add	r3, r1
 800625e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8006260:	79fa      	ldrb	r2, [r7, #7]
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	4909      	ldr	r1, [pc, #36]	; (800628c <uartOpen+0x210>)
 8006266:	0112      	lsls	r2, r2, #4
 8006268:	440a      	add	r2, r1
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	4907      	ldr	r1, [pc, #28]	; (800628c <uartOpen+0x210>)
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	440b      	add	r3, r1
 8006272:	3304      	adds	r3, #4
 8006274:	601a      	str	r2, [r3, #0]
      break;
 8006276:	bf00      	nop
  }

  return ret;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	2000af24 	.word	0x2000af24
 8006288:	40011000 	.word	0x40011000
 800628c:	2000a328 	.word	0x2000a328
 8006290:	2000a338 	.word	0x2000a338
 8006294:	40023800 	.word	0x40023800
 8006298:	2000a324 	.word	0x2000a324
 800629c:	2000aec4 	.word	0x2000aec4

080062a0 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <uartAvailable+0x1a>
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d018      	beq.n	80062ea <uartAvailable+0x4a>
 80062b8:	e02f      	b.n	800631a <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	4a19      	ldr	r2, [pc, #100]	; (8006324 <uartAvailable+0x84>)
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	4413      	add	r3, r2
 80062c2:	3308      	adds	r3, #8
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	4b18      	ldr	r3, [pc, #96]	; (8006328 <uartAvailable+0x88>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	1a8a      	subs	r2, r1, r2
 80062d0:	4914      	ldr	r1, [pc, #80]	; (8006324 <uartAvailable+0x84>)
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	440b      	add	r3, r1
 80062d6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	4a11      	ldr	r2, [pc, #68]	; (8006324 <uartAvailable+0x84>)
 80062de:	4413      	add	r3, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fb f992 	bl	800160a <qbufferAvailable>
 80062e6:	60f8      	str	r0, [r7, #12]
      break;
 80062e8:	e017      	b.n	800631a <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	4a0d      	ldr	r2, [pc, #52]	; (8006324 <uartAvailable+0x84>)
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	4413      	add	r3, r2
 80062f2:	3308      	adds	r3, #8
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <uartAvailable+0x88>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	1a8a      	subs	r2, r1, r2
 8006300:	4908      	ldr	r1, [pc, #32]	; (8006324 <uartAvailable+0x84>)
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	440b      	add	r3, r1
 8006306:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	4a05      	ldr	r2, [pc, #20]	; (8006324 <uartAvailable+0x84>)
 800630e:	4413      	add	r3, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7fb f97a 	bl	800160a <qbufferAvailable>
 8006316:	60f8      	str	r0, [r7, #12]
      break;
 8006318:	bf00      	nop
  }

  return ret;
 800631a:	68fb      	ldr	r3, [r7, #12]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	2000a328 	.word	0x2000a328
 8006328:	2000aec4 	.word	0x2000aec4

0800632c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <uartRead+0x1a>
 8006340:	2b01      	cmp	r3, #1
 8006342:	d008      	beq.n	8006356 <uartRead+0x2a>
 8006344:	e00f      	b.n	8006366 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8006346:	f107 030f 	add.w	r3, r7, #15
 800634a:	2201      	movs	r2, #1
 800634c:	4619      	mov	r1, r3
 800634e:	4808      	ldr	r0, [pc, #32]	; (8006370 <uartRead+0x44>)
 8006350:	f7fb f91e 	bl	8001590 <qbufferRead>
      break;
 8006354:	e007      	b.n	8006366 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006356:	f107 030f 	add.w	r3, r7, #15
 800635a:	2201      	movs	r2, #1
 800635c:	4619      	mov	r1, r3
 800635e:	4805      	ldr	r0, [pc, #20]	; (8006374 <uartRead+0x48>)
 8006360:	f7fb f916 	bl	8001590 <qbufferRead>
      break;
 8006364:	bf00      	nop
  }

  return ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	2000a328 	.word	0x2000a328
 8006374:	2000a338 	.word	0x2000a338

08006378 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <uartWrite+0x1e>
 8006390:	2b01      	cmp	r3, #1
 8006392:	d00f      	beq.n	80063b4 <uartWrite+0x3c>
 8006394:	e020      	b.n	80063d8 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	b29a      	uxth	r2, r3
 800639a:	2364      	movs	r3, #100	; 0x64
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	4811      	ldr	r0, [pc, #68]	; (80063e4 <uartWrite+0x6c>)
 80063a0:	f00a f91b 	bl	80105da <HAL_UART_Transmit>
 80063a4:	4603      	mov	r3, r0
 80063a6:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d111      	bne.n	80063d2 <uartWrite+0x5a>
        {
          ret = length;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	617b      	str	r3, [r7, #20]
        }
      break;
 80063b2:	e00e      	b.n	80063d2 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	2364      	movs	r3, #100	; 0x64
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	4809      	ldr	r0, [pc, #36]	; (80063e4 <uartWrite+0x6c>)
 80063be:	f00a f90c 	bl	80105da <HAL_UART_Transmit>
 80063c2:	4603      	mov	r3, r0
 80063c4:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80063c6:	7cfb      	ldrb	r3, [r7, #19]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <uartWrite+0x5e>
      {
        ret = length;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	617b      	str	r3, [r7, #20]
      }
      break;
 80063d0:	e001      	b.n	80063d6 <uartWrite+0x5e>
      break;
 80063d2:	bf00      	nop
 80063d4:	e000      	b.n	80063d8 <uartWrite+0x60>
      break;
 80063d6:	bf00      	nop
  }

  return ret;
 80063d8:	697b      	ldr	r3, [r7, #20]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	2000af24 	.word	0x2000af24

080063e8 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b0c7      	sub	sp, #284	; 0x11c
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	4602      	mov	r2, r0
 80063f2:	1dfb      	adds	r3, r7, #7
 80063f4:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80063f6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80063fa:	f107 030c 	add.w	r3, r7, #12
 80063fe:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8006400:	f107 030c 	add.w	r3, r7, #12
 8006404:	f107 0010 	add.w	r0, r7, #16
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800640e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006412:	f00d fac3 	bl	801399c <vsniprintf>
 8006416:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800641a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800641e:	f107 0110 	add.w	r1, r7, #16
 8006422:	1dfb      	adds	r3, r7, #7
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ffa6 	bl	8006378 <uartWrite>
 800642c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8006430:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8006434:	4618      	mov	r0, r3
 8006436:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800643a:	46bd      	mov	sp, r7
 800643c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006440:	b003      	add	sp, #12
 8006442:	4770      	bx	lr

08006444 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006474:	f107 0314 	add.w	r3, r7, #20
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a5b      	ldr	r2, [pc, #364]	; (80065f8 <HAL_UART_MspInit+0x18c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f040 80b0 	bne.w	80065f0 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_UART_MspInit+0x190>)
 8006496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006498:	4a58      	ldr	r2, [pc, #352]	; (80065fc <HAL_UART_MspInit+0x190>)
 800649a:	f043 0310 	orr.w	r3, r3, #16
 800649e:	6453      	str	r3, [r2, #68]	; 0x44
 80064a0:	4b56      	ldr	r3, [pc, #344]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	4b52      	ldr	r3, [pc, #328]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	4a51      	ldr	r2, [pc, #324]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6313      	str	r3, [r2, #48]	; 0x30
 80064bc:	4b4f      	ldr	r3, [pc, #316]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064c8:	2300      	movs	r3, #0
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	4b4b      	ldr	r3, [pc, #300]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064d2:	f043 0302 	orr.w	r3, r3, #2
 80064d6:	6313      	str	r3, [r2, #48]	; 0x30
 80064d8:	4b48      	ldr	r3, [pc, #288]	; (80065fc <HAL_UART_MspInit+0x190>)
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80064e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ea:	2302      	movs	r3, #2
 80064ec:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f2:	2303      	movs	r3, #3
 80064f4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80064f6:	2307      	movs	r3, #7
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fa:	f107 0314 	add.w	r3, r7, #20
 80064fe:	4619      	mov	r1, r3
 8006500:	483f      	ldr	r0, [pc, #252]	; (8006600 <HAL_UART_MspInit+0x194>)
 8006502:	f006 faa9 	bl	800ca58 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006506:	2340      	movs	r3, #64	; 0x40
 8006508:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006512:	2303      	movs	r3, #3
 8006514:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006516:	2307      	movs	r3, #7
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	4838      	ldr	r0, [pc, #224]	; (8006604 <HAL_UART_MspInit+0x198>)
 8006522:	f006 fa99 	bl	800ca58 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006526:	4b38      	ldr	r3, [pc, #224]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006528:	4a38      	ldr	r2, [pc, #224]	; (800660c <HAL_UART_MspInit+0x1a0>)
 800652a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800652c:	4b36      	ldr	r3, [pc, #216]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800652e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006532:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006534:	4b34      	ldr	r3, [pc, #208]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800653a:	4b33      	ldr	r3, [pc, #204]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006540:	4b31      	ldr	r3, [pc, #196]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006546:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006548:	4b2f      	ldr	r3, [pc, #188]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800654a:	2200      	movs	r2, #0
 800654c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800654e:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006554:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800655a:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800655c:	2200      	movs	r2, #0
 800655e:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006560:	4b29      	ldr	r3, [pc, #164]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006562:	2200      	movs	r2, #0
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006566:	4828      	ldr	r0, [pc, #160]	; (8006608 <HAL_UART_MspInit+0x19c>)
 8006568:	f005 fe7c 	bl	800c264 <HAL_DMA_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8006572:	f7fa feb9 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a23      	ldr	r2, [pc, #140]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_UART_MspInit+0x19c>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006582:	4b23      	ldr	r3, [pc, #140]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 8006584:	4a23      	ldr	r2, [pc, #140]	; (8006614 <HAL_UART_MspInit+0x1a8>)
 8006586:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 800658a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800658e:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006590:	4b1f      	ldr	r3, [pc, #124]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 8006592:	2200      	movs	r2, #0
 8006594:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006596:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 8006598:	2200      	movs	r2, #0
 800659a:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800659c:	4b1c      	ldr	r3, [pc, #112]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 800659e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a2:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065a4:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065aa:	4b19      	ldr	r3, [pc, #100]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80065b0:	4b17      	ldr	r3, [pc, #92]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b6:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80065c4:	4812      	ldr	r0, [pc, #72]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065c6:	f005 fe4d 	bl	800c264 <HAL_DMA_Init>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80065d0:	f7fa fe8a 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a0e      	ldr	r2, [pc, #56]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34
 80065da:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <HAL_UART_MspInit+0x1a4>)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80065e0:	2200      	movs	r2, #0
 80065e2:	2100      	movs	r1, #0
 80065e4:	2025      	movs	r0, #37	; 0x25
 80065e6:	f005 fdf8 	bl	800c1da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80065ea:	2025      	movs	r0, #37	; 0x25
 80065ec:	f005 fe11 	bl	800c212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80065f0:	bf00      	nop
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40011000 	.word	0x40011000
 80065fc:	40023800 	.word	0x40023800
 8006600:	40020000 	.word	0x40020000
 8006604:	40020400 	.word	0x40020400
 8006608:	2000ae64 	.word	0x2000ae64
 800660c:	400264b8 	.word	0x400264b8
 8006610:	2000aec4 	.word	0x2000aec4
 8006614:	40026440 	.word	0x40026440

08006618 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a11      	ldr	r2, [pc, #68]	; (800666c <HAL_UART_MspDeInit+0x54>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d11b      	bne.n	8006662 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800662a:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_UART_MspDeInit+0x58>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	4a10      	ldr	r2, [pc, #64]	; (8006670 <HAL_UART_MspDeInit+0x58>)
 8006630:	f023 0310 	bic.w	r3, r3, #16
 8006634:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8006636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800663a:	480e      	ldr	r0, [pc, #56]	; (8006674 <HAL_UART_MspDeInit+0x5c>)
 800663c:	f006 fb8e 	bl	800cd5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8006640:	2140      	movs	r1, #64	; 0x40
 8006642:	480d      	ldr	r0, [pc, #52]	; (8006678 <HAL_UART_MspDeInit+0x60>)
 8006644:	f006 fb8a 	bl	800cd5c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	4618      	mov	r0, r3
 800664e:	f005 feb7 	bl	800c3c0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	4618      	mov	r0, r3
 8006658:	f005 feb2 	bl	800c3c0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800665c:	2025      	movs	r0, #37	; 0x25
 800665e:	f005 fde6 	bl	800c22e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40011000 	.word	0x40011000
 8006670:	40023800 	.word	0x40023800
 8006674:	40020000 	.word	0x40020000
 8006678:	40020400 	.word	0x40020400

0800667c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <SD_CheckStatus+0x80>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 800668c:	f7fe fa30 	bl	8004af0 <sdIsInit>
 8006690:	4603      	mov	r3, r0
 8006692:	f083 0301 	eor.w	r3, r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <SD_CheckStatus+0x80>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	4b14      	ldr	r3, [pc, #80]	; (80066fc <SD_CheckStatus+0x80>)
 80066aa:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80066ac:	f7fe fa2c 	bl	8004b08 <sdIsDetected>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f083 0301 	eor.w	r3, r3, #1
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <SD_CheckStatus+0x80>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f043 0302 	orr.w	r3, r3, #2
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <SD_CheckStatus+0x80>)
 80066ca:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 80066cc:	200a      	movs	r0, #10
 80066ce:	f7fe fa9d 	bl	8004c0c <sdIsReady>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f083 0301 	eor.w	r3, r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <SD_CheckStatus+0x80>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4b04      	ldr	r3, [pc, #16]	; (80066fc <SD_CheckStatus+0x80>)
 80066ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80066ee:	4b03      	ldr	r3, [pc, #12]	; (80066fc <SD_CheckStatus+0x80>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b2db      	uxtb	r3, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000038 	.word	0x20000038

08006700 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 800670a:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <SD_initialize+0x40>)
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8006710:	f7fe f9ee 	bl	8004af0 <sdIsInit>
 8006714:	4603      	mov	r3, r0
 8006716:	f083 0301 	eor.w	r3, r3, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <SD_initialize+0x40>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	4b04      	ldr	r3, [pc, #16]	; (8006740 <SD_initialize+0x40>)
 800672e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006730:	4b03      	ldr	r3, [pc, #12]	; (8006740 <SD_initialize+0x40>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000038 	.word	0x20000038

08006744 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ff93 	bl	800667c <SD_CheckStatus>
 8006756:	4603      	mov	r3, r0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8006774:	f242 7310 	movw	r3, #10000	; 0x2710
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fe fa65 	bl	8004c4c <sdReadBlocks>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <SD_read+0x2c>
  {
    res = RES_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 80067aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fe fa94 	bl	8004ce0 <sdWriteBlocks>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <SD_write+0x2c>
  {
    res = RES_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	603a      	str	r2, [r7, #0]
 80067d6:	71fb      	strb	r3, [r7, #7]
 80067d8:	460b      	mov	r3, r1
 80067da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80067e2:	4b25      	ldr	r3, [pc, #148]	; (8006878 <SD_ioctl+0xac>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <SD_ioctl+0x28>
 80067f0:	2303      	movs	r3, #3
 80067f2:	e03c      	b.n	800686e <SD_ioctl+0xa2>

  switch (cmd)
 80067f4:	79bb      	ldrb	r3, [r7, #6]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d834      	bhi.n	8006864 <SD_ioctl+0x98>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <SD_ioctl+0x34>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006811 	.word	0x08006811
 8006804:	08006819 	.word	0x08006819
 8006808:	08006831 	.word	0x08006831
 800680c:	0800684b 	.word	0x0800684b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006816:	e028      	b.n	800686a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8006818:	f107 0308 	add.w	r3, r7, #8
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe f989 	bl	8004b34 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800682e:	e01c      	b.n	800686a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8006830:	f107 0308 	add.w	r3, r7, #8
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe f97d 	bl	8004b34 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	b29a      	uxth	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006848:	e00f      	b.n	800686a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 800684a:	f107 0308 	add.w	r3, r7, #8
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe f970 	bl	8004b34 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	0a5a      	lsrs	r2, r3, #9
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006862:	e002      	b.n	800686a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006864:	2304      	movs	r3, #4
 8006866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800686a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800686e:	4618      	mov	r0, r3
 8006870:	3730      	adds	r7, #48	; 0x30
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000038 	.word	0x20000038

0800687c <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	3306      	adds	r3, #6
 800688a:	2220      	movs	r2, #32
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f00b fc0f 	bl	80120b2 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <hanFontLoad+0x2e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b0a      	cmp	r3, #10
 80068a8:	d107      	bne.n	80068ba <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2204      	movs	r2, #4
 80068ae:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 80068b6:	2304      	movs	r3, #4
 80068b8:	e03b      	b.n	8006932 <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da2b      	bge.n	800691c <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	041a      	lsls	r2, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3301      	adds	r3, #1
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	4313      	orrs	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	3202      	adds	r2, #2
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4a16      	ldr	r2, [pc, #88]	; (800693c <hanFontLoad+0xc0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d90e      	bls.n	8006904 <hanFontLoad+0x88>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <hanFontLoad+0xc4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d80a      	bhi.n	8006904 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2201      	movs	r2, #1
 80068f2:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2203      	movs	r2, #3
 80068f8:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f91f 	bl	8006b40 <hanUniFontLoad>
 8006902:	e009      	b.n	8006918 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2201      	movs	r2, #1
 8006908:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2202      	movs	r2, #2
 800690e:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f816 	bl	8006944 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8006918:	2301      	movs	r3, #1
 800691a:	e00a      	b.n	8006932 <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2202      	movs	r2, #2
 8006920:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa30 	bl	8006d90 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8006930:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	00eab07f 	.word	0x00eab07f
 8006940:	00ed9fb0 	.word	0x00ed9fb0

08006944 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	b21a      	sxth	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	3301      	adds	r3, #1
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b21b      	sxth	r3, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	b21b      	sxth	r3, r3
 8006962:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8006964:	89bb      	ldrh	r3, [r7, #12]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fa3c 	bl	8006de4 <hanCnvCodeWan2Johab>
 800696c:	4603      	mov	r3, r0
 800696e:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8006970:	89bb      	ldrh	r3, [r7, #12]
 8006972:	0a9b      	lsrs	r3, r3, #10
 8006974:	b29b      	uxth	r3, r3
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	b29a      	uxth	r2, r3
 800697c:	4b63      	ldr	r3, [pc, #396]	; (8006b0c <hanWanFontLoad+0x1c8>)
 800697e:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8006980:	89bb      	ldrh	r3, [r7, #12]
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	b29b      	uxth	r3, r3
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	b29a      	uxth	r2, r3
 800698c:	4b60      	ldr	r3, [pc, #384]	; (8006b10 <hanWanFontLoad+0x1cc>)
 800698e:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8006990:	89bb      	ldrh	r3, [r7, #12]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	b29a      	uxth	r2, r3
 8006998:	4b5e      	ldr	r3, [pc, #376]	; (8006b14 <hanWanFontLoad+0x1d0>)
 800699a:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 800699c:	4b5b      	ldr	r3, [pc, #364]	; (8006b0c <hanWanFontLoad+0x1c8>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b5d      	ldr	r3, [pc, #372]	; (8006b18 <hanWanFontLoad+0x1d4>)
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	4b58      	ldr	r3, [pc, #352]	; (8006b0c <hanWanFontLoad+0x1c8>)
 80069aa:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 80069ac:	4b58      	ldr	r3, [pc, #352]	; (8006b10 <hanWanFontLoad+0x1cc>)
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b5a      	ldr	r3, [pc, #360]	; (8006b1c <hanWanFontLoad+0x1d8>)
 80069b4:	5c9b      	ldrb	r3, [r3, r2]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	4b55      	ldr	r3, [pc, #340]	; (8006b10 <hanWanFontLoad+0x1cc>)
 80069ba:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 80069bc:	4b55      	ldr	r3, [pc, #340]	; (8006b14 <hanWanFontLoad+0x1d0>)
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b57      	ldr	r3, [pc, #348]	; (8006b20 <hanWanFontLoad+0x1dc>)
 80069c4:	5c9b      	ldrb	r3, [r3, r2]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	4b52      	ldr	r3, [pc, #328]	; (8006b14 <hanWanFontLoad+0x1d0>)
 80069ca:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80069cc:	4b51      	ldr	r3, [pc, #324]	; (8006b14 <hanWanFontLoad+0x1d0>)
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <hanWanFontLoad+0x9e>
 80069d4:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <hanWanFontLoad+0x1cc>)
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	4b52      	ldr	r3, [pc, #328]	; (8006b24 <hanWanFontLoad+0x1e0>)
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	e005      	b.n	80069ee <hanWanFontLoad+0xaa>
 80069e2:	4b4b      	ldr	r3, [pc, #300]	; (8006b10 <hanWanFontLoad+0x1cc>)
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	4b4f      	ldr	r3, [pc, #316]	; (8006b28 <hanWanFontLoad+0x1e4>)
 80069ea:	5c9b      	ldrb	r3, [r3, r2]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4a4f      	ldr	r2, [pc, #316]	; (8006b2c <hanWanFontLoad+0x1e8>)
 80069f0:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80069f2:	4b46      	ldr	r3, [pc, #280]	; (8006b0c <hanWanFontLoad+0x1c8>)
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <hanWanFontLoad+0xca>
 80069fa:	4b44      	ldr	r3, [pc, #272]	; (8006b0c <hanWanFontLoad+0x1c8>)
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d005      	beq.n	8006a0e <hanWanFontLoad+0xca>
 8006a02:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <hanWanFontLoad+0x1c8>)
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d001      	beq.n	8006a0e <hanWanFontLoad+0xca>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <hanWanFontLoad+0xcc>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <hanWanFontLoad+0x1d0>)
 8006a14:	8812      	ldrh	r2, [r2, #0]
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d001      	beq.n	8006a1e <hanWanFontLoad+0xda>
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	e000      	b.n	8006a20 <hanWanFontLoad+0xdc>
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4413      	add	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	4b42      	ldr	r3, [pc, #264]	; (8006b30 <hanWanFontLoad+0x1ec>)
 8006a26:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006a28:	4b39      	ldr	r3, [pc, #228]	; (8006b10 <hanWanFontLoad+0x1cc>)
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <hanWanFontLoad+0x1f0>)
 8006a30:	5c9b      	ldrb	r3, [r3, r2]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	4b40      	ldr	r3, [pc, #256]	; (8006b38 <hanWanFontLoad+0x1f4>)
 8006a36:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	81fb      	strh	r3, [r7, #14]
 8006a3c:	e035      	b.n	8006aaa <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8006a3e:	4b3b      	ldr	r3, [pc, #236]	; (8006b2c <hanWanFontLoad+0x1e8>)
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b2f      	ldr	r3, [pc, #188]	; (8006b0c <hanWanFontLoad+0x1c8>)
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	441a      	add	r2, r3
 8006a54:	89fb      	ldrh	r3, [r7, #14]
 8006a56:	4939      	ldr	r1, [pc, #228]	; (8006b3c <hanWanFontLoad+0x1f8>)
 8006a58:	0152      	lsls	r2, r2, #5
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	b2d1      	uxtb	r1, r2
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	4413      	add	r3, r2
 8006a68:	460a      	mov	r2, r1
 8006a6a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8006a6c:	89fb      	ldrh	r3, [r7, #14]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	4413      	add	r3, r2
 8006a72:	7999      	ldrb	r1, [r3, #6]
 8006a74:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <hanWanFontLoad+0x1ec>)
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2316      	movs	r3, #22
 8006a7c:	fb03 f302 	mul.w	r3, r3, r2
 8006a80:	33a0      	adds	r3, #160	; 0xa0
 8006a82:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <hanWanFontLoad+0x1cc>)
 8006a84:	8812      	ldrh	r2, [r2, #0]
 8006a86:	441a      	add	r2, r3
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	482c      	ldr	r0, [pc, #176]	; (8006b3c <hanWanFontLoad+0x1f8>)
 8006a8c:	0152      	lsls	r2, r2, #5
 8006a8e:	4413      	add	r3, r2
 8006a90:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	89fb      	ldrh	r3, [r7, #14]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	b2d1      	uxtb	r1, r2
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	460a      	mov	r2, r1
 8006aa2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006aa4:	89fb      	ldrh	r3, [r7, #14]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	81fb      	strh	r3, [r7, #14]
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	2b1f      	cmp	r3, #31
 8006aae:	d9c6      	bls.n	8006a3e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <hanWanFontLoad+0x1d0>)
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d025      	beq.n	8006b04 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006ab8:	2300      	movs	r3, #0
 8006aba:	81fb      	strh	r3, [r7, #14]
 8006abc:	e01f      	b.n	8006afe <hanWanFontLoad+0x1ba>
 8006abe:	89fb      	ldrh	r3, [r7, #14]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	7999      	ldrb	r1, [r3, #6]
 8006ac6:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <hanWanFontLoad+0x1f4>)
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	4613      	mov	r3, r2
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	33f8      	adds	r3, #248	; 0xf8
 8006ad6:	4a0f      	ldr	r2, [pc, #60]	; (8006b14 <hanWanFontLoad+0x1d0>)
 8006ad8:	8812      	ldrh	r2, [r2, #0]
 8006ada:	441a      	add	r2, r3
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	4817      	ldr	r0, [pc, #92]	; (8006b3c <hanWanFontLoad+0x1f8>)
 8006ae0:	0152      	lsls	r2, r2, #5
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	b2d1      	uxtb	r1, r2
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	4413      	add	r3, r2
 8006af4:	460a      	mov	r2, r1
 8006af6:	719a      	strb	r2, [r3, #6]
 8006af8:	89fb      	ldrh	r3, [r7, #14]
 8006afa:	3301      	adds	r3, #1
 8006afc:	81fb      	strh	r3, [r7, #14]
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	2b1f      	cmp	r3, #31
 8006b02:	d9dc      	bls.n	8006abe <hanWanFontLoad+0x17a>
  }
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	2000a438 	.word	0x2000a438
 8006b10:	2000a43a 	.word	0x2000a43a
 8006b14:	2000a43c 	.word	0x2000a43c
 8006b18:	080177c8 	.word	0x080177c8
 8006b1c:	080177e8 	.word	0x080177e8
 8006b20:	08017808 	.word	0x08017808
 8006b24:	080178a0 	.word	0x080178a0
 8006b28:	08017888 	.word	0x08017888
 8006b2c:	2000a43e 	.word	0x2000a43e
 8006b30:	2000a440 	.word	0x2000a440
 8006b34:	080178b8 	.word	0x080178b8
 8006b38:	2000a442 	.word	0x2000a442
 8006b3c:	08019dc0 	.word	0x08019dc0

08006b40 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	031b      	lsls	r3, r3, #12
 8006b50:	b21a      	sxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3301      	adds	r3, #1
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	019b      	lsls	r3, r3, #6
 8006b5a:	b21b      	sxth	r3, r3
 8006b5c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b21a      	sxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b72:	b21b      	sxth	r3, r3
 8006b74:	4313      	orrs	r3, r2
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8006b7a:	89bb      	ldrh	r3, [r7, #12]
 8006b7c:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8006b80:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8006b82:	89ba      	ldrh	r2, [r7, #12]
 8006b84:	0893      	lsrs	r3, r2, #2
 8006b86:	4973      	ldr	r1, [pc, #460]	; (8006d54 <hanUniFontLoad+0x214>)
 8006b88:	fba1 3103 	umull	r3, r1, r1, r3
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	1a5b      	subs	r3, r3, r1
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	4b6f      	ldr	r3, [pc, #444]	; (8006d58 <hanUniFontLoad+0x218>)
 8006b9a:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	4a6c      	ldr	r2, [pc, #432]	; (8006d54 <hanUniFontLoad+0x214>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8006ba8:	89b9      	ldrh	r1, [r7, #12]
 8006baa:	4b6c      	ldr	r3, [pc, #432]	; (8006d5c <hanUniFontLoad+0x21c>)
 8006bac:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb0:	1aca      	subs	r2, r1, r3
 8006bb2:	0852      	lsrs	r2, r2, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	091a      	lsrs	r2, r3, #4
 8006bb8:	4613      	mov	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	00da      	lsls	r2, r3, #3
 8006bc0:	1ad2      	subs	r2, r2, r3
 8006bc2:	1a8b      	subs	r3, r1, r2
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	4b66      	ldr	r3, [pc, #408]	; (8006d60 <hanUniFontLoad+0x220>)
 8006bc8:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8006bca:	89ba      	ldrh	r2, [r7, #12]
 8006bcc:	4b63      	ldr	r3, [pc, #396]	; (8006d5c <hanUniFontLoad+0x21c>)
 8006bce:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	4413      	add	r3, r2
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	4b61      	ldr	r3, [pc, #388]	; (8006d64 <hanUniFontLoad+0x224>)
 8006bde:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8006be0:	4b60      	ldr	r3, [pc, #384]	; (8006d64 <hanUniFontLoad+0x224>)
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b60      	ldr	r3, [pc, #384]	; (8006d68 <hanUniFontLoad+0x228>)
 8006be8:	5c9b      	ldrb	r3, [r3, r2]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	4b5d      	ldr	r3, [pc, #372]	; (8006d64 <hanUniFontLoad+0x224>)
 8006bee:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <hanUniFontLoad+0x220>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4b5d      	ldr	r3, [pc, #372]	; (8006d6c <hanUniFontLoad+0x22c>)
 8006bf8:	5c9b      	ldrb	r3, [r3, r2]
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <hanUniFontLoad+0x220>)
 8006bfe:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8006c00:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <hanUniFontLoad+0x218>)
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	4b5a      	ldr	r3, [pc, #360]	; (8006d70 <hanUniFontLoad+0x230>)
 8006c08:	5c9b      	ldrb	r3, [r3, r2]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	4b52      	ldr	r3, [pc, #328]	; (8006d58 <hanUniFontLoad+0x218>)
 8006c0e:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8006c10:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <hanUniFontLoad+0x218>)
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d006      	beq.n	8006c26 <hanUniFontLoad+0xe6>
 8006c18:	4b51      	ldr	r3, [pc, #324]	; (8006d60 <hanUniFontLoad+0x220>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4b55      	ldr	r3, [pc, #340]	; (8006d74 <hanUniFontLoad+0x234>)
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	e005      	b.n	8006c32 <hanUniFontLoad+0xf2>
 8006c26:	4b4e      	ldr	r3, [pc, #312]	; (8006d60 <hanUniFontLoad+0x220>)
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4b52      	ldr	r3, [pc, #328]	; (8006d78 <hanUniFontLoad+0x238>)
 8006c2e:	5c9b      	ldrb	r3, [r3, r2]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	4a52      	ldr	r2, [pc, #328]	; (8006d7c <hanUniFontLoad+0x23c>)
 8006c34:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8006c36:	4b4b      	ldr	r3, [pc, #300]	; (8006d64 <hanUniFontLoad+0x224>)
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <hanUniFontLoad+0x112>
 8006c3e:	4b49      	ldr	r3, [pc, #292]	; (8006d64 <hanUniFontLoad+0x224>)
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d005      	beq.n	8006c52 <hanUniFontLoad+0x112>
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <hanUniFontLoad+0x224>)
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d001      	beq.n	8006c52 <hanUniFontLoad+0x112>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <hanUniFontLoad+0x114>
 8006c52:	2300      	movs	r3, #0
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4a40      	ldr	r2, [pc, #256]	; (8006d58 <hanUniFontLoad+0x218>)
 8006c58:	8812      	ldrh	r2, [r2, #0]
 8006c5a:	2a00      	cmp	r2, #0
 8006c5c:	d001      	beq.n	8006c62 <hanUniFontLoad+0x122>
 8006c5e:	2202      	movs	r2, #2
 8006c60:	e000      	b.n	8006c64 <hanUniFontLoad+0x124>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4413      	add	r3, r2
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	4b45      	ldr	r3, [pc, #276]	; (8006d80 <hanUniFontLoad+0x240>)
 8006c6a:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006c6c:	4b3c      	ldr	r3, [pc, #240]	; (8006d60 <hanUniFontLoad+0x220>)
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b44      	ldr	r3, [pc, #272]	; (8006d84 <hanUniFontLoad+0x244>)
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <hanUniFontLoad+0x248>)
 8006c7a:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	81fb      	strh	r3, [r7, #14]
 8006c80:	e035      	b.n	8006cee <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8006c82:	4b3e      	ldr	r3, [pc, #248]	; (8006d7c <hanUniFontLoad+0x23c>)
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b34      	ldr	r3, [pc, #208]	; (8006d64 <hanUniFontLoad+0x224>)
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	441a      	add	r2, r3
 8006c98:	89fb      	ldrh	r3, [r7, #14]
 8006c9a:	493c      	ldr	r1, [pc, #240]	; (8006d8c <hanUniFontLoad+0x24c>)
 8006c9c:	0152      	lsls	r2, r2, #5
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006ca4:	89fb      	ldrh	r3, [r7, #14]
 8006ca6:	b2d1      	uxtb	r1, r2
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	460a      	mov	r2, r1
 8006cae:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8006cb0:	89fb      	ldrh	r3, [r7, #14]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	7999      	ldrb	r1, [r3, #6]
 8006cb8:	4b31      	ldr	r3, [pc, #196]	; (8006d80 <hanUniFontLoad+0x240>)
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2316      	movs	r3, #22
 8006cc0:	fb03 f302 	mul.w	r3, r3, r2
 8006cc4:	33a0      	adds	r3, #160	; 0xa0
 8006cc6:	4a26      	ldr	r2, [pc, #152]	; (8006d60 <hanUniFontLoad+0x220>)
 8006cc8:	8812      	ldrh	r2, [r2, #0]
 8006cca:	441a      	add	r2, r3
 8006ccc:	89fb      	ldrh	r3, [r7, #14]
 8006cce:	482f      	ldr	r0, [pc, #188]	; (8006d8c <hanUniFontLoad+0x24c>)
 8006cd0:	0152      	lsls	r2, r2, #5
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	89fb      	ldrh	r3, [r7, #14]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	b2d1      	uxtb	r1, r2
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	460a      	mov	r2, r1
 8006ce6:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	3301      	adds	r3, #1
 8006cec:	81fb      	strh	r3, [r7, #14]
 8006cee:	89fb      	ldrh	r3, [r7, #14]
 8006cf0:	2b1f      	cmp	r3, #31
 8006cf2:	d9c6      	bls.n	8006c82 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8006cf4:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <hanUniFontLoad+0x218>)
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d025      	beq.n	8006d48 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	81fb      	strh	r3, [r7, #14]
 8006d00:	e01f      	b.n	8006d42 <hanUniFontLoad+0x202>
 8006d02:	89fb      	ldrh	r3, [r7, #14]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	4413      	add	r3, r2
 8006d08:	7999      	ldrb	r1, [r3, #6]
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	; (8006d88 <hanUniFontLoad+0x248>)
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	33f8      	adds	r3, #248	; 0xf8
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <hanUniFontLoad+0x218>)
 8006d1c:	8812      	ldrh	r2, [r2, #0]
 8006d1e:	441a      	add	r2, r3
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	481a      	ldr	r0, [pc, #104]	; (8006d8c <hanUniFontLoad+0x24c>)
 8006d24:	0152      	lsls	r2, r2, #5
 8006d26:	4413      	add	r3, r2
 8006d28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	89fb      	ldrh	r3, [r7, #14]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	b2d1      	uxtb	r1, r2
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	4413      	add	r3, r2
 8006d38:	460a      	mov	r2, r1
 8006d3a:	719a      	strb	r2, [r3, #6]
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	81fb      	strh	r3, [r7, #14]
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	2b1f      	cmp	r3, #31
 8006d46:	d9dc      	bls.n	8006d02 <hanUniFontLoad+0x1c2>
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	24924925 	.word	0x24924925
 8006d58:	2000a444 	.word	0x2000a444
 8006d5c:	86186187 	.word	0x86186187
 8006d60:	2000a446 	.word	0x2000a446
 8006d64:	2000a448 	.word	0x2000a448
 8006d68:	08017828 	.word	0x08017828
 8006d6c:	08017848 	.word	0x08017848
 8006d70:	08017868 	.word	0x08017868
 8006d74:	080178a0 	.word	0x080178a0
 8006d78:	08017888 	.word	0x08017888
 8006d7c:	2000a44a 	.word	0x2000a44a
 8006d80:	2000a44c 	.word	0x2000a44c
 8006d84:	080178b8 	.word	0x080178b8
 8006d88:	2000a44e 	.word	0x2000a44e
 8006d8c:	08019dc0 	.word	0x08019dc0

08006d90 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8006da0:	7b7b      	ldrb	r3, [r7, #13]
 8006da2:	3b20      	subs	r3, #32
 8006da4:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8006da6:	2300      	movs	r3, #0
 8006da8:	81fb      	strh	r3, [r7, #14]
 8006daa:	e00f      	b.n	8006dcc <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8006dac:	7b7a      	ldrb	r2, [r7, #13]
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	490b      	ldr	r1, [pc, #44]	; (8006de0 <hanEngFontLoad+0x50>)
 8006db2:	0112      	lsls	r2, r2, #4
 8006db4:	4413      	add	r3, r2
 8006db6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006dba:	89fb      	ldrh	r3, [r7, #14]
 8006dbc:	b2d1      	uxtb	r1, r2
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8006dc6:	89fb      	ldrh	r3, [r7, #14]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	81fb      	strh	r3, [r7, #14]
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	2b0f      	cmp	r3, #15
 8006dd0:	d9ec      	bls.n	8006dac <hanEngFontLoad+0x1c>
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	08015fc8 	.word	0x08015fc8

08006de4 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
 8006dfc:	3bb0      	subs	r3, #176	; 0xb0
 8006dfe:	225e      	movs	r2, #94	; 0x5e
 8006e00:	fb02 f203 	mul.w	r2, r2, r3
 8006e04:	89bb      	ldrh	r3, [r7, #12]
 8006e06:	3ba1      	subs	r3, #161	; 0xa1
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8006e0c:	4a05      	ldr	r2, [pc, #20]	; (8006e24 <hanCnvCodeWan2Johab+0x40>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e14:	b29b      	uxth	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	08017900 	.word	0x08017900

08006e28 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <TransferDoneISR+0x30>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <TransferDoneISR+0x30>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	2002      	movs	r0, #2
 8006e40:	f7fc fa6a 	bl	8003318 <gpioPinWrite>

    if (frameCallBack != NULL)
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <TransferDoneISR+0x34>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <TransferDoneISR+0x34>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4798      	blx	r3
    }
  }
}
 8006e52:	bf00      	nop
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	2000a458 	.word	0x2000a458
 8006e5c:	2000a454 	.word	0x2000a454

08006e60 <st7735Init>:


bool st7735Init(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8006e66:	f000 f835 	bl	8006ed4 <st7735Reset>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]

  return ret;
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a0d      	ldr	r2, [pc, #52]	; (8006eb8 <st7735InitDriver+0x40>)
 8006e84:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a0c      	ldr	r2, [pc, #48]	; (8006ebc <st7735InitDriver+0x44>)
 8006e8a:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ec0 <st7735InitDriver+0x48>)
 8006e90:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <st7735InitDriver+0x4c>)
 8006e96:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0b      	ldr	r2, [pc, #44]	; (8006ec8 <st7735InitDriver+0x50>)
 8006e9c:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <st7735InitDriver+0x54>)
 8006ea2:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a0a      	ldr	r2, [pc, #40]	; (8006ed0 <st7735InitDriver+0x58>)
 8006ea8:	619a      	str	r2, [r3, #24]
  return true;
 8006eaa:	2301      	movs	r3, #1
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	08006e61 	.word	0x08006e61
 8006ebc:	08006ed5 	.word	0x08006ed5
 8006ec0:	08007199 	.word	0x08007199
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f5d 	.word	0x08006f5d
 8006ecc:	080073ed 	.word	0x080073ed
 8006ed0:	080073a1 	.word	0x080073a1

08006ed4 <st7735Reset>:

bool st7735Reset(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8006eda:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <st7735Reset+0x70>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fbca 	bl	8005678 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8006ee4:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <st7735Reset+0x70>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fc20 	bl	8005730 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8006ef0:	4b14      	ldr	r3, [pc, #80]	; (8006f44 <st7735Reset+0x70>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4914      	ldr	r1, [pc, #80]	; (8006f48 <st7735Reset+0x74>)
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fd52 	bl	80059a0 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006efc:	2100      	movs	r1, #0
 8006efe:	2001      	movs	r0, #1
 8006f00:	f7fc fa0a 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8006f04:	2101      	movs	r1, #1
 8006f06:	2003      	movs	r0, #3
 8006f08:	f7fc fa06 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	2002      	movs	r0, #2
 8006f10:	f7fc fa02 	bl	8003318 <gpioPinWrite>
  delay(10);
 8006f14:	200a      	movs	r0, #10
 8006f16:	f7fa f96d 	bl	80011f4 <delay>

  st7735InitRegs();
 8006f1a:	f000 f863 	bl	8006fe4 <st7735InitRegs>


  st7735SetRotation(1);
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f000 f910 	bl	8007144 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8006f24:	2300      	movs	r3, #0
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	2380      	movs	r3, #128	; 0x80
 8006f2a:	22a0      	movs	r2, #160	; 0xa0
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f000 f97e 	bl	8007230 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006f34:	2100      	movs	r1, #0
 8006f36:	2001      	movs	r0, #1
 8006f38:	f7fc f9ee 	bl	8003318 <gpioPinWrite>
  return true;
 8006f3c:	2301      	movs	r3, #1
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	2000a450 	.word	0x2000a450
 8006f48:	08006e29 	.word	0x08006e29

08006f4c <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8006f50:	23a0      	movs	r3, #160	; 0xa0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8006f60:	2380      	movs	r3, #128	; 0x80
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <writecommand>:

void writecommand(uint8_t c)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8006f76:	2100      	movs	r1, #0
 8006f78:	2003      	movs	r0, #3
 8006f7a:	f7fc f9cd 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	2002      	movs	r0, #2
 8006f82:	f7fc f9c9 	bl	8003318 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8006f86:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <writecommand+0x38>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	79fa      	ldrb	r2, [r7, #7]
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fc64 	bl	800585c <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006f94:	2101      	movs	r1, #1
 8006f96:	2002      	movs	r0, #2
 8006f98:	f7fc f9be 	bl	8003318 <gpioPinWrite>
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	2000a450 	.word	0x2000a450

08006fa8 <writedata>:

void writedata(uint8_t d)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	2003      	movs	r0, #3
 8006fb6:	f7fc f9af 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006fba:	2100      	movs	r1, #0
 8006fbc:	2002      	movs	r0, #2
 8006fbe:	f7fc f9ab 	bl	8003318 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8006fc2:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <writedata+0x38>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	79fa      	ldrb	r2, [r7, #7]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fc46 	bl	800585c <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	2002      	movs	r0, #2
 8006fd4:	f7fc f9a0 	bl	8003318 <gpioPinWrite>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	2000a450 	.word	0x2000a450

08006fe4 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8006fe8:	2001      	movs	r0, #1
 8006fea:	f7ff ffbf 	bl	8006f6c <writecommand>
  delay(10);
 8006fee:	200a      	movs	r0, #10
 8006ff0:	f7fa f900 	bl	80011f4 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8006ff4:	2011      	movs	r0, #17
 8006ff6:	f7ff ffb9 	bl	8006f6c <writecommand>
  delay(10);
 8006ffa:	200a      	movs	r0, #10
 8006ffc:	f7fa f8fa 	bl	80011f4 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8007000:	20b1      	movs	r0, #177	; 0xb1
 8007002:	f7ff ffb3 	bl	8006f6c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8007006:	2001      	movs	r0, #1
 8007008:	f7ff ffce 	bl	8006fa8 <writedata>
  writedata(0x2C);
 800700c:	202c      	movs	r0, #44	; 0x2c
 800700e:	f7ff ffcb 	bl	8006fa8 <writedata>
  writedata(0x2D);
 8007012:	202d      	movs	r0, #45	; 0x2d
 8007014:	f7ff ffc8 	bl	8006fa8 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8007018:	20b2      	movs	r0, #178	; 0xb2
 800701a:	f7ff ffa7 	bl	8006f6c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800701e:	2001      	movs	r0, #1
 8007020:	f7ff ffc2 	bl	8006fa8 <writedata>
  writedata(0x2C);
 8007024:	202c      	movs	r0, #44	; 0x2c
 8007026:	f7ff ffbf 	bl	8006fa8 <writedata>
  writedata(0x2D);
 800702a:	202d      	movs	r0, #45	; 0x2d
 800702c:	f7ff ffbc 	bl	8006fa8 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8007030:	20b3      	movs	r0, #179	; 0xb3
 8007032:	f7ff ff9b 	bl	8006f6c <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8007036:	2001      	movs	r0, #1
 8007038:	f7ff ffb6 	bl	8006fa8 <writedata>
  writedata(0x2C);
 800703c:	202c      	movs	r0, #44	; 0x2c
 800703e:	f7ff ffb3 	bl	8006fa8 <writedata>
  writedata(0x2D);
 8007042:	202d      	movs	r0, #45	; 0x2d
 8007044:	f7ff ffb0 	bl	8006fa8 <writedata>
  writedata(0x01);              //     Line inversion mode
 8007048:	2001      	movs	r0, #1
 800704a:	f7ff ffad 	bl	8006fa8 <writedata>
  writedata(0x2C);
 800704e:	202c      	movs	r0, #44	; 0x2c
 8007050:	f7ff ffaa 	bl	8006fa8 <writedata>
  writedata(0x2D);
 8007054:	202d      	movs	r0, #45	; 0x2d
 8007056:	f7ff ffa7 	bl	8006fa8 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 800705a:	20b4      	movs	r0, #180	; 0xb4
 800705c:	f7ff ff86 	bl	8006f6c <writecommand>
  writedata(0x07);              //     No inversion
 8007060:	2007      	movs	r0, #7
 8007062:	f7ff ffa1 	bl	8006fa8 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8007066:	20c0      	movs	r0, #192	; 0xc0
 8007068:	f7ff ff80 	bl	8006f6c <writecommand>
  writedata(0xA2);
 800706c:	20a2      	movs	r0, #162	; 0xa2
 800706e:	f7ff ff9b 	bl	8006fa8 <writedata>
  writedata(0x02);              //     -4.6V
 8007072:	2002      	movs	r0, #2
 8007074:	f7ff ff98 	bl	8006fa8 <writedata>
  writedata(0x84);              //     AUTO mode
 8007078:	2084      	movs	r0, #132	; 0x84
 800707a:	f7ff ff95 	bl	8006fa8 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 800707e:	20c1      	movs	r0, #193	; 0xc1
 8007080:	f7ff ff74 	bl	8006f6c <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8007084:	20c5      	movs	r0, #197	; 0xc5
 8007086:	f7ff ff8f 	bl	8006fa8 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 800708a:	20c2      	movs	r0, #194	; 0xc2
 800708c:	f7ff ff6e 	bl	8006f6c <writecommand>
  writedata(0x0A);              //     Opamp current small
 8007090:	200a      	movs	r0, #10
 8007092:	f7ff ff89 	bl	8006fa8 <writedata>
  writedata(0x00);              //     Boost frequency
 8007096:	2000      	movs	r0, #0
 8007098:	f7ff ff86 	bl	8006fa8 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 800709c:	20c3      	movs	r0, #195	; 0xc3
 800709e:	f7ff ff65 	bl	8006f6c <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80070a2:	208a      	movs	r0, #138	; 0x8a
 80070a4:	f7ff ff80 	bl	8006fa8 <writedata>
  writedata(0x2A);
 80070a8:	202a      	movs	r0, #42	; 0x2a
 80070aa:	f7ff ff7d 	bl	8006fa8 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80070ae:	20c4      	movs	r0, #196	; 0xc4
 80070b0:	f7ff ff5c 	bl	8006f6c <writecommand>
  writedata(0x8A);
 80070b4:	208a      	movs	r0, #138	; 0x8a
 80070b6:	f7ff ff77 	bl	8006fa8 <writedata>
  writedata(0xEE);
 80070ba:	20ee      	movs	r0, #238	; 0xee
 80070bc:	f7ff ff74 	bl	8006fa8 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 80070c0:	20c5      	movs	r0, #197	; 0xc5
 80070c2:	f7ff ff53 	bl	8006f6c <writecommand>
  writedata(0x0E);
 80070c6:	200e      	movs	r0, #14
 80070c8:	f7ff ff6e 	bl	8006fa8 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 80070cc:	2020      	movs	r0, #32
 80070ce:	f7ff ff4d 	bl	8006f6c <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 80070d2:	2036      	movs	r0, #54	; 0x36
 80070d4:	f7ff ff4a 	bl	8006f6c <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 80070d8:	20c8      	movs	r0, #200	; 0xc8
 80070da:	f7ff ff65 	bl	8006fa8 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 80070de:	203a      	movs	r0, #58	; 0x3a
 80070e0:	f7ff ff44 	bl	8006f6c <writecommand>
  writedata(0x05);              //     16-bit color
 80070e4:	2005      	movs	r0, #5
 80070e6:	f7ff ff5f 	bl	8006fa8 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 80070ea:	202a      	movs	r0, #42	; 0x2a
 80070ec:	f7ff ff3e 	bl	8006f6c <writecommand>
  writedata(0x00);
 80070f0:	2000      	movs	r0, #0
 80070f2:	f7ff ff59 	bl	8006fa8 <writedata>
  writedata(0x00);              //     XSTART = 0
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7ff ff56 	bl	8006fa8 <writedata>
  writedata(0x00);
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7ff ff53 	bl	8006fa8 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8007102:	209f      	movs	r0, #159	; 0x9f
 8007104:	f7ff ff50 	bl	8006fa8 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8007108:	202b      	movs	r0, #43	; 0x2b
 800710a:	f7ff ff2f 	bl	8006f6c <writecommand>
  writedata(0x00);
 800710e:	2000      	movs	r0, #0
 8007110:	f7ff ff4a 	bl	8006fa8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8007114:	2000      	movs	r0, #0
 8007116:	f7ff ff47 	bl	8006fa8 <writedata>
  writedata(0x00);
 800711a:	2000      	movs	r0, #0
 800711c:	f7ff ff44 	bl	8006fa8 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8007120:	207f      	movs	r0, #127	; 0x7f
 8007122:	f7ff ff41 	bl	8006fa8 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8007126:	2013      	movs	r0, #19
 8007128:	f7ff ff20 	bl	8006f6c <writecommand>
  delay(10);
 800712c:	200a      	movs	r0, #10
 800712e:	f7fa f861 	bl	80011f4 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8007132:	2029      	movs	r0, #41	; 0x29
 8007134:	f7ff ff1a 	bl	8006f6c <writecommand>
  delay(10);
 8007138:	200a      	movs	r0, #10
 800713a:	f7fa f85b 	bl	80011f4 <delay>
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 800714e:	2036      	movs	r0, #54	; 0x36
 8007150:	f7ff ff0c 	bl	8006f6c <writecommand>

  switch (mode)
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d81a      	bhi.n	8007190 <st7735SetRotation+0x4c>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <st7735SetRotation+0x1c>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	08007179 	.word	0x08007179
 8007168:	08007181 	.word	0x08007181
 800716c:	08007189 	.word	0x08007189
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8007170:	20c8      	movs	r0, #200	; 0xc8
 8007172:	f7ff ff19 	bl	8006fa8 <writedata>
     break;
 8007176:	e00b      	b.n	8007190 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8007178:	20a8      	movs	r0, #168	; 0xa8
 800717a:	f7ff ff15 	bl	8006fa8 <writedata>
     break;
 800717e:	e007      	b.n	8007190 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8007180:	2008      	movs	r0, #8
 8007182:	f7ff ff11 	bl	8006fa8 <writedata>
    break;
 8007186:	e003      	b.n	8007190 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8007188:	2068      	movs	r0, #104	; 0x68
 800718a:	f7ff ff0d 	bl	8006fa8 <writedata>
     break;
 800718e:	bf00      	nop
  }
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80071a6:	4b21      	ldr	r3, [pc, #132]	; (800722c <st7735SetWindow+0x94>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2108      	movs	r1, #8
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fb25 	bl	80057fc <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 80071b2:	202a      	movs	r0, #42	; 0x2a
 80071b4:	f7ff feda 	bl	8006f6c <writecommand>
  writedata(0x00);
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7ff fef5 	bl	8006fa8 <writedata>
  writedata(x0+colstart);     // XSTART
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	2300      	movs	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff feec 	bl	8006fa8 <writedata>
  writedata(0x00);
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7ff fee9 	bl	8006fa8 <writedata>
  writedata(x1+colstart);     // XEND
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	2300      	movs	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4413      	add	r3, r2
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fee0 	bl	8006fa8 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 80071e8:	202b      	movs	r0, #43	; 0x2b
 80071ea:	f7ff febf 	bl	8006f6c <writecommand>
  writedata(0x00);
 80071ee:	2000      	movs	r0, #0
 80071f0:	f7ff feda 	bl	8006fa8 <writedata>
  writedata(y0+rowstart);     // YSTART
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fed1 	bl	8006fa8 <writedata>
  writedata(0x00);
 8007206:	2000      	movs	r0, #0
 8007208:	f7ff fece 	bl	8006fa8 <writedata>
  writedata(y1+rowstart);     // YEND
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	2300      	movs	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	4413      	add	r3, r2
 8007216:	b2db      	uxtb	r3, r3
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fec5 	bl	8006fa8 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800721e:	202c      	movs	r0, #44	; 0x2c
 8007220:	f7ff fea4 	bl	8006f6c <writecommand>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2000a450 	.word	0x2000a450

08007230 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	466b      	mov	r3, sp
 8007240:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	1e43      	subs	r3, r0, #1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	4603      	mov	r3, r0
 800724a:	4619      	mov	r1, r3
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	f04f 0400 	mov.w	r4, #0
 8007258:	0114      	lsls	r4, r2, #4
 800725a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800725e:	010b      	lsls	r3, r1, #4
 8007260:	4603      	mov	r3, r0
 8007262:	4619      	mov	r1, r3
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	0114      	lsls	r4, r2, #4
 8007272:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8007276:	010b      	lsls	r3, r1, #4
 8007278:	4603      	mov	r3, r0
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	3301      	adds	r3, #1
 800727e:	3307      	adds	r3, #7
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	ebad 0d03 	sub.w	sp, sp, r3
 8007288:	466b      	mov	r3, sp
 800728a:	3301      	adds	r3, #1
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 8007292:	22a0      	movs	r2, #160	; 0xa0
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4293      	cmp	r3, r2
 8007298:	da78      	bge.n	800738c <st7735FillRect+0x15c>
 800729a:	2280      	movs	r2, #128	; 0x80
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4293      	cmp	r3, r2
 80072a0:	da74      	bge.n	800738c <st7735FillRect+0x15c>

  if (x < 0) { w += x; x = 0; }
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da05      	bge.n	80072b4 <st7735FillRect+0x84>
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	2300      	movs	r3, #0
 80072b2:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da05      	bge.n	80072c6 <st7735FillRect+0x96>
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4413      	add	r3, r2
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4413      	add	r3, r2
 80072cc:	22a0      	movs	r2, #160	; 0xa0
 80072ce:	4293      	cmp	r3, r2
 80072d0:	dd03      	ble.n	80072da <st7735FillRect+0xaa>
 80072d2:	22a0      	movs	r2, #160	; 0xa0
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	2280      	movs	r2, #128	; 0x80
 80072e2:	4293      	cmp	r3, r2
 80072e4:	dd03      	ble.n	80072ee <st7735FillRect+0xbe>
 80072e6:	2280      	movs	r2, #128	; 0x80
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dd4d      	ble.n	8007390 <st7735FillRect+0x160>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dd4a      	ble.n	8007390 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	1e59      	subs	r1, r3, #1
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4413      	add	r3, r2
 8007308:	3b01      	subs	r3, #1
 800730a:	460a      	mov	r2, r1
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff42 	bl	8007198 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8007314:	4b21      	ldr	r3, [pc, #132]	; (800739c <st7735FillRect+0x16c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2110      	movs	r1, #16
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fa6e 	bl	80057fc <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8007320:	2101      	movs	r1, #1
 8007322:	2003      	movs	r0, #3
 8007324:	f7fb fff8 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8007328:	2100      	movs	r1, #0
 800732a:	2002      	movs	r0, #2
 800732c:	f7fb fff4 	bl	8003318 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e008      	b.n	8007348 <st7735FillRect+0x118>
  {
    line_buf[i] = color;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	b299      	uxth	r1, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	3301      	adds	r3, #1
 8007346:	61fb      	str	r3, [r7, #28]
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	429a      	cmp	r2, r3
 800734e:	dbf2      	blt.n	8007336 <st7735FillRect+0x106>
  }
  for (int i=0; i<h; i++)
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	e00e      	b.n	8007374 <st7735FillRect+0x144>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8007356:	6939      	ldr	r1, [r7, #16]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	230a      	movs	r3, #10
 800735c:	2000      	movs	r0, #0
 800735e:	f7fe facf 	bl	8005900 <spiDmaTxTransfer>
 8007362:	4603      	mov	r3, r0
 8007364:	f083 0301 	eor.w	r3, r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <st7735FillRect+0x14e>
  for (int i=0; i<h; i++)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	3301      	adds	r3, #1
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	dbec      	blt.n	8007356 <st7735FillRect+0x126>
 800737c:	e000      	b.n	8007380 <st7735FillRect+0x150>
    {
      break;
 800737e:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8007380:	2101      	movs	r1, #1
 8007382:	2002      	movs	r0, #2
 8007384:	f7fb ffc8 	bl	8003318 <gpioPinWrite>
 8007388:	46ad      	mov	sp, r5
 800738a:	e003      	b.n	8007394 <st7735FillRect+0x164>
  if ((x >= _width) || (y >= _height)) return;
 800738c:	bf00      	nop
 800738e:	e000      	b.n	8007392 <st7735FillRect+0x162>
  if ((w < 1) || (h < 1)) return;
 8007390:	bf00      	nop
 8007392:	46ad      	mov	sp, r5
}
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bdb0      	pop	{r4, r5, r7, pc}
 800739a:	bf00      	nop
 800739c:	2000a450 	.word	0x2000a450

080073a0 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <st7735SendBuffer+0x44>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <st7735SendBuffer+0x48>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2110      	movs	r1, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fa1f 	bl	80057fc <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80073be:	2101      	movs	r1, #1
 80073c0:	2003      	movs	r0, #3
 80073c2:	f7fb ffa9 	bl	8003318 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80073c6:	2100      	movs	r1, #0
 80073c8:	2002      	movs	r0, #2
 80073ca:	f7fb ffa5 	bl	8003318 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 80073ce:	2300      	movs	r3, #0
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	2000      	movs	r0, #0
 80073d6:	f7fe fa93 	bl	8005900 <spiDmaTxTransfer>
  return true;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	2000a458 	.word	0x2000a458
 80073e8:	2000a450 	.word	0x2000a450

080073ec <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 80073f4:	4a04      	ldr	r2, [pc, #16]	; (8007408 <st7735SetCallBack+0x1c>)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6013      	str	r3, [r2, #0]

  return true;
 80073fa:	2301      	movs	r3, #1
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	2000a454 	.word	0x2000a454

0800740c <hwInit>:




void hwInit(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  bspInit();
 8007410:	f7f9 fec6 	bl	80011a0 <bspInit>

  cliInit();
 8007414:	f7fa fa4a 	bl	80018ac <cliInit>
  ledInit();
 8007418:	f7fc ff5c 	bl	80042d4 <ledInit>
  uartInit();
 800741c:	f7fe fe14 	bl	8006048 <uartInit>
  spiInit();
 8007420:	f7fe f8d8 	bl	80055d4 <spiInit>
  DWT_Delay_Init();
 8007424:	f7fa f90a 	bl	800163c <DWT_Delay_Init>
  buttonInit();
 8007428:	f7fa f938 	bl	800169c <buttonInit>
  gpioInit();
 800742c:	f7fb feaa 	bl	8003184 <gpioInit>
  Ds18b20_Init();
 8007430:	f7fb f984 	bl	800273c <Ds18b20_Init>
  sonarInit();
 8007434:	f7fd fefa 	bl	800522c <sonarInit>

  //LCD_INIT();
  lcdInit();
 8007438:	f7fc f8d2 	bl	80035e0 <lcdInit>
  tdsInit();
 800743c:	f7fe fbc6 	bl	8005bcc <tdsInit>

  if (sdInit() == true)
 8007440:	f7fd fb0a 	bl	8004a58 <sdInit>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <hwInit+0x42>
  {
    fatfsInit();
 800744a:	f7fb fcc3 	bl	8002dd4 <fatfsInit>
  }
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	4a08      	ldr	r2, [pc, #32]	; (8007484 <disk_status+0x30>)
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	79fa      	ldrb	r2, [r7, #7]
 800746c:	4905      	ldr	r1, [pc, #20]	; (8007484 <disk_status+0x30>)
 800746e:	440a      	add	r2, r1
 8007470:	7b12      	ldrb	r2, [r2, #12]
 8007472:	4610      	mov	r0, r2
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
  return stat;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	2000a488 	.word	0x2000a488

08007488 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <disk_initialize+0x48>)
 800749a:	5cd3      	ldrb	r3, [r2, r3]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	4a0b      	ldr	r2, [pc, #44]	; (80074d0 <disk_initialize+0x48>)
 80074a4:	2101      	movs	r1, #1
 80074a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <disk_initialize+0x48>)
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	79fa      	ldrb	r2, [r7, #7]
 80074b6:	4906      	ldr	r1, [pc, #24]	; (80074d0 <disk_initialize+0x48>)
 80074b8:	440a      	add	r2, r1
 80074ba:	7b12      	ldrb	r2, [r2, #12]
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	2000a488 	.word	0x2000a488

080074d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <disk_read+0x3c>)
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	689c      	ldr	r4, [r3, #8]
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4a07      	ldr	r2, [pc, #28]	; (8007510 <disk_read+0x3c>)
 80074f4:	4413      	add	r3, r2
 80074f6:	7b18      	ldrb	r0, [r3, #12]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	47a0      	blx	r4
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
  return res;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
}
 8007506:	4618      	mov	r0, r3
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd90      	pop	{r4, r7, pc}
 800750e:	bf00      	nop
 8007510:	2000a488 	.word	0x2000a488

08007514 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4a0a      	ldr	r2, [pc, #40]	; (8007550 <disk_write+0x3c>)
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	68dc      	ldr	r4, [r3, #12]
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4a07      	ldr	r2, [pc, #28]	; (8007550 <disk_write+0x3c>)
 8007534:	4413      	add	r3, r2
 8007536:	7b18      	ldrb	r0, [r3, #12]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	47a0      	blx	r4
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]
  return res;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
}
 8007546:	4618      	mov	r0, r3
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	bd90      	pop	{r4, r7, pc}
 800754e:	bf00      	nop
 8007550:	2000a488 	.word	0x2000a488

08007554 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	603a      	str	r2, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
 8007560:	460b      	mov	r3, r1
 8007562:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	4a09      	ldr	r2, [pc, #36]	; (800758c <disk_ioctl+0x38>)
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	79fa      	ldrb	r2, [r7, #7]
 8007572:	4906      	ldr	r1, [pc, #24]	; (800758c <disk_ioctl+0x38>)
 8007574:	440a      	add	r2, r1
 8007576:	7b10      	ldrb	r0, [r2, #12]
 8007578:	79b9      	ldrb	r1, [r7, #6]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4798      	blx	r3
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
  return res;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000a488 	.word	0x2000a488

08007590 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return 0;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3301      	adds	r3, #1
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075b0:	89fb      	ldrh	r3, [r7, #14]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	b21a      	sxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b21b      	sxth	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	b21b      	sxth	r3, r3
 80075c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075c2:	89fb      	ldrh	r3, [r7, #14]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3303      	adds	r3, #3
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	3202      	adds	r2, #2
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	3201      	adds	r2, #1
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7812      	ldrb	r2, [r2, #0]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	return rv;
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	887a      	ldrh	r2, [r7, #2]
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	887b      	ldrh	r3, [r7, #2]
 8007630:	0a1b      	lsrs	r3, r3, #8
 8007632:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	0a1b      	lsrs	r3, r3, #8
 800768a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00d      	beq.n	80076da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	1c53      	adds	r3, r2, #1
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1c59      	adds	r1, r3, #1
 80076c8:	6179      	str	r1, [r7, #20]
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f1      	bne.n	80076be <mem_cpy+0x1a>
	}
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076e6:	b480      	push	{r7}
 80076e8:	b087      	sub	sp, #28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	617a      	str	r2, [r7, #20]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3b01      	subs	r3, #1
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f3      	bne.n	80076f6 <mem_set+0x10>
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800771a:	b480      	push	{r7}
 800771c:	b089      	sub	sp, #36	; 0x24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	61fa      	str	r2, [r7, #28]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	61ba      	str	r2, [r7, #24]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	1acb      	subs	r3, r1, r3
 8007746:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3b01      	subs	r3, #1
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <mem_cmp+0x40>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0eb      	beq.n	8007732 <mem_cmp+0x18>

	return r;
 800775a:	697b      	ldr	r3, [r7, #20]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3724      	adds	r7, #36	; 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007772:	e002      	b.n	800777a <chk_chr+0x12>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <chk_chr+0x26>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	4293      	cmp	r3, r2
 800778c:	d1f2      	bne.n	8007774 <chk_chr+0xc>
	return *str;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	781b      	ldrb	r3, [r3, #0]
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	e029      	b.n	8007808 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077b4:	4a27      	ldr	r2, [pc, #156]	; (8007854 <chk_lock+0xb4>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	4413      	add	r3, r2
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01d      	beq.n	80077fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077c2:	4a24      	ldr	r2, [pc, #144]	; (8007854 <chk_lock+0xb4>)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	4413      	add	r3, r2
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d116      	bne.n	8007802 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077d4:	4a1f      	ldr	r2, [pc, #124]	; (8007854 <chk_lock+0xb4>)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	4413      	add	r3, r2
 80077dc:	3304      	adds	r3, #4
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d10c      	bne.n	8007802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077e8:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <chk_lock+0xb4>)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4413      	add	r3, r2
 80077f0:	3308      	adds	r3, #8
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d102      	bne.n	8007802 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077fc:	e007      	b.n	800780e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d9d2      	bls.n	80077b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d109      	bne.n	8007828 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <chk_lock+0x80>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d101      	bne.n	8007824 <chk_lock+0x84>
 8007820:	2300      	movs	r3, #0
 8007822:	e010      	b.n	8007846 <chk_lock+0xa6>
 8007824:	2312      	movs	r3, #18
 8007826:	e00e      	b.n	8007846 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d108      	bne.n	8007840 <chk_lock+0xa0>
 800782e:	4a09      	ldr	r2, [pc, #36]	; (8007854 <chk_lock+0xb4>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	4413      	add	r3, r2
 8007836:	330c      	adds	r3, #12
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783e:	d101      	bne.n	8007844 <chk_lock+0xa4>
 8007840:	2310      	movs	r3, #16
 8007842:	e000      	b.n	8007846 <chk_lock+0xa6>
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	2000a468 	.word	0x2000a468

08007858 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800785e:	2300      	movs	r3, #0
 8007860:	607b      	str	r3, [r7, #4]
 8007862:	e002      	b.n	800786a <enq_lock+0x12>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3301      	adds	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d806      	bhi.n	800787e <enq_lock+0x26>
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <enq_lock+0x40>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	4413      	add	r3, r2
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f2      	bne.n	8007864 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b02      	cmp	r3, #2
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	2000a468 	.word	0x2000a468

0800789c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e01f      	b.n	80078ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078ac:	4a41      	ldr	r2, [pc, #260]	; (80079b4 <inc_lock+0x118>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4413      	add	r3, r2
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d113      	bne.n	80078e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078be:	4a3d      	ldr	r2, [pc, #244]	; (80079b4 <inc_lock+0x118>)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d109      	bne.n	80078e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078d2:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <inc_lock+0x118>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	4413      	add	r3, r2
 80078da:	3308      	adds	r3, #8
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d006      	beq.n	80078f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d9dc      	bls.n	80078ac <inc_lock+0x10>
 80078f2:	e000      	b.n	80078f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80078f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d132      	bne.n	8007962 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e002      	b.n	8007908 <inc_lock+0x6c>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d806      	bhi.n	800791c <inc_lock+0x80>
 800790e:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <inc_lock+0x118>)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	4413      	add	r3, r2
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f2      	bne.n	8007902 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d101      	bne.n	8007926 <inc_lock+0x8a>
 8007922:	2300      	movs	r3, #0
 8007924:	e040      	b.n	80079a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4922      	ldr	r1, [pc, #136]	; (80079b4 <inc_lock+0x118>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	440b      	add	r3, r1
 8007932:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	491e      	ldr	r1, [pc, #120]	; (80079b4 <inc_lock+0x118>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	440b      	add	r3, r1
 8007940:	3304      	adds	r3, #4
 8007942:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	491a      	ldr	r1, [pc, #104]	; (80079b4 <inc_lock+0x118>)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	440b      	add	r3, r1
 8007950:	3308      	adds	r3, #8
 8007952:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007954:	4a17      	ldr	r2, [pc, #92]	; (80079b4 <inc_lock+0x118>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	4413      	add	r3, r2
 800795c:	330c      	adds	r3, #12
 800795e:	2200      	movs	r2, #0
 8007960:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <inc_lock+0xe0>
 8007968:	4a12      	ldr	r2, [pc, #72]	; (80079b4 <inc_lock+0x118>)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	4413      	add	r3, r2
 8007970:	330c      	adds	r3, #12
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <inc_lock+0xe0>
 8007978:	2300      	movs	r3, #0
 800797a:	e015      	b.n	80079a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <inc_lock+0xf8>
 8007982:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <inc_lock+0x118>)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	330c      	adds	r3, #12
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	e001      	b.n	8007998 <inc_lock+0xfc>
 8007994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007998:	4906      	ldr	r1, [pc, #24]	; (80079b4 <inc_lock+0x118>)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	440b      	add	r3, r1
 80079a0:	330c      	adds	r3, #12
 80079a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	2000a468 	.word	0x2000a468

080079b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d825      	bhi.n	8007a18 <dec_lock+0x60>
		n = Files[i].ctr;
 80079cc:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <dec_lock+0x74>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	4413      	add	r3, r2
 80079d4:	330c      	adds	r3, #12
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079da:	89fb      	ldrh	r3, [r7, #14]
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e0:	d101      	bne.n	80079e6 <dec_lock+0x2e>
 80079e2:	2300      	movs	r3, #0
 80079e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80079e6:	89fb      	ldrh	r3, [r7, #14]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <dec_lock+0x3a>
 80079ec:	89fb      	ldrh	r3, [r7, #14]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80079f2:	4a0e      	ldr	r2, [pc, #56]	; (8007a2c <dec_lock+0x74>)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	4413      	add	r3, r2
 80079fa:	330c      	adds	r3, #12
 80079fc:	89fa      	ldrh	r2, [r7, #14]
 80079fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <dec_lock+0x5a>
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <dec_lock+0x74>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	737b      	strb	r3, [r7, #13]
 8007a16:	e001      	b.n	8007a1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a18:	2302      	movs	r3, #2
 8007a1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	2000a468 	.word	0x2000a468

08007a30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e010      	b.n	8007a60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a3e:	4a0d      	ldr	r2, [pc, #52]	; (8007a74 <clear_lock+0x44>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	4413      	add	r3, r2
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d105      	bne.n	8007a5a <clear_lock+0x2a>
 8007a4e:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <clear_lock+0x44>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d9eb      	bls.n	8007a3e <clear_lock+0xe>
	}
}
 8007a66:	bf00      	nop
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000a468 	.word	0x2000a468

08007a78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	78db      	ldrb	r3, [r3, #3]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d034      	beq.n	8007af6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7858      	ldrb	r0, [r3, #1]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	f7ff fd38 	bl	8007514 <disk_write>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	e022      	b.n	8007af6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	1ad2      	subs	r2, r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d217      	bcs.n	8007af6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	789b      	ldrb	r3, [r3, #2]
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	e010      	b.n	8007af0 <sync_window+0x78>
					wsect += fs->fsize;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	7858      	ldrb	r0, [r3, #1]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	f7ff fd15 	bl	8007514 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d8eb      	bhi.n	8007ace <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d01b      	beq.n	8007b50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff ffad 	bl	8007a78 <sync_window>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d113      	bne.n	8007b50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7858      	ldrb	r0, [r3, #1]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b32:	2301      	movs	r3, #1
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	f7ff fccd 	bl	80074d4 <disk_read>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
 8007b44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff ff87 	bl	8007a78 <sync_window>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d158      	bne.n	8007c26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d148      	bne.n	8007c0e <sync_fs+0xb2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d144      	bne.n	8007c0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3334      	adds	r3, #52	; 0x34
 8007b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fda9 	bl	80076e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3334      	adds	r3, #52	; 0x34
 8007b98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fd38 	bl	8007616 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3334      	adds	r3, #52	; 0x34
 8007baa:	4921      	ldr	r1, [pc, #132]	; (8007c30 <sync_fs+0xd4>)
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fd4d 	bl	800764c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3334      	adds	r3, #52	; 0x34
 8007bb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bba:	491e      	ldr	r1, [pc, #120]	; (8007c34 <sync_fs+0xd8>)
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fd45 	bl	800764c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3334      	adds	r3, #52	; 0x34
 8007bc6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7ff fd3b 	bl	800764c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3334      	adds	r3, #52	; 0x34
 8007bda:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7ff fd31 	bl	800764c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7858      	ldrb	r0, [r3, #1]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c02:	2301      	movs	r3, #1
 8007c04:	f7ff fc86 	bl	8007514 <disk_write>
			fs->fsi_flag = 0;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fc9c 	bl	8007554 <disk_ioctl>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <sync_fs+0xca>
 8007c22:	2301      	movs	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	41615252 	.word	0x41615252
 8007c34:	61417272 	.word	0x61417272

08007c38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	3b02      	subs	r3, #2
 8007c46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	3b02      	subs	r3, #2
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d301      	bcc.n	8007c58 <clust2sect+0x20>
 8007c54:	2300      	movs	r3, #0
 8007c56:	e008      	b.n	8007c6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	fb03 f202 	mul.w	r2, r3, r2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	4413      	add	r3, r2
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b086      	sub	sp, #24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d904      	bls.n	8007c96 <get_fat+0x20>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d302      	bcc.n	8007c9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007c96:	2301      	movs	r3, #1
 8007c98:	617b      	str	r3, [r7, #20]
 8007c9a:	e08c      	b.n	8007db6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d045      	beq.n	8007d36 <get_fat+0xc0>
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d05d      	beq.n	8007d6a <get_fat+0xf4>
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d177      	bne.n	8007da2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	0a5b      	lsrs	r3, r3, #9
 8007cc8:	4413      	add	r3, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6938      	ldr	r0, [r7, #16]
 8007cce:	f7ff ff17 	bl	8007b00 <move_window>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d167      	bne.n	8007da8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	1c5a      	adds	r2, r3, #1
 8007cdc:	60fa      	str	r2, [r7, #12]
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cea:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	0a5b      	lsrs	r3, r3, #9
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6938      	ldr	r0, [r7, #16]
 8007cfa:	f7ff ff01 	bl	8007b00 <move_window>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d153      	bne.n	8007dac <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	461a      	mov	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <get_fat+0xb6>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	e002      	b.n	8007d32 <get_fat+0xbc>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d32:	617b      	str	r3, [r7, #20]
			break;
 8007d34:	e03f      	b.n	8007db6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	0a1b      	lsrs	r3, r3, #8
 8007d3e:	4413      	add	r3, r2
 8007d40:	4619      	mov	r1, r3
 8007d42:	6938      	ldr	r0, [r7, #16]
 8007d44:	f7ff fedc 	bl	8007b00 <move_window>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d130      	bne.n	8007db0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d5c:	4413      	add	r3, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fc1e 	bl	80075a0 <ld_word>
 8007d64:	4603      	mov	r3, r0
 8007d66:	617b      	str	r3, [r7, #20]
			break;
 8007d68:	e025      	b.n	8007db6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	09db      	lsrs	r3, r3, #7
 8007d72:	4413      	add	r3, r2
 8007d74:	4619      	mov	r1, r3
 8007d76:	6938      	ldr	r0, [r7, #16]
 8007d78:	f7ff fec2 	bl	8007b00 <move_window>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d118      	bne.n	8007db4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007d90:	4413      	add	r3, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fc1c 	bl	80075d0 <ld_dword>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d9e:	617b      	str	r3, [r7, #20]
			break;
 8007da0:	e009      	b.n	8007db6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007da2:	2301      	movs	r3, #1
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	e006      	b.n	8007db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007da8:	bf00      	nop
 8007daa:	e004      	b.n	8007db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dac:	bf00      	nop
 8007dae:	e002      	b.n	8007db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007db4:	bf00      	nop
		}
	}

	return val;
 8007db6:	697b      	ldr	r3, [r7, #20]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007dc0:	b590      	push	{r4, r7, lr}
 8007dc2:	b089      	sub	sp, #36	; 0x24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	f240 80d6 	bls.w	8007f84 <put_fat+0x1c4>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	f080 80d0 	bcs.w	8007f84 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d073      	beq.n	8007ed4 <put_fat+0x114>
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	f000 8091 	beq.w	8007f14 <put_fat+0x154>
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	f040 80c6 	bne.w	8007f84 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	61bb      	str	r3, [r7, #24]
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4413      	add	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	0a5b      	lsrs	r3, r3, #9
 8007e0e:	4413      	add	r3, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fe74 	bl	8007b00 <move_window>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e1c:	7ffb      	ldrb	r3, [r7, #31]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f040 80a9 	bne.w	8007f76 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	1c59      	adds	r1, r3, #1
 8007e2e:	61b9      	str	r1, [r7, #24]
 8007e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e34:	4413      	add	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <put_fat+0x9e>
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	f003 030f 	and.w	r3, r3, #15
 8007e4c:	b25a      	sxtb	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	b25b      	sxtb	r3, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	e001      	b.n	8007e62 <put_fat+0xa2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	0a5b      	lsrs	r3, r3, #9
 8007e74:	4413      	add	r3, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff fe41 	bl	8007b00 <move_window>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e82:	7ffb      	ldrb	r3, [r7, #31]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d178      	bne.n	8007f7a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	4413      	add	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <put_fat+0xea>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	091b      	lsrs	r3, r3, #4
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	e00e      	b.n	8007ec8 <put_fat+0x108>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	f023 030f 	bic.w	r3, r3, #15
 8007eb4:	b25a      	sxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	b25b      	sxtb	r3, r3
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	b25b      	sxtb	r3, r3
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	70da      	strb	r2, [r3, #3]
			break;
 8007ed2:	e057      	b.n	8007f84 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	4413      	add	r3, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff fe0d 	bl	8007b00 <move_window>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d146      	bne.n	8007f7e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007efe:	4413      	add	r3, r2
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	b292      	uxth	r2, r2
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fb85 	bl	8007616 <st_word>
			fs->wflag = 1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	70da      	strb	r2, [r3, #3]
			break;
 8007f12:	e037      	b.n	8007f84 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	09db      	lsrs	r3, r3, #7
 8007f1c:	4413      	add	r3, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fded 	bl	8007b00 <move_window>
 8007f26:	4603      	mov	r3, r0
 8007f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f2a:	7ffb      	ldrb	r3, [r7, #31]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d128      	bne.n	8007f82 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f44:	4413      	add	r3, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fb42 	bl	80075d0 <ld_dword>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f52:	4323      	orrs	r3, r4
 8007f54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f64:	4413      	add	r3, r2
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff fb6f 	bl	800764c <st_dword>
			fs->wflag = 1;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	70da      	strb	r2, [r3, #3]
			break;
 8007f74:	e006      	b.n	8007f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007f76:	bf00      	nop
 8007f78:	e004      	b.n	8007f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007f7a:	bf00      	nop
 8007f7c:	e002      	b.n	8007f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007f7e:	bf00      	nop
 8007f80:	e000      	b.n	8007f84 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007f82:	bf00      	nop
		}
	}
	return res;
 8007f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3724      	adds	r7, #36	; 0x24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd90      	pop	{r4, r7, pc}

08007f8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b088      	sub	sp, #32
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d904      	bls.n	8007fb4 <remove_chain+0x26>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d301      	bcc.n	8007fb8 <remove_chain+0x2a>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e04b      	b.n	8008050 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	69b8      	ldr	r0, [r7, #24]
 8007fc6:	f7ff fefb 	bl	8007dc0 <put_fat>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007fce:	7ffb      	ldrb	r3, [r7, #31]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <remove_chain+0x4a>
 8007fd4:	7ffb      	ldrb	r3, [r7, #31]
 8007fd6:	e03b      	b.n	8008050 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fe4b 	bl	8007c76 <get_fat>
 8007fe0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d031      	beq.n	800804c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <remove_chain+0x64>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e02e      	b.n	8008050 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d101      	bne.n	8007ffe <remove_chain+0x70>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e028      	b.n	8008050 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ffe:	2200      	movs	r2, #0
 8008000:	68b9      	ldr	r1, [r7, #8]
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f7ff fedc 	bl	8007dc0 <put_fat>
 8008008:	4603      	mov	r3, r0
 800800a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800800c:	7ffb      	ldrb	r3, [r7, #31]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <remove_chain+0x88>
 8008012:	7ffb      	ldrb	r3, [r7, #31]
 8008014:	e01c      	b.n	8008050 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	3b02      	subs	r3, #2
 8008020:	429a      	cmp	r2, r3
 8008022:	d20b      	bcs.n	800803c <remove_chain+0xae>
			fs->free_clst++;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	b2da      	uxtb	r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	d3c6      	bcc.n	8007fd8 <remove_chain+0x4a>
 800804a:	e000      	b.n	800804e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800804c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10d      	bne.n	800808a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <create_chain+0x2c>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	429a      	cmp	r2, r3
 8008082:	d31b      	bcc.n	80080bc <create_chain+0x64>
 8008084:	2301      	movs	r3, #1
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e018      	b.n	80080bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fdf2 	bl	8007c76 <get_fat>
 8008092:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d801      	bhi.n	800809e <create_chain+0x46>
 800809a:	2301      	movs	r3, #1
 800809c:	e070      	b.n	8008180 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a4:	d101      	bne.n	80080aa <create_chain+0x52>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e06a      	b.n	8008180 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d201      	bcs.n	80080b8 <create_chain+0x60>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	e063      	b.n	8008180 <create_chain+0x128>
		scl = clst;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	3301      	adds	r3, #1
 80080c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d307      	bcc.n	80080e0 <create_chain+0x88>
				ncl = 2;
 80080d0:	2302      	movs	r3, #2
 80080d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d901      	bls.n	80080e0 <create_chain+0x88>
 80080dc:	2300      	movs	r3, #0
 80080de:	e04f      	b.n	8008180 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80080e0:	69f9      	ldr	r1, [r7, #28]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fdc7 	bl	8007c76 <get_fat>
 80080e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00e      	beq.n	800810e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d003      	beq.n	80080fe <create_chain+0xa6>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fc:	d101      	bne.n	8008102 <create_chain+0xaa>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	e03e      	b.n	8008180 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	429a      	cmp	r2, r3
 8008108:	d1da      	bne.n	80080c0 <create_chain+0x68>
 800810a:	2300      	movs	r3, #0
 800810c:	e038      	b.n	8008180 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800810e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	69f9      	ldr	r1, [r7, #28]
 8008116:	6938      	ldr	r0, [r7, #16]
 8008118:	f7ff fe52 	bl	8007dc0 <put_fat>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <create_chain+0xe2>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d006      	beq.n	800813a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800812c:	69fa      	ldr	r2, [r7, #28]
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6938      	ldr	r0, [r7, #16]
 8008132:	f7ff fe45 	bl	8007dc0 <put_fat>
 8008136:	4603      	mov	r3, r0
 8008138:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d116      	bne.n	800816e <create_chain+0x116>
		fs->last_clst = ncl;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	3b02      	subs	r3, #2
 8008150:	429a      	cmp	r2, r3
 8008152:	d804      	bhi.n	800815e <create_chain+0x106>
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	791b      	ldrb	r3, [r3, #4]
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	711a      	strb	r2, [r3, #4]
 800816c:	e007      	b.n	800817e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d102      	bne.n	800817a <create_chain+0x122>
 8008174:	f04f 33ff 	mov.w	r3, #4294967295
 8008178:	e000      	b.n	800817c <create_chain+0x124>
 800817a:	2301      	movs	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800817e:	69fb      	ldr	r3, [r7, #28]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	3304      	adds	r3, #4
 800819e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	0a5b      	lsrs	r3, r3, #9
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	8952      	ldrh	r2, [r2, #10]
 80081a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1d1a      	adds	r2, r3, #4
 80081b2:	613a      	str	r2, [r7, #16]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <clmt_clust+0x3a>
 80081be:	2300      	movs	r3, #0
 80081c0:	e010      	b.n	80081e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d307      	bcc.n	80081da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	3304      	adds	r3, #4
 80081d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081d8:	e7e9      	b.n	80081ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80081da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	4413      	add	r3, r2
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008206:	d204      	bcs.n	8008212 <dir_sdi+0x22>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008212:	2302      	movs	r3, #2
 8008214:	e063      	b.n	80082de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <dir_sdi+0x46>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d902      	bls.n	8008236 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10c      	bne.n	8008256 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	8912      	ldrh	r2, [r2, #8]
 8008244:	4293      	cmp	r3, r2
 8008246:	d301      	bcc.n	800824c <dir_sdi+0x5c>
 8008248:	2302      	movs	r3, #2
 800824a:	e048      	b.n	80082de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	61da      	str	r2, [r3, #28]
 8008254:	e029      	b.n	80082aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	895b      	ldrh	r3, [r3, #10]
 800825a:	025b      	lsls	r3, r3, #9
 800825c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800825e:	e019      	b.n	8008294 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6979      	ldr	r1, [r7, #20]
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff fd06 	bl	8007c76 <get_fat>
 800826a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	d101      	bne.n	8008278 <dir_sdi+0x88>
 8008274:	2301      	movs	r3, #1
 8008276:	e032      	b.n	80082de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d904      	bls.n	8008288 <dir_sdi+0x98>
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	429a      	cmp	r2, r3
 8008286:	d301      	bcc.n	800828c <dir_sdi+0x9c>
 8008288:	2302      	movs	r3, #2
 800828a:	e028      	b.n	80082de <dir_sdi+0xee>
			ofs -= csz;
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	429a      	cmp	r2, r3
 800829a:	d2e1      	bcs.n	8008260 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800829c:	6979      	ldr	r1, [r7, #20]
 800829e:	6938      	ldr	r0, [r7, #16]
 80082a0:	f7ff fcca 	bl	8007c38 <clust2sect>
 80082a4:	4602      	mov	r2, r0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <dir_sdi+0xcc>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e010      	b.n	80082de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	69da      	ldr	r2, [r3, #28]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	0a5b      	lsrs	r3, r3, #9
 80082c4:	441a      	add	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	441a      	add	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	3320      	adds	r3, #32
 80082fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <dir_next+0x28>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800830c:	d301      	bcc.n	8008312 <dir_next+0x2c>
 800830e:	2304      	movs	r3, #4
 8008310:	e0aa      	b.n	8008468 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 8098 	bne.w	800844e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10b      	bne.n	8008348 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	8912      	ldrh	r2, [r2, #8]
 8008338:	4293      	cmp	r3, r2
 800833a:	f0c0 8088 	bcc.w	800844e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	61da      	str	r2, [r3, #28]
 8008344:	2304      	movs	r3, #4
 8008346:	e08f      	b.n	8008468 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	0a5b      	lsrs	r3, r3, #9
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	8952      	ldrh	r2, [r2, #10]
 8008350:	3a01      	subs	r2, #1
 8008352:	4013      	ands	r3, r2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d17a      	bne.n	800844e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7ff fc88 	bl	8007c76 <get_fat>
 8008366:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d801      	bhi.n	8008372 <dir_next+0x8c>
 800836e:	2302      	movs	r3, #2
 8008370:	e07a      	b.n	8008468 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d101      	bne.n	800837e <dir_next+0x98>
 800837a:	2301      	movs	r3, #1
 800837c:	e074      	b.n	8008468 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d358      	bcc.n	800843a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	61da      	str	r2, [r3, #28]
 8008394:	2304      	movs	r3, #4
 8008396:	e067      	b.n	8008468 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f7ff fe59 	bl	8008058 <create_chain>
 80083a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <dir_next+0xcc>
 80083ae:	2307      	movs	r3, #7
 80083b0:	e05a      	b.n	8008468 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <dir_next+0xd6>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e055      	b.n	8008468 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d101      	bne.n	80083c8 <dir_next+0xe2>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e04f      	b.n	8008468 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff fb55 	bl	8007a78 <sync_window>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <dir_next+0xf2>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e047      	b.n	8008468 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3334      	adds	r3, #52	; 0x34
 80083dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083e0:	2100      	movs	r1, #0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff f97f 	bl	80076e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083e8:	2300      	movs	r3, #0
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	6979      	ldr	r1, [r7, #20]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7ff fc22 	bl	8007c38 <clust2sect>
 80083f4:	4602      	mov	r2, r0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30
 80083fa:	e012      	b.n	8008422 <dir_next+0x13c>
						fs->wflag = 1;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fb38 	bl	8007a78 <sync_window>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <dir_next+0x12c>
 800840e:	2301      	movs	r3, #1
 8008410:	e02a      	b.n	8008468 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3301      	adds	r3, #1
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	895b      	ldrh	r3, [r3, #10]
 8008426:	461a      	mov	r2, r3
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4293      	cmp	r3, r2
 800842c:	d3e6      	bcc.n	80083fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1ad2      	subs	r2, r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008440:	6979      	ldr	r1, [r7, #20]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7ff fbf8 	bl	8007c38 <clust2sect>
 8008448:	4602      	mov	r2, r0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008460:	441a      	add	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff feb4 	bl	80081f0 <dir_sdi>
 8008488:	4603      	mov	r3, r0
 800848a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d12b      	bne.n	80084ea <dir_alloc+0x7a>
		n = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	4619      	mov	r1, r3
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fb2f 	bl	8007b00 <move_window>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d11d      	bne.n	80084e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2be5      	cmp	r3, #229	; 0xe5
 80084b4:	d004      	beq.n	80084c0 <dir_alloc+0x50>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3301      	adds	r3, #1
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d102      	bne.n	80084d4 <dir_alloc+0x64>
 80084ce:	e00c      	b.n	80084ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80084d0:	2300      	movs	r3, #0
 80084d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80084d4:	2101      	movs	r1, #1
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff ff05 	bl	80082e6 <dir_next>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0d7      	beq.n	8008496 <dir_alloc+0x26>
 80084e6:	e000      	b.n	80084ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80084e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d101      	bne.n	80084f4 <dir_alloc+0x84>
 80084f0:	2307      	movs	r3, #7
 80084f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	331a      	adds	r3, #26
 800850c:	4618      	mov	r0, r3
 800850e:	f7ff f847 	bl	80075a0 <ld_word>
 8008512:	4603      	mov	r3, r0
 8008514:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b03      	cmp	r3, #3
 800851c:	d109      	bne.n	8008532 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	3314      	adds	r3, #20
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff f83c 	bl	80075a0 <ld_word>
 8008528:	4603      	mov	r3, r0
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	331a      	adds	r3, #26
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	b292      	uxth	r2, r2
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff f85f 	bl	8007616 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d109      	bne.n	8008574 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f103 0214 	add.w	r2, r3, #20
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	0c1b      	lsrs	r3, r3, #16
 800856a:	b29b      	uxth	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7ff f851 	bl	8007616 <st_word>
	}
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	331a      	adds	r3, #26
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff f808 	bl	80075a0 <ld_word>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <cmp_lfn+0x1e>
 8008596:	2300      	movs	r3, #0
 8008598:	e059      	b.n	800864e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a2:	1e5a      	subs	r2, r3, #1
 80085a4:	4613      	mov	r3, r2
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085b0:	2301      	movs	r3, #1
 80085b2:	81fb      	strh	r3, [r7, #14]
 80085b4:	2300      	movs	r3, #0
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	e033      	b.n	8008622 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80085ba:	4a27      	ldr	r2, [pc, #156]	; (8008658 <cmp_lfn+0xdc>)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	4413      	add	r3, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe ffe9 	bl	80075a0 <ld_word>
 80085ce:	4603      	mov	r3, r0
 80085d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80085d2:	89fb      	ldrh	r3, [r7, #14]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01a      	beq.n	800860e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2bfe      	cmp	r3, #254	; 0xfe
 80085dc:	d812      	bhi.n	8008604 <cmp_lfn+0x88>
 80085de:	89bb      	ldrh	r3, [r7, #12]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f002 fea5 	bl	800b330 <ff_wtoupper>
 80085e6:	4603      	mov	r3, r0
 80085e8:	461c      	mov	r4, r3
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	617a      	str	r2, [r7, #20]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fe99 	bl	800b330 <ff_wtoupper>
 80085fe:	4603      	mov	r3, r0
 8008600:	429c      	cmp	r4, r3
 8008602:	d001      	beq.n	8008608 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008604:	2300      	movs	r3, #0
 8008606:	e022      	b.n	800864e <cmp_lfn+0xd2>
			}
			wc = uc;
 8008608:	89bb      	ldrh	r3, [r7, #12]
 800860a:	81fb      	strh	r3, [r7, #14]
 800860c:	e006      	b.n	800861c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800860e:	89bb      	ldrh	r3, [r7, #12]
 8008610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008614:	4293      	cmp	r3, r2
 8008616:	d001      	beq.n	800861c <cmp_lfn+0xa0>
 8008618:	2300      	movs	r3, #0
 800861a:	e018      	b.n	800864e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	3301      	adds	r3, #1
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b0c      	cmp	r3, #12
 8008626:	d9c8      	bls.n	80085ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <cmp_lfn+0xd0>
 8008634:	89fb      	ldrh	r3, [r7, #14]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d008      	beq.n	800864c <cmp_lfn+0xd0>
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <cmp_lfn+0xd0>
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800864c:	2301      	movs	r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd90      	pop	{r4, r7, pc}
 8008656:	bf00      	nop
 8008658:	08022054 	.word	0x08022054

0800865c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	331a      	adds	r3, #26
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe ff98 	bl	80075a0 <ld_word>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <pick_lfn+0x1e>
 8008676:	2300      	movs	r3, #0
 8008678:	e04d      	b.n	8008716 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	4613      	mov	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008690:	2301      	movs	r3, #1
 8008692:	81fb      	strh	r3, [r7, #14]
 8008694:	2300      	movs	r3, #0
 8008696:	613b      	str	r3, [r7, #16]
 8008698:	e028      	b.n	80086ec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800869a:	4a21      	ldr	r2, [pc, #132]	; (8008720 <pick_lfn+0xc4>)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	4413      	add	r3, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	4413      	add	r3, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe ff79 	bl	80075a0 <ld_word>
 80086ae:	4603      	mov	r3, r0
 80086b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00f      	beq.n	80086d8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2bfe      	cmp	r3, #254	; 0xfe
 80086bc:	d901      	bls.n	80086c2 <pick_lfn+0x66>
 80086be:	2300      	movs	r3, #0
 80086c0:	e029      	b.n	8008716 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80086c2:	89bb      	ldrh	r3, [r7, #12]
 80086c4:	81fb      	strh	r3, [r7, #14]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	1c5a      	adds	r2, r3, #1
 80086ca:	617a      	str	r2, [r7, #20]
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	89fa      	ldrh	r2, [r7, #14]
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e006      	b.n	80086e6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80086d8:	89bb      	ldrh	r3, [r7, #12]
 80086da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086de:	4293      	cmp	r3, r2
 80086e0:	d001      	beq.n	80086e6 <pick_lfn+0x8a>
 80086e2:	2300      	movs	r3, #0
 80086e4:	e017      	b.n	8008716 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	3301      	adds	r3, #1
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d9d3      	bls.n	800869a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2bfe      	cmp	r3, #254	; 0xfe
 8008702:	d901      	bls.n	8008708 <pick_lfn+0xac>
 8008704:	2300      	movs	r3, #0
 8008706:	e006      	b.n	8008716 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	2200      	movs	r2, #0
 8008712:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008714:	2301      	movs	r3, #1
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08022054 	.word	0x08022054

08008724 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4611      	mov	r1, r2
 8008730:	461a      	mov	r2, r3
 8008732:	460b      	mov	r3, r1
 8008734:	71fb      	strb	r3, [r7, #7]
 8008736:	4613      	mov	r3, r2
 8008738:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	330d      	adds	r3, #13
 800873e:	79ba      	ldrb	r2, [r7, #6]
 8008740:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	330b      	adds	r3, #11
 8008746:	220f      	movs	r2, #15
 8008748:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	330c      	adds	r3, #12
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	331a      	adds	r3, #26
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe ff5c 	bl	8007616 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	1e5a      	subs	r2, r3, #1
 8008762:	4613      	mov	r3, r2
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	82fb      	strh	r3, [r7, #22]
 8008772:	2300      	movs	r3, #0
 8008774:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008776:	8afb      	ldrh	r3, [r7, #22]
 8008778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <put_lfn+0x6c>
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	61fa      	str	r2, [r7, #28]
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008790:	4a17      	ldr	r2, [pc, #92]	; (80087f0 <put_lfn+0xcc>)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	4413      	add	r3, r2
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	8afa      	ldrh	r2, [r7, #22]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe ff37 	bl	8007616 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80087a8:	8afb      	ldrh	r3, [r7, #22]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <put_lfn+0x90>
 80087ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b0c      	cmp	r3, #12
 80087be:	d9da      	bls.n	8008776 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80087c0:	8afb      	ldrh	r3, [r7, #22]
 80087c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d006      	beq.n	80087d8 <put_lfn+0xb4>
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <put_lfn+0xbc>
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	79fa      	ldrb	r2, [r7, #7]
 80087e4:	701a      	strb	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	08022054 	.word	0x08022054

080087f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08c      	sub	sp, #48	; 0x30
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008802:	220b      	movs	r2, #11
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7fe ff4c 	bl	80076a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b05      	cmp	r3, #5
 8008810:	d92b      	bls.n	800886a <gen_numname+0x76>
		sr = seq;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008816:	e022      	b.n	800885e <gen_numname+0x6a>
			wc = *lfn++;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	1c9a      	adds	r2, r3, #2
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008822:	2300      	movs	r3, #0
 8008824:	62bb      	str	r3, [r7, #40]	; 0x28
 8008826:	e017      	b.n	8008858 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	005a      	lsls	r2, r3, #1
 800882c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	4413      	add	r3, r2
 8008834:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <gen_numname+0x5e>
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800884c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008850:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	3301      	adds	r3, #1
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d9e4      	bls.n	8008828 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1d8      	bne.n	8008818 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800886a:	2307      	movs	r3, #7
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 030f 	and.w	r3, r3, #15
 8008876:	b2db      	uxtb	r3, r3
 8008878:	3330      	adds	r3, #48	; 0x30
 800887a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800887e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008882:	2b39      	cmp	r3, #57	; 0x39
 8008884:	d904      	bls.n	8008890 <gen_numname+0x9c>
 8008886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800888a:	3307      	adds	r3, #7
 800888c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	62ba      	str	r2, [r7, #40]	; 0x28
 8008896:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800889a:	4413      	add	r3, r2
 800889c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	091b      	lsrs	r3, r3, #4
 80088a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1de      	bne.n	800886e <gen_numname+0x7a>
	ns[i] = '~';
 80088b0:	f107 0214 	add.w	r2, r7, #20
 80088b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b6:	4413      	add	r3, r2
 80088b8:	227e      	movs	r2, #126	; 0x7e
 80088ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80088bc:	2300      	movs	r3, #0
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
 80088c0:	e002      	b.n	80088c8 <gen_numname+0xd4>
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	3301      	adds	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
 80088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d205      	bcs.n	80088dc <gen_numname+0xe8>
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	4413      	add	r3, r2
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d1f2      	bne.n	80088c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	2b07      	cmp	r3, #7
 80088e0:	d808      	bhi.n	80088f4 <gen_numname+0x100>
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80088e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80088ec:	4413      	add	r3, r2
 80088ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80088f2:	e000      	b.n	80088f6 <gen_numname+0x102>
 80088f4:	2120      	movs	r1, #32
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	627a      	str	r2, [r7, #36]	; 0x24
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	460a      	mov	r2, r1
 8008902:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	2b07      	cmp	r3, #7
 8008908:	d9e8      	bls.n	80088dc <gen_numname+0xe8>
}
 800890a:	bf00      	nop
 800890c:	3730      	adds	r7, #48	; 0x30
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800891e:	230b      	movs	r3, #11
 8008920:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	0852      	lsrs	r2, r2, #1
 8008928:	01db      	lsls	r3, r3, #7
 800892a:	4313      	orrs	r3, r2
 800892c:	b2da      	uxtb	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1c59      	adds	r1, r3, #1
 8008932:	6079      	str	r1, [r7, #4]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	4413      	add	r3, r2
 8008938:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3b01      	subs	r3, #1
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1ed      	bne.n	8008922 <sum_sfn+0x10>
	return sum;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800895e:	2304      	movs	r3, #4
 8008960:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008968:	23ff      	movs	r3, #255	; 0xff
 800896a:	757b      	strb	r3, [r7, #21]
 800896c:	23ff      	movs	r3, #255	; 0xff
 800896e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008970:	e081      	b.n	8008a76 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	4619      	mov	r1, r3
 8008978:	6938      	ldr	r0, [r7, #16]
 800897a:	f7ff f8c1 	bl	8007b00 <move_window>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d17c      	bne.n	8008a82 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008990:	7dbb      	ldrb	r3, [r7, #22]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008996:	2304      	movs	r3, #4
 8008998:	75fb      	strb	r3, [r7, #23]
 800899a:	e077      	b.n	8008a8c <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	330b      	adds	r3, #11
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7bfa      	ldrb	r2, [r7, #15]
 80089ae:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80089b0:	7dbb      	ldrb	r3, [r7, #22]
 80089b2:	2be5      	cmp	r3, #229	; 0xe5
 80089b4:	d00e      	beq.n	80089d4 <dir_read+0x80>
 80089b6:	7dbb      	ldrb	r3, [r7, #22]
 80089b8:	2b2e      	cmp	r3, #46	; 0x2e
 80089ba:	d00b      	beq.n	80089d4 <dir_read+0x80>
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	f023 0320 	bic.w	r3, r3, #32
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	bf0c      	ite	eq
 80089c6:	2301      	moveq	r3, #1
 80089c8:	2300      	movne	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d002      	beq.n	80089da <dir_read+0x86>
				ord = 0xFF;
 80089d4:	23ff      	movs	r3, #255	; 0xff
 80089d6:	757b      	strb	r3, [r7, #21]
 80089d8:	e044      	b.n	8008a64 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d12f      	bne.n	8008a40 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80089e0:	7dbb      	ldrb	r3, [r7, #22]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	7b5b      	ldrb	r3, [r3, #13]
 80089f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80089f2:	7dbb      	ldrb	r3, [r7, #22]
 80089f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f8:	75bb      	strb	r3, [r7, #22]
 80089fa:	7dbb      	ldrb	r3, [r7, #22]
 80089fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008a06:	7dba      	ldrb	r2, [r7, #22]
 8008a08:	7d7b      	ldrb	r3, [r7, #21]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d115      	bne.n	8008a3a <dir_read+0xe6>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	330d      	adds	r3, #13
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	7d3a      	ldrb	r2, [r7, #20]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d10e      	bne.n	8008a3a <dir_read+0xe6>
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7ff fe18 	bl	800865c <pick_lfn>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <dir_read+0xe6>
 8008a32:	7d7b      	ldrb	r3, [r7, #21]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	e000      	b.n	8008a3c <dir_read+0xe8>
 8008a3a:	23ff      	movs	r3, #255	; 0xff
 8008a3c:	757b      	strb	r3, [r7, #21]
 8008a3e:	e011      	b.n	8008a64 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008a40:	7d7b      	ldrb	r3, [r7, #21]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d109      	bne.n	8008a5a <dir_read+0x106>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff ff61 	bl	8008912 <sum_sfn>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	7d3b      	ldrb	r3, [r7, #20]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d015      	beq.n	8008a86 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008a62:	e010      	b.n	8008a86 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fc3d 	bl	80082e6 <dir_next>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <dir_read+0x136>
	while (dp->sect) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f47f af79 	bne.w	8008972 <dir_read+0x1e>
 8008a80:	e004      	b.n	8008a8c <dir_read+0x138>
		if (res != FR_OK) break;
 8008a82:	bf00      	nop
 8008a84:	e002      	b.n	8008a8c <dir_read+0x138>
					break;
 8008a86:	bf00      	nop
 8008a88:	e000      	b.n	8008a8c <dir_read+0x138>
		if (res != FR_OK) break;
 8008a8a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <dir_read+0x144>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	61da      	str	r2, [r3, #28]
	return res;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fb9c 	bl	80081f0 <dir_sdi>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <dir_find+0x24>
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	e0a9      	b.n	8008c1a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ac6:	23ff      	movs	r3, #255	; 0xff
 8008ac8:	753b      	strb	r3, [r7, #20]
 8008aca:	7d3b      	ldrb	r3, [r7, #20]
 8008acc:	757b      	strb	r3, [r7, #21]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6938      	ldr	r0, [r7, #16]
 8008ade:	f7ff f80f 	bl	8007b00 <move_window>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 8090 	bne.w	8008c0e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008af6:	7dbb      	ldrb	r3, [r7, #22]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <dir_find+0x60>
 8008afc:	2304      	movs	r3, #4
 8008afe:	75fb      	strb	r3, [r7, #23]
 8008b00:	e08a      	b.n	8008c18 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	330b      	adds	r3, #11
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	7bfa      	ldrb	r2, [r7, #15]
 8008b14:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
 8008b18:	2be5      	cmp	r3, #229	; 0xe5
 8008b1a:	d007      	beq.n	8008b2c <dir_find+0x8a>
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <dir_find+0x98>
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d006      	beq.n	8008b3a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b2c:	23ff      	movs	r3, #255	; 0xff
 8008b2e:	757b      	strb	r3, [r7, #21]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
 8008b38:	e05e      	b.n	8008bf8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b0f      	cmp	r3, #15
 8008b3e:	d136      	bne.n	8008bae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d154      	bne.n	8008bf8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008b4e:	7dbb      	ldrb	r3, [r7, #22]
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	7b5b      	ldrb	r3, [r3, #13]
 8008b5e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008b60:	7dbb      	ldrb	r3, [r7, #22]
 8008b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b66:	75bb      	strb	r3, [r7, #22]
 8008b68:	7dbb      	ldrb	r3, [r7, #22]
 8008b6a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	695a      	ldr	r2, [r3, #20]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b74:	7dba      	ldrb	r2, [r7, #22]
 8008b76:	7d7b      	ldrb	r3, [r7, #21]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d115      	bne.n	8008ba8 <dir_find+0x106>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	330d      	adds	r3, #13
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	7d3a      	ldrb	r2, [r7, #20]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d10e      	bne.n	8008ba8 <dir_find+0x106>
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	4619      	mov	r1, r3
 8008b94:	4610      	mov	r0, r2
 8008b96:	f7ff fcf1 	bl	800857c <cmp_lfn>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <dir_find+0x106>
 8008ba0:	7d7b      	ldrb	r3, [r7, #21]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	e000      	b.n	8008baa <dir_find+0x108>
 8008ba8:	23ff      	movs	r3, #255	; 0xff
 8008baa:	757b      	strb	r3, [r7, #21]
 8008bac:	e024      	b.n	8008bf8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008bae:	7d7b      	ldrb	r3, [r7, #21]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d109      	bne.n	8008bc8 <dir_find+0x126>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff feaa 	bl	8008912 <sum_sfn>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	7d3b      	ldrb	r3, [r7, #20]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d024      	beq.n	8008c12 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <dir_find+0x14a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a18      	ldr	r0, [r3, #32]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3324      	adds	r3, #36	; 0x24
 8008bde:	220b      	movs	r2, #11
 8008be0:	4619      	mov	r1, r3
 8008be2:	f7fe fd9a 	bl	800771a <mem_cmp>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d014      	beq.n	8008c16 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008bec:	23ff      	movs	r3, #255	; 0xff
 8008bee:	757b      	strb	r3, [r7, #21]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fb73 	bl	80082e6 <dir_next>
 8008c00:	4603      	mov	r3, r0
 8008c02:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f43f af65 	beq.w	8008ad6 <dir_find+0x34>
 8008c0c:	e004      	b.n	8008c18 <dir_find+0x176>
		if (res != FR_OK) break;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008c16:	bf00      	nop

	return res;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08c      	sub	sp, #48	; 0x30
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <dir_register+0x20>
 8008c40:	2306      	movs	r3, #6
 8008c42:	e0e0      	b.n	8008e06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008c44:	2300      	movs	r3, #0
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
 8008c48:	e002      	b.n	8008c50 <dir_register+0x2c>
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	4413      	add	r3, r2
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f4      	bne.n	8008c4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	220c      	movs	r2, #12
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fd19 	bl	80076a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d032      	beq.n	8008ce2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2240      	movs	r2, #64	; 0x40
 8008c80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008c84:	2301      	movs	r3, #1
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c88:	e016      	b.n	8008cb8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	f107 010c 	add.w	r1, r7, #12
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	f7ff fdab 	bl	80087f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff feff 	bl	8008aa2 <dir_find>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	2b63      	cmp	r3, #99	; 0x63
 8008cbc:	d9e5      	bls.n	8008c8a <dir_register+0x66>
 8008cbe:	e000      	b.n	8008cc2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008cc0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	2b64      	cmp	r3, #100	; 0x64
 8008cc6:	d101      	bne.n	8008ccc <dir_register+0xa8>
 8008cc8:	2307      	movs	r3, #7
 8008cca:	e09c      	b.n	8008e06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d002      	beq.n	8008cda <dir_register+0xb6>
 8008cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cd8:	e095      	b.n	8008e06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008cda:	7dfa      	ldrb	r2, [r7, #23]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	f003 0302 	and.w	r3, r3, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <dir_register+0xd8>
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	330c      	adds	r3, #12
 8008cf0:	4a47      	ldr	r2, [pc, #284]	; (8008e10 <dir_register+0x1ec>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	089b      	lsrs	r3, r3, #2
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	e000      	b.n	8008cfe <dir_register+0xda>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008d00:	6a39      	ldr	r1, [r7, #32]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff fbb4 	bl	8008470 <dir_alloc>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d148      	bne.n	8008da8 <dir_register+0x184>
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	623b      	str	r3, [r7, #32]
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d042      	beq.n	8008da8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695a      	ldr	r2, [r3, #20]
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	015b      	lsls	r3, r3, #5
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fa5e 	bl	80081f0 <dir_sdi>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d132      	bne.n	8008da8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3324      	adds	r3, #36	; 0x24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fde3 	bl	8008912 <sum_sfn>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4619      	mov	r1, r3
 8008d56:	69f8      	ldr	r0, [r7, #28]
 8008d58:	f7fe fed2 	bl	8007b00 <move_window>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d11d      	bne.n	8008da6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	68d8      	ldr	r0, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a19      	ldr	r1, [r3, #32]
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	7efb      	ldrb	r3, [r7, #27]
 8008d78:	f7ff fcd4 	bl	8008724 <put_lfn>
				fs->wflag = 1;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008d82:	2100      	movs	r1, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff faae 	bl	80082e6 <dir_next>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d107      	bne.n	8008da8 <dir_register+0x184>
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	623b      	str	r3, [r7, #32]
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1d5      	bne.n	8008d50 <dir_register+0x12c>
 8008da4:	e000      	b.n	8008da8 <dir_register+0x184>
				if (res != FR_OK) break;
 8008da6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d128      	bne.n	8008e02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	4619      	mov	r1, r3
 8008db6:	69f8      	ldr	r0, [r7, #28]
 8008db8:	f7fe fea2 	bl	8007b00 <move_window>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d11b      	bne.n	8008e02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fc87 	bl	80076e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a18      	ldr	r0, [r3, #32]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3324      	adds	r3, #36	; 0x24
 8008de0:	220b      	movs	r2, #11
 8008de2:	4619      	mov	r1, r3
 8008de4:	f7fe fc5e 	bl	80076a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	330c      	adds	r3, #12
 8008df4:	f002 0218 	and.w	r2, r2, #24
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3730      	adds	r7, #48	; 0x30
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	4ec4ec4f 	.word	0x4ec4ec4f

08008e14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2200      	movs	r2, #0
 8008e28:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80c9 	beq.w	8008fc6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3c:	d032      	beq.n	8008ea4 <get_fileinfo+0x90>
			i = j = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008e46:	e01b      	b.n	8008e80 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008e48:	89fb      	ldrh	r3, [r7, #14]
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f002 fa33 	bl	800b2b8 <ff_convert>
 8008e52:	4603      	mov	r3, r0
 8008e54:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008e56:	89fb      	ldrh	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <get_fileinfo+0x4e>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]
 8008e60:	e01a      	b.n	8008e98 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	2bfe      	cmp	r3, #254	; 0xfe
 8008e66:	d902      	bls.n	8008e6e <get_fileinfo+0x5a>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	61fb      	str	r3, [r7, #28]
 8008e6c:	e014      	b.n	8008e98 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	61fa      	str	r2, [r7, #28]
 8008e74:	89fa      	ldrh	r2, [r7, #14]
 8008e76:	b2d1      	uxtb	r1, r2
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	460a      	mov	r2, r1
 8008e7e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	1c59      	adds	r1, r3, #1
 8008e88:	61b9      	str	r1, [r7, #24]
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	81fb      	strh	r3, [r7, #14]
 8008e92:	89fb      	ldrh	r3, [r7, #14]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1d7      	bne.n	8008e48 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3316      	adds	r3, #22
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3316      	adds	r3, #22
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008eb8:	e04c      	b.n	8008f54 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1a      	ldr	r2, [r3, #32]
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	1c59      	adds	r1, r3, #1
 8008ec2:	61f9      	str	r1, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b20      	cmp	r3, #32
 8008ece:	d100      	bne.n	8008ed2 <get_fileinfo+0xbe>
 8008ed0:	e040      	b.n	8008f54 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d101      	bne.n	8008edc <get_fileinfo+0xc8>
 8008ed8:	23e5      	movs	r3, #229	; 0xe5
 8008eda:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d10f      	bne.n	8008f02 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8008ee2:	89bb      	ldrh	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <get_fileinfo+0xe0>
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	4413      	add	r3, r2
 8008eee:	3316      	adds	r3, #22
 8008ef0:	222e      	movs	r2, #46	; 0x2e
 8008ef2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	61ba      	str	r2, [r7, #24]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4413      	add	r3, r2
 8008efe:	222e      	movs	r2, #46	; 0x2e
 8008f00:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	4413      	add	r3, r2
 8008f08:	3309      	adds	r3, #9
 8008f0a:	7dfa      	ldrb	r2, [r7, #23]
 8008f0c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008f0e:	89bb      	ldrh	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d11c      	bne.n	8008f4e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d913      	bls.n	8008f42 <get_fileinfo+0x12e>
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b5a      	cmp	r3, #90	; 0x5a
 8008f1e:	d810      	bhi.n	8008f42 <get_fileinfo+0x12e>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	330c      	adds	r3, #12
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d901      	bls.n	8008f34 <get_fileinfo+0x120>
 8008f30:	2310      	movs	r3, #16
 8008f32:	e000      	b.n	8008f36 <get_fileinfo+0x122>
 8008f34:	2308      	movs	r3, #8
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	3320      	adds	r3, #32
 8008f40:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	4413      	add	r3, r2
 8008f48:	3316      	adds	r3, #22
 8008f4a:	7dfa      	ldrb	r2, [r7, #23]
 8008f4c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b0a      	cmp	r3, #10
 8008f58:	d9af      	bls.n	8008eba <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008f5a:	89bb      	ldrh	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10d      	bne.n	8008f7c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	4413      	add	r3, r2
 8008f66:	3316      	adds	r3, #22
 8008f68:	2200      	movs	r2, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	330c      	adds	r3, #12
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <get_fileinfo+0x168>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	4413      	add	r3, r2
 8008f82:	3309      	adds	r3, #9
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	7ada      	ldrb	r2, [r3, #11]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	331c      	adds	r3, #28
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe fb19 	bl	80075d0 <ld_dword>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	3316      	adds	r3, #22
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fb10 	bl	80075d0 <ld_dword>
 8008fb0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	80da      	strh	r2, [r3, #6]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	0c1b      	lsrs	r3, r3, #16
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	809a      	strh	r2, [r3, #4]
 8008fc4:	e000      	b.n	8008fc8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008fc6:	bf00      	nop
}
 8008fc8:	3720      	adds	r7, #32
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	61ba      	str	r2, [r7, #24]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009000:	2b1f      	cmp	r3, #31
 8009002:	d940      	bls.n	8009086 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009006:	2b2f      	cmp	r3, #47	; 0x2f
 8009008:	d006      	beq.n	8009018 <create_name+0x48>
 800900a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800900c:	2b5c      	cmp	r3, #92	; 0x5c
 800900e:	d110      	bne.n	8009032 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009010:	e002      	b.n	8009018 <create_name+0x48>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	3301      	adds	r3, #1
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	4413      	add	r3, r2
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b2f      	cmp	r3, #47	; 0x2f
 8009022:	d0f6      	beq.n	8009012 <create_name+0x42>
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	4413      	add	r3, r2
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b5c      	cmp	r3, #92	; 0x5c
 800902e:	d0f0      	beq.n	8009012 <create_name+0x42>
			break;
 8009030:	e02a      	b.n	8009088 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2bfe      	cmp	r3, #254	; 0xfe
 8009036:	d901      	bls.n	800903c <create_name+0x6c>
 8009038:	2306      	movs	r3, #6
 800903a:	e177      	b.n	800932c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800903c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800903e:	b2db      	uxtb	r3, r3
 8009040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009044:	2101      	movs	r1, #1
 8009046:	4618      	mov	r0, r3
 8009048:	f002 f936 	bl	800b2b8 <ff_convert>
 800904c:	4603      	mov	r3, r0
 800904e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <create_name+0x8a>
 8009056:	2306      	movs	r3, #6
 8009058:	e168      	b.n	800932c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800905a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800905c:	2b7f      	cmp	r3, #127	; 0x7f
 800905e:	d809      	bhi.n	8009074 <create_name+0xa4>
 8009060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009062:	4619      	mov	r1, r3
 8009064:	48b3      	ldr	r0, [pc, #716]	; (8009334 <create_name+0x364>)
 8009066:	f7fe fb7f 	bl	8007768 <chk_chr>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <create_name+0xa4>
 8009070:	2306      	movs	r3, #6
 8009072:	e15b      	b.n	800932c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	617a      	str	r2, [r7, #20]
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009082:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009084:	e7b4      	b.n	8008ff0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009086:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	441a      	add	r2, r3
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009094:	2b1f      	cmp	r3, #31
 8009096:	d801      	bhi.n	800909c <create_name+0xcc>
 8009098:	2304      	movs	r3, #4
 800909a:	e000      	b.n	800909e <create_name+0xce>
 800909c:	2300      	movs	r3, #0
 800909e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80090a2:	e011      	b.n	80090c8 <create_name+0xf8>
		w = lfn[di - 1];
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80090aa:	3b01      	subs	r3, #1
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4413      	add	r3, r2
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80090b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d002      	beq.n	80090c2 <create_name+0xf2>
 80090bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090be:	2b2e      	cmp	r3, #46	; 0x2e
 80090c0:	d106      	bne.n	80090d0 <create_name+0x100>
		di--;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1ea      	bne.n	80090a4 <create_name+0xd4>
 80090ce:	e000      	b.n	80090d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80090d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <create_name+0x118>
 80090e4:	2306      	movs	r3, #6
 80090e6:	e121      	b.n	800932c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3324      	adds	r3, #36	; 0x24
 80090ec:	220b      	movs	r2, #11
 80090ee:	2120      	movs	r1, #32
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe faf8 	bl	80076e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	e002      	b.n	8009102 <create_name+0x132>
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	3301      	adds	r3, #1
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	2b20      	cmp	r3, #32
 800910e:	d0f5      	beq.n	80090fc <create_name+0x12c>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	2b2e      	cmp	r3, #46	; 0x2e
 800911c:	d0ee      	beq.n	80090fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <create_name+0x168>
 8009124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009128:	f043 0303 	orr.w	r3, r3, #3
 800912c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009130:	e002      	b.n	8009138 <create_name+0x168>
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	3b01      	subs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d009      	beq.n	8009152 <create_name+0x182>
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009144:	3b01      	subs	r3, #1
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	2b2e      	cmp	r3, #46	; 0x2e
 8009150:	d1ef      	bne.n	8009132 <create_name+0x162>

	i = b = 0; ni = 8;
 8009152:	2300      	movs	r3, #0
 8009154:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009158:	2300      	movs	r3, #0
 800915a:	623b      	str	r3, [r7, #32]
 800915c:	2308      	movs	r3, #8
 800915e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	61ba      	str	r2, [r7, #24]
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 8090 	beq.w	8009298 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800917a:	2b20      	cmp	r3, #32
 800917c:	d006      	beq.n	800918c <create_name+0x1bc>
 800917e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009180:	2b2e      	cmp	r3, #46	; 0x2e
 8009182:	d10a      	bne.n	800919a <create_name+0x1ca>
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d006      	beq.n	800919a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800918c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009190:	f043 0303 	orr.w	r3, r3, #3
 8009194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009198:	e07d      	b.n	8009296 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d203      	bcs.n	80091aa <create_name+0x1da>
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d123      	bne.n	80091f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	2b0b      	cmp	r3, #11
 80091ae:	d106      	bne.n	80091be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80091b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091b4:	f043 0303 	orr.w	r3, r3, #3
 80091b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80091bc:	e06f      	b.n	800929e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d005      	beq.n	80091d2 <create_name+0x202>
 80091c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091ca:	f043 0303 	orr.w	r3, r3, #3
 80091ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d860      	bhi.n	800929c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	2308      	movs	r3, #8
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	230b      	movs	r3, #11
 80091e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80091e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091f0:	e051      	b.n	8009296 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80091f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091f4:	2b7f      	cmp	r3, #127	; 0x7f
 80091f6:	d914      	bls.n	8009222 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80091f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 f85b 	bl	800b2b8 <ff_convert>
 8009202:	4603      	mov	r3, r0
 8009204:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <create_name+0x246>
 800920c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800920e:	3b80      	subs	r3, #128	; 0x80
 8009210:	4a49      	ldr	r2, [pc, #292]	; (8009338 <create_name+0x368>)
 8009212:	5cd3      	ldrb	r3, [r2, r3]
 8009214:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800921a:	f043 0302 	orr.w	r3, r3, #2
 800921e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d007      	beq.n	8009238 <create_name+0x268>
 8009228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800922a:	4619      	mov	r1, r3
 800922c:	4843      	ldr	r0, [pc, #268]	; (800933c <create_name+0x36c>)
 800922e:	f7fe fa9b 	bl	8007768 <chk_chr>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009238:	235f      	movs	r3, #95	; 0x5f
 800923a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800923c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009240:	f043 0303 	orr.w	r3, r3, #3
 8009244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009248:	e01b      	b.n	8009282 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800924a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	d909      	bls.n	8009264 <create_name+0x294>
 8009250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009252:	2b5a      	cmp	r3, #90	; 0x5a
 8009254:	d806      	bhi.n	8009264 <create_name+0x294>
					b |= 2;
 8009256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800925a:	f043 0302 	orr.w	r3, r3, #2
 800925e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009262:	e00e      	b.n	8009282 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009266:	2b60      	cmp	r3, #96	; 0x60
 8009268:	d90b      	bls.n	8009282 <create_name+0x2b2>
 800926a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800926c:	2b7a      	cmp	r3, #122	; 0x7a
 800926e:	d808      	bhi.n	8009282 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009270:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009274:	f043 0301 	orr.w	r3, r3, #1
 8009278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800927c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800927e:	3b20      	subs	r3, #32
 8009280:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	1c5a      	adds	r2, r3, #1
 8009286:	623a      	str	r2, [r7, #32]
 8009288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800928a:	b2d1      	uxtb	r1, r2
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	4413      	add	r3, r2
 8009290:	460a      	mov	r2, r1
 8009292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009296:	e763      	b.n	8009160 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009298:	bf00      	nop
 800929a:	e000      	b.n	800929e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800929c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092a4:	2be5      	cmp	r3, #229	; 0xe5
 80092a6:	d103      	bne.n	80092b0 <create_name+0x2e0>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2205      	movs	r2, #5
 80092ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d104      	bne.n	80092c0 <create_name+0x2f0>
 80092b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80092c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092c4:	f003 030c 	and.w	r3, r3, #12
 80092c8:	2b0c      	cmp	r3, #12
 80092ca:	d005      	beq.n	80092d8 <create_name+0x308>
 80092cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d105      	bne.n	80092e4 <create_name+0x314>
 80092d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80092e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d117      	bne.n	8009320 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80092f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d105      	bne.n	8009308 <create_name+0x338>
 80092fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009300:	f043 0310 	orr.w	r3, r3, #16
 8009304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800930c:	f003 030c 	and.w	r3, r3, #12
 8009310:	2b04      	cmp	r3, #4
 8009312:	d105      	bne.n	8009320 <create_name+0x350>
 8009314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009318:	f043 0308 	orr.w	r3, r3, #8
 800931c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009326:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800932a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800932c:	4618      	mov	r0, r3
 800932e:	3728      	adds	r7, #40	; 0x28
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	08015e5c 	.word	0x08015e5c
 8009338:	08021fd4 	.word	0x08021fd4
 800933c:	08015e68 	.word	0x08015e68

08009340 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009354:	e002      	b.n	800935c <follow_path+0x1c>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b2f      	cmp	r3, #47	; 0x2f
 8009362:	d0f8      	beq.n	8009356 <follow_path+0x16>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b5c      	cmp	r3, #92	; 0x5c
 800936a:	d0f4      	beq.n	8009356 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	2b1f      	cmp	r3, #31
 8009378:	d80a      	bhi.n	8009390 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2280      	movs	r2, #128	; 0x80
 800937e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7fe ff33 	bl	80081f0 <dir_sdi>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]
 800938e:	e043      	b.n	8009418 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009390:	463b      	mov	r3, r7
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fe1b 	bl	8008fd0 <create_name>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d134      	bne.n	800940e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff fb7c 	bl	8008aa2 <dir_find>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d127      	bne.n	8009412 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d122      	bne.n	8009412 <follow_path+0xd2>
 80093cc:	2305      	movs	r3, #5
 80093ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093d0:	e01f      	b.n	8009412 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11c      	bne.n	8009416 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	799b      	ldrb	r3, [r3, #6]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093e8:	2305      	movs	r3, #5
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e014      	b.n	8009418 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fc:	4413      	add	r3, r2
 80093fe:	4619      	mov	r1, r3
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff f87c 	bl	80084fe <ld_clust>
 8009406:	4602      	mov	r2, r0
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800940c:	e7c0      	b.n	8009390 <follow_path+0x50>
			if (res != FR_OK) break;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <follow_path+0xd8>
				break;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009416:	bf00      	nop
			}
		}
	}

	return res;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009422:	b480      	push	{r7}
 8009424:	b087      	sub	sp, #28
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800942a:	f04f 33ff 	mov.w	r3, #4294967295
 800942e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d031      	beq.n	800949c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e002      	b.n	8009446 <get_ldnumber+0x24>
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b1f      	cmp	r3, #31
 800944c:	d903      	bls.n	8009456 <get_ldnumber+0x34>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b3a      	cmp	r3, #58	; 0x3a
 8009454:	d1f4      	bne.n	8009440 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b3a      	cmp	r3, #58	; 0x3a
 800945c:	d11c      	bne.n	8009498 <get_ldnumber+0x76>
			tp = *path;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	60fa      	str	r2, [r7, #12]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	3b30      	subs	r3, #48	; 0x30
 800946e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b09      	cmp	r3, #9
 8009474:	d80e      	bhi.n	8009494 <get_ldnumber+0x72>
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	429a      	cmp	r2, r3
 800947c:	d10a      	bne.n	8009494 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d807      	bhi.n	8009494 <get_ldnumber+0x72>
					vol = (int)i;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	3301      	adds	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	e002      	b.n	800949e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009498:	2300      	movs	r3, #0
 800949a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800949c:	693b      	ldr	r3, [r7, #16]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	70da      	strb	r2, [r3, #3]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe fb1a 	bl	8007b00 <move_window>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <check_fs+0x2a>
 80094d2:	2304      	movs	r3, #4
 80094d4:	e038      	b.n	8009548 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3334      	adds	r3, #52	; 0x34
 80094da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe f85e 	bl	80075a0 <ld_word>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d001      	beq.n	80094f4 <check_fs+0x48>
 80094f0:	2303      	movs	r3, #3
 80094f2:	e029      	b.n	8009548 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094fa:	2be9      	cmp	r3, #233	; 0xe9
 80094fc:	d009      	beq.n	8009512 <check_fs+0x66>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009504:	2beb      	cmp	r3, #235	; 0xeb
 8009506:	d11e      	bne.n	8009546 <check_fs+0x9a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800950e:	2b90      	cmp	r3, #144	; 0x90
 8009510:	d119      	bne.n	8009546 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3334      	adds	r3, #52	; 0x34
 8009516:	3336      	adds	r3, #54	; 0x36
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe f859 	bl	80075d0 <ld_dword>
 800951e:	4603      	mov	r3, r0
 8009520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009524:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <check_fs+0xa4>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d101      	bne.n	800952e <check_fs+0x82>
 800952a:	2300      	movs	r3, #0
 800952c:	e00c      	b.n	8009548 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3334      	adds	r3, #52	; 0x34
 8009532:	3352      	adds	r3, #82	; 0x52
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe f84b 	bl	80075d0 <ld_dword>
 800953a:	4602      	mov	r2, r0
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <check_fs+0xa8>)
 800953e:	429a      	cmp	r2, r3
 8009540:	d101      	bne.n	8009546 <check_fs+0x9a>
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009546:	2302      	movs	r3, #2
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	00544146 	.word	0x00544146
 8009554:	33544146 	.word	0x33544146

08009558 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b096      	sub	sp, #88	; 0x58
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff ff58 	bl	8009422 <get_ldnumber>
 8009572:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	da01      	bge.n	800957e <find_volume+0x26>
 800957a:	230b      	movs	r3, #11
 800957c:	e22e      	b.n	80099dc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800957e:	4aa8      	ldr	r2, [pc, #672]	; (8009820 <find_volume+0x2c8>)
 8009580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009586:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <find_volume+0x3a>
 800958e:	230c      	movs	r3, #12
 8009590:	e224      	b.n	80099dc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009596:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	f023 0301 	bic.w	r3, r3, #1
 800959e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01a      	beq.n	80095de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd ff51 	bl	8007454 <disk_status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10c      	bne.n	80095de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <find_volume+0x82>
 80095ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80095d6:	230a      	movs	r3, #10
 80095d8:	e200      	b.n	80099dc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80095da:	2300      	movs	r3, #0
 80095dc:	e1fe      	b.n	80099dc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fd ff49 	bl	8007488 <disk_initialize>
 80095f6:	4603      	mov	r3, r0
 80095f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009608:	2303      	movs	r3, #3
 800960a:	e1e7      	b.n	80099dc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <find_volume+0xca>
 8009612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800961e:	230a      	movs	r3, #10
 8009620:	e1dc      	b.n	80099dc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800962a:	f7ff ff3f 	bl	80094ac <check_fs>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009638:	2b02      	cmp	r3, #2
 800963a:	d14b      	bne.n	80096d4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800963c:	2300      	movs	r3, #0
 800963e:	643b      	str	r3, [r7, #64]	; 0x40
 8009640:	e01f      	b.n	8009682 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009644:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009650:	4413      	add	r3, r2
 8009652:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	3304      	adds	r3, #4
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <find_volume+0x114>
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	3308      	adds	r3, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f7fd ffb4 	bl	80075d0 <ld_dword>
 8009668:	4602      	mov	r2, r0
 800966a:	e000      	b.n	800966e <find_volume+0x116>
 800966c:	2200      	movs	r2, #0
 800966e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009676:	440b      	add	r3, r1
 8009678:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800967c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967e:	3301      	adds	r3, #1
 8009680:	643b      	str	r3, [r7, #64]	; 0x40
 8009682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009684:	2b03      	cmp	r3, #3
 8009686:	d9dc      	bls.n	8009642 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009688:	2300      	movs	r3, #0
 800968a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800968c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <find_volume+0x140>
 8009692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009694:	3b01      	subs	r3, #1
 8009696:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80096a0:	4413      	add	r3, r2
 80096a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <find_volume+0x162>
 80096ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096b2:	f7ff fefb 	bl	80094ac <check_fs>
 80096b6:	4603      	mov	r3, r0
 80096b8:	e000      	b.n	80096bc <find_volume+0x164>
 80096ba:	2303      	movs	r3, #3
 80096bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d905      	bls.n	80096d4 <find_volume+0x17c>
 80096c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ca:	3301      	adds	r3, #1
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
 80096ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d9e1      	bls.n	8009698 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096d8:	2b04      	cmp	r3, #4
 80096da:	d101      	bne.n	80096e0 <find_volume+0x188>
 80096dc:	2301      	movs	r3, #1
 80096de:	e17d      	b.n	80099dc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d901      	bls.n	80096ec <find_volume+0x194>
 80096e8:	230d      	movs	r3, #13
 80096ea:	e177      	b.n	80099dc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	3334      	adds	r3, #52	; 0x34
 80096f0:	330b      	adds	r3, #11
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fd ff54 	bl	80075a0 <ld_word>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096fe:	d001      	beq.n	8009704 <find_volume+0x1ac>
 8009700:	230d      	movs	r3, #13
 8009702:	e16b      	b.n	80099dc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	3334      	adds	r3, #52	; 0x34
 8009708:	3316      	adds	r3, #22
 800970a:	4618      	mov	r0, r3
 800970c:	f7fd ff48 	bl	80075a0 <ld_word>
 8009710:	4603      	mov	r3, r0
 8009712:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <find_volume+0x1d0>
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	3334      	adds	r3, #52	; 0x34
 800971e:	3324      	adds	r3, #36	; 0x24
 8009720:	4618      	mov	r0, r3
 8009722:	f7fd ff55 	bl	80075d0 <ld_dword>
 8009726:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800972c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d005      	beq.n	800974c <find_volume+0x1f4>
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	789b      	ldrb	r3, [r3, #2]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d001      	beq.n	800974c <find_volume+0x1f4>
 8009748:	230d      	movs	r3, #13
 800974a:	e147      	b.n	80099dc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	789b      	ldrb	r3, [r3, #2]
 8009750:	461a      	mov	r2, r3
 8009752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009754:	fb02 f303 	mul.w	r3, r2, r3
 8009758:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009760:	b29a      	uxth	r2, r3
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	895b      	ldrh	r3, [r3, #10]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <find_volume+0x228>
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	895b      	ldrh	r3, [r3, #10]
 8009772:	461a      	mov	r2, r3
 8009774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009776:	895b      	ldrh	r3, [r3, #10]
 8009778:	3b01      	subs	r3, #1
 800977a:	4013      	ands	r3, r2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <find_volume+0x22c>
 8009780:	230d      	movs	r3, #13
 8009782:	e12b      	b.n	80099dc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	3334      	adds	r3, #52	; 0x34
 8009788:	3311      	adds	r3, #17
 800978a:	4618      	mov	r0, r3
 800978c:	f7fd ff08 	bl	80075a0 <ld_word>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	891b      	ldrh	r3, [r3, #8]
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <find_volume+0x252>
 80097a6:	230d      	movs	r3, #13
 80097a8:	e118      	b.n	80099dc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	3334      	adds	r3, #52	; 0x34
 80097ae:	3313      	adds	r3, #19
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd fef5 	bl	80075a0 <ld_word>
 80097b6:	4603      	mov	r3, r0
 80097b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <find_volume+0x276>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	3334      	adds	r3, #52	; 0x34
 80097c4:	3320      	adds	r3, #32
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd ff02 	bl	80075d0 <ld_dword>
 80097cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	3334      	adds	r3, #52	; 0x34
 80097d2:	330e      	adds	r3, #14
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd fee3 	bl	80075a0 <ld_word>
 80097da:	4603      	mov	r3, r0
 80097dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <find_volume+0x290>
 80097e4:	230d      	movs	r3, #13
 80097e6:	e0f9      	b.n	80099dc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	4413      	add	r3, r2
 80097ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f0:	8912      	ldrh	r2, [r2, #8]
 80097f2:	0912      	lsrs	r2, r2, #4
 80097f4:	b292      	uxth	r2, r2
 80097f6:	4413      	add	r3, r2
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	429a      	cmp	r2, r3
 8009800:	d201      	bcs.n	8009806 <find_volume+0x2ae>
 8009802:	230d      	movs	r3, #13
 8009804:	e0ea      	b.n	80099dc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980e:	8952      	ldrh	r2, [r2, #10]
 8009810:	fbb3 f3f2 	udiv	r3, r3, r2
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <find_volume+0x2cc>
 800981c:	230d      	movs	r3, #13
 800981e:	e0dd      	b.n	80099dc <find_volume+0x484>
 8009820:	2000a45c 	.word	0x2000a45c
		fmt = FS_FAT32;
 8009824:	2303      	movs	r3, #3
 8009826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009830:	4293      	cmp	r3, r2
 8009832:	d802      	bhi.n	800983a <find_volume+0x2e2>
 8009834:	2302      	movs	r3, #2
 8009836:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009840:	4293      	cmp	r3, r2
 8009842:	d802      	bhi.n	800984a <find_volume+0x2f2>
 8009844:	2301      	movs	r3, #1
 8009846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	1c9a      	adds	r2, r3, #2
 800984e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009850:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009856:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800985a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985c:	441a      	add	r2, r3
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	441a      	add	r2, r3
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800986c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009870:	2b03      	cmp	r3, #3
 8009872:	d11e      	bne.n	80098b2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	3334      	adds	r3, #52	; 0x34
 8009878:	332a      	adds	r3, #42	; 0x2a
 800987a:	4618      	mov	r0, r3
 800987c:	f7fd fe90 	bl	80075a0 <ld_word>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <find_volume+0x332>
 8009886:	230d      	movs	r3, #13
 8009888:	e0a8      	b.n	80099dc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	891b      	ldrh	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <find_volume+0x33e>
 8009892:	230d      	movs	r3, #13
 8009894:	e0a2      	b.n	80099dc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	3334      	adds	r3, #52	; 0x34
 800989a:	332c      	adds	r3, #44	; 0x2c
 800989c:	4618      	mov	r0, r3
 800989e:	f7fd fe97 	bl	80075d0 <ld_dword>
 80098a2:	4602      	mov	r2, r0
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
 80098b0:	e01f      	b.n	80098f2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	891b      	ldrh	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <find_volume+0x366>
 80098ba:	230d      	movs	r3, #13
 80098bc:	e08e      	b.n	80099dc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c4:	441a      	add	r2, r3
 80098c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d103      	bne.n	80098da <find_volume+0x382>
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	e00a      	b.n	80098f0 <find_volume+0x398>
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	4613      	mov	r3, r2
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4413      	add	r3, r2
 80098e4:	085a      	lsrs	r2, r3, #1
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098f0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	69da      	ldr	r2, [r3, #28]
 80098f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80098fc:	0a5b      	lsrs	r3, r3, #9
 80098fe:	429a      	cmp	r2, r3
 8009900:	d201      	bcs.n	8009906 <find_volume+0x3ae>
 8009902:	230d      	movs	r3, #13
 8009904:	e06a      	b.n	80099dc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009908:	f04f 32ff 	mov.w	r2, #4294967295
 800990c:	615a      	str	r2, [r3, #20]
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	2280      	movs	r2, #128	; 0x80
 800991a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800991c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009920:	2b03      	cmp	r3, #3
 8009922:	d149      	bne.n	80099b8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	3334      	adds	r3, #52	; 0x34
 8009928:	3330      	adds	r3, #48	; 0x30
 800992a:	4618      	mov	r0, r3
 800992c:	f7fd fe38 	bl	80075a0 <ld_word>
 8009930:	4603      	mov	r3, r0
 8009932:	2b01      	cmp	r3, #1
 8009934:	d140      	bne.n	80099b8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009938:	3301      	adds	r3, #1
 800993a:	4619      	mov	r1, r3
 800993c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800993e:	f7fe f8df 	bl	8007b00 <move_window>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d137      	bne.n	80099b8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	2200      	movs	r2, #0
 800994c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	3334      	adds	r3, #52	; 0x34
 8009952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009956:	4618      	mov	r0, r3
 8009958:	f7fd fe22 	bl	80075a0 <ld_word>
 800995c:	4603      	mov	r3, r0
 800995e:	461a      	mov	r2, r3
 8009960:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009964:	429a      	cmp	r2, r3
 8009966:	d127      	bne.n	80099b8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	3334      	adds	r3, #52	; 0x34
 800996c:	4618      	mov	r0, r3
 800996e:	f7fd fe2f 	bl	80075d0 <ld_dword>
 8009972:	4602      	mov	r2, r0
 8009974:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <find_volume+0x48c>)
 8009976:	429a      	cmp	r2, r3
 8009978:	d11e      	bne.n	80099b8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	3334      	adds	r3, #52	; 0x34
 800997e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fd fe24 	bl	80075d0 <ld_dword>
 8009988:	4602      	mov	r2, r0
 800998a:	4b17      	ldr	r3, [pc, #92]	; (80099e8 <find_volume+0x490>)
 800998c:	429a      	cmp	r2, r3
 800998e:	d113      	bne.n	80099b8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	3334      	adds	r3, #52	; 0x34
 8009994:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009998:	4618      	mov	r0, r3
 800999a:	f7fd fe19 	bl	80075d0 <ld_dword>
 800999e:	4602      	mov	r2, r0
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	3334      	adds	r3, #52	; 0x34
 80099a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd fe0f 	bl	80075d0 <ld_dword>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80099be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <find_volume+0x494>)
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	3301      	adds	r3, #1
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <find_volume+0x494>)
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <find_volume+0x494>)
 80099ce:	881a      	ldrh	r2, [r3, #0]
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099d6:	f7fe f82b 	bl	8007a30 <clear_lock>
#endif
	return FR_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3758      	adds	r7, #88	; 0x58
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	41615252 	.word	0x41615252
 80099e8:	61417272 	.word	0x61417272
 80099ec:	2000a464 	.word	0x2000a464

080099f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099fa:	2309      	movs	r3, #9
 80099fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d01c      	beq.n	8009a3e <validate+0x4e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d018      	beq.n	8009a3e <validate+0x4e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <validate+0x4e>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	889a      	ldrh	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	88db      	ldrh	r3, [r3, #6]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d10c      	bne.n	8009a3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fd fd12 	bl	8007454 <disk_status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <validate+0x4e>
			res = FR_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <validate+0x5a>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	e000      	b.n	8009a4c <validate+0x5c>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	6013      	str	r3, [r2, #0]
	return res;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a6e:	f107 0310 	add.w	r3, r7, #16
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff fcd5 	bl	8009422 <get_ldnumber>
 8009a78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	da01      	bge.n	8009a84 <f_mount+0x28>
 8009a80:	230b      	movs	r3, #11
 8009a82:	e02b      	b.n	8009adc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a84:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <f_mount+0x88>)
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a94:	69b8      	ldr	r0, [r7, #24]
 8009a96:	f7fd ffcb 	bl	8007a30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	490d      	ldr	r1, [pc, #52]	; (8009ae4 <f_mount+0x88>)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <f_mount+0x66>
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d001      	beq.n	8009ac6 <f_mount+0x6a>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e00a      	b.n	8009adc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ac6:	f107 010c 	add.w	r1, r7, #12
 8009aca:	f107 0308 	add.w	r3, r7, #8
 8009ace:	2200      	movs	r2, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fd41 	bl	8009558 <find_volume>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3720      	adds	r7, #32
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	2000a45c 	.word	0x2000a45c

08009ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b09a      	sub	sp, #104	; 0x68
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <f_open+0x18>
 8009afc:	2309      	movs	r3, #9
 8009afe:	e1bd      	b.n	8009e7c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b08:	79fa      	ldrb	r2, [r7, #7]
 8009b0a:	f107 0110 	add.w	r1, r7, #16
 8009b0e:	f107 0308 	add.w	r3, r7, #8
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fd20 	bl	8009558 <find_volume>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f040 81a1 	bne.w	8009e6a <f_open+0x382>
		dj.obj.fs = fs;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b30:	f001 fbab 	bl	800b28a <ff_memalloc>
 8009b34:	65b8      	str	r0, [r7, #88]	; 0x58
 8009b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <f_open+0x58>
 8009b3c:	2311      	movs	r3, #17
 8009b3e:	e19d      	b.n	8009e7c <f_open+0x394>
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b44:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	f107 0314 	add.w	r3, r7, #20
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff fbf6 	bl	8009340 <follow_path>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11a      	bne.n	8009b98 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b66:	b25b      	sxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	da03      	bge.n	8009b74 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8009b6c:	2306      	movs	r3, #6
 8009b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009b72:	e011      	b.n	8009b98 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fd fe07 	bl	80077a0 <chk_lock>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	f003 031c 	and.w	r3, r3, #28
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d07f      	beq.n	8009ca2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8009ba2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d017      	beq.n	8009bda <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009baa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d10e      	bne.n	8009bd0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bb2:	f7fd fe51 	bl	8007858 <enq_lock>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <f_open+0xe2>
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff f82f 	bl	8008c24 <dir_register>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	e000      	b.n	8009bcc <f_open+0xe4>
 8009bca:	2312      	movs	r3, #18
 8009bcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	f043 0308 	orr.w	r3, r3, #8
 8009bd6:	71fb      	strb	r3, [r7, #7]
 8009bd8:	e010      	b.n	8009bfc <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009bda:	7ebb      	ldrb	r3, [r7, #26]
 8009bdc:	f003 0311 	and.w	r3, r3, #17
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <f_open+0x104>
					res = FR_DENIED;
 8009be4:	2307      	movs	r3, #7
 8009be6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009bea:	e007      	b.n	8009bfc <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009bec:	79fb      	ldrb	r3, [r7, #7]
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <f_open+0x114>
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009bfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d168      	bne.n	8009cd6 <f_open+0x1ee>
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d063      	beq.n	8009cd6 <f_open+0x1ee>
				dw = GET_FATTIME();
 8009c0e:	f7fd fcbf 	bl	8007590 <get_fattime>
 8009c12:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c16:	330e      	adds	r3, #14
 8009c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fd fd16 	bl	800764c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c22:	3316      	adds	r3, #22
 8009c24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fd fd10 	bl	800764c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	330b      	adds	r3, #11
 8009c30:	2220      	movs	r2, #32
 8009c32:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fc5f 	bl	80084fe <ld_clust>
 8009c40:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c46:	2200      	movs	r2, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe fc77 	bl	800853c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c50:	331c      	adds	r3, #28
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fd fcf9 	bl	800764c <st_dword>
					fs->wflag = 1;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d037      	beq.n	8009cd6 <f_open+0x1ee>
						dw = fs->winsect;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	2200      	movs	r2, #0
 8009c72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe f98a 	bl	8007f8e <remove_chain>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009c80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d126      	bne.n	8009cd6 <f_open+0x1ee>
							res = move_window(fs, dw);
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fd ff37 	bl	8007b00 <move_window>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c9c:	3a01      	subs	r2, #1
 8009c9e:	611a      	str	r2, [r3, #16]
 8009ca0:	e019      	b.n	8009cd6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009ca2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d115      	bne.n	8009cd6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009caa:	7ebb      	ldrb	r3, [r7, #26]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <f_open+0x1d4>
					res = FR_NO_FILE;
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009cba:	e00c      	b.n	8009cd6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <f_open+0x1ee>
 8009cc6:	7ebb      	ldrb	r3, [r7, #26]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <f_open+0x1ee>
						res = FR_DENIED;
 8009cd0:	2307      	movs	r3, #7
 8009cd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d128      	bne.n	8009d30 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d003      	beq.n	8009cf0 <f_open+0x208>
				mode |= FA_MODIFIED;
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	f023 0301 	bic.w	r3, r3, #1
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f107 0314 	add.w	r3, r7, #20
 8009d14:	4611      	mov	r1, r2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fd fdc0 	bl	800789c <inc_lock>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <f_open+0x248>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f040 8095 	bne.w	8009e64 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fe fbdc 	bl	80084fe <ld_clust>
 8009d46:	4602      	mov	r2, r0
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4e:	331c      	adds	r3, #28
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fd fc3d 	bl	80075d0 <ld_dword>
 8009d56:	4602      	mov	r2, r0
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	88da      	ldrh	r2, [r3, #6]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	79fa      	ldrb	r2, [r7, #7]
 8009d74:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3330      	adds	r3, #48	; 0x30
 8009d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d90:	2100      	movs	r1, #0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fd fca7 	bl	80076e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	f003 0320 	and.w	r3, r3, #32
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d060      	beq.n	8009e64 <f_open+0x37c>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d05c      	beq.n	8009e64 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	895b      	ldrh	r3, [r3, #10]
 8009db6:	025b      	lsls	r3, r3, #9
 8009db8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc6:	e016      	b.n	8009df6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fd ff52 	bl	8007c76 <get_fat>
 8009dd2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d802      	bhi.n	8009de0 <f_open+0x2f8>
 8009dda:	2302      	movs	r3, #2
 8009ddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de6:	d102      	bne.n	8009dee <f_open+0x306>
 8009de8:	2301      	movs	r3, #1
 8009dea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009dee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <f_open+0x31e>
 8009dfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d8e0      	bhi.n	8009dc8 <f_open+0x2e0>
				}
				fp->clust = clst;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e0a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d127      	bne.n	8009e64 <f_open+0x37c>
 8009e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d022      	beq.n	8009e64 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fd ff08 	bl	8007c38 <clust2sect>
 8009e28:	64b8      	str	r0, [r7, #72]	; 0x48
 8009e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d103      	bne.n	8009e38 <f_open+0x350>
						res = FR_INT_ERR;
 8009e30:	2302      	movs	r3, #2
 8009e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009e36:	e015      	b.n	8009e64 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e3a:	0a5a      	lsrs	r2, r3, #9
 8009e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e3e:	441a      	add	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	7858      	ldrb	r0, [r3, #1]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1a      	ldr	r2, [r3, #32]
 8009e52:	2301      	movs	r3, #1
 8009e54:	f7fd fb3e 	bl	80074d4 <disk_read>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <f_open+0x37c>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009e64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009e66:	f001 fa1c 	bl	800b2a2 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <f_open+0x390>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3768      	adds	r7, #104	; 0x68
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	; 0x38
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f107 0214 	add.w	r2, r7, #20
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7ff fda3 	bl	80099f0 <validate>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <f_read+0x44>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	7d5b      	ldrb	r3, [r3, #21]
 8009ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <f_read+0x4a>
 8009ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ecc:	e115      	b.n	800a0fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	7d1b      	ldrb	r3, [r3, #20]
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <f_read+0x5a>
 8009eda:	2307      	movs	r3, #7
 8009edc:	e10d      	b.n	800a0fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	f240 80fe 	bls.w	800a0f0 <f_read+0x26c>
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009ef8:	e0fa      	b.n	800a0f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 80c6 	bne.w	800a094 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	0a5b      	lsrs	r3, r3, #9
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	8952      	ldrh	r2, [r2, #10]
 8009f12:	3a01      	subs	r2, #1
 8009f14:	4013      	ands	r3, r2
 8009f16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d12f      	bne.n	8009f7e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d103      	bne.n	8009f2e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009f2c:	e013      	b.n	8009f56 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7fe f923 	bl	8008188 <clmt_clust>
 8009f42:	6338      	str	r0, [r7, #48]	; 0x30
 8009f44:	e007      	b.n	8009f56 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4610      	mov	r0, r2
 8009f50:	f7fd fe91 	bl	8007c76 <get_fat>
 8009f54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d804      	bhi.n	8009f66 <f_read+0xe2>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	755a      	strb	r2, [r3, #21]
 8009f62:	2302      	movs	r3, #2
 8009f64:	e0c9      	b.n	800a0fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6c:	d104      	bne.n	8009f78 <f_read+0xf4>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	755a      	strb	r2, [r3, #21]
 8009f74:	2301      	movs	r3, #1
 8009f76:	e0c0      	b.n	800a0fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7fd fe56 	bl	8007c38 <clust2sect>
 8009f8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <f_read+0x11a>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2202      	movs	r2, #2
 8009f98:	755a      	strb	r2, [r3, #21]
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e0ad      	b.n	800a0fa <f_read+0x276>
			sect += csect;
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	0a5b      	lsrs	r3, r3, #9
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d039      	beq.n	800a026 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	4413      	add	r3, r2
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	8952      	ldrh	r2, [r2, #10]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d905      	bls.n	8009fcc <f_read+0x148>
					cc = fs->csize - csect;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	895b      	ldrh	r3, [r3, #10]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	7858      	ldrb	r0, [r3, #1]
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fd6:	f7fd fa7d 	bl	80074d4 <disk_read>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <f_read+0x166>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	755a      	strb	r2, [r3, #21]
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e087      	b.n	800a0fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7d1b      	ldrb	r3, [r3, #20]
 8009fee:	b25b      	sxtb	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da14      	bge.n	800a01e <f_read+0x19a>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a1a      	ldr	r2, [r3, #32]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d90d      	bls.n	800a01e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1a      	ldr	r2, [r3, #32]
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	025b      	lsls	r3, r3, #9
 800a00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00e:	18d0      	adds	r0, r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3330      	adds	r3, #48	; 0x30
 800a014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a018:	4619      	mov	r1, r3
 800a01a:	f7fd fb43 	bl	80076a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a020:	025b      	lsls	r3, r3, #9
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a024:	e050      	b.n	800a0c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d02e      	beq.n	800a08e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	7d1b      	ldrb	r3, [r3, #20]
 800a034:	b25b      	sxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	da18      	bge.n	800a06c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	7858      	ldrb	r0, [r3, #1]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6a1a      	ldr	r2, [r3, #32]
 800a048:	2301      	movs	r3, #1
 800a04a:	f7fd fa63 	bl	8007514 <disk_write>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <f_read+0x1da>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2201      	movs	r2, #1
 800a058:	755a      	strb	r2, [r3, #21]
 800a05a:	2301      	movs	r3, #1
 800a05c:	e04d      	b.n	800a0fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	7d1b      	ldrb	r3, [r3, #20]
 800a062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a066:	b2da      	uxtb	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	7858      	ldrb	r0, [r3, #1]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a076:	2301      	movs	r3, #1
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	f7fd fa2b 	bl	80074d4 <disk_read>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <f_read+0x20a>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2201      	movs	r2, #1
 800a088:	755a      	strb	r2, [r3, #21]
 800a08a:	2301      	movs	r3, #1
 800a08c:	e035      	b.n	800a0fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d901      	bls.n	800a0ae <f_read+0x22a>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	4413      	add	r3, r2
 800a0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0c4:	f7fd faee 	bl	80076a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	4413      	add	r3, r2
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	699a      	ldr	r2, [r3, #24]
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	441a      	add	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	619a      	str	r2, [r3, #24]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e2:	441a      	add	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	1ad3      	subs	r3, r2, r3
 800a0ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f47f af01 	bne.w	8009efa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3738      	adds	r7, #56	; 0x38
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b08c      	sub	sp, #48	; 0x30
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f107 0210 	add.w	r2, r7, #16
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff fc64 	bl	80099f0 <validate>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a12e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a132:	2b00      	cmp	r3, #0
 800a134:	d107      	bne.n	800a146 <f_write+0x44>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	7d5b      	ldrb	r3, [r3, #21]
 800a13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a13e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <f_write+0x4a>
 800a146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a14a:	e14b      	b.n	800a3e4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	7d1b      	ldrb	r3, [r3, #20]
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <f_write+0x5a>
 800a158:	2307      	movs	r3, #7
 800a15a:	e143      	b.n	800a3e4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	699a      	ldr	r2, [r3, #24]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	441a      	add	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	429a      	cmp	r2, r3
 800a16a:	f080 812d 	bcs.w	800a3c8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	43db      	mvns	r3, r3
 800a174:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a176:	e127      	b.n	800a3c8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 80e3 	bne.w	800a34c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	0a5b      	lsrs	r3, r3, #9
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	8952      	ldrh	r2, [r2, #10]
 800a190:	3a01      	subs	r2, #1
 800a192:	4013      	ands	r3, r2
 800a194:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d143      	bne.n	800a224 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10c      	bne.n	800a1be <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d11a      	bne.n	800a1e6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fd ff4f 	bl	8008058 <create_chain>
 800a1ba:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1bc:	e013      	b.n	800a1e6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d007      	beq.n	800a1d6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7fd ffdb 	bl	8008188 <clmt_clust>
 800a1d2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1d4:	e007      	b.n	800a1e6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f7fd ff3a 	bl	8008058 <create_chain>
 800a1e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80f2 	beq.w	800a3d2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d104      	bne.n	800a1fe <f_write+0xfc>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	755a      	strb	r2, [r3, #21]
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e0f2      	b.n	800a3e4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d104      	bne.n	800a210 <f_write+0x10e>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	755a      	strb	r2, [r3, #21]
 800a20c:	2301      	movs	r3, #1
 800a20e:	e0e9      	b.n	800a3e4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a214:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <f_write+0x122>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a222:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	7d1b      	ldrb	r3, [r3, #20]
 800a228:	b25b      	sxtb	r3, r3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da18      	bge.n	800a260 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	7858      	ldrb	r0, [r3, #1]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1a      	ldr	r2, [r3, #32]
 800a23c:	2301      	movs	r3, #1
 800a23e:	f7fd f969 	bl	8007514 <disk_write>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <f_write+0x150>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2201      	movs	r2, #1
 800a24c:	755a      	strb	r2, [r3, #21]
 800a24e:	2301      	movs	r3, #1
 800a250:	e0c8      	b.n	800a3e4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7fd fce5 	bl	8007c38 <clust2sect>
 800a26e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d104      	bne.n	800a280 <f_write+0x17e>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2202      	movs	r2, #2
 800a27a:	755a      	strb	r2, [r3, #21]
 800a27c:	2302      	movs	r3, #2
 800a27e:	e0b1      	b.n	800a3e4 <f_write+0x2e2>
			sect += csect;
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	4413      	add	r3, r2
 800a286:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	0a5b      	lsrs	r3, r3, #9
 800a28c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d03c      	beq.n	800a30e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	4413      	add	r3, r2
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	8952      	ldrh	r2, [r2, #10]
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d905      	bls.n	800a2ae <f_write+0x1ac>
					cc = fs->csize - csect;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	895b      	ldrh	r3, [r3, #10]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	7858      	ldrb	r0, [r3, #1]
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	69f9      	ldr	r1, [r7, #28]
 800a2b8:	f7fd f92c 	bl	8007514 <disk_write>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <f_write+0x1ca>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	755a      	strb	r2, [r3, #21]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e08b      	b.n	800a3e4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1a      	ldr	r2, [r3, #32]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	6a3a      	ldr	r2, [r7, #32]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d915      	bls.n	800a306 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a1a      	ldr	r2, [r3, #32]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	025b      	lsls	r3, r3, #9
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	f7fd f9d6 	bl	80076a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	7d1b      	ldrb	r3, [r3, #20]
 800a2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a300:	b2da      	uxtb	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	025b      	lsls	r3, r3, #9
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a30c:	e03f      	b.n	800a38e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	697a      	ldr	r2, [r7, #20]
 800a314:	429a      	cmp	r2, r3
 800a316:	d016      	beq.n	800a346 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a320:	429a      	cmp	r2, r3
 800a322:	d210      	bcs.n	800a346 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	7858      	ldrb	r0, [r3, #1]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a32e:	2301      	movs	r3, #1
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	f7fd f8cf 	bl	80074d4 <disk_read>
 800a336:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d004      	beq.n	800a346 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	755a      	strb	r2, [r3, #21]
 800a342:	2301      	movs	r3, #1
 800a344:	e04e      	b.n	800a3e4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a354:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a358:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d901      	bls.n	800a366 <f_write+0x264>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a374:	4413      	add	r3, r2
 800a376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a378:	69f9      	ldr	r1, [r7, #28]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fd f992 	bl	80076a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	7d1b      	ldrb	r3, [r3, #20]
 800a384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	4413      	add	r3, r2
 800a394:	61fb      	str	r3, [r7, #28]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	441a      	add	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	619a      	str	r2, [r3, #24]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68da      	ldr	r2, [r3, #12]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	bf38      	it	cc
 800a3ae:	461a      	movcc	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	60da      	str	r2, [r3, #12]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	441a      	add	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f47f aed4 	bne.w	800a178 <f_write+0x76>
 800a3d0:	e000      	b.n	800a3d4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a3d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	7d1b      	ldrb	r3, [r3, #20]
 800a3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3730      	adds	r7, #48	; 0x30
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f107 0208 	add.w	r2, r7, #8
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff faf7 	bl	80099f0 <validate>
 800a402:	4603      	mov	r3, r0
 800a404:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d168      	bne.n	800a4de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	7d1b      	ldrb	r3, [r3, #20]
 800a410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d062      	beq.n	800a4de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7d1b      	ldrb	r3, [r3, #20]
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	da15      	bge.n	800a44e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	7858      	ldrb	r0, [r3, #1]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a1a      	ldr	r2, [r3, #32]
 800a430:	2301      	movs	r3, #1
 800a432:	f7fd f86f 	bl	8007514 <disk_write>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <f_sync+0x54>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e04f      	b.n	800a4e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a44e:	f7fd f89f 	bl	8007590 <get_fattime>
 800a452:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7fd fb4f 	bl	8007b00 <move_window>
 800a462:	4603      	mov	r3, r0
 800a464:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d138      	bne.n	800a4de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	330b      	adds	r3, #11
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	330b      	adds	r3, #11
 800a47c:	f042 0220 	orr.w	r2, r2, #32
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	461a      	mov	r2, r3
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	f7fe f854 	bl	800853c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f103 021c 	add.w	r2, r3, #28
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	f7fd f8d3 	bl	800764c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3316      	adds	r3, #22
 800a4aa:	6939      	ldr	r1, [r7, #16]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fd f8cd 	bl	800764c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3312      	adds	r3, #18
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fd f8ac 	bl	8007616 <st_word>
					fs->wflag = 1;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fb48 	bl	8007b5c <sync_fs>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	7d1b      	ldrb	r3, [r3, #20]
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff ff7b 	bl	800a3ec <f_sync>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d118      	bne.n	800a532 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f107 0208 	add.w	r2, r7, #8
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff fa71 	bl	80099f0 <validate>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10c      	bne.n	800a532 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fd fa4b 	bl	80079b8 <dec_lock>
 800a522:	4603      	mov	r3, r0
 800a524:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b090      	sub	sp, #64	; 0x40
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f107 0208 	add.w	r2, r7, #8
 800a54c:	4611      	mov	r1, r2
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fa4e 	bl	80099f0 <validate>
 800a554:	4603      	mov	r3, r0
 800a556:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a55a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <f_lseek+0x2e>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7d5b      	ldrb	r3, [r3, #21]
 800a566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a56a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <f_lseek+0x3c>
 800a572:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a576:	e1e6      	b.n	800a946 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80d1 	beq.w	800a724 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a588:	d15a      	bne.n	800a640 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	1d1a      	adds	r2, r3, #4
 800a594:	627a      	str	r2, [r7, #36]	; 0x24
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	617b      	str	r3, [r7, #20]
 800a59a:	2302      	movs	r3, #2
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d03a      	beq.n	800a620 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	3301      	adds	r3, #1
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fd fb55 	bl	8007c76 <get_fat>
 800a5cc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d804      	bhi.n	800a5de <f_lseek+0xa2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	755a      	strb	r2, [r3, #21]
 800a5da:	2302      	movs	r3, #2
 800a5dc:	e1b3      	b.n	800a946 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e4:	d104      	bne.n	800a5f0 <f_lseek+0xb4>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	755a      	strb	r2, [r3, #21]
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e1aa      	b.n	800a946 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d0de      	beq.n	800a5b8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a5fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d809      	bhi.n	800a616 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	1d1a      	adds	r2, r3, #4
 800a606:	627a      	str	r2, [r7, #36]	; 0x24
 800a608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a60a:	601a      	str	r2, [r3, #0]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	627a      	str	r2, [r7, #36]	; 0x24
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d3c4      	bcc.n	800a5aa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a626:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d803      	bhi.n	800a638 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	e184      	b.n	800a942 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a638:	2311      	movs	r3, #17
 800a63a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a63e:	e180      	b.n	800a942 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	683a      	ldr	r2, [r7, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d902      	bls.n	800a650 <f_lseek+0x114>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 8172 	beq.w	800a942 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	3b01      	subs	r3, #1
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f7fd fd8f 	bl	8008188 <clmt_clust>
 800a66a:	4602      	mov	r2, r0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f7fd fadd 	bl	8007c38 <clust2sect>
 800a67e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d104      	bne.n	800a690 <f_lseek+0x154>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	755a      	strb	r2, [r3, #21]
 800a68c:	2302      	movs	r3, #2
 800a68e:	e15a      	b.n	800a946 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	3b01      	subs	r3, #1
 800a694:	0a5b      	lsrs	r3, r3, #9
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	8952      	ldrh	r2, [r2, #10]
 800a69a:	3a01      	subs	r2, #1
 800a69c:	4013      	ands	r3, r2
 800a69e:	69ba      	ldr	r2, [r7, #24]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 8148 	beq.w	800a942 <f_lseek+0x406>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	f000 8142 	beq.w	800a942 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7d1b      	ldrb	r3, [r3, #20]
 800a6c2:	b25b      	sxtb	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da18      	bge.n	800a6fa <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	7858      	ldrb	r0, [r3, #1]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1a      	ldr	r2, [r3, #32]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f7fc ff1c 	bl	8007514 <disk_write>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d004      	beq.n	800a6ec <f_lseek+0x1b0>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	755a      	strb	r2, [r3, #21]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e12c      	b.n	800a946 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
 800a6f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	7858      	ldrb	r0, [r3, #1]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a704:	2301      	movs	r3, #1
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	f7fc fee4 	bl	80074d4 <disk_read>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d004      	beq.n	800a71c <f_lseek+0x1e0>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	755a      	strb	r2, [r3, #21]
 800a718:	2301      	movs	r3, #1
 800a71a:	e114      	b.n	800a946 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	621a      	str	r2, [r3, #32]
 800a722:	e10e      	b.n	800a942 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d908      	bls.n	800a740 <f_lseek+0x204>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	7d1b      	ldrb	r3, [r3, #20]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d102      	bne.n	800a740 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	699b      	ldr	r3, [r3, #24]
 800a744:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a74e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	f000 80a7 	beq.w	800a8a6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	895b      	ldrh	r3, [r3, #10]
 800a75c:	025b      	lsls	r3, r3, #9
 800a75e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01b      	beq.n	800a79e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	1e5a      	subs	r2, r3, #1
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	1e59      	subs	r1, r3, #1
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d30f      	bcc.n	800a79e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	425b      	negs	r3, r3
 800a786:	401a      	ands	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a79c:	e022      	b.n	800a7e4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d119      	bne.n	800a7de <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fd fc52 	bl	8008058 <create_chain>
 800a7b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d104      	bne.n	800a7c6 <f_lseek+0x28a>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2202      	movs	r2, #2
 800a7c0:	755a      	strb	r2, [r3, #21]
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e0bf      	b.n	800a946 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7cc:	d104      	bne.n	800a7d8 <f_lseek+0x29c>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	755a      	strb	r2, [r3, #21]
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e0b6      	b.n	800a946 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d05d      	beq.n	800a8a6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a7ea:	e03a      	b.n	800a862 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	441a      	add	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	7d1b      	ldrb	r3, [r3, #20]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fc21 	bl	8008058 <create_chain>
 800a816:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d108      	bne.n	800a830 <f_lseek+0x2f4>
							ofs = 0; break;
 800a81e:	2300      	movs	r3, #0
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	e022      	b.n	800a86a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fd fa24 	bl	8007c76 <get_fat>
 800a82e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a836:	d104      	bne.n	800a842 <f_lseek+0x306>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	755a      	strb	r2, [r3, #21]
 800a83e:	2301      	movs	r3, #1
 800a840:	e081      	b.n	800a946 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	2b01      	cmp	r3, #1
 800a846:	d904      	bls.n	800a852 <f_lseek+0x316>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a84e:	429a      	cmp	r2, r3
 800a850:	d304      	bcc.n	800a85c <f_lseek+0x320>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2202      	movs	r2, #2
 800a856:	755a      	strb	r2, [r3, #21]
 800a858:	2302      	movs	r3, #2
 800a85a:	e074      	b.n	800a946 <f_lseek+0x40a>
					fp->clust = clst;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a860:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	429a      	cmp	r2, r3
 800a868:	d8c0      	bhi.n	800a7ec <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699a      	ldr	r2, [r3, #24]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d012      	beq.n	800a8a6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a884:	4618      	mov	r0, r3
 800a886:	f7fd f9d7 	bl	8007c38 <clust2sect>
 800a88a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <f_lseek+0x360>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2202      	movs	r2, #2
 800a896:	755a      	strb	r2, [r3, #21]
 800a898:	2302      	movs	r3, #2
 800a89a:	e054      	b.n	800a946 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	0a5b      	lsrs	r3, r3, #9
 800a8a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a2:	4413      	add	r3, r2
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d90a      	bls.n	800a8c8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	699a      	ldr	r2, [r3, #24]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	7d1b      	ldrb	r3, [r3, #20]
 800a8be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d036      	beq.n	800a942 <f_lseek+0x406>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d031      	beq.n	800a942 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7d1b      	ldrb	r3, [r3, #20]
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	da18      	bge.n	800a91a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	7858      	ldrb	r0, [r3, #1]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1a      	ldr	r2, [r3, #32]
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f7fc fe0c 	bl	8007514 <disk_write>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <f_lseek+0x3d0>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	755a      	strb	r2, [r3, #21]
 800a908:	2301      	movs	r3, #1
 800a90a:	e01c      	b.n	800a946 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7d1b      	ldrb	r3, [r3, #20]
 800a910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a914:	b2da      	uxtb	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	7858      	ldrb	r0, [r3, #1]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a924:	2301      	movs	r3, #1
 800a926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a928:	f7fc fdd4 	bl	80074d4 <disk_read>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d004      	beq.n	800a93c <f_lseek+0x400>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	755a      	strb	r2, [r3, #21]
 800a938:	2301      	movs	r3, #1
 800a93a:	e004      	b.n	800a946 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a940:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a942:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a946:	4618      	mov	r0, r3
 800a948:	3740      	adds	r7, #64	; 0x40
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <f_opendir+0x14>
 800a95e:	2309      	movs	r3, #9
 800a960:	e074      	b.n	800aa4c <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a966:	f107 0108 	add.w	r1, r7, #8
 800a96a:	463b      	mov	r3, r7
 800a96c:	2200      	movs	r2, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fdf2 	bl	8009558 <find_volume>
 800a974:	4603      	mov	r3, r0
 800a976:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d15f      	bne.n	800aa3e <f_opendir+0xf0>
		obj->fs = fs;
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a984:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a988:	f000 fc7f 	bl	800b28a <ff_memalloc>
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <f_opendir+0x4a>
 800a994:	2311      	movs	r3, #17
 800a996:	e059      	b.n	800aa4c <f_opendir+0xfe>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7fe fccc 	bl	8009340 <follow_path>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d13d      	bne.n	800aa2e <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	db12      	blt.n	800a9e4 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	799b      	ldrb	r3, [r3, #6]
 800a9c2:	f003 0310 	and.w	r3, r3, #16
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	f7fd fd93 	bl	80084fe <ld_clust>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	609a      	str	r2, [r3, #8]
 800a9de:	e001      	b.n	800a9e4 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a9e0:	2305      	movs	r3, #5
 800a9e2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d121      	bne.n	800aa2e <f_opendir+0xe0>
				obj->id = fs->id;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	88da      	ldrh	r2, [r3, #6]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7fd fbfb 	bl	80081f0 <dir_sdi>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d114      	bne.n	800aa2e <f_opendir+0xe0>
					if (obj->sclust) {
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00d      	beq.n	800aa28 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7fc ff44 	bl	800789c <inc_lock>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <f_opendir+0xe0>
 800aa22:	2312      	movs	r3, #18
 800aa24:	75fb      	strb	r3, [r7, #23]
 800aa26:	e002      	b.n	800aa2e <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fc37 	bl	800b2a2 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d101      	bne.n	800aa3e <f_opendir+0xf0>
 800aa3a:	2305      	movs	r3, #5
 800aa3c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <f_opendir+0xfc>
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f107 0208 	add.w	r2, r7, #8
 800aa62:	4611      	mov	r1, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe ffc3 	bl	80099f0 <validate>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d110      	bne.n	800aa96 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d006      	beq.n	800aa8a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fc ff99 	bl	80079b8 <dec_lock>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f107 020c 	add.w	r2, r7, #12
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe ff9c 	bl	80099f0 <validate>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d136      	bne.n	800ab30 <f_readdir+0x90>
		if (!fno) {
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800aac8:	2100      	movs	r1, #0
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f7fd fb90 	bl	80081f0 <dir_sdi>
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]
 800aad4:	e02c      	b.n	800ab30 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800aad6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aada:	f000 fbd6 	bl	800b28a <ff_memalloc>
 800aade:	6138      	str	r0, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <f_readdir+0x4a>
 800aae6:	2311      	movs	r3, #17
 800aae8:	e023      	b.n	800ab32 <f_readdir+0x92>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7fd ff2e 	bl	8008954 <dir_read>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b04      	cmp	r3, #4
 800ab00:	d101      	bne.n	800ab06 <f_readdir+0x66>
 800ab02:	2300      	movs	r3, #0
 800ab04:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10e      	bne.n	800ab2a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fe f980 	bl	8008e14 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ab14:	2100      	movs	r1, #0
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7fd fbe5 	bl	80082e6 <dir_next>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d101      	bne.n	800ab2a <f_readdir+0x8a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f000 fbb9 	bl	800b2a2 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b092      	sub	sp, #72	; 0x48
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ab46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ab4a:	f107 030c 	add.w	r3, r7, #12
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fd01 	bl	8009558 <find_volume>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800ab5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f040 8099 	bne.w	800ac98 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ab66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	695a      	ldr	r2, [r3, #20]
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	3b02      	subs	r3, #2
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d804      	bhi.n	800ab84 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	695a      	ldr	r2, [r3, #20]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	e089      	b.n	800ac98 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d128      	bne.n	800abe2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ab90:	2302      	movs	r3, #2
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd f869 	bl	8007c76 <get_fat>
 800aba4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d103      	bne.n	800abb6 <f_getfree+0x7c>
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800abb4:	e063      	b.n	800ac7e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d103      	bne.n	800abc4 <f_getfree+0x8a>
 800abbc:	2302      	movs	r3, #2
 800abbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800abc2:	e05c      	b.n	800ac7e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <f_getfree+0x96>
 800abca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abcc:	3301      	adds	r3, #1
 800abce:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800abd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd2:	3301      	adds	r3, #1
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abdc:	429a      	cmp	r2, r3
 800abde:	d3db      	bcc.n	800ab98 <f_getfree+0x5e>
 800abe0:	e04d      	b.n	800ac7e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
 800abf2:	2300      	movs	r3, #0
 800abf4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800abf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d113      	bne.n	800ac24 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800abfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	63ba      	str	r2, [r7, #56]	; 0x38
 800ac04:	4619      	mov	r1, r3
 800ac06:	f7fc ff7b 	bl	8007b00 <move_window>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ac10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d131      	bne.n	800ac7c <f_getfree+0x142>
							p = fs->win;
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	3334      	adds	r3, #52	; 0x34
 800ac1c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ac1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac22:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d10f      	bne.n	800ac4c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ac2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2e:	f7fc fcb7 	bl	80075a0 <ld_word>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <f_getfree+0x104>
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	3302      	adds	r3, #2
 800ac42:	633b      	str	r3, [r7, #48]	; 0x30
 800ac44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac46:	3b02      	subs	r3, #2
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
 800ac4a:	e010      	b.n	800ac6e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ac4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac4e:	f7fc fcbf 	bl	80075d0 <ld_dword>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <f_getfree+0x128>
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	3301      	adds	r3, #1
 800ac60:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	3304      	adds	r3, #4
 800ac66:	633b      	str	r3, [r7, #48]	; 0x30
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	3b04      	subs	r3, #4
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac70:	3b01      	subs	r3, #1
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1bd      	bne.n	800abf6 <f_getfree+0xbc>
 800ac7a:	e000      	b.n	800ac7e <f_getfree+0x144>
							if (res != FR_OK) break;
 800ac7c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac82:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac88:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	791a      	ldrb	r2, [r3, #4]
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	f042 0201 	orr.w	r2, r2, #1
 800ac94:	b2d2      	uxtb	r2, r2
 800ac96:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ac98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3748      	adds	r7, #72	; 0x48
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	2b0a      	cmp	r3, #10
 800acb4:	d103      	bne.n	800acbe <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800acb6:	210d      	movs	r1, #13
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff fff3 	bl	800aca4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	db25      	blt.n	800ad16 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	60fa      	str	r2, [r7, #12]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	4413      	add	r3, r2
 800acd4:	78fa      	ldrb	r2, [r7, #3]
 800acd6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b3c      	cmp	r3, #60	; 0x3c
 800acdc:	dd12      	ble.n	800ad04 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f103 010c 	add.w	r1, r3, #12
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f107 0308 	add.w	r3, r7, #8
 800acee:	f7ff fa08 	bl	800a102 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d101      	bne.n	800acfe <putc_bfd+0x5a>
 800acfa:	2300      	movs	r3, #0
 800acfc:	e001      	b.n	800ad02 <putc_bfd+0x5e>
 800acfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ad02:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	609a      	str	r2, [r3, #8]
 800ad14:	e000      	b.n	800ad18 <putc_bfd+0x74>
	if (i < 0) return;
 800ad16:	bf00      	nop
}
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	db17      	blt.n	800ad5e <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f103 010c 	add.w	r1, r3, #12
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f107 030c 	add.w	r3, r7, #12
 800ad42:	f7ff f9de 	bl	800a102 <f_write>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d108      	bne.n	800ad5e <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	461a      	mov	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d102      	bne.n	800ad5e <putc_flush+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	e001      	b.n	800ad62 <putc_flush+0x44>
	return EOF;
 800ad5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	605a      	str	r2, [r3, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	609a      	str	r2, [r3, #8]
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800ad94:	b40e      	push	{r1, r2, r3}
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b0a7      	sub	sp, #156	; 0x9c
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800ad9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff ffe0 	bl	800ad6a <putc_init>

	va_start(arp, fmt);
 800adaa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800adae:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800adb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800adc0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f000 81f4 	beq.w	800b1b2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800adca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800adce:	2b25      	cmp	r3, #37	; 0x25
 800add0:	d008      	beq.n	800ade4 <f_printf+0x50>
			putc_bfd(&pb, c);
 800add2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800add6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff ff61 	bl	800aca4 <putc_bfd>
			continue;
 800ade2:	e1e5      	b.n	800b1b0 <f_printf+0x41c>
		}
		w = f = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800adea:	2300      	movs	r3, #0
 800adec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800adf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ae00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae04:	2b30      	cmp	r3, #48	; 0x30
 800ae06:	d10b      	bne.n	800ae20 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ae1e:	e024      	b.n	800ae6a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ae20:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae24:	2b2d      	cmp	r3, #45	; 0x2d
 800ae26:	d120      	bne.n	800ae6a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ae3e:	e014      	b.n	800ae6a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ae40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae52:	4413      	add	r3, r2
 800ae54:	3b30      	subs	r3, #48	; 0x30
 800ae56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800ae5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800ae6a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ae70:	d903      	bls.n	800ae7a <f_printf+0xe6>
 800ae72:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae76:	2b39      	cmp	r3, #57	; 0x39
 800ae78:	d9e2      	bls.n	800ae40 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800ae7a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae7e:	2b6c      	cmp	r3, #108	; 0x6c
 800ae80:	d003      	beq.n	800ae8a <f_printf+0xf6>
 800ae82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ae86:	2b4c      	cmp	r3, #76	; 0x4c
 800ae88:	d10d      	bne.n	800aea6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800ae8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae8e:	f043 0304 	orr.w	r3, r3, #4
 800ae92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ae96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800aea6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 8183 	beq.w	800b1b6 <f_printf+0x422>
		d = c;
 800aeb0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aeb4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800aeb8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aebc:	2b60      	cmp	r3, #96	; 0x60
 800aebe:	d908      	bls.n	800aed2 <f_printf+0x13e>
 800aec0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aec4:	2b7a      	cmp	r3, #122	; 0x7a
 800aec6:	d804      	bhi.n	800aed2 <f_printf+0x13e>
 800aec8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aecc:	3b20      	subs	r3, #32
 800aece:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800aed2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aed6:	3b42      	subs	r3, #66	; 0x42
 800aed8:	2b16      	cmp	r3, #22
 800aeda:	f200 8098 	bhi.w	800b00e <f_printf+0x27a>
 800aede:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <f_printf+0x150>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800afef 	.word	0x0800afef
 800aee8:	0800afd7 	.word	0x0800afd7
 800aeec:	0800afff 	.word	0x0800afff
 800aef0:	0800b00f 	.word	0x0800b00f
 800aef4:	0800b00f 	.word	0x0800b00f
 800aef8:	0800b00f 	.word	0x0800b00f
 800aefc:	0800b00f 	.word	0x0800b00f
 800af00:	0800b00f 	.word	0x0800b00f
 800af04:	0800b00f 	.word	0x0800b00f
 800af08:	0800b00f 	.word	0x0800b00f
 800af0c:	0800b00f 	.word	0x0800b00f
 800af10:	0800b00f 	.word	0x0800b00f
 800af14:	0800b00f 	.word	0x0800b00f
 800af18:	0800aff7 	.word	0x0800aff7
 800af1c:	0800b00f 	.word	0x0800b00f
 800af20:	0800b00f 	.word	0x0800b00f
 800af24:	0800b00f 	.word	0x0800b00f
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800b00f 	.word	0x0800b00f
 800af30:	0800afff 	.word	0x0800afff
 800af34:	0800b00f 	.word	0x0800b00f
 800af38:	0800b00f 	.word	0x0800b00f
 800af3c:	0800b007 	.word	0x0800b007
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800af40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	67ba      	str	r2, [r7, #120]	; 0x78
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800af4a:	2300      	movs	r3, #0
 800af4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af50:	e004      	b.n	800af5c <f_printf+0x1c8>
 800af52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af56:	3301      	adds	r3, #1
 800af58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800af5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af62:	4413      	add	r3, r2
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1f3      	bne.n	800af52 <f_printf+0x1be>
			if (!(f & 2)) {
 800af6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af6e:	f003 0302 	and.w	r3, r3, #2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d11a      	bne.n	800afac <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800af76:	e005      	b.n	800af84 <f_printf+0x1f0>
 800af78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af7c:	2120      	movs	r1, #32
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fe90 	bl	800aca4 <putc_bfd>
 800af84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800af8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800af92:	429a      	cmp	r2, r3
 800af94:	d8f0      	bhi.n	800af78 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800af96:	e009      	b.n	800afac <f_printf+0x218>
 800af98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fe7c 	bl	800aca4 <putc_bfd>
 800afac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f1      	bne.n	800af98 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800afb4:	e005      	b.n	800afc2 <f_printf+0x22e>
 800afb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afba:	2120      	movs	r1, #32
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fe71 	bl	800aca4 <putc_bfd>
 800afc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d8f0      	bhi.n	800afb6 <f_printf+0x222>
			continue;
 800afd4:	e0ec      	b.n	800b1b0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800afd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	67ba      	str	r2, [r7, #120]	; 0x78
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff fe5c 	bl	800aca4 <putc_bfd>
 800afec:	e0e0      	b.n	800b1b0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800afee:	2302      	movs	r3, #2
 800aff0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800aff4:	e014      	b.n	800b020 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800aff6:	2308      	movs	r3, #8
 800aff8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800affc:	e010      	b.n	800b020 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800affe:	230a      	movs	r3, #10
 800b000:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b004:	e00c      	b.n	800b020 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800b006:	2310      	movs	r3, #16
 800b008:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800b00c:	e008      	b.n	800b020 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800b00e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800b012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b016:	4611      	mov	r1, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fe43 	bl	800aca4 <putc_bfd>
 800b01e:	e0c7      	b.n	800b1b0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800b020:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <f_printf+0x2a2>
 800b02c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	67ba      	str	r2, [r7, #120]	; 0x78
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	e00c      	b.n	800b050 <f_printf+0x2bc>
 800b036:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b03a:	2b44      	cmp	r3, #68	; 0x44
 800b03c:	d104      	bne.n	800b048 <f_printf+0x2b4>
 800b03e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	67ba      	str	r2, [r7, #120]	; 0x78
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	e003      	b.n	800b050 <f_printf+0x2bc>
 800b048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b04a:	1d1a      	adds	r2, r3, #4
 800b04c:	67ba      	str	r2, [r7, #120]	; 0x78
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800b054:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b058:	2b44      	cmp	r3, #68	; 0x44
 800b05a:	d10e      	bne.n	800b07a <f_printf+0x2e6>
 800b05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b060:	2b00      	cmp	r3, #0
 800b062:	da0a      	bge.n	800b07a <f_printf+0x2e6>
			v = 0 - v;
 800b064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b068:	425b      	negs	r3, r3
 800b06a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800b06e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b072:	f043 0308 	orr.w	r3, r3, #8
 800b076:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800b080:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800b084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b088:	fbb3 f1f2 	udiv	r1, r3, r2
 800b08c:	fb02 f201 	mul.w	r2, r2, r1
 800b090:	1a9b      	subs	r3, r3, r2
 800b092:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800b096:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800b09a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800b0a6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	d90b      	bls.n	800b0c6 <f_printf+0x332>
 800b0ae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b0b2:	2b78      	cmp	r3, #120	; 0x78
 800b0b4:	d101      	bne.n	800b0ba <f_printf+0x326>
 800b0b6:	2227      	movs	r2, #39	; 0x27
 800b0b8:	e000      	b.n	800b0bc <f_printf+0x328>
 800b0ba:	2207      	movs	r2, #7
 800b0bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800b0c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b0d0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b0d4:	3230      	adds	r2, #48	; 0x30
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800b0dc:	440b      	add	r3, r1
 800b0de:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800b0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <f_printf+0x35e>
 800b0ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0ee:	2b1f      	cmp	r3, #31
 800b0f0:	d9c6      	bls.n	800b080 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800b0f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b0f6:	f003 0308 	and.w	r3, r3, #8
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <f_printf+0x380>
 800b0fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b102:	1c5a      	adds	r2, r3, #1
 800b104:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b108:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800b10c:	4413      	add	r3, r2
 800b10e:	222d      	movs	r2, #45	; 0x2d
 800b110:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800b114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b11c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <f_printf+0x398>
 800b128:	2330      	movs	r3, #48	; 0x30
 800b12a:	e000      	b.n	800b12e <f_printf+0x39a>
 800b12c:	2320      	movs	r3, #32
 800b12e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800b132:	e007      	b.n	800b144 <f_printf+0x3b0>
 800b134:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b13c:	4611      	mov	r1, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fdb0 	bl	800aca4 <putc_bfd>
 800b144:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d108      	bne.n	800b162 <f_printf+0x3ce>
 800b150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b15a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b15e:	429a      	cmp	r2, r3
 800b160:	d8e8      	bhi.n	800b134 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800b162:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b166:	3b01      	subs	r3, #1
 800b168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b16c:	f107 020c 	add.w	r2, r7, #12
 800b170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b174:	4413      	add	r3, r2
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fd90 	bl	800aca4 <putc_bfd>
		} while (i);
 800b184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1ea      	bne.n	800b162 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800b18c:	e007      	b.n	800b19e <f_printf+0x40a>
 800b18e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800b192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff fd83 	bl	800aca4 <putc_bfd>
 800b19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d8ee      	bhi.n	800b18e <f_printf+0x3fa>
		c = *fmt++;
 800b1b0:	e5fe      	b.n	800adb0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800b1b2:	bf00      	nop
 800b1b4:	e000      	b.n	800b1b8 <f_printf+0x424>
		if (!c) break;
 800b1b6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b1b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff fdae 	bl	800ad1e <putc_flush>
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	379c      	adds	r7, #156	; 0x9c
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1ce:	b003      	add	sp, #12
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop

0800b1d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1ea:	4b1f      	ldr	r3, [pc, #124]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1ec:	7b9b      	ldrb	r3, [r3, #14]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d831      	bhi.n	800b258 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1f4:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1f6:	7b9b      	ldrb	r3, [r3, #14]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b1fe:	2100      	movs	r1, #0
 800b200:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b202:	4b19      	ldr	r3, [pc, #100]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b204:	7b9b      	ldrb	r3, [r3, #14]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	4a17      	ldr	r2, [pc, #92]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b214:	7b9b      	ldrb	r3, [r3, #14]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	461a      	mov	r2, r3
 800b21a:	4b13      	ldr	r3, [pc, #76]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b21c:	4413      	add	r3, r2
 800b21e:	79fa      	ldrb	r2, [r7, #7]
 800b220:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b224:	7b9b      	ldrb	r3, [r3, #14]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	b2d1      	uxtb	r1, r2
 800b22c:	4a0e      	ldr	r2, [pc, #56]	; (800b268 <FATFS_LinkDriverEx+0x94>)
 800b22e:	7391      	strb	r1, [r2, #14]
 800b230:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b232:	7dbb      	ldrb	r3, [r7, #22]
 800b234:	3330      	adds	r3, #48	; 0x30
 800b236:	b2da      	uxtb	r2, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	3301      	adds	r3, #1
 800b240:	223a      	movs	r2, #58	; 0x3a
 800b242:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3302      	adds	r3, #2
 800b248:	222f      	movs	r2, #47	; 0x2f
 800b24a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3303      	adds	r3, #3
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	2000a488 	.word	0x2000a488

0800b26c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b276:	2200      	movs	r2, #0
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff ffaa 	bl	800b1d4 <FATFS_LinkDriverEx>
 800b280:	4603      	mov	r3, r0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b082      	sub	sp, #8
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f006 fef2 	bl	801207c <malloc>
 800b298:	4603      	mov	r3, r0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b082      	sub	sp, #8
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f006 feee 	bl	801208c <free>
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	6039      	str	r1, [r7, #0]
 800b2c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	2b7f      	cmp	r3, #127	; 0x7f
 800b2c8:	d802      	bhi.n	800b2d0 <ff_convert+0x18>
		c = chr;
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	81fb      	strh	r3, [r7, #14]
 800b2ce:	e025      	b.n	800b31c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	2bff      	cmp	r3, #255	; 0xff
 800b2da:	d805      	bhi.n	800b2e8 <ff_convert+0x30>
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	3b80      	subs	r3, #128	; 0x80
 800b2e0:	4a12      	ldr	r2, [pc, #72]	; (800b32c <ff_convert+0x74>)
 800b2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e6:	e000      	b.n	800b2ea <ff_convert+0x32>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	81fb      	strh	r3, [r7, #14]
 800b2ec:	e016      	b.n	800b31c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	81fb      	strh	r3, [r7, #14]
 800b2f2:	e009      	b.n	800b308 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b2f4:	89fb      	ldrh	r3, [r7, #14]
 800b2f6:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <ff_convert+0x74>)
 800b2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fc:	88fa      	ldrh	r2, [r7, #6]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d006      	beq.n	800b310 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b302:	89fb      	ldrh	r3, [r7, #14]
 800b304:	3301      	adds	r3, #1
 800b306:	81fb      	strh	r3, [r7, #14]
 800b308:	89fb      	ldrh	r3, [r7, #14]
 800b30a:	2b7f      	cmp	r3, #127	; 0x7f
 800b30c:	d9f2      	bls.n	800b2f4 <ff_convert+0x3c>
 800b30e:	e000      	b.n	800b312 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b310:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b312:	89fb      	ldrh	r3, [r7, #14]
 800b314:	3380      	adds	r3, #128	; 0x80
 800b316:	b29b      	uxth	r3, r3
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b31c:	89fb      	ldrh	r3, [r7, #14]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	08022064 	.word	0x08022064

0800b330 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b340:	d201      	bcs.n	800b346 <ff_wtoupper+0x16>
 800b342:	4b3e      	ldr	r3, [pc, #248]	; (800b43c <ff_wtoupper+0x10c>)
 800b344:	e000      	b.n	800b348 <ff_wtoupper+0x18>
 800b346:	4b3e      	ldr	r3, [pc, #248]	; (800b440 <ff_wtoupper+0x110>)
 800b348:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	1c9a      	adds	r2, r3, #2
 800b34e:	617a      	str	r2, [r7, #20]
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b354:	8a7b      	ldrh	r3, [r7, #18]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d068      	beq.n	800b42c <ff_wtoupper+0xfc>
 800b35a:	88fa      	ldrh	r2, [r7, #6]
 800b35c:	8a7b      	ldrh	r3, [r7, #18]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d364      	bcc.n	800b42c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	1c9a      	adds	r2, r3, #2
 800b366:	617a      	str	r2, [r7, #20]
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	823b      	strh	r3, [r7, #16]
 800b36c:	8a3b      	ldrh	r3, [r7, #16]
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	81fb      	strh	r3, [r7, #14]
 800b372:	8a3b      	ldrh	r3, [r7, #16]
 800b374:	b2db      	uxtb	r3, r3
 800b376:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b378:	88fa      	ldrh	r2, [r7, #6]
 800b37a:	8a79      	ldrh	r1, [r7, #18]
 800b37c:	8a3b      	ldrh	r3, [r7, #16]
 800b37e:	440b      	add	r3, r1
 800b380:	429a      	cmp	r2, r3
 800b382:	da49      	bge.n	800b418 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b384:	89fb      	ldrh	r3, [r7, #14]
 800b386:	2b08      	cmp	r3, #8
 800b388:	d84f      	bhi.n	800b42a <ff_wtoupper+0xfa>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <ff_wtoupper+0x60>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3b5 	.word	0x0800b3b5
 800b394:	0800b3c7 	.word	0x0800b3c7
 800b398:	0800b3dd 	.word	0x0800b3dd
 800b39c:	0800b3e5 	.word	0x0800b3e5
 800b3a0:	0800b3ed 	.word	0x0800b3ed
 800b3a4:	0800b3f5 	.word	0x0800b3f5
 800b3a8:	0800b3fd 	.word	0x0800b3fd
 800b3ac:	0800b405 	.word	0x0800b405
 800b3b0:	0800b40d 	.word	0x0800b40d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b3b4:	88fa      	ldrh	r2, [r7, #6]
 800b3b6:	8a7b      	ldrh	r3, [r7, #18]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	4413      	add	r3, r2
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	80fb      	strh	r3, [r7, #6]
 800b3c4:	e027      	b.n	800b416 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b3c6:	88fa      	ldrh	r2, [r7, #6]
 800b3c8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	88fa      	ldrh	r2, [r7, #6]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	80fb      	strh	r3, [r7, #6]
 800b3da:	e01c      	b.n	800b416 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b3dc:	88fb      	ldrh	r3, [r7, #6]
 800b3de:	3b10      	subs	r3, #16
 800b3e0:	80fb      	strh	r3, [r7, #6]
 800b3e2:	e018      	b.n	800b416 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b3e4:	88fb      	ldrh	r3, [r7, #6]
 800b3e6:	3b20      	subs	r3, #32
 800b3e8:	80fb      	strh	r3, [r7, #6]
 800b3ea:	e014      	b.n	800b416 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	3b30      	subs	r3, #48	; 0x30
 800b3f0:	80fb      	strh	r3, [r7, #6]
 800b3f2:	e010      	b.n	800b416 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b3f4:	88fb      	ldrh	r3, [r7, #6]
 800b3f6:	3b1a      	subs	r3, #26
 800b3f8:	80fb      	strh	r3, [r7, #6]
 800b3fa:	e00c      	b.n	800b416 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b3fc:	88fb      	ldrh	r3, [r7, #6]
 800b3fe:	3308      	adds	r3, #8
 800b400:	80fb      	strh	r3, [r7, #6]
 800b402:	e008      	b.n	800b416 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b404:	88fb      	ldrh	r3, [r7, #6]
 800b406:	3b50      	subs	r3, #80	; 0x50
 800b408:	80fb      	strh	r3, [r7, #6]
 800b40a:	e004      	b.n	800b416 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b40c:	88fb      	ldrh	r3, [r7, #6]
 800b40e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b412:	80fb      	strh	r3, [r7, #6]
 800b414:	bf00      	nop
			}
			break;
 800b416:	e008      	b.n	800b42a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b418:	89fb      	ldrh	r3, [r7, #14]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d195      	bne.n	800b34a <ff_wtoupper+0x1a>
 800b41e:	8a3b      	ldrh	r3, [r7, #16]
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	4413      	add	r3, r2
 800b426:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b428:	e78f      	b.n	800b34a <ff_wtoupper+0x1a>
			break;
 800b42a:	bf00      	nop
	}

	return chr;
 800b42c:	88fb      	ldrh	r3, [r7, #6]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	08022164 	.word	0x08022164
 800b440:	08022358 	.word	0x08022358

0800b444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <HAL_Init+0x40>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a0d      	ldr	r2, [pc, #52]	; (800b484 <HAL_Init+0x40>)
 800b44e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b454:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <HAL_Init+0x40>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <HAL_Init+0x40>)
 800b45a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b45e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <HAL_Init+0x40>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a07      	ldr	r2, [pc, #28]	; (800b484 <HAL_Init+0x40>)
 800b466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b46c:	2003      	movs	r0, #3
 800b46e:	f000 fea9 	bl	800c1c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b472:	2000      	movs	r0, #0
 800b474:	f000 f808 	bl	800b488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b478:	f7f5 ff3a 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	40023c00 	.word	0x40023c00

0800b488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <HAL_InitTick+0x54>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <HAL_InitTick+0x58>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	4619      	mov	r1, r3
 800b49a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b49e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fecf 	bl	800c24a <HAL_SYSTICK_Config>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e00e      	b.n	800b4d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b0f      	cmp	r3, #15
 800b4ba:	d80a      	bhi.n	800b4d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b4bc:	2200      	movs	r2, #0
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c4:	f000 fe89 	bl	800c1da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b4c8:	4a06      	ldr	r2, [pc, #24]	; (800b4e4 <HAL_InitTick+0x5c>)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e000      	b.n	800b4d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	20000000 	.word	0x20000000
 800b4e0:	20000060 	.word	0x20000060
 800b4e4:	2000005c 	.word	0x2000005c

0800b4e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b4ec:	4b06      	ldr	r3, [pc, #24]	; (800b508 <HAL_IncTick+0x20>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4b06      	ldr	r3, [pc, #24]	; (800b50c <HAL_IncTick+0x24>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	4a04      	ldr	r2, [pc, #16]	; (800b50c <HAL_IncTick+0x24>)
 800b4fa:	6013      	str	r3, [r2, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000060 	.word	0x20000060
 800b50c:	2000af64 	.word	0x2000af64

0800b510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  return uwTick;
 800b514:	4b03      	ldr	r3, [pc, #12]	; (800b524 <HAL_GetTick+0x14>)
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	2000af64 	.word	0x2000af64

0800b528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b530:	f7ff ffee 	bl	800b510 <HAL_GetTick>
 800b534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b540:	d005      	beq.n	800b54e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <HAL_Delay+0x40>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b54e:	bf00      	nop
 800b550:	f7ff ffde 	bl	800b510 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d8f7      	bhi.n	800b550 <HAL_Delay+0x28>
  {
  }
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	20000060 	.word	0x20000060

0800b56c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e033      	b.n	800b5ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7fa fcc6 	bl	8005f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d118      	bne.n	800b5dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b5b2:	f023 0302 	bic.w	r3, r3, #2
 800b5b6:	f043 0202 	orr.w	r2, r3, #2
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb86 	bl	800bcd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ce:	f023 0303 	bic.w	r3, r3, #3
 800b5d2:	f043 0201 	orr.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	641a      	str	r2, [r3, #64]	; 0x40
 800b5da:	e001      	b.n	800b5e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	bf0c      	ite	eq
 800b610:	2301      	moveq	r3, #1
 800b612:	2300      	movne	r3, #0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b20      	cmp	r3, #32
 800b624:	bf0c      	ite	eq
 800b626:	2301      	moveq	r3, #1
 800b628:	2300      	movne	r3, #0
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d049      	beq.n	800b6c8 <HAL_ADC_IRQHandler+0xd6>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d046      	beq.n	800b6c8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	f003 0310 	and.w	r3, r3, #16
 800b642:	2b00      	cmp	r3, #0
 800b644:	d105      	bne.n	800b652 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d12b      	bne.n	800b6b8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800b664:	2b00      	cmp	r3, #0
 800b666:	d127      	bne.n	800b6b8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800b680:	2b00      	cmp	r3, #0
 800b682:	d119      	bne.n	800b6b8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0220 	bic.w	r2, r2, #32
 800b692:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b698:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d105      	bne.n	800b6b8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b0:	f043 0201 	orr.w	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 f9af 	bl	800ba1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f06f 0212 	mvn.w	r2, #18
 800b6c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	bf0c      	ite	eq
 800b6d6:	2301      	moveq	r3, #1
 800b6d8:	2300      	movne	r3, #0
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e8:	2b80      	cmp	r3, #128	; 0x80
 800b6ea:	bf0c      	ite	eq
 800b6ec:	2301      	moveq	r3, #1
 800b6ee:	2300      	movne	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d057      	beq.n	800b7aa <HAL_ADC_IRQHandler+0x1b8>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d054      	beq.n	800b7aa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b704:	f003 0310 	and.w	r3, r3, #16
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b710:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b722:	2b00      	cmp	r3, #0
 800b724:	d139      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d12b      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d124      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d11d      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800b762:	2b00      	cmp	r3, #0
 800b764:	d119      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b774:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d105      	bne.n	800b79a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b792:	f043 0201 	orr.w	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fc16 	bl	800bfcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f06f 020c 	mvn.w	r2, #12
 800b7a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	bf0c      	ite	eq
 800b7b8:	2301      	moveq	r3, #1
 800b7ba:	2300      	movne	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	bf0c      	ite	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	2300      	movne	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d017      	beq.n	800b80c <HAL_ADC_IRQHandler+0x21a>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d014      	beq.n	800b80c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d10d      	bne.n	800b80c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f921 	bl	800ba44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f06f 0201 	mvn.w	r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0320 	and.w	r3, r3, #32
 800b816:	2b20      	cmp	r3, #32
 800b818:	bf0c      	ite	eq
 800b81a:	2301      	moveq	r3, #1
 800b81c:	2300      	movne	r3, #0
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b82c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d015      	beq.n	800b86c <HAL_ADC_IRQHandler+0x27a>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d012      	beq.n	800b86c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84a:	f043 0202 	orr.w	r2, r3, #2
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f06f 0220 	mvn.w	r2, #32
 800b85a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f8fb 	bl	800ba58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f06f 0220 	mvn.w	r2, #32
 800b86a:	601a      	str	r2, [r3, #0]
  }
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d101      	bne.n	800b892 <HAL_ADC_Start_DMA+0x1e>
 800b88e:	2302      	movs	r3, #2
 800b890:	e0b1      	b.n	800b9f6 <HAL_ADC_Start_DMA+0x182>
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d018      	beq.n	800b8da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689a      	ldr	r2, [r3, #8]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0201 	orr.w	r2, r2, #1
 800b8b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b8b8:	4b51      	ldr	r3, [pc, #324]	; (800ba00 <HAL_ADC_Start_DMA+0x18c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a51      	ldr	r2, [pc, #324]	; (800ba04 <HAL_ADC_Start_DMA+0x190>)
 800b8be:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c2:	0c9a      	lsrs	r2, r3, #18
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	4413      	add	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b8cc:	e002      	b.n	800b8d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1f9      	bne.n	800b8ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	f040 8085 	bne.w	800b9f4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b8f2:	f023 0301 	bic.w	r3, r3, #1
 800b8f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b914:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b928:	d106      	bne.n	800b938 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92e:	f023 0206 	bic.w	r2, r3, #6
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	645a      	str	r2, [r3, #68]	; 0x44
 800b936:	e002      	b.n	800b93e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b946:	4b30      	ldr	r3, [pc, #192]	; (800ba08 <HAL_ADC_Start_DMA+0x194>)
 800b948:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94e:	4a2f      	ldr	r2, [pc, #188]	; (800ba0c <HAL_ADC_Start_DMA+0x198>)
 800b950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	4a2e      	ldr	r2, [pc, #184]	; (800ba10 <HAL_ADC_Start_DMA+0x19c>)
 800b958:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	4a2d      	ldr	r2, [pc, #180]	; (800ba14 <HAL_ADC_Start_DMA+0x1a0>)
 800b960:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b96a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b97a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689a      	ldr	r2, [r3, #8]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b98a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	334c      	adds	r3, #76	; 0x4c
 800b996:	4619      	mov	r1, r3
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f000 fd6e 	bl	800c47c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f003 031f 	and.w	r3, r3, #31
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10f      	bne.n	800b9cc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d11c      	bne.n	800b9f4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9c8:	609a      	str	r2, [r3, #8]
 800b9ca:	e013      	b.n	800b9f4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a11      	ldr	r2, [pc, #68]	; (800ba18 <HAL_ADC_Start_DMA+0x1a4>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d10e      	bne.n	800b9f4 <HAL_ADC_Start_DMA+0x180>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d107      	bne.n	800b9f4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	689a      	ldr	r2, [r3, #8]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b9f2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20000000 	.word	0x20000000
 800ba04:	431bde83 	.word	0x431bde83
 800ba08:	40012300 	.word	0x40012300
 800ba0c:	0800bec9 	.word	0x0800bec9
 800ba10:	0800bf83 	.word	0x0800bf83
 800ba14:	0800bf9f 	.word	0x0800bf9f
 800ba18:	40012000 	.word	0x40012000

0800ba1c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <HAL_ADC_ConfigChannel+0x1c>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e113      	b.n	800bcb0 <HAL_ADC_ConfigChannel+0x244>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b09      	cmp	r3, #9
 800ba96:	d925      	bls.n	800bae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68d9      	ldr	r1, [r3, #12]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	461a      	mov	r2, r3
 800baa6:	4613      	mov	r3, r2
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	4413      	add	r3, r2
 800baac:	3b1e      	subs	r3, #30
 800baae:	2207      	movs	r2, #7
 800bab0:	fa02 f303 	lsl.w	r3, r2, r3
 800bab4:	43da      	mvns	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	400a      	ands	r2, r1
 800babc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68d9      	ldr	r1, [r3, #12]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	4618      	mov	r0, r3
 800bad0:	4603      	mov	r3, r0
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	4403      	add	r3, r0
 800bad6:	3b1e      	subs	r3, #30
 800bad8:	409a      	lsls	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	e022      	b.n	800bb2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6919      	ldr	r1, [r3, #16]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	461a      	mov	r2, r3
 800baf2:	4613      	mov	r3, r2
 800baf4:	005b      	lsls	r3, r3, #1
 800baf6:	4413      	add	r3, r2
 800baf8:	2207      	movs	r2, #7
 800bafa:	fa02 f303 	lsl.w	r3, r2, r3
 800bafe:	43da      	mvns	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	400a      	ands	r2, r1
 800bb06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6919      	ldr	r1, [r3, #16]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	4618      	mov	r0, r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	4403      	add	r3, r0
 800bb20:	409a      	lsls	r2, r3
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	2b06      	cmp	r3, #6
 800bb30:	d824      	bhi.n	800bb7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	3b05      	subs	r3, #5
 800bb44:	221f      	movs	r2, #31
 800bb46:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4a:	43da      	mvns	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	400a      	ands	r2, r1
 800bb52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	4618      	mov	r0, r3
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	4613      	mov	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3b05      	subs	r3, #5
 800bb6e:	fa00 f203 	lsl.w	r2, r0, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	635a      	str	r2, [r3, #52]	; 0x34
 800bb7a:	e04c      	b.n	800bc16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	2b0c      	cmp	r3, #12
 800bb82:	d824      	bhi.n	800bbce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	3b23      	subs	r3, #35	; 0x23
 800bb96:	221f      	movs	r2, #31
 800bb98:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9c:	43da      	mvns	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	400a      	ands	r2, r1
 800bba4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	4613      	mov	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3b23      	subs	r3, #35	; 0x23
 800bbc0:	fa00 f203 	lsl.w	r2, r0, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	631a      	str	r2, [r3, #48]	; 0x30
 800bbcc:	e023      	b.n	800bc16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	3b41      	subs	r3, #65	; 0x41
 800bbe0:	221f      	movs	r2, #31
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43da      	mvns	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	400a      	ands	r2, r1
 800bbee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	3b41      	subs	r3, #65	; 0x41
 800bc0a:	fa00 f203 	lsl.w	r2, r0, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bc16:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <HAL_ADC_ConfigChannel+0x250>)
 800bc18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4a28      	ldr	r2, [pc, #160]	; (800bcc0 <HAL_ADC_ConfigChannel+0x254>)
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d10f      	bne.n	800bc44 <HAL_ADC_ConfigChannel+0x1d8>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b12      	cmp	r3, #18
 800bc2a:	d10b      	bne.n	800bc44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a1d      	ldr	r2, [pc, #116]	; (800bcc0 <HAL_ADC_ConfigChannel+0x254>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d12b      	bne.n	800bca6 <HAL_ADC_ConfigChannel+0x23a>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a1c      	ldr	r2, [pc, #112]	; (800bcc4 <HAL_ADC_ConfigChannel+0x258>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d003      	beq.n	800bc60 <HAL_ADC_ConfigChannel+0x1f4>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b11      	cmp	r3, #17
 800bc5e:	d122      	bne.n	800bca6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a11      	ldr	r2, [pc, #68]	; (800bcc4 <HAL_ADC_ConfigChannel+0x258>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d111      	bne.n	800bca6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800bc82:	4b11      	ldr	r3, [pc, #68]	; (800bcc8 <HAL_ADC_ConfigChannel+0x25c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a11      	ldr	r2, [pc, #68]	; (800bccc <HAL_ADC_ConfigChannel+0x260>)
 800bc88:	fba2 2303 	umull	r2, r3, r2, r3
 800bc8c:	0c9a      	lsrs	r2, r3, #18
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bc98:	e002      	b.n	800bca0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1f9      	bne.n	800bc9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	40012300 	.word	0x40012300
 800bcc0:	40012000 	.word	0x40012000
 800bcc4:	10000012 	.word	0x10000012
 800bcc8:	20000000 	.word	0x20000000
 800bccc:	431bde83 	.word	0x431bde83

0800bcd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bcd8:	4b79      	ldr	r3, [pc, #484]	; (800bec0 <ADC_Init+0x1f0>)
 800bcda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	6859      	ldr	r1, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	021a      	lsls	r2, r3, #8
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bd28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6859      	ldr	r1, [r3, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6899      	ldr	r1, [r3, #8]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd62:	4a58      	ldr	r2, [pc, #352]	; (800bec4 <ADC_Init+0x1f4>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d022      	beq.n	800bdae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689a      	ldr	r2, [r3, #8]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bd76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6899      	ldr	r1, [r3, #8]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	689a      	ldr	r2, [r3, #8]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bd98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6899      	ldr	r1, [r3, #8]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	609a      	str	r2, [r3, #8]
 800bdac:	e00f      	b.n	800bdce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	689a      	ldr	r2, [r3, #8]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bdbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bdcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0202 	bic.w	r2, r2, #2
 800bddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6899      	ldr	r1, [r3, #8]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7e1b      	ldrb	r3, [r3, #24]
 800bde8:	005a      	lsls	r2, r3, #1
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	430a      	orrs	r2, r1
 800bdf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d01b      	beq.n	800be34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800be1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	6859      	ldr	r1, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	3b01      	subs	r3, #1
 800be28:	035a      	lsls	r2, r3, #13
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
 800be32:	e007      	b.n	800be44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800be52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	69db      	ldr	r3, [r3, #28]
 800be5e:	3b01      	subs	r3, #1
 800be60:	051a      	lsls	r2, r3, #20
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	689a      	ldr	r2, [r3, #8]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800be78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6899      	ldr	r1, [r3, #8]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be86:	025a      	lsls	r2, r3, #9
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	689a      	ldr	r2, [r3, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6899      	ldr	r1, [r3, #8]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	029a      	lsls	r2, r3, #10
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	430a      	orrs	r2, r1
 800beb2:	609a      	str	r2, [r3, #8]
}
 800beb4:	bf00      	nop
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	40012300 	.word	0x40012300
 800bec4:	0f000001 	.word	0x0f000001

0800bec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d13c      	bne.n	800bf5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d12b      	bne.n	800bf54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d127      	bne.n	800bf54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d006      	beq.n	800bf20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d119      	bne.n	800bf54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f022 0220 	bic.w	r2, r2, #32
 800bf2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d105      	bne.n	800bf54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	f043 0201 	orr.w	r2, r3, #1
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7ff fd61 	bl	800ba1c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bf5a:	e00e      	b.n	800bf7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf60:	f003 0310 	and.w	r3, r3, #16
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fd75 	bl	800ba58 <HAL_ADC_ErrorCallback>
}
 800bf6e:	e004      	b.n	800bf7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	4798      	blx	r3
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff fd4d 	bl	800ba30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b084      	sub	sp, #16
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2240      	movs	r2, #64	; 0x40
 800bfb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb6:	f043 0204 	orr.w	r2, r3, #4
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff fd4a 	bl	800ba58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bfc4:	bf00      	nop
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bff0:	4b0c      	ldr	r3, [pc, #48]	; (800c024 <__NVIC_SetPriorityGrouping+0x44>)
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bffc:	4013      	ands	r3, r2
 800bffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c00c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c012:	4a04      	ldr	r2, [pc, #16]	; (800c024 <__NVIC_SetPriorityGrouping+0x44>)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	60d3      	str	r3, [r2, #12]
}
 800c018:	bf00      	nop
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	e000ed00 	.word	0xe000ed00

0800c028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c02c:	4b04      	ldr	r3, [pc, #16]	; (800c040 <__NVIC_GetPriorityGrouping+0x18>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	0a1b      	lsrs	r3, r3, #8
 800c032:	f003 0307 	and.w	r3, r3, #7
}
 800c036:	4618      	mov	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	e000ed00 	.word	0xe000ed00

0800c044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c052:	2b00      	cmp	r3, #0
 800c054:	db0b      	blt.n	800c06e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c056:	79fb      	ldrb	r3, [r7, #7]
 800c058:	f003 021f 	and.w	r2, r3, #31
 800c05c:	4907      	ldr	r1, [pc, #28]	; (800c07c <__NVIC_EnableIRQ+0x38>)
 800c05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c062:	095b      	lsrs	r3, r3, #5
 800c064:	2001      	movs	r0, #1
 800c066:	fa00 f202 	lsl.w	r2, r0, r2
 800c06a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c06e:	bf00      	nop
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	e000e100 	.word	0xe000e100

0800c080 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	4603      	mov	r3, r0
 800c088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	db10      	blt.n	800c0b4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	f003 021f 	and.w	r2, r3, #31
 800c098:	4909      	ldr	r1, [pc, #36]	; (800c0c0 <__NVIC_DisableIRQ+0x40>)
 800c09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c09e:	095b      	lsrs	r3, r3, #5
 800c0a0:	2001      	movs	r0, #1
 800c0a2:	fa00 f202 	lsl.w	r2, r0, r2
 800c0a6:	3320      	adds	r3, #32
 800c0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c0ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c0b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	e000e100 	.word	0xe000e100

0800c0c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db0a      	blt.n	800c0ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	490c      	ldr	r1, [pc, #48]	; (800c110 <__NVIC_SetPriority+0x4c>)
 800c0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0e2:	0112      	lsls	r2, r2, #4
 800c0e4:	b2d2      	uxtb	r2, r2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c0ec:	e00a      	b.n	800c104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	4908      	ldr	r1, [pc, #32]	; (800c114 <__NVIC_SetPriority+0x50>)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	f003 030f 	and.w	r3, r3, #15
 800c0fa:	3b04      	subs	r3, #4
 800c0fc:	0112      	lsls	r2, r2, #4
 800c0fe:	b2d2      	uxtb	r2, r2
 800c100:	440b      	add	r3, r1
 800c102:	761a      	strb	r2, [r3, #24]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	e000e100 	.word	0xe000e100
 800c114:	e000ed00 	.word	0xe000ed00

0800c118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c118:	b480      	push	{r7}
 800c11a:	b089      	sub	sp, #36	; 0x24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f1c3 0307 	rsb	r3, r3, #7
 800c132:	2b04      	cmp	r3, #4
 800c134:	bf28      	it	cs
 800c136:	2304      	movcs	r3, #4
 800c138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	3304      	adds	r3, #4
 800c13e:	2b06      	cmp	r3, #6
 800c140:	d902      	bls.n	800c148 <NVIC_EncodePriority+0x30>
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	3b03      	subs	r3, #3
 800c146:	e000      	b.n	800c14a <NVIC_EncodePriority+0x32>
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c14c:	f04f 32ff 	mov.w	r2, #4294967295
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	fa02 f303 	lsl.w	r3, r2, r3
 800c156:	43da      	mvns	r2, r3
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	401a      	ands	r2, r3
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c160:	f04f 31ff 	mov.w	r1, #4294967295
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	fa01 f303 	lsl.w	r3, r1, r3
 800c16a:	43d9      	mvns	r1, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c170:	4313      	orrs	r3, r2
         );
}
 800c172:	4618      	mov	r0, r3
 800c174:	3724      	adds	r7, #36	; 0x24
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
	...

0800c180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c190:	d301      	bcc.n	800c196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c192:	2301      	movs	r3, #1
 800c194:	e00f      	b.n	800c1b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c196:	4a0a      	ldr	r2, [pc, #40]	; (800c1c0 <SysTick_Config+0x40>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c19e:	210f      	movs	r1, #15
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a4:	f7ff ff8e 	bl	800c0c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1a8:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <SysTick_Config+0x40>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1ae:	4b04      	ldr	r3, [pc, #16]	; (800c1c0 <SysTick_Config+0x40>)
 800c1b0:	2207      	movs	r2, #7
 800c1b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	e000e010 	.word	0xe000e010

0800c1c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ff07 	bl	800bfe0 <__NVIC_SetPriorityGrouping>
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	607a      	str	r2, [r7, #4]
 800c1e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c1ec:	f7ff ff1c 	bl	800c028 <__NVIC_GetPriorityGrouping>
 800c1f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	6978      	ldr	r0, [r7, #20]
 800c1f8:	f7ff ff8e 	bl	800c118 <NVIC_EncodePriority>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c202:	4611      	mov	r1, r2
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff ff5d 	bl	800c0c4 <__NVIC_SetPriority>
}
 800c20a:	bf00      	nop
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	4603      	mov	r3, r0
 800c21a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c21c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff ff0f 	bl	800c044 <__NVIC_EnableIRQ>
}
 800c226:	bf00      	nop
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b082      	sub	sp, #8
 800c232:	af00      	add	r7, sp, #0
 800c234:	4603      	mov	r3, r0
 800c236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7ff ff1f 	bl	800c080 <__NVIC_DisableIRQ>
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff ff94 	bl	800c180 <SysTick_Config>
 800c258:	4603      	mov	r3, r0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c26c:	2300      	movs	r3, #0
 800c26e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c270:	f7ff f94e 	bl	800b510 <HAL_GetTick>
 800c274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	e099      	b.n	800c3b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f022 0201 	bic.w	r2, r2, #1
 800c29e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2a0:	e00f      	b.n	800c2c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c2a2:	f7ff f935 	bl	800b510 <HAL_GetTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	2b05      	cmp	r3, #5
 800c2ae:	d908      	bls.n	800c2c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e078      	b.n	800c3b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e8      	bne.n	800c2a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	4b38      	ldr	r3, [pc, #224]	; (800c3bc <HAL_DMA_Init+0x158>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685a      	ldr	r2, [r3, #4]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c2ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	4313      	orrs	r3, r2
 800c312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d107      	bne.n	800c32c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c324:	4313      	orrs	r3, r2
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	4313      	orrs	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	2b04      	cmp	r3, #4
 800c354:	d117      	bne.n	800c386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00e      	beq.n	800c386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fafb 	bl	800c964 <DMA_CheckFifoParam>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d008      	beq.n	800c386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2240      	movs	r2, #64	; 0x40
 800c378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2201      	movs	r2, #1
 800c37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c382:	2301      	movs	r3, #1
 800c384:	e016      	b.n	800c3b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fab2 	bl	800c8f8 <DMA_CalcBaseAndBitshift>
 800c394:	4603      	mov	r3, r0
 800c396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c39c:	223f      	movs	r2, #63	; 0x3f
 800c39e:	409a      	lsls	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	f010803f 	.word	0xf010803f

0800c3c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e050      	b.n	800c474 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d101      	bne.n	800c3e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e048      	b.n	800c474 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f022 0201 	bic.w	r2, r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2200      	movs	r2, #0
 800c400:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2200      	movs	r2, #0
 800c408:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2200      	movs	r2, #0
 800c410:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2200      	movs	r2, #0
 800c418:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2221      	movs	r2, #33	; 0x21
 800c420:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa68 	bl	800c8f8 <DMA_CalcBaseAndBitshift>
 800c428:	4603      	mov	r3, r0
 800c42a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c454:	223f      	movs	r2, #63	; 0x3f
 800c456:	409a      	lsls	r2, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c492:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d101      	bne.n	800c4a2 <HAL_DMA_Start_IT+0x26>
 800c49e:	2302      	movs	r3, #2
 800c4a0:	e040      	b.n	800c524 <HAL_DMA_Start_IT+0xa8>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d12f      	bne.n	800c516 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	68b9      	ldr	r1, [r7, #8]
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f000 f9e6 	bl	800c89c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4d4:	223f      	movs	r2, #63	; 0x3f
 800c4d6:	409a      	lsls	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0216 	orr.w	r2, r2, #22
 800c4ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d007      	beq.n	800c504 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0208 	orr.w	r2, r2, #8
 800c502:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f042 0201 	orr.w	r2, r2, #1
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	e005      	b.n	800c522 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c51e:	2302      	movs	r3, #2
 800c520:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d004      	beq.n	800c54a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2280      	movs	r2, #128	; 0x80
 800c544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e00c      	b.n	800c564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2205      	movs	r2, #5
 800c54e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f022 0201 	bic.w	r2, r2, #1
 800c560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c57c:	4b92      	ldr	r3, [pc, #584]	; (800c7c8 <HAL_DMA_IRQHandler+0x258>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a92      	ldr	r2, [pc, #584]	; (800c7cc <HAL_DMA_IRQHandler+0x25c>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	0a9b      	lsrs	r3, r3, #10
 800c588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c59a:	2208      	movs	r2, #8
 800c59c:	409a      	lsls	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d01a      	beq.n	800c5dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d013      	beq.n	800c5dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f022 0204 	bic.w	r2, r2, #4
 800c5c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5c8:	2208      	movs	r2, #8
 800c5ca:	409a      	lsls	r2, r3
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d4:	f043 0201 	orr.w	r2, r3, #1
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	409a      	lsls	r2, r3
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d012      	beq.n	800c612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00b      	beq.n	800c612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5fe:	2201      	movs	r2, #1
 800c600:	409a      	lsls	r2, r3
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c60a:	f043 0202 	orr.w	r2, r3, #2
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c616:	2204      	movs	r2, #4
 800c618:	409a      	lsls	r2, r3
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4013      	ands	r3, r2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d012      	beq.n	800c648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c634:	2204      	movs	r2, #4
 800c636:	409a      	lsls	r2, r3
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c640:	f043 0204 	orr.w	r2, r3, #4
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64c:	2210      	movs	r2, #16
 800c64e:	409a      	lsls	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4013      	ands	r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	d043      	beq.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f003 0308 	and.w	r3, r3, #8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d03c      	beq.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c66a:	2210      	movs	r2, #16
 800c66c:	409a      	lsls	r2, r3
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d018      	beq.n	800c6b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d108      	bne.n	800c6a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c692:	2b00      	cmp	r3, #0
 800c694:	d024      	beq.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	4798      	blx	r3
 800c69e:	e01f      	b.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d01b      	beq.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	4798      	blx	r3
 800c6b0:	e016      	b.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 0208 	bic.w	r2, r2, #8
 800c6ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6e4:	2220      	movs	r2, #32
 800c6e6:	409a      	lsls	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 808e 	beq.w	800c80e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0310 	and.w	r3, r3, #16
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 8086 	beq.w	800c80e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c706:	2220      	movs	r2, #32
 800c708:	409a      	lsls	r2, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b05      	cmp	r3, #5
 800c718:	d136      	bne.n	800c788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0216 	bic.w	r2, r2, #22
 800c728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	695a      	ldr	r2, [r3, #20]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d103      	bne.n	800c74a <HAL_DMA_IRQHandler+0x1da>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c746:	2b00      	cmp	r3, #0
 800c748:	d007      	beq.n	800c75a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0208 	bic.w	r2, r2, #8
 800c758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c75e:	223f      	movs	r2, #63	; 0x3f
 800c760:	409a      	lsls	r2, r3
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2201      	movs	r2, #1
 800c772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d07d      	beq.n	800c87a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	4798      	blx	r3
        }
        return;
 800c786:	e078      	b.n	800c87a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d01c      	beq.n	800c7d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d108      	bne.n	800c7b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d030      	beq.n	800c80e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	4798      	blx	r3
 800c7b4:	e02b      	b.n	800c80e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d027      	beq.n	800c80e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	4798      	blx	r3
 800c7c6:	e022      	b.n	800c80e <HAL_DMA_IRQHandler+0x29e>
 800c7c8:	20000000 	.word	0x20000000
 800c7cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10f      	bne.n	800c7fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0210 	bic.w	r2, r2, #16
 800c7ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c812:	2b00      	cmp	r3, #0
 800c814:	d032      	beq.n	800c87c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81a:	f003 0301 	and.w	r3, r3, #1
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d022      	beq.n	800c868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2205      	movs	r2, #5
 800c826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f022 0201 	bic.w	r2, r2, #1
 800c838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	3301      	adds	r3, #1
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	429a      	cmp	r2, r3
 800c844:	d307      	bcc.n	800c856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0301 	and.w	r3, r3, #1
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1f2      	bne.n	800c83a <HAL_DMA_IRQHandler+0x2ca>
 800c854:	e000      	b.n	800c858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	4798      	blx	r3
 800c878:	e000      	b.n	800c87c <HAL_DMA_IRQHandler+0x30c>
        return;
 800c87a:	bf00      	nop
    }
  }
}
 800c87c:	3718      	adds	r7, #24
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop

0800c884 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c8b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	2b40      	cmp	r3, #64	; 0x40
 800c8c8:	d108      	bne.n	800c8dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c8da:	e007      	b.n	800c8ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	60da      	str	r2, [r3, #12]
}
 800c8ec:	bf00      	nop
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	b2db      	uxtb	r3, r3
 800c906:	3b10      	subs	r3, #16
 800c908:	4a14      	ldr	r2, [pc, #80]	; (800c95c <DMA_CalcBaseAndBitshift+0x64>)
 800c90a:	fba2 2303 	umull	r2, r3, r2, r3
 800c90e:	091b      	lsrs	r3, r3, #4
 800c910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c912:	4a13      	ldr	r2, [pc, #76]	; (800c960 <DMA_CalcBaseAndBitshift+0x68>)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	4413      	add	r3, r2
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b03      	cmp	r3, #3
 800c924:	d909      	bls.n	800c93a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	1d1a      	adds	r2, r3, #4
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	659a      	str	r2, [r3, #88]	; 0x58
 800c938:	e007      	b.n	800c94a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c942:	f023 0303 	bic.w	r3, r3, #3
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	aaaaaaab 	.word	0xaaaaaaab
 800c960:	08022414 	.word	0x08022414

0800c964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d11f      	bne.n	800c9be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2b03      	cmp	r3, #3
 800c982:	d855      	bhi.n	800ca30 <DMA_CheckFifoParam+0xcc>
 800c984:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <DMA_CheckFifoParam+0x28>)
 800c986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98a:	bf00      	nop
 800c98c:	0800c99d 	.word	0x0800c99d
 800c990:	0800c9af 	.word	0x0800c9af
 800c994:	0800c99d 	.word	0x0800c99d
 800c998:	0800ca31 	.word	0x0800ca31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d045      	beq.n	800ca34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9ac:	e042      	b.n	800ca34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c9b6:	d13f      	bne.n	800ca38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9bc:	e03c      	b.n	800ca38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9c6:	d121      	bne.n	800ca0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d836      	bhi.n	800ca3c <DMA_CheckFifoParam+0xd8>
 800c9ce:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <DMA_CheckFifoParam+0x70>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9e5 	.word	0x0800c9e5
 800c9d8:	0800c9eb 	.word	0x0800c9eb
 800c9dc:	0800c9e5 	.word	0x0800c9e5
 800c9e0:	0800c9fd 	.word	0x0800c9fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9e8:	e02f      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d024      	beq.n	800ca40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c9fa:	e021      	b.n	800ca40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca04:	d11e      	bne.n	800ca44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ca0a:	e01b      	b.n	800ca44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d902      	bls.n	800ca18 <DMA_CheckFifoParam+0xb4>
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d003      	beq.n	800ca1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ca16:	e018      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca1c:	e015      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00e      	beq.n	800ca48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca2e:	e00b      	b.n	800ca48 <DMA_CheckFifoParam+0xe4>
      break;
 800ca30:	bf00      	nop
 800ca32:	e00a      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;
 800ca34:	bf00      	nop
 800ca36:	e008      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;
 800ca38:	bf00      	nop
 800ca3a:	e006      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;
 800ca3c:	bf00      	nop
 800ca3e:	e004      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;
 800ca40:	bf00      	nop
 800ca42:	e002      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;   
 800ca44:	bf00      	nop
 800ca46:	e000      	b.n	800ca4a <DMA_CheckFifoParam+0xe6>
      break;
 800ca48:	bf00      	nop
    }
  } 
  
  return status; 
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b089      	sub	sp, #36	; 0x24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ca62:	2300      	movs	r3, #0
 800ca64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ca6e:	2300      	movs	r3, #0
 800ca70:	61fb      	str	r3, [r7, #28]
 800ca72:	e159      	b.n	800cd28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ca74:	2201      	movs	r2, #1
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	4013      	ands	r3, r2
 800ca86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ca88:	693a      	ldr	r2, [r7, #16]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	f040 8148 	bne.w	800cd22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d00b      	beq.n	800cab2 <HAL_GPIO_Init+0x5a>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d007      	beq.n	800cab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800caa6:	2b11      	cmp	r3, #17
 800caa8:	d003      	beq.n	800cab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b12      	cmp	r3, #18
 800cab0:	d130      	bne.n	800cb14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	2203      	movs	r2, #3
 800cabe:	fa02 f303 	lsl.w	r3, r2, r3
 800cac2:	43db      	mvns	r3, r3
 800cac4:	69ba      	ldr	r2, [r7, #24]
 800cac6:	4013      	ands	r3, r2
 800cac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	005b      	lsls	r3, r3, #1
 800cad2:	fa02 f303 	lsl.w	r3, r2, r3
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	4313      	orrs	r3, r2
 800cada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cae8:	2201      	movs	r2, #1
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	fa02 f303 	lsl.w	r3, r2, r3
 800caf0:	43db      	mvns	r3, r3
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	4013      	ands	r3, r2
 800caf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	091b      	lsrs	r3, r3, #4
 800cafe:	f003 0201 	and.w	r2, r3, #1
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	fa02 f303 	lsl.w	r3, r2, r3
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	2203      	movs	r2, #3
 800cb20:	fa02 f303 	lsl.w	r3, r2, r3
 800cb24:	43db      	mvns	r3, r3
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	4013      	ands	r3, r2
 800cb2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	fa02 f303 	lsl.w	r3, r2, r3
 800cb38:	69ba      	ldr	r2, [r7, #24]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	69ba      	ldr	r2, [r7, #24]
 800cb42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d003      	beq.n	800cb54 <HAL_GPIO_Init+0xfc>
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	2b12      	cmp	r3, #18
 800cb52:	d123      	bne.n	800cb9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	08da      	lsrs	r2, r3, #3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	3208      	adds	r2, #8
 800cb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f003 0307 	and.w	r3, r3, #7
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	220f      	movs	r2, #15
 800cb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb70:	43db      	mvns	r3, r3
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	4013      	ands	r3, r2
 800cb76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	691a      	ldr	r2, [r3, #16]
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f003 0307 	and.w	r3, r3, #7
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	fa02 f303 	lsl.w	r3, r2, r3
 800cb88:	69ba      	ldr	r2, [r7, #24]
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	08da      	lsrs	r2, r3, #3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3208      	adds	r2, #8
 800cb96:	69b9      	ldr	r1, [r7, #24]
 800cb98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	2203      	movs	r2, #3
 800cba8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbac:	43db      	mvns	r3, r3
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	4013      	ands	r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f003 0203 	and.w	r2, r3, #3
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69ba      	ldr	r2, [r7, #24]
 800cbce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 80a2 	beq.w	800cd22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
 800cbe2:	4b56      	ldr	r3, [pc, #344]	; (800cd3c <HAL_GPIO_Init+0x2e4>)
 800cbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe6:	4a55      	ldr	r2, [pc, #340]	; (800cd3c <HAL_GPIO_Init+0x2e4>)
 800cbe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbec:	6453      	str	r3, [r2, #68]	; 0x44
 800cbee:	4b53      	ldr	r3, [pc, #332]	; (800cd3c <HAL_GPIO_Init+0x2e4>)
 800cbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cbfa:	4a51      	ldr	r2, [pc, #324]	; (800cd40 <HAL_GPIO_Init+0x2e8>)
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	089b      	lsrs	r3, r3, #2
 800cc00:	3302      	adds	r3, #2
 800cc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	f003 0303 	and.w	r3, r3, #3
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	220f      	movs	r2, #15
 800cc12:	fa02 f303 	lsl.w	r3, r2, r3
 800cc16:	43db      	mvns	r3, r3
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a48      	ldr	r2, [pc, #288]	; (800cd44 <HAL_GPIO_Init+0x2ec>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d019      	beq.n	800cc5a <HAL_GPIO_Init+0x202>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a47      	ldr	r2, [pc, #284]	; (800cd48 <HAL_GPIO_Init+0x2f0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d013      	beq.n	800cc56 <HAL_GPIO_Init+0x1fe>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a46      	ldr	r2, [pc, #280]	; (800cd4c <HAL_GPIO_Init+0x2f4>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d00d      	beq.n	800cc52 <HAL_GPIO_Init+0x1fa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a45      	ldr	r2, [pc, #276]	; (800cd50 <HAL_GPIO_Init+0x2f8>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d007      	beq.n	800cc4e <HAL_GPIO_Init+0x1f6>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a44      	ldr	r2, [pc, #272]	; (800cd54 <HAL_GPIO_Init+0x2fc>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d101      	bne.n	800cc4a <HAL_GPIO_Init+0x1f2>
 800cc46:	2304      	movs	r3, #4
 800cc48:	e008      	b.n	800cc5c <HAL_GPIO_Init+0x204>
 800cc4a:	2307      	movs	r3, #7
 800cc4c:	e006      	b.n	800cc5c <HAL_GPIO_Init+0x204>
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e004      	b.n	800cc5c <HAL_GPIO_Init+0x204>
 800cc52:	2302      	movs	r3, #2
 800cc54:	e002      	b.n	800cc5c <HAL_GPIO_Init+0x204>
 800cc56:	2301      	movs	r3, #1
 800cc58:	e000      	b.n	800cc5c <HAL_GPIO_Init+0x204>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	69fa      	ldr	r2, [r7, #28]
 800cc5e:	f002 0203 	and.w	r2, r2, #3
 800cc62:	0092      	lsls	r2, r2, #2
 800cc64:	4093      	lsls	r3, r2
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cc6c:	4934      	ldr	r1, [pc, #208]	; (800cd40 <HAL_GPIO_Init+0x2e8>)
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	089b      	lsrs	r3, r3, #2
 800cc72:	3302      	adds	r3, #2
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cc7a:	4b37      	ldr	r3, [pc, #220]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	43db      	mvns	r3, r3
 800cc84:	69ba      	ldr	r2, [r7, #24]
 800cc86:	4013      	ands	r3, r2
 800cc88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d003      	beq.n	800cc9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cc96:	69ba      	ldr	r2, [r7, #24]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc9e:	4a2e      	ldr	r2, [pc, #184]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cca4:	4b2c      	ldr	r3, [pc, #176]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	43db      	mvns	r3, r3
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d003      	beq.n	800ccc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ccc8:	4a23      	ldr	r2, [pc, #140]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ccce:	4b22      	ldr	r3, [pc, #136]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	43db      	mvns	r3, r3
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ccf2:	4a19      	ldr	r2, [pc, #100]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ccf8:	4b17      	ldr	r3, [pc, #92]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	43db      	mvns	r3, r3
 800cd02:	69ba      	ldr	r2, [r7, #24]
 800cd04:	4013      	ands	r3, r2
 800cd06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cd14:	69ba      	ldr	r2, [r7, #24]
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cd1c:	4a0e      	ldr	r2, [pc, #56]	; (800cd58 <HAL_GPIO_Init+0x300>)
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	3301      	adds	r3, #1
 800cd26:	61fb      	str	r3, [r7, #28]
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	2b0f      	cmp	r3, #15
 800cd2c:	f67f aea2 	bls.w	800ca74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cd30:	bf00      	nop
 800cd32:	3724      	adds	r7, #36	; 0x24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	40023800 	.word	0x40023800
 800cd40:	40013800 	.word	0x40013800
 800cd44:	40020000 	.word	0x40020000
 800cd48:	40020400 	.word	0x40020400
 800cd4c:	40020800 	.word	0x40020800
 800cd50:	40020c00 	.word	0x40020c00
 800cd54:	40021000 	.word	0x40021000
 800cd58:	40013c00 	.word	0x40013c00

0800cd5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cd66:	2300      	movs	r3, #0
 800cd68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cd72:	2300      	movs	r3, #0
 800cd74:	617b      	str	r3, [r7, #20]
 800cd76:	e0bb      	b.n	800cef0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd78:	2201      	movs	r2, #1
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	4013      	ands	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	f040 80ab 	bne.w	800ceea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800cd94:	4a5b      	ldr	r2, [pc, #364]	; (800cf04 <HAL_GPIO_DeInit+0x1a8>)
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	089b      	lsrs	r3, r3, #2
 800cd9a:	3302      	adds	r3, #2
 800cd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	220f      	movs	r2, #15
 800cdac:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a53      	ldr	r2, [pc, #332]	; (800cf08 <HAL_GPIO_DeInit+0x1ac>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d019      	beq.n	800cdf2 <HAL_GPIO_DeInit+0x96>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a52      	ldr	r2, [pc, #328]	; (800cf0c <HAL_GPIO_DeInit+0x1b0>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d013      	beq.n	800cdee <HAL_GPIO_DeInit+0x92>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a51      	ldr	r2, [pc, #324]	; (800cf10 <HAL_GPIO_DeInit+0x1b4>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d00d      	beq.n	800cdea <HAL_GPIO_DeInit+0x8e>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a50      	ldr	r2, [pc, #320]	; (800cf14 <HAL_GPIO_DeInit+0x1b8>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d007      	beq.n	800cde6 <HAL_GPIO_DeInit+0x8a>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a4f      	ldr	r2, [pc, #316]	; (800cf18 <HAL_GPIO_DeInit+0x1bc>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d101      	bne.n	800cde2 <HAL_GPIO_DeInit+0x86>
 800cdde:	2304      	movs	r3, #4
 800cde0:	e008      	b.n	800cdf4 <HAL_GPIO_DeInit+0x98>
 800cde2:	2307      	movs	r3, #7
 800cde4:	e006      	b.n	800cdf4 <HAL_GPIO_DeInit+0x98>
 800cde6:	2303      	movs	r3, #3
 800cde8:	e004      	b.n	800cdf4 <HAL_GPIO_DeInit+0x98>
 800cdea:	2302      	movs	r3, #2
 800cdec:	e002      	b.n	800cdf4 <HAL_GPIO_DeInit+0x98>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e000      	b.n	800cdf4 <HAL_GPIO_DeInit+0x98>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	f002 0203 	and.w	r2, r2, #3
 800cdfa:	0092      	lsls	r2, r2, #2
 800cdfc:	4093      	lsls	r3, r2
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d132      	bne.n	800ce6a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ce04:	4b45      	ldr	r3, [pc, #276]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	43db      	mvns	r3, r3
 800ce0c:	4943      	ldr	r1, [pc, #268]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce0e:	4013      	ands	r3, r2
 800ce10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ce12:	4b42      	ldr	r3, [pc, #264]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	43db      	mvns	r3, r3
 800ce1a:	4940      	ldr	r1, [pc, #256]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ce20:	4b3e      	ldr	r3, [pc, #248]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	43db      	mvns	r3, r3
 800ce28:	493c      	ldr	r1, [pc, #240]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce2a:	4013      	ands	r3, r2
 800ce2c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ce2e:	4b3b      	ldr	r3, [pc, #236]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	43db      	mvns	r3, r3
 800ce36:	4939      	ldr	r1, [pc, #228]	; (800cf1c <HAL_GPIO_DeInit+0x1c0>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	220f      	movs	r2, #15
 800ce46:	fa02 f303 	lsl.w	r3, r2, r3
 800ce4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ce4c:	4a2d      	ldr	r2, [pc, #180]	; (800cf04 <HAL_GPIO_DeInit+0x1a8>)
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	089b      	lsrs	r3, r3, #2
 800ce52:	3302      	adds	r3, #2
 800ce54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	43da      	mvns	r2, r3
 800ce5c:	4829      	ldr	r0, [pc, #164]	; (800cf04 <HAL_GPIO_DeInit+0x1a8>)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	089b      	lsrs	r3, r3, #2
 800ce62:	400a      	ands	r2, r1
 800ce64:	3302      	adds	r3, #2
 800ce66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	2103      	movs	r1, #3
 800ce74:	fa01 f303 	lsl.w	r3, r1, r3
 800ce78:	43db      	mvns	r3, r3
 800ce7a:	401a      	ands	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	08da      	lsrs	r2, r3, #3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3208      	adds	r2, #8
 800ce88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	f003 0307 	and.w	r3, r3, #7
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	220f      	movs	r2, #15
 800ce96:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9a:	43db      	mvns	r3, r3
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	08d2      	lsrs	r2, r2, #3
 800cea0:	4019      	ands	r1, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	3208      	adds	r2, #8
 800cea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	68da      	ldr	r2, [r3, #12]
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	2103      	movs	r1, #3
 800ceb4:	fa01 f303 	lsl.w	r3, r1, r3
 800ceb8:	43db      	mvns	r3, r3
 800ceba:	401a      	ands	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	2101      	movs	r1, #1
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	fa01 f303 	lsl.w	r3, r1, r3
 800cecc:	43db      	mvns	r3, r3
 800cece:	401a      	ands	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	689a      	ldr	r2, [r3, #8]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	2103      	movs	r1, #3
 800cede:	fa01 f303 	lsl.w	r3, r1, r3
 800cee2:	43db      	mvns	r3, r3
 800cee4:	401a      	ands	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	3301      	adds	r3, #1
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	2b0f      	cmp	r3, #15
 800cef4:	f67f af40 	bls.w	800cd78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cef8:	bf00      	nop
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr
 800cf04:	40013800 	.word	0x40013800
 800cf08:	40020000 	.word	0x40020000
 800cf0c:	40020400 	.word	0x40020400
 800cf10:	40020800 	.word	0x40020800
 800cf14:	40020c00 	.word	0x40020c00
 800cf18:	40021000 	.word	0x40021000
 800cf1c:	40013c00 	.word	0x40013c00

0800cf20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691a      	ldr	r2, [r3, #16]
 800cf30:	887b      	ldrh	r3, [r7, #2]
 800cf32:	4013      	ands	r3, r2
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	73fb      	strb	r3, [r7, #15]
 800cf3c:	e001      	b.n	800cf42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cf60:	787b      	ldrb	r3, [r7, #1]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf66:	887a      	ldrh	r2, [r7, #2]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cf6c:	e003      	b.n	800cf76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cf6e:	887b      	ldrh	r3, [r7, #2]
 800cf70:	041a      	lsls	r2, r3, #16
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	619a      	str	r2, [r3, #24]
}
 800cf76:	bf00      	nop
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	695a      	ldr	r2, [r3, #20]
 800cf92:	887b      	ldrh	r3, [r7, #2]
 800cf94:	401a      	ands	r2, r3
 800cf96:	887b      	ldrh	r3, [r7, #2]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d104      	bne.n	800cfa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cf9c:	887b      	ldrh	r3, [r7, #2]
 800cf9e:	041a      	lsls	r2, r3, #16
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800cfa4:	e002      	b.n	800cfac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800cfa6:	887a      	ldrh	r2, [r7, #2]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	619a      	str	r2, [r3, #24]
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e25b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d075      	beq.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cfd6:	4ba3      	ldr	r3, [pc, #652]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f003 030c 	and.w	r3, r3, #12
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d00c      	beq.n	800cffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cfe2:	4ba0      	ldr	r3, [pc, #640]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cfea:	2b08      	cmp	r3, #8
 800cfec:	d112      	bne.n	800d014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cfee:	4b9d      	ldr	r3, [pc, #628]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cffa:	d10b      	bne.n	800d014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cffc:	4b99      	ldr	r3, [pc, #612]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d05b      	beq.n	800d0c0 <HAL_RCC_OscConfig+0x108>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d157      	bne.n	800d0c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e236      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d01c:	d106      	bne.n	800d02c <HAL_RCC_OscConfig+0x74>
 800d01e:	4b91      	ldr	r3, [pc, #580]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a90      	ldr	r2, [pc, #576]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	e01d      	b.n	800d068 <HAL_RCC_OscConfig+0xb0>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d034:	d10c      	bne.n	800d050 <HAL_RCC_OscConfig+0x98>
 800d036:	4b8b      	ldr	r3, [pc, #556]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a8a      	ldr	r2, [pc, #552]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d03c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	4b88      	ldr	r3, [pc, #544]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a87      	ldr	r2, [pc, #540]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	e00b      	b.n	800d068 <HAL_RCC_OscConfig+0xb0>
 800d050:	4b84      	ldr	r3, [pc, #528]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a83      	ldr	r2, [pc, #524]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	4b81      	ldr	r3, [pc, #516]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a80      	ldr	r2, [pc, #512]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d013      	beq.n	800d098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d070:	f7fe fa4e 	bl	800b510 <HAL_GetTick>
 800d074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d076:	e008      	b.n	800d08a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d078:	f7fe fa4a 	bl	800b510 <HAL_GetTick>
 800d07c:	4602      	mov	r2, r0
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	2b64      	cmp	r3, #100	; 0x64
 800d084:	d901      	bls.n	800d08a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d086:	2303      	movs	r3, #3
 800d088:	e1fb      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d08a:	4b76      	ldr	r3, [pc, #472]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d092:	2b00      	cmp	r3, #0
 800d094:	d0f0      	beq.n	800d078 <HAL_RCC_OscConfig+0xc0>
 800d096:	e014      	b.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d098:	f7fe fa3a 	bl	800b510 <HAL_GetTick>
 800d09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d09e:	e008      	b.n	800d0b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0a0:	f7fe fa36 	bl	800b510 <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b64      	cmp	r3, #100	; 0x64
 800d0ac:	d901      	bls.n	800d0b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e1e7      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d0b2:	4b6c      	ldr	r3, [pc, #432]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1f0      	bne.n	800d0a0 <HAL_RCC_OscConfig+0xe8>
 800d0be:	e000      	b.n	800d0c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d063      	beq.n	800d196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0ce:	4b65      	ldr	r3, [pc, #404]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f003 030c 	and.w	r3, r3, #12
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00b      	beq.n	800d0f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0da:	4b62      	ldr	r3, [pc, #392]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d0e2:	2b08      	cmp	r3, #8
 800d0e4:	d11c      	bne.n	800d120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0e6:	4b5f      	ldr	r3, [pc, #380]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d116      	bne.n	800d120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d0f2:	4b5c      	ldr	r3, [pc, #368]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <HAL_RCC_OscConfig+0x152>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d001      	beq.n	800d10a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e1bb      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d10a:	4b56      	ldr	r3, [pc, #344]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	4952      	ldr	r1, [pc, #328]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d11a:	4313      	orrs	r3, r2
 800d11c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d11e:	e03a      	b.n	800d196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d020      	beq.n	800d16a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d128:	4b4f      	ldr	r3, [pc, #316]	; (800d268 <HAL_RCC_OscConfig+0x2b0>)
 800d12a:	2201      	movs	r2, #1
 800d12c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d12e:	f7fe f9ef 	bl	800b510 <HAL_GetTick>
 800d132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d134:	e008      	b.n	800d148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d136:	f7fe f9eb 	bl	800b510 <HAL_GetTick>
 800d13a:	4602      	mov	r2, r0
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	2b02      	cmp	r3, #2
 800d142:	d901      	bls.n	800d148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d144:	2303      	movs	r3, #3
 800d146:	e19c      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d148:	4b46      	ldr	r3, [pc, #280]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0f0      	beq.n	800d136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d154:	4b43      	ldr	r3, [pc, #268]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	691b      	ldr	r3, [r3, #16]
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	4940      	ldr	r1, [pc, #256]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d164:	4313      	orrs	r3, r2
 800d166:	600b      	str	r3, [r1, #0]
 800d168:	e015      	b.n	800d196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d16a:	4b3f      	ldr	r3, [pc, #252]	; (800d268 <HAL_RCC_OscConfig+0x2b0>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d170:	f7fe f9ce 	bl	800b510 <HAL_GetTick>
 800d174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d176:	e008      	b.n	800d18a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d178:	f7fe f9ca 	bl	800b510 <HAL_GetTick>
 800d17c:	4602      	mov	r2, r0
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	2b02      	cmp	r3, #2
 800d184:	d901      	bls.n	800d18a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d186:	2303      	movs	r3, #3
 800d188:	e17b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d18a:	4b36      	ldr	r3, [pc, #216]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1f0      	bne.n	800d178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0308 	and.w	r3, r3, #8
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d030      	beq.n	800d204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d016      	beq.n	800d1d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <HAL_RCC_OscConfig+0x2b4>)
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b0:	f7fe f9ae 	bl	800b510 <HAL_GetTick>
 800d1b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1b6:	e008      	b.n	800d1ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1b8:	f7fe f9aa 	bl	800b510 <HAL_GetTick>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d901      	bls.n	800d1ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e15b      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d1ca:	4b26      	ldr	r3, [pc, #152]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ce:	f003 0302 	and.w	r3, r3, #2
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0f0      	beq.n	800d1b8 <HAL_RCC_OscConfig+0x200>
 800d1d6:	e015      	b.n	800d204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d1d8:	4b24      	ldr	r3, [pc, #144]	; (800d26c <HAL_RCC_OscConfig+0x2b4>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d1de:	f7fe f997 	bl	800b510 <HAL_GetTick>
 800d1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1e4:	e008      	b.n	800d1f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d1e6:	f7fe f993 	bl	800b510 <HAL_GetTick>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	d901      	bls.n	800d1f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e144      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d1f8:	4b1a      	ldr	r3, [pc, #104]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1f0      	bne.n	800d1e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 80a0 	beq.w	800d352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d216:	4b13      	ldr	r3, [pc, #76]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10f      	bne.n	800d242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d222:	2300      	movs	r3, #0
 800d224:	60bb      	str	r3, [r7, #8]
 800d226:	4b0f      	ldr	r3, [pc, #60]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22a:	4a0e      	ldr	r2, [pc, #56]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d230:	6413      	str	r3, [r2, #64]	; 0x40
 800d232:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <HAL_RCC_OscConfig+0x2ac>)
 800d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d23a:	60bb      	str	r3, [r7, #8]
 800d23c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d23e:	2301      	movs	r3, #1
 800d240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d121      	bne.n	800d292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d24e:	4b08      	ldr	r3, [pc, #32]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a07      	ldr	r2, [pc, #28]	; (800d270 <HAL_RCC_OscConfig+0x2b8>)
 800d254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d25a:	f7fe f959 	bl	800b510 <HAL_GetTick>
 800d25e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d260:	e011      	b.n	800d286 <HAL_RCC_OscConfig+0x2ce>
 800d262:	bf00      	nop
 800d264:	40023800 	.word	0x40023800
 800d268:	42470000 	.word	0x42470000
 800d26c:	42470e80 	.word	0x42470e80
 800d270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d274:	f7fe f94c 	bl	800b510 <HAL_GetTick>
 800d278:	4602      	mov	r2, r0
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	2b02      	cmp	r3, #2
 800d280:	d901      	bls.n	800d286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	e0fd      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d286:	4b81      	ldr	r3, [pc, #516]	; (800d48c <HAL_RCC_OscConfig+0x4d4>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0f0      	beq.n	800d274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d106      	bne.n	800d2a8 <HAL_RCC_OscConfig+0x2f0>
 800d29a:	4b7d      	ldr	r3, [pc, #500]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29e:	4a7c      	ldr	r2, [pc, #496]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2a0:	f043 0301 	orr.w	r3, r3, #1
 800d2a4:	6713      	str	r3, [r2, #112]	; 0x70
 800d2a6:	e01c      	b.n	800d2e2 <HAL_RCC_OscConfig+0x32a>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	2b05      	cmp	r3, #5
 800d2ae:	d10c      	bne.n	800d2ca <HAL_RCC_OscConfig+0x312>
 800d2b0:	4b77      	ldr	r3, [pc, #476]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2b4:	4a76      	ldr	r2, [pc, #472]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2b6:	f043 0304 	orr.w	r3, r3, #4
 800d2ba:	6713      	str	r3, [r2, #112]	; 0x70
 800d2bc:	4b74      	ldr	r3, [pc, #464]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c0:	4a73      	ldr	r2, [pc, #460]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2c2:	f043 0301 	orr.w	r3, r3, #1
 800d2c6:	6713      	str	r3, [r2, #112]	; 0x70
 800d2c8:	e00b      	b.n	800d2e2 <HAL_RCC_OscConfig+0x32a>
 800d2ca:	4b71      	ldr	r3, [pc, #452]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ce:	4a70      	ldr	r2, [pc, #448]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2d0:	f023 0301 	bic.w	r3, r3, #1
 800d2d4:	6713      	str	r3, [r2, #112]	; 0x70
 800d2d6:	4b6e      	ldr	r3, [pc, #440]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2da:	4a6d      	ldr	r2, [pc, #436]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d2dc:	f023 0304 	bic.w	r3, r3, #4
 800d2e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d015      	beq.n	800d316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ea:	f7fe f911 	bl	800b510 <HAL_GetTick>
 800d2ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d2f0:	e00a      	b.n	800d308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2f2:	f7fe f90d 	bl	800b510 <HAL_GetTick>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d300:	4293      	cmp	r3, r2
 800d302:	d901      	bls.n	800d308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e0bc      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d308:	4b61      	ldr	r3, [pc, #388]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0ee      	beq.n	800d2f2 <HAL_RCC_OscConfig+0x33a>
 800d314:	e014      	b.n	800d340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d316:	f7fe f8fb 	bl	800b510 <HAL_GetTick>
 800d31a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d31c:	e00a      	b.n	800d334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d31e:	f7fe f8f7 	bl	800b510 <HAL_GetTick>
 800d322:	4602      	mov	r2, r0
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	f241 3288 	movw	r2, #5000	; 0x1388
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d901      	bls.n	800d334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d330:	2303      	movs	r3, #3
 800d332:	e0a6      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d334:	4b56      	ldr	r3, [pc, #344]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d338:	f003 0302 	and.w	r3, r3, #2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1ee      	bne.n	800d31e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d105      	bne.n	800d352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d346:	4b52      	ldr	r3, [pc, #328]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34a:	4a51      	ldr	r2, [pc, #324]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d34c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 8092 	beq.w	800d480 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d35c:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f003 030c 	and.w	r3, r3, #12
 800d364:	2b08      	cmp	r3, #8
 800d366:	d05c      	beq.n	800d422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d141      	bne.n	800d3f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d370:	4b48      	ldr	r3, [pc, #288]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d376:	f7fe f8cb 	bl	800b510 <HAL_GetTick>
 800d37a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d37c:	e008      	b.n	800d390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d37e:	f7fe f8c7 	bl	800b510 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d901      	bls.n	800d390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e078      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d390:	4b3f      	ldr	r3, [pc, #252]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1f0      	bne.n	800d37e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	019b      	lsls	r3, r3, #6
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	085b      	lsrs	r3, r3, #1
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	061b      	lsls	r3, r3, #24
 800d3c0:	4933      	ldr	r1, [pc, #204]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d3c6:	4b33      	ldr	r3, [pc, #204]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3cc:	f7fe f8a0 	bl	800b510 <HAL_GetTick>
 800d3d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3d2:	e008      	b.n	800d3e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d3d4:	f7fe f89c 	bl	800b510 <HAL_GetTick>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d901      	bls.n	800d3e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e04d      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d3e6:	4b2a      	ldr	r3, [pc, #168]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d0f0      	beq.n	800d3d4 <HAL_RCC_OscConfig+0x41c>
 800d3f2:	e045      	b.n	800d480 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d3f4:	4b27      	ldr	r3, [pc, #156]	; (800d494 <HAL_RCC_OscConfig+0x4dc>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d3fa:	f7fe f889 	bl	800b510 <HAL_GetTick>
 800d3fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d400:	e008      	b.n	800d414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d402:	f7fe f885 	bl	800b510 <HAL_GetTick>
 800d406:	4602      	mov	r2, r0
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d901      	bls.n	800d414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d410:	2303      	movs	r3, #3
 800d412:	e036      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d414:	4b1e      	ldr	r3, [pc, #120]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d1f0      	bne.n	800d402 <HAL_RCC_OscConfig+0x44a>
 800d420:	e02e      	b.n	800d480 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e029      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d42e:	4b18      	ldr	r3, [pc, #96]	; (800d490 <HAL_RCC_OscConfig+0x4d8>)
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	69db      	ldr	r3, [r3, #28]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d11c      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d115      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d456:	4013      	ands	r3, r2
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10d      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d106      	bne.n	800d47c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d478:	429a      	cmp	r2, r3
 800d47a:	d001      	beq.n	800d480 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e000      	b.n	800d482 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	40007000 	.word	0x40007000
 800d490:	40023800 	.word	0x40023800
 800d494:	42470060 	.word	0x42470060

0800d498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d101      	bne.n	800d4ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e0cc      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d4ac:	4b68      	ldr	r3, [pc, #416]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 030f 	and.w	r3, r3, #15
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d90c      	bls.n	800d4d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4ba:	4b65      	ldr	r3, [pc, #404]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	b2d2      	uxtb	r2, r2
 800d4c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4c2:	4b63      	ldr	r3, [pc, #396]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 030f 	and.w	r3, r3, #15
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d001      	beq.n	800d4d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0b8      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d020      	beq.n	800d522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 0304 	and.w	r3, r3, #4
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d4ec:	4b59      	ldr	r3, [pc, #356]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	4a58      	ldr	r2, [pc, #352]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d4f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d4f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0308 	and.w	r3, r3, #8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d005      	beq.n	800d510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d504:	4b53      	ldr	r3, [pc, #332]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	4a52      	ldr	r2, [pc, #328]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d50a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d50e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d510:	4b50      	ldr	r3, [pc, #320]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	494d      	ldr	r1, [pc, #308]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d51e:	4313      	orrs	r3, r2
 800d520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d044      	beq.n	800d5b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b01      	cmp	r3, #1
 800d534:	d107      	bne.n	800d546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d536:	4b47      	ldr	r3, [pc, #284]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d119      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e07f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d003      	beq.n	800d556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d552:	2b03      	cmp	r3, #3
 800d554:	d107      	bne.n	800d566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d556:	4b3f      	ldr	r3, [pc, #252]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d109      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e06f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d566:	4b3b      	ldr	r3, [pc, #236]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0302 	and.w	r3, r3, #2
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e067      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d576:	4b37      	ldr	r3, [pc, #220]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f023 0203 	bic.w	r2, r3, #3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	4934      	ldr	r1, [pc, #208]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d584:	4313      	orrs	r3, r2
 800d586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d588:	f7fd ffc2 	bl	800b510 <HAL_GetTick>
 800d58c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d58e:	e00a      	b.n	800d5a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d590:	f7fd ffbe 	bl	800b510 <HAL_GetTick>
 800d594:	4602      	mov	r2, r0
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d901      	bls.n	800d5a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	e04f      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5a6:	4b2b      	ldr	r3, [pc, #172]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f003 020c 	and.w	r2, r3, #12
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d1eb      	bne.n	800d590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d5b8:	4b25      	ldr	r3, [pc, #148]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 030f 	and.w	r3, r3, #15
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d20c      	bcs.n	800d5e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5c6:	4b22      	ldr	r3, [pc, #136]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5ce:	4b20      	ldr	r3, [pc, #128]	; (800d650 <HAL_RCC_ClockConfig+0x1b8>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f003 030f 	and.w	r3, r3, #15
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d001      	beq.n	800d5e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e032      	b.n	800d646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d008      	beq.n	800d5fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d5ec:	4b19      	ldr	r3, [pc, #100]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	4916      	ldr	r1, [pc, #88]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f003 0308 	and.w	r3, r3, #8
 800d606:	2b00      	cmp	r3, #0
 800d608:	d009      	beq.n	800d61e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	490e      	ldr	r1, [pc, #56]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d61a:	4313      	orrs	r3, r2
 800d61c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d61e:	f000 f821 	bl	800d664 <HAL_RCC_GetSysClockFreq>
 800d622:	4601      	mov	r1, r0
 800d624:	4b0b      	ldr	r3, [pc, #44]	; (800d654 <HAL_RCC_ClockConfig+0x1bc>)
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	091b      	lsrs	r3, r3, #4
 800d62a:	f003 030f 	and.w	r3, r3, #15
 800d62e:	4a0a      	ldr	r2, [pc, #40]	; (800d658 <HAL_RCC_ClockConfig+0x1c0>)
 800d630:	5cd3      	ldrb	r3, [r2, r3]
 800d632:	fa21 f303 	lsr.w	r3, r1, r3
 800d636:	4a09      	ldr	r2, [pc, #36]	; (800d65c <HAL_RCC_ClockConfig+0x1c4>)
 800d638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <HAL_RCC_ClockConfig+0x1c8>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fd ff22 	bl	800b488 <HAL_InitTick>

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	40023c00 	.word	0x40023c00
 800d654:	40023800 	.word	0x40023800
 800d658:	08015ea4 	.word	0x08015ea4
 800d65c:	20000000 	.word	0x20000000
 800d660:	2000005c 	.word	0x2000005c

0800d664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
 800d672:	2300      	movs	r3, #0
 800d674:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d67a:	4b50      	ldr	r3, [pc, #320]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f003 030c 	and.w	r3, r3, #12
 800d682:	2b04      	cmp	r3, #4
 800d684:	d007      	beq.n	800d696 <HAL_RCC_GetSysClockFreq+0x32>
 800d686:	2b08      	cmp	r3, #8
 800d688:	d008      	beq.n	800d69c <HAL_RCC_GetSysClockFreq+0x38>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f040 808d 	bne.w	800d7aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d690:	4b4b      	ldr	r3, [pc, #300]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d692:	60bb      	str	r3, [r7, #8]
       break;
 800d694:	e08c      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d696:	4b4b      	ldr	r3, [pc, #300]	; (800d7c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d698:	60bb      	str	r3, [r7, #8]
      break;
 800d69a:	e089      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d69c:	4b47      	ldr	r3, [pc, #284]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d6a6:	4b45      	ldr	r3, [pc, #276]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d023      	beq.n	800d6fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6b2:	4b42      	ldr	r3, [pc, #264]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	099b      	lsrs	r3, r3, #6
 800d6b8:	f04f 0400 	mov.w	r4, #0
 800d6bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	ea03 0501 	and.w	r5, r3, r1
 800d6c8:	ea04 0602 	and.w	r6, r4, r2
 800d6cc:	4a3d      	ldr	r2, [pc, #244]	; (800d7c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d6ce:	fb02 f106 	mul.w	r1, r2, r6
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	fb02 f205 	mul.w	r2, r2, r5
 800d6d8:	440a      	add	r2, r1
 800d6da:	493a      	ldr	r1, [pc, #232]	; (800d7c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800d6dc:	fba5 0101 	umull	r0, r1, r5, r1
 800d6e0:	1853      	adds	r3, r2, r1
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f04f 0400 	mov.w	r4, #0
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	f7f3 fae3 	bl	8000cb8 <__aeabi_uldivmod>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	60fb      	str	r3, [r7, #12]
 800d6f8:	e049      	b.n	800d78e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d6fa:	4b30      	ldr	r3, [pc, #192]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	099b      	lsrs	r3, r3, #6
 800d700:	f04f 0400 	mov.w	r4, #0
 800d704:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d708:	f04f 0200 	mov.w	r2, #0
 800d70c:	ea03 0501 	and.w	r5, r3, r1
 800d710:	ea04 0602 	and.w	r6, r4, r2
 800d714:	4629      	mov	r1, r5
 800d716:	4632      	mov	r2, r6
 800d718:	f04f 0300 	mov.w	r3, #0
 800d71c:	f04f 0400 	mov.w	r4, #0
 800d720:	0154      	lsls	r4, r2, #5
 800d722:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d726:	014b      	lsls	r3, r1, #5
 800d728:	4619      	mov	r1, r3
 800d72a:	4622      	mov	r2, r4
 800d72c:	1b49      	subs	r1, r1, r5
 800d72e:	eb62 0206 	sbc.w	r2, r2, r6
 800d732:	f04f 0300 	mov.w	r3, #0
 800d736:	f04f 0400 	mov.w	r4, #0
 800d73a:	0194      	lsls	r4, r2, #6
 800d73c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d740:	018b      	lsls	r3, r1, #6
 800d742:	1a5b      	subs	r3, r3, r1
 800d744:	eb64 0402 	sbc.w	r4, r4, r2
 800d748:	f04f 0100 	mov.w	r1, #0
 800d74c:	f04f 0200 	mov.w	r2, #0
 800d750:	00e2      	lsls	r2, r4, #3
 800d752:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d756:	00d9      	lsls	r1, r3, #3
 800d758:	460b      	mov	r3, r1
 800d75a:	4614      	mov	r4, r2
 800d75c:	195b      	adds	r3, r3, r5
 800d75e:	eb44 0406 	adc.w	r4, r4, r6
 800d762:	f04f 0100 	mov.w	r1, #0
 800d766:	f04f 0200 	mov.w	r2, #0
 800d76a:	02a2      	lsls	r2, r4, #10
 800d76c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d770:	0299      	lsls	r1, r3, #10
 800d772:	460b      	mov	r3, r1
 800d774:	4614      	mov	r4, r2
 800d776:	4618      	mov	r0, r3
 800d778:	4621      	mov	r1, r4
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f04f 0400 	mov.w	r4, #0
 800d780:	461a      	mov	r2, r3
 800d782:	4623      	mov	r3, r4
 800d784:	f7f3 fa98 	bl	8000cb8 <__aeabi_uldivmod>
 800d788:	4603      	mov	r3, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d78e:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x158>)
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	0c1b      	lsrs	r3, r3, #16
 800d794:	f003 0303 	and.w	r3, r3, #3
 800d798:	3301      	adds	r3, #1
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a6:	60bb      	str	r3, [r7, #8]
      break;
 800d7a8:	e002      	b.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d7aa:	4b05      	ldr	r3, [pc, #20]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800d7ac:	60bb      	str	r3, [r7, #8]
      break;
 800d7ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d7b0:	68bb      	ldr	r3, [r7, #8]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3714      	adds	r7, #20
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	40023800 	.word	0x40023800
 800d7c0:	00f42400 	.word	0x00f42400
 800d7c4:	017d7840 	.word	0x017d7840

0800d7c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d7cc:	4b03      	ldr	r3, [pc, #12]	; (800d7dc <HAL_RCC_GetHCLKFreq+0x14>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
 800d7da:	bf00      	nop
 800d7dc:	20000000 	.word	0x20000000

0800d7e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d7e4:	f7ff fff0 	bl	800d7c8 <HAL_RCC_GetHCLKFreq>
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	4b05      	ldr	r3, [pc, #20]	; (800d800 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	0a9b      	lsrs	r3, r3, #10
 800d7f0:	f003 0307 	and.w	r3, r3, #7
 800d7f4:	4a03      	ldr	r2, [pc, #12]	; (800d804 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d7f6:	5cd3      	ldrb	r3, [r2, r3]
 800d7f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	40023800 	.word	0x40023800
 800d804:	08015eb4 	.word	0x08015eb4

0800d808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d80c:	f7ff ffdc 	bl	800d7c8 <HAL_RCC_GetHCLKFreq>
 800d810:	4601      	mov	r1, r0
 800d812:	4b05      	ldr	r3, [pc, #20]	; (800d828 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	0b5b      	lsrs	r3, r3, #13
 800d818:	f003 0307 	and.w	r3, r3, #7
 800d81c:	4a03      	ldr	r2, [pc, #12]	; (800d82c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d81e:	5cd3      	ldrb	r3, [r2, r3]
 800d820:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d824:	4618      	mov	r0, r3
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40023800 	.word	0x40023800
 800d82c:	08015eb4 	.word	0x08015eb4

0800d830 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d101      	bne.n	800d842 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	e022      	b.n	800d888 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d105      	bne.n	800d85a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7f7 faaf 	bl	8004db8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2203      	movs	r2, #3
 800d85e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f814 	bl	800d890 <HAL_SD_InitCard>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d001      	beq.n	800d872 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e00a      	b.n	800d888 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d890:	b5b0      	push	{r4, r5, r7, lr}
 800d892:	b08e      	sub	sp, #56	; 0x38
 800d894:	af04      	add	r7, sp, #16
 800d896:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d898:	2300      	movs	r3, #0
 800d89a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d8ac:	2376      	movs	r3, #118	; 0x76
 800d8ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681d      	ldr	r5, [r3, #0]
 800d8b4:	466c      	mov	r4, sp
 800d8b6:	f107 0314 	add.w	r3, r7, #20
 800d8ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f003 fe3d 	bl	8011548 <SDIO_Init>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e031      	b.n	800d944 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	; (800d94c <HAL_SD_InitCard+0xbc>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f003 fe75 	bl	80115da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d8f0:	4b16      	ldr	r3, [pc, #88]	; (800d94c <HAL_SD_InitCard+0xbc>)
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 ffe6 	bl	800e8c8 <SD_PowerON>
 800d8fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00b      	beq.n	800d91c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	431a      	orrs	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	e013      	b.n	800d944 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 ff05 	bl	800e72c <SD_InitCard>
 800d922:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00b      	beq.n	800d942 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3728      	adds	r7, #40	; 0x28
 800d948:	46bd      	mov	sp, r7
 800d94a:	bdb0      	pop	{r4, r5, r7, pc}
 800d94c:	422580a0 	.word	0x422580a0

0800d950 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08c      	sub	sp, #48	; 0x30
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d107      	bne.n	800d978 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	e0c9      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b01      	cmp	r3, #1
 800d982:	f040 80c2 	bne.w	800db0a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	441a      	add	r2, r3
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d996:	429a      	cmp	r2, r3
 800d998:	d907      	bls.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e0b0      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2203      	movs	r2, #3
 800d9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	6812      	ldr	r2, [r2, #0]
 800d9c4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800d9c8:	f043 0302 	orr.w	r3, r3, #2
 800d9cc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	4a50      	ldr	r2, [pc, #320]	; (800db14 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d9d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9da:	4a4f      	ldr	r2, [pc, #316]	; (800db18 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d9dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3380      	adds	r3, #128	; 0x80
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	025b      	lsls	r3, r3, #9
 800d9f8:	089b      	lsrs	r3, r3, #2
 800d9fa:	f7fe fd3f 	bl	800c47c <HAL_DMA_Start_IT>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d017      	beq.n	800da34 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800da12:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a40      	ldr	r2, [pc, #256]	; (800db1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e06b      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800da34:	4b3a      	ldr	r3, [pc, #232]	; (800db20 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800da36:	2201      	movs	r2, #1
 800da38:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d002      	beq.n	800da48 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	025b      	lsls	r3, r3, #9
 800da46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800da50:	4618      	mov	r0, r3
 800da52:	f003 fe55 	bl	8011700 <SDMMC_CmdBlockLength>
 800da56:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00f      	beq.n	800da7e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a2e      	ldr	r2, [pc, #184]	; (800db1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800da64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	431a      	orrs	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	e046      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da7e:	f04f 33ff 	mov.w	r3, #4294967295
 800da82:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	025b      	lsls	r3, r3, #9
 800da88:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800da8a:	2390      	movs	r3, #144	; 0x90
 800da8c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800da8e:	2302      	movs	r3, #2
 800da90:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800da92:	2300      	movs	r3, #0
 800da94:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800da96:	2301      	movs	r3, #1
 800da98:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f107 0210 	add.w	r2, r7, #16
 800daa2:	4611      	mov	r1, r2
 800daa4:	4618      	mov	r0, r3
 800daa6:	f003 fdff 	bl	80116a8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d90a      	bls.n	800dac6 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2282      	movs	r2, #130	; 0x82
 800dab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dabc:	4618      	mov	r0, r3
 800dabe:	f003 fe63 	bl	8011788 <SDMMC_CmdReadMultiBlock>
 800dac2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dac4:	e009      	b.n	800dada <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2281      	movs	r2, #129	; 0x81
 800daca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dad2:	4618      	mov	r0, r3
 800dad4:	f003 fe36 	bl	8011744 <SDMMC_CmdReadSingleBlock>
 800dad8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d012      	beq.n	800db06 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a0d      	ldr	r2, [pc, #52]	; (800db1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800dae6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	431a      	orrs	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800db02:	2301      	movs	r3, #1
 800db04:	e002      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	e000      	b.n	800db0c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800db0a:	2302      	movs	r3, #2
  }
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3730      	adds	r7, #48	; 0x30
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	0800e53b 	.word	0x0800e53b
 800db18:	0800e5ad 	.word	0x0800e5ad
 800db1c:	004005ff 	.word	0x004005ff
 800db20:	4225858c 	.word	0x4225858c

0800db24 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08c      	sub	sp, #48	; 0x30
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d107      	bne.n	800db4c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	e0ce      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b01      	cmp	r3, #1
 800db56:	f040 80c7 	bne.w	800dce8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	441a      	add	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d907      	bls.n	800db7e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	e0b5      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2203      	movs	r2, #3
 800db82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2200      	movs	r2, #0
 800db8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	6812      	ldr	r2, [r2, #0]
 800db98:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba6:	4a53      	ldr	r2, [pc, #332]	; (800dcf4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800dba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbae:	4a52      	ldr	r2, [pc, #328]	; (800dcf8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800dbb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d002      	beq.n	800dbc8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	025b      	lsls	r3, r3, #9
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f003 fd95 	bl	8011700 <SDMMC_CmdBlockLength>
 800dbd6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00f      	beq.n	800dbfe <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a46      	ldr	r2, [pc, #280]	; (800dcfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dbe4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbec:	431a      	orrs	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e075      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d90a      	bls.n	800dc1a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	22a0      	movs	r2, #160	; 0xa0
 800dc08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc10:	4618      	mov	r0, r3
 800dc12:	f003 fdfd 	bl	8011810 <SDMMC_CmdWriteMultiBlock>
 800dc16:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dc18:	e009      	b.n	800dc2e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2290      	movs	r2, #144	; 0x90
 800dc1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc26:	4618      	mov	r0, r3
 800dc28:	f003 fdd0 	bl	80117cc <SDMMC_CmdWriteSingleBlock>
 800dc2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d012      	beq.n	800dc5a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a30      	ldr	r2, [pc, #192]	; (800dcfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	431a      	orrs	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2200      	movs	r2, #0
 800dc54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e047      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dc5a:	4b29      	ldr	r3, [pc, #164]	; (800dd00 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dc64:	68b9      	ldr	r1, [r7, #8]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3380      	adds	r3, #128	; 0x80
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	025b      	lsls	r3, r3, #9
 800dc72:	089b      	lsrs	r3, r3, #2
 800dc74:	f7fe fc02 	bl	800c47c <HAL_DMA_Start_IT>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d01c      	beq.n	800dcb8 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	6812      	ldr	r2, [r2, #0]
 800dc88:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800dc8c:	f023 0302 	bic.w	r3, r3, #2
 800dc90:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a19      	ldr	r2, [pc, #100]	; (800dcfc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800dc98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e018      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcbc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	025b      	lsls	r3, r3, #9
 800dcc2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dcc4:	2390      	movs	r3, #144	; 0x90
 800dcc6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f107 0210 	add.w	r2, r7, #16
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f003 fce2 	bl	80116a8 <SDIO_ConfigData>

      return HAL_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	e000      	b.n	800dcea <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800dce8:	2302      	movs	r3, #2
  }
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3730      	adds	r7, #48	; 0x30
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	0800e511 	.word	0x0800e511
 800dcf8:	0800e5ad 	.word	0x0800e5ad
 800dcfc:	004005ff 	.word	0x004005ff
 800dd00:	4225858c 	.word	0x4225858c

0800dd04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd10:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <HAL_SD_IRQHandler+0x2e>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0308 	and.w	r3, r3, #8
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 ffe2 	bl	800ecf4 <SD_Read_IT>
 800dd30:	e165      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 808f 	beq.w	800de60 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd4a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800dd5a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800dd5e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f022 0201 	bic.w	r2, r2, #1
 800dd6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f003 0308 	and.w	r3, r3, #8
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d039      	beq.n	800ddee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f003 0302 	and.w	r3, r3, #2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d104      	bne.n	800dd8e <HAL_SD_IRQHandler+0x8a>
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f003 0320 	and.w	r3, r3, #32
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d011      	beq.n	800ddb2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f003 fd5e 	bl	8011854 <SDMMC_CmdStopTransfer>
 800dd98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d008      	beq.n	800ddb2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	431a      	orrs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f92f 	bl	800e010 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ddba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d104      	bne.n	800ddde <HAL_SD_IRQHandler+0xda>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f003 0302 	and.w	r3, r3, #2
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7f6 ffca 	bl	8004d78 <HAL_SD_RxCpltCallback>
 800dde4:	e10b      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7f6 ffd6 	bl	8004d98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ddec:	e107      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 8102 	beq.w	800dffe <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f003 0320 	and.w	r3, r3, #32
 800de00:	2b00      	cmp	r3, #0
 800de02:	d011      	beq.n	800de28 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4618      	mov	r0, r3
 800de0a:	f003 fd23 	bl	8011854 <SDMMC_CmdStopTransfer>
 800de0e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d008      	beq.n	800de28 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	431a      	orrs	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f8f4 	bl	800e010 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f040 80e5 	bne.w	800dffe <HAL_SD_IRQHandler+0x2fa>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f040 80df 	bne.w	800dffe <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f022 0208 	bic.w	r2, r2, #8
 800de4e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7f6 ff9d 	bl	8004d98 <HAL_SD_TxCpltCallback>
}
 800de5e:	e0ce      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d008      	beq.n	800de80 <HAL_SD_IRQHandler+0x17c>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f003 0308 	and.w	r3, r3, #8
 800de74:	2b00      	cmp	r3, #0
 800de76:	d003      	beq.n	800de80 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 ff8c 	bl	800ed96 <SD_Write_IT>
 800de7e:	e0be      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de86:	f240 233a 	movw	r3, #570	; 0x23a
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 80b6 	beq.w	800dffe <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d005      	beq.n	800deac <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea4:	f043 0202 	orr.w	r2, r3, #2
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb2:	f003 0308 	and.w	r3, r3, #8
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d005      	beq.n	800dec6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debe:	f043 0208 	orr.w	r2, r3, #8
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800decc:	f003 0320 	and.w	r3, r3, #32
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d005      	beq.n	800dee0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	f043 0220 	orr.w	r2, r3, #32
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee6:	f003 0310 	and.w	r3, r3, #16
 800deea:	2b00      	cmp	r3, #0
 800deec:	d005      	beq.n	800defa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	f043 0210 	orr.w	r2, r3, #16
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df04:	2b00      	cmp	r3, #0
 800df06:	d005      	beq.n	800df14 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0c:	f043 0208 	orr.w	r2, r3, #8
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f240 723a 	movw	r2, #1850	; 0x73a
 800df1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	6812      	ldr	r2, [r2, #0]
 800df28:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800df2c:	f023 0302 	bic.w	r3, r3, #2
 800df30:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	f003 fc8c 	bl	8011854 <SDMMC_CmdStopTransfer>
 800df3c:	4602      	mov	r2, r0
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df42:	431a      	orrs	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f003 0308 	and.w	r3, r3, #8
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00a      	beq.n	800df68 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 f855 	bl	800e010 <HAL_SD_ErrorCallback>
}
 800df66:	e04a      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d045      	beq.n	800dffe <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f003 0310 	and.w	r3, r3, #16
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d104      	bne.n	800df86 <HAL_SD_IRQHandler+0x282>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f003 0320 	and.w	r3, r3, #32
 800df82:	2b00      	cmp	r3, #0
 800df84:	d011      	beq.n	800dfaa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df8a:	4a1f      	ldr	r2, [pc, #124]	; (800e008 <HAL_SD_IRQHandler+0x304>)
 800df8c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df92:	4618      	mov	r0, r3
 800df94:	f7fe faca 	bl	800c52c <HAL_DMA_Abort_IT>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d02f      	beq.n	800dffe <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 fb54 	bl	800e650 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dfa8:	e029      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f003 0301 	and.w	r3, r3, #1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d104      	bne.n	800dfbe <HAL_SD_IRQHandler+0x2ba>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d011      	beq.n	800dfe2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfc2:	4a12      	ldr	r2, [pc, #72]	; (800e00c <HAL_SD_IRQHandler+0x308>)
 800dfc4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe faae 	bl	800c52c <HAL_DMA_Abort_IT>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d013      	beq.n	800dffe <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fb6f 	bl	800e6be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dfe0:	e00d      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f814 	bl	800e024 <HAL_SD_AbortCallback>
}
 800dffc:	e7ff      	b.n	800dffe <HAL_SD_IRQHandler+0x2fa>
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	0800e651 	.word	0x0800e651
 800e00c:	0800e6bf 	.word	0x0800e6bf

0800e010 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e046:	0f9b      	lsrs	r3, r3, #30
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e052:	0e9b      	lsrs	r3, r3, #26
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f003 030f 	and.w	r3, r3, #15
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e064:	0e1b      	lsrs	r3, r3, #24
 800e066:	b2db      	uxtb	r3, r3
 800e068:	f003 0303 	and.w	r3, r3, #3
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e076:	0c1b      	lsrs	r3, r3, #16
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e082:	0a1b      	lsrs	r3, r3, #8
 800e084:	b2da      	uxtb	r2, r3
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e098:	0d1b      	lsrs	r3, r3, #20
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0a4:	0c1b      	lsrs	r3, r3, #16
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	f003 030f 	and.w	r3, r3, #15
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0b6:	0bdb      	lsrs	r3, r3, #15
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	f003 0301 	and.w	r3, r3, #1
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0c8:	0b9b      	lsrs	r3, r3, #14
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 0301 	and.w	r3, r3, #1
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0da:	0b5b      	lsrs	r3, r3, #13
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ec:	0b1b      	lsrs	r3, r3, #12
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e104:	2b00      	cmp	r3, #0
 800e106:	d163      	bne.n	800e1d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e10c:	009a      	lsls	r2, r3, #2
 800e10e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e112:	4013      	ands	r3, r2
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e118:	0f92      	lsrs	r2, r2, #30
 800e11a:	431a      	orrs	r2, r3
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e124:	0edb      	lsrs	r3, r3, #27
 800e126:	b2db      	uxtb	r3, r3
 800e128:	f003 0307 	and.w	r3, r3, #7
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e136:	0e1b      	lsrs	r3, r3, #24
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	f003 0307 	and.w	r3, r3, #7
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e148:	0d5b      	lsrs	r3, r3, #21
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	f003 0307 	and.w	r3, r3, #7
 800e150:	b2da      	uxtb	r2, r3
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e15a:	0c9b      	lsrs	r3, r3, #18
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	f003 0307 	and.w	r3, r3, #7
 800e162:	b2da      	uxtb	r2, r3
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16c:	0bdb      	lsrs	r3, r3, #15
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	f003 0307 	and.w	r3, r3, #7
 800e174:	b2da      	uxtb	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	1c5a      	adds	r2, r3, #1
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	7e1b      	ldrb	r3, [r3, #24]
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	3302      	adds	r3, #2
 800e190:	2201      	movs	r2, #1
 800e192:	fa02 f303 	lsl.w	r3, r2, r3
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e19a:	fb02 f203 	mul.w	r2, r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	7a1b      	ldrb	r3, [r3, #8]
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	f003 030f 	and.w	r3, r3, #15
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	409a      	lsls	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e1bc:	0a52      	lsrs	r2, r2, #9
 800e1be:	fb02 f203 	mul.w	r2, r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1cc:	661a      	str	r2, [r3, #96]	; 0x60
 800e1ce:	e031      	b.n	800e234 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d11d      	bne.n	800e214 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1dc:	041b      	lsls	r3, r3, #16
 800e1de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e6:	0c1b      	lsrs	r3, r3, #16
 800e1e8:	431a      	orrs	r2, r3
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	029a      	lsls	r2, r3, #10
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e208:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	661a      	str	r2, [r3, #96]	; 0x60
 800e212:	e00f      	b.n	800e234 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a58      	ldr	r2, [pc, #352]	; (800e37c <HAL_SD_GetCardCSD+0x344>)
 800e21a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	e09d      	b.n	800e370 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e238:	0b9b      	lsrs	r3, r3, #14
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	b2da      	uxtb	r2, r3
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e24a:	09db      	lsrs	r3, r3, #7
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e252:	b2da      	uxtb	r2, r3
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e262:	b2da      	uxtb	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e26c:	0fdb      	lsrs	r3, r3, #31
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e278:	0f5b      	lsrs	r3, r3, #29
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	f003 0303 	and.w	r3, r3, #3
 800e280:	b2da      	uxtb	r2, r3
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e28a:	0e9b      	lsrs	r3, r3, #26
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0307 	and.w	r3, r3, #7
 800e292:	b2da      	uxtb	r2, r3
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29c:	0d9b      	lsrs	r3, r3, #22
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	f003 030f 	and.w	r3, r3, #15
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ae:	0d5b      	lsrs	r3, r3, #21
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ca:	0c1b      	lsrs	r3, r3, #16
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2de:	0bdb      	lsrs	r3, r3, #15
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f2:	0b9b      	lsrs	r3, r3, #14
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	f003 0301 	and.w	r3, r3, #1
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e306:	0b5b      	lsrs	r3, r3, #13
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	f003 0301 	and.w	r3, r3, #1
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31a:	0b1b      	lsrs	r3, r3, #12
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	b2da      	uxtb	r2, r3
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32e:	0a9b      	lsrs	r3, r3, #10
 800e330:	b2db      	uxtb	r3, r3
 800e332:	f003 0303 	and.w	r3, r3, #3
 800e336:	b2da      	uxtb	r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	0a1b      	lsrs	r3, r3, #8
 800e344:	b2db      	uxtb	r3, r3
 800e346:	f003 0303 	and.w	r3, r3, #3
 800e34a:	b2da      	uxtb	r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e356:	085b      	lsrs	r3, r3, #1
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2201      	movs	r2, #1
 800e36a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e36e:	2300      	movs	r3, #0
}
 800e370:	4618      	mov	r0, r3
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	004005ff 	.word	0x004005ff

0800e380 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e3ca:	2300      	movs	r3, #0
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e3d8:	b5b0      	push	{r4, r5, r7, lr}
 800e3da:	b08e      	sub	sp, #56	; 0x38
 800e3dc:	af04      	add	r7, sp, #16
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2203      	movs	r2, #3
 800e3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ee:	2b03      	cmp	r3, #3
 800e3f0:	d02e      	beq.n	800e450 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3f8:	d106      	bne.n	800e408 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	639a      	str	r2, [r3, #56]	; 0x38
 800e406:	e029      	b.n	800e45c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e40e:	d10a      	bne.n	800e426 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fb0f 	bl	800ea34 <SD_WideBus_Enable>
 800e416:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	431a      	orrs	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	639a      	str	r2, [r3, #56]	; 0x38
 800e424:	e01a      	b.n	800e45c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10a      	bne.n	800e442 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fb4c 	bl	800eaca <SD_WideBus_Disable>
 800e432:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	431a      	orrs	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
 800e440:	e00c      	b.n	800e45c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	639a      	str	r2, [r3, #56]	; 0x38
 800e44e:	e005      	b.n	800e45c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e460:	2b00      	cmp	r3, #0
 800e462:	d009      	beq.n	800e478 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a18      	ldr	r2, [pc, #96]	; (800e4cc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800e46a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e474:	2301      	movs	r3, #1
 800e476:	e024      	b.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	689b      	ldr	r3, [r3, #8]
 800e482:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681d      	ldr	r5, [r3, #0]
 800e49e:	466c      	mov	r4, sp
 800e4a0:	f107 0318 	add.w	r3, r7, #24
 800e4a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e4ac:	f107 030c 	add.w	r3, r7, #12
 800e4b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	f003 f848 	bl	8011548 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3728      	adds	r7, #40	; 0x28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	004005ff 	.word	0x004005ff

0800e4d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e4dc:	f107 030c 	add.w	r3, r7, #12
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fa7e 	bl	800e9e4 <SD_SendStatus>
 800e4e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d005      	beq.n	800e4fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	0a5b      	lsrs	r3, r3, #9
 800e500:	f003 030f 	and.w	r3, r3, #15
 800e504:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e506:	693b      	ldr	r3, [r7, #16]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e52c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e52e:	bf00      	nop
 800e530:	3714      	adds	r7, #20
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b084      	sub	sp, #16
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e546:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54c:	2b82      	cmp	r3, #130	; 0x82
 800e54e:	d111      	bne.n	800e574 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4618      	mov	r0, r3
 800e556:	f003 f97d 	bl	8011854 <SDMMC_CmdStopTransfer>
 800e55a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d008      	beq.n	800e574 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	431a      	orrs	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f7ff fd4e 	bl	800e010 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0208 	bic.w	r2, r2, #8
 800e582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f240 523a 	movw	r2, #1338	; 0x53a
 800e58c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7f6 fbeb 	bl	8004d78 <HAL_SD_RxCpltCallback>
#endif
}
 800e5a2:	bf00      	nop
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
	...

0800e5ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7fe f962 	bl	800c884 <HAL_DMA_GetError>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b02      	cmp	r3, #2
 800e5c4:	d03e      	beq.n	800e644 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d002      	beq.n	800e5e2 <SD_DMAError+0x36>
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d12d      	bne.n	800e63e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a19      	ldr	r2, [pc, #100]	; (800e64c <SD_DMAError+0xa0>)
 800e5e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e5f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	f7ff ff62 	bl	800e4d0 <HAL_SD_GetCardState>
 800e60c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b06      	cmp	r3, #6
 800e612:	d002      	beq.n	800e61a <SD_DMAError+0x6e>
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b05      	cmp	r3, #5
 800e618:	d10a      	bne.n	800e630 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4618      	mov	r0, r3
 800e620:	f003 f918 	bl	8011854 <SDMMC_CmdStopTransfer>
 800e624:	4602      	mov	r2, r0
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62a:	431a      	orrs	r2, r3
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	2200      	movs	r2, #0
 800e63c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e63e:	6978      	ldr	r0, [r7, #20]
 800e640:	f7ff fce6 	bl	800e010 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	004005ff 	.word	0x004005ff

0800e650 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f240 523a 	movw	r2, #1338	; 0x53a
 800e666:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff ff31 	bl	800e4d0 <HAL_SD_GetCardState>
 800e66e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b06      	cmp	r3, #6
 800e682:	d002      	beq.n	800e68a <SD_DMATxAbort+0x3a>
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	2b05      	cmp	r3, #5
 800e688:	d10a      	bne.n	800e6a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4618      	mov	r0, r3
 800e690:	f003 f8e0 	bl	8011854 <SDMMC_CmdStopTransfer>
 800e694:	4602      	mov	r2, r0
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69a:	431a      	orrs	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d103      	bne.n	800e6b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fcbb 	bl	800e024 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e6ae:	e002      	b.n	800e6b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f7ff fcad 	bl	800e010 <HAL_SD_ErrorCallback>
}
 800e6b6:	bf00      	nop
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}

0800e6be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e6be:	b580      	push	{r7, lr}
 800e6c0:	b084      	sub	sp, #16
 800e6c2:	af00      	add	r7, sp, #0
 800e6c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e6d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f7ff fefa 	bl	800e4d0 <HAL_SD_GetCardState>
 800e6dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b06      	cmp	r3, #6
 800e6f0:	d002      	beq.n	800e6f8 <SD_DMARxAbort+0x3a>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	2b05      	cmp	r3, #5
 800e6f6:	d10a      	bne.n	800e70e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f003 f8a9 	bl	8011854 <SDMMC_CmdStopTransfer>
 800e702:	4602      	mov	r2, r0
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	431a      	orrs	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f7ff fc84 	bl	800e024 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e71c:	e002      	b.n	800e724 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f7ff fc76 	bl	800e010 <HAL_SD_ErrorCallback>
}
 800e724:	bf00      	nop
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e72c:	b5b0      	push	{r4, r5, r7, lr}
 800e72e:	b094      	sub	sp, #80	; 0x50
 800e730:	af04      	add	r7, sp, #16
 800e732:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e734:	2301      	movs	r3, #1
 800e736:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f002 ff5b 	bl	80115f8 <SDIO_GetPowerState>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d102      	bne.n	800e74e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e748:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e74c:	e0b7      	b.n	800e8be <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e752:	2b03      	cmp	r3, #3
 800e754:	d02f      	beq.n	800e7b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f003 f984 	bl	8011a68 <SDMMC_CmdSendCID>
 800e760:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <SD_InitCard+0x40>
    {
      return errorstate;
 800e768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76a:	e0a8      	b.n	800e8be <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2100      	movs	r1, #0
 800e772:	4618      	mov	r0, r3
 800e774:	f002 ff85 	bl	8011682 <SDIO_GetResponse>
 800e778:	4602      	mov	r2, r0
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2104      	movs	r1, #4
 800e784:	4618      	mov	r0, r3
 800e786:	f002 ff7c 	bl	8011682 <SDIO_GetResponse>
 800e78a:	4602      	mov	r2, r0
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2108      	movs	r1, #8
 800e796:	4618      	mov	r0, r3
 800e798:	f002 ff73 	bl	8011682 <SDIO_GetResponse>
 800e79c:	4602      	mov	r2, r0
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	210c      	movs	r1, #12
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f002 ff6a 	bl	8011682 <SDIO_GetResponse>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d00d      	beq.n	800e7da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f107 020e 	add.w	r2, r7, #14
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f003 f98a 	bl	8011ae2 <SDMMC_CmdSetRelAdd>
 800e7ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <SD_InitCard+0xae>
    {
      return errorstate;
 800e7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d8:	e071      	b.n	800e8be <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	d036      	beq.n	800e850 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e7e2:	89fb      	ldrh	r3, [r7, #14]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7f2:	041b      	lsls	r3, r3, #16
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	f003 f954 	bl	8011aa4 <SDMMC_CmdSendCSD>
 800e7fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e806:	e05a      	b.n	800e8be <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f002 ff37 	bl	8011682 <SDIO_GetResponse>
 800e814:	4602      	mov	r2, r0
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2104      	movs	r1, #4
 800e820:	4618      	mov	r0, r3
 800e822:	f002 ff2e 	bl	8011682 <SDIO_GetResponse>
 800e826:	4602      	mov	r2, r0
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2108      	movs	r1, #8
 800e832:	4618      	mov	r0, r3
 800e834:	f002 ff25 	bl	8011682 <SDIO_GetResponse>
 800e838:	4602      	mov	r2, r0
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	210c      	movs	r1, #12
 800e844:	4618      	mov	r0, r3
 800e846:	f002 ff1c 	bl	8011682 <SDIO_GetResponse>
 800e84a:	4602      	mov	r2, r0
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2104      	movs	r1, #4
 800e856:	4618      	mov	r0, r3
 800e858:	f002 ff13 	bl	8011682 <SDIO_GetResponse>
 800e85c:	4603      	mov	r3, r0
 800e85e:	0d1a      	lsrs	r2, r3, #20
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e864:	f107 0310 	add.w	r3, r7, #16
 800e868:	4619      	mov	r1, r3
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7ff fbe4 	bl	800e038 <HAL_SD_GetCardCSD>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e87a:	e020      	b.n	800e8be <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6819      	ldr	r1, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e884:	041b      	lsls	r3, r3, #16
 800e886:	f04f 0400 	mov.w	r4, #0
 800e88a:	461a      	mov	r2, r3
 800e88c:	4623      	mov	r3, r4
 800e88e:	4608      	mov	r0, r1
 800e890:	f003 f802 	bl	8011898 <SDMMC_CmdSelDesel>
 800e894:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <SD_InitCard+0x174>
  {
    return errorstate;
 800e89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89e:	e00e      	b.n	800e8be <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681d      	ldr	r5, [r3, #0]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	466c      	mov	r4, sp
 800e8a8:	f103 0210 	add.w	r2, r3, #16
 800e8ac:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	f002 fe46 	bl	8011548 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3740      	adds	r7, #64	; 0x40
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e8c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f002 fffc 	bl	80118de <SDMMC_CmdGoIdleState>
 800e8e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	e072      	b.n	800e9d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f003 f80f 	bl	801191a <SDMMC_CmdOperCond>
 800e8fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00d      	beq.n	800e920 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4618      	mov	r0, r3
 800e910:	f002 ffe5 	bl	80118de <SDMMC_CmdGoIdleState>
 800e914:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d004      	beq.n	800e926 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	e05b      	b.n	800e9d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d137      	bne.n	800e99e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2100      	movs	r1, #0
 800e934:	4618      	mov	r0, r3
 800e936:	f003 f80f 	bl	8011958 <SDMMC_CmdAppCommand>
 800e93a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d02d      	beq.n	800e99e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e946:	e047      	b.n	800e9d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2100      	movs	r1, #0
 800e94e:	4618      	mov	r0, r3
 800e950:	f003 f802 	bl	8011958 <SDMMC_CmdAppCommand>
 800e954:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <SD_PowerON+0x98>
    {
      return errorstate;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	e03b      	b.n	800e9d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	491e      	ldr	r1, [pc, #120]	; (800e9e0 <SD_PowerON+0x118>)
 800e966:	4618      	mov	r0, r3
 800e968:	f003 f818 	bl	801199c <SDMMC_CmdAppOperCommand>
 800e96c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e978:	e02e      	b.n	800e9d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2100      	movs	r1, #0
 800e980:	4618      	mov	r0, r3
 800e982:	f002 fe7e 	bl	8011682 <SDIO_GetResponse>
 800e986:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	0fdb      	lsrs	r3, r3, #31
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d101      	bne.n	800e994 <SD_PowerON+0xcc>
 800e990:	2301      	movs	r3, #1
 800e992:	e000      	b.n	800e996 <SD_PowerON+0xce>
 800e994:	2300      	movs	r3, #0
 800e996:	613b      	str	r3, [r7, #16]

    count++;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	3301      	adds	r3, #1
 800e99c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	d802      	bhi.n	800e9ae <SD_PowerON+0xe6>
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d0cc      	beq.n	800e948 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d902      	bls.n	800e9be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e9b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e9bc:	e00c      	b.n	800e9d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d003      	beq.n	800e9d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	645a      	str	r2, [r3, #68]	; 0x44
 800e9ce:	e002      	b.n	800e9d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3718      	adds	r7, #24
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	c1100000 	.word	0xc1100000

0800e9e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b084      	sub	sp, #16
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e9f8:	e018      	b.n	800ea2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea02:	041b      	lsls	r3, r3, #16
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	f003 f88c 	bl	8011b24 <SDMMC_CmdSendStatus>
 800ea0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	e009      	b.n	800ea2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f002 fe2f 	bl	8011682 <SDIO_GetResponse>
 800ea24:	4602      	mov	r2, r0
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b086      	sub	sp, #24
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60fb      	str	r3, [r7, #12]
 800ea40:	2300      	movs	r3, #0
 800ea42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2100      	movs	r1, #0
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f002 fe19 	bl	8011682 <SDIO_GetResponse>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea5a:	d102      	bne.n	800ea62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea60:	e02f      	b.n	800eac2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea62:	f107 030c 	add.w	r3, r7, #12
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f879 	bl	800eb60 <SD_FindSCR>
 800ea6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	e023      	b.n	800eac2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d01c      	beq.n	800eabe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea8c:	041b      	lsls	r3, r3, #16
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4610      	mov	r0, r2
 800ea92:	f002 ff61 	bl	8011958 <SDMMC_CmdAppCommand>
 800ea96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	e00f      	b.n	800eac2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2102      	movs	r1, #2
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f002 ff9a 	bl	80119e2 <SDMMC_CmdBusWidth>
 800eaae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	e003      	b.n	800eac2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eaba:	2300      	movs	r3, #0
 800eabc:	e001      	b.n	800eac2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eabe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b086      	sub	sp, #24
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ead2:	2300      	movs	r3, #0
 800ead4:	60fb      	str	r3, [r7, #12]
 800ead6:	2300      	movs	r3, #0
 800ead8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2100      	movs	r1, #0
 800eae0:	4618      	mov	r0, r3
 800eae2:	f002 fdce 	bl	8011682 <SDIO_GetResponse>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaf0:	d102      	bne.n	800eaf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eaf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eaf6:	e02f      	b.n	800eb58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eaf8:	f107 030c 	add.w	r3, r7, #12
 800eafc:	4619      	mov	r1, r3
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f82e 	bl	800eb60 <SD_FindSCR>
 800eb04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d001      	beq.n	800eb10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	e023      	b.n	800eb58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d01c      	beq.n	800eb54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb22:	041b      	lsls	r3, r3, #16
 800eb24:	4619      	mov	r1, r3
 800eb26:	4610      	mov	r0, r2
 800eb28:	f002 ff16 	bl	8011958 <SDMMC_CmdAppCommand>
 800eb2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	e00f      	b.n	800eb58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f002 ff4f 	bl	80119e2 <SDMMC_CmdBusWidth>
 800eb44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	e003      	b.n	800eb58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb50:	2300      	movs	r3, #0
 800eb52:	e001      	b.n	800eb58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb60:	b590      	push	{r4, r7, lr}
 800eb62:	b08f      	sub	sp, #60	; 0x3c
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb6a:	f7fc fcd1 	bl	800b510 <HAL_GetTick>
 800eb6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb70:	2300      	movs	r3, #0
 800eb72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800eb74:	2300      	movs	r3, #0
 800eb76:	60bb      	str	r3, [r7, #8]
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2108      	movs	r1, #8
 800eb86:	4618      	mov	r0, r3
 800eb88:	f002 fdba 	bl	8011700 <SDMMC_CmdBlockLength>
 800eb8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb96:	e0a9      	b.n	800ecec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eba0:	041b      	lsls	r3, r3, #16
 800eba2:	4619      	mov	r1, r3
 800eba4:	4610      	mov	r0, r2
 800eba6:	f002 fed7 	bl	8011958 <SDMMC_CmdAppCommand>
 800ebaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	e09a      	b.n	800ecec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ebbc:	2308      	movs	r3, #8
 800ebbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ebc0:	2330      	movs	r3, #48	; 0x30
 800ebc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f107 0210 	add.w	r2, r7, #16
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f002 fd64 	bl	80116a8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f002 ff1e 	bl	8011a26 <SDMMC_CmdSendSCR>
 800ebea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d022      	beq.n	800ec38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	e07a      	b.n	800ecec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6819      	ldr	r1, [r3, #0]
 800ec08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	f107 0208 	add.w	r2, r7, #8
 800ec10:	18d4      	adds	r4, r2, r3
 800ec12:	4608      	mov	r0, r1
 800ec14:	f002 fcc3 	bl	801159e <SDIO_ReadFIFO>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	6023      	str	r3, [r4, #0]
      index++;
 800ec1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec1e:	3301      	adds	r3, #1
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec22:	f7fc fc75 	bl	800b510 <HAL_GetTick>
 800ec26:	4602      	mov	r2, r0
 800ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec30:	d102      	bne.n	800ec38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec36:	e059      	b.n	800ecec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec3e:	f240 432a 	movw	r3, #1066	; 0x42a
 800ec42:	4013      	ands	r3, r2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0d6      	beq.n	800ebf6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec4e:	f003 0308 	and.w	r3, r3, #8
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d005      	beq.n	800ec62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2208      	movs	r2, #8
 800ec5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec5e:	2308      	movs	r3, #8
 800ec60:	e044      	b.n	800ecec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec68:	f003 0302 	and.w	r3, r3, #2
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d005      	beq.n	800ec7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2202      	movs	r2, #2
 800ec76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	e037      	b.n	800ecec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec82:	f003 0320 	and.w	r3, r3, #32
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d005      	beq.n	800ec96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2220      	movs	r2, #32
 800ec90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec92:	2320      	movs	r3, #32
 800ec94:	e02a      	b.n	800ecec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	061a      	lsls	r2, r3, #24
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	021b      	lsls	r3, r3, #8
 800eca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	0a1b      	lsrs	r3, r3, #8
 800ecb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ecb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	0e1b      	lsrs	r3, r3, #24
 800ecbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	601a      	str	r2, [r3, #0]
    scr++;
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	061a      	lsls	r2, r3, #24
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecd4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	0a1b      	lsrs	r3, r3, #8
 800ecda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ecde:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	0e1b      	lsrs	r3, r3, #24
 800ece4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	373c      	adds	r7, #60	; 0x3c
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd90      	pop	{r4, r7, pc}

0800ecf4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d03f      	beq.n	800ed8e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ed0e:	2300      	movs	r3, #0
 800ed10:	617b      	str	r3, [r7, #20]
 800ed12:	e033      	b.n	800ed7c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f002 fc40 	bl	801159e <SDIO_ReadFIFO>
 800ed1e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	0a1b      	lsrs	r3, r3, #8
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3301      	adds	r3, #1
 800ed42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	0c1b      	lsrs	r3, r3, #16
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	0e1b      	lsrs	r3, r3, #24
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	3b01      	subs	r3, #1
 800ed74:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b07      	cmp	r3, #7
 800ed80:	d9c8      	bls.n	800ed14 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	693a      	ldr	r2, [r7, #16]
 800ed8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ed8e:	bf00      	nop
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b086      	sub	sp, #24
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d043      	beq.n	800ee38 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800edb0:	2300      	movs	r3, #0
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	e037      	b.n	800ee26 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3301      	adds	r3, #1
 800edc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	021a      	lsls	r2, r3, #8
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	3301      	adds	r3, #1
 800edd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	3b01      	subs	r3, #1
 800edde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	041a      	lsls	r2, r3, #16
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	4313      	orrs	r3, r2
 800edea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	3301      	adds	r3, #1
 800edf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	061a      	lsls	r2, r3, #24
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	3301      	adds	r3, #1
 800ee08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	f107 0208 	add.w	r2, r7, #8
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f002 fbcc 	bl	80115b8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	3301      	adds	r3, #1
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b07      	cmp	r3, #7
 800ee2a:	d9c4      	bls.n	800edb6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ee38:	bf00      	nop
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d101      	bne.n	800ee52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e056      	b.n	800ef00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7f6 fded 	bl	8005a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2202      	movs	r2, #2
 800ee76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	431a      	orrs	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	431a      	orrs	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	699b      	ldr	r3, [r3, #24]
 800eeaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a1b      	ldr	r3, [r3, #32]
 800eeba:	ea42 0103 	orr.w	r1, r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	430a      	orrs	r2, r1
 800eec8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	0c1b      	lsrs	r3, r3, #16
 800eed0:	f003 0104 	and.w	r1, r3, #4
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	430a      	orrs	r2, r1
 800eede:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	69da      	ldr	r2, [r3, #28]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eeee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e01a      	b.n	800ef50 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7f6 fe24 	bl	8005b80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08c      	sub	sp, #48	; 0x30
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ef66:	2301      	movs	r3, #1
 800ef68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d101      	bne.n	800ef7e <HAL_SPI_TransmitReceive+0x26>
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	e18a      	b.n	800f294 <HAL_SPI_TransmitReceive+0x33c>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef86:	f7fc fac3 	bl	800b510 <HAL_GetTick>
 800ef8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ef9c:	887b      	ldrh	r3, [r7, #2]
 800ef9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800efa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d00f      	beq.n	800efc8 <HAL_SPI_TransmitReceive+0x70>
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efae:	d107      	bne.n	800efc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d103      	bne.n	800efc0 <HAL_SPI_TransmitReceive+0x68>
 800efb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efbc:	2b04      	cmp	r3, #4
 800efbe:	d003      	beq.n	800efc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800efc0:	2302      	movs	r3, #2
 800efc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800efc6:	e15b      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <HAL_SPI_TransmitReceive+0x82>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <HAL_SPI_TransmitReceive+0x82>
 800efd4:	887b      	ldrh	r3, [r7, #2]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d103      	bne.n	800efe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800efe0:	e14e      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	2b04      	cmp	r3, #4
 800efec:	d003      	beq.n	800eff6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2205      	movs	r2, #5
 800eff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	887a      	ldrh	r2, [r7, #2]
 800f006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	887a      	ldrh	r2, [r7, #2]
 800f00c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	68ba      	ldr	r2, [r7, #8]
 800f012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	887a      	ldrh	r2, [r7, #2]
 800f018:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	887a      	ldrh	r2, [r7, #2]
 800f01e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f036:	2b40      	cmp	r3, #64	; 0x40
 800f038:	d007      	beq.n	800f04a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f052:	d178      	bne.n	800f146 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <HAL_SPI_TransmitReceive+0x10a>
 800f05c:	8b7b      	ldrh	r3, [r7, #26]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d166      	bne.n	800f130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f066:	881a      	ldrh	r2, [r3, #0]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f072:	1c9a      	adds	r2, r3, #2
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	3b01      	subs	r3, #1
 800f080:	b29a      	uxth	r2, r3
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f086:	e053      	b.n	800f130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	f003 0302 	and.w	r3, r3, #2
 800f092:	2b02      	cmp	r3, #2
 800f094:	d11b      	bne.n	800f0ce <HAL_SPI_TransmitReceive+0x176>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d016      	beq.n	800f0ce <HAL_SPI_TransmitReceive+0x176>
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d113      	bne.n	800f0ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0aa:	881a      	ldrh	r2, [r3, #0]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b6:	1c9a      	adds	r2, r3, #2
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	f003 0301 	and.w	r3, r3, #1
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d119      	bne.n	800f110 <HAL_SPI_TransmitReceive+0x1b8>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d014      	beq.n	800f110 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68da      	ldr	r2, [r3, #12]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f0:	b292      	uxth	r2, r2
 800f0f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f8:	1c9a      	adds	r2, r3, #2
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f102:	b29b      	uxth	r3, r3
 800f104:	3b01      	subs	r3, #1
 800f106:	b29a      	uxth	r2, r3
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f10c:	2301      	movs	r3, #1
 800f10e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f110:	f7fc f9fe 	bl	800b510 <HAL_GetTick>
 800f114:	4602      	mov	r2, r0
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d807      	bhi.n	800f130 <HAL_SPI_TransmitReceive+0x1d8>
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f126:	d003      	beq.n	800f130 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f128:	2303      	movs	r3, #3
 800f12a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f12e:	e0a7      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f134:	b29b      	uxth	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1a6      	bne.n	800f088 <HAL_SPI_TransmitReceive+0x130>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f13e:	b29b      	uxth	r3, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d1a1      	bne.n	800f088 <HAL_SPI_TransmitReceive+0x130>
 800f144:	e07c      	b.n	800f240 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d002      	beq.n	800f154 <HAL_SPI_TransmitReceive+0x1fc>
 800f14e:	8b7b      	ldrh	r3, [r7, #26]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d16b      	bne.n	800f22c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	330c      	adds	r3, #12
 800f15e:	7812      	ldrb	r2, [r2, #0]
 800f160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f166:	1c5a      	adds	r2, r3, #1
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f170:	b29b      	uxth	r3, r3
 800f172:	3b01      	subs	r3, #1
 800f174:	b29a      	uxth	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f17a:	e057      	b.n	800f22c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f003 0302 	and.w	r3, r3, #2
 800f186:	2b02      	cmp	r3, #2
 800f188:	d11c      	bne.n	800f1c4 <HAL_SPI_TransmitReceive+0x26c>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f18e:	b29b      	uxth	r3, r3
 800f190:	2b00      	cmp	r3, #0
 800f192:	d017      	beq.n	800f1c4 <HAL_SPI_TransmitReceive+0x26c>
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	2b01      	cmp	r3, #1
 800f198:	d114      	bne.n	800f1c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	330c      	adds	r3, #12
 800f1a4:	7812      	ldrb	r2, [r2, #0]
 800f1a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ac:	1c5a      	adds	r2, r3, #1
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d119      	bne.n	800f206 <HAL_SPI_TransmitReceive+0x2ae>
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d014      	beq.n	800f206 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	68da      	ldr	r2, [r3, #12]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e6:	b2d2      	uxtb	r2, r2
 800f1e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ee:	1c5a      	adds	r2, r3, #1
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f202:	2301      	movs	r3, #1
 800f204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f206:	f7fc f983 	bl	800b510 <HAL_GetTick>
 800f20a:	4602      	mov	r2, r0
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f212:	429a      	cmp	r2, r3
 800f214:	d803      	bhi.n	800f21e <HAL_SPI_TransmitReceive+0x2c6>
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21c:	d102      	bne.n	800f224 <HAL_SPI_TransmitReceive+0x2cc>
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	2b00      	cmp	r3, #0
 800f222:	d103      	bne.n	800f22c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f22a:	e029      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f230:	b29b      	uxth	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1a2      	bne.n	800f17c <HAL_SPI_TransmitReceive+0x224>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d19d      	bne.n	800f17c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 fae1 	bl	800f80c <SPI_EndRxTxTransaction>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d006      	beq.n	800f25e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f250:	2301      	movs	r3, #1
 800f252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2220      	movs	r2, #32
 800f25a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f25c:	e010      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10b      	bne.n	800f27e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f266:	2300      	movs	r3, #0
 800f268:	617b      	str	r3, [r7, #20]
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	689b      	ldr	r3, [r3, #8]
 800f278:	617b      	str	r3, [r7, #20]
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	e000      	b.n	800f280 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f27e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2201      	movs	r2, #1
 800f284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f294:	4618      	mov	r0, r3
 800f296:	3730      	adds	r7, #48	; 0x30
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	4613      	mov	r3, r2
 800f2a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d101      	bne.n	800f2bc <HAL_SPI_Transmit_DMA+0x20>
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	e093      	b.n	800f3e4 <HAL_SPI_Transmit_DMA+0x148>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d002      	beq.n	800f2d6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f2d4:	e081      	b.n	800f3da <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <HAL_SPI_Transmit_DMA+0x46>
 800f2dc:	88fb      	ldrh	r3, [r7, #6]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d102      	bne.n	800f2e8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f2e6:	e078      	b.n	800f3da <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2203      	movs	r2, #3
 800f2ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	88fa      	ldrh	r2, [r7, #6]
 800f300:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	88fa      	ldrh	r2, [r7, #6]
 800f306:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f32e:	d107      	bne.n	800f340 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f33e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f344:	4a29      	ldr	r2, [pc, #164]	; (800f3ec <HAL_SPI_Transmit_DMA+0x150>)
 800f346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f34c:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <HAL_SPI_Transmit_DMA+0x154>)
 800f34e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f354:	4a27      	ldr	r2, [pc, #156]	; (800f3f4 <HAL_SPI_Transmit_DMA+0x158>)
 800f356:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f35c:	2200      	movs	r2, #0
 800f35e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f368:	4619      	mov	r1, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	330c      	adds	r3, #12
 800f370:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f376:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800f378:	f7fd f880 	bl	800c47c <HAL_DMA_Start_IT>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00c      	beq.n	800f39c <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f386:	f043 0210 	orr.w	r2, r3, #16
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2201      	movs	r2, #1
 800f396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800f39a:	e01e      	b.n	800f3da <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a6:	2b40      	cmp	r3, #64	; 0x40
 800f3a8:	d007      	beq.n	800f3ba <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3b8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	685a      	ldr	r2, [r3, #4]
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f042 0220 	orr.w	r2, r2, #32
 800f3c8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f042 0202 	orr.w	r2, r2, #2
 800f3d8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3718      	adds	r7, #24
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0800f6b5 	.word	0x0800f6b5
 800f3f0:	0800f60d 	.word	0x0800f60d
 800f3f4:	0800f6d1 	.word	0x0800f6d1

0800f3f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b088      	sub	sp, #32
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f410:	69bb      	ldr	r3, [r7, #24]
 800f412:	099b      	lsrs	r3, r3, #6
 800f414:	f003 0301 	and.w	r3, r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10f      	bne.n	800f43c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00a      	beq.n	800f43c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	099b      	lsrs	r3, r3, #6
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d004      	beq.n	800f43c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	4798      	blx	r3
    return;
 800f43a:	e0d8      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	085b      	lsrs	r3, r3, #1
 800f440:	f003 0301 	and.w	r3, r3, #1
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00a      	beq.n	800f45e <HAL_SPI_IRQHandler+0x66>
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	09db      	lsrs	r3, r3, #7
 800f44c:	f003 0301 	and.w	r3, r3, #1
 800f450:	2b00      	cmp	r3, #0
 800f452:	d004      	beq.n	800f45e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	4798      	blx	r3
    return;
 800f45c:	e0c7      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	095b      	lsrs	r3, r3, #5
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10c      	bne.n	800f484 <HAL_SPI_IRQHandler+0x8c>
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	099b      	lsrs	r3, r3, #6
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	0a1b      	lsrs	r3, r3, #8
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 80b5 	beq.w	800f5ee <HAL_SPI_IRQHandler+0x1f6>
 800f484:	69fb      	ldr	r3, [r7, #28]
 800f486:	095b      	lsrs	r3, r3, #5
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 80ae 	beq.w	800f5ee <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	099b      	lsrs	r3, r3, #6
 800f496:	f003 0301 	and.w	r3, r3, #1
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d023      	beq.n	800f4e6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b03      	cmp	r3, #3
 800f4a8:	d011      	beq.n	800f4ce <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ae:	f043 0204 	orr.w	r2, r3, #4
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	617b      	str	r3, [r7, #20]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	617b      	str	r3, [r7, #20]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	617b      	str	r3, [r7, #20]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	e00b      	b.n	800f4e6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	613b      	str	r3, [r7, #16]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	613b      	str	r3, [r7, #16]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	613b      	str	r3, [r7, #16]
 800f4e2:	693b      	ldr	r3, [r7, #16]
        return;
 800f4e4:	e083      	b.n	800f5ee <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f4e6:	69bb      	ldr	r3, [r7, #24]
 800f4e8:	095b      	lsrs	r3, r3, #5
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d014      	beq.n	800f51c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4f6:	f043 0201 	orr.w	r2, r3, #1
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f4fe:	2300      	movs	r3, #0
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	0a1b      	lsrs	r3, r3, #8
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00c      	beq.n	800f542 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f52c:	f043 0208 	orr.w	r2, r3, #8
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f534:	2300      	movs	r3, #0
 800f536:	60bb      	str	r3, [r7, #8]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	60bb      	str	r3, [r7, #8]
 800f540:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f546:	2b00      	cmp	r3, #0
 800f548:	d050      	beq.n	800f5ec <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f558:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	f003 0302 	and.w	r3, r3, #2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d104      	bne.n	800f576 <HAL_SPI_IRQHandler+0x17e>
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d034      	beq.n	800f5e0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	685a      	ldr	r2, [r3, #4]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f022 0203 	bic.w	r2, r2, #3
 800f584:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d011      	beq.n	800f5b2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f592:	4a18      	ldr	r2, [pc, #96]	; (800f5f4 <HAL_SPI_IRQHandler+0x1fc>)
 800f594:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fc ffc6 	bl	800c52c <HAL_DMA_Abort_IT>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d005      	beq.n	800f5b2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d016      	beq.n	800f5e8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5be:	4a0d      	ldr	r2, [pc, #52]	; (800f5f4 <HAL_SPI_IRQHandler+0x1fc>)
 800f5c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fc ffb0 	bl	800c52c <HAL_DMA_Abort_IT>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00a      	beq.n	800f5e8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f5de:	e003      	b.n	800f5e8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7f6 f9ff 	bl	80059e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f5e6:	e000      	b.n	800f5ea <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f5e8:	bf00      	nop
    return;
 800f5ea:	bf00      	nop
 800f5ec:	bf00      	nop
  }
}
 800f5ee:	3720      	adds	r7, #32
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	0800f711 	.word	0x0800f711

0800f5f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f618:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f61a:	f7fb ff79 	bl	800b510 <HAL_GetTick>
 800f61e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f62e:	d03b      	beq.n	800f6a8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	685a      	ldr	r2, [r3, #4]
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f022 0220 	bic.w	r2, r2, #32
 800f63e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f022 0202 	bic.w	r2, r2, #2
 800f64e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	2164      	movs	r1, #100	; 0x64
 800f654:	6978      	ldr	r0, [r7, #20]
 800f656:	f000 f8d9 	bl	800f80c <SPI_EndRxTxTransaction>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d005      	beq.n	800f66c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f664:	f043 0220 	orr.w	r2, r3, #32
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f674:	2300      	movs	r3, #0
 800f676:	60fb      	str	r3, [r7, #12]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2200      	movs	r2, #0
 800f68e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d003      	beq.n	800f6a8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f6a0:	6978      	ldr	r0, [r7, #20]
 800f6a2:	f7f6 f99f 	bl	80059e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f6a6:	e002      	b.n	800f6ae <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800f6a8:	6978      	ldr	r0, [r7, #20]
 800f6aa:	f7f6 f9b1 	bl	8005a10 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f6ae:	3718      	adds	r7, #24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f7ff ff98 	bl	800f5f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f6c8:	bf00      	nop
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	f022 0203 	bic.w	r2, r2, #3
 800f6ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6f2:	f043 0210 	orr.w	r2, r3, #16
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f7f6 f96e 	bl	80059e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f708:	bf00      	nop
 800f70a:	3710      	adds	r7, #16
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}

0800f710 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2200      	movs	r2, #0
 800f722:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2200      	movs	r2, #0
 800f728:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f7f6 f95a 	bl	80059e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f730:	bf00      	nop
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	603b      	str	r3, [r7, #0]
 800f744:	4613      	mov	r3, r2
 800f746:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f748:	e04c      	b.n	800f7e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f750:	d048      	beq.n	800f7e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f752:	f7fb fedd 	bl	800b510 <HAL_GetTick>
 800f756:	4602      	mov	r2, r0
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d902      	bls.n	800f768 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d13d      	bne.n	800f7e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f780:	d111      	bne.n	800f7a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f78a:	d004      	beq.n	800f796 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f794:	d107      	bne.n	800f7a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7ae:	d10f      	bne.n	800f7d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7be:	601a      	str	r2, [r3, #0]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f7e0:	2303      	movs	r3, #3
 800f7e2:	e00f      	b.n	800f804 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689a      	ldr	r2, [r3, #8]
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	bf0c      	ite	eq
 800f7f4:	2301      	moveq	r3, #1
 800f7f6:	2300      	movne	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d1a3      	bne.n	800f74a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b088      	sub	sp, #32
 800f810:	af02      	add	r7, sp, #8
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f818:	4b1b      	ldr	r3, [pc, #108]	; (800f888 <SPI_EndRxTxTransaction+0x7c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a1b      	ldr	r2, [pc, #108]	; (800f88c <SPI_EndRxTxTransaction+0x80>)
 800f81e:	fba2 2303 	umull	r2, r3, r2, r3
 800f822:	0d5b      	lsrs	r3, r3, #21
 800f824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f828:	fb02 f303 	mul.w	r3, r2, r3
 800f82c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f836:	d112      	bne.n	800f85e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2200      	movs	r2, #0
 800f840:	2180      	movs	r1, #128	; 0x80
 800f842:	68f8      	ldr	r0, [r7, #12]
 800f844:	f7ff ff78 	bl	800f738 <SPI_WaitFlagStateUntilTimeout>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d016      	beq.n	800f87c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f852:	f043 0220 	orr.w	r2, r3, #32
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f85a:	2303      	movs	r3, #3
 800f85c:	e00f      	b.n	800f87e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00a      	beq.n	800f87a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	3b01      	subs	r3, #1
 800f868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f874:	2b80      	cmp	r3, #128	; 0x80
 800f876:	d0f2      	beq.n	800f85e <SPI_EndRxTxTransaction+0x52>
 800f878:	e000      	b.n	800f87c <SPI_EndRxTxTransaction+0x70>
        break;
 800f87a:	bf00      	nop
  }

  return HAL_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3718      	adds	r7, #24
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20000000 	.word	0x20000000
 800f88c:	165e9f81 	.word	0x165e9f81

0800f890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d101      	bne.n	800f8a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e01d      	b.n	800f8de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d106      	bne.n	800f8bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7f5 fdfe 	bl	80054b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2202      	movs	r2, #2
 800f8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	f000 fb2a 	bl	800ff28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3708      	adds	r7, #8
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b082      	sub	sp, #8
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d101      	bne.n	800f8f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e01d      	b.n	800f934 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b00      	cmp	r3, #0
 800f902:	d106      	bne.n	800f912 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f815 	bl	800f93c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2202      	movs	r2, #2
 800f916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3304      	adds	r3, #4
 800f922:	4619      	mov	r1, r3
 800f924:	4610      	mov	r0, r2
 800f926:	f000 faff 	bl	800ff28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2201      	movs	r2, #1
 800f92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2b0c      	cmp	r3, #12
 800f95e:	d841      	bhi.n	800f9e4 <HAL_TIM_IC_Start_IT+0x94>
 800f960:	a201      	add	r2, pc, #4	; (adr r2, 800f968 <HAL_TIM_IC_Start_IT+0x18>)
 800f962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f966:	bf00      	nop
 800f968:	0800f99d 	.word	0x0800f99d
 800f96c:	0800f9e5 	.word	0x0800f9e5
 800f970:	0800f9e5 	.word	0x0800f9e5
 800f974:	0800f9e5 	.word	0x0800f9e5
 800f978:	0800f9af 	.word	0x0800f9af
 800f97c:	0800f9e5 	.word	0x0800f9e5
 800f980:	0800f9e5 	.word	0x0800f9e5
 800f984:	0800f9e5 	.word	0x0800f9e5
 800f988:	0800f9c1 	.word	0x0800f9c1
 800f98c:	0800f9e5 	.word	0x0800f9e5
 800f990:	0800f9e5 	.word	0x0800f9e5
 800f994:	0800f9e5 	.word	0x0800f9e5
 800f998:	0800f9d3 	.word	0x0800f9d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68da      	ldr	r2, [r3, #12]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	f042 0202 	orr.w	r2, r2, #2
 800f9aa:	60da      	str	r2, [r3, #12]
      break;
 800f9ac:	e01b      	b.n	800f9e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68da      	ldr	r2, [r3, #12]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f042 0204 	orr.w	r2, r2, #4
 800f9bc:	60da      	str	r2, [r3, #12]
      break;
 800f9be:	e012      	b.n	800f9e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	68da      	ldr	r2, [r3, #12]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f042 0208 	orr.w	r2, r2, #8
 800f9ce:	60da      	str	r2, [r3, #12]
      break;
 800f9d0:	e009      	b.n	800f9e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f042 0210 	orr.w	r2, r2, #16
 800f9e0:	60da      	str	r2, [r3, #12]
      break;
 800f9e2:	e000      	b.n	800f9e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800f9e4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f000 fcd2 	bl	8010398 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f003 0307 	and.w	r3, r3, #7
 800f9fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2b06      	cmp	r3, #6
 800fa04:	d007      	beq.n	800fa16 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f042 0201 	orr.w	r2, r2, #1
 800fa14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	f003 0302 	and.w	r3, r3, #2
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d122      	bne.n	800fa7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	f003 0302 	and.w	r3, r3, #2
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d11b      	bne.n	800fa7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f06f 0202 	mvn.w	r2, #2
 800fa4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2201      	movs	r2, #1
 800fa52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	699b      	ldr	r3, [r3, #24]
 800fa5a:	f003 0303 	and.w	r3, r3, #3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7f5 fd78 	bl	8005558 <HAL_TIM_IC_CaptureCallback>
 800fa68:	e005      	b.n	800fa76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 fa3d 	bl	800feea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fa44 	bl	800fefe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	691b      	ldr	r3, [r3, #16]
 800fa82:	f003 0304 	and.w	r3, r3, #4
 800fa86:	2b04      	cmp	r3, #4
 800fa88:	d122      	bne.n	800fad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	f003 0304 	and.w	r3, r3, #4
 800fa94:	2b04      	cmp	r3, #4
 800fa96:	d11b      	bne.n	800fad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f06f 0204 	mvn.w	r2, #4
 800faa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2202      	movs	r2, #2
 800faa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7f5 fd4e 	bl	8005558 <HAL_TIM_IC_CaptureCallback>
 800fabc:	e005      	b.n	800faca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fa13 	bl	800feea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fa1a 	bl	800fefe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	f003 0308 	and.w	r3, r3, #8
 800fada:	2b08      	cmp	r3, #8
 800fadc:	d122      	bne.n	800fb24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	f003 0308 	and.w	r3, r3, #8
 800fae8:	2b08      	cmp	r3, #8
 800faea:	d11b      	bne.n	800fb24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f06f 0208 	mvn.w	r2, #8
 800faf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2204      	movs	r2, #4
 800fafa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	f003 0303 	and.w	r3, r3, #3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d003      	beq.n	800fb12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7f5 fd24 	bl	8005558 <HAL_TIM_IC_CaptureCallback>
 800fb10:	e005      	b.n	800fb1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f9e9 	bl	800feea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f9f0 	bl	800fefe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	f003 0310 	and.w	r3, r3, #16
 800fb2e:	2b10      	cmp	r3, #16
 800fb30:	d122      	bne.n	800fb78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	f003 0310 	and.w	r3, r3, #16
 800fb3c:	2b10      	cmp	r3, #16
 800fb3e:	d11b      	bne.n	800fb78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f06f 0210 	mvn.w	r2, #16
 800fb48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2208      	movs	r2, #8
 800fb4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	69db      	ldr	r3, [r3, #28]
 800fb56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d003      	beq.n	800fb66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7f5 fcfa 	bl	8005558 <HAL_TIM_IC_CaptureCallback>
 800fb64:	e005      	b.n	800fb72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 f9bf 	bl	800feea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f9c6 	bl	800fefe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	f003 0301 	and.w	r3, r3, #1
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d10e      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d107      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f06f 0201 	mvn.w	r2, #1
 800fb9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 f999 	bl	800fed6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbae:	2b80      	cmp	r3, #128	; 0x80
 800fbb0:	d10e      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbbc:	2b80      	cmp	r3, #128	; 0x80
 800fbbe:	d107      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fc82 	bl	80104d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbda:	2b40      	cmp	r3, #64	; 0x40
 800fbdc:	d10e      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbe8:	2b40      	cmp	r3, #64	; 0x40
 800fbea:	d107      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 f98b 	bl	800ff12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	f003 0320 	and.w	r3, r3, #32
 800fc06:	2b20      	cmp	r3, #32
 800fc08:	d10e      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	f003 0320 	and.w	r3, r3, #32
 800fc14:	2b20      	cmp	r3, #32
 800fc16:	d107      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f06f 0220 	mvn.w	r2, #32
 800fc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fc4c 	bl	80104c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d101      	bne.n	800fc4a <HAL_TIM_IC_ConfigChannel+0x1a>
 800fc46:	2302      	movs	r3, #2
 800fc48:	e08a      	b.n	800fd60 <HAL_TIM_IC_ConfigChannel+0x130>
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2202      	movs	r2, #2
 800fc56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d11b      	bne.n	800fc98 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6818      	ldr	r0, [r3, #0]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	6819      	ldr	r1, [r3, #0]
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	685a      	ldr	r2, [r3, #4]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	f000 f9da 	bl	8010028 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	699a      	ldr	r2, [r3, #24]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f022 020c 	bic.w	r2, r2, #12
 800fc82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6999      	ldr	r1, [r3, #24]
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	689a      	ldr	r2, [r3, #8]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	430a      	orrs	r2, r1
 800fc94:	619a      	str	r2, [r3, #24]
 800fc96:	e05a      	b.n	800fd4e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b04      	cmp	r3, #4
 800fc9c:	d11c      	bne.n	800fcd8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	6819      	ldr	r1, [r3, #0]
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	685a      	ldr	r2, [r3, #4]
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	f000 fa52 	bl	8010156 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	699a      	ldr	r2, [r3, #24]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fcc0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6999      	ldr	r1, [r3, #24]
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	021a      	lsls	r2, r3, #8
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	430a      	orrs	r2, r1
 800fcd4:	619a      	str	r2, [r3, #24]
 800fcd6:	e03a      	b.n	800fd4e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b08      	cmp	r3, #8
 800fcdc:	d11b      	bne.n	800fd16 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6818      	ldr	r0, [r3, #0]
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	6819      	ldr	r1, [r3, #0]
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	685a      	ldr	r2, [r3, #4]
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	f000 fa9f 	bl	8010230 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	69da      	ldr	r2, [r3, #28]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f022 020c 	bic.w	r2, r2, #12
 800fd00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	69d9      	ldr	r1, [r3, #28]
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	689a      	ldr	r2, [r3, #8]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	430a      	orrs	r2, r1
 800fd12:	61da      	str	r2, [r3, #28]
 800fd14:	e01b      	b.n	800fd4e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	6819      	ldr	r1, [r3, #0]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	f000 fabf 	bl	80102a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	69da      	ldr	r2, [r3, #28]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fd38:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	69d9      	ldr	r1, [r3, #28]
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	021a      	lsls	r2, r3, #8
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	2201      	movs	r2, #1
 800fd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b084      	sub	sp, #16
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d101      	bne.n	800fd80 <HAL_TIM_ConfigClockSource+0x18>
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	e0a6      	b.n	800fece <HAL_TIM_ConfigClockSource+0x166>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2201      	movs	r2, #1
 800fd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fd9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fda6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b40      	cmp	r3, #64	; 0x40
 800fdb6:	d067      	beq.n	800fe88 <HAL_TIM_ConfigClockSource+0x120>
 800fdb8:	2b40      	cmp	r3, #64	; 0x40
 800fdba:	d80b      	bhi.n	800fdd4 <HAL_TIM_ConfigClockSource+0x6c>
 800fdbc:	2b10      	cmp	r3, #16
 800fdbe:	d073      	beq.n	800fea8 <HAL_TIM_ConfigClockSource+0x140>
 800fdc0:	2b10      	cmp	r3, #16
 800fdc2:	d802      	bhi.n	800fdca <HAL_TIM_ConfigClockSource+0x62>
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d06f      	beq.n	800fea8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800fdc8:	e078      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fdca:	2b20      	cmp	r3, #32
 800fdcc:	d06c      	beq.n	800fea8 <HAL_TIM_ConfigClockSource+0x140>
 800fdce:	2b30      	cmp	r3, #48	; 0x30
 800fdd0:	d06a      	beq.n	800fea8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800fdd2:	e073      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fdd4:	2b70      	cmp	r3, #112	; 0x70
 800fdd6:	d00d      	beq.n	800fdf4 <HAL_TIM_ConfigClockSource+0x8c>
 800fdd8:	2b70      	cmp	r3, #112	; 0x70
 800fdda:	d804      	bhi.n	800fde6 <HAL_TIM_ConfigClockSource+0x7e>
 800fddc:	2b50      	cmp	r3, #80	; 0x50
 800fdde:	d033      	beq.n	800fe48 <HAL_TIM_ConfigClockSource+0xe0>
 800fde0:	2b60      	cmp	r3, #96	; 0x60
 800fde2:	d041      	beq.n	800fe68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800fde4:	e06a      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800fde6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdea:	d066      	beq.n	800feba <HAL_TIM_ConfigClockSource+0x152>
 800fdec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdf0:	d017      	beq.n	800fe22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800fdf2:	e063      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6818      	ldr	r0, [r3, #0]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	6899      	ldr	r1, [r3, #8]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	f000 faa8 	bl	8010358 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	689b      	ldr	r3, [r3, #8]
 800fe0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fe16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	609a      	str	r2, [r3, #8]
      break;
 800fe20:	e04c      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6818      	ldr	r0, [r3, #0]
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	6899      	ldr	r1, [r3, #8]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	f000 fa91 	bl	8010358 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689a      	ldr	r2, [r3, #8]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe44:	609a      	str	r2, [r3, #8]
      break;
 800fe46:	e039      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6818      	ldr	r0, [r3, #0]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	6859      	ldr	r1, [r3, #4]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	461a      	mov	r2, r3
 800fe56:	f000 f94f 	bl	80100f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2150      	movs	r1, #80	; 0x50
 800fe60:	4618      	mov	r0, r3
 800fe62:	f000 fa5e 	bl	8010322 <TIM_ITRx_SetConfig>
      break;
 800fe66:	e029      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6818      	ldr	r0, [r3, #0]
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	6859      	ldr	r1, [r3, #4]
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	461a      	mov	r2, r3
 800fe76:	f000 f9ab 	bl	80101d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2160      	movs	r1, #96	; 0x60
 800fe80:	4618      	mov	r0, r3
 800fe82:	f000 fa4e 	bl	8010322 <TIM_ITRx_SetConfig>
      break;
 800fe86:	e019      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6818      	ldr	r0, [r3, #0]
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	6859      	ldr	r1, [r3, #4]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	461a      	mov	r2, r3
 800fe96:	f000 f92f 	bl	80100f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2140      	movs	r1, #64	; 0x40
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 fa3e 	bl	8010322 <TIM_ITRx_SetConfig>
      break;
 800fea6:	e009      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4619      	mov	r1, r3
 800feb2:	4610      	mov	r0, r2
 800feb4:	f000 fa35 	bl	8010322 <TIM_ITRx_SetConfig>
      break;
 800feb8:	e000      	b.n	800febc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800feba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2201      	movs	r2, #1
 800fec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}

0800fed6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fed6:	b480      	push	{r7}
 800fed8:	b083      	sub	sp, #12
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fede:	bf00      	nop
 800fee0:	370c      	adds	r7, #12
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800feea:	b480      	push	{r7}
 800feec:	b083      	sub	sp, #12
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fef2:	bf00      	nop
 800fef4:	370c      	adds	r7, #12
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr

0800fefe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fefe:	b480      	push	{r7}
 800ff00:	b083      	sub	sp, #12
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff06:	bf00      	nop
 800ff08:	370c      	adds	r7, #12
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr

0800ff12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff12:	b480      	push	{r7}
 800ff14:	b083      	sub	sp, #12
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff1a:	bf00      	nop
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
	...

0800ff28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a34      	ldr	r2, [pc, #208]	; (801000c <TIM_Base_SetConfig+0xe4>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d00f      	beq.n	800ff60 <TIM_Base_SetConfig+0x38>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff46:	d00b      	beq.n	800ff60 <TIM_Base_SetConfig+0x38>
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	4a31      	ldr	r2, [pc, #196]	; (8010010 <TIM_Base_SetConfig+0xe8>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d007      	beq.n	800ff60 <TIM_Base_SetConfig+0x38>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	4a30      	ldr	r2, [pc, #192]	; (8010014 <TIM_Base_SetConfig+0xec>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d003      	beq.n	800ff60 <TIM_Base_SetConfig+0x38>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4a2f      	ldr	r2, [pc, #188]	; (8010018 <TIM_Base_SetConfig+0xf0>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d108      	bne.n	800ff72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	4313      	orrs	r3, r2
 800ff70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4a25      	ldr	r2, [pc, #148]	; (801000c <TIM_Base_SetConfig+0xe4>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d01b      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff80:	d017      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a22      	ldr	r2, [pc, #136]	; (8010010 <TIM_Base_SetConfig+0xe8>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d013      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4a21      	ldr	r2, [pc, #132]	; (8010014 <TIM_Base_SetConfig+0xec>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d00f      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4a20      	ldr	r2, [pc, #128]	; (8010018 <TIM_Base_SetConfig+0xf0>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d00b      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a1f      	ldr	r2, [pc, #124]	; (801001c <TIM_Base_SetConfig+0xf4>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d007      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4a1e      	ldr	r2, [pc, #120]	; (8010020 <TIM_Base_SetConfig+0xf8>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d003      	beq.n	800ffb2 <TIM_Base_SetConfig+0x8a>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	4a1d      	ldr	r2, [pc, #116]	; (8010024 <TIM_Base_SetConfig+0xfc>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d108      	bne.n	800ffc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	695b      	ldr	r3, [r3, #20]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	689a      	ldr	r2, [r3, #8]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a08      	ldr	r2, [pc, #32]	; (801000c <TIM_Base_SetConfig+0xe4>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d103      	bne.n	800fff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	691a      	ldr	r2, [r3, #16]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2201      	movs	r2, #1
 800fffc:	615a      	str	r2, [r3, #20]
}
 800fffe:	bf00      	nop
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	40010000 	.word	0x40010000
 8010010:	40000400 	.word	0x40000400
 8010014:	40000800 	.word	0x40000800
 8010018:	40000c00 	.word	0x40000c00
 801001c:	40014000 	.word	0x40014000
 8010020:	40014400 	.word	0x40014400
 8010024:	40014800 	.word	0x40014800

08010028 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010028:	b480      	push	{r7}
 801002a:	b087      	sub	sp, #28
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
 8010034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	f023 0201 	bic.w	r2, r3, #1
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6a1b      	ldr	r3, [r3, #32]
 801004c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	4a24      	ldr	r2, [pc, #144]	; (80100e4 <TIM_TI1_SetConfig+0xbc>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d013      	beq.n	801007e <TIM_TI1_SetConfig+0x56>
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801005c:	d00f      	beq.n	801007e <TIM_TI1_SetConfig+0x56>
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	4a21      	ldr	r2, [pc, #132]	; (80100e8 <TIM_TI1_SetConfig+0xc0>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d00b      	beq.n	801007e <TIM_TI1_SetConfig+0x56>
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	4a20      	ldr	r2, [pc, #128]	; (80100ec <TIM_TI1_SetConfig+0xc4>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d007      	beq.n	801007e <TIM_TI1_SetConfig+0x56>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	4a1f      	ldr	r2, [pc, #124]	; (80100f0 <TIM_TI1_SetConfig+0xc8>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d003      	beq.n	801007e <TIM_TI1_SetConfig+0x56>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	4a1e      	ldr	r2, [pc, #120]	; (80100f4 <TIM_TI1_SetConfig+0xcc>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d101      	bne.n	8010082 <TIM_TI1_SetConfig+0x5a>
 801007e:	2301      	movs	r3, #1
 8010080:	e000      	b.n	8010084 <TIM_TI1_SetConfig+0x5c>
 8010082:	2300      	movs	r3, #0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d008      	beq.n	801009a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f023 0303 	bic.w	r3, r3, #3
 801008e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010090:	697a      	ldr	r2, [r7, #20]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4313      	orrs	r3, r2
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	e003      	b.n	80100a2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	f043 0301 	orr.w	r3, r3, #1
 80100a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80100a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	011b      	lsls	r3, r3, #4
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	697a      	ldr	r2, [r7, #20]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	f023 030a 	bic.w	r3, r3, #10
 80100bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	f003 030a 	and.w	r3, r3, #10
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	697a      	ldr	r2, [r7, #20]
 80100ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	693a      	ldr	r2, [r7, #16]
 80100d4:	621a      	str	r2, [r3, #32]
}
 80100d6:	bf00      	nop
 80100d8:	371c      	adds	r7, #28
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	40010000 	.word	0x40010000
 80100e8:	40000400 	.word	0x40000400
 80100ec:	40000800 	.word	0x40000800
 80100f0:	40000c00 	.word	0x40000c00
 80100f4:	40014000 	.word	0x40014000

080100f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b087      	sub	sp, #28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6a1b      	ldr	r3, [r3, #32]
 8010108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6a1b      	ldr	r3, [r3, #32]
 801010e:	f023 0201 	bic.w	r2, r3, #1
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	699b      	ldr	r3, [r3, #24]
 801011a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	011b      	lsls	r3, r3, #4
 8010128:	693a      	ldr	r2, [r7, #16]
 801012a:	4313      	orrs	r3, r2
 801012c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f023 030a 	bic.w	r3, r3, #10
 8010134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	4313      	orrs	r3, r2
 801013c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	621a      	str	r2, [r3, #32]
}
 801014a:	bf00      	nop
 801014c:	371c      	adds	r7, #28
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010156:	b480      	push	{r7}
 8010158:	b087      	sub	sp, #28
 801015a:	af00      	add	r7, sp, #0
 801015c:	60f8      	str	r0, [r7, #12]
 801015e:	60b9      	str	r1, [r7, #8]
 8010160:	607a      	str	r2, [r7, #4]
 8010162:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6a1b      	ldr	r3, [r3, #32]
 8010168:	f023 0210 	bic.w	r2, r3, #16
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6a1b      	ldr	r3, [r3, #32]
 801017a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	021b      	lsls	r3, r3, #8
 8010188:	697a      	ldr	r2, [r7, #20]
 801018a:	4313      	orrs	r3, r2
 801018c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	031b      	lsls	r3, r3, #12
 801019a:	b29b      	uxth	r3, r3
 801019c:	697a      	ldr	r2, [r7, #20]
 801019e:	4313      	orrs	r3, r2
 80101a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80101a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	011b      	lsls	r3, r3, #4
 80101ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	4313      	orrs	r3, r2
 80101b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	693a      	ldr	r2, [r7, #16]
 80101c2:	621a      	str	r2, [r3, #32]
}
 80101c4:	bf00      	nop
 80101c6:	371c      	adds	r7, #28
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b087      	sub	sp, #28
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6a1b      	ldr	r3, [r3, #32]
 80101e0:	f023 0210 	bic.w	r2, r3, #16
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80101fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	031b      	lsls	r3, r3, #12
 8010200:	697a      	ldr	r2, [r7, #20]
 8010202:	4313      	orrs	r3, r2
 8010204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801020c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	011b      	lsls	r3, r3, #4
 8010212:	693a      	ldr	r2, [r7, #16]
 8010214:	4313      	orrs	r3, r2
 8010216:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	697a      	ldr	r2, [r7, #20]
 801021c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	693a      	ldr	r2, [r7, #16]
 8010222:	621a      	str	r2, [r3, #32]
}
 8010224:	bf00      	nop
 8010226:	371c      	adds	r7, #28
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010230:	b480      	push	{r7}
 8010232:	b087      	sub	sp, #28
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
 801023c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	69db      	ldr	r3, [r3, #28]
 801024e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6a1b      	ldr	r3, [r3, #32]
 8010254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	f023 0303 	bic.w	r3, r3, #3
 801025c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801025e:	697a      	ldr	r2, [r7, #20]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4313      	orrs	r3, r2
 8010264:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801026c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	011b      	lsls	r3, r3, #4
 8010272:	b2db      	uxtb	r3, r3
 8010274:	697a      	ldr	r2, [r7, #20]
 8010276:	4313      	orrs	r3, r2
 8010278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010280:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	021b      	lsls	r3, r3, #8
 8010286:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	4313      	orrs	r3, r2
 801028e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	693a      	ldr	r2, [r7, #16]
 801029a:	621a      	str	r2, [r3, #32]
}
 801029c:	bf00      	nop
 801029e:	371c      	adds	r7, #28
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	6a1b      	ldr	r3, [r3, #32]
 80102ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	021b      	lsls	r3, r3, #8
 80102da:	697a      	ldr	r2, [r7, #20]
 80102dc:	4313      	orrs	r3, r2
 80102de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80102e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	031b      	lsls	r3, r3, #12
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	697a      	ldr	r2, [r7, #20]
 80102f0:	4313      	orrs	r3, r2
 80102f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80102fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	031b      	lsls	r3, r3, #12
 8010300:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	4313      	orrs	r3, r2
 8010308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	621a      	str	r2, [r3, #32]
}
 8010316:	bf00      	nop
 8010318:	371c      	adds	r7, #28
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010322:	b480      	push	{r7}
 8010324:	b085      	sub	sp, #20
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	4313      	orrs	r3, r2
 8010340:	f043 0307 	orr.w	r3, r3, #7
 8010344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	609a      	str	r2, [r3, #8]
}
 801034c:	bf00      	nop
 801034e:	3714      	adds	r7, #20
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010358:	b480      	push	{r7}
 801035a:	b087      	sub	sp, #28
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	607a      	str	r2, [r7, #4]
 8010364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	021a      	lsls	r2, r3, #8
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	431a      	orrs	r2, r3
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	4313      	orrs	r3, r2
 8010380:	697a      	ldr	r2, [r7, #20]
 8010382:	4313      	orrs	r3, r2
 8010384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	697a      	ldr	r2, [r7, #20]
 801038a:	609a      	str	r2, [r3, #8]
}
 801038c:	bf00      	nop
 801038e:	371c      	adds	r7, #28
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010398:	b480      	push	{r7}
 801039a:	b087      	sub	sp, #28
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	f003 031f 	and.w	r3, r3, #31
 80103aa:	2201      	movs	r2, #1
 80103ac:	fa02 f303 	lsl.w	r3, r2, r3
 80103b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	6a1a      	ldr	r2, [r3, #32]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	43db      	mvns	r3, r3
 80103ba:	401a      	ands	r2, r3
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6a1a      	ldr	r2, [r3, #32]
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	f003 031f 	and.w	r3, r3, #31
 80103ca:	6879      	ldr	r1, [r7, #4]
 80103cc:	fa01 f303 	lsl.w	r3, r1, r3
 80103d0:	431a      	orrs	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	621a      	str	r2, [r3, #32]
}
 80103d6:	bf00      	nop
 80103d8:	371c      	adds	r7, #28
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
	...

080103e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b085      	sub	sp, #20
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d101      	bne.n	80103fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80103f8:	2302      	movs	r3, #2
 80103fa:	e050      	b.n	801049e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2202      	movs	r2, #2
 8010408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	4313      	orrs	r3, r2
 801042c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	68fa      	ldr	r2, [r7, #12]
 8010434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a1c      	ldr	r2, [pc, #112]	; (80104ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d018      	beq.n	8010472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010448:	d013      	beq.n	8010472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	4a18      	ldr	r2, [pc, #96]	; (80104b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d00e      	beq.n	8010472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a16      	ldr	r2, [pc, #88]	; (80104b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d009      	beq.n	8010472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a15      	ldr	r2, [pc, #84]	; (80104b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d004      	beq.n	8010472 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a13      	ldr	r2, [pc, #76]	; (80104bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d10c      	bne.n	801048c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	4313      	orrs	r3, r2
 8010482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2200      	movs	r2, #0
 8010498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801049c:	2300      	movs	r3, #0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3714      	adds	r7, #20
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	40010000 	.word	0x40010000
 80104b0:	40000400 	.word	0x40000400
 80104b4:	40000800 	.word	0x40000800
 80104b8:	40000c00 	.word	0x40000c00
 80104bc:	40014000 	.word	0x40014000

080104c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d101      	bne.n	80104fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e03f      	b.n	801057a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7f5 ffac 	bl	800646c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2224      	movs	r2, #36	; 0x24
 8010518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68da      	ldr	r2, [r3, #12]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801052a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 fc8f 	bl	8010e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	691a      	ldr	r2, [r3, #16]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	695a      	ldr	r2, [r3, #20]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	68da      	ldr	r2, [r3, #12]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2200      	movs	r2, #0
 8010566:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2220      	movs	r2, #32
 801056c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2220      	movs	r2, #32
 8010574:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8010578:	2300      	movs	r3, #0
}
 801057a:	4618      	mov	r0, r3
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d101      	bne.n	8010594 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8010590:	2301      	movs	r3, #1
 8010592:	e01e      	b.n	80105d2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2224      	movs	r2, #36	; 0x24
 8010598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	68da      	ldr	r2, [r3, #12]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7f6 f833 	bl	8006618 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80105d0:	2300      	movs	r3, #0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b088      	sub	sp, #32
 80105de:	af02      	add	r7, sp, #8
 80105e0:	60f8      	str	r0, [r7, #12]
 80105e2:	60b9      	str	r1, [r7, #8]
 80105e4:	603b      	str	r3, [r7, #0]
 80105e6:	4613      	mov	r3, r2
 80105e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b20      	cmp	r3, #32
 80105f8:	f040 8083 	bne.w	8010702 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <HAL_UART_Transmit+0x2e>
 8010602:	88fb      	ldrh	r3, [r7, #6]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8010608:	2301      	movs	r3, #1
 801060a:	e07b      	b.n	8010704 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010612:	2b01      	cmp	r3, #1
 8010614:	d101      	bne.n	801061a <HAL_UART_Transmit+0x40>
 8010616:	2302      	movs	r3, #2
 8010618:	e074      	b.n	8010704 <HAL_UART_Transmit+0x12a>
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2201      	movs	r2, #1
 801061e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2200      	movs	r2, #0
 8010626:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2221      	movs	r2, #33	; 0x21
 801062c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010630:	f7fa ff6e 	bl	800b510 <HAL_GetTick>
 8010634:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	88fa      	ldrh	r2, [r7, #6]
 801063a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	88fa      	ldrh	r2, [r7, #6]
 8010640:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801064a:	e042      	b.n	80106d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010650:	b29b      	uxth	r3, r3
 8010652:	3b01      	subs	r3, #1
 8010654:	b29a      	uxth	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	689b      	ldr	r3, [r3, #8]
 801065e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010662:	d122      	bne.n	80106aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	2200      	movs	r2, #0
 801066c:	2180      	movs	r1, #128	; 0x80
 801066e:	68f8      	ldr	r0, [r7, #12]
 8010670:	f000 fa6c 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801067a:	2303      	movs	r3, #3
 801067c:	e042      	b.n	8010704 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	881b      	ldrh	r3, [r3, #0]
 8010686:	461a      	mov	r2, r3
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010690:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d103      	bne.n	80106a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	3302      	adds	r3, #2
 801069e:	60bb      	str	r3, [r7, #8]
 80106a0:	e017      	b.n	80106d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	3301      	adds	r3, #1
 80106a6:	60bb      	str	r3, [r7, #8]
 80106a8:	e013      	b.n	80106d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2200      	movs	r2, #0
 80106b2:	2180      	movs	r1, #128	; 0x80
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 fa49 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80106c0:	2303      	movs	r3, #3
 80106c2:	e01f      	b.n	8010704 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	1c5a      	adds	r2, r3, #1
 80106c8:	60ba      	str	r2, [r7, #8]
 80106ca:	781a      	ldrb	r2, [r3, #0]
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d1b7      	bne.n	801064c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	2200      	movs	r2, #0
 80106e4:	2140      	movs	r1, #64	; 0x40
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f000 fa30 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e006      	b.n	8010704 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2220      	movs	r2, #32
 80106fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	e000      	b.n	8010704 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010702:	2302      	movs	r3, #2
  }
}
 8010704:	4618      	mov	r0, r3
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	4613      	mov	r3, r2
 8010718:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b20      	cmp	r3, #32
 8010724:	d166      	bne.n	80107f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <HAL_UART_Receive_DMA+0x26>
 801072c:	88fb      	ldrh	r3, [r7, #6]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d101      	bne.n	8010736 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	e05f      	b.n	80107f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801073c:	2b01      	cmp	r3, #1
 801073e:	d101      	bne.n	8010744 <HAL_UART_Receive_DMA+0x38>
 8010740:	2302      	movs	r3, #2
 8010742:	e058      	b.n	80107f6 <HAL_UART_Receive_DMA+0xea>
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	88fa      	ldrh	r2, [r7, #6]
 8010756:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2200      	movs	r2, #0
 801075c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2222      	movs	r2, #34	; 0x22
 8010762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801076a:	4a25      	ldr	r2, [pc, #148]	; (8010800 <HAL_UART_Receive_DMA+0xf4>)
 801076c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010772:	4a24      	ldr	r2, [pc, #144]	; (8010804 <HAL_UART_Receive_DMA+0xf8>)
 8010774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801077a:	4a23      	ldr	r2, [pc, #140]	; (8010808 <HAL_UART_Receive_DMA+0xfc>)
 801077c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010782:	2200      	movs	r2, #0
 8010784:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8010786:	f107 0308 	add.w	r3, r7, #8
 801078a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	3304      	adds	r3, #4
 8010796:	4619      	mov	r1, r3
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	88fb      	ldrh	r3, [r7, #6]
 801079e:	f7fb fe6d 	bl	800c47c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80107a2:	2300      	movs	r3, #0
 80107a4:	613b      	str	r3, [r7, #16]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	613b      	str	r3, [r7, #16]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	613b      	str	r3, [r7, #16]
 80107b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68da      	ldr	r2, [r3, #12]
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80107ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	695a      	ldr	r2, [r3, #20]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f042 0201 	orr.w	r2, r2, #1
 80107de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	695a      	ldr	r2, [r3, #20]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	e000      	b.n	80107f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80107f4:	2302      	movs	r3, #2
  }
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3718      	adds	r7, #24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	08010a35 	.word	0x08010a35
 8010804:	08010a9d 	.word	0x08010a9d
 8010808:	08010ab9 	.word	0x08010ab9

0801080c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b088      	sub	sp, #32
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	695b      	ldr	r3, [r3, #20]
 801082a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801082c:	2300      	movs	r3, #0
 801082e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010830:	2300      	movs	r3, #0
 8010832:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	f003 030f 	and.w	r3, r3, #15
 801083a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d10d      	bne.n	801085e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	f003 0320 	and.w	r3, r3, #32
 8010848:	2b00      	cmp	r3, #0
 801084a:	d008      	beq.n	801085e <HAL_UART_IRQHandler+0x52>
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	f003 0320 	and.w	r3, r3, #32
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fa78 	bl	8010d4c <UART_Receive_IT>
      return;
 801085c:	e0d1      	b.n	8010a02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 80b0 	beq.w	80109c6 <HAL_UART_IRQHandler+0x1ba>
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f003 0301 	and.w	r3, r3, #1
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <HAL_UART_IRQHandler+0x70>
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010876:	2b00      	cmp	r3, #0
 8010878:	f000 80a5 	beq.w	80109c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00a      	beq.n	801089c <HAL_UART_IRQHandler+0x90>
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801088c:	2b00      	cmp	r3, #0
 801088e:	d005      	beq.n	801089c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010894:	f043 0201 	orr.w	r2, r3, #1
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801089c:	69fb      	ldr	r3, [r7, #28]
 801089e:	f003 0304 	and.w	r3, r3, #4
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00a      	beq.n	80108bc <HAL_UART_IRQHandler+0xb0>
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	f003 0301 	and.w	r3, r3, #1
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d005      	beq.n	80108bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108b4:	f043 0202 	orr.w	r2, r3, #2
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	f003 0302 	and.w	r3, r3, #2
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <HAL_UART_IRQHandler+0xd0>
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f003 0301 	and.w	r3, r3, #1
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d005      	beq.n	80108dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108d4:	f043 0204 	orr.w	r2, r3, #4
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f003 0308 	and.w	r3, r3, #8
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00f      	beq.n	8010906 <HAL_UART_IRQHandler+0xfa>
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	f003 0320 	and.w	r3, r3, #32
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d104      	bne.n	80108fa <HAL_UART_IRQHandler+0xee>
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108fe:	f043 0208 	orr.w	r2, r3, #8
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801090a:	2b00      	cmp	r3, #0
 801090c:	d078      	beq.n	8010a00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	f003 0320 	and.w	r3, r3, #32
 8010914:	2b00      	cmp	r3, #0
 8010916:	d007      	beq.n	8010928 <HAL_UART_IRQHandler+0x11c>
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	f003 0320 	and.w	r3, r3, #32
 801091e:	2b00      	cmp	r3, #0
 8010920:	d002      	beq.n	8010928 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 fa12 	bl	8010d4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	695b      	ldr	r3, [r3, #20]
 801092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010932:	2b40      	cmp	r3, #64	; 0x40
 8010934:	bf0c      	ite	eq
 8010936:	2301      	moveq	r3, #1
 8010938:	2300      	movne	r3, #0
 801093a:	b2db      	uxtb	r3, r3
 801093c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010942:	f003 0308 	and.w	r3, r3, #8
 8010946:	2b00      	cmp	r3, #0
 8010948:	d102      	bne.n	8010950 <HAL_UART_IRQHandler+0x144>
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d031      	beq.n	80109b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f95b 	bl	8010c0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010960:	2b40      	cmp	r3, #64	; 0x40
 8010962:	d123      	bne.n	80109ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	695a      	ldr	r2, [r3, #20]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010972:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010978:	2b00      	cmp	r3, #0
 801097a:	d013      	beq.n	80109a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010980:	4a21      	ldr	r2, [pc, #132]	; (8010a08 <HAL_UART_IRQHandler+0x1fc>)
 8010982:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010988:	4618      	mov	r0, r3
 801098a:	f7fb fdcf 	bl	800c52c <HAL_DMA_Abort_IT>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d016      	beq.n	80109c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801099e:	4610      	mov	r0, r2
 80109a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109a2:	e00e      	b.n	80109c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f5 fd4d 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109aa:	e00a      	b.n	80109c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7f5 fd49 	bl	8006444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109b2:	e006      	b.n	80109c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7f5 fd45 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80109c0:	e01e      	b.n	8010a00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109c2:	bf00      	nop
    return;
 80109c4:	e01c      	b.n	8010a00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d008      	beq.n	80109e2 <HAL_UART_IRQHandler+0x1d6>
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d003      	beq.n	80109e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f948 	bl	8010c70 <UART_Transmit_IT>
    return;
 80109e0:	e00f      	b.n	8010a02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00a      	beq.n	8010a02 <HAL_UART_IRQHandler+0x1f6>
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d005      	beq.n	8010a02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f990 	bl	8010d1c <UART_EndTransmit_IT>
    return;
 80109fc:	bf00      	nop
 80109fe:	e000      	b.n	8010a02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8010a00:	bf00      	nop
  }
}
 8010a02:	3720      	adds	r7, #32
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	08010c49 	.word	0x08010c49

08010a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010a28:	bf00      	nop
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a40:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d11e      	bne.n	8010a8e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	2200      	movs	r2, #0
 8010a54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68da      	ldr	r2, [r3, #12]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a64:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	695a      	ldr	r2, [r3, #20]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f022 0201 	bic.w	r2, r2, #1
 8010a74:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	695a      	ldr	r2, [r3, #20]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a84:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2220      	movs	r2, #32
 8010a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f7f5 fce2 	bl	8006458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a94:	bf00      	nop
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7ff ffb8 	bl	8010a20 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ab0:	bf00      	nop
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	695b      	ldr	r3, [r3, #20]
 8010ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ad4:	2b80      	cmp	r3, #128	; 0x80
 8010ad6:	bf0c      	ite	eq
 8010ad8:	2301      	moveq	r3, #1
 8010ada:	2300      	movne	r3, #0
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b21      	cmp	r3, #33	; 0x21
 8010aea:	d108      	bne.n	8010afe <UART_DMAError+0x46>
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d005      	beq.n	8010afe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	2200      	movs	r2, #0
 8010af6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010af8:	68b8      	ldr	r0, [r7, #8]
 8010afa:	f000 f871 	bl	8010be0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b08:	2b40      	cmp	r3, #64	; 0x40
 8010b0a:	bf0c      	ite	eq
 8010b0c:	2301      	moveq	r3, #1
 8010b0e:	2300      	movne	r3, #0
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b22      	cmp	r3, #34	; 0x22
 8010b1e:	d108      	bne.n	8010b32 <UART_DMAError+0x7a>
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d005      	beq.n	8010b32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010b2c:	68b8      	ldr	r0, [r7, #8]
 8010b2e:	f000 f86d 	bl	8010c0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b36:	f043 0210 	orr.w	r2, r3, #16
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b3e:	68b8      	ldr	r0, [r7, #8]
 8010b40:	f7f5 fc80 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b44:	bf00      	nop
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	603b      	str	r3, [r7, #0]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b5c:	e02c      	b.n	8010bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b64:	d028      	beq.n	8010bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d007      	beq.n	8010b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8010b6c:	f7fa fcd0 	bl	800b510 <HAL_GetTick>
 8010b70:	4602      	mov	r2, r0
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	1ad3      	subs	r3, r2, r3
 8010b76:	69ba      	ldr	r2, [r7, #24]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d21d      	bcs.n	8010bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68da      	ldr	r2, [r3, #12]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	695a      	ldr	r2, [r3, #20]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f022 0201 	bic.w	r2, r2, #1
 8010b9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2220      	movs	r2, #32
 8010ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2220      	movs	r2, #32
 8010ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010bb4:	2303      	movs	r3, #3
 8010bb6:	e00f      	b.n	8010bd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	4013      	ands	r3, r2
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	bf0c      	ite	eq
 8010bc8:	2301      	moveq	r3, #1
 8010bca:	2300      	movne	r3, #0
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	461a      	mov	r2, r3
 8010bd0:	79fb      	ldrb	r3, [r7, #7]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d0c3      	beq.n	8010b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68da      	ldr	r2, [r3, #12]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010bf6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2220      	movs	r2, #32
 8010bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010c00:	bf00      	nop
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68da      	ldr	r2, [r3, #12]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	695a      	ldr	r2, [r3, #20]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f022 0201 	bic.w	r2, r2, #1
 8010c32:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2220      	movs	r2, #32
 8010c38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2200      	movs	r2, #0
 8010c5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7f5 fbee 	bl	8006444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c68:	bf00      	nop
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	2b21      	cmp	r3, #33	; 0x21
 8010c82:	d144      	bne.n	8010d0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c8c:	d11a      	bne.n	8010cc4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	881b      	ldrh	r3, [r3, #0]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010ca2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d105      	bne.n	8010cb8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6a1b      	ldr	r3, [r3, #32]
 8010cb0:	1c9a      	adds	r2, r3, #2
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	621a      	str	r2, [r3, #32]
 8010cb6:	e00e      	b.n	8010cd6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6a1b      	ldr	r3, [r3, #32]
 8010cbc:	1c5a      	adds	r2, r3, #1
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	621a      	str	r2, [r3, #32]
 8010cc2:	e008      	b.n	8010cd6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	1c59      	adds	r1, r3, #1
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	6211      	str	r1, [r2, #32]
 8010cce:	781a      	ldrb	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d10f      	bne.n	8010d0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68da      	ldr	r2, [r3, #12]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010cf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	68da      	ldr	r2, [r3, #12]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	e000      	b.n	8010d10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010d0e:	2302      	movs	r3, #2
  }
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3714      	adds	r7, #20
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	68da      	ldr	r2, [r3, #12]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2220      	movs	r2, #32
 8010d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f7ff fe65 	bl	8010a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	2b22      	cmp	r3, #34	; 0x22
 8010d5e:	d171      	bne.n	8010e44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d68:	d123      	bne.n	8010db2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	691b      	ldr	r3, [r3, #16]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10e      	bne.n	8010d96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d8e:	1c9a      	adds	r2, r3, #2
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	629a      	str	r2, [r3, #40]	; 0x28
 8010d94:	e029      	b.n	8010dea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010daa:	1c5a      	adds	r2, r3, #1
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	629a      	str	r2, [r3, #40]	; 0x28
 8010db0:	e01b      	b.n	8010dea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	691b      	ldr	r3, [r3, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10a      	bne.n	8010dd0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6858      	ldr	r0, [r3, #4]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc4:	1c59      	adds	r1, r3, #1
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	6291      	str	r1, [r2, #40]	; 0x28
 8010dca:	b2c2      	uxtb	r2, r0
 8010dcc:	701a      	strb	r2, [r3, #0]
 8010dce:	e00c      	b.n	8010dea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ddc:	1c58      	adds	r0, r3, #1
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	6288      	str	r0, [r1, #40]	; 0x28
 8010de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010de6:	b2d2      	uxtb	r2, r2
 8010de8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	3b01      	subs	r3, #1
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	4619      	mov	r1, r3
 8010df8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d120      	bne.n	8010e40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	68da      	ldr	r2, [r3, #12]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f022 0220 	bic.w	r2, r2, #32
 8010e0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68da      	ldr	r2, [r3, #12]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	695a      	ldr	r2, [r3, #20]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f022 0201 	bic.w	r2, r2, #1
 8010e2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2220      	movs	r2, #32
 8010e32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7f5 fb0e 	bl	8006458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	e002      	b.n	8010e46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010e40:	2300      	movs	r3, #0
 8010e42:	e000      	b.n	8010e46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010e44:	2302      	movs	r3, #2
  }
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
	...

08010e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e54:	b085      	sub	sp, #20
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	68da      	ldr	r2, [r3, #12]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	430a      	orrs	r2, r1
 8010e6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	689a      	ldr	r2, [r3, #8]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	431a      	orrs	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	695b      	ldr	r3, [r3, #20]
 8010e7e:	431a      	orrs	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	69db      	ldr	r3, [r3, #28]
 8010e84:	4313      	orrs	r3, r2
 8010e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010e92:	f023 030c 	bic.w	r3, r3, #12
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	6812      	ldr	r2, [r2, #0]
 8010e9a:	68f9      	ldr	r1, [r7, #12]
 8010e9c:	430b      	orrs	r3, r1
 8010e9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	695b      	ldr	r3, [r3, #20]
 8010ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	699a      	ldr	r2, [r3, #24]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	430a      	orrs	r2, r1
 8010eb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ebe:	f040 818b 	bne.w	80111d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4ac1      	ldr	r2, [pc, #772]	; (80111cc <UART_SetConfig+0x37c>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d005      	beq.n	8010ed8 <UART_SetConfig+0x88>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4abf      	ldr	r2, [pc, #764]	; (80111d0 <UART_SetConfig+0x380>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	f040 80bd 	bne.w	8011052 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010ed8:	f7fc fc96 	bl	800d808 <HAL_RCC_GetPCLK2Freq>
 8010edc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	461d      	mov	r5, r3
 8010ee2:	f04f 0600 	mov.w	r6, #0
 8010ee6:	46a8      	mov	r8, r5
 8010ee8:	46b1      	mov	r9, r6
 8010eea:	eb18 0308 	adds.w	r3, r8, r8
 8010eee:	eb49 0409 	adc.w	r4, r9, r9
 8010ef2:	4698      	mov	r8, r3
 8010ef4:	46a1      	mov	r9, r4
 8010ef6:	eb18 0805 	adds.w	r8, r8, r5
 8010efa:	eb49 0906 	adc.w	r9, r9, r6
 8010efe:	f04f 0100 	mov.w	r1, #0
 8010f02:	f04f 0200 	mov.w	r2, #0
 8010f06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010f0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010f0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010f12:	4688      	mov	r8, r1
 8010f14:	4691      	mov	r9, r2
 8010f16:	eb18 0005 	adds.w	r0, r8, r5
 8010f1a:	eb49 0106 	adc.w	r1, r9, r6
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	461d      	mov	r5, r3
 8010f24:	f04f 0600 	mov.w	r6, #0
 8010f28:	196b      	adds	r3, r5, r5
 8010f2a:	eb46 0406 	adc.w	r4, r6, r6
 8010f2e:	461a      	mov	r2, r3
 8010f30:	4623      	mov	r3, r4
 8010f32:	f7ef fec1 	bl	8000cb8 <__aeabi_uldivmod>
 8010f36:	4603      	mov	r3, r0
 8010f38:	460c      	mov	r4, r1
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	4ba5      	ldr	r3, [pc, #660]	; (80111d4 <UART_SetConfig+0x384>)
 8010f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8010f42:	095b      	lsrs	r3, r3, #5
 8010f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	461d      	mov	r5, r3
 8010f4c:	f04f 0600 	mov.w	r6, #0
 8010f50:	46a9      	mov	r9, r5
 8010f52:	46b2      	mov	sl, r6
 8010f54:	eb19 0309 	adds.w	r3, r9, r9
 8010f58:	eb4a 040a 	adc.w	r4, sl, sl
 8010f5c:	4699      	mov	r9, r3
 8010f5e:	46a2      	mov	sl, r4
 8010f60:	eb19 0905 	adds.w	r9, r9, r5
 8010f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8010f68:	f04f 0100 	mov.w	r1, #0
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f7c:	4689      	mov	r9, r1
 8010f7e:	4692      	mov	sl, r2
 8010f80:	eb19 0005 	adds.w	r0, r9, r5
 8010f84:	eb4a 0106 	adc.w	r1, sl, r6
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	461d      	mov	r5, r3
 8010f8e:	f04f 0600 	mov.w	r6, #0
 8010f92:	196b      	adds	r3, r5, r5
 8010f94:	eb46 0406 	adc.w	r4, r6, r6
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4623      	mov	r3, r4
 8010f9c:	f7ef fe8c 	bl	8000cb8 <__aeabi_uldivmod>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	4b8b      	ldr	r3, [pc, #556]	; (80111d4 <UART_SetConfig+0x384>)
 8010fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8010fac:	095b      	lsrs	r3, r3, #5
 8010fae:	2164      	movs	r1, #100	; 0x64
 8010fb0:	fb01 f303 	mul.w	r3, r1, r3
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	00db      	lsls	r3, r3, #3
 8010fb8:	3332      	adds	r3, #50	; 0x32
 8010fba:	4a86      	ldr	r2, [pc, #536]	; (80111d4 <UART_SetConfig+0x384>)
 8010fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8010fc0:	095b      	lsrs	r3, r3, #5
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010fc8:	4498      	add	r8, r3
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	461d      	mov	r5, r3
 8010fce:	f04f 0600 	mov.w	r6, #0
 8010fd2:	46a9      	mov	r9, r5
 8010fd4:	46b2      	mov	sl, r6
 8010fd6:	eb19 0309 	adds.w	r3, r9, r9
 8010fda:	eb4a 040a 	adc.w	r4, sl, sl
 8010fde:	4699      	mov	r9, r3
 8010fe0:	46a2      	mov	sl, r4
 8010fe2:	eb19 0905 	adds.w	r9, r9, r5
 8010fe6:	eb4a 0a06 	adc.w	sl, sl, r6
 8010fea:	f04f 0100 	mov.w	r1, #0
 8010fee:	f04f 0200 	mov.w	r2, #0
 8010ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010ff6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010ffa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010ffe:	4689      	mov	r9, r1
 8011000:	4692      	mov	sl, r2
 8011002:	eb19 0005 	adds.w	r0, r9, r5
 8011006:	eb4a 0106 	adc.w	r1, sl, r6
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	461d      	mov	r5, r3
 8011010:	f04f 0600 	mov.w	r6, #0
 8011014:	196b      	adds	r3, r5, r5
 8011016:	eb46 0406 	adc.w	r4, r6, r6
 801101a:	461a      	mov	r2, r3
 801101c:	4623      	mov	r3, r4
 801101e:	f7ef fe4b 	bl	8000cb8 <__aeabi_uldivmod>
 8011022:	4603      	mov	r3, r0
 8011024:	460c      	mov	r4, r1
 8011026:	461a      	mov	r2, r3
 8011028:	4b6a      	ldr	r3, [pc, #424]	; (80111d4 <UART_SetConfig+0x384>)
 801102a:	fba3 1302 	umull	r1, r3, r3, r2
 801102e:	095b      	lsrs	r3, r3, #5
 8011030:	2164      	movs	r1, #100	; 0x64
 8011032:	fb01 f303 	mul.w	r3, r1, r3
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	00db      	lsls	r3, r3, #3
 801103a:	3332      	adds	r3, #50	; 0x32
 801103c:	4a65      	ldr	r2, [pc, #404]	; (80111d4 <UART_SetConfig+0x384>)
 801103e:	fba2 2303 	umull	r2, r3, r2, r3
 8011042:	095b      	lsrs	r3, r3, #5
 8011044:	f003 0207 	and.w	r2, r3, #7
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4442      	add	r2, r8
 801104e:	609a      	str	r2, [r3, #8]
 8011050:	e26f      	b.n	8011532 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011052:	f7fc fbc5 	bl	800d7e0 <HAL_RCC_GetPCLK1Freq>
 8011056:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	461d      	mov	r5, r3
 801105c:	f04f 0600 	mov.w	r6, #0
 8011060:	46a8      	mov	r8, r5
 8011062:	46b1      	mov	r9, r6
 8011064:	eb18 0308 	adds.w	r3, r8, r8
 8011068:	eb49 0409 	adc.w	r4, r9, r9
 801106c:	4698      	mov	r8, r3
 801106e:	46a1      	mov	r9, r4
 8011070:	eb18 0805 	adds.w	r8, r8, r5
 8011074:	eb49 0906 	adc.w	r9, r9, r6
 8011078:	f04f 0100 	mov.w	r1, #0
 801107c:	f04f 0200 	mov.w	r2, #0
 8011080:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011084:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011088:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801108c:	4688      	mov	r8, r1
 801108e:	4691      	mov	r9, r2
 8011090:	eb18 0005 	adds.w	r0, r8, r5
 8011094:	eb49 0106 	adc.w	r1, r9, r6
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	461d      	mov	r5, r3
 801109e:	f04f 0600 	mov.w	r6, #0
 80110a2:	196b      	adds	r3, r5, r5
 80110a4:	eb46 0406 	adc.w	r4, r6, r6
 80110a8:	461a      	mov	r2, r3
 80110aa:	4623      	mov	r3, r4
 80110ac:	f7ef fe04 	bl	8000cb8 <__aeabi_uldivmod>
 80110b0:	4603      	mov	r3, r0
 80110b2:	460c      	mov	r4, r1
 80110b4:	461a      	mov	r2, r3
 80110b6:	4b47      	ldr	r3, [pc, #284]	; (80111d4 <UART_SetConfig+0x384>)
 80110b8:	fba3 2302 	umull	r2, r3, r3, r2
 80110bc:	095b      	lsrs	r3, r3, #5
 80110be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	461d      	mov	r5, r3
 80110c6:	f04f 0600 	mov.w	r6, #0
 80110ca:	46a9      	mov	r9, r5
 80110cc:	46b2      	mov	sl, r6
 80110ce:	eb19 0309 	adds.w	r3, r9, r9
 80110d2:	eb4a 040a 	adc.w	r4, sl, sl
 80110d6:	4699      	mov	r9, r3
 80110d8:	46a2      	mov	sl, r4
 80110da:	eb19 0905 	adds.w	r9, r9, r5
 80110de:	eb4a 0a06 	adc.w	sl, sl, r6
 80110e2:	f04f 0100 	mov.w	r1, #0
 80110e6:	f04f 0200 	mov.w	r2, #0
 80110ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80110ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80110f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80110f6:	4689      	mov	r9, r1
 80110f8:	4692      	mov	sl, r2
 80110fa:	eb19 0005 	adds.w	r0, r9, r5
 80110fe:	eb4a 0106 	adc.w	r1, sl, r6
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	461d      	mov	r5, r3
 8011108:	f04f 0600 	mov.w	r6, #0
 801110c:	196b      	adds	r3, r5, r5
 801110e:	eb46 0406 	adc.w	r4, r6, r6
 8011112:	461a      	mov	r2, r3
 8011114:	4623      	mov	r3, r4
 8011116:	f7ef fdcf 	bl	8000cb8 <__aeabi_uldivmod>
 801111a:	4603      	mov	r3, r0
 801111c:	460c      	mov	r4, r1
 801111e:	461a      	mov	r2, r3
 8011120:	4b2c      	ldr	r3, [pc, #176]	; (80111d4 <UART_SetConfig+0x384>)
 8011122:	fba3 1302 	umull	r1, r3, r3, r2
 8011126:	095b      	lsrs	r3, r3, #5
 8011128:	2164      	movs	r1, #100	; 0x64
 801112a:	fb01 f303 	mul.w	r3, r1, r3
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	00db      	lsls	r3, r3, #3
 8011132:	3332      	adds	r3, #50	; 0x32
 8011134:	4a27      	ldr	r2, [pc, #156]	; (80111d4 <UART_SetConfig+0x384>)
 8011136:	fba2 2303 	umull	r2, r3, r2, r3
 801113a:	095b      	lsrs	r3, r3, #5
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011142:	4498      	add	r8, r3
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	461d      	mov	r5, r3
 8011148:	f04f 0600 	mov.w	r6, #0
 801114c:	46a9      	mov	r9, r5
 801114e:	46b2      	mov	sl, r6
 8011150:	eb19 0309 	adds.w	r3, r9, r9
 8011154:	eb4a 040a 	adc.w	r4, sl, sl
 8011158:	4699      	mov	r9, r3
 801115a:	46a2      	mov	sl, r4
 801115c:	eb19 0905 	adds.w	r9, r9, r5
 8011160:	eb4a 0a06 	adc.w	sl, sl, r6
 8011164:	f04f 0100 	mov.w	r1, #0
 8011168:	f04f 0200 	mov.w	r2, #0
 801116c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011178:	4689      	mov	r9, r1
 801117a:	4692      	mov	sl, r2
 801117c:	eb19 0005 	adds.w	r0, r9, r5
 8011180:	eb4a 0106 	adc.w	r1, sl, r6
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	461d      	mov	r5, r3
 801118a:	f04f 0600 	mov.w	r6, #0
 801118e:	196b      	adds	r3, r5, r5
 8011190:	eb46 0406 	adc.w	r4, r6, r6
 8011194:	461a      	mov	r2, r3
 8011196:	4623      	mov	r3, r4
 8011198:	f7ef fd8e 	bl	8000cb8 <__aeabi_uldivmod>
 801119c:	4603      	mov	r3, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	461a      	mov	r2, r3
 80111a2:	4b0c      	ldr	r3, [pc, #48]	; (80111d4 <UART_SetConfig+0x384>)
 80111a4:	fba3 1302 	umull	r1, r3, r3, r2
 80111a8:	095b      	lsrs	r3, r3, #5
 80111aa:	2164      	movs	r1, #100	; 0x64
 80111ac:	fb01 f303 	mul.w	r3, r1, r3
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	00db      	lsls	r3, r3, #3
 80111b4:	3332      	adds	r3, #50	; 0x32
 80111b6:	4a07      	ldr	r2, [pc, #28]	; (80111d4 <UART_SetConfig+0x384>)
 80111b8:	fba2 2303 	umull	r2, r3, r2, r3
 80111bc:	095b      	lsrs	r3, r3, #5
 80111be:	f003 0207 	and.w	r2, r3, #7
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4442      	add	r2, r8
 80111c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80111ca:	e1b2      	b.n	8011532 <UART_SetConfig+0x6e2>
 80111cc:	40011000 	.word	0x40011000
 80111d0:	40011400 	.word	0x40011400
 80111d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4ad7      	ldr	r2, [pc, #860]	; (801153c <UART_SetConfig+0x6ec>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d005      	beq.n	80111ee <UART_SetConfig+0x39e>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4ad6      	ldr	r2, [pc, #856]	; (8011540 <UART_SetConfig+0x6f0>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	f040 80d1 	bne.w	8011390 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80111ee:	f7fc fb0b 	bl	800d808 <HAL_RCC_GetPCLK2Freq>
 80111f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	469a      	mov	sl, r3
 80111f8:	f04f 0b00 	mov.w	fp, #0
 80111fc:	46d0      	mov	r8, sl
 80111fe:	46d9      	mov	r9, fp
 8011200:	eb18 0308 	adds.w	r3, r8, r8
 8011204:	eb49 0409 	adc.w	r4, r9, r9
 8011208:	4698      	mov	r8, r3
 801120a:	46a1      	mov	r9, r4
 801120c:	eb18 080a 	adds.w	r8, r8, sl
 8011210:	eb49 090b 	adc.w	r9, r9, fp
 8011214:	f04f 0100 	mov.w	r1, #0
 8011218:	f04f 0200 	mov.w	r2, #0
 801121c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011220:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011224:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011228:	4688      	mov	r8, r1
 801122a:	4691      	mov	r9, r2
 801122c:	eb1a 0508 	adds.w	r5, sl, r8
 8011230:	eb4b 0609 	adc.w	r6, fp, r9
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4619      	mov	r1, r3
 801123a:	f04f 0200 	mov.w	r2, #0
 801123e:	f04f 0300 	mov.w	r3, #0
 8011242:	f04f 0400 	mov.w	r4, #0
 8011246:	0094      	lsls	r4, r2, #2
 8011248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801124c:	008b      	lsls	r3, r1, #2
 801124e:	461a      	mov	r2, r3
 8011250:	4623      	mov	r3, r4
 8011252:	4628      	mov	r0, r5
 8011254:	4631      	mov	r1, r6
 8011256:	f7ef fd2f 	bl	8000cb8 <__aeabi_uldivmod>
 801125a:	4603      	mov	r3, r0
 801125c:	460c      	mov	r4, r1
 801125e:	461a      	mov	r2, r3
 8011260:	4bb8      	ldr	r3, [pc, #736]	; (8011544 <UART_SetConfig+0x6f4>)
 8011262:	fba3 2302 	umull	r2, r3, r3, r2
 8011266:	095b      	lsrs	r3, r3, #5
 8011268:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	469b      	mov	fp, r3
 8011270:	f04f 0c00 	mov.w	ip, #0
 8011274:	46d9      	mov	r9, fp
 8011276:	46e2      	mov	sl, ip
 8011278:	eb19 0309 	adds.w	r3, r9, r9
 801127c:	eb4a 040a 	adc.w	r4, sl, sl
 8011280:	4699      	mov	r9, r3
 8011282:	46a2      	mov	sl, r4
 8011284:	eb19 090b 	adds.w	r9, r9, fp
 8011288:	eb4a 0a0c 	adc.w	sl, sl, ip
 801128c:	f04f 0100 	mov.w	r1, #0
 8011290:	f04f 0200 	mov.w	r2, #0
 8011294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011298:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801129c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80112a0:	4689      	mov	r9, r1
 80112a2:	4692      	mov	sl, r2
 80112a4:	eb1b 0509 	adds.w	r5, fp, r9
 80112a8:	eb4c 060a 	adc.w	r6, ip, sl
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	4619      	mov	r1, r3
 80112b2:	f04f 0200 	mov.w	r2, #0
 80112b6:	f04f 0300 	mov.w	r3, #0
 80112ba:	f04f 0400 	mov.w	r4, #0
 80112be:	0094      	lsls	r4, r2, #2
 80112c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80112c4:	008b      	lsls	r3, r1, #2
 80112c6:	461a      	mov	r2, r3
 80112c8:	4623      	mov	r3, r4
 80112ca:	4628      	mov	r0, r5
 80112cc:	4631      	mov	r1, r6
 80112ce:	f7ef fcf3 	bl	8000cb8 <__aeabi_uldivmod>
 80112d2:	4603      	mov	r3, r0
 80112d4:	460c      	mov	r4, r1
 80112d6:	461a      	mov	r2, r3
 80112d8:	4b9a      	ldr	r3, [pc, #616]	; (8011544 <UART_SetConfig+0x6f4>)
 80112da:	fba3 1302 	umull	r1, r3, r3, r2
 80112de:	095b      	lsrs	r3, r3, #5
 80112e0:	2164      	movs	r1, #100	; 0x64
 80112e2:	fb01 f303 	mul.w	r3, r1, r3
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	011b      	lsls	r3, r3, #4
 80112ea:	3332      	adds	r3, #50	; 0x32
 80112ec:	4a95      	ldr	r2, [pc, #596]	; (8011544 <UART_SetConfig+0x6f4>)
 80112ee:	fba2 2303 	umull	r2, r3, r2, r3
 80112f2:	095b      	lsrs	r3, r3, #5
 80112f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112f8:	4498      	add	r8, r3
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	469b      	mov	fp, r3
 80112fe:	f04f 0c00 	mov.w	ip, #0
 8011302:	46d9      	mov	r9, fp
 8011304:	46e2      	mov	sl, ip
 8011306:	eb19 0309 	adds.w	r3, r9, r9
 801130a:	eb4a 040a 	adc.w	r4, sl, sl
 801130e:	4699      	mov	r9, r3
 8011310:	46a2      	mov	sl, r4
 8011312:	eb19 090b 	adds.w	r9, r9, fp
 8011316:	eb4a 0a0c 	adc.w	sl, sl, ip
 801131a:	f04f 0100 	mov.w	r1, #0
 801131e:	f04f 0200 	mov.w	r2, #0
 8011322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011326:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801132a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801132e:	4689      	mov	r9, r1
 8011330:	4692      	mov	sl, r2
 8011332:	eb1b 0509 	adds.w	r5, fp, r9
 8011336:	eb4c 060a 	adc.w	r6, ip, sl
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	4619      	mov	r1, r3
 8011340:	f04f 0200 	mov.w	r2, #0
 8011344:	f04f 0300 	mov.w	r3, #0
 8011348:	f04f 0400 	mov.w	r4, #0
 801134c:	0094      	lsls	r4, r2, #2
 801134e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011352:	008b      	lsls	r3, r1, #2
 8011354:	461a      	mov	r2, r3
 8011356:	4623      	mov	r3, r4
 8011358:	4628      	mov	r0, r5
 801135a:	4631      	mov	r1, r6
 801135c:	f7ef fcac 	bl	8000cb8 <__aeabi_uldivmod>
 8011360:	4603      	mov	r3, r0
 8011362:	460c      	mov	r4, r1
 8011364:	461a      	mov	r2, r3
 8011366:	4b77      	ldr	r3, [pc, #476]	; (8011544 <UART_SetConfig+0x6f4>)
 8011368:	fba3 1302 	umull	r1, r3, r3, r2
 801136c:	095b      	lsrs	r3, r3, #5
 801136e:	2164      	movs	r1, #100	; 0x64
 8011370:	fb01 f303 	mul.w	r3, r1, r3
 8011374:	1ad3      	subs	r3, r2, r3
 8011376:	011b      	lsls	r3, r3, #4
 8011378:	3332      	adds	r3, #50	; 0x32
 801137a:	4a72      	ldr	r2, [pc, #456]	; (8011544 <UART_SetConfig+0x6f4>)
 801137c:	fba2 2303 	umull	r2, r3, r2, r3
 8011380:	095b      	lsrs	r3, r3, #5
 8011382:	f003 020f 	and.w	r2, r3, #15
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	4442      	add	r2, r8
 801138c:	609a      	str	r2, [r3, #8]
 801138e:	e0d0      	b.n	8011532 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011390:	f7fc fa26 	bl	800d7e0 <HAL_RCC_GetPCLK1Freq>
 8011394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	469a      	mov	sl, r3
 801139a:	f04f 0b00 	mov.w	fp, #0
 801139e:	46d0      	mov	r8, sl
 80113a0:	46d9      	mov	r9, fp
 80113a2:	eb18 0308 	adds.w	r3, r8, r8
 80113a6:	eb49 0409 	adc.w	r4, r9, r9
 80113aa:	4698      	mov	r8, r3
 80113ac:	46a1      	mov	r9, r4
 80113ae:	eb18 080a 	adds.w	r8, r8, sl
 80113b2:	eb49 090b 	adc.w	r9, r9, fp
 80113b6:	f04f 0100 	mov.w	r1, #0
 80113ba:	f04f 0200 	mov.w	r2, #0
 80113be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80113c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80113c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80113ca:	4688      	mov	r8, r1
 80113cc:	4691      	mov	r9, r2
 80113ce:	eb1a 0508 	adds.w	r5, sl, r8
 80113d2:	eb4b 0609 	adc.w	r6, fp, r9
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	4619      	mov	r1, r3
 80113dc:	f04f 0200 	mov.w	r2, #0
 80113e0:	f04f 0300 	mov.w	r3, #0
 80113e4:	f04f 0400 	mov.w	r4, #0
 80113e8:	0094      	lsls	r4, r2, #2
 80113ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80113ee:	008b      	lsls	r3, r1, #2
 80113f0:	461a      	mov	r2, r3
 80113f2:	4623      	mov	r3, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	4631      	mov	r1, r6
 80113f8:	f7ef fc5e 	bl	8000cb8 <__aeabi_uldivmod>
 80113fc:	4603      	mov	r3, r0
 80113fe:	460c      	mov	r4, r1
 8011400:	461a      	mov	r2, r3
 8011402:	4b50      	ldr	r3, [pc, #320]	; (8011544 <UART_SetConfig+0x6f4>)
 8011404:	fba3 2302 	umull	r2, r3, r3, r2
 8011408:	095b      	lsrs	r3, r3, #5
 801140a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	469b      	mov	fp, r3
 8011412:	f04f 0c00 	mov.w	ip, #0
 8011416:	46d9      	mov	r9, fp
 8011418:	46e2      	mov	sl, ip
 801141a:	eb19 0309 	adds.w	r3, r9, r9
 801141e:	eb4a 040a 	adc.w	r4, sl, sl
 8011422:	4699      	mov	r9, r3
 8011424:	46a2      	mov	sl, r4
 8011426:	eb19 090b 	adds.w	r9, r9, fp
 801142a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801142e:	f04f 0100 	mov.w	r1, #0
 8011432:	f04f 0200 	mov.w	r2, #0
 8011436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801143a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801143e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011442:	4689      	mov	r9, r1
 8011444:	4692      	mov	sl, r2
 8011446:	eb1b 0509 	adds.w	r5, fp, r9
 801144a:	eb4c 060a 	adc.w	r6, ip, sl
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4619      	mov	r1, r3
 8011454:	f04f 0200 	mov.w	r2, #0
 8011458:	f04f 0300 	mov.w	r3, #0
 801145c:	f04f 0400 	mov.w	r4, #0
 8011460:	0094      	lsls	r4, r2, #2
 8011462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011466:	008b      	lsls	r3, r1, #2
 8011468:	461a      	mov	r2, r3
 801146a:	4623      	mov	r3, r4
 801146c:	4628      	mov	r0, r5
 801146e:	4631      	mov	r1, r6
 8011470:	f7ef fc22 	bl	8000cb8 <__aeabi_uldivmod>
 8011474:	4603      	mov	r3, r0
 8011476:	460c      	mov	r4, r1
 8011478:	461a      	mov	r2, r3
 801147a:	4b32      	ldr	r3, [pc, #200]	; (8011544 <UART_SetConfig+0x6f4>)
 801147c:	fba3 1302 	umull	r1, r3, r3, r2
 8011480:	095b      	lsrs	r3, r3, #5
 8011482:	2164      	movs	r1, #100	; 0x64
 8011484:	fb01 f303 	mul.w	r3, r1, r3
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	011b      	lsls	r3, r3, #4
 801148c:	3332      	adds	r3, #50	; 0x32
 801148e:	4a2d      	ldr	r2, [pc, #180]	; (8011544 <UART_SetConfig+0x6f4>)
 8011490:	fba2 2303 	umull	r2, r3, r2, r3
 8011494:	095b      	lsrs	r3, r3, #5
 8011496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801149a:	4498      	add	r8, r3
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	469b      	mov	fp, r3
 80114a0:	f04f 0c00 	mov.w	ip, #0
 80114a4:	46d9      	mov	r9, fp
 80114a6:	46e2      	mov	sl, ip
 80114a8:	eb19 0309 	adds.w	r3, r9, r9
 80114ac:	eb4a 040a 	adc.w	r4, sl, sl
 80114b0:	4699      	mov	r9, r3
 80114b2:	46a2      	mov	sl, r4
 80114b4:	eb19 090b 	adds.w	r9, r9, fp
 80114b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80114bc:	f04f 0100 	mov.w	r1, #0
 80114c0:	f04f 0200 	mov.w	r2, #0
 80114c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80114c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80114cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80114d0:	4689      	mov	r9, r1
 80114d2:	4692      	mov	sl, r2
 80114d4:	eb1b 0509 	adds.w	r5, fp, r9
 80114d8:	eb4c 060a 	adc.w	r6, ip, sl
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4619      	mov	r1, r3
 80114e2:	f04f 0200 	mov.w	r2, #0
 80114e6:	f04f 0300 	mov.w	r3, #0
 80114ea:	f04f 0400 	mov.w	r4, #0
 80114ee:	0094      	lsls	r4, r2, #2
 80114f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80114f4:	008b      	lsls	r3, r1, #2
 80114f6:	461a      	mov	r2, r3
 80114f8:	4623      	mov	r3, r4
 80114fa:	4628      	mov	r0, r5
 80114fc:	4631      	mov	r1, r6
 80114fe:	f7ef fbdb 	bl	8000cb8 <__aeabi_uldivmod>
 8011502:	4603      	mov	r3, r0
 8011504:	460c      	mov	r4, r1
 8011506:	461a      	mov	r2, r3
 8011508:	4b0e      	ldr	r3, [pc, #56]	; (8011544 <UART_SetConfig+0x6f4>)
 801150a:	fba3 1302 	umull	r1, r3, r3, r2
 801150e:	095b      	lsrs	r3, r3, #5
 8011510:	2164      	movs	r1, #100	; 0x64
 8011512:	fb01 f303 	mul.w	r3, r1, r3
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	011b      	lsls	r3, r3, #4
 801151a:	3332      	adds	r3, #50	; 0x32
 801151c:	4a09      	ldr	r2, [pc, #36]	; (8011544 <UART_SetConfig+0x6f4>)
 801151e:	fba2 2303 	umull	r2, r3, r2, r3
 8011522:	095b      	lsrs	r3, r3, #5
 8011524:	f003 020f 	and.w	r2, r3, #15
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4442      	add	r2, r8
 801152e:	609a      	str	r2, [r3, #8]
}
 8011530:	e7ff      	b.n	8011532 <UART_SetConfig+0x6e2>
 8011532:	bf00      	nop
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801153c:	40011000 	.word	0x40011000
 8011540:	40011400 	.word	0x40011400
 8011544:	51eb851f 	.word	0x51eb851f

08011548 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011548:	b084      	sub	sp, #16
 801154a:	b480      	push	{r7}
 801154c:	b085      	sub	sp, #20
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
 8011552:	f107 001c 	add.w	r0, r7, #28
 8011556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801155a:	2300      	movs	r3, #0
 801155c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801155e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011560:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011562:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011566:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801156a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801156e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011572:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	4313      	orrs	r3, r2
 8011578:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011582:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	431a      	orrs	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	b004      	add	sp, #16
 801159c:	4770      	bx	lr

0801159e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801159e:	b480      	push	{r7}
 80115a0:	b083      	sub	sp, #12
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80115b8:	b480      	push	{r7}
 80115ba:	b083      	sub	sp, #12
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2203      	movs	r2, #3
 80115e6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80115e8:	2002      	movs	r0, #2
 80115ea:	f7f9 ff9d 	bl	800b528 <HAL_Delay>
  
  return HAL_OK;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f003 0303 	and.w	r3, r3, #3
}
 8011608:	4618      	mov	r0, r3
 801160a:	370c      	adds	r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr

08011614 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011614:	b480      	push	{r7}
 8011616:	b085      	sub	sp, #20
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011632:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011638:	431a      	orrs	r2, r3
                       Command->CPSM);
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801163e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	4313      	orrs	r3, r2
 8011644:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	68db      	ldr	r3, [r3, #12]
 801164a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801164e:	f023 030f 	bic.w	r3, r3, #15
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	431a      	orrs	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3714      	adds	r7, #20
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	b2db      	uxtb	r3, r3
}
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011682:	b480      	push	{r7}
 8011684:	b085      	sub	sp, #20
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	3314      	adds	r3, #20
 8011690:	461a      	mov	r2, r3
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	4413      	add	r3, r2
 8011696:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681b      	ldr	r3, [r3, #0]
}  
 801169c:	4618      	mov	r0, r3
 801169e:	3714      	adds	r7, #20
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80116ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80116d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80116da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80116dc:	68fa      	ldr	r2, [r7, #12]
 80116de:	4313      	orrs	r3, r2
 80116e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	431a      	orrs	r2, r3
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80116f2:	2300      	movs	r3, #0

}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3714      	adds	r7, #20
 80116f8:	46bd      	mov	sp, r7
 80116fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b088      	sub	sp, #32
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801170e:	2310      	movs	r3, #16
 8011710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011712:	2340      	movs	r3, #64	; 0x40
 8011714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011716:	2300      	movs	r3, #0
 8011718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801171e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011720:	f107 0308 	add.w	r3, r7, #8
 8011724:	4619      	mov	r1, r3
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff ff74 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011730:	2110      	movs	r1, #16
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fa40 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801173a:	69fb      	ldr	r3, [r7, #28]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3720      	adds	r7, #32
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011752:	2311      	movs	r3, #17
 8011754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011756:	2340      	movs	r3, #64	; 0x40
 8011758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011762:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011764:	f107 0308 	add.w	r3, r7, #8
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff ff52 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011770:	f241 3288 	movw	r2, #5000	; 0x1388
 8011774:	2111      	movs	r1, #17
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 fa1e 	bl	8011bb8 <SDMMC_GetCmdResp1>
 801177c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801177e:	69fb      	ldr	r3, [r7, #28]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3720      	adds	r7, #32
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011796:	2312      	movs	r3, #18
 8011798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801179a:	2340      	movs	r3, #64	; 0x40
 801179c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801179e:	2300      	movs	r3, #0
 80117a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80117a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80117a8:	f107 0308 	add.w	r3, r7, #8
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff ff30 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80117b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80117b8:	2112      	movs	r1, #18
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 f9fc 	bl	8011bb8 <SDMMC_GetCmdResp1>
 80117c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117c2:	69fb      	ldr	r3, [r7, #28]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3720      	adds	r7, #32
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b088      	sub	sp, #32
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80117da:	2318      	movs	r3, #24
 80117dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80117de:	2340      	movs	r3, #64	; 0x40
 80117e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80117e2:	2300      	movs	r3, #0
 80117e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80117e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80117ec:	f107 0308 	add.w	r3, r7, #8
 80117f0:	4619      	mov	r1, r3
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7ff ff0e 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80117f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80117fc:	2118      	movs	r1, #24
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f9da 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011806:	69fb      	ldr	r3, [r7, #28]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3720      	adds	r7, #32
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b088      	sub	sp, #32
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801181e:	2319      	movs	r3, #25
 8011820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011822:	2340      	movs	r3, #64	; 0x40
 8011824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011826:	2300      	movs	r3, #0
 8011828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801182e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011830:	f107 0308 	add.w	r3, r7, #8
 8011834:	4619      	mov	r1, r3
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7ff feec 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011840:	2119      	movs	r1, #25
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f9b8 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801184a:	69fb      	ldr	r3, [r7, #28]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3720      	adds	r7, #32
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b088      	sub	sp, #32
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801185c:	2300      	movs	r3, #0
 801185e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011860:	230c      	movs	r3, #12
 8011862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011864:	2340      	movs	r3, #64	; 0x40
 8011866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011868:	2300      	movs	r3, #0
 801186a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801186c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011872:	f107 0308 	add.w	r3, r7, #8
 8011876:	4619      	mov	r1, r3
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ff fecb 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801187e:	4a05      	ldr	r2, [pc, #20]	; (8011894 <SDMMC_CmdStopTransfer+0x40>)
 8011880:	210c      	movs	r1, #12
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 f998 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801188a:	69fb      	ldr	r3, [r7, #28]
}
 801188c:	4618      	mov	r0, r3
 801188e:	3720      	adds	r7, #32
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	05f5e100 	.word	0x05f5e100

08011898 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b08a      	sub	sp, #40	; 0x28
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80118a8:	2307      	movs	r3, #7
 80118aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80118ac:	2340      	movs	r3, #64	; 0x40
 80118ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80118b0:	2300      	movs	r3, #0
 80118b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80118b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80118ba:	f107 0310 	add.w	r3, r7, #16
 80118be:	4619      	mov	r1, r3
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff fea7 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80118c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80118ca:	2107      	movs	r1, #7
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 f973 	bl	8011bb8 <SDMMC_GetCmdResp1>
 80118d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80118d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3728      	adds	r7, #40	; 0x28
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b088      	sub	sp, #32
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80118e6:	2300      	movs	r3, #0
 80118e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80118ea:	2300      	movs	r3, #0
 80118ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80118ee:	2300      	movs	r3, #0
 80118f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80118f2:	2300      	movs	r3, #0
 80118f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80118f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80118fc:	f107 0308 	add.w	r3, r7, #8
 8011900:	4619      	mov	r1, r3
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7ff fe86 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 f92d 	bl	8011b68 <SDMMC_GetCmdError>
 801190e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011910:	69fb      	ldr	r3, [r7, #28]
}
 8011912:	4618      	mov	r0, r3
 8011914:	3720      	adds	r7, #32
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b088      	sub	sp, #32
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011922:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011928:	2308      	movs	r3, #8
 801192a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801192c:	2340      	movs	r3, #64	; 0x40
 801192e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011930:	2300      	movs	r3, #0
 8011932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801193a:	f107 0308 	add.w	r3, r7, #8
 801193e:	4619      	mov	r1, r3
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff fe67 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 fb16 	bl	8011f78 <SDMMC_GetCmdResp7>
 801194c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801194e:	69fb      	ldr	r3, [r7, #28]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3720      	adds	r7, #32
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011966:	2337      	movs	r3, #55	; 0x37
 8011968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801196a:	2340      	movs	r3, #64	; 0x40
 801196c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801196e:	2300      	movs	r3, #0
 8011970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011976:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011978:	f107 0308 	add.w	r3, r7, #8
 801197c:	4619      	mov	r1, r3
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff fe48 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8011984:	f241 3288 	movw	r2, #5000	; 0x1388
 8011988:	2137      	movs	r1, #55	; 0x37
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f914 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011990:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011992:	69fb      	ldr	r3, [r7, #28]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3720      	adds	r7, #32
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80119ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80119b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80119b2:	2329      	movs	r3, #41	; 0x29
 80119b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80119b6:	2340      	movs	r3, #64	; 0x40
 80119b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80119ba:	2300      	movs	r3, #0
 80119bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80119be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80119c4:	f107 0308 	add.w	r3, r7, #8
 80119c8:	4619      	mov	r1, r3
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f7ff fe22 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 fa23 	bl	8011e1c <SDMMC_GetCmdResp3>
 80119d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119d8:	69fb      	ldr	r3, [r7, #28]
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3720      	adds	r7, #32
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b088      	sub	sp, #32
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80119f0:	2306      	movs	r3, #6
 80119f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80119f4:	2340      	movs	r3, #64	; 0x40
 80119f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80119f8:	2300      	movs	r3, #0
 80119fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80119fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a02:	f107 0308 	add.w	r3, r7, #8
 8011a06:	4619      	mov	r1, r3
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f7ff fe03 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8011a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a12:	2106      	movs	r1, #6
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f000 f8cf 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a1c:	69fb      	ldr	r3, [r7, #28]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3720      	adds	r7, #32
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b088      	sub	sp, #32
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011a32:	2333      	movs	r3, #51	; 0x33
 8011a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011a36:	2340      	movs	r3, #64	; 0x40
 8011a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a44:	f107 0308 	add.w	r3, r7, #8
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7ff fde2 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8011a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a54:	2133      	movs	r1, #51	; 0x33
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f000 f8ae 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a5e:	69fb      	ldr	r3, [r7, #28]
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3720      	adds	r7, #32
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b088      	sub	sp, #32
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011a70:	2300      	movs	r3, #0
 8011a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011a74:	2302      	movs	r3, #2
 8011a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011a78:	23c0      	movs	r3, #192	; 0xc0
 8011a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011a86:	f107 0308 	add.w	r3, r7, #8
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff fdc1 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f97c 	bl	8011d90 <SDMMC_GetCmdResp2>
 8011a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a9a:	69fb      	ldr	r3, [r7, #28]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3720      	adds	r7, #32
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b088      	sub	sp, #32
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011ab2:	2309      	movs	r3, #9
 8011ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8011ab6:	23c0      	movs	r3, #192	; 0xc0
 8011ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011aba:	2300      	movs	r3, #0
 8011abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ac4:	f107 0308 	add.w	r3, r7, #8
 8011ac8:	4619      	mov	r1, r3
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7ff fda2 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f000 f95d 	bl	8011d90 <SDMMC_GetCmdResp2>
 8011ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3720      	adds	r7, #32
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b088      	sub	sp, #32
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	6078      	str	r0, [r7, #4]
 8011aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011aec:	2300      	movs	r3, #0
 8011aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011af0:	2303      	movs	r3, #3
 8011af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011af4:	2340      	movs	r3, #64	; 0x40
 8011af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011af8:	2300      	movs	r3, #0
 8011afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011b02:	f107 0308 	add.w	r3, r7, #8
 8011b06:	4619      	mov	r1, r3
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff fd83 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011b0e:	683a      	ldr	r2, [r7, #0]
 8011b10:	2103      	movs	r1, #3
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 f9bc 	bl	8011e90 <SDMMC_GetCmdResp6>
 8011b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b1a:	69fb      	ldr	r3, [r7, #28]
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3720      	adds	r7, #32
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b088      	sub	sp, #32
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011b32:	230d      	movs	r3, #13
 8011b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011b36:	2340      	movs	r3, #64	; 0x40
 8011b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011b44:	f107 0308 	add.w	r3, r7, #8
 8011b48:	4619      	mov	r1, r3
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7ff fd62 	bl	8011614 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b54:	210d      	movs	r1, #13
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f82e 	bl	8011bb8 <SDMMC_GetCmdResp1>
 8011b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b5e:	69fb      	ldr	r3, [r7, #28]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3720      	adds	r7, #32
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011b68:	b490      	push	{r4, r7}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b70:	4b0f      	ldr	r3, [pc, #60]	; (8011bb0 <SDMMC_GetCmdError+0x48>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4a0f      	ldr	r2, [pc, #60]	; (8011bb4 <SDMMC_GetCmdError+0x4c>)
 8011b76:	fba2 2303 	umull	r2, r3, r2, r3
 8011b7a:	0a5b      	lsrs	r3, r3, #9
 8011b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011b84:	4623      	mov	r3, r4
 8011b86:	1e5c      	subs	r4, r3, #1
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b90:	e009      	b.n	8011ba6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d0f2      	beq.n	8011b84 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	22c5      	movs	r2, #197	; 0xc5
 8011ba2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bc90      	pop	{r4, r7}
 8011bae:	4770      	bx	lr
 8011bb0:	20000000 	.word	0x20000000
 8011bb4:	10624dd3 	.word	0x10624dd3

08011bb8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011bb8:	b590      	push	{r4, r7, lr}
 8011bba:	b087      	sub	sp, #28
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011bc6:	4b6f      	ldr	r3, [pc, #444]	; (8011d84 <SDMMC_GetCmdResp1+0x1cc>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a6f      	ldr	r2, [pc, #444]	; (8011d88 <SDMMC_GetCmdResp1+0x1d0>)
 8011bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8011bd0:	0a5b      	lsrs	r3, r3, #9
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011bd8:	4623      	mov	r3, r4
 8011bda:	1e5c      	subs	r4, r3, #1
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d102      	bne.n	8011be6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011be4:	e0c9      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d0f0      	beq.n	8011bd8 <SDMMC_GetCmdResp1+0x20>
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d1eb      	bne.n	8011bd8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c04:	f003 0304 	and.w	r3, r3, #4
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2204      	movs	r2, #4
 8011c10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011c12:	2304      	movs	r3, #4
 8011c14:	e0b1      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1a:	f003 0301 	and.w	r3, r3, #1
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d004      	beq.n	8011c2c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2201      	movs	r2, #1
 8011c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e0a6      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	22c5      	movs	r2, #197	; 0xc5
 8011c30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f7ff fd18 	bl	8011668 <SDIO_GetCommandResponse>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	7afb      	ldrb	r3, [r7, #11]
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d001      	beq.n	8011c46 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011c42:	2301      	movs	r3, #1
 8011c44:	e099      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011c46:	2100      	movs	r1, #0
 8011c48:	68f8      	ldr	r0, [r7, #12]
 8011c4a:	f7ff fd1a 	bl	8011682 <SDIO_GetResponse>
 8011c4e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011c50:	693a      	ldr	r2, [r7, #16]
 8011c52:	4b4e      	ldr	r3, [pc, #312]	; (8011d8c <SDMMC_GetCmdResp1+0x1d4>)
 8011c54:	4013      	ands	r3, r2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e08d      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	da02      	bge.n	8011c6a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011c68:	e087      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011c74:	2340      	movs	r3, #64	; 0x40
 8011c76:	e080      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011c82:	2380      	movs	r3, #128	; 0x80
 8011c84:	e079      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d002      	beq.n	8011c96 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c94:	e071      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d002      	beq.n	8011ca6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ca4:	e069      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d002      	beq.n	8011cb6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cb4:	e061      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d002      	beq.n	8011cc6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cc4:	e059      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cd4:	e051      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ce4:	e049      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011cf4:	e041      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d04:	e039      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011d14:	e031      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d002      	beq.n	8011d26 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011d20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011d24:	e029      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011d30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011d34:	e021      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011d44:	e019      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d002      	beq.n	8011d56 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011d54:	e011      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d002      	beq.n	8011d66 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011d60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011d64:	e009      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	f003 0308 	and.w	r3, r3, #8
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011d70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011d74:	e001      	b.n	8011d7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	371c      	adds	r7, #28
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd90      	pop	{r4, r7, pc}
 8011d82:	bf00      	nop
 8011d84:	20000000 	.word	0x20000000
 8011d88:	10624dd3 	.word	0x10624dd3
 8011d8c:	fdffe008 	.word	0xfdffe008

08011d90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011d90:	b490      	push	{r4, r7}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011d98:	4b1e      	ldr	r3, [pc, #120]	; (8011e14 <SDMMC_GetCmdResp2+0x84>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a1e      	ldr	r2, [pc, #120]	; (8011e18 <SDMMC_GetCmdResp2+0x88>)
 8011d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8011da2:	0a5b      	lsrs	r3, r3, #9
 8011da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011da8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011dac:	4623      	mov	r3, r4
 8011dae:	1e5c      	subs	r4, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d102      	bne.n	8011dba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011db4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011db8:	e026      	b.n	8011e08 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dbe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d0f0      	beq.n	8011dac <SDMMC_GetCmdResp2+0x1c>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d1eb      	bne.n	8011dac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dd8:	f003 0304 	and.w	r3, r3, #4
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d004      	beq.n	8011dea <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2204      	movs	r2, #4
 8011de4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011de6:	2304      	movs	r3, #4
 8011de8:	e00e      	b.n	8011e08 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dee:	f003 0301 	and.w	r3, r3, #1
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d004      	beq.n	8011e00 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e003      	b.n	8011e08 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	22c5      	movs	r2, #197	; 0xc5
 8011e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3710      	adds	r7, #16
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bc90      	pop	{r4, r7}
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	20000000 	.word	0x20000000
 8011e18:	10624dd3 	.word	0x10624dd3

08011e1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8011e1c:	b490      	push	{r4, r7}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011e24:	4b18      	ldr	r3, [pc, #96]	; (8011e88 <SDMMC_GetCmdResp3+0x6c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	4a18      	ldr	r2, [pc, #96]	; (8011e8c <SDMMC_GetCmdResp3+0x70>)
 8011e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e2e:	0a5b      	lsrs	r3, r3, #9
 8011e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011e38:	4623      	mov	r3, r4
 8011e3a:	1e5c      	subs	r4, r3, #1
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d102      	bne.n	8011e46 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e44:	e01b      	b.n	8011e7e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d0f0      	beq.n	8011e38 <SDMMC_GetCmdResp3+0x1c>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d1eb      	bne.n	8011e38 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e64:	f003 0304 	and.w	r3, r3, #4
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d004      	beq.n	8011e76 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2204      	movs	r2, #4
 8011e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e72:	2304      	movs	r3, #4
 8011e74:	e003      	b.n	8011e7e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	22c5      	movs	r2, #197	; 0xc5
 8011e7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011e7c:	2300      	movs	r3, #0
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3710      	adds	r7, #16
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bc90      	pop	{r4, r7}
 8011e86:	4770      	bx	lr
 8011e88:	20000000 	.word	0x20000000
 8011e8c:	10624dd3 	.word	0x10624dd3

08011e90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011e90:	b590      	push	{r4, r7, lr}
 8011e92:	b087      	sub	sp, #28
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	460b      	mov	r3, r1
 8011e9a:	607a      	str	r2, [r7, #4]
 8011e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011e9e:	4b34      	ldr	r3, [pc, #208]	; (8011f70 <SDMMC_GetCmdResp6+0xe0>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	4a34      	ldr	r2, [pc, #208]	; (8011f74 <SDMMC_GetCmdResp6+0xe4>)
 8011ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8011ea8:	0a5b      	lsrs	r3, r3, #9
 8011eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011eb2:	4623      	mov	r3, r4
 8011eb4:	1e5c      	subs	r4, r3, #1
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011eba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ebe:	e052      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ec4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d0f0      	beq.n	8011eb2 <SDMMC_GetCmdResp6+0x22>
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d1eb      	bne.n	8011eb2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ede:	f003 0304 	and.w	r3, r3, #4
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d004      	beq.n	8011ef0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2204      	movs	r2, #4
 8011eea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011eec:	2304      	movs	r3, #4
 8011eee:	e03a      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ef4:	f003 0301 	and.w	r3, r3, #1
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d004      	beq.n	8011f06 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2201      	movs	r2, #1
 8011f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f02:	2301      	movs	r3, #1
 8011f04:	e02f      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7ff fbae 	bl	8011668 <SDIO_GetCommandResponse>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	461a      	mov	r2, r3
 8011f10:	7afb      	ldrb	r3, [r7, #11]
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d001      	beq.n	8011f1a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011f16:	2301      	movs	r3, #1
 8011f18:	e025      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	22c5      	movs	r2, #197	; 0xc5
 8011f1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011f20:	2100      	movs	r1, #0
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f7ff fbad 	bl	8011682 <SDIO_GetResponse>
 8011f28:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d106      	bne.n	8011f42 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	0c1b      	lsrs	r3, r3, #16
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	e011      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f50:	e009      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f60:	e001      	b.n	8011f66 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	371c      	adds	r7, #28
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20000000 	.word	0x20000000
 8011f74:	10624dd3 	.word	0x10624dd3

08011f78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011f78:	b490      	push	{r4, r7}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f80:	4b21      	ldr	r3, [pc, #132]	; (8012008 <SDMMC_GetCmdResp7+0x90>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a21      	ldr	r2, [pc, #132]	; (801200c <SDMMC_GetCmdResp7+0x94>)
 8011f86:	fba2 2303 	umull	r2, r3, r2, r3
 8011f8a:	0a5b      	lsrs	r3, r3, #9
 8011f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011f94:	4623      	mov	r3, r4
 8011f96:	1e5c      	subs	r4, r3, #1
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d102      	bne.n	8011fa2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011fa0:	e02c      	b.n	8011ffc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fa6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d0f0      	beq.n	8011f94 <SDMMC_GetCmdResp7+0x1c>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1eb      	bne.n	8011f94 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc0:	f003 0304 	and.w	r3, r3, #4
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d004      	beq.n	8011fd2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2204      	movs	r2, #4
 8011fcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fce:	2304      	movs	r3, #4
 8011fd0:	e014      	b.n	8011ffc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d004      	beq.n	8011fe8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	e009      	b.n	8011ffc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2240      	movs	r2, #64	; 0x40
 8011ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ffa:	2300      	movs	r3, #0
  
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bc90      	pop	{r4, r7}
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop
 8012008:	20000000 	.word	0x20000000
 801200c:	10624dd3 	.word	0x10624dd3

08012010 <main>:




int main(void)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	af00      	add	r7, sp, #0
  hwInit();
 8012014:	f7f5 f9fa 	bl	800740c <hwInit>
  apInit();
 8012018:	f7ee ffce 	bl	8000fb8 <apInit>

  apMain();
 801201c:	f7ee ffd5 	bl	8000fca <apMain>

  return 0;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	bd80      	pop	{r7, pc}
	...

08012028 <__errno>:
 8012028:	4b01      	ldr	r3, [pc, #4]	; (8012030 <__errno+0x8>)
 801202a:	6818      	ldr	r0, [r3, #0]
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	20000064 	.word	0x20000064

08012034 <__libc_init_array>:
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	4e0d      	ldr	r6, [pc, #52]	; (801206c <__libc_init_array+0x38>)
 8012038:	4c0d      	ldr	r4, [pc, #52]	; (8012070 <__libc_init_array+0x3c>)
 801203a:	1ba4      	subs	r4, r4, r6
 801203c:	10a4      	asrs	r4, r4, #2
 801203e:	2500      	movs	r5, #0
 8012040:	42a5      	cmp	r5, r4
 8012042:	d109      	bne.n	8012058 <__libc_init_array+0x24>
 8012044:	4e0b      	ldr	r6, [pc, #44]	; (8012074 <__libc_init_array+0x40>)
 8012046:	4c0c      	ldr	r4, [pc, #48]	; (8012078 <__libc_init_array+0x44>)
 8012048:	f003 fc14 	bl	8015874 <_init>
 801204c:	1ba4      	subs	r4, r4, r6
 801204e:	10a4      	asrs	r4, r4, #2
 8012050:	2500      	movs	r5, #0
 8012052:	42a5      	cmp	r5, r4
 8012054:	d105      	bne.n	8012062 <__libc_init_array+0x2e>
 8012056:	bd70      	pop	{r4, r5, r6, pc}
 8012058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801205c:	4798      	blx	r3
 801205e:	3501      	adds	r5, #1
 8012060:	e7ee      	b.n	8012040 <__libc_init_array+0xc>
 8012062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012066:	4798      	blx	r3
 8012068:	3501      	adds	r5, #1
 801206a:	e7f2      	b.n	8012052 <__libc_init_array+0x1e>
 801206c:	08022738 	.word	0x08022738
 8012070:	08022738 	.word	0x08022738
 8012074:	08022738 	.word	0x08022738
 8012078:	0802273c 	.word	0x0802273c

0801207c <malloc>:
 801207c:	4b02      	ldr	r3, [pc, #8]	; (8012088 <malloc+0xc>)
 801207e:	4601      	mov	r1, r0
 8012080:	6818      	ldr	r0, [r3, #0]
 8012082:	f000 b86d 	b.w	8012160 <_malloc_r>
 8012086:	bf00      	nop
 8012088:	20000064 	.word	0x20000064

0801208c <free>:
 801208c:	4b02      	ldr	r3, [pc, #8]	; (8012098 <free+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f000 b817 	b.w	80120c4 <_free_r>
 8012096:	bf00      	nop
 8012098:	20000064 	.word	0x20000064

0801209c <memcpy>:
 801209c:	b510      	push	{r4, lr}
 801209e:	1e43      	subs	r3, r0, #1
 80120a0:	440a      	add	r2, r1
 80120a2:	4291      	cmp	r1, r2
 80120a4:	d100      	bne.n	80120a8 <memcpy+0xc>
 80120a6:	bd10      	pop	{r4, pc}
 80120a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120b0:	e7f7      	b.n	80120a2 <memcpy+0x6>

080120b2 <memset>:
 80120b2:	4402      	add	r2, r0
 80120b4:	4603      	mov	r3, r0
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d100      	bne.n	80120bc <memset+0xa>
 80120ba:	4770      	bx	lr
 80120bc:	f803 1b01 	strb.w	r1, [r3], #1
 80120c0:	e7f9      	b.n	80120b6 <memset+0x4>
	...

080120c4 <_free_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4605      	mov	r5, r0
 80120c8:	2900      	cmp	r1, #0
 80120ca:	d045      	beq.n	8012158 <_free_r+0x94>
 80120cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120d0:	1f0c      	subs	r4, r1, #4
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	bfb8      	it	lt
 80120d6:	18e4      	addlt	r4, r4, r3
 80120d8:	f002 fdfe 	bl	8014cd8 <__malloc_lock>
 80120dc:	4a1f      	ldr	r2, [pc, #124]	; (801215c <_free_r+0x98>)
 80120de:	6813      	ldr	r3, [r2, #0]
 80120e0:	4610      	mov	r0, r2
 80120e2:	b933      	cbnz	r3, 80120f2 <_free_r+0x2e>
 80120e4:	6063      	str	r3, [r4, #4]
 80120e6:	6014      	str	r4, [r2, #0]
 80120e8:	4628      	mov	r0, r5
 80120ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120ee:	f002 bdf4 	b.w	8014cda <__malloc_unlock>
 80120f2:	42a3      	cmp	r3, r4
 80120f4:	d90c      	bls.n	8012110 <_free_r+0x4c>
 80120f6:	6821      	ldr	r1, [r4, #0]
 80120f8:	1862      	adds	r2, r4, r1
 80120fa:	4293      	cmp	r3, r2
 80120fc:	bf04      	itt	eq
 80120fe:	681a      	ldreq	r2, [r3, #0]
 8012100:	685b      	ldreq	r3, [r3, #4]
 8012102:	6063      	str	r3, [r4, #4]
 8012104:	bf04      	itt	eq
 8012106:	1852      	addeq	r2, r2, r1
 8012108:	6022      	streq	r2, [r4, #0]
 801210a:	6004      	str	r4, [r0, #0]
 801210c:	e7ec      	b.n	80120e8 <_free_r+0x24>
 801210e:	4613      	mov	r3, r2
 8012110:	685a      	ldr	r2, [r3, #4]
 8012112:	b10a      	cbz	r2, 8012118 <_free_r+0x54>
 8012114:	42a2      	cmp	r2, r4
 8012116:	d9fa      	bls.n	801210e <_free_r+0x4a>
 8012118:	6819      	ldr	r1, [r3, #0]
 801211a:	1858      	adds	r0, r3, r1
 801211c:	42a0      	cmp	r0, r4
 801211e:	d10b      	bne.n	8012138 <_free_r+0x74>
 8012120:	6820      	ldr	r0, [r4, #0]
 8012122:	4401      	add	r1, r0
 8012124:	1858      	adds	r0, r3, r1
 8012126:	4282      	cmp	r2, r0
 8012128:	6019      	str	r1, [r3, #0]
 801212a:	d1dd      	bne.n	80120e8 <_free_r+0x24>
 801212c:	6810      	ldr	r0, [r2, #0]
 801212e:	6852      	ldr	r2, [r2, #4]
 8012130:	605a      	str	r2, [r3, #4]
 8012132:	4401      	add	r1, r0
 8012134:	6019      	str	r1, [r3, #0]
 8012136:	e7d7      	b.n	80120e8 <_free_r+0x24>
 8012138:	d902      	bls.n	8012140 <_free_r+0x7c>
 801213a:	230c      	movs	r3, #12
 801213c:	602b      	str	r3, [r5, #0]
 801213e:	e7d3      	b.n	80120e8 <_free_r+0x24>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	1821      	adds	r1, r4, r0
 8012144:	428a      	cmp	r2, r1
 8012146:	bf04      	itt	eq
 8012148:	6811      	ldreq	r1, [r2, #0]
 801214a:	6852      	ldreq	r2, [r2, #4]
 801214c:	6062      	str	r2, [r4, #4]
 801214e:	bf04      	itt	eq
 8012150:	1809      	addeq	r1, r1, r0
 8012152:	6021      	streq	r1, [r4, #0]
 8012154:	605c      	str	r4, [r3, #4]
 8012156:	e7c7      	b.n	80120e8 <_free_r+0x24>
 8012158:	bd38      	pop	{r3, r4, r5, pc}
 801215a:	bf00      	nop
 801215c:	2000a498 	.word	0x2000a498

08012160 <_malloc_r>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	1ccd      	adds	r5, r1, #3
 8012164:	f025 0503 	bic.w	r5, r5, #3
 8012168:	3508      	adds	r5, #8
 801216a:	2d0c      	cmp	r5, #12
 801216c:	bf38      	it	cc
 801216e:	250c      	movcc	r5, #12
 8012170:	2d00      	cmp	r5, #0
 8012172:	4606      	mov	r6, r0
 8012174:	db01      	blt.n	801217a <_malloc_r+0x1a>
 8012176:	42a9      	cmp	r1, r5
 8012178:	d903      	bls.n	8012182 <_malloc_r+0x22>
 801217a:	230c      	movs	r3, #12
 801217c:	6033      	str	r3, [r6, #0]
 801217e:	2000      	movs	r0, #0
 8012180:	bd70      	pop	{r4, r5, r6, pc}
 8012182:	f002 fda9 	bl	8014cd8 <__malloc_lock>
 8012186:	4a21      	ldr	r2, [pc, #132]	; (801220c <_malloc_r+0xac>)
 8012188:	6814      	ldr	r4, [r2, #0]
 801218a:	4621      	mov	r1, r4
 801218c:	b991      	cbnz	r1, 80121b4 <_malloc_r+0x54>
 801218e:	4c20      	ldr	r4, [pc, #128]	; (8012210 <_malloc_r+0xb0>)
 8012190:	6823      	ldr	r3, [r4, #0]
 8012192:	b91b      	cbnz	r3, 801219c <_malloc_r+0x3c>
 8012194:	4630      	mov	r0, r6
 8012196:	f000 fc99 	bl	8012acc <_sbrk_r>
 801219a:	6020      	str	r0, [r4, #0]
 801219c:	4629      	mov	r1, r5
 801219e:	4630      	mov	r0, r6
 80121a0:	f000 fc94 	bl	8012acc <_sbrk_r>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d124      	bne.n	80121f2 <_malloc_r+0x92>
 80121a8:	230c      	movs	r3, #12
 80121aa:	6033      	str	r3, [r6, #0]
 80121ac:	4630      	mov	r0, r6
 80121ae:	f002 fd94 	bl	8014cda <__malloc_unlock>
 80121b2:	e7e4      	b.n	801217e <_malloc_r+0x1e>
 80121b4:	680b      	ldr	r3, [r1, #0]
 80121b6:	1b5b      	subs	r3, r3, r5
 80121b8:	d418      	bmi.n	80121ec <_malloc_r+0x8c>
 80121ba:	2b0b      	cmp	r3, #11
 80121bc:	d90f      	bls.n	80121de <_malloc_r+0x7e>
 80121be:	600b      	str	r3, [r1, #0]
 80121c0:	50cd      	str	r5, [r1, r3]
 80121c2:	18cc      	adds	r4, r1, r3
 80121c4:	4630      	mov	r0, r6
 80121c6:	f002 fd88 	bl	8014cda <__malloc_unlock>
 80121ca:	f104 000b 	add.w	r0, r4, #11
 80121ce:	1d23      	adds	r3, r4, #4
 80121d0:	f020 0007 	bic.w	r0, r0, #7
 80121d4:	1ac3      	subs	r3, r0, r3
 80121d6:	d0d3      	beq.n	8012180 <_malloc_r+0x20>
 80121d8:	425a      	negs	r2, r3
 80121da:	50e2      	str	r2, [r4, r3]
 80121dc:	e7d0      	b.n	8012180 <_malloc_r+0x20>
 80121de:	428c      	cmp	r4, r1
 80121e0:	684b      	ldr	r3, [r1, #4]
 80121e2:	bf16      	itet	ne
 80121e4:	6063      	strne	r3, [r4, #4]
 80121e6:	6013      	streq	r3, [r2, #0]
 80121e8:	460c      	movne	r4, r1
 80121ea:	e7eb      	b.n	80121c4 <_malloc_r+0x64>
 80121ec:	460c      	mov	r4, r1
 80121ee:	6849      	ldr	r1, [r1, #4]
 80121f0:	e7cc      	b.n	801218c <_malloc_r+0x2c>
 80121f2:	1cc4      	adds	r4, r0, #3
 80121f4:	f024 0403 	bic.w	r4, r4, #3
 80121f8:	42a0      	cmp	r0, r4
 80121fa:	d005      	beq.n	8012208 <_malloc_r+0xa8>
 80121fc:	1a21      	subs	r1, r4, r0
 80121fe:	4630      	mov	r0, r6
 8012200:	f000 fc64 	bl	8012acc <_sbrk_r>
 8012204:	3001      	adds	r0, #1
 8012206:	d0cf      	beq.n	80121a8 <_malloc_r+0x48>
 8012208:	6025      	str	r5, [r4, #0]
 801220a:	e7db      	b.n	80121c4 <_malloc_r+0x64>
 801220c:	2000a498 	.word	0x2000a498
 8012210:	2000a49c 	.word	0x2000a49c

08012214 <__cvt>:
 8012214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012218:	ec55 4b10 	vmov	r4, r5, d0
 801221c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801221e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012222:	2d00      	cmp	r5, #0
 8012224:	460e      	mov	r6, r1
 8012226:	4691      	mov	r9, r2
 8012228:	4619      	mov	r1, r3
 801222a:	bfb8      	it	lt
 801222c:	4622      	movlt	r2, r4
 801222e:	462b      	mov	r3, r5
 8012230:	f027 0720 	bic.w	r7, r7, #32
 8012234:	bfbb      	ittet	lt
 8012236:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801223a:	461d      	movlt	r5, r3
 801223c:	2300      	movge	r3, #0
 801223e:	232d      	movlt	r3, #45	; 0x2d
 8012240:	bfb8      	it	lt
 8012242:	4614      	movlt	r4, r2
 8012244:	2f46      	cmp	r7, #70	; 0x46
 8012246:	700b      	strb	r3, [r1, #0]
 8012248:	d004      	beq.n	8012254 <__cvt+0x40>
 801224a:	2f45      	cmp	r7, #69	; 0x45
 801224c:	d100      	bne.n	8012250 <__cvt+0x3c>
 801224e:	3601      	adds	r6, #1
 8012250:	2102      	movs	r1, #2
 8012252:	e000      	b.n	8012256 <__cvt+0x42>
 8012254:	2103      	movs	r1, #3
 8012256:	ab03      	add	r3, sp, #12
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	ab02      	add	r3, sp, #8
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	4632      	mov	r2, r6
 8012260:	4653      	mov	r3, sl
 8012262:	ec45 4b10 	vmov	d0, r4, r5
 8012266:	f001 fc33 	bl	8013ad0 <_dtoa_r>
 801226a:	2f47      	cmp	r7, #71	; 0x47
 801226c:	4680      	mov	r8, r0
 801226e:	d102      	bne.n	8012276 <__cvt+0x62>
 8012270:	f019 0f01 	tst.w	r9, #1
 8012274:	d026      	beq.n	80122c4 <__cvt+0xb0>
 8012276:	2f46      	cmp	r7, #70	; 0x46
 8012278:	eb08 0906 	add.w	r9, r8, r6
 801227c:	d111      	bne.n	80122a2 <__cvt+0x8e>
 801227e:	f898 3000 	ldrb.w	r3, [r8]
 8012282:	2b30      	cmp	r3, #48	; 0x30
 8012284:	d10a      	bne.n	801229c <__cvt+0x88>
 8012286:	2200      	movs	r2, #0
 8012288:	2300      	movs	r3, #0
 801228a:	4620      	mov	r0, r4
 801228c:	4629      	mov	r1, r5
 801228e:	f7ee fc33 	bl	8000af8 <__aeabi_dcmpeq>
 8012292:	b918      	cbnz	r0, 801229c <__cvt+0x88>
 8012294:	f1c6 0601 	rsb	r6, r6, #1
 8012298:	f8ca 6000 	str.w	r6, [sl]
 801229c:	f8da 3000 	ldr.w	r3, [sl]
 80122a0:	4499      	add	r9, r3
 80122a2:	2200      	movs	r2, #0
 80122a4:	2300      	movs	r3, #0
 80122a6:	4620      	mov	r0, r4
 80122a8:	4629      	mov	r1, r5
 80122aa:	f7ee fc25 	bl	8000af8 <__aeabi_dcmpeq>
 80122ae:	b938      	cbnz	r0, 80122c0 <__cvt+0xac>
 80122b0:	2230      	movs	r2, #48	; 0x30
 80122b2:	9b03      	ldr	r3, [sp, #12]
 80122b4:	454b      	cmp	r3, r9
 80122b6:	d205      	bcs.n	80122c4 <__cvt+0xb0>
 80122b8:	1c59      	adds	r1, r3, #1
 80122ba:	9103      	str	r1, [sp, #12]
 80122bc:	701a      	strb	r2, [r3, #0]
 80122be:	e7f8      	b.n	80122b2 <__cvt+0x9e>
 80122c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80122c4:	9b03      	ldr	r3, [sp, #12]
 80122c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122c8:	eba3 0308 	sub.w	r3, r3, r8
 80122cc:	4640      	mov	r0, r8
 80122ce:	6013      	str	r3, [r2, #0]
 80122d0:	b004      	add	sp, #16
 80122d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080122d6 <__exponent>:
 80122d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122d8:	2900      	cmp	r1, #0
 80122da:	4604      	mov	r4, r0
 80122dc:	bfba      	itte	lt
 80122de:	4249      	neglt	r1, r1
 80122e0:	232d      	movlt	r3, #45	; 0x2d
 80122e2:	232b      	movge	r3, #43	; 0x2b
 80122e4:	2909      	cmp	r1, #9
 80122e6:	f804 2b02 	strb.w	r2, [r4], #2
 80122ea:	7043      	strb	r3, [r0, #1]
 80122ec:	dd20      	ble.n	8012330 <__exponent+0x5a>
 80122ee:	f10d 0307 	add.w	r3, sp, #7
 80122f2:	461f      	mov	r7, r3
 80122f4:	260a      	movs	r6, #10
 80122f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80122fa:	fb06 1115 	mls	r1, r6, r5, r1
 80122fe:	3130      	adds	r1, #48	; 0x30
 8012300:	2d09      	cmp	r5, #9
 8012302:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012306:	f103 32ff 	add.w	r2, r3, #4294967295
 801230a:	4629      	mov	r1, r5
 801230c:	dc09      	bgt.n	8012322 <__exponent+0x4c>
 801230e:	3130      	adds	r1, #48	; 0x30
 8012310:	3b02      	subs	r3, #2
 8012312:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012316:	42bb      	cmp	r3, r7
 8012318:	4622      	mov	r2, r4
 801231a:	d304      	bcc.n	8012326 <__exponent+0x50>
 801231c:	1a10      	subs	r0, r2, r0
 801231e:	b003      	add	sp, #12
 8012320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012322:	4613      	mov	r3, r2
 8012324:	e7e7      	b.n	80122f6 <__exponent+0x20>
 8012326:	f813 2b01 	ldrb.w	r2, [r3], #1
 801232a:	f804 2b01 	strb.w	r2, [r4], #1
 801232e:	e7f2      	b.n	8012316 <__exponent+0x40>
 8012330:	2330      	movs	r3, #48	; 0x30
 8012332:	4419      	add	r1, r3
 8012334:	7083      	strb	r3, [r0, #2]
 8012336:	1d02      	adds	r2, r0, #4
 8012338:	70c1      	strb	r1, [r0, #3]
 801233a:	e7ef      	b.n	801231c <__exponent+0x46>

0801233c <_printf_float>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	b08d      	sub	sp, #52	; 0x34
 8012342:	460c      	mov	r4, r1
 8012344:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012348:	4616      	mov	r6, r2
 801234a:	461f      	mov	r7, r3
 801234c:	4605      	mov	r5, r0
 801234e:	f002 fca3 	bl	8014c98 <_localeconv_r>
 8012352:	6803      	ldr	r3, [r0, #0]
 8012354:	9304      	str	r3, [sp, #16]
 8012356:	4618      	mov	r0, r3
 8012358:	f7ed ff4c 	bl	80001f4 <strlen>
 801235c:	2300      	movs	r3, #0
 801235e:	930a      	str	r3, [sp, #40]	; 0x28
 8012360:	f8d8 3000 	ldr.w	r3, [r8]
 8012364:	9005      	str	r0, [sp, #20]
 8012366:	3307      	adds	r3, #7
 8012368:	f023 0307 	bic.w	r3, r3, #7
 801236c:	f103 0208 	add.w	r2, r3, #8
 8012370:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012374:	f8d4 b000 	ldr.w	fp, [r4]
 8012378:	f8c8 2000 	str.w	r2, [r8]
 801237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012380:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012384:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012388:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801238c:	9307      	str	r3, [sp, #28]
 801238e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012392:	f04f 32ff 	mov.w	r2, #4294967295
 8012396:	4ba7      	ldr	r3, [pc, #668]	; (8012634 <_printf_float+0x2f8>)
 8012398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801239c:	f7ee fbde 	bl	8000b5c <__aeabi_dcmpun>
 80123a0:	bb70      	cbnz	r0, 8012400 <_printf_float+0xc4>
 80123a2:	f04f 32ff 	mov.w	r2, #4294967295
 80123a6:	4ba3      	ldr	r3, [pc, #652]	; (8012634 <_printf_float+0x2f8>)
 80123a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123ac:	f7ee fbb8 	bl	8000b20 <__aeabi_dcmple>
 80123b0:	bb30      	cbnz	r0, 8012400 <_printf_float+0xc4>
 80123b2:	2200      	movs	r2, #0
 80123b4:	2300      	movs	r3, #0
 80123b6:	4640      	mov	r0, r8
 80123b8:	4649      	mov	r1, r9
 80123ba:	f7ee fba7 	bl	8000b0c <__aeabi_dcmplt>
 80123be:	b110      	cbz	r0, 80123c6 <_printf_float+0x8a>
 80123c0:	232d      	movs	r3, #45	; 0x2d
 80123c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123c6:	4a9c      	ldr	r2, [pc, #624]	; (8012638 <_printf_float+0x2fc>)
 80123c8:	4b9c      	ldr	r3, [pc, #624]	; (801263c <_printf_float+0x300>)
 80123ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80123ce:	bf8c      	ite	hi
 80123d0:	4690      	movhi	r8, r2
 80123d2:	4698      	movls	r8, r3
 80123d4:	2303      	movs	r3, #3
 80123d6:	f02b 0204 	bic.w	r2, fp, #4
 80123da:	6123      	str	r3, [r4, #16]
 80123dc:	6022      	str	r2, [r4, #0]
 80123de:	f04f 0900 	mov.w	r9, #0
 80123e2:	9700      	str	r7, [sp, #0]
 80123e4:	4633      	mov	r3, r6
 80123e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80123e8:	4621      	mov	r1, r4
 80123ea:	4628      	mov	r0, r5
 80123ec:	f000 f9e6 	bl	80127bc <_printf_common>
 80123f0:	3001      	adds	r0, #1
 80123f2:	f040 808d 	bne.w	8012510 <_printf_float+0x1d4>
 80123f6:	f04f 30ff 	mov.w	r0, #4294967295
 80123fa:	b00d      	add	sp, #52	; 0x34
 80123fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012400:	4642      	mov	r2, r8
 8012402:	464b      	mov	r3, r9
 8012404:	4640      	mov	r0, r8
 8012406:	4649      	mov	r1, r9
 8012408:	f7ee fba8 	bl	8000b5c <__aeabi_dcmpun>
 801240c:	b110      	cbz	r0, 8012414 <_printf_float+0xd8>
 801240e:	4a8c      	ldr	r2, [pc, #560]	; (8012640 <_printf_float+0x304>)
 8012410:	4b8c      	ldr	r3, [pc, #560]	; (8012644 <_printf_float+0x308>)
 8012412:	e7da      	b.n	80123ca <_printf_float+0x8e>
 8012414:	6861      	ldr	r1, [r4, #4]
 8012416:	1c4b      	adds	r3, r1, #1
 8012418:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801241c:	a80a      	add	r0, sp, #40	; 0x28
 801241e:	d13e      	bne.n	801249e <_printf_float+0x162>
 8012420:	2306      	movs	r3, #6
 8012422:	6063      	str	r3, [r4, #4]
 8012424:	2300      	movs	r3, #0
 8012426:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801242a:	ab09      	add	r3, sp, #36	; 0x24
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	ec49 8b10 	vmov	d0, r8, r9
 8012432:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012436:	6022      	str	r2, [r4, #0]
 8012438:	f8cd a004 	str.w	sl, [sp, #4]
 801243c:	6861      	ldr	r1, [r4, #4]
 801243e:	4628      	mov	r0, r5
 8012440:	f7ff fee8 	bl	8012214 <__cvt>
 8012444:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012448:	2b47      	cmp	r3, #71	; 0x47
 801244a:	4680      	mov	r8, r0
 801244c:	d109      	bne.n	8012462 <_printf_float+0x126>
 801244e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012450:	1cd8      	adds	r0, r3, #3
 8012452:	db02      	blt.n	801245a <_printf_float+0x11e>
 8012454:	6862      	ldr	r2, [r4, #4]
 8012456:	4293      	cmp	r3, r2
 8012458:	dd47      	ble.n	80124ea <_printf_float+0x1ae>
 801245a:	f1aa 0a02 	sub.w	sl, sl, #2
 801245e:	fa5f fa8a 	uxtb.w	sl, sl
 8012462:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012468:	d824      	bhi.n	80124b4 <_printf_float+0x178>
 801246a:	3901      	subs	r1, #1
 801246c:	4652      	mov	r2, sl
 801246e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012472:	9109      	str	r1, [sp, #36]	; 0x24
 8012474:	f7ff ff2f 	bl	80122d6 <__exponent>
 8012478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801247a:	1813      	adds	r3, r2, r0
 801247c:	2a01      	cmp	r2, #1
 801247e:	4681      	mov	r9, r0
 8012480:	6123      	str	r3, [r4, #16]
 8012482:	dc02      	bgt.n	801248a <_printf_float+0x14e>
 8012484:	6822      	ldr	r2, [r4, #0]
 8012486:	07d1      	lsls	r1, r2, #31
 8012488:	d501      	bpl.n	801248e <_printf_float+0x152>
 801248a:	3301      	adds	r3, #1
 801248c:	6123      	str	r3, [r4, #16]
 801248e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012492:	2b00      	cmp	r3, #0
 8012494:	d0a5      	beq.n	80123e2 <_printf_float+0xa6>
 8012496:	232d      	movs	r3, #45	; 0x2d
 8012498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801249c:	e7a1      	b.n	80123e2 <_printf_float+0xa6>
 801249e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80124a2:	f000 8177 	beq.w	8012794 <_printf_float+0x458>
 80124a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80124aa:	d1bb      	bne.n	8012424 <_printf_float+0xe8>
 80124ac:	2900      	cmp	r1, #0
 80124ae:	d1b9      	bne.n	8012424 <_printf_float+0xe8>
 80124b0:	2301      	movs	r3, #1
 80124b2:	e7b6      	b.n	8012422 <_printf_float+0xe6>
 80124b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80124b8:	d119      	bne.n	80124ee <_printf_float+0x1b2>
 80124ba:	2900      	cmp	r1, #0
 80124bc:	6863      	ldr	r3, [r4, #4]
 80124be:	dd0c      	ble.n	80124da <_printf_float+0x19e>
 80124c0:	6121      	str	r1, [r4, #16]
 80124c2:	b913      	cbnz	r3, 80124ca <_printf_float+0x18e>
 80124c4:	6822      	ldr	r2, [r4, #0]
 80124c6:	07d2      	lsls	r2, r2, #31
 80124c8:	d502      	bpl.n	80124d0 <_printf_float+0x194>
 80124ca:	3301      	adds	r3, #1
 80124cc:	440b      	add	r3, r1
 80124ce:	6123      	str	r3, [r4, #16]
 80124d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80124d4:	f04f 0900 	mov.w	r9, #0
 80124d8:	e7d9      	b.n	801248e <_printf_float+0x152>
 80124da:	b913      	cbnz	r3, 80124e2 <_printf_float+0x1a6>
 80124dc:	6822      	ldr	r2, [r4, #0]
 80124de:	07d0      	lsls	r0, r2, #31
 80124e0:	d501      	bpl.n	80124e6 <_printf_float+0x1aa>
 80124e2:	3302      	adds	r3, #2
 80124e4:	e7f3      	b.n	80124ce <_printf_float+0x192>
 80124e6:	2301      	movs	r3, #1
 80124e8:	e7f1      	b.n	80124ce <_printf_float+0x192>
 80124ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80124ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80124f2:	4293      	cmp	r3, r2
 80124f4:	db05      	blt.n	8012502 <_printf_float+0x1c6>
 80124f6:	6822      	ldr	r2, [r4, #0]
 80124f8:	6123      	str	r3, [r4, #16]
 80124fa:	07d1      	lsls	r1, r2, #31
 80124fc:	d5e8      	bpl.n	80124d0 <_printf_float+0x194>
 80124fe:	3301      	adds	r3, #1
 8012500:	e7e5      	b.n	80124ce <_printf_float+0x192>
 8012502:	2b00      	cmp	r3, #0
 8012504:	bfd4      	ite	le
 8012506:	f1c3 0302 	rsble	r3, r3, #2
 801250a:	2301      	movgt	r3, #1
 801250c:	4413      	add	r3, r2
 801250e:	e7de      	b.n	80124ce <_printf_float+0x192>
 8012510:	6823      	ldr	r3, [r4, #0]
 8012512:	055a      	lsls	r2, r3, #21
 8012514:	d407      	bmi.n	8012526 <_printf_float+0x1ea>
 8012516:	6923      	ldr	r3, [r4, #16]
 8012518:	4642      	mov	r2, r8
 801251a:	4631      	mov	r1, r6
 801251c:	4628      	mov	r0, r5
 801251e:	47b8      	blx	r7
 8012520:	3001      	adds	r0, #1
 8012522:	d12b      	bne.n	801257c <_printf_float+0x240>
 8012524:	e767      	b.n	80123f6 <_printf_float+0xba>
 8012526:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801252a:	f240 80dc 	bls.w	80126e6 <_printf_float+0x3aa>
 801252e:	2200      	movs	r2, #0
 8012530:	2300      	movs	r3, #0
 8012532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012536:	f7ee fadf 	bl	8000af8 <__aeabi_dcmpeq>
 801253a:	2800      	cmp	r0, #0
 801253c:	d033      	beq.n	80125a6 <_printf_float+0x26a>
 801253e:	2301      	movs	r3, #1
 8012540:	4a41      	ldr	r2, [pc, #260]	; (8012648 <_printf_float+0x30c>)
 8012542:	4631      	mov	r1, r6
 8012544:	4628      	mov	r0, r5
 8012546:	47b8      	blx	r7
 8012548:	3001      	adds	r0, #1
 801254a:	f43f af54 	beq.w	80123f6 <_printf_float+0xba>
 801254e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012552:	429a      	cmp	r2, r3
 8012554:	db02      	blt.n	801255c <_printf_float+0x220>
 8012556:	6823      	ldr	r3, [r4, #0]
 8012558:	07d8      	lsls	r0, r3, #31
 801255a:	d50f      	bpl.n	801257c <_printf_float+0x240>
 801255c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012560:	4631      	mov	r1, r6
 8012562:	4628      	mov	r0, r5
 8012564:	47b8      	blx	r7
 8012566:	3001      	adds	r0, #1
 8012568:	f43f af45 	beq.w	80123f6 <_printf_float+0xba>
 801256c:	f04f 0800 	mov.w	r8, #0
 8012570:	f104 091a 	add.w	r9, r4, #26
 8012574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012576:	3b01      	subs	r3, #1
 8012578:	4543      	cmp	r3, r8
 801257a:	dc09      	bgt.n	8012590 <_printf_float+0x254>
 801257c:	6823      	ldr	r3, [r4, #0]
 801257e:	079b      	lsls	r3, r3, #30
 8012580:	f100 8103 	bmi.w	801278a <_printf_float+0x44e>
 8012584:	68e0      	ldr	r0, [r4, #12]
 8012586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012588:	4298      	cmp	r0, r3
 801258a:	bfb8      	it	lt
 801258c:	4618      	movlt	r0, r3
 801258e:	e734      	b.n	80123fa <_printf_float+0xbe>
 8012590:	2301      	movs	r3, #1
 8012592:	464a      	mov	r2, r9
 8012594:	4631      	mov	r1, r6
 8012596:	4628      	mov	r0, r5
 8012598:	47b8      	blx	r7
 801259a:	3001      	adds	r0, #1
 801259c:	f43f af2b 	beq.w	80123f6 <_printf_float+0xba>
 80125a0:	f108 0801 	add.w	r8, r8, #1
 80125a4:	e7e6      	b.n	8012574 <_printf_float+0x238>
 80125a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	dc2b      	bgt.n	8012604 <_printf_float+0x2c8>
 80125ac:	2301      	movs	r3, #1
 80125ae:	4a26      	ldr	r2, [pc, #152]	; (8012648 <_printf_float+0x30c>)
 80125b0:	4631      	mov	r1, r6
 80125b2:	4628      	mov	r0, r5
 80125b4:	47b8      	blx	r7
 80125b6:	3001      	adds	r0, #1
 80125b8:	f43f af1d 	beq.w	80123f6 <_printf_float+0xba>
 80125bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125be:	b923      	cbnz	r3, 80125ca <_printf_float+0x28e>
 80125c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125c2:	b913      	cbnz	r3, 80125ca <_printf_float+0x28e>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	07d9      	lsls	r1, r3, #31
 80125c8:	d5d8      	bpl.n	801257c <_printf_float+0x240>
 80125ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125ce:	4631      	mov	r1, r6
 80125d0:	4628      	mov	r0, r5
 80125d2:	47b8      	blx	r7
 80125d4:	3001      	adds	r0, #1
 80125d6:	f43f af0e 	beq.w	80123f6 <_printf_float+0xba>
 80125da:	f04f 0900 	mov.w	r9, #0
 80125de:	f104 0a1a 	add.w	sl, r4, #26
 80125e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e4:	425b      	negs	r3, r3
 80125e6:	454b      	cmp	r3, r9
 80125e8:	dc01      	bgt.n	80125ee <_printf_float+0x2b2>
 80125ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ec:	e794      	b.n	8012518 <_printf_float+0x1dc>
 80125ee:	2301      	movs	r3, #1
 80125f0:	4652      	mov	r2, sl
 80125f2:	4631      	mov	r1, r6
 80125f4:	4628      	mov	r0, r5
 80125f6:	47b8      	blx	r7
 80125f8:	3001      	adds	r0, #1
 80125fa:	f43f aefc 	beq.w	80123f6 <_printf_float+0xba>
 80125fe:	f109 0901 	add.w	r9, r9, #1
 8012602:	e7ee      	b.n	80125e2 <_printf_float+0x2a6>
 8012604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012608:	429a      	cmp	r2, r3
 801260a:	bfa8      	it	ge
 801260c:	461a      	movge	r2, r3
 801260e:	2a00      	cmp	r2, #0
 8012610:	4691      	mov	r9, r2
 8012612:	dd07      	ble.n	8012624 <_printf_float+0x2e8>
 8012614:	4613      	mov	r3, r2
 8012616:	4631      	mov	r1, r6
 8012618:	4642      	mov	r2, r8
 801261a:	4628      	mov	r0, r5
 801261c:	47b8      	blx	r7
 801261e:	3001      	adds	r0, #1
 8012620:	f43f aee9 	beq.w	80123f6 <_printf_float+0xba>
 8012624:	f104 031a 	add.w	r3, r4, #26
 8012628:	f04f 0b00 	mov.w	fp, #0
 801262c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012630:	9306      	str	r3, [sp, #24]
 8012632:	e015      	b.n	8012660 <_printf_float+0x324>
 8012634:	7fefffff 	.word	0x7fefffff
 8012638:	08022420 	.word	0x08022420
 801263c:	0802241c 	.word	0x0802241c
 8012640:	08022428 	.word	0x08022428
 8012644:	08022424 	.word	0x08022424
 8012648:	0802242c 	.word	0x0802242c
 801264c:	2301      	movs	r3, #1
 801264e:	9a06      	ldr	r2, [sp, #24]
 8012650:	4631      	mov	r1, r6
 8012652:	4628      	mov	r0, r5
 8012654:	47b8      	blx	r7
 8012656:	3001      	adds	r0, #1
 8012658:	f43f aecd 	beq.w	80123f6 <_printf_float+0xba>
 801265c:	f10b 0b01 	add.w	fp, fp, #1
 8012660:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012664:	ebaa 0309 	sub.w	r3, sl, r9
 8012668:	455b      	cmp	r3, fp
 801266a:	dcef      	bgt.n	801264c <_printf_float+0x310>
 801266c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012670:	429a      	cmp	r2, r3
 8012672:	44d0      	add	r8, sl
 8012674:	db15      	blt.n	80126a2 <_printf_float+0x366>
 8012676:	6823      	ldr	r3, [r4, #0]
 8012678:	07da      	lsls	r2, r3, #31
 801267a:	d412      	bmi.n	80126a2 <_printf_float+0x366>
 801267c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801267e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012680:	eba3 020a 	sub.w	r2, r3, sl
 8012684:	eba3 0a01 	sub.w	sl, r3, r1
 8012688:	4592      	cmp	sl, r2
 801268a:	bfa8      	it	ge
 801268c:	4692      	movge	sl, r2
 801268e:	f1ba 0f00 	cmp.w	sl, #0
 8012692:	dc0e      	bgt.n	80126b2 <_printf_float+0x376>
 8012694:	f04f 0800 	mov.w	r8, #0
 8012698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801269c:	f104 091a 	add.w	r9, r4, #26
 80126a0:	e019      	b.n	80126d6 <_printf_float+0x39a>
 80126a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126a6:	4631      	mov	r1, r6
 80126a8:	4628      	mov	r0, r5
 80126aa:	47b8      	blx	r7
 80126ac:	3001      	adds	r0, #1
 80126ae:	d1e5      	bne.n	801267c <_printf_float+0x340>
 80126b0:	e6a1      	b.n	80123f6 <_printf_float+0xba>
 80126b2:	4653      	mov	r3, sl
 80126b4:	4642      	mov	r2, r8
 80126b6:	4631      	mov	r1, r6
 80126b8:	4628      	mov	r0, r5
 80126ba:	47b8      	blx	r7
 80126bc:	3001      	adds	r0, #1
 80126be:	d1e9      	bne.n	8012694 <_printf_float+0x358>
 80126c0:	e699      	b.n	80123f6 <_printf_float+0xba>
 80126c2:	2301      	movs	r3, #1
 80126c4:	464a      	mov	r2, r9
 80126c6:	4631      	mov	r1, r6
 80126c8:	4628      	mov	r0, r5
 80126ca:	47b8      	blx	r7
 80126cc:	3001      	adds	r0, #1
 80126ce:	f43f ae92 	beq.w	80123f6 <_printf_float+0xba>
 80126d2:	f108 0801 	add.w	r8, r8, #1
 80126d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126da:	1a9b      	subs	r3, r3, r2
 80126dc:	eba3 030a 	sub.w	r3, r3, sl
 80126e0:	4543      	cmp	r3, r8
 80126e2:	dcee      	bgt.n	80126c2 <_printf_float+0x386>
 80126e4:	e74a      	b.n	801257c <_printf_float+0x240>
 80126e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126e8:	2a01      	cmp	r2, #1
 80126ea:	dc01      	bgt.n	80126f0 <_printf_float+0x3b4>
 80126ec:	07db      	lsls	r3, r3, #31
 80126ee:	d53a      	bpl.n	8012766 <_printf_float+0x42a>
 80126f0:	2301      	movs	r3, #1
 80126f2:	4642      	mov	r2, r8
 80126f4:	4631      	mov	r1, r6
 80126f6:	4628      	mov	r0, r5
 80126f8:	47b8      	blx	r7
 80126fa:	3001      	adds	r0, #1
 80126fc:	f43f ae7b 	beq.w	80123f6 <_printf_float+0xba>
 8012700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	f108 0801 	add.w	r8, r8, #1
 8012710:	f43f ae71 	beq.w	80123f6 <_printf_float+0xba>
 8012714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012716:	2200      	movs	r2, #0
 8012718:	f103 3aff 	add.w	sl, r3, #4294967295
 801271c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012720:	2300      	movs	r3, #0
 8012722:	f7ee f9e9 	bl	8000af8 <__aeabi_dcmpeq>
 8012726:	b9c8      	cbnz	r0, 801275c <_printf_float+0x420>
 8012728:	4653      	mov	r3, sl
 801272a:	4642      	mov	r2, r8
 801272c:	4631      	mov	r1, r6
 801272e:	4628      	mov	r0, r5
 8012730:	47b8      	blx	r7
 8012732:	3001      	adds	r0, #1
 8012734:	d10e      	bne.n	8012754 <_printf_float+0x418>
 8012736:	e65e      	b.n	80123f6 <_printf_float+0xba>
 8012738:	2301      	movs	r3, #1
 801273a:	4652      	mov	r2, sl
 801273c:	4631      	mov	r1, r6
 801273e:	4628      	mov	r0, r5
 8012740:	47b8      	blx	r7
 8012742:	3001      	adds	r0, #1
 8012744:	f43f ae57 	beq.w	80123f6 <_printf_float+0xba>
 8012748:	f108 0801 	add.w	r8, r8, #1
 801274c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801274e:	3b01      	subs	r3, #1
 8012750:	4543      	cmp	r3, r8
 8012752:	dcf1      	bgt.n	8012738 <_printf_float+0x3fc>
 8012754:	464b      	mov	r3, r9
 8012756:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801275a:	e6de      	b.n	801251a <_printf_float+0x1de>
 801275c:	f04f 0800 	mov.w	r8, #0
 8012760:	f104 0a1a 	add.w	sl, r4, #26
 8012764:	e7f2      	b.n	801274c <_printf_float+0x410>
 8012766:	2301      	movs	r3, #1
 8012768:	e7df      	b.n	801272a <_printf_float+0x3ee>
 801276a:	2301      	movs	r3, #1
 801276c:	464a      	mov	r2, r9
 801276e:	4631      	mov	r1, r6
 8012770:	4628      	mov	r0, r5
 8012772:	47b8      	blx	r7
 8012774:	3001      	adds	r0, #1
 8012776:	f43f ae3e 	beq.w	80123f6 <_printf_float+0xba>
 801277a:	f108 0801 	add.w	r8, r8, #1
 801277e:	68e3      	ldr	r3, [r4, #12]
 8012780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012782:	1a9b      	subs	r3, r3, r2
 8012784:	4543      	cmp	r3, r8
 8012786:	dcf0      	bgt.n	801276a <_printf_float+0x42e>
 8012788:	e6fc      	b.n	8012584 <_printf_float+0x248>
 801278a:	f04f 0800 	mov.w	r8, #0
 801278e:	f104 0919 	add.w	r9, r4, #25
 8012792:	e7f4      	b.n	801277e <_printf_float+0x442>
 8012794:	2900      	cmp	r1, #0
 8012796:	f43f ae8b 	beq.w	80124b0 <_printf_float+0x174>
 801279a:	2300      	movs	r3, #0
 801279c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80127a0:	ab09      	add	r3, sp, #36	; 0x24
 80127a2:	9300      	str	r3, [sp, #0]
 80127a4:	ec49 8b10 	vmov	d0, r8, r9
 80127a8:	6022      	str	r2, [r4, #0]
 80127aa:	f8cd a004 	str.w	sl, [sp, #4]
 80127ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127b2:	4628      	mov	r0, r5
 80127b4:	f7ff fd2e 	bl	8012214 <__cvt>
 80127b8:	4680      	mov	r8, r0
 80127ba:	e648      	b.n	801244e <_printf_float+0x112>

080127bc <_printf_common>:
 80127bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127c0:	4691      	mov	r9, r2
 80127c2:	461f      	mov	r7, r3
 80127c4:	688a      	ldr	r2, [r1, #8]
 80127c6:	690b      	ldr	r3, [r1, #16]
 80127c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127cc:	4293      	cmp	r3, r2
 80127ce:	bfb8      	it	lt
 80127d0:	4613      	movlt	r3, r2
 80127d2:	f8c9 3000 	str.w	r3, [r9]
 80127d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127da:	4606      	mov	r6, r0
 80127dc:	460c      	mov	r4, r1
 80127de:	b112      	cbz	r2, 80127e6 <_printf_common+0x2a>
 80127e0:	3301      	adds	r3, #1
 80127e2:	f8c9 3000 	str.w	r3, [r9]
 80127e6:	6823      	ldr	r3, [r4, #0]
 80127e8:	0699      	lsls	r1, r3, #26
 80127ea:	bf42      	ittt	mi
 80127ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80127f0:	3302      	addmi	r3, #2
 80127f2:	f8c9 3000 	strmi.w	r3, [r9]
 80127f6:	6825      	ldr	r5, [r4, #0]
 80127f8:	f015 0506 	ands.w	r5, r5, #6
 80127fc:	d107      	bne.n	801280e <_printf_common+0x52>
 80127fe:	f104 0a19 	add.w	sl, r4, #25
 8012802:	68e3      	ldr	r3, [r4, #12]
 8012804:	f8d9 2000 	ldr.w	r2, [r9]
 8012808:	1a9b      	subs	r3, r3, r2
 801280a:	42ab      	cmp	r3, r5
 801280c:	dc28      	bgt.n	8012860 <_printf_common+0xa4>
 801280e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012812:	6822      	ldr	r2, [r4, #0]
 8012814:	3300      	adds	r3, #0
 8012816:	bf18      	it	ne
 8012818:	2301      	movne	r3, #1
 801281a:	0692      	lsls	r2, r2, #26
 801281c:	d42d      	bmi.n	801287a <_printf_common+0xbe>
 801281e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012822:	4639      	mov	r1, r7
 8012824:	4630      	mov	r0, r6
 8012826:	47c0      	blx	r8
 8012828:	3001      	adds	r0, #1
 801282a:	d020      	beq.n	801286e <_printf_common+0xb2>
 801282c:	6823      	ldr	r3, [r4, #0]
 801282e:	68e5      	ldr	r5, [r4, #12]
 8012830:	f8d9 2000 	ldr.w	r2, [r9]
 8012834:	f003 0306 	and.w	r3, r3, #6
 8012838:	2b04      	cmp	r3, #4
 801283a:	bf08      	it	eq
 801283c:	1aad      	subeq	r5, r5, r2
 801283e:	68a3      	ldr	r3, [r4, #8]
 8012840:	6922      	ldr	r2, [r4, #16]
 8012842:	bf0c      	ite	eq
 8012844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012848:	2500      	movne	r5, #0
 801284a:	4293      	cmp	r3, r2
 801284c:	bfc4      	itt	gt
 801284e:	1a9b      	subgt	r3, r3, r2
 8012850:	18ed      	addgt	r5, r5, r3
 8012852:	f04f 0900 	mov.w	r9, #0
 8012856:	341a      	adds	r4, #26
 8012858:	454d      	cmp	r5, r9
 801285a:	d11a      	bne.n	8012892 <_printf_common+0xd6>
 801285c:	2000      	movs	r0, #0
 801285e:	e008      	b.n	8012872 <_printf_common+0xb6>
 8012860:	2301      	movs	r3, #1
 8012862:	4652      	mov	r2, sl
 8012864:	4639      	mov	r1, r7
 8012866:	4630      	mov	r0, r6
 8012868:	47c0      	blx	r8
 801286a:	3001      	adds	r0, #1
 801286c:	d103      	bne.n	8012876 <_printf_common+0xba>
 801286e:	f04f 30ff 	mov.w	r0, #4294967295
 8012872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012876:	3501      	adds	r5, #1
 8012878:	e7c3      	b.n	8012802 <_printf_common+0x46>
 801287a:	18e1      	adds	r1, r4, r3
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	2030      	movs	r0, #48	; 0x30
 8012880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012884:	4422      	add	r2, r4
 8012886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801288a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801288e:	3302      	adds	r3, #2
 8012890:	e7c5      	b.n	801281e <_printf_common+0x62>
 8012892:	2301      	movs	r3, #1
 8012894:	4622      	mov	r2, r4
 8012896:	4639      	mov	r1, r7
 8012898:	4630      	mov	r0, r6
 801289a:	47c0      	blx	r8
 801289c:	3001      	adds	r0, #1
 801289e:	d0e6      	beq.n	801286e <_printf_common+0xb2>
 80128a0:	f109 0901 	add.w	r9, r9, #1
 80128a4:	e7d8      	b.n	8012858 <_printf_common+0x9c>
	...

080128a8 <_printf_i>:
 80128a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80128b0:	460c      	mov	r4, r1
 80128b2:	7e09      	ldrb	r1, [r1, #24]
 80128b4:	b085      	sub	sp, #20
 80128b6:	296e      	cmp	r1, #110	; 0x6e
 80128b8:	4617      	mov	r7, r2
 80128ba:	4606      	mov	r6, r0
 80128bc:	4698      	mov	r8, r3
 80128be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128c0:	f000 80b3 	beq.w	8012a2a <_printf_i+0x182>
 80128c4:	d822      	bhi.n	801290c <_printf_i+0x64>
 80128c6:	2963      	cmp	r1, #99	; 0x63
 80128c8:	d036      	beq.n	8012938 <_printf_i+0x90>
 80128ca:	d80a      	bhi.n	80128e2 <_printf_i+0x3a>
 80128cc:	2900      	cmp	r1, #0
 80128ce:	f000 80b9 	beq.w	8012a44 <_printf_i+0x19c>
 80128d2:	2958      	cmp	r1, #88	; 0x58
 80128d4:	f000 8083 	beq.w	80129de <_printf_i+0x136>
 80128d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80128e0:	e032      	b.n	8012948 <_printf_i+0xa0>
 80128e2:	2964      	cmp	r1, #100	; 0x64
 80128e4:	d001      	beq.n	80128ea <_printf_i+0x42>
 80128e6:	2969      	cmp	r1, #105	; 0x69
 80128e8:	d1f6      	bne.n	80128d8 <_printf_i+0x30>
 80128ea:	6820      	ldr	r0, [r4, #0]
 80128ec:	6813      	ldr	r3, [r2, #0]
 80128ee:	0605      	lsls	r5, r0, #24
 80128f0:	f103 0104 	add.w	r1, r3, #4
 80128f4:	d52a      	bpl.n	801294c <_printf_i+0xa4>
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6011      	str	r1, [r2, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da03      	bge.n	8012906 <_printf_i+0x5e>
 80128fe:	222d      	movs	r2, #45	; 0x2d
 8012900:	425b      	negs	r3, r3
 8012902:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012906:	486f      	ldr	r0, [pc, #444]	; (8012ac4 <_printf_i+0x21c>)
 8012908:	220a      	movs	r2, #10
 801290a:	e039      	b.n	8012980 <_printf_i+0xd8>
 801290c:	2973      	cmp	r1, #115	; 0x73
 801290e:	f000 809d 	beq.w	8012a4c <_printf_i+0x1a4>
 8012912:	d808      	bhi.n	8012926 <_printf_i+0x7e>
 8012914:	296f      	cmp	r1, #111	; 0x6f
 8012916:	d020      	beq.n	801295a <_printf_i+0xb2>
 8012918:	2970      	cmp	r1, #112	; 0x70
 801291a:	d1dd      	bne.n	80128d8 <_printf_i+0x30>
 801291c:	6823      	ldr	r3, [r4, #0]
 801291e:	f043 0320 	orr.w	r3, r3, #32
 8012922:	6023      	str	r3, [r4, #0]
 8012924:	e003      	b.n	801292e <_printf_i+0x86>
 8012926:	2975      	cmp	r1, #117	; 0x75
 8012928:	d017      	beq.n	801295a <_printf_i+0xb2>
 801292a:	2978      	cmp	r1, #120	; 0x78
 801292c:	d1d4      	bne.n	80128d8 <_printf_i+0x30>
 801292e:	2378      	movs	r3, #120	; 0x78
 8012930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012934:	4864      	ldr	r0, [pc, #400]	; (8012ac8 <_printf_i+0x220>)
 8012936:	e055      	b.n	80129e4 <_printf_i+0x13c>
 8012938:	6813      	ldr	r3, [r2, #0]
 801293a:	1d19      	adds	r1, r3, #4
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6011      	str	r1, [r2, #0]
 8012940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012948:	2301      	movs	r3, #1
 801294a:	e08c      	b.n	8012a66 <_printf_i+0x1be>
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	6011      	str	r1, [r2, #0]
 8012950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012954:	bf18      	it	ne
 8012956:	b21b      	sxthne	r3, r3
 8012958:	e7cf      	b.n	80128fa <_printf_i+0x52>
 801295a:	6813      	ldr	r3, [r2, #0]
 801295c:	6825      	ldr	r5, [r4, #0]
 801295e:	1d18      	adds	r0, r3, #4
 8012960:	6010      	str	r0, [r2, #0]
 8012962:	0628      	lsls	r0, r5, #24
 8012964:	d501      	bpl.n	801296a <_printf_i+0xc2>
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	e002      	b.n	8012970 <_printf_i+0xc8>
 801296a:	0668      	lsls	r0, r5, #25
 801296c:	d5fb      	bpl.n	8012966 <_printf_i+0xbe>
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	4854      	ldr	r0, [pc, #336]	; (8012ac4 <_printf_i+0x21c>)
 8012972:	296f      	cmp	r1, #111	; 0x6f
 8012974:	bf14      	ite	ne
 8012976:	220a      	movne	r2, #10
 8012978:	2208      	moveq	r2, #8
 801297a:	2100      	movs	r1, #0
 801297c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012980:	6865      	ldr	r5, [r4, #4]
 8012982:	60a5      	str	r5, [r4, #8]
 8012984:	2d00      	cmp	r5, #0
 8012986:	f2c0 8095 	blt.w	8012ab4 <_printf_i+0x20c>
 801298a:	6821      	ldr	r1, [r4, #0]
 801298c:	f021 0104 	bic.w	r1, r1, #4
 8012990:	6021      	str	r1, [r4, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d13d      	bne.n	8012a12 <_printf_i+0x16a>
 8012996:	2d00      	cmp	r5, #0
 8012998:	f040 808e 	bne.w	8012ab8 <_printf_i+0x210>
 801299c:	4665      	mov	r5, ip
 801299e:	2a08      	cmp	r2, #8
 80129a0:	d10b      	bne.n	80129ba <_printf_i+0x112>
 80129a2:	6823      	ldr	r3, [r4, #0]
 80129a4:	07db      	lsls	r3, r3, #31
 80129a6:	d508      	bpl.n	80129ba <_printf_i+0x112>
 80129a8:	6923      	ldr	r3, [r4, #16]
 80129aa:	6862      	ldr	r2, [r4, #4]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	bfde      	ittt	le
 80129b0:	2330      	movle	r3, #48	; 0x30
 80129b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80129b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80129ba:	ebac 0305 	sub.w	r3, ip, r5
 80129be:	6123      	str	r3, [r4, #16]
 80129c0:	f8cd 8000 	str.w	r8, [sp]
 80129c4:	463b      	mov	r3, r7
 80129c6:	aa03      	add	r2, sp, #12
 80129c8:	4621      	mov	r1, r4
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ff fef6 	bl	80127bc <_printf_common>
 80129d0:	3001      	adds	r0, #1
 80129d2:	d14d      	bne.n	8012a70 <_printf_i+0x1c8>
 80129d4:	f04f 30ff 	mov.w	r0, #4294967295
 80129d8:	b005      	add	sp, #20
 80129da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129de:	4839      	ldr	r0, [pc, #228]	; (8012ac4 <_printf_i+0x21c>)
 80129e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80129e4:	6813      	ldr	r3, [r2, #0]
 80129e6:	6821      	ldr	r1, [r4, #0]
 80129e8:	1d1d      	adds	r5, r3, #4
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	6015      	str	r5, [r2, #0]
 80129ee:	060a      	lsls	r2, r1, #24
 80129f0:	d50b      	bpl.n	8012a0a <_printf_i+0x162>
 80129f2:	07ca      	lsls	r2, r1, #31
 80129f4:	bf44      	itt	mi
 80129f6:	f041 0120 	orrmi.w	r1, r1, #32
 80129fa:	6021      	strmi	r1, [r4, #0]
 80129fc:	b91b      	cbnz	r3, 8012a06 <_printf_i+0x15e>
 80129fe:	6822      	ldr	r2, [r4, #0]
 8012a00:	f022 0220 	bic.w	r2, r2, #32
 8012a04:	6022      	str	r2, [r4, #0]
 8012a06:	2210      	movs	r2, #16
 8012a08:	e7b7      	b.n	801297a <_printf_i+0xd2>
 8012a0a:	064d      	lsls	r5, r1, #25
 8012a0c:	bf48      	it	mi
 8012a0e:	b29b      	uxthmi	r3, r3
 8012a10:	e7ef      	b.n	80129f2 <_printf_i+0x14a>
 8012a12:	4665      	mov	r5, ip
 8012a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a18:	fb02 3311 	mls	r3, r2, r1, r3
 8012a1c:	5cc3      	ldrb	r3, [r0, r3]
 8012a1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012a22:	460b      	mov	r3, r1
 8012a24:	2900      	cmp	r1, #0
 8012a26:	d1f5      	bne.n	8012a14 <_printf_i+0x16c>
 8012a28:	e7b9      	b.n	801299e <_printf_i+0xf6>
 8012a2a:	6813      	ldr	r3, [r2, #0]
 8012a2c:	6825      	ldr	r5, [r4, #0]
 8012a2e:	6961      	ldr	r1, [r4, #20]
 8012a30:	1d18      	adds	r0, r3, #4
 8012a32:	6010      	str	r0, [r2, #0]
 8012a34:	0628      	lsls	r0, r5, #24
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	d501      	bpl.n	8012a3e <_printf_i+0x196>
 8012a3a:	6019      	str	r1, [r3, #0]
 8012a3c:	e002      	b.n	8012a44 <_printf_i+0x19c>
 8012a3e:	066a      	lsls	r2, r5, #25
 8012a40:	d5fb      	bpl.n	8012a3a <_printf_i+0x192>
 8012a42:	8019      	strh	r1, [r3, #0]
 8012a44:	2300      	movs	r3, #0
 8012a46:	6123      	str	r3, [r4, #16]
 8012a48:	4665      	mov	r5, ip
 8012a4a:	e7b9      	b.n	80129c0 <_printf_i+0x118>
 8012a4c:	6813      	ldr	r3, [r2, #0]
 8012a4e:	1d19      	adds	r1, r3, #4
 8012a50:	6011      	str	r1, [r2, #0]
 8012a52:	681d      	ldr	r5, [r3, #0]
 8012a54:	6862      	ldr	r2, [r4, #4]
 8012a56:	2100      	movs	r1, #0
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f7ed fbd9 	bl	8000210 <memchr>
 8012a5e:	b108      	cbz	r0, 8012a64 <_printf_i+0x1bc>
 8012a60:	1b40      	subs	r0, r0, r5
 8012a62:	6060      	str	r0, [r4, #4]
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	6123      	str	r3, [r4, #16]
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a6e:	e7a7      	b.n	80129c0 <_printf_i+0x118>
 8012a70:	6923      	ldr	r3, [r4, #16]
 8012a72:	462a      	mov	r2, r5
 8012a74:	4639      	mov	r1, r7
 8012a76:	4630      	mov	r0, r6
 8012a78:	47c0      	blx	r8
 8012a7a:	3001      	adds	r0, #1
 8012a7c:	d0aa      	beq.n	80129d4 <_printf_i+0x12c>
 8012a7e:	6823      	ldr	r3, [r4, #0]
 8012a80:	079b      	lsls	r3, r3, #30
 8012a82:	d413      	bmi.n	8012aac <_printf_i+0x204>
 8012a84:	68e0      	ldr	r0, [r4, #12]
 8012a86:	9b03      	ldr	r3, [sp, #12]
 8012a88:	4298      	cmp	r0, r3
 8012a8a:	bfb8      	it	lt
 8012a8c:	4618      	movlt	r0, r3
 8012a8e:	e7a3      	b.n	80129d8 <_printf_i+0x130>
 8012a90:	2301      	movs	r3, #1
 8012a92:	464a      	mov	r2, r9
 8012a94:	4639      	mov	r1, r7
 8012a96:	4630      	mov	r0, r6
 8012a98:	47c0      	blx	r8
 8012a9a:	3001      	adds	r0, #1
 8012a9c:	d09a      	beq.n	80129d4 <_printf_i+0x12c>
 8012a9e:	3501      	adds	r5, #1
 8012aa0:	68e3      	ldr	r3, [r4, #12]
 8012aa2:	9a03      	ldr	r2, [sp, #12]
 8012aa4:	1a9b      	subs	r3, r3, r2
 8012aa6:	42ab      	cmp	r3, r5
 8012aa8:	dcf2      	bgt.n	8012a90 <_printf_i+0x1e8>
 8012aaa:	e7eb      	b.n	8012a84 <_printf_i+0x1dc>
 8012aac:	2500      	movs	r5, #0
 8012aae:	f104 0919 	add.w	r9, r4, #25
 8012ab2:	e7f5      	b.n	8012aa0 <_printf_i+0x1f8>
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1ac      	bne.n	8012a12 <_printf_i+0x16a>
 8012ab8:	7803      	ldrb	r3, [r0, #0]
 8012aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012abe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ac2:	e76c      	b.n	801299e <_printf_i+0xf6>
 8012ac4:	0802242e 	.word	0x0802242e
 8012ac8:	0802243f 	.word	0x0802243f

08012acc <_sbrk_r>:
 8012acc:	b538      	push	{r3, r4, r5, lr}
 8012ace:	4c06      	ldr	r4, [pc, #24]	; (8012ae8 <_sbrk_r+0x1c>)
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	4605      	mov	r5, r0
 8012ad4:	4608      	mov	r0, r1
 8012ad6:	6023      	str	r3, [r4, #0]
 8012ad8:	f7ee fcca 	bl	8001470 <_sbrk>
 8012adc:	1c43      	adds	r3, r0, #1
 8012ade:	d102      	bne.n	8012ae6 <_sbrk_r+0x1a>
 8012ae0:	6823      	ldr	r3, [r4, #0]
 8012ae2:	b103      	cbz	r3, 8012ae6 <_sbrk_r+0x1a>
 8012ae4:	602b      	str	r3, [r5, #0]
 8012ae6:	bd38      	pop	{r3, r4, r5, pc}
 8012ae8:	2000af68 	.word	0x2000af68

08012aec <strcpy>:
 8012aec:	4603      	mov	r3, r0
 8012aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012af2:	f803 2b01 	strb.w	r2, [r3], #1
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	d1f9      	bne.n	8012aee <strcpy+0x2>
 8012afa:	4770      	bx	lr

08012afc <sulp>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	4604      	mov	r4, r0
 8012b00:	460d      	mov	r5, r1
 8012b02:	ec45 4b10 	vmov	d0, r4, r5
 8012b06:	4616      	mov	r6, r2
 8012b08:	f002 fbb4 	bl	8015274 <__ulp>
 8012b0c:	ec51 0b10 	vmov	r0, r1, d0
 8012b10:	b17e      	cbz	r6, 8012b32 <sulp+0x36>
 8012b12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	dd09      	ble.n	8012b32 <sulp+0x36>
 8012b1e:	051b      	lsls	r3, r3, #20
 8012b20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012b24:	2400      	movs	r4, #0
 8012b26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012b2a:	4622      	mov	r2, r4
 8012b2c:	462b      	mov	r3, r5
 8012b2e:	f7ed fd7b 	bl	8000628 <__aeabi_dmul>
 8012b32:	bd70      	pop	{r4, r5, r6, pc}
 8012b34:	0000      	movs	r0, r0
	...

08012b38 <_strtod_l>:
 8012b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3c:	461f      	mov	r7, r3
 8012b3e:	b0a1      	sub	sp, #132	; 0x84
 8012b40:	2300      	movs	r3, #0
 8012b42:	4681      	mov	r9, r0
 8012b44:	4638      	mov	r0, r7
 8012b46:	460e      	mov	r6, r1
 8012b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b4a:	931c      	str	r3, [sp, #112]	; 0x70
 8012b4c:	f002 f8a1 	bl	8014c92 <__localeconv_l>
 8012b50:	4680      	mov	r8, r0
 8012b52:	6800      	ldr	r0, [r0, #0]
 8012b54:	f7ed fb4e 	bl	80001f4 <strlen>
 8012b58:	f04f 0a00 	mov.w	sl, #0
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	f04f 0b00 	mov.w	fp, #0
 8012b62:	961b      	str	r6, [sp, #108]	; 0x6c
 8012b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012b66:	781a      	ldrb	r2, [r3, #0]
 8012b68:	2a0d      	cmp	r2, #13
 8012b6a:	d832      	bhi.n	8012bd2 <_strtod_l+0x9a>
 8012b6c:	2a09      	cmp	r2, #9
 8012b6e:	d236      	bcs.n	8012bde <_strtod_l+0xa6>
 8012b70:	2a00      	cmp	r2, #0
 8012b72:	d03e      	beq.n	8012bf2 <_strtod_l+0xba>
 8012b74:	2300      	movs	r3, #0
 8012b76:	930d      	str	r3, [sp, #52]	; 0x34
 8012b78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012b7a:	782b      	ldrb	r3, [r5, #0]
 8012b7c:	2b30      	cmp	r3, #48	; 0x30
 8012b7e:	f040 80ac 	bne.w	8012cda <_strtod_l+0x1a2>
 8012b82:	786b      	ldrb	r3, [r5, #1]
 8012b84:	2b58      	cmp	r3, #88	; 0x58
 8012b86:	d001      	beq.n	8012b8c <_strtod_l+0x54>
 8012b88:	2b78      	cmp	r3, #120	; 0x78
 8012b8a:	d167      	bne.n	8012c5c <_strtod_l+0x124>
 8012b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b8e:	9301      	str	r3, [sp, #4]
 8012b90:	ab1c      	add	r3, sp, #112	; 0x70
 8012b92:	9300      	str	r3, [sp, #0]
 8012b94:	9702      	str	r7, [sp, #8]
 8012b96:	ab1d      	add	r3, sp, #116	; 0x74
 8012b98:	4a88      	ldr	r2, [pc, #544]	; (8012dbc <_strtod_l+0x284>)
 8012b9a:	a91b      	add	r1, sp, #108	; 0x6c
 8012b9c:	4648      	mov	r0, r9
 8012b9e:	f001 fd9e 	bl	80146de <__gethex>
 8012ba2:	f010 0407 	ands.w	r4, r0, #7
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	d005      	beq.n	8012bb6 <_strtod_l+0x7e>
 8012baa:	2c06      	cmp	r4, #6
 8012bac:	d12b      	bne.n	8012c06 <_strtod_l+0xce>
 8012bae:	3501      	adds	r5, #1
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8012bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8012bb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f040 859a 	bne.w	80136f2 <_strtod_l+0xbba>
 8012bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bc0:	b1e3      	cbz	r3, 8012bfc <_strtod_l+0xc4>
 8012bc2:	4652      	mov	r2, sl
 8012bc4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012bc8:	ec43 2b10 	vmov	d0, r2, r3
 8012bcc:	b021      	add	sp, #132	; 0x84
 8012bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd2:	2a2b      	cmp	r2, #43	; 0x2b
 8012bd4:	d015      	beq.n	8012c02 <_strtod_l+0xca>
 8012bd6:	2a2d      	cmp	r2, #45	; 0x2d
 8012bd8:	d004      	beq.n	8012be4 <_strtod_l+0xac>
 8012bda:	2a20      	cmp	r2, #32
 8012bdc:	d1ca      	bne.n	8012b74 <_strtod_l+0x3c>
 8012bde:	3301      	adds	r3, #1
 8012be0:	931b      	str	r3, [sp, #108]	; 0x6c
 8012be2:	e7bf      	b.n	8012b64 <_strtod_l+0x2c>
 8012be4:	2201      	movs	r2, #1
 8012be6:	920d      	str	r2, [sp, #52]	; 0x34
 8012be8:	1c5a      	adds	r2, r3, #1
 8012bea:	921b      	str	r2, [sp, #108]	; 0x6c
 8012bec:	785b      	ldrb	r3, [r3, #1]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1c2      	bne.n	8012b78 <_strtod_l+0x40>
 8012bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012bf4:	961b      	str	r6, [sp, #108]	; 0x6c
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	f040 8579 	bne.w	80136ee <_strtod_l+0xbb6>
 8012bfc:	4652      	mov	r2, sl
 8012bfe:	465b      	mov	r3, fp
 8012c00:	e7e2      	b.n	8012bc8 <_strtod_l+0x90>
 8012c02:	2200      	movs	r2, #0
 8012c04:	e7ef      	b.n	8012be6 <_strtod_l+0xae>
 8012c06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012c08:	b13a      	cbz	r2, 8012c1a <_strtod_l+0xe2>
 8012c0a:	2135      	movs	r1, #53	; 0x35
 8012c0c:	a81e      	add	r0, sp, #120	; 0x78
 8012c0e:	f002 fc29 	bl	8015464 <__copybits>
 8012c12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012c14:	4648      	mov	r0, r9
 8012c16:	f002 f895 	bl	8014d44 <_Bfree>
 8012c1a:	3c01      	subs	r4, #1
 8012c1c:	2c04      	cmp	r4, #4
 8012c1e:	d806      	bhi.n	8012c2e <_strtod_l+0xf6>
 8012c20:	e8df f004 	tbb	[pc, r4]
 8012c24:	1714030a 	.word	0x1714030a
 8012c28:	0a          	.byte	0x0a
 8012c29:	00          	.byte	0x00
 8012c2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012c2e:	0730      	lsls	r0, r6, #28
 8012c30:	d5c1      	bpl.n	8012bb6 <_strtod_l+0x7e>
 8012c32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012c36:	e7be      	b.n	8012bb6 <_strtod_l+0x7e>
 8012c38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012c3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012c3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012c42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012c46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012c4a:	e7f0      	b.n	8012c2e <_strtod_l+0xf6>
 8012c4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012dc0 <_strtod_l+0x288>
 8012c50:	e7ed      	b.n	8012c2e <_strtod_l+0xf6>
 8012c52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012c56:	f04f 3aff 	mov.w	sl, #4294967295
 8012c5a:	e7e8      	b.n	8012c2e <_strtod_l+0xf6>
 8012c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c62:	785b      	ldrb	r3, [r3, #1]
 8012c64:	2b30      	cmp	r3, #48	; 0x30
 8012c66:	d0f9      	beq.n	8012c5c <_strtod_l+0x124>
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d0a4      	beq.n	8012bb6 <_strtod_l+0x7e>
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	2500      	movs	r5, #0
 8012c70:	9306      	str	r3, [sp, #24]
 8012c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c74:	9308      	str	r3, [sp, #32]
 8012c76:	9507      	str	r5, [sp, #28]
 8012c78:	9505      	str	r5, [sp, #20]
 8012c7a:	220a      	movs	r2, #10
 8012c7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012c7e:	7807      	ldrb	r7, [r0, #0]
 8012c80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012c84:	b2d9      	uxtb	r1, r3
 8012c86:	2909      	cmp	r1, #9
 8012c88:	d929      	bls.n	8012cde <_strtod_l+0x1a6>
 8012c8a:	4622      	mov	r2, r4
 8012c8c:	f8d8 1000 	ldr.w	r1, [r8]
 8012c90:	f002 fd8a 	bl	80157a8 <strncmp>
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d031      	beq.n	8012cfc <_strtod_l+0x1c4>
 8012c98:	2000      	movs	r0, #0
 8012c9a:	9c05      	ldr	r4, [sp, #20]
 8012c9c:	9004      	str	r0, [sp, #16]
 8012c9e:	463b      	mov	r3, r7
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	2b65      	cmp	r3, #101	; 0x65
 8012ca4:	d001      	beq.n	8012caa <_strtod_l+0x172>
 8012ca6:	2b45      	cmp	r3, #69	; 0x45
 8012ca8:	d114      	bne.n	8012cd4 <_strtod_l+0x19c>
 8012caa:	b924      	cbnz	r4, 8012cb6 <_strtod_l+0x17e>
 8012cac:	b910      	cbnz	r0, 8012cb4 <_strtod_l+0x17c>
 8012cae:	9b06      	ldr	r3, [sp, #24]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d09e      	beq.n	8012bf2 <_strtod_l+0xba>
 8012cb4:	2400      	movs	r4, #0
 8012cb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012cb8:	1c73      	adds	r3, r6, #1
 8012cba:	931b      	str	r3, [sp, #108]	; 0x6c
 8012cbc:	7873      	ldrb	r3, [r6, #1]
 8012cbe:	2b2b      	cmp	r3, #43	; 0x2b
 8012cc0:	d078      	beq.n	8012db4 <_strtod_l+0x27c>
 8012cc2:	2b2d      	cmp	r3, #45	; 0x2d
 8012cc4:	d070      	beq.n	8012da8 <_strtod_l+0x270>
 8012cc6:	f04f 0c00 	mov.w	ip, #0
 8012cca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012cce:	2f09      	cmp	r7, #9
 8012cd0:	d97c      	bls.n	8012dcc <_strtod_l+0x294>
 8012cd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8012cd4:	f04f 0e00 	mov.w	lr, #0
 8012cd8:	e09a      	b.n	8012e10 <_strtod_l+0x2d8>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	e7c7      	b.n	8012c6e <_strtod_l+0x136>
 8012cde:	9905      	ldr	r1, [sp, #20]
 8012ce0:	2908      	cmp	r1, #8
 8012ce2:	bfdd      	ittte	le
 8012ce4:	9907      	ldrle	r1, [sp, #28]
 8012ce6:	fb02 3301 	mlale	r3, r2, r1, r3
 8012cea:	9307      	strle	r3, [sp, #28]
 8012cec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012cf0:	9b05      	ldr	r3, [sp, #20]
 8012cf2:	3001      	adds	r0, #1
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	9305      	str	r3, [sp, #20]
 8012cf8:	901b      	str	r0, [sp, #108]	; 0x6c
 8012cfa:	e7bf      	b.n	8012c7c <_strtod_l+0x144>
 8012cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cfe:	191a      	adds	r2, r3, r4
 8012d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d02:	9a05      	ldr	r2, [sp, #20]
 8012d04:	5d1b      	ldrb	r3, [r3, r4]
 8012d06:	2a00      	cmp	r2, #0
 8012d08:	d037      	beq.n	8012d7a <_strtod_l+0x242>
 8012d0a:	9c05      	ldr	r4, [sp, #20]
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012d12:	2909      	cmp	r1, #9
 8012d14:	d913      	bls.n	8012d3e <_strtod_l+0x206>
 8012d16:	2101      	movs	r1, #1
 8012d18:	9104      	str	r1, [sp, #16]
 8012d1a:	e7c2      	b.n	8012ca2 <_strtod_l+0x16a>
 8012d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d1e:	1c5a      	adds	r2, r3, #1
 8012d20:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d22:	785b      	ldrb	r3, [r3, #1]
 8012d24:	3001      	adds	r0, #1
 8012d26:	2b30      	cmp	r3, #48	; 0x30
 8012d28:	d0f8      	beq.n	8012d1c <_strtod_l+0x1e4>
 8012d2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012d2e:	2a08      	cmp	r2, #8
 8012d30:	f200 84e4 	bhi.w	80136fc <_strtod_l+0xbc4>
 8012d34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012d36:	9208      	str	r2, [sp, #32]
 8012d38:	4602      	mov	r2, r0
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012d42:	f100 0101 	add.w	r1, r0, #1
 8012d46:	d012      	beq.n	8012d6e <_strtod_l+0x236>
 8012d48:	440a      	add	r2, r1
 8012d4a:	eb00 0c04 	add.w	ip, r0, r4
 8012d4e:	4621      	mov	r1, r4
 8012d50:	270a      	movs	r7, #10
 8012d52:	458c      	cmp	ip, r1
 8012d54:	d113      	bne.n	8012d7e <_strtod_l+0x246>
 8012d56:	1821      	adds	r1, r4, r0
 8012d58:	2908      	cmp	r1, #8
 8012d5a:	f104 0401 	add.w	r4, r4, #1
 8012d5e:	4404      	add	r4, r0
 8012d60:	dc19      	bgt.n	8012d96 <_strtod_l+0x25e>
 8012d62:	9b07      	ldr	r3, [sp, #28]
 8012d64:	210a      	movs	r1, #10
 8012d66:	fb01 e303 	mla	r3, r1, r3, lr
 8012d6a:	9307      	str	r3, [sp, #28]
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d70:	1c58      	adds	r0, r3, #1
 8012d72:	901b      	str	r0, [sp, #108]	; 0x6c
 8012d74:	785b      	ldrb	r3, [r3, #1]
 8012d76:	4608      	mov	r0, r1
 8012d78:	e7c9      	b.n	8012d0e <_strtod_l+0x1d6>
 8012d7a:	9805      	ldr	r0, [sp, #20]
 8012d7c:	e7d3      	b.n	8012d26 <_strtod_l+0x1ee>
 8012d7e:	2908      	cmp	r1, #8
 8012d80:	f101 0101 	add.w	r1, r1, #1
 8012d84:	dc03      	bgt.n	8012d8e <_strtod_l+0x256>
 8012d86:	9b07      	ldr	r3, [sp, #28]
 8012d88:	437b      	muls	r3, r7
 8012d8a:	9307      	str	r3, [sp, #28]
 8012d8c:	e7e1      	b.n	8012d52 <_strtod_l+0x21a>
 8012d8e:	2910      	cmp	r1, #16
 8012d90:	bfd8      	it	le
 8012d92:	437d      	mulle	r5, r7
 8012d94:	e7dd      	b.n	8012d52 <_strtod_l+0x21a>
 8012d96:	2c10      	cmp	r4, #16
 8012d98:	bfdc      	itt	le
 8012d9a:	210a      	movle	r1, #10
 8012d9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8012da0:	e7e4      	b.n	8012d6c <_strtod_l+0x234>
 8012da2:	2301      	movs	r3, #1
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	e781      	b.n	8012cac <_strtod_l+0x174>
 8012da8:	f04f 0c01 	mov.w	ip, #1
 8012dac:	1cb3      	adds	r3, r6, #2
 8012dae:	931b      	str	r3, [sp, #108]	; 0x6c
 8012db0:	78b3      	ldrb	r3, [r6, #2]
 8012db2:	e78a      	b.n	8012cca <_strtod_l+0x192>
 8012db4:	f04f 0c00 	mov.w	ip, #0
 8012db8:	e7f8      	b.n	8012dac <_strtod_l+0x274>
 8012dba:	bf00      	nop
 8012dbc:	08022450 	.word	0x08022450
 8012dc0:	7ff00000 	.word	0x7ff00000
 8012dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dc6:	1c5f      	adds	r7, r3, #1
 8012dc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8012dca:	785b      	ldrb	r3, [r3, #1]
 8012dcc:	2b30      	cmp	r3, #48	; 0x30
 8012dce:	d0f9      	beq.n	8012dc4 <_strtod_l+0x28c>
 8012dd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012dd4:	2f08      	cmp	r7, #8
 8012dd6:	f63f af7d 	bhi.w	8012cd4 <_strtod_l+0x19c>
 8012dda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012de0:	930a      	str	r3, [sp, #40]	; 0x28
 8012de2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012de4:	1c5f      	adds	r7, r3, #1
 8012de6:	971b      	str	r7, [sp, #108]	; 0x6c
 8012de8:	785b      	ldrb	r3, [r3, #1]
 8012dea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012dee:	f1b8 0f09 	cmp.w	r8, #9
 8012df2:	d937      	bls.n	8012e64 <_strtod_l+0x32c>
 8012df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012df6:	1a7f      	subs	r7, r7, r1
 8012df8:	2f08      	cmp	r7, #8
 8012dfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012dfe:	dc37      	bgt.n	8012e70 <_strtod_l+0x338>
 8012e00:	45be      	cmp	lr, r7
 8012e02:	bfa8      	it	ge
 8012e04:	46be      	movge	lr, r7
 8012e06:	f1bc 0f00 	cmp.w	ip, #0
 8012e0a:	d001      	beq.n	8012e10 <_strtod_l+0x2d8>
 8012e0c:	f1ce 0e00 	rsb	lr, lr, #0
 8012e10:	2c00      	cmp	r4, #0
 8012e12:	d151      	bne.n	8012eb8 <_strtod_l+0x380>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	f47f aece 	bne.w	8012bb6 <_strtod_l+0x7e>
 8012e1a:	9a06      	ldr	r2, [sp, #24]
 8012e1c:	2a00      	cmp	r2, #0
 8012e1e:	f47f aeca 	bne.w	8012bb6 <_strtod_l+0x7e>
 8012e22:	9a04      	ldr	r2, [sp, #16]
 8012e24:	2a00      	cmp	r2, #0
 8012e26:	f47f aee4 	bne.w	8012bf2 <_strtod_l+0xba>
 8012e2a:	2b4e      	cmp	r3, #78	; 0x4e
 8012e2c:	d027      	beq.n	8012e7e <_strtod_l+0x346>
 8012e2e:	dc21      	bgt.n	8012e74 <_strtod_l+0x33c>
 8012e30:	2b49      	cmp	r3, #73	; 0x49
 8012e32:	f47f aede 	bne.w	8012bf2 <_strtod_l+0xba>
 8012e36:	49a0      	ldr	r1, [pc, #640]	; (80130b8 <_strtod_l+0x580>)
 8012e38:	a81b      	add	r0, sp, #108	; 0x6c
 8012e3a:	f001 fe83 	bl	8014b44 <__match>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	f43f aed7 	beq.w	8012bf2 <_strtod_l+0xba>
 8012e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e46:	499d      	ldr	r1, [pc, #628]	; (80130bc <_strtod_l+0x584>)
 8012e48:	3b01      	subs	r3, #1
 8012e4a:	a81b      	add	r0, sp, #108	; 0x6c
 8012e4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e4e:	f001 fe79 	bl	8014b44 <__match>
 8012e52:	b910      	cbnz	r0, 8012e5a <_strtod_l+0x322>
 8012e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e56:	3301      	adds	r3, #1
 8012e58:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80130d0 <_strtod_l+0x598>
 8012e5e:	f04f 0a00 	mov.w	sl, #0
 8012e62:	e6a8      	b.n	8012bb6 <_strtod_l+0x7e>
 8012e64:	210a      	movs	r1, #10
 8012e66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012e6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012e6e:	e7b8      	b.n	8012de2 <_strtod_l+0x2aa>
 8012e70:	46be      	mov	lr, r7
 8012e72:	e7c8      	b.n	8012e06 <_strtod_l+0x2ce>
 8012e74:	2b69      	cmp	r3, #105	; 0x69
 8012e76:	d0de      	beq.n	8012e36 <_strtod_l+0x2fe>
 8012e78:	2b6e      	cmp	r3, #110	; 0x6e
 8012e7a:	f47f aeba 	bne.w	8012bf2 <_strtod_l+0xba>
 8012e7e:	4990      	ldr	r1, [pc, #576]	; (80130c0 <_strtod_l+0x588>)
 8012e80:	a81b      	add	r0, sp, #108	; 0x6c
 8012e82:	f001 fe5f 	bl	8014b44 <__match>
 8012e86:	2800      	cmp	r0, #0
 8012e88:	f43f aeb3 	beq.w	8012bf2 <_strtod_l+0xba>
 8012e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	2b28      	cmp	r3, #40	; 0x28
 8012e92:	d10e      	bne.n	8012eb2 <_strtod_l+0x37a>
 8012e94:	aa1e      	add	r2, sp, #120	; 0x78
 8012e96:	498b      	ldr	r1, [pc, #556]	; (80130c4 <_strtod_l+0x58c>)
 8012e98:	a81b      	add	r0, sp, #108	; 0x6c
 8012e9a:	f001 fe67 	bl	8014b6c <__hexnan>
 8012e9e:	2805      	cmp	r0, #5
 8012ea0:	d107      	bne.n	8012eb2 <_strtod_l+0x37a>
 8012ea2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ea4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012ea8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012eac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012eb0:	e681      	b.n	8012bb6 <_strtod_l+0x7e>
 8012eb2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80130d8 <_strtod_l+0x5a0>
 8012eb6:	e7d2      	b.n	8012e5e <_strtod_l+0x326>
 8012eb8:	ebae 0302 	sub.w	r3, lr, r2
 8012ebc:	9306      	str	r3, [sp, #24]
 8012ebe:	9b05      	ldr	r3, [sp, #20]
 8012ec0:	9807      	ldr	r0, [sp, #28]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	bf08      	it	eq
 8012ec6:	4623      	moveq	r3, r4
 8012ec8:	2c10      	cmp	r4, #16
 8012eca:	9305      	str	r3, [sp, #20]
 8012ecc:	46a0      	mov	r8, r4
 8012ece:	bfa8      	it	ge
 8012ed0:	f04f 0810 	movge.w	r8, #16
 8012ed4:	f7ed fb2e 	bl	8000534 <__aeabi_ui2d>
 8012ed8:	2c09      	cmp	r4, #9
 8012eda:	4682      	mov	sl, r0
 8012edc:	468b      	mov	fp, r1
 8012ede:	dc13      	bgt.n	8012f08 <_strtod_l+0x3d0>
 8012ee0:	9b06      	ldr	r3, [sp, #24]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	f43f ae67 	beq.w	8012bb6 <_strtod_l+0x7e>
 8012ee8:	9b06      	ldr	r3, [sp, #24]
 8012eea:	dd7a      	ble.n	8012fe2 <_strtod_l+0x4aa>
 8012eec:	2b16      	cmp	r3, #22
 8012eee:	dc61      	bgt.n	8012fb4 <_strtod_l+0x47c>
 8012ef0:	4a75      	ldr	r2, [pc, #468]	; (80130c8 <_strtod_l+0x590>)
 8012ef2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012ef6:	e9de 0100 	ldrd	r0, r1, [lr]
 8012efa:	4652      	mov	r2, sl
 8012efc:	465b      	mov	r3, fp
 8012efe:	f7ed fb93 	bl	8000628 <__aeabi_dmul>
 8012f02:	4682      	mov	sl, r0
 8012f04:	468b      	mov	fp, r1
 8012f06:	e656      	b.n	8012bb6 <_strtod_l+0x7e>
 8012f08:	4b6f      	ldr	r3, [pc, #444]	; (80130c8 <_strtod_l+0x590>)
 8012f0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012f0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012f12:	f7ed fb89 	bl	8000628 <__aeabi_dmul>
 8012f16:	4606      	mov	r6, r0
 8012f18:	4628      	mov	r0, r5
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	f7ed fb0a 	bl	8000534 <__aeabi_ui2d>
 8012f20:	4602      	mov	r2, r0
 8012f22:	460b      	mov	r3, r1
 8012f24:	4630      	mov	r0, r6
 8012f26:	4639      	mov	r1, r7
 8012f28:	f7ed f9c8 	bl	80002bc <__adddf3>
 8012f2c:	2c0f      	cmp	r4, #15
 8012f2e:	4682      	mov	sl, r0
 8012f30:	468b      	mov	fp, r1
 8012f32:	ddd5      	ble.n	8012ee0 <_strtod_l+0x3a8>
 8012f34:	9b06      	ldr	r3, [sp, #24]
 8012f36:	eba4 0808 	sub.w	r8, r4, r8
 8012f3a:	4498      	add	r8, r3
 8012f3c:	f1b8 0f00 	cmp.w	r8, #0
 8012f40:	f340 8096 	ble.w	8013070 <_strtod_l+0x538>
 8012f44:	f018 030f 	ands.w	r3, r8, #15
 8012f48:	d00a      	beq.n	8012f60 <_strtod_l+0x428>
 8012f4a:	495f      	ldr	r1, [pc, #380]	; (80130c8 <_strtod_l+0x590>)
 8012f4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012f50:	4652      	mov	r2, sl
 8012f52:	465b      	mov	r3, fp
 8012f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f58:	f7ed fb66 	bl	8000628 <__aeabi_dmul>
 8012f5c:	4682      	mov	sl, r0
 8012f5e:	468b      	mov	fp, r1
 8012f60:	f038 080f 	bics.w	r8, r8, #15
 8012f64:	d073      	beq.n	801304e <_strtod_l+0x516>
 8012f66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012f6a:	dd47      	ble.n	8012ffc <_strtod_l+0x4c4>
 8012f6c:	2400      	movs	r4, #0
 8012f6e:	46a0      	mov	r8, r4
 8012f70:	9407      	str	r4, [sp, #28]
 8012f72:	9405      	str	r4, [sp, #20]
 8012f74:	2322      	movs	r3, #34	; 0x22
 8012f76:	f8df b158 	ldr.w	fp, [pc, #344]	; 80130d0 <_strtod_l+0x598>
 8012f7a:	f8c9 3000 	str.w	r3, [r9]
 8012f7e:	f04f 0a00 	mov.w	sl, #0
 8012f82:	9b07      	ldr	r3, [sp, #28]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f43f ae16 	beq.w	8012bb6 <_strtod_l+0x7e>
 8012f8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012f8c:	4648      	mov	r0, r9
 8012f8e:	f001 fed9 	bl	8014d44 <_Bfree>
 8012f92:	9905      	ldr	r1, [sp, #20]
 8012f94:	4648      	mov	r0, r9
 8012f96:	f001 fed5 	bl	8014d44 <_Bfree>
 8012f9a:	4641      	mov	r1, r8
 8012f9c:	4648      	mov	r0, r9
 8012f9e:	f001 fed1 	bl	8014d44 <_Bfree>
 8012fa2:	9907      	ldr	r1, [sp, #28]
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	f001 fecd 	bl	8014d44 <_Bfree>
 8012faa:	4621      	mov	r1, r4
 8012fac:	4648      	mov	r0, r9
 8012fae:	f001 fec9 	bl	8014d44 <_Bfree>
 8012fb2:	e600      	b.n	8012bb6 <_strtod_l+0x7e>
 8012fb4:	9a06      	ldr	r2, [sp, #24]
 8012fb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	dbba      	blt.n	8012f34 <_strtod_l+0x3fc>
 8012fbe:	4d42      	ldr	r5, [pc, #264]	; (80130c8 <_strtod_l+0x590>)
 8012fc0:	f1c4 040f 	rsb	r4, r4, #15
 8012fc4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012fc8:	4652      	mov	r2, sl
 8012fca:	465b      	mov	r3, fp
 8012fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd0:	f7ed fb2a 	bl	8000628 <__aeabi_dmul>
 8012fd4:	9b06      	ldr	r3, [sp, #24]
 8012fd6:	1b1c      	subs	r4, r3, r4
 8012fd8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012fdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012fe0:	e78d      	b.n	8012efe <_strtod_l+0x3c6>
 8012fe2:	f113 0f16 	cmn.w	r3, #22
 8012fe6:	dba5      	blt.n	8012f34 <_strtod_l+0x3fc>
 8012fe8:	4a37      	ldr	r2, [pc, #220]	; (80130c8 <_strtod_l+0x590>)
 8012fea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012fee:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012ff2:	4650      	mov	r0, sl
 8012ff4:	4659      	mov	r1, fp
 8012ff6:	f7ed fc41 	bl	800087c <__aeabi_ddiv>
 8012ffa:	e782      	b.n	8012f02 <_strtod_l+0x3ca>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	4e33      	ldr	r6, [pc, #204]	; (80130cc <_strtod_l+0x594>)
 8013000:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013004:	4650      	mov	r0, sl
 8013006:	4659      	mov	r1, fp
 8013008:	461d      	mov	r5, r3
 801300a:	f1b8 0f01 	cmp.w	r8, #1
 801300e:	dc21      	bgt.n	8013054 <_strtod_l+0x51c>
 8013010:	b10b      	cbz	r3, 8013016 <_strtod_l+0x4de>
 8013012:	4682      	mov	sl, r0
 8013014:	468b      	mov	fp, r1
 8013016:	4b2d      	ldr	r3, [pc, #180]	; (80130cc <_strtod_l+0x594>)
 8013018:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801301c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013020:	4652      	mov	r2, sl
 8013022:	465b      	mov	r3, fp
 8013024:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013028:	f7ed fafe 	bl	8000628 <__aeabi_dmul>
 801302c:	4b28      	ldr	r3, [pc, #160]	; (80130d0 <_strtod_l+0x598>)
 801302e:	460a      	mov	r2, r1
 8013030:	400b      	ands	r3, r1
 8013032:	4928      	ldr	r1, [pc, #160]	; (80130d4 <_strtod_l+0x59c>)
 8013034:	428b      	cmp	r3, r1
 8013036:	4682      	mov	sl, r0
 8013038:	d898      	bhi.n	8012f6c <_strtod_l+0x434>
 801303a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801303e:	428b      	cmp	r3, r1
 8013040:	bf86      	itte	hi
 8013042:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80130dc <_strtod_l+0x5a4>
 8013046:	f04f 3aff 	movhi.w	sl, #4294967295
 801304a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801304e:	2300      	movs	r3, #0
 8013050:	9304      	str	r3, [sp, #16]
 8013052:	e077      	b.n	8013144 <_strtod_l+0x60c>
 8013054:	f018 0f01 	tst.w	r8, #1
 8013058:	d006      	beq.n	8013068 <_strtod_l+0x530>
 801305a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	f7ed fae1 	bl	8000628 <__aeabi_dmul>
 8013066:	2301      	movs	r3, #1
 8013068:	3501      	adds	r5, #1
 801306a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801306e:	e7cc      	b.n	801300a <_strtod_l+0x4d2>
 8013070:	d0ed      	beq.n	801304e <_strtod_l+0x516>
 8013072:	f1c8 0800 	rsb	r8, r8, #0
 8013076:	f018 020f 	ands.w	r2, r8, #15
 801307a:	d00a      	beq.n	8013092 <_strtod_l+0x55a>
 801307c:	4b12      	ldr	r3, [pc, #72]	; (80130c8 <_strtod_l+0x590>)
 801307e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013082:	4650      	mov	r0, sl
 8013084:	4659      	mov	r1, fp
 8013086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308a:	f7ed fbf7 	bl	800087c <__aeabi_ddiv>
 801308e:	4682      	mov	sl, r0
 8013090:	468b      	mov	fp, r1
 8013092:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013096:	d0da      	beq.n	801304e <_strtod_l+0x516>
 8013098:	f1b8 0f1f 	cmp.w	r8, #31
 801309c:	dd20      	ble.n	80130e0 <_strtod_l+0x5a8>
 801309e:	2400      	movs	r4, #0
 80130a0:	46a0      	mov	r8, r4
 80130a2:	9407      	str	r4, [sp, #28]
 80130a4:	9405      	str	r4, [sp, #20]
 80130a6:	2322      	movs	r3, #34	; 0x22
 80130a8:	f04f 0a00 	mov.w	sl, #0
 80130ac:	f04f 0b00 	mov.w	fp, #0
 80130b0:	f8c9 3000 	str.w	r3, [r9]
 80130b4:	e765      	b.n	8012f82 <_strtod_l+0x44a>
 80130b6:	bf00      	nop
 80130b8:	08022421 	.word	0x08022421
 80130bc:	080224a3 	.word	0x080224a3
 80130c0:	08022429 	.word	0x08022429
 80130c4:	08022464 	.word	0x08022464
 80130c8:	08022548 	.word	0x08022548
 80130cc:	08022520 	.word	0x08022520
 80130d0:	7ff00000 	.word	0x7ff00000
 80130d4:	7ca00000 	.word	0x7ca00000
 80130d8:	fff80000 	.word	0xfff80000
 80130dc:	7fefffff 	.word	0x7fefffff
 80130e0:	f018 0310 	ands.w	r3, r8, #16
 80130e4:	bf18      	it	ne
 80130e6:	236a      	movne	r3, #106	; 0x6a
 80130e8:	4da0      	ldr	r5, [pc, #640]	; (801336c <_strtod_l+0x834>)
 80130ea:	9304      	str	r3, [sp, #16]
 80130ec:	4650      	mov	r0, sl
 80130ee:	4659      	mov	r1, fp
 80130f0:	2300      	movs	r3, #0
 80130f2:	f1b8 0f00 	cmp.w	r8, #0
 80130f6:	f300 810a 	bgt.w	801330e <_strtod_l+0x7d6>
 80130fa:	b10b      	cbz	r3, 8013100 <_strtod_l+0x5c8>
 80130fc:	4682      	mov	sl, r0
 80130fe:	468b      	mov	fp, r1
 8013100:	9b04      	ldr	r3, [sp, #16]
 8013102:	b1bb      	cbz	r3, 8013134 <_strtod_l+0x5fc>
 8013104:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013108:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801310c:	2b00      	cmp	r3, #0
 801310e:	4659      	mov	r1, fp
 8013110:	dd10      	ble.n	8013134 <_strtod_l+0x5fc>
 8013112:	2b1f      	cmp	r3, #31
 8013114:	f340 8107 	ble.w	8013326 <_strtod_l+0x7ee>
 8013118:	2b34      	cmp	r3, #52	; 0x34
 801311a:	bfde      	ittt	le
 801311c:	3b20      	suble	r3, #32
 801311e:	f04f 32ff 	movle.w	r2, #4294967295
 8013122:	fa02 f303 	lslle.w	r3, r2, r3
 8013126:	f04f 0a00 	mov.w	sl, #0
 801312a:	bfcc      	ite	gt
 801312c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013130:	ea03 0b01 	andle.w	fp, r3, r1
 8013134:	2200      	movs	r2, #0
 8013136:	2300      	movs	r3, #0
 8013138:	4650      	mov	r0, sl
 801313a:	4659      	mov	r1, fp
 801313c:	f7ed fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8013140:	2800      	cmp	r0, #0
 8013142:	d1ac      	bne.n	801309e <_strtod_l+0x566>
 8013144:	9b07      	ldr	r3, [sp, #28]
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	9a05      	ldr	r2, [sp, #20]
 801314a:	9908      	ldr	r1, [sp, #32]
 801314c:	4623      	mov	r3, r4
 801314e:	4648      	mov	r0, r9
 8013150:	f001 fe4a 	bl	8014de8 <__s2b>
 8013154:	9007      	str	r0, [sp, #28]
 8013156:	2800      	cmp	r0, #0
 8013158:	f43f af08 	beq.w	8012f6c <_strtod_l+0x434>
 801315c:	9a06      	ldr	r2, [sp, #24]
 801315e:	9b06      	ldr	r3, [sp, #24]
 8013160:	2a00      	cmp	r2, #0
 8013162:	f1c3 0300 	rsb	r3, r3, #0
 8013166:	bfa8      	it	ge
 8013168:	2300      	movge	r3, #0
 801316a:	930e      	str	r3, [sp, #56]	; 0x38
 801316c:	2400      	movs	r4, #0
 801316e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013172:	9316      	str	r3, [sp, #88]	; 0x58
 8013174:	46a0      	mov	r8, r4
 8013176:	9b07      	ldr	r3, [sp, #28]
 8013178:	4648      	mov	r0, r9
 801317a:	6859      	ldr	r1, [r3, #4]
 801317c:	f001 fdae 	bl	8014cdc <_Balloc>
 8013180:	9005      	str	r0, [sp, #20]
 8013182:	2800      	cmp	r0, #0
 8013184:	f43f aef6 	beq.w	8012f74 <_strtod_l+0x43c>
 8013188:	9b07      	ldr	r3, [sp, #28]
 801318a:	691a      	ldr	r2, [r3, #16]
 801318c:	3202      	adds	r2, #2
 801318e:	f103 010c 	add.w	r1, r3, #12
 8013192:	0092      	lsls	r2, r2, #2
 8013194:	300c      	adds	r0, #12
 8013196:	f7fe ff81 	bl	801209c <memcpy>
 801319a:	aa1e      	add	r2, sp, #120	; 0x78
 801319c:	a91d      	add	r1, sp, #116	; 0x74
 801319e:	ec4b ab10 	vmov	d0, sl, fp
 80131a2:	4648      	mov	r0, r9
 80131a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80131a8:	f002 f8da 	bl	8015360 <__d2b>
 80131ac:	901c      	str	r0, [sp, #112]	; 0x70
 80131ae:	2800      	cmp	r0, #0
 80131b0:	f43f aee0 	beq.w	8012f74 <_strtod_l+0x43c>
 80131b4:	2101      	movs	r1, #1
 80131b6:	4648      	mov	r0, r9
 80131b8:	f001 fea2 	bl	8014f00 <__i2b>
 80131bc:	4680      	mov	r8, r0
 80131be:	2800      	cmp	r0, #0
 80131c0:	f43f aed8 	beq.w	8012f74 <_strtod_l+0x43c>
 80131c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80131c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80131c8:	2e00      	cmp	r6, #0
 80131ca:	bfab      	itete	ge
 80131cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80131ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80131d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80131d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80131d4:	bfac      	ite	ge
 80131d6:	18f7      	addge	r7, r6, r3
 80131d8:	1b9d      	sublt	r5, r3, r6
 80131da:	9b04      	ldr	r3, [sp, #16]
 80131dc:	1af6      	subs	r6, r6, r3
 80131de:	4416      	add	r6, r2
 80131e0:	4b63      	ldr	r3, [pc, #396]	; (8013370 <_strtod_l+0x838>)
 80131e2:	3e01      	subs	r6, #1
 80131e4:	429e      	cmp	r6, r3
 80131e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80131ea:	f280 80af 	bge.w	801334c <_strtod_l+0x814>
 80131ee:	1b9b      	subs	r3, r3, r6
 80131f0:	2b1f      	cmp	r3, #31
 80131f2:	eba2 0203 	sub.w	r2, r2, r3
 80131f6:	f04f 0101 	mov.w	r1, #1
 80131fa:	f300 809b 	bgt.w	8013334 <_strtod_l+0x7fc>
 80131fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013202:	930f      	str	r3, [sp, #60]	; 0x3c
 8013204:	2300      	movs	r3, #0
 8013206:	930a      	str	r3, [sp, #40]	; 0x28
 8013208:	18be      	adds	r6, r7, r2
 801320a:	9b04      	ldr	r3, [sp, #16]
 801320c:	42b7      	cmp	r7, r6
 801320e:	4415      	add	r5, r2
 8013210:	441d      	add	r5, r3
 8013212:	463b      	mov	r3, r7
 8013214:	bfa8      	it	ge
 8013216:	4633      	movge	r3, r6
 8013218:	42ab      	cmp	r3, r5
 801321a:	bfa8      	it	ge
 801321c:	462b      	movge	r3, r5
 801321e:	2b00      	cmp	r3, #0
 8013220:	bfc2      	ittt	gt
 8013222:	1af6      	subgt	r6, r6, r3
 8013224:	1aed      	subgt	r5, r5, r3
 8013226:	1aff      	subgt	r7, r7, r3
 8013228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801322a:	b1bb      	cbz	r3, 801325c <_strtod_l+0x724>
 801322c:	4641      	mov	r1, r8
 801322e:	461a      	mov	r2, r3
 8013230:	4648      	mov	r0, r9
 8013232:	f001 ff05 	bl	8015040 <__pow5mult>
 8013236:	4680      	mov	r8, r0
 8013238:	2800      	cmp	r0, #0
 801323a:	f43f ae9b 	beq.w	8012f74 <_strtod_l+0x43c>
 801323e:	4601      	mov	r1, r0
 8013240:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013242:	4648      	mov	r0, r9
 8013244:	f001 fe65 	bl	8014f12 <__multiply>
 8013248:	900c      	str	r0, [sp, #48]	; 0x30
 801324a:	2800      	cmp	r0, #0
 801324c:	f43f ae92 	beq.w	8012f74 <_strtod_l+0x43c>
 8013250:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013252:	4648      	mov	r0, r9
 8013254:	f001 fd76 	bl	8014d44 <_Bfree>
 8013258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801325a:	931c      	str	r3, [sp, #112]	; 0x70
 801325c:	2e00      	cmp	r6, #0
 801325e:	dc7a      	bgt.n	8013356 <_strtod_l+0x81e>
 8013260:	9b06      	ldr	r3, [sp, #24]
 8013262:	2b00      	cmp	r3, #0
 8013264:	dd08      	ble.n	8013278 <_strtod_l+0x740>
 8013266:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013268:	9905      	ldr	r1, [sp, #20]
 801326a:	4648      	mov	r0, r9
 801326c:	f001 fee8 	bl	8015040 <__pow5mult>
 8013270:	9005      	str	r0, [sp, #20]
 8013272:	2800      	cmp	r0, #0
 8013274:	f43f ae7e 	beq.w	8012f74 <_strtod_l+0x43c>
 8013278:	2d00      	cmp	r5, #0
 801327a:	dd08      	ble.n	801328e <_strtod_l+0x756>
 801327c:	462a      	mov	r2, r5
 801327e:	9905      	ldr	r1, [sp, #20]
 8013280:	4648      	mov	r0, r9
 8013282:	f001 ff2b 	bl	80150dc <__lshift>
 8013286:	9005      	str	r0, [sp, #20]
 8013288:	2800      	cmp	r0, #0
 801328a:	f43f ae73 	beq.w	8012f74 <_strtod_l+0x43c>
 801328e:	2f00      	cmp	r7, #0
 8013290:	dd08      	ble.n	80132a4 <_strtod_l+0x76c>
 8013292:	4641      	mov	r1, r8
 8013294:	463a      	mov	r2, r7
 8013296:	4648      	mov	r0, r9
 8013298:	f001 ff20 	bl	80150dc <__lshift>
 801329c:	4680      	mov	r8, r0
 801329e:	2800      	cmp	r0, #0
 80132a0:	f43f ae68 	beq.w	8012f74 <_strtod_l+0x43c>
 80132a4:	9a05      	ldr	r2, [sp, #20]
 80132a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132a8:	4648      	mov	r0, r9
 80132aa:	f001 ff85 	bl	80151b8 <__mdiff>
 80132ae:	4604      	mov	r4, r0
 80132b0:	2800      	cmp	r0, #0
 80132b2:	f43f ae5f 	beq.w	8012f74 <_strtod_l+0x43c>
 80132b6:	68c3      	ldr	r3, [r0, #12]
 80132b8:	930c      	str	r3, [sp, #48]	; 0x30
 80132ba:	2300      	movs	r3, #0
 80132bc:	60c3      	str	r3, [r0, #12]
 80132be:	4641      	mov	r1, r8
 80132c0:	f001 ff60 	bl	8015184 <__mcmp>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	da55      	bge.n	8013374 <_strtod_l+0x83c>
 80132c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132ca:	b9e3      	cbnz	r3, 8013306 <_strtod_l+0x7ce>
 80132cc:	f1ba 0f00 	cmp.w	sl, #0
 80132d0:	d119      	bne.n	8013306 <_strtod_l+0x7ce>
 80132d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132d6:	b9b3      	cbnz	r3, 8013306 <_strtod_l+0x7ce>
 80132d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80132dc:	0d1b      	lsrs	r3, r3, #20
 80132de:	051b      	lsls	r3, r3, #20
 80132e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80132e4:	d90f      	bls.n	8013306 <_strtod_l+0x7ce>
 80132e6:	6963      	ldr	r3, [r4, #20]
 80132e8:	b913      	cbnz	r3, 80132f0 <_strtod_l+0x7b8>
 80132ea:	6923      	ldr	r3, [r4, #16]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	dd0a      	ble.n	8013306 <_strtod_l+0x7ce>
 80132f0:	4621      	mov	r1, r4
 80132f2:	2201      	movs	r2, #1
 80132f4:	4648      	mov	r0, r9
 80132f6:	f001 fef1 	bl	80150dc <__lshift>
 80132fa:	4641      	mov	r1, r8
 80132fc:	4604      	mov	r4, r0
 80132fe:	f001 ff41 	bl	8015184 <__mcmp>
 8013302:	2800      	cmp	r0, #0
 8013304:	dc67      	bgt.n	80133d6 <_strtod_l+0x89e>
 8013306:	9b04      	ldr	r3, [sp, #16]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d171      	bne.n	80133f0 <_strtod_l+0x8b8>
 801330c:	e63d      	b.n	8012f8a <_strtod_l+0x452>
 801330e:	f018 0f01 	tst.w	r8, #1
 8013312:	d004      	beq.n	801331e <_strtod_l+0x7e6>
 8013314:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013318:	f7ed f986 	bl	8000628 <__aeabi_dmul>
 801331c:	2301      	movs	r3, #1
 801331e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013322:	3508      	adds	r5, #8
 8013324:	e6e5      	b.n	80130f2 <_strtod_l+0x5ba>
 8013326:	f04f 32ff 	mov.w	r2, #4294967295
 801332a:	fa02 f303 	lsl.w	r3, r2, r3
 801332e:	ea03 0a0a 	and.w	sl, r3, sl
 8013332:	e6ff      	b.n	8013134 <_strtod_l+0x5fc>
 8013334:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013338:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801333c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013340:	36e2      	adds	r6, #226	; 0xe2
 8013342:	fa01 f306 	lsl.w	r3, r1, r6
 8013346:	930a      	str	r3, [sp, #40]	; 0x28
 8013348:	910f      	str	r1, [sp, #60]	; 0x3c
 801334a:	e75d      	b.n	8013208 <_strtod_l+0x6d0>
 801334c:	2300      	movs	r3, #0
 801334e:	930a      	str	r3, [sp, #40]	; 0x28
 8013350:	2301      	movs	r3, #1
 8013352:	930f      	str	r3, [sp, #60]	; 0x3c
 8013354:	e758      	b.n	8013208 <_strtod_l+0x6d0>
 8013356:	4632      	mov	r2, r6
 8013358:	991c      	ldr	r1, [sp, #112]	; 0x70
 801335a:	4648      	mov	r0, r9
 801335c:	f001 febe 	bl	80150dc <__lshift>
 8013360:	901c      	str	r0, [sp, #112]	; 0x70
 8013362:	2800      	cmp	r0, #0
 8013364:	f47f af7c 	bne.w	8013260 <_strtod_l+0x728>
 8013368:	e604      	b.n	8012f74 <_strtod_l+0x43c>
 801336a:	bf00      	nop
 801336c:	08022478 	.word	0x08022478
 8013370:	fffffc02 	.word	0xfffffc02
 8013374:	465d      	mov	r5, fp
 8013376:	f040 8086 	bne.w	8013486 <_strtod_l+0x94e>
 801337a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801337c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013380:	b32a      	cbz	r2, 80133ce <_strtod_l+0x896>
 8013382:	4aaf      	ldr	r2, [pc, #700]	; (8013640 <_strtod_l+0xb08>)
 8013384:	4293      	cmp	r3, r2
 8013386:	d153      	bne.n	8013430 <_strtod_l+0x8f8>
 8013388:	9b04      	ldr	r3, [sp, #16]
 801338a:	4650      	mov	r0, sl
 801338c:	b1d3      	cbz	r3, 80133c4 <_strtod_l+0x88c>
 801338e:	4aad      	ldr	r2, [pc, #692]	; (8013644 <_strtod_l+0xb0c>)
 8013390:	402a      	ands	r2, r5
 8013392:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013396:	f04f 31ff 	mov.w	r1, #4294967295
 801339a:	d816      	bhi.n	80133ca <_strtod_l+0x892>
 801339c:	0d12      	lsrs	r2, r2, #20
 801339e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80133a2:	fa01 f303 	lsl.w	r3, r1, r3
 80133a6:	4298      	cmp	r0, r3
 80133a8:	d142      	bne.n	8013430 <_strtod_l+0x8f8>
 80133aa:	4ba7      	ldr	r3, [pc, #668]	; (8013648 <_strtod_l+0xb10>)
 80133ac:	429d      	cmp	r5, r3
 80133ae:	d102      	bne.n	80133b6 <_strtod_l+0x87e>
 80133b0:	3001      	adds	r0, #1
 80133b2:	f43f addf 	beq.w	8012f74 <_strtod_l+0x43c>
 80133b6:	4ba3      	ldr	r3, [pc, #652]	; (8013644 <_strtod_l+0xb0c>)
 80133b8:	402b      	ands	r3, r5
 80133ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80133be:	f04f 0a00 	mov.w	sl, #0
 80133c2:	e7a0      	b.n	8013306 <_strtod_l+0x7ce>
 80133c4:	f04f 33ff 	mov.w	r3, #4294967295
 80133c8:	e7ed      	b.n	80133a6 <_strtod_l+0x86e>
 80133ca:	460b      	mov	r3, r1
 80133cc:	e7eb      	b.n	80133a6 <_strtod_l+0x86e>
 80133ce:	bb7b      	cbnz	r3, 8013430 <_strtod_l+0x8f8>
 80133d0:	f1ba 0f00 	cmp.w	sl, #0
 80133d4:	d12c      	bne.n	8013430 <_strtod_l+0x8f8>
 80133d6:	9904      	ldr	r1, [sp, #16]
 80133d8:	4a9a      	ldr	r2, [pc, #616]	; (8013644 <_strtod_l+0xb0c>)
 80133da:	465b      	mov	r3, fp
 80133dc:	b1f1      	cbz	r1, 801341c <_strtod_l+0x8e4>
 80133de:	ea02 010b 	and.w	r1, r2, fp
 80133e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80133e6:	dc19      	bgt.n	801341c <_strtod_l+0x8e4>
 80133e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80133ec:	f77f ae5b 	ble.w	80130a6 <_strtod_l+0x56e>
 80133f0:	4a96      	ldr	r2, [pc, #600]	; (801364c <_strtod_l+0xb14>)
 80133f2:	2300      	movs	r3, #0
 80133f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80133f8:	4650      	mov	r0, sl
 80133fa:	4659      	mov	r1, fp
 80133fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013400:	f7ed f912 	bl	8000628 <__aeabi_dmul>
 8013404:	4682      	mov	sl, r0
 8013406:	468b      	mov	fp, r1
 8013408:	2900      	cmp	r1, #0
 801340a:	f47f adbe 	bne.w	8012f8a <_strtod_l+0x452>
 801340e:	2800      	cmp	r0, #0
 8013410:	f47f adbb 	bne.w	8012f8a <_strtod_l+0x452>
 8013414:	2322      	movs	r3, #34	; 0x22
 8013416:	f8c9 3000 	str.w	r3, [r9]
 801341a:	e5b6      	b.n	8012f8a <_strtod_l+0x452>
 801341c:	4013      	ands	r3, r2
 801341e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013422:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013426:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801342a:	f04f 3aff 	mov.w	sl, #4294967295
 801342e:	e76a      	b.n	8013306 <_strtod_l+0x7ce>
 8013430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013432:	b193      	cbz	r3, 801345a <_strtod_l+0x922>
 8013434:	422b      	tst	r3, r5
 8013436:	f43f af66 	beq.w	8013306 <_strtod_l+0x7ce>
 801343a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801343c:	9a04      	ldr	r2, [sp, #16]
 801343e:	4650      	mov	r0, sl
 8013440:	4659      	mov	r1, fp
 8013442:	b173      	cbz	r3, 8013462 <_strtod_l+0x92a>
 8013444:	f7ff fb5a 	bl	8012afc <sulp>
 8013448:	4602      	mov	r2, r0
 801344a:	460b      	mov	r3, r1
 801344c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013450:	f7ec ff34 	bl	80002bc <__adddf3>
 8013454:	4682      	mov	sl, r0
 8013456:	468b      	mov	fp, r1
 8013458:	e755      	b.n	8013306 <_strtod_l+0x7ce>
 801345a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801345c:	ea13 0f0a 	tst.w	r3, sl
 8013460:	e7e9      	b.n	8013436 <_strtod_l+0x8fe>
 8013462:	f7ff fb4b 	bl	8012afc <sulp>
 8013466:	4602      	mov	r2, r0
 8013468:	460b      	mov	r3, r1
 801346a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801346e:	f7ec ff23 	bl	80002b8 <__aeabi_dsub>
 8013472:	2200      	movs	r2, #0
 8013474:	2300      	movs	r3, #0
 8013476:	4682      	mov	sl, r0
 8013478:	468b      	mov	fp, r1
 801347a:	f7ed fb3d 	bl	8000af8 <__aeabi_dcmpeq>
 801347e:	2800      	cmp	r0, #0
 8013480:	f47f ae11 	bne.w	80130a6 <_strtod_l+0x56e>
 8013484:	e73f      	b.n	8013306 <_strtod_l+0x7ce>
 8013486:	4641      	mov	r1, r8
 8013488:	4620      	mov	r0, r4
 801348a:	f001 ffb8 	bl	80153fe <__ratio>
 801348e:	ec57 6b10 	vmov	r6, r7, d0
 8013492:	2200      	movs	r2, #0
 8013494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013498:	ee10 0a10 	vmov	r0, s0
 801349c:	4639      	mov	r1, r7
 801349e:	f7ed fb3f 	bl	8000b20 <__aeabi_dcmple>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d077      	beq.n	8013596 <_strtod_l+0xa5e>
 80134a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d04a      	beq.n	8013542 <_strtod_l+0xa0a>
 80134ac:	4b68      	ldr	r3, [pc, #416]	; (8013650 <_strtod_l+0xb18>)
 80134ae:	2200      	movs	r2, #0
 80134b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80134b4:	4f66      	ldr	r7, [pc, #408]	; (8013650 <_strtod_l+0xb18>)
 80134b6:	2600      	movs	r6, #0
 80134b8:	4b62      	ldr	r3, [pc, #392]	; (8013644 <_strtod_l+0xb0c>)
 80134ba:	402b      	ands	r3, r5
 80134bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80134be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80134c0:	4b64      	ldr	r3, [pc, #400]	; (8013654 <_strtod_l+0xb1c>)
 80134c2:	429a      	cmp	r2, r3
 80134c4:	f040 80ce 	bne.w	8013664 <_strtod_l+0xb2c>
 80134c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80134cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80134d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80134d4:	ec4b ab10 	vmov	d0, sl, fp
 80134d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80134dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80134e0:	f001 fec8 	bl	8015274 <__ulp>
 80134e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80134e8:	ec53 2b10 	vmov	r2, r3, d0
 80134ec:	f7ed f89c 	bl	8000628 <__aeabi_dmul>
 80134f0:	4652      	mov	r2, sl
 80134f2:	465b      	mov	r3, fp
 80134f4:	f7ec fee2 	bl	80002bc <__adddf3>
 80134f8:	460b      	mov	r3, r1
 80134fa:	4952      	ldr	r1, [pc, #328]	; (8013644 <_strtod_l+0xb0c>)
 80134fc:	4a56      	ldr	r2, [pc, #344]	; (8013658 <_strtod_l+0xb20>)
 80134fe:	4019      	ands	r1, r3
 8013500:	4291      	cmp	r1, r2
 8013502:	4682      	mov	sl, r0
 8013504:	d95b      	bls.n	80135be <_strtod_l+0xa86>
 8013506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013508:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801350c:	4293      	cmp	r3, r2
 801350e:	d103      	bne.n	8013518 <_strtod_l+0x9e0>
 8013510:	9b08      	ldr	r3, [sp, #32]
 8013512:	3301      	adds	r3, #1
 8013514:	f43f ad2e 	beq.w	8012f74 <_strtod_l+0x43c>
 8013518:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013648 <_strtod_l+0xb10>
 801351c:	f04f 3aff 	mov.w	sl, #4294967295
 8013520:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013522:	4648      	mov	r0, r9
 8013524:	f001 fc0e 	bl	8014d44 <_Bfree>
 8013528:	9905      	ldr	r1, [sp, #20]
 801352a:	4648      	mov	r0, r9
 801352c:	f001 fc0a 	bl	8014d44 <_Bfree>
 8013530:	4641      	mov	r1, r8
 8013532:	4648      	mov	r0, r9
 8013534:	f001 fc06 	bl	8014d44 <_Bfree>
 8013538:	4621      	mov	r1, r4
 801353a:	4648      	mov	r0, r9
 801353c:	f001 fc02 	bl	8014d44 <_Bfree>
 8013540:	e619      	b.n	8013176 <_strtod_l+0x63e>
 8013542:	f1ba 0f00 	cmp.w	sl, #0
 8013546:	d11a      	bne.n	801357e <_strtod_l+0xa46>
 8013548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801354c:	b9eb      	cbnz	r3, 801358a <_strtod_l+0xa52>
 801354e:	2200      	movs	r2, #0
 8013550:	4b3f      	ldr	r3, [pc, #252]	; (8013650 <_strtod_l+0xb18>)
 8013552:	4630      	mov	r0, r6
 8013554:	4639      	mov	r1, r7
 8013556:	f7ed fad9 	bl	8000b0c <__aeabi_dcmplt>
 801355a:	b9c8      	cbnz	r0, 8013590 <_strtod_l+0xa58>
 801355c:	4630      	mov	r0, r6
 801355e:	4639      	mov	r1, r7
 8013560:	2200      	movs	r2, #0
 8013562:	4b3e      	ldr	r3, [pc, #248]	; (801365c <_strtod_l+0xb24>)
 8013564:	f7ed f860 	bl	8000628 <__aeabi_dmul>
 8013568:	4606      	mov	r6, r0
 801356a:	460f      	mov	r7, r1
 801356c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013570:	9618      	str	r6, [sp, #96]	; 0x60
 8013572:	9319      	str	r3, [sp, #100]	; 0x64
 8013574:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013578:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801357c:	e79c      	b.n	80134b8 <_strtod_l+0x980>
 801357e:	f1ba 0f01 	cmp.w	sl, #1
 8013582:	d102      	bne.n	801358a <_strtod_l+0xa52>
 8013584:	2d00      	cmp	r5, #0
 8013586:	f43f ad8e 	beq.w	80130a6 <_strtod_l+0x56e>
 801358a:	2200      	movs	r2, #0
 801358c:	4b34      	ldr	r3, [pc, #208]	; (8013660 <_strtod_l+0xb28>)
 801358e:	e78f      	b.n	80134b0 <_strtod_l+0x978>
 8013590:	2600      	movs	r6, #0
 8013592:	4f32      	ldr	r7, [pc, #200]	; (801365c <_strtod_l+0xb24>)
 8013594:	e7ea      	b.n	801356c <_strtod_l+0xa34>
 8013596:	4b31      	ldr	r3, [pc, #196]	; (801365c <_strtod_l+0xb24>)
 8013598:	4630      	mov	r0, r6
 801359a:	4639      	mov	r1, r7
 801359c:	2200      	movs	r2, #0
 801359e:	f7ed f843 	bl	8000628 <__aeabi_dmul>
 80135a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135a4:	4606      	mov	r6, r0
 80135a6:	460f      	mov	r7, r1
 80135a8:	b933      	cbnz	r3, 80135b8 <_strtod_l+0xa80>
 80135aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135ae:	9010      	str	r0, [sp, #64]	; 0x40
 80135b0:	9311      	str	r3, [sp, #68]	; 0x44
 80135b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80135b6:	e7df      	b.n	8013578 <_strtod_l+0xa40>
 80135b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80135bc:	e7f9      	b.n	80135b2 <_strtod_l+0xa7a>
 80135be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80135c2:	9b04      	ldr	r3, [sp, #16]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1ab      	bne.n	8013520 <_strtod_l+0x9e8>
 80135c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135cc:	0d1b      	lsrs	r3, r3, #20
 80135ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135d0:	051b      	lsls	r3, r3, #20
 80135d2:	429a      	cmp	r2, r3
 80135d4:	465d      	mov	r5, fp
 80135d6:	d1a3      	bne.n	8013520 <_strtod_l+0x9e8>
 80135d8:	4639      	mov	r1, r7
 80135da:	4630      	mov	r0, r6
 80135dc:	f7ed fad4 	bl	8000b88 <__aeabi_d2iz>
 80135e0:	f7ec ffb8 	bl	8000554 <__aeabi_i2d>
 80135e4:	460b      	mov	r3, r1
 80135e6:	4602      	mov	r2, r0
 80135e8:	4639      	mov	r1, r7
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ec fe64 	bl	80002b8 <__aeabi_dsub>
 80135f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135f2:	4606      	mov	r6, r0
 80135f4:	460f      	mov	r7, r1
 80135f6:	b933      	cbnz	r3, 8013606 <_strtod_l+0xace>
 80135f8:	f1ba 0f00 	cmp.w	sl, #0
 80135fc:	d103      	bne.n	8013606 <_strtod_l+0xace>
 80135fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013602:	2d00      	cmp	r5, #0
 8013604:	d06d      	beq.n	80136e2 <_strtod_l+0xbaa>
 8013606:	a30a      	add	r3, pc, #40	; (adr r3, 8013630 <_strtod_l+0xaf8>)
 8013608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360c:	4630      	mov	r0, r6
 801360e:	4639      	mov	r1, r7
 8013610:	f7ed fa7c 	bl	8000b0c <__aeabi_dcmplt>
 8013614:	2800      	cmp	r0, #0
 8013616:	f47f acb8 	bne.w	8012f8a <_strtod_l+0x452>
 801361a:	a307      	add	r3, pc, #28	; (adr r3, 8013638 <_strtod_l+0xb00>)
 801361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013620:	4630      	mov	r0, r6
 8013622:	4639      	mov	r1, r7
 8013624:	f7ed fa90 	bl	8000b48 <__aeabi_dcmpgt>
 8013628:	2800      	cmp	r0, #0
 801362a:	f43f af79 	beq.w	8013520 <_strtod_l+0x9e8>
 801362e:	e4ac      	b.n	8012f8a <_strtod_l+0x452>
 8013630:	94a03595 	.word	0x94a03595
 8013634:	3fdfffff 	.word	0x3fdfffff
 8013638:	35afe535 	.word	0x35afe535
 801363c:	3fe00000 	.word	0x3fe00000
 8013640:	000fffff 	.word	0x000fffff
 8013644:	7ff00000 	.word	0x7ff00000
 8013648:	7fefffff 	.word	0x7fefffff
 801364c:	39500000 	.word	0x39500000
 8013650:	3ff00000 	.word	0x3ff00000
 8013654:	7fe00000 	.word	0x7fe00000
 8013658:	7c9fffff 	.word	0x7c9fffff
 801365c:	3fe00000 	.word	0x3fe00000
 8013660:	bff00000 	.word	0xbff00000
 8013664:	9b04      	ldr	r3, [sp, #16]
 8013666:	b333      	cbz	r3, 80136b6 <_strtod_l+0xb7e>
 8013668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801366a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801366e:	d822      	bhi.n	80136b6 <_strtod_l+0xb7e>
 8013670:	a327      	add	r3, pc, #156	; (adr r3, 8013710 <_strtod_l+0xbd8>)
 8013672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013676:	4630      	mov	r0, r6
 8013678:	4639      	mov	r1, r7
 801367a:	f7ed fa51 	bl	8000b20 <__aeabi_dcmple>
 801367e:	b1a0      	cbz	r0, 80136aa <_strtod_l+0xb72>
 8013680:	4639      	mov	r1, r7
 8013682:	4630      	mov	r0, r6
 8013684:	f7ed faa8 	bl	8000bd8 <__aeabi_d2uiz>
 8013688:	2800      	cmp	r0, #0
 801368a:	bf08      	it	eq
 801368c:	2001      	moveq	r0, #1
 801368e:	f7ec ff51 	bl	8000534 <__aeabi_ui2d>
 8013692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013694:	4606      	mov	r6, r0
 8013696:	460f      	mov	r7, r1
 8013698:	bb03      	cbnz	r3, 80136dc <_strtod_l+0xba4>
 801369a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801369e:	9012      	str	r0, [sp, #72]	; 0x48
 80136a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80136a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80136a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80136aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80136ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80136b2:	1a9b      	subs	r3, r3, r2
 80136b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80136b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80136ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80136be:	f001 fdd9 	bl	8015274 <__ulp>
 80136c2:	4650      	mov	r0, sl
 80136c4:	ec53 2b10 	vmov	r2, r3, d0
 80136c8:	4659      	mov	r1, fp
 80136ca:	f7ec ffad 	bl	8000628 <__aeabi_dmul>
 80136ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136d2:	f7ec fdf3 	bl	80002bc <__adddf3>
 80136d6:	4682      	mov	sl, r0
 80136d8:	468b      	mov	fp, r1
 80136da:	e772      	b.n	80135c2 <_strtod_l+0xa8a>
 80136dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80136e0:	e7df      	b.n	80136a2 <_strtod_l+0xb6a>
 80136e2:	a30d      	add	r3, pc, #52	; (adr r3, 8013718 <_strtod_l+0xbe0>)
 80136e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e8:	f7ed fa10 	bl	8000b0c <__aeabi_dcmplt>
 80136ec:	e79c      	b.n	8013628 <_strtod_l+0xaf0>
 80136ee:	2300      	movs	r3, #0
 80136f0:	930d      	str	r3, [sp, #52]	; 0x34
 80136f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80136f6:	6013      	str	r3, [r2, #0]
 80136f8:	f7ff ba61 	b.w	8012bbe <_strtod_l+0x86>
 80136fc:	2b65      	cmp	r3, #101	; 0x65
 80136fe:	f04f 0200 	mov.w	r2, #0
 8013702:	f43f ab4e 	beq.w	8012da2 <_strtod_l+0x26a>
 8013706:	2101      	movs	r1, #1
 8013708:	4614      	mov	r4, r2
 801370a:	9104      	str	r1, [sp, #16]
 801370c:	f7ff bacb 	b.w	8012ca6 <_strtod_l+0x16e>
 8013710:	ffc00000 	.word	0xffc00000
 8013714:	41dfffff 	.word	0x41dfffff
 8013718:	94a03595 	.word	0x94a03595
 801371c:	3fcfffff 	.word	0x3fcfffff

08013720 <strtof>:
 8013720:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013724:	4e24      	ldr	r6, [pc, #144]	; (80137b8 <strtof+0x98>)
 8013726:	4a25      	ldr	r2, [pc, #148]	; (80137bc <strtof+0x9c>)
 8013728:	6834      	ldr	r4, [r6, #0]
 801372a:	6a23      	ldr	r3, [r4, #32]
 801372c:	ed2d 8b02 	vpush	{d8}
 8013730:	2b00      	cmp	r3, #0
 8013732:	bf08      	it	eq
 8013734:	4613      	moveq	r3, r2
 8013736:	460a      	mov	r2, r1
 8013738:	4601      	mov	r1, r0
 801373a:	4620      	mov	r0, r4
 801373c:	f7ff f9fc 	bl	8012b38 <_strtod_l>
 8013740:	ec55 4b10 	vmov	r4, r5, d0
 8013744:	ee10 2a10 	vmov	r2, s0
 8013748:	462b      	mov	r3, r5
 801374a:	ee10 0a10 	vmov	r0, s0
 801374e:	4629      	mov	r1, r5
 8013750:	f7ed fa04 	bl	8000b5c <__aeabi_dcmpun>
 8013754:	b130      	cbz	r0, 8013764 <strtof+0x44>
 8013756:	ecbd 8b02 	vpop	{d8}
 801375a:	2000      	movs	r0, #0
 801375c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8013760:	f002 b81c 	b.w	801579c <nanf>
 8013764:	4620      	mov	r0, r4
 8013766:	4629      	mov	r1, r5
 8013768:	f7ed fa56 	bl	8000c18 <__aeabi_d2f>
 801376c:	ee08 0a10 	vmov	s16, r0
 8013770:	eddf 7a13 	vldr	s15, [pc, #76]	; 80137c0 <strtof+0xa0>
 8013774:	eeb0 7ac8 	vabs.f32	s14, s16
 8013778:	eeb4 7a67 	vcmp.f32	s14, s15
 801377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013780:	dd14      	ble.n	80137ac <strtof+0x8c>
 8013782:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8013786:	f04f 32ff 	mov.w	r2, #4294967295
 801378a:	4b0e      	ldr	r3, [pc, #56]	; (80137c4 <strtof+0xa4>)
 801378c:	4620      	mov	r0, r4
 801378e:	4649      	mov	r1, r9
 8013790:	f7ed f9e4 	bl	8000b5c <__aeabi_dcmpun>
 8013794:	b938      	cbnz	r0, 80137a6 <strtof+0x86>
 8013796:	f04f 32ff 	mov.w	r2, #4294967295
 801379a:	4b0a      	ldr	r3, [pc, #40]	; (80137c4 <strtof+0xa4>)
 801379c:	4620      	mov	r0, r4
 801379e:	4649      	mov	r1, r9
 80137a0:	f7ed f9be 	bl	8000b20 <__aeabi_dcmple>
 80137a4:	b110      	cbz	r0, 80137ac <strtof+0x8c>
 80137a6:	6833      	ldr	r3, [r6, #0]
 80137a8:	2222      	movs	r2, #34	; 0x22
 80137aa:	601a      	str	r2, [r3, #0]
 80137ac:	eeb0 0a48 	vmov.f32	s0, s16
 80137b0:	ecbd 8b02 	vpop	{d8}
 80137b4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80137b8:	20000064 	.word	0x20000064
 80137bc:	200000c8 	.word	0x200000c8
 80137c0:	7f7fffff 	.word	0x7f7fffff
 80137c4:	7fefffff 	.word	0x7fefffff

080137c8 <__strtok_r>:
 80137c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ca:	b918      	cbnz	r0, 80137d4 <__strtok_r+0xc>
 80137cc:	6810      	ldr	r0, [r2, #0]
 80137ce:	b908      	cbnz	r0, 80137d4 <__strtok_r+0xc>
 80137d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137d2:	4620      	mov	r0, r4
 80137d4:	4604      	mov	r4, r0
 80137d6:	460f      	mov	r7, r1
 80137d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80137dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80137e0:	b91e      	cbnz	r6, 80137ea <__strtok_r+0x22>
 80137e2:	b96d      	cbnz	r5, 8013800 <__strtok_r+0x38>
 80137e4:	6015      	str	r5, [r2, #0]
 80137e6:	4628      	mov	r0, r5
 80137e8:	e7f2      	b.n	80137d0 <__strtok_r+0x8>
 80137ea:	42b5      	cmp	r5, r6
 80137ec:	d1f6      	bne.n	80137dc <__strtok_r+0x14>
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d1ef      	bne.n	80137d2 <__strtok_r+0xa>
 80137f2:	6014      	str	r4, [r2, #0]
 80137f4:	7003      	strb	r3, [r0, #0]
 80137f6:	e7eb      	b.n	80137d0 <__strtok_r+0x8>
 80137f8:	462b      	mov	r3, r5
 80137fa:	e00d      	b.n	8013818 <__strtok_r+0x50>
 80137fc:	b926      	cbnz	r6, 8013808 <__strtok_r+0x40>
 80137fe:	461c      	mov	r4, r3
 8013800:	4623      	mov	r3, r4
 8013802:	460f      	mov	r7, r1
 8013804:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013808:	f817 6b01 	ldrb.w	r6, [r7], #1
 801380c:	42b5      	cmp	r5, r6
 801380e:	d1f5      	bne.n	80137fc <__strtok_r+0x34>
 8013810:	2d00      	cmp	r5, #0
 8013812:	d0f1      	beq.n	80137f8 <__strtok_r+0x30>
 8013814:	2100      	movs	r1, #0
 8013816:	7021      	strb	r1, [r4, #0]
 8013818:	6013      	str	r3, [r2, #0]
 801381a:	e7d9      	b.n	80137d0 <__strtok_r+0x8>

0801381c <strtok_r>:
 801381c:	2301      	movs	r3, #1
 801381e:	f7ff bfd3 	b.w	80137c8 <__strtok_r>

08013822 <_strtoul_l.isra.0>:
 8013822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013826:	4680      	mov	r8, r0
 8013828:	4689      	mov	r9, r1
 801382a:	4692      	mov	sl, r2
 801382c:	461e      	mov	r6, r3
 801382e:	460f      	mov	r7, r1
 8013830:	463d      	mov	r5, r7
 8013832:	9808      	ldr	r0, [sp, #32]
 8013834:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013838:	f001 fa28 	bl	8014c8c <__locale_ctype_ptr_l>
 801383c:	4420      	add	r0, r4
 801383e:	7843      	ldrb	r3, [r0, #1]
 8013840:	f013 0308 	ands.w	r3, r3, #8
 8013844:	d130      	bne.n	80138a8 <_strtoul_l.isra.0+0x86>
 8013846:	2c2d      	cmp	r4, #45	; 0x2d
 8013848:	d130      	bne.n	80138ac <_strtoul_l.isra.0+0x8a>
 801384a:	787c      	ldrb	r4, [r7, #1]
 801384c:	1cbd      	adds	r5, r7, #2
 801384e:	2101      	movs	r1, #1
 8013850:	2e00      	cmp	r6, #0
 8013852:	d05c      	beq.n	801390e <_strtoul_l.isra.0+0xec>
 8013854:	2e10      	cmp	r6, #16
 8013856:	d109      	bne.n	801386c <_strtoul_l.isra.0+0x4a>
 8013858:	2c30      	cmp	r4, #48	; 0x30
 801385a:	d107      	bne.n	801386c <_strtoul_l.isra.0+0x4a>
 801385c:	782b      	ldrb	r3, [r5, #0]
 801385e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013862:	2b58      	cmp	r3, #88	; 0x58
 8013864:	d14e      	bne.n	8013904 <_strtoul_l.isra.0+0xe2>
 8013866:	786c      	ldrb	r4, [r5, #1]
 8013868:	2610      	movs	r6, #16
 801386a:	3502      	adds	r5, #2
 801386c:	f04f 32ff 	mov.w	r2, #4294967295
 8013870:	2300      	movs	r3, #0
 8013872:	fbb2 f2f6 	udiv	r2, r2, r6
 8013876:	fb06 fc02 	mul.w	ip, r6, r2
 801387a:	ea6f 0c0c 	mvn.w	ip, ip
 801387e:	4618      	mov	r0, r3
 8013880:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013884:	2f09      	cmp	r7, #9
 8013886:	d817      	bhi.n	80138b8 <_strtoul_l.isra.0+0x96>
 8013888:	463c      	mov	r4, r7
 801388a:	42a6      	cmp	r6, r4
 801388c:	dd23      	ble.n	80138d6 <_strtoul_l.isra.0+0xb4>
 801388e:	2b00      	cmp	r3, #0
 8013890:	db1e      	blt.n	80138d0 <_strtoul_l.isra.0+0xae>
 8013892:	4282      	cmp	r2, r0
 8013894:	d31c      	bcc.n	80138d0 <_strtoul_l.isra.0+0xae>
 8013896:	d101      	bne.n	801389c <_strtoul_l.isra.0+0x7a>
 8013898:	45a4      	cmp	ip, r4
 801389a:	db19      	blt.n	80138d0 <_strtoul_l.isra.0+0xae>
 801389c:	fb00 4006 	mla	r0, r0, r6, r4
 80138a0:	2301      	movs	r3, #1
 80138a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138a6:	e7eb      	b.n	8013880 <_strtoul_l.isra.0+0x5e>
 80138a8:	462f      	mov	r7, r5
 80138aa:	e7c1      	b.n	8013830 <_strtoul_l.isra.0+0xe>
 80138ac:	2c2b      	cmp	r4, #43	; 0x2b
 80138ae:	bf04      	itt	eq
 80138b0:	1cbd      	addeq	r5, r7, #2
 80138b2:	787c      	ldrbeq	r4, [r7, #1]
 80138b4:	4619      	mov	r1, r3
 80138b6:	e7cb      	b.n	8013850 <_strtoul_l.isra.0+0x2e>
 80138b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80138bc:	2f19      	cmp	r7, #25
 80138be:	d801      	bhi.n	80138c4 <_strtoul_l.isra.0+0xa2>
 80138c0:	3c37      	subs	r4, #55	; 0x37
 80138c2:	e7e2      	b.n	801388a <_strtoul_l.isra.0+0x68>
 80138c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80138c8:	2f19      	cmp	r7, #25
 80138ca:	d804      	bhi.n	80138d6 <_strtoul_l.isra.0+0xb4>
 80138cc:	3c57      	subs	r4, #87	; 0x57
 80138ce:	e7dc      	b.n	801388a <_strtoul_l.isra.0+0x68>
 80138d0:	f04f 33ff 	mov.w	r3, #4294967295
 80138d4:	e7e5      	b.n	80138a2 <_strtoul_l.isra.0+0x80>
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	da09      	bge.n	80138ee <_strtoul_l.isra.0+0xcc>
 80138da:	2322      	movs	r3, #34	; 0x22
 80138dc:	f8c8 3000 	str.w	r3, [r8]
 80138e0:	f04f 30ff 	mov.w	r0, #4294967295
 80138e4:	f1ba 0f00 	cmp.w	sl, #0
 80138e8:	d107      	bne.n	80138fa <_strtoul_l.isra.0+0xd8>
 80138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ee:	b101      	cbz	r1, 80138f2 <_strtoul_l.isra.0+0xd0>
 80138f0:	4240      	negs	r0, r0
 80138f2:	f1ba 0f00 	cmp.w	sl, #0
 80138f6:	d0f8      	beq.n	80138ea <_strtoul_l.isra.0+0xc8>
 80138f8:	b10b      	cbz	r3, 80138fe <_strtoul_l.isra.0+0xdc>
 80138fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80138fe:	f8ca 9000 	str.w	r9, [sl]
 8013902:	e7f2      	b.n	80138ea <_strtoul_l.isra.0+0xc8>
 8013904:	2430      	movs	r4, #48	; 0x30
 8013906:	2e00      	cmp	r6, #0
 8013908:	d1b0      	bne.n	801386c <_strtoul_l.isra.0+0x4a>
 801390a:	2608      	movs	r6, #8
 801390c:	e7ae      	b.n	801386c <_strtoul_l.isra.0+0x4a>
 801390e:	2c30      	cmp	r4, #48	; 0x30
 8013910:	d0a4      	beq.n	801385c <_strtoul_l.isra.0+0x3a>
 8013912:	260a      	movs	r6, #10
 8013914:	e7aa      	b.n	801386c <_strtoul_l.isra.0+0x4a>
	...

08013918 <strtoul>:
 8013918:	4b08      	ldr	r3, [pc, #32]	; (801393c <strtoul+0x24>)
 801391a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801391c:	681c      	ldr	r4, [r3, #0]
 801391e:	4d08      	ldr	r5, [pc, #32]	; (8013940 <strtoul+0x28>)
 8013920:	6a23      	ldr	r3, [r4, #32]
 8013922:	2b00      	cmp	r3, #0
 8013924:	bf08      	it	eq
 8013926:	462b      	moveq	r3, r5
 8013928:	9300      	str	r3, [sp, #0]
 801392a:	4613      	mov	r3, r2
 801392c:	460a      	mov	r2, r1
 801392e:	4601      	mov	r1, r0
 8013930:	4620      	mov	r0, r4
 8013932:	f7ff ff76 	bl	8013822 <_strtoul_l.isra.0>
 8013936:	b003      	add	sp, #12
 8013938:	bd30      	pop	{r4, r5, pc}
 801393a:	bf00      	nop
 801393c:	20000064 	.word	0x20000064
 8013940:	200000c8 	.word	0x200000c8

08013944 <_vsniprintf_r>:
 8013944:	b530      	push	{r4, r5, lr}
 8013946:	1e14      	subs	r4, r2, #0
 8013948:	4605      	mov	r5, r0
 801394a:	b09b      	sub	sp, #108	; 0x6c
 801394c:	4618      	mov	r0, r3
 801394e:	da05      	bge.n	801395c <_vsniprintf_r+0x18>
 8013950:	238b      	movs	r3, #139	; 0x8b
 8013952:	602b      	str	r3, [r5, #0]
 8013954:	f04f 30ff 	mov.w	r0, #4294967295
 8013958:	b01b      	add	sp, #108	; 0x6c
 801395a:	bd30      	pop	{r4, r5, pc}
 801395c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013960:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013964:	bf14      	ite	ne
 8013966:	f104 33ff 	addne.w	r3, r4, #4294967295
 801396a:	4623      	moveq	r3, r4
 801396c:	9302      	str	r3, [sp, #8]
 801396e:	9305      	str	r3, [sp, #20]
 8013970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013974:	9100      	str	r1, [sp, #0]
 8013976:	9104      	str	r1, [sp, #16]
 8013978:	f8ad 300e 	strh.w	r3, [sp, #14]
 801397c:	4602      	mov	r2, r0
 801397e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013980:	4669      	mov	r1, sp
 8013982:	4628      	mov	r0, r5
 8013984:	f001 fe12 	bl	80155ac <_svfiprintf_r>
 8013988:	1c43      	adds	r3, r0, #1
 801398a:	bfbc      	itt	lt
 801398c:	238b      	movlt	r3, #139	; 0x8b
 801398e:	602b      	strlt	r3, [r5, #0]
 8013990:	2c00      	cmp	r4, #0
 8013992:	d0e1      	beq.n	8013958 <_vsniprintf_r+0x14>
 8013994:	9b00      	ldr	r3, [sp, #0]
 8013996:	2200      	movs	r2, #0
 8013998:	701a      	strb	r2, [r3, #0]
 801399a:	e7dd      	b.n	8013958 <_vsniprintf_r+0x14>

0801399c <vsniprintf>:
 801399c:	b507      	push	{r0, r1, r2, lr}
 801399e:	9300      	str	r3, [sp, #0]
 80139a0:	4613      	mov	r3, r2
 80139a2:	460a      	mov	r2, r1
 80139a4:	4601      	mov	r1, r0
 80139a6:	4803      	ldr	r0, [pc, #12]	; (80139b4 <vsniprintf+0x18>)
 80139a8:	6800      	ldr	r0, [r0, #0]
 80139aa:	f7ff ffcb 	bl	8013944 <_vsniprintf_r>
 80139ae:	b003      	add	sp, #12
 80139b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80139b4:	20000064 	.word	0x20000064

080139b8 <quorem>:
 80139b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139bc:	6903      	ldr	r3, [r0, #16]
 80139be:	690c      	ldr	r4, [r1, #16]
 80139c0:	42a3      	cmp	r3, r4
 80139c2:	4680      	mov	r8, r0
 80139c4:	f2c0 8082 	blt.w	8013acc <quorem+0x114>
 80139c8:	3c01      	subs	r4, #1
 80139ca:	f101 0714 	add.w	r7, r1, #20
 80139ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80139d2:	f100 0614 	add.w	r6, r0, #20
 80139d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80139da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80139de:	eb06 030c 	add.w	r3, r6, ip
 80139e2:	3501      	adds	r5, #1
 80139e4:	eb07 090c 	add.w	r9, r7, ip
 80139e8:	9301      	str	r3, [sp, #4]
 80139ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80139ee:	b395      	cbz	r5, 8013a56 <quorem+0x9e>
 80139f0:	f04f 0a00 	mov.w	sl, #0
 80139f4:	4638      	mov	r0, r7
 80139f6:	46b6      	mov	lr, r6
 80139f8:	46d3      	mov	fp, sl
 80139fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80139fe:	b293      	uxth	r3, r2
 8013a00:	fb05 a303 	mla	r3, r5, r3, sl
 8013a04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	ebab 0303 	sub.w	r3, fp, r3
 8013a0e:	0c12      	lsrs	r2, r2, #16
 8013a10:	f8de b000 	ldr.w	fp, [lr]
 8013a14:	fb05 a202 	mla	r2, r5, r2, sl
 8013a18:	fa13 f38b 	uxtah	r3, r3, fp
 8013a1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013a20:	fa1f fb82 	uxth.w	fp, r2
 8013a24:	f8de 2000 	ldr.w	r2, [lr]
 8013a28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013a2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a36:	4581      	cmp	r9, r0
 8013a38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013a3c:	f84e 3b04 	str.w	r3, [lr], #4
 8013a40:	d2db      	bcs.n	80139fa <quorem+0x42>
 8013a42:	f856 300c 	ldr.w	r3, [r6, ip]
 8013a46:	b933      	cbnz	r3, 8013a56 <quorem+0x9e>
 8013a48:	9b01      	ldr	r3, [sp, #4]
 8013a4a:	3b04      	subs	r3, #4
 8013a4c:	429e      	cmp	r6, r3
 8013a4e:	461a      	mov	r2, r3
 8013a50:	d330      	bcc.n	8013ab4 <quorem+0xfc>
 8013a52:	f8c8 4010 	str.w	r4, [r8, #16]
 8013a56:	4640      	mov	r0, r8
 8013a58:	f001 fb94 	bl	8015184 <__mcmp>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	db25      	blt.n	8013aac <quorem+0xf4>
 8013a60:	3501      	adds	r5, #1
 8013a62:	4630      	mov	r0, r6
 8013a64:	f04f 0c00 	mov.w	ip, #0
 8013a68:	f857 2b04 	ldr.w	r2, [r7], #4
 8013a6c:	f8d0 e000 	ldr.w	lr, [r0]
 8013a70:	b293      	uxth	r3, r2
 8013a72:	ebac 0303 	sub.w	r3, ip, r3
 8013a76:	0c12      	lsrs	r2, r2, #16
 8013a78:	fa13 f38e 	uxtah	r3, r3, lr
 8013a7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a8a:	45b9      	cmp	r9, r7
 8013a8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013a90:	f840 3b04 	str.w	r3, [r0], #4
 8013a94:	d2e8      	bcs.n	8013a68 <quorem+0xb0>
 8013a96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013a9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013a9e:	b92a      	cbnz	r2, 8013aac <quorem+0xf4>
 8013aa0:	3b04      	subs	r3, #4
 8013aa2:	429e      	cmp	r6, r3
 8013aa4:	461a      	mov	r2, r3
 8013aa6:	d30b      	bcc.n	8013ac0 <quorem+0x108>
 8013aa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8013aac:	4628      	mov	r0, r5
 8013aae:	b003      	add	sp, #12
 8013ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab4:	6812      	ldr	r2, [r2, #0]
 8013ab6:	3b04      	subs	r3, #4
 8013ab8:	2a00      	cmp	r2, #0
 8013aba:	d1ca      	bne.n	8013a52 <quorem+0x9a>
 8013abc:	3c01      	subs	r4, #1
 8013abe:	e7c5      	b.n	8013a4c <quorem+0x94>
 8013ac0:	6812      	ldr	r2, [r2, #0]
 8013ac2:	3b04      	subs	r3, #4
 8013ac4:	2a00      	cmp	r2, #0
 8013ac6:	d1ef      	bne.n	8013aa8 <quorem+0xf0>
 8013ac8:	3c01      	subs	r4, #1
 8013aca:	e7ea      	b.n	8013aa2 <quorem+0xea>
 8013acc:	2000      	movs	r0, #0
 8013ace:	e7ee      	b.n	8013aae <quorem+0xf6>

08013ad0 <_dtoa_r>:
 8013ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	ec57 6b10 	vmov	r6, r7, d0
 8013ad8:	b097      	sub	sp, #92	; 0x5c
 8013ada:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013adc:	9106      	str	r1, [sp, #24]
 8013ade:	4604      	mov	r4, r0
 8013ae0:	920b      	str	r2, [sp, #44]	; 0x2c
 8013ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8013ae4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013ae8:	e9cd 6700 	strd	r6, r7, [sp]
 8013aec:	b93d      	cbnz	r5, 8013afe <_dtoa_r+0x2e>
 8013aee:	2010      	movs	r0, #16
 8013af0:	f7fe fac4 	bl	801207c <malloc>
 8013af4:	6260      	str	r0, [r4, #36]	; 0x24
 8013af6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013afa:	6005      	str	r5, [r0, #0]
 8013afc:	60c5      	str	r5, [r0, #12]
 8013afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b00:	6819      	ldr	r1, [r3, #0]
 8013b02:	b151      	cbz	r1, 8013b1a <_dtoa_r+0x4a>
 8013b04:	685a      	ldr	r2, [r3, #4]
 8013b06:	604a      	str	r2, [r1, #4]
 8013b08:	2301      	movs	r3, #1
 8013b0a:	4093      	lsls	r3, r2
 8013b0c:	608b      	str	r3, [r1, #8]
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f001 f918 	bl	8014d44 <_Bfree>
 8013b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b16:	2200      	movs	r2, #0
 8013b18:	601a      	str	r2, [r3, #0]
 8013b1a:	1e3b      	subs	r3, r7, #0
 8013b1c:	bfbb      	ittet	lt
 8013b1e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013b22:	9301      	strlt	r3, [sp, #4]
 8013b24:	2300      	movge	r3, #0
 8013b26:	2201      	movlt	r2, #1
 8013b28:	bfac      	ite	ge
 8013b2a:	f8c8 3000 	strge.w	r3, [r8]
 8013b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8013b32:	4baf      	ldr	r3, [pc, #700]	; (8013df0 <_dtoa_r+0x320>)
 8013b34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b38:	ea33 0308 	bics.w	r3, r3, r8
 8013b3c:	d114      	bne.n	8013b68 <_dtoa_r+0x98>
 8013b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b44:	6013      	str	r3, [r2, #0]
 8013b46:	9b00      	ldr	r3, [sp, #0]
 8013b48:	b923      	cbnz	r3, 8013b54 <_dtoa_r+0x84>
 8013b4a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	f000 8542 	beq.w	80145d8 <_dtoa_r+0xb08>
 8013b54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b56:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013e04 <_dtoa_r+0x334>
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f000 8544 	beq.w	80145e8 <_dtoa_r+0xb18>
 8013b60:	f10b 0303 	add.w	r3, fp, #3
 8013b64:	f000 bd3e 	b.w	80145e4 <_dtoa_r+0xb14>
 8013b68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	2300      	movs	r3, #0
 8013b70:	4630      	mov	r0, r6
 8013b72:	4639      	mov	r1, r7
 8013b74:	f7ec ffc0 	bl	8000af8 <__aeabi_dcmpeq>
 8013b78:	4681      	mov	r9, r0
 8013b7a:	b168      	cbz	r0, 8013b98 <_dtoa_r+0xc8>
 8013b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b7e:	2301      	movs	r3, #1
 8013b80:	6013      	str	r3, [r2, #0]
 8013b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	f000 8524 	beq.w	80145d2 <_dtoa_r+0xb02>
 8013b8a:	4b9a      	ldr	r3, [pc, #616]	; (8013df4 <_dtoa_r+0x324>)
 8013b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b8e:	f103 3bff 	add.w	fp, r3, #4294967295
 8013b92:	6013      	str	r3, [r2, #0]
 8013b94:	f000 bd28 	b.w	80145e8 <_dtoa_r+0xb18>
 8013b98:	aa14      	add	r2, sp, #80	; 0x50
 8013b9a:	a915      	add	r1, sp, #84	; 0x54
 8013b9c:	ec47 6b10 	vmov	d0, r6, r7
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f001 fbdd 	bl	8015360 <__d2b>
 8013ba6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013baa:	9004      	str	r0, [sp, #16]
 8013bac:	2d00      	cmp	r5, #0
 8013bae:	d07c      	beq.n	8013caa <_dtoa_r+0x1da>
 8013bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013bb4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013bb8:	46b2      	mov	sl, r6
 8013bba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013bc2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	4b8b      	ldr	r3, [pc, #556]	; (8013df8 <_dtoa_r+0x328>)
 8013bca:	4650      	mov	r0, sl
 8013bcc:	4659      	mov	r1, fp
 8013bce:	f7ec fb73 	bl	80002b8 <__aeabi_dsub>
 8013bd2:	a381      	add	r3, pc, #516	; (adr r3, 8013dd8 <_dtoa_r+0x308>)
 8013bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd8:	f7ec fd26 	bl	8000628 <__aeabi_dmul>
 8013bdc:	a380      	add	r3, pc, #512	; (adr r3, 8013de0 <_dtoa_r+0x310>)
 8013bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be2:	f7ec fb6b 	bl	80002bc <__adddf3>
 8013be6:	4606      	mov	r6, r0
 8013be8:	4628      	mov	r0, r5
 8013bea:	460f      	mov	r7, r1
 8013bec:	f7ec fcb2 	bl	8000554 <__aeabi_i2d>
 8013bf0:	a37d      	add	r3, pc, #500	; (adr r3, 8013de8 <_dtoa_r+0x318>)
 8013bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf6:	f7ec fd17 	bl	8000628 <__aeabi_dmul>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	4630      	mov	r0, r6
 8013c00:	4639      	mov	r1, r7
 8013c02:	f7ec fb5b 	bl	80002bc <__adddf3>
 8013c06:	4606      	mov	r6, r0
 8013c08:	460f      	mov	r7, r1
 8013c0a:	f7ec ffbd 	bl	8000b88 <__aeabi_d2iz>
 8013c0e:	2200      	movs	r2, #0
 8013c10:	4682      	mov	sl, r0
 8013c12:	2300      	movs	r3, #0
 8013c14:	4630      	mov	r0, r6
 8013c16:	4639      	mov	r1, r7
 8013c18:	f7ec ff78 	bl	8000b0c <__aeabi_dcmplt>
 8013c1c:	b148      	cbz	r0, 8013c32 <_dtoa_r+0x162>
 8013c1e:	4650      	mov	r0, sl
 8013c20:	f7ec fc98 	bl	8000554 <__aeabi_i2d>
 8013c24:	4632      	mov	r2, r6
 8013c26:	463b      	mov	r3, r7
 8013c28:	f7ec ff66 	bl	8000af8 <__aeabi_dcmpeq>
 8013c2c:	b908      	cbnz	r0, 8013c32 <_dtoa_r+0x162>
 8013c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c32:	f1ba 0f16 	cmp.w	sl, #22
 8013c36:	d859      	bhi.n	8013cec <_dtoa_r+0x21c>
 8013c38:	4970      	ldr	r1, [pc, #448]	; (8013dfc <_dtoa_r+0x32c>)
 8013c3a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013c3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c46:	f7ec ff7f 	bl	8000b48 <__aeabi_dcmpgt>
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d050      	beq.n	8013cf0 <_dtoa_r+0x220>
 8013c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013c52:	2300      	movs	r3, #0
 8013c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c58:	1b5d      	subs	r5, r3, r5
 8013c5a:	f1b5 0801 	subs.w	r8, r5, #1
 8013c5e:	bf49      	itett	mi
 8013c60:	f1c5 0301 	rsbmi	r3, r5, #1
 8013c64:	2300      	movpl	r3, #0
 8013c66:	9305      	strmi	r3, [sp, #20]
 8013c68:	f04f 0800 	movmi.w	r8, #0
 8013c6c:	bf58      	it	pl
 8013c6e:	9305      	strpl	r3, [sp, #20]
 8013c70:	f1ba 0f00 	cmp.w	sl, #0
 8013c74:	db3e      	blt.n	8013cf4 <_dtoa_r+0x224>
 8013c76:	2300      	movs	r3, #0
 8013c78:	44d0      	add	r8, sl
 8013c7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013c7e:	9307      	str	r3, [sp, #28]
 8013c80:	9b06      	ldr	r3, [sp, #24]
 8013c82:	2b09      	cmp	r3, #9
 8013c84:	f200 8090 	bhi.w	8013da8 <_dtoa_r+0x2d8>
 8013c88:	2b05      	cmp	r3, #5
 8013c8a:	bfc4      	itt	gt
 8013c8c:	3b04      	subgt	r3, #4
 8013c8e:	9306      	strgt	r3, [sp, #24]
 8013c90:	9b06      	ldr	r3, [sp, #24]
 8013c92:	f1a3 0302 	sub.w	r3, r3, #2
 8013c96:	bfcc      	ite	gt
 8013c98:	2500      	movgt	r5, #0
 8013c9a:	2501      	movle	r5, #1
 8013c9c:	2b03      	cmp	r3, #3
 8013c9e:	f200 808f 	bhi.w	8013dc0 <_dtoa_r+0x2f0>
 8013ca2:	e8df f003 	tbb	[pc, r3]
 8013ca6:	7f7d      	.short	0x7f7d
 8013ca8:	7131      	.short	0x7131
 8013caa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013cae:	441d      	add	r5, r3
 8013cb0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013cb4:	2820      	cmp	r0, #32
 8013cb6:	dd13      	ble.n	8013ce0 <_dtoa_r+0x210>
 8013cb8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013cbc:	9b00      	ldr	r3, [sp, #0]
 8013cbe:	fa08 f800 	lsl.w	r8, r8, r0
 8013cc2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013cc6:	fa23 f000 	lsr.w	r0, r3, r0
 8013cca:	ea48 0000 	orr.w	r0, r8, r0
 8013cce:	f7ec fc31 	bl	8000534 <__aeabi_ui2d>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	4682      	mov	sl, r0
 8013cd6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013cda:	3d01      	subs	r5, #1
 8013cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8013cde:	e772      	b.n	8013bc6 <_dtoa_r+0xf6>
 8013ce0:	9b00      	ldr	r3, [sp, #0]
 8013ce2:	f1c0 0020 	rsb	r0, r0, #32
 8013ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8013cea:	e7f0      	b.n	8013cce <_dtoa_r+0x1fe>
 8013cec:	2301      	movs	r3, #1
 8013cee:	e7b1      	b.n	8013c54 <_dtoa_r+0x184>
 8013cf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8013cf2:	e7b0      	b.n	8013c56 <_dtoa_r+0x186>
 8013cf4:	9b05      	ldr	r3, [sp, #20]
 8013cf6:	eba3 030a 	sub.w	r3, r3, sl
 8013cfa:	9305      	str	r3, [sp, #20]
 8013cfc:	f1ca 0300 	rsb	r3, sl, #0
 8013d00:	9307      	str	r3, [sp, #28]
 8013d02:	2300      	movs	r3, #0
 8013d04:	930e      	str	r3, [sp, #56]	; 0x38
 8013d06:	e7bb      	b.n	8013c80 <_dtoa_r+0x1b0>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8013d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	dd59      	ble.n	8013dc6 <_dtoa_r+0x2f6>
 8013d12:	9302      	str	r3, [sp, #8]
 8013d14:	4699      	mov	r9, r3
 8013d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013d18:	2200      	movs	r2, #0
 8013d1a:	6072      	str	r2, [r6, #4]
 8013d1c:	2204      	movs	r2, #4
 8013d1e:	f102 0014 	add.w	r0, r2, #20
 8013d22:	4298      	cmp	r0, r3
 8013d24:	6871      	ldr	r1, [r6, #4]
 8013d26:	d953      	bls.n	8013dd0 <_dtoa_r+0x300>
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f000 ffd7 	bl	8014cdc <_Balloc>
 8013d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d30:	6030      	str	r0, [r6, #0]
 8013d32:	f1b9 0f0e 	cmp.w	r9, #14
 8013d36:	f8d3 b000 	ldr.w	fp, [r3]
 8013d3a:	f200 80e6 	bhi.w	8013f0a <_dtoa_r+0x43a>
 8013d3e:	2d00      	cmp	r5, #0
 8013d40:	f000 80e3 	beq.w	8013f0a <_dtoa_r+0x43a>
 8013d44:	ed9d 7b00 	vldr	d7, [sp]
 8013d48:	f1ba 0f00 	cmp.w	sl, #0
 8013d4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8013d50:	dd74      	ble.n	8013e3c <_dtoa_r+0x36c>
 8013d52:	4a2a      	ldr	r2, [pc, #168]	; (8013dfc <_dtoa_r+0x32c>)
 8013d54:	f00a 030f 	and.w	r3, sl, #15
 8013d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013d5c:	ed93 7b00 	vldr	d7, [r3]
 8013d60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8013d64:	06f0      	lsls	r0, r6, #27
 8013d66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013d6a:	d565      	bpl.n	8013e38 <_dtoa_r+0x368>
 8013d6c:	4b24      	ldr	r3, [pc, #144]	; (8013e00 <_dtoa_r+0x330>)
 8013d6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013d72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013d76:	f7ec fd81 	bl	800087c <__aeabi_ddiv>
 8013d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8013d7e:	f006 060f 	and.w	r6, r6, #15
 8013d82:	2503      	movs	r5, #3
 8013d84:	4f1e      	ldr	r7, [pc, #120]	; (8013e00 <_dtoa_r+0x330>)
 8013d86:	e04c      	b.n	8013e22 <_dtoa_r+0x352>
 8013d88:	2301      	movs	r3, #1
 8013d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8013d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d8e:	4453      	add	r3, sl
 8013d90:	f103 0901 	add.w	r9, r3, #1
 8013d94:	9302      	str	r3, [sp, #8]
 8013d96:	464b      	mov	r3, r9
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	bfb8      	it	lt
 8013d9c:	2301      	movlt	r3, #1
 8013d9e:	e7ba      	b.n	8013d16 <_dtoa_r+0x246>
 8013da0:	2300      	movs	r3, #0
 8013da2:	e7b2      	b.n	8013d0a <_dtoa_r+0x23a>
 8013da4:	2300      	movs	r3, #0
 8013da6:	e7f0      	b.n	8013d8a <_dtoa_r+0x2ba>
 8013da8:	2501      	movs	r5, #1
 8013daa:	2300      	movs	r3, #0
 8013dac:	9306      	str	r3, [sp, #24]
 8013dae:	950a      	str	r5, [sp, #40]	; 0x28
 8013db0:	f04f 33ff 	mov.w	r3, #4294967295
 8013db4:	9302      	str	r3, [sp, #8]
 8013db6:	4699      	mov	r9, r3
 8013db8:	2200      	movs	r2, #0
 8013dba:	2312      	movs	r3, #18
 8013dbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8013dbe:	e7aa      	b.n	8013d16 <_dtoa_r+0x246>
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8013dc4:	e7f4      	b.n	8013db0 <_dtoa_r+0x2e0>
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	9302      	str	r3, [sp, #8]
 8013dca:	4699      	mov	r9, r3
 8013dcc:	461a      	mov	r2, r3
 8013dce:	e7f5      	b.n	8013dbc <_dtoa_r+0x2ec>
 8013dd0:	3101      	adds	r1, #1
 8013dd2:	6071      	str	r1, [r6, #4]
 8013dd4:	0052      	lsls	r2, r2, #1
 8013dd6:	e7a2      	b.n	8013d1e <_dtoa_r+0x24e>
 8013dd8:	636f4361 	.word	0x636f4361
 8013ddc:	3fd287a7 	.word	0x3fd287a7
 8013de0:	8b60c8b3 	.word	0x8b60c8b3
 8013de4:	3fc68a28 	.word	0x3fc68a28
 8013de8:	509f79fb 	.word	0x509f79fb
 8013dec:	3fd34413 	.word	0x3fd34413
 8013df0:	7ff00000 	.word	0x7ff00000
 8013df4:	0802242d 	.word	0x0802242d
 8013df8:	3ff80000 	.word	0x3ff80000
 8013dfc:	08022548 	.word	0x08022548
 8013e00:	08022520 	.word	0x08022520
 8013e04:	080224a9 	.word	0x080224a9
 8013e08:	07f1      	lsls	r1, r6, #31
 8013e0a:	d508      	bpl.n	8013e1e <_dtoa_r+0x34e>
 8013e0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013e14:	f7ec fc08 	bl	8000628 <__aeabi_dmul>
 8013e18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e1c:	3501      	adds	r5, #1
 8013e1e:	1076      	asrs	r6, r6, #1
 8013e20:	3708      	adds	r7, #8
 8013e22:	2e00      	cmp	r6, #0
 8013e24:	d1f0      	bne.n	8013e08 <_dtoa_r+0x338>
 8013e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e2e:	f7ec fd25 	bl	800087c <__aeabi_ddiv>
 8013e32:	e9cd 0100 	strd	r0, r1, [sp]
 8013e36:	e01a      	b.n	8013e6e <_dtoa_r+0x39e>
 8013e38:	2502      	movs	r5, #2
 8013e3a:	e7a3      	b.n	8013d84 <_dtoa_r+0x2b4>
 8013e3c:	f000 80a0 	beq.w	8013f80 <_dtoa_r+0x4b0>
 8013e40:	f1ca 0600 	rsb	r6, sl, #0
 8013e44:	4b9f      	ldr	r3, [pc, #636]	; (80140c4 <_dtoa_r+0x5f4>)
 8013e46:	4fa0      	ldr	r7, [pc, #640]	; (80140c8 <_dtoa_r+0x5f8>)
 8013e48:	f006 020f 	and.w	r2, r6, #15
 8013e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013e58:	f7ec fbe6 	bl	8000628 <__aeabi_dmul>
 8013e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8013e60:	1136      	asrs	r6, r6, #4
 8013e62:	2300      	movs	r3, #0
 8013e64:	2502      	movs	r5, #2
 8013e66:	2e00      	cmp	r6, #0
 8013e68:	d17f      	bne.n	8013f6a <_dtoa_r+0x49a>
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d1e1      	bne.n	8013e32 <_dtoa_r+0x362>
 8013e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f000 8087 	beq.w	8013f84 <_dtoa_r+0x4b4>
 8013e76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	4b93      	ldr	r3, [pc, #588]	; (80140cc <_dtoa_r+0x5fc>)
 8013e7e:	4630      	mov	r0, r6
 8013e80:	4639      	mov	r1, r7
 8013e82:	f7ec fe43 	bl	8000b0c <__aeabi_dcmplt>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d07c      	beq.n	8013f84 <_dtoa_r+0x4b4>
 8013e8a:	f1b9 0f00 	cmp.w	r9, #0
 8013e8e:	d079      	beq.n	8013f84 <_dtoa_r+0x4b4>
 8013e90:	9b02      	ldr	r3, [sp, #8]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	dd35      	ble.n	8013f02 <_dtoa_r+0x432>
 8013e96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013e9a:	9308      	str	r3, [sp, #32]
 8013e9c:	4639      	mov	r1, r7
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	4b8b      	ldr	r3, [pc, #556]	; (80140d0 <_dtoa_r+0x600>)
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f7ec fbc0 	bl	8000628 <__aeabi_dmul>
 8013ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8013eac:	9f02      	ldr	r7, [sp, #8]
 8013eae:	3501      	adds	r5, #1
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	f7ec fb4f 	bl	8000554 <__aeabi_i2d>
 8013eb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013eba:	f7ec fbb5 	bl	8000628 <__aeabi_dmul>
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	4b84      	ldr	r3, [pc, #528]	; (80140d4 <_dtoa_r+0x604>)
 8013ec2:	f7ec f9fb 	bl	80002bc <__adddf3>
 8013ec6:	4605      	mov	r5, r0
 8013ec8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013ecc:	2f00      	cmp	r7, #0
 8013ece:	d15d      	bne.n	8013f8c <_dtoa_r+0x4bc>
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	4b81      	ldr	r3, [pc, #516]	; (80140d8 <_dtoa_r+0x608>)
 8013ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ed8:	f7ec f9ee 	bl	80002b8 <__aeabi_dsub>
 8013edc:	462a      	mov	r2, r5
 8013ede:	4633      	mov	r3, r6
 8013ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8013ee4:	f7ec fe30 	bl	8000b48 <__aeabi_dcmpgt>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	f040 8288 	bne.w	80143fe <_dtoa_r+0x92e>
 8013eee:	462a      	mov	r2, r5
 8013ef0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ef8:	f7ec fe08 	bl	8000b0c <__aeabi_dcmplt>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	f040 827c 	bne.w	80143fa <_dtoa_r+0x92a>
 8013f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f06:	e9cd 2300 	strd	r2, r3, [sp]
 8013f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f2c0 8150 	blt.w	80141b2 <_dtoa_r+0x6e2>
 8013f12:	f1ba 0f0e 	cmp.w	sl, #14
 8013f16:	f300 814c 	bgt.w	80141b2 <_dtoa_r+0x6e2>
 8013f1a:	4b6a      	ldr	r3, [pc, #424]	; (80140c4 <_dtoa_r+0x5f4>)
 8013f1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013f20:	ed93 7b00 	vldr	d7, [r3]
 8013f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f2c:	f280 80d8 	bge.w	80140e0 <_dtoa_r+0x610>
 8013f30:	f1b9 0f00 	cmp.w	r9, #0
 8013f34:	f300 80d4 	bgt.w	80140e0 <_dtoa_r+0x610>
 8013f38:	f040 825e 	bne.w	80143f8 <_dtoa_r+0x928>
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	4b66      	ldr	r3, [pc, #408]	; (80140d8 <_dtoa_r+0x608>)
 8013f40:	ec51 0b17 	vmov	r0, r1, d7
 8013f44:	f7ec fb70 	bl	8000628 <__aeabi_dmul>
 8013f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f4c:	f7ec fdf2 	bl	8000b34 <__aeabi_dcmpge>
 8013f50:	464f      	mov	r7, r9
 8013f52:	464e      	mov	r6, r9
 8013f54:	2800      	cmp	r0, #0
 8013f56:	f040 8234 	bne.w	80143c2 <_dtoa_r+0x8f2>
 8013f5a:	2331      	movs	r3, #49	; 0x31
 8013f5c:	f10b 0501 	add.w	r5, fp, #1
 8013f60:	f88b 3000 	strb.w	r3, [fp]
 8013f64:	f10a 0a01 	add.w	sl, sl, #1
 8013f68:	e22f      	b.n	80143ca <_dtoa_r+0x8fa>
 8013f6a:	07f2      	lsls	r2, r6, #31
 8013f6c:	d505      	bpl.n	8013f7a <_dtoa_r+0x4aa>
 8013f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f72:	f7ec fb59 	bl	8000628 <__aeabi_dmul>
 8013f76:	3501      	adds	r5, #1
 8013f78:	2301      	movs	r3, #1
 8013f7a:	1076      	asrs	r6, r6, #1
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	e772      	b.n	8013e66 <_dtoa_r+0x396>
 8013f80:	2502      	movs	r5, #2
 8013f82:	e774      	b.n	8013e6e <_dtoa_r+0x39e>
 8013f84:	f8cd a020 	str.w	sl, [sp, #32]
 8013f88:	464f      	mov	r7, r9
 8013f8a:	e791      	b.n	8013eb0 <_dtoa_r+0x3e0>
 8013f8c:	4b4d      	ldr	r3, [pc, #308]	; (80140c4 <_dtoa_r+0x5f4>)
 8013f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013f92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d047      	beq.n	801402c <_dtoa_r+0x55c>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	460b      	mov	r3, r1
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	494e      	ldr	r1, [pc, #312]	; (80140dc <_dtoa_r+0x60c>)
 8013fa4:	f7ec fc6a 	bl	800087c <__aeabi_ddiv>
 8013fa8:	462a      	mov	r2, r5
 8013faa:	4633      	mov	r3, r6
 8013fac:	f7ec f984 	bl	80002b8 <__aeabi_dsub>
 8013fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013fb4:	465d      	mov	r5, fp
 8013fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fba:	f7ec fde5 	bl	8000b88 <__aeabi_d2iz>
 8013fbe:	4606      	mov	r6, r0
 8013fc0:	f7ec fac8 	bl	8000554 <__aeabi_i2d>
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fcc:	f7ec f974 	bl	80002b8 <__aeabi_dsub>
 8013fd0:	3630      	adds	r6, #48	; 0x30
 8013fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8013fd6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013fda:	e9cd 0100 	strd	r0, r1, [sp]
 8013fde:	f7ec fd95 	bl	8000b0c <__aeabi_dcmplt>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	d163      	bne.n	80140ae <_dtoa_r+0x5de>
 8013fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fea:	2000      	movs	r0, #0
 8013fec:	4937      	ldr	r1, [pc, #220]	; (80140cc <_dtoa_r+0x5fc>)
 8013fee:	f7ec f963 	bl	80002b8 <__aeabi_dsub>
 8013ff2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013ff6:	f7ec fd89 	bl	8000b0c <__aeabi_dcmplt>
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	f040 80b7 	bne.w	801416e <_dtoa_r+0x69e>
 8014000:	eba5 030b 	sub.w	r3, r5, fp
 8014004:	429f      	cmp	r7, r3
 8014006:	f77f af7c 	ble.w	8013f02 <_dtoa_r+0x432>
 801400a:	2200      	movs	r2, #0
 801400c:	4b30      	ldr	r3, [pc, #192]	; (80140d0 <_dtoa_r+0x600>)
 801400e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014012:	f7ec fb09 	bl	8000628 <__aeabi_dmul>
 8014016:	2200      	movs	r2, #0
 8014018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801401c:	4b2c      	ldr	r3, [pc, #176]	; (80140d0 <_dtoa_r+0x600>)
 801401e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014022:	f7ec fb01 	bl	8000628 <__aeabi_dmul>
 8014026:	e9cd 0100 	strd	r0, r1, [sp]
 801402a:	e7c4      	b.n	8013fb6 <_dtoa_r+0x4e6>
 801402c:	462a      	mov	r2, r5
 801402e:	4633      	mov	r3, r6
 8014030:	f7ec fafa 	bl	8000628 <__aeabi_dmul>
 8014034:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014038:	eb0b 0507 	add.w	r5, fp, r7
 801403c:	465e      	mov	r6, fp
 801403e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014042:	f7ec fda1 	bl	8000b88 <__aeabi_d2iz>
 8014046:	4607      	mov	r7, r0
 8014048:	f7ec fa84 	bl	8000554 <__aeabi_i2d>
 801404c:	3730      	adds	r7, #48	; 0x30
 801404e:	4602      	mov	r2, r0
 8014050:	460b      	mov	r3, r1
 8014052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014056:	f7ec f92f 	bl	80002b8 <__aeabi_dsub>
 801405a:	f806 7b01 	strb.w	r7, [r6], #1
 801405e:	42ae      	cmp	r6, r5
 8014060:	e9cd 0100 	strd	r0, r1, [sp]
 8014064:	f04f 0200 	mov.w	r2, #0
 8014068:	d126      	bne.n	80140b8 <_dtoa_r+0x5e8>
 801406a:	4b1c      	ldr	r3, [pc, #112]	; (80140dc <_dtoa_r+0x60c>)
 801406c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014070:	f7ec f924 	bl	80002bc <__adddf3>
 8014074:	4602      	mov	r2, r0
 8014076:	460b      	mov	r3, r1
 8014078:	e9dd 0100 	ldrd	r0, r1, [sp]
 801407c:	f7ec fd64 	bl	8000b48 <__aeabi_dcmpgt>
 8014080:	2800      	cmp	r0, #0
 8014082:	d174      	bne.n	801416e <_dtoa_r+0x69e>
 8014084:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014088:	2000      	movs	r0, #0
 801408a:	4914      	ldr	r1, [pc, #80]	; (80140dc <_dtoa_r+0x60c>)
 801408c:	f7ec f914 	bl	80002b8 <__aeabi_dsub>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014098:	f7ec fd38 	bl	8000b0c <__aeabi_dcmplt>
 801409c:	2800      	cmp	r0, #0
 801409e:	f43f af30 	beq.w	8013f02 <_dtoa_r+0x432>
 80140a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80140a6:	2b30      	cmp	r3, #48	; 0x30
 80140a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80140ac:	d002      	beq.n	80140b4 <_dtoa_r+0x5e4>
 80140ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80140b2:	e04a      	b.n	801414a <_dtoa_r+0x67a>
 80140b4:	4615      	mov	r5, r2
 80140b6:	e7f4      	b.n	80140a2 <_dtoa_r+0x5d2>
 80140b8:	4b05      	ldr	r3, [pc, #20]	; (80140d0 <_dtoa_r+0x600>)
 80140ba:	f7ec fab5 	bl	8000628 <__aeabi_dmul>
 80140be:	e9cd 0100 	strd	r0, r1, [sp]
 80140c2:	e7bc      	b.n	801403e <_dtoa_r+0x56e>
 80140c4:	08022548 	.word	0x08022548
 80140c8:	08022520 	.word	0x08022520
 80140cc:	3ff00000 	.word	0x3ff00000
 80140d0:	40240000 	.word	0x40240000
 80140d4:	401c0000 	.word	0x401c0000
 80140d8:	40140000 	.word	0x40140000
 80140dc:	3fe00000 	.word	0x3fe00000
 80140e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80140e4:	465d      	mov	r5, fp
 80140e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140ea:	4630      	mov	r0, r6
 80140ec:	4639      	mov	r1, r7
 80140ee:	f7ec fbc5 	bl	800087c <__aeabi_ddiv>
 80140f2:	f7ec fd49 	bl	8000b88 <__aeabi_d2iz>
 80140f6:	4680      	mov	r8, r0
 80140f8:	f7ec fa2c 	bl	8000554 <__aeabi_i2d>
 80140fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014100:	f7ec fa92 	bl	8000628 <__aeabi_dmul>
 8014104:	4602      	mov	r2, r0
 8014106:	460b      	mov	r3, r1
 8014108:	4630      	mov	r0, r6
 801410a:	4639      	mov	r1, r7
 801410c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014110:	f7ec f8d2 	bl	80002b8 <__aeabi_dsub>
 8014114:	f805 6b01 	strb.w	r6, [r5], #1
 8014118:	eba5 060b 	sub.w	r6, r5, fp
 801411c:	45b1      	cmp	r9, r6
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	d139      	bne.n	8014198 <_dtoa_r+0x6c8>
 8014124:	f7ec f8ca 	bl	80002bc <__adddf3>
 8014128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801412c:	4606      	mov	r6, r0
 801412e:	460f      	mov	r7, r1
 8014130:	f7ec fd0a 	bl	8000b48 <__aeabi_dcmpgt>
 8014134:	b9c8      	cbnz	r0, 801416a <_dtoa_r+0x69a>
 8014136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801413a:	4630      	mov	r0, r6
 801413c:	4639      	mov	r1, r7
 801413e:	f7ec fcdb 	bl	8000af8 <__aeabi_dcmpeq>
 8014142:	b110      	cbz	r0, 801414a <_dtoa_r+0x67a>
 8014144:	f018 0f01 	tst.w	r8, #1
 8014148:	d10f      	bne.n	801416a <_dtoa_r+0x69a>
 801414a:	9904      	ldr	r1, [sp, #16]
 801414c:	4620      	mov	r0, r4
 801414e:	f000 fdf9 	bl	8014d44 <_Bfree>
 8014152:	2300      	movs	r3, #0
 8014154:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014156:	702b      	strb	r3, [r5, #0]
 8014158:	f10a 0301 	add.w	r3, sl, #1
 801415c:	6013      	str	r3, [r2, #0]
 801415e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014160:	2b00      	cmp	r3, #0
 8014162:	f000 8241 	beq.w	80145e8 <_dtoa_r+0xb18>
 8014166:	601d      	str	r5, [r3, #0]
 8014168:	e23e      	b.n	80145e8 <_dtoa_r+0xb18>
 801416a:	f8cd a020 	str.w	sl, [sp, #32]
 801416e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014172:	2a39      	cmp	r2, #57	; 0x39
 8014174:	f105 33ff 	add.w	r3, r5, #4294967295
 8014178:	d108      	bne.n	801418c <_dtoa_r+0x6bc>
 801417a:	459b      	cmp	fp, r3
 801417c:	d10a      	bne.n	8014194 <_dtoa_r+0x6c4>
 801417e:	9b08      	ldr	r3, [sp, #32]
 8014180:	3301      	adds	r3, #1
 8014182:	9308      	str	r3, [sp, #32]
 8014184:	2330      	movs	r3, #48	; 0x30
 8014186:	f88b 3000 	strb.w	r3, [fp]
 801418a:	465b      	mov	r3, fp
 801418c:	781a      	ldrb	r2, [r3, #0]
 801418e:	3201      	adds	r2, #1
 8014190:	701a      	strb	r2, [r3, #0]
 8014192:	e78c      	b.n	80140ae <_dtoa_r+0x5de>
 8014194:	461d      	mov	r5, r3
 8014196:	e7ea      	b.n	801416e <_dtoa_r+0x69e>
 8014198:	2200      	movs	r2, #0
 801419a:	4b9b      	ldr	r3, [pc, #620]	; (8014408 <_dtoa_r+0x938>)
 801419c:	f7ec fa44 	bl	8000628 <__aeabi_dmul>
 80141a0:	2200      	movs	r2, #0
 80141a2:	2300      	movs	r3, #0
 80141a4:	4606      	mov	r6, r0
 80141a6:	460f      	mov	r7, r1
 80141a8:	f7ec fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d09a      	beq.n	80140e6 <_dtoa_r+0x616>
 80141b0:	e7cb      	b.n	801414a <_dtoa_r+0x67a>
 80141b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141b4:	2a00      	cmp	r2, #0
 80141b6:	f000 808b 	beq.w	80142d0 <_dtoa_r+0x800>
 80141ba:	9a06      	ldr	r2, [sp, #24]
 80141bc:	2a01      	cmp	r2, #1
 80141be:	dc6e      	bgt.n	801429e <_dtoa_r+0x7ce>
 80141c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80141c2:	2a00      	cmp	r2, #0
 80141c4:	d067      	beq.n	8014296 <_dtoa_r+0x7c6>
 80141c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80141ca:	9f07      	ldr	r7, [sp, #28]
 80141cc:	9d05      	ldr	r5, [sp, #20]
 80141ce:	9a05      	ldr	r2, [sp, #20]
 80141d0:	2101      	movs	r1, #1
 80141d2:	441a      	add	r2, r3
 80141d4:	4620      	mov	r0, r4
 80141d6:	9205      	str	r2, [sp, #20]
 80141d8:	4498      	add	r8, r3
 80141da:	f000 fe91 	bl	8014f00 <__i2b>
 80141de:	4606      	mov	r6, r0
 80141e0:	2d00      	cmp	r5, #0
 80141e2:	dd0c      	ble.n	80141fe <_dtoa_r+0x72e>
 80141e4:	f1b8 0f00 	cmp.w	r8, #0
 80141e8:	dd09      	ble.n	80141fe <_dtoa_r+0x72e>
 80141ea:	4545      	cmp	r5, r8
 80141ec:	9a05      	ldr	r2, [sp, #20]
 80141ee:	462b      	mov	r3, r5
 80141f0:	bfa8      	it	ge
 80141f2:	4643      	movge	r3, r8
 80141f4:	1ad2      	subs	r2, r2, r3
 80141f6:	9205      	str	r2, [sp, #20]
 80141f8:	1aed      	subs	r5, r5, r3
 80141fa:	eba8 0803 	sub.w	r8, r8, r3
 80141fe:	9b07      	ldr	r3, [sp, #28]
 8014200:	b1eb      	cbz	r3, 801423e <_dtoa_r+0x76e>
 8014202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014204:	2b00      	cmp	r3, #0
 8014206:	d067      	beq.n	80142d8 <_dtoa_r+0x808>
 8014208:	b18f      	cbz	r7, 801422e <_dtoa_r+0x75e>
 801420a:	4631      	mov	r1, r6
 801420c:	463a      	mov	r2, r7
 801420e:	4620      	mov	r0, r4
 8014210:	f000 ff16 	bl	8015040 <__pow5mult>
 8014214:	9a04      	ldr	r2, [sp, #16]
 8014216:	4601      	mov	r1, r0
 8014218:	4606      	mov	r6, r0
 801421a:	4620      	mov	r0, r4
 801421c:	f000 fe79 	bl	8014f12 <__multiply>
 8014220:	9904      	ldr	r1, [sp, #16]
 8014222:	9008      	str	r0, [sp, #32]
 8014224:	4620      	mov	r0, r4
 8014226:	f000 fd8d 	bl	8014d44 <_Bfree>
 801422a:	9b08      	ldr	r3, [sp, #32]
 801422c:	9304      	str	r3, [sp, #16]
 801422e:	9b07      	ldr	r3, [sp, #28]
 8014230:	1bda      	subs	r2, r3, r7
 8014232:	d004      	beq.n	801423e <_dtoa_r+0x76e>
 8014234:	9904      	ldr	r1, [sp, #16]
 8014236:	4620      	mov	r0, r4
 8014238:	f000 ff02 	bl	8015040 <__pow5mult>
 801423c:	9004      	str	r0, [sp, #16]
 801423e:	2101      	movs	r1, #1
 8014240:	4620      	mov	r0, r4
 8014242:	f000 fe5d 	bl	8014f00 <__i2b>
 8014246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014248:	4607      	mov	r7, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	f000 81d0 	beq.w	80145f0 <_dtoa_r+0xb20>
 8014250:	461a      	mov	r2, r3
 8014252:	4601      	mov	r1, r0
 8014254:	4620      	mov	r0, r4
 8014256:	f000 fef3 	bl	8015040 <__pow5mult>
 801425a:	9b06      	ldr	r3, [sp, #24]
 801425c:	2b01      	cmp	r3, #1
 801425e:	4607      	mov	r7, r0
 8014260:	dc40      	bgt.n	80142e4 <_dtoa_r+0x814>
 8014262:	9b00      	ldr	r3, [sp, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d139      	bne.n	80142dc <_dtoa_r+0x80c>
 8014268:	9b01      	ldr	r3, [sp, #4]
 801426a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801426e:	2b00      	cmp	r3, #0
 8014270:	d136      	bne.n	80142e0 <_dtoa_r+0x810>
 8014272:	9b01      	ldr	r3, [sp, #4]
 8014274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014278:	0d1b      	lsrs	r3, r3, #20
 801427a:	051b      	lsls	r3, r3, #20
 801427c:	b12b      	cbz	r3, 801428a <_dtoa_r+0x7ba>
 801427e:	9b05      	ldr	r3, [sp, #20]
 8014280:	3301      	adds	r3, #1
 8014282:	9305      	str	r3, [sp, #20]
 8014284:	f108 0801 	add.w	r8, r8, #1
 8014288:	2301      	movs	r3, #1
 801428a:	9307      	str	r3, [sp, #28]
 801428c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801428e:	2b00      	cmp	r3, #0
 8014290:	d12a      	bne.n	80142e8 <_dtoa_r+0x818>
 8014292:	2001      	movs	r0, #1
 8014294:	e030      	b.n	80142f8 <_dtoa_r+0x828>
 8014296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014298:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801429c:	e795      	b.n	80141ca <_dtoa_r+0x6fa>
 801429e:	9b07      	ldr	r3, [sp, #28]
 80142a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80142a4:	42bb      	cmp	r3, r7
 80142a6:	bfbf      	itttt	lt
 80142a8:	9b07      	ldrlt	r3, [sp, #28]
 80142aa:	9707      	strlt	r7, [sp, #28]
 80142ac:	1afa      	sublt	r2, r7, r3
 80142ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80142b0:	bfbb      	ittet	lt
 80142b2:	189b      	addlt	r3, r3, r2
 80142b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80142b6:	1bdf      	subge	r7, r3, r7
 80142b8:	2700      	movlt	r7, #0
 80142ba:	f1b9 0f00 	cmp.w	r9, #0
 80142be:	bfb5      	itete	lt
 80142c0:	9b05      	ldrlt	r3, [sp, #20]
 80142c2:	9d05      	ldrge	r5, [sp, #20]
 80142c4:	eba3 0509 	sublt.w	r5, r3, r9
 80142c8:	464b      	movge	r3, r9
 80142ca:	bfb8      	it	lt
 80142cc:	2300      	movlt	r3, #0
 80142ce:	e77e      	b.n	80141ce <_dtoa_r+0x6fe>
 80142d0:	9f07      	ldr	r7, [sp, #28]
 80142d2:	9d05      	ldr	r5, [sp, #20]
 80142d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80142d6:	e783      	b.n	80141e0 <_dtoa_r+0x710>
 80142d8:	9a07      	ldr	r2, [sp, #28]
 80142da:	e7ab      	b.n	8014234 <_dtoa_r+0x764>
 80142dc:	2300      	movs	r3, #0
 80142de:	e7d4      	b.n	801428a <_dtoa_r+0x7ba>
 80142e0:	9b00      	ldr	r3, [sp, #0]
 80142e2:	e7d2      	b.n	801428a <_dtoa_r+0x7ba>
 80142e4:	2300      	movs	r3, #0
 80142e6:	9307      	str	r3, [sp, #28]
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80142ee:	6918      	ldr	r0, [r3, #16]
 80142f0:	f000 fdb8 	bl	8014e64 <__hi0bits>
 80142f4:	f1c0 0020 	rsb	r0, r0, #32
 80142f8:	4440      	add	r0, r8
 80142fa:	f010 001f 	ands.w	r0, r0, #31
 80142fe:	d047      	beq.n	8014390 <_dtoa_r+0x8c0>
 8014300:	f1c0 0320 	rsb	r3, r0, #32
 8014304:	2b04      	cmp	r3, #4
 8014306:	dd3b      	ble.n	8014380 <_dtoa_r+0x8b0>
 8014308:	9b05      	ldr	r3, [sp, #20]
 801430a:	f1c0 001c 	rsb	r0, r0, #28
 801430e:	4403      	add	r3, r0
 8014310:	9305      	str	r3, [sp, #20]
 8014312:	4405      	add	r5, r0
 8014314:	4480      	add	r8, r0
 8014316:	9b05      	ldr	r3, [sp, #20]
 8014318:	2b00      	cmp	r3, #0
 801431a:	dd05      	ble.n	8014328 <_dtoa_r+0x858>
 801431c:	461a      	mov	r2, r3
 801431e:	9904      	ldr	r1, [sp, #16]
 8014320:	4620      	mov	r0, r4
 8014322:	f000 fedb 	bl	80150dc <__lshift>
 8014326:	9004      	str	r0, [sp, #16]
 8014328:	f1b8 0f00 	cmp.w	r8, #0
 801432c:	dd05      	ble.n	801433a <_dtoa_r+0x86a>
 801432e:	4639      	mov	r1, r7
 8014330:	4642      	mov	r2, r8
 8014332:	4620      	mov	r0, r4
 8014334:	f000 fed2 	bl	80150dc <__lshift>
 8014338:	4607      	mov	r7, r0
 801433a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801433c:	b353      	cbz	r3, 8014394 <_dtoa_r+0x8c4>
 801433e:	4639      	mov	r1, r7
 8014340:	9804      	ldr	r0, [sp, #16]
 8014342:	f000 ff1f 	bl	8015184 <__mcmp>
 8014346:	2800      	cmp	r0, #0
 8014348:	da24      	bge.n	8014394 <_dtoa_r+0x8c4>
 801434a:	2300      	movs	r3, #0
 801434c:	220a      	movs	r2, #10
 801434e:	9904      	ldr	r1, [sp, #16]
 8014350:	4620      	mov	r0, r4
 8014352:	f000 fd0e 	bl	8014d72 <__multadd>
 8014356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014358:	9004      	str	r0, [sp, #16]
 801435a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801435e:	2b00      	cmp	r3, #0
 8014360:	f000 814d 	beq.w	80145fe <_dtoa_r+0xb2e>
 8014364:	2300      	movs	r3, #0
 8014366:	4631      	mov	r1, r6
 8014368:	220a      	movs	r2, #10
 801436a:	4620      	mov	r0, r4
 801436c:	f000 fd01 	bl	8014d72 <__multadd>
 8014370:	9b02      	ldr	r3, [sp, #8]
 8014372:	2b00      	cmp	r3, #0
 8014374:	4606      	mov	r6, r0
 8014376:	dc4f      	bgt.n	8014418 <_dtoa_r+0x948>
 8014378:	9b06      	ldr	r3, [sp, #24]
 801437a:	2b02      	cmp	r3, #2
 801437c:	dd4c      	ble.n	8014418 <_dtoa_r+0x948>
 801437e:	e011      	b.n	80143a4 <_dtoa_r+0x8d4>
 8014380:	d0c9      	beq.n	8014316 <_dtoa_r+0x846>
 8014382:	9a05      	ldr	r2, [sp, #20]
 8014384:	331c      	adds	r3, #28
 8014386:	441a      	add	r2, r3
 8014388:	9205      	str	r2, [sp, #20]
 801438a:	441d      	add	r5, r3
 801438c:	4498      	add	r8, r3
 801438e:	e7c2      	b.n	8014316 <_dtoa_r+0x846>
 8014390:	4603      	mov	r3, r0
 8014392:	e7f6      	b.n	8014382 <_dtoa_r+0x8b2>
 8014394:	f1b9 0f00 	cmp.w	r9, #0
 8014398:	dc38      	bgt.n	801440c <_dtoa_r+0x93c>
 801439a:	9b06      	ldr	r3, [sp, #24]
 801439c:	2b02      	cmp	r3, #2
 801439e:	dd35      	ble.n	801440c <_dtoa_r+0x93c>
 80143a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80143a4:	9b02      	ldr	r3, [sp, #8]
 80143a6:	b963      	cbnz	r3, 80143c2 <_dtoa_r+0x8f2>
 80143a8:	4639      	mov	r1, r7
 80143aa:	2205      	movs	r2, #5
 80143ac:	4620      	mov	r0, r4
 80143ae:	f000 fce0 	bl	8014d72 <__multadd>
 80143b2:	4601      	mov	r1, r0
 80143b4:	4607      	mov	r7, r0
 80143b6:	9804      	ldr	r0, [sp, #16]
 80143b8:	f000 fee4 	bl	8015184 <__mcmp>
 80143bc:	2800      	cmp	r0, #0
 80143be:	f73f adcc 	bgt.w	8013f5a <_dtoa_r+0x48a>
 80143c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143c4:	465d      	mov	r5, fp
 80143c6:	ea6f 0a03 	mvn.w	sl, r3
 80143ca:	f04f 0900 	mov.w	r9, #0
 80143ce:	4639      	mov	r1, r7
 80143d0:	4620      	mov	r0, r4
 80143d2:	f000 fcb7 	bl	8014d44 <_Bfree>
 80143d6:	2e00      	cmp	r6, #0
 80143d8:	f43f aeb7 	beq.w	801414a <_dtoa_r+0x67a>
 80143dc:	f1b9 0f00 	cmp.w	r9, #0
 80143e0:	d005      	beq.n	80143ee <_dtoa_r+0x91e>
 80143e2:	45b1      	cmp	r9, r6
 80143e4:	d003      	beq.n	80143ee <_dtoa_r+0x91e>
 80143e6:	4649      	mov	r1, r9
 80143e8:	4620      	mov	r0, r4
 80143ea:	f000 fcab 	bl	8014d44 <_Bfree>
 80143ee:	4631      	mov	r1, r6
 80143f0:	4620      	mov	r0, r4
 80143f2:	f000 fca7 	bl	8014d44 <_Bfree>
 80143f6:	e6a8      	b.n	801414a <_dtoa_r+0x67a>
 80143f8:	2700      	movs	r7, #0
 80143fa:	463e      	mov	r6, r7
 80143fc:	e7e1      	b.n	80143c2 <_dtoa_r+0x8f2>
 80143fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014402:	463e      	mov	r6, r7
 8014404:	e5a9      	b.n	8013f5a <_dtoa_r+0x48a>
 8014406:	bf00      	nop
 8014408:	40240000 	.word	0x40240000
 801440c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801440e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014412:	2b00      	cmp	r3, #0
 8014414:	f000 80fa 	beq.w	801460c <_dtoa_r+0xb3c>
 8014418:	2d00      	cmp	r5, #0
 801441a:	dd05      	ble.n	8014428 <_dtoa_r+0x958>
 801441c:	4631      	mov	r1, r6
 801441e:	462a      	mov	r2, r5
 8014420:	4620      	mov	r0, r4
 8014422:	f000 fe5b 	bl	80150dc <__lshift>
 8014426:	4606      	mov	r6, r0
 8014428:	9b07      	ldr	r3, [sp, #28]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d04c      	beq.n	80144c8 <_dtoa_r+0x9f8>
 801442e:	6871      	ldr	r1, [r6, #4]
 8014430:	4620      	mov	r0, r4
 8014432:	f000 fc53 	bl	8014cdc <_Balloc>
 8014436:	6932      	ldr	r2, [r6, #16]
 8014438:	3202      	adds	r2, #2
 801443a:	4605      	mov	r5, r0
 801443c:	0092      	lsls	r2, r2, #2
 801443e:	f106 010c 	add.w	r1, r6, #12
 8014442:	300c      	adds	r0, #12
 8014444:	f7fd fe2a 	bl	801209c <memcpy>
 8014448:	2201      	movs	r2, #1
 801444a:	4629      	mov	r1, r5
 801444c:	4620      	mov	r0, r4
 801444e:	f000 fe45 	bl	80150dc <__lshift>
 8014452:	9b00      	ldr	r3, [sp, #0]
 8014454:	f8cd b014 	str.w	fp, [sp, #20]
 8014458:	f003 0301 	and.w	r3, r3, #1
 801445c:	46b1      	mov	r9, r6
 801445e:	9307      	str	r3, [sp, #28]
 8014460:	4606      	mov	r6, r0
 8014462:	4639      	mov	r1, r7
 8014464:	9804      	ldr	r0, [sp, #16]
 8014466:	f7ff faa7 	bl	80139b8 <quorem>
 801446a:	4649      	mov	r1, r9
 801446c:	4605      	mov	r5, r0
 801446e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014472:	9804      	ldr	r0, [sp, #16]
 8014474:	f000 fe86 	bl	8015184 <__mcmp>
 8014478:	4632      	mov	r2, r6
 801447a:	9000      	str	r0, [sp, #0]
 801447c:	4639      	mov	r1, r7
 801447e:	4620      	mov	r0, r4
 8014480:	f000 fe9a 	bl	80151b8 <__mdiff>
 8014484:	68c3      	ldr	r3, [r0, #12]
 8014486:	4602      	mov	r2, r0
 8014488:	bb03      	cbnz	r3, 80144cc <_dtoa_r+0x9fc>
 801448a:	4601      	mov	r1, r0
 801448c:	9008      	str	r0, [sp, #32]
 801448e:	9804      	ldr	r0, [sp, #16]
 8014490:	f000 fe78 	bl	8015184 <__mcmp>
 8014494:	9a08      	ldr	r2, [sp, #32]
 8014496:	4603      	mov	r3, r0
 8014498:	4611      	mov	r1, r2
 801449a:	4620      	mov	r0, r4
 801449c:	9308      	str	r3, [sp, #32]
 801449e:	f000 fc51 	bl	8014d44 <_Bfree>
 80144a2:	9b08      	ldr	r3, [sp, #32]
 80144a4:	b9a3      	cbnz	r3, 80144d0 <_dtoa_r+0xa00>
 80144a6:	9a06      	ldr	r2, [sp, #24]
 80144a8:	b992      	cbnz	r2, 80144d0 <_dtoa_r+0xa00>
 80144aa:	9a07      	ldr	r2, [sp, #28]
 80144ac:	b982      	cbnz	r2, 80144d0 <_dtoa_r+0xa00>
 80144ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80144b2:	d029      	beq.n	8014508 <_dtoa_r+0xa38>
 80144b4:	9b00      	ldr	r3, [sp, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	dd01      	ble.n	80144be <_dtoa_r+0x9ee>
 80144ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80144be:	9b05      	ldr	r3, [sp, #20]
 80144c0:	1c5d      	adds	r5, r3, #1
 80144c2:	f883 8000 	strb.w	r8, [r3]
 80144c6:	e782      	b.n	80143ce <_dtoa_r+0x8fe>
 80144c8:	4630      	mov	r0, r6
 80144ca:	e7c2      	b.n	8014452 <_dtoa_r+0x982>
 80144cc:	2301      	movs	r3, #1
 80144ce:	e7e3      	b.n	8014498 <_dtoa_r+0x9c8>
 80144d0:	9a00      	ldr	r2, [sp, #0]
 80144d2:	2a00      	cmp	r2, #0
 80144d4:	db04      	blt.n	80144e0 <_dtoa_r+0xa10>
 80144d6:	d125      	bne.n	8014524 <_dtoa_r+0xa54>
 80144d8:	9a06      	ldr	r2, [sp, #24]
 80144da:	bb1a      	cbnz	r2, 8014524 <_dtoa_r+0xa54>
 80144dc:	9a07      	ldr	r2, [sp, #28]
 80144de:	bb0a      	cbnz	r2, 8014524 <_dtoa_r+0xa54>
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	ddec      	ble.n	80144be <_dtoa_r+0x9ee>
 80144e4:	2201      	movs	r2, #1
 80144e6:	9904      	ldr	r1, [sp, #16]
 80144e8:	4620      	mov	r0, r4
 80144ea:	f000 fdf7 	bl	80150dc <__lshift>
 80144ee:	4639      	mov	r1, r7
 80144f0:	9004      	str	r0, [sp, #16]
 80144f2:	f000 fe47 	bl	8015184 <__mcmp>
 80144f6:	2800      	cmp	r0, #0
 80144f8:	dc03      	bgt.n	8014502 <_dtoa_r+0xa32>
 80144fa:	d1e0      	bne.n	80144be <_dtoa_r+0x9ee>
 80144fc:	f018 0f01 	tst.w	r8, #1
 8014500:	d0dd      	beq.n	80144be <_dtoa_r+0x9ee>
 8014502:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014506:	d1d8      	bne.n	80144ba <_dtoa_r+0x9ea>
 8014508:	9b05      	ldr	r3, [sp, #20]
 801450a:	9a05      	ldr	r2, [sp, #20]
 801450c:	1c5d      	adds	r5, r3, #1
 801450e:	2339      	movs	r3, #57	; 0x39
 8014510:	7013      	strb	r3, [r2, #0]
 8014512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014516:	2b39      	cmp	r3, #57	; 0x39
 8014518:	f105 32ff 	add.w	r2, r5, #4294967295
 801451c:	d04f      	beq.n	80145be <_dtoa_r+0xaee>
 801451e:	3301      	adds	r3, #1
 8014520:	7013      	strb	r3, [r2, #0]
 8014522:	e754      	b.n	80143ce <_dtoa_r+0x8fe>
 8014524:	9a05      	ldr	r2, [sp, #20]
 8014526:	2b00      	cmp	r3, #0
 8014528:	f102 0501 	add.w	r5, r2, #1
 801452c:	dd06      	ble.n	801453c <_dtoa_r+0xa6c>
 801452e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014532:	d0e9      	beq.n	8014508 <_dtoa_r+0xa38>
 8014534:	f108 0801 	add.w	r8, r8, #1
 8014538:	9b05      	ldr	r3, [sp, #20]
 801453a:	e7c2      	b.n	80144c2 <_dtoa_r+0x9f2>
 801453c:	9a02      	ldr	r2, [sp, #8]
 801453e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014542:	eba5 030b 	sub.w	r3, r5, fp
 8014546:	4293      	cmp	r3, r2
 8014548:	d021      	beq.n	801458e <_dtoa_r+0xabe>
 801454a:	2300      	movs	r3, #0
 801454c:	220a      	movs	r2, #10
 801454e:	9904      	ldr	r1, [sp, #16]
 8014550:	4620      	mov	r0, r4
 8014552:	f000 fc0e 	bl	8014d72 <__multadd>
 8014556:	45b1      	cmp	r9, r6
 8014558:	9004      	str	r0, [sp, #16]
 801455a:	f04f 0300 	mov.w	r3, #0
 801455e:	f04f 020a 	mov.w	r2, #10
 8014562:	4649      	mov	r1, r9
 8014564:	4620      	mov	r0, r4
 8014566:	d105      	bne.n	8014574 <_dtoa_r+0xaa4>
 8014568:	f000 fc03 	bl	8014d72 <__multadd>
 801456c:	4681      	mov	r9, r0
 801456e:	4606      	mov	r6, r0
 8014570:	9505      	str	r5, [sp, #20]
 8014572:	e776      	b.n	8014462 <_dtoa_r+0x992>
 8014574:	f000 fbfd 	bl	8014d72 <__multadd>
 8014578:	4631      	mov	r1, r6
 801457a:	4681      	mov	r9, r0
 801457c:	2300      	movs	r3, #0
 801457e:	220a      	movs	r2, #10
 8014580:	4620      	mov	r0, r4
 8014582:	f000 fbf6 	bl	8014d72 <__multadd>
 8014586:	4606      	mov	r6, r0
 8014588:	e7f2      	b.n	8014570 <_dtoa_r+0xaa0>
 801458a:	f04f 0900 	mov.w	r9, #0
 801458e:	2201      	movs	r2, #1
 8014590:	9904      	ldr	r1, [sp, #16]
 8014592:	4620      	mov	r0, r4
 8014594:	f000 fda2 	bl	80150dc <__lshift>
 8014598:	4639      	mov	r1, r7
 801459a:	9004      	str	r0, [sp, #16]
 801459c:	f000 fdf2 	bl	8015184 <__mcmp>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	dcb6      	bgt.n	8014512 <_dtoa_r+0xa42>
 80145a4:	d102      	bne.n	80145ac <_dtoa_r+0xadc>
 80145a6:	f018 0f01 	tst.w	r8, #1
 80145aa:	d1b2      	bne.n	8014512 <_dtoa_r+0xa42>
 80145ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80145b0:	2b30      	cmp	r3, #48	; 0x30
 80145b2:	f105 32ff 	add.w	r2, r5, #4294967295
 80145b6:	f47f af0a 	bne.w	80143ce <_dtoa_r+0x8fe>
 80145ba:	4615      	mov	r5, r2
 80145bc:	e7f6      	b.n	80145ac <_dtoa_r+0xadc>
 80145be:	4593      	cmp	fp, r2
 80145c0:	d105      	bne.n	80145ce <_dtoa_r+0xafe>
 80145c2:	2331      	movs	r3, #49	; 0x31
 80145c4:	f10a 0a01 	add.w	sl, sl, #1
 80145c8:	f88b 3000 	strb.w	r3, [fp]
 80145cc:	e6ff      	b.n	80143ce <_dtoa_r+0x8fe>
 80145ce:	4615      	mov	r5, r2
 80145d0:	e79f      	b.n	8014512 <_dtoa_r+0xa42>
 80145d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014638 <_dtoa_r+0xb68>
 80145d6:	e007      	b.n	80145e8 <_dtoa_r+0xb18>
 80145d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145da:	f8df b060 	ldr.w	fp, [pc, #96]	; 801463c <_dtoa_r+0xb6c>
 80145de:	b11b      	cbz	r3, 80145e8 <_dtoa_r+0xb18>
 80145e0:	f10b 0308 	add.w	r3, fp, #8
 80145e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145e6:	6013      	str	r3, [r2, #0]
 80145e8:	4658      	mov	r0, fp
 80145ea:	b017      	add	sp, #92	; 0x5c
 80145ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145f0:	9b06      	ldr	r3, [sp, #24]
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	f77f ae35 	ble.w	8014262 <_dtoa_r+0x792>
 80145f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145fa:	9307      	str	r3, [sp, #28]
 80145fc:	e649      	b.n	8014292 <_dtoa_r+0x7c2>
 80145fe:	9b02      	ldr	r3, [sp, #8]
 8014600:	2b00      	cmp	r3, #0
 8014602:	dc03      	bgt.n	801460c <_dtoa_r+0xb3c>
 8014604:	9b06      	ldr	r3, [sp, #24]
 8014606:	2b02      	cmp	r3, #2
 8014608:	f73f aecc 	bgt.w	80143a4 <_dtoa_r+0x8d4>
 801460c:	465d      	mov	r5, fp
 801460e:	4639      	mov	r1, r7
 8014610:	9804      	ldr	r0, [sp, #16]
 8014612:	f7ff f9d1 	bl	80139b8 <quorem>
 8014616:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801461a:	f805 8b01 	strb.w	r8, [r5], #1
 801461e:	9a02      	ldr	r2, [sp, #8]
 8014620:	eba5 030b 	sub.w	r3, r5, fp
 8014624:	429a      	cmp	r2, r3
 8014626:	ddb0      	ble.n	801458a <_dtoa_r+0xaba>
 8014628:	2300      	movs	r3, #0
 801462a:	220a      	movs	r2, #10
 801462c:	9904      	ldr	r1, [sp, #16]
 801462e:	4620      	mov	r0, r4
 8014630:	f000 fb9f 	bl	8014d72 <__multadd>
 8014634:	9004      	str	r0, [sp, #16]
 8014636:	e7ea      	b.n	801460e <_dtoa_r+0xb3e>
 8014638:	0802242c 	.word	0x0802242c
 801463c:	080224a0 	.word	0x080224a0

08014640 <rshift>:
 8014640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014642:	6906      	ldr	r6, [r0, #16]
 8014644:	114b      	asrs	r3, r1, #5
 8014646:	429e      	cmp	r6, r3
 8014648:	f100 0414 	add.w	r4, r0, #20
 801464c:	dd30      	ble.n	80146b0 <rshift+0x70>
 801464e:	f011 011f 	ands.w	r1, r1, #31
 8014652:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014656:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801465a:	d108      	bne.n	801466e <rshift+0x2e>
 801465c:	4621      	mov	r1, r4
 801465e:	42b2      	cmp	r2, r6
 8014660:	460b      	mov	r3, r1
 8014662:	d211      	bcs.n	8014688 <rshift+0x48>
 8014664:	f852 3b04 	ldr.w	r3, [r2], #4
 8014668:	f841 3b04 	str.w	r3, [r1], #4
 801466c:	e7f7      	b.n	801465e <rshift+0x1e>
 801466e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014672:	f1c1 0c20 	rsb	ip, r1, #32
 8014676:	40cd      	lsrs	r5, r1
 8014678:	3204      	adds	r2, #4
 801467a:	4623      	mov	r3, r4
 801467c:	42b2      	cmp	r2, r6
 801467e:	4617      	mov	r7, r2
 8014680:	d30c      	bcc.n	801469c <rshift+0x5c>
 8014682:	601d      	str	r5, [r3, #0]
 8014684:	b105      	cbz	r5, 8014688 <rshift+0x48>
 8014686:	3304      	adds	r3, #4
 8014688:	1b1a      	subs	r2, r3, r4
 801468a:	42a3      	cmp	r3, r4
 801468c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014690:	bf08      	it	eq
 8014692:	2300      	moveq	r3, #0
 8014694:	6102      	str	r2, [r0, #16]
 8014696:	bf08      	it	eq
 8014698:	6143      	streq	r3, [r0, #20]
 801469a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801469c:	683f      	ldr	r7, [r7, #0]
 801469e:	fa07 f70c 	lsl.w	r7, r7, ip
 80146a2:	433d      	orrs	r5, r7
 80146a4:	f843 5b04 	str.w	r5, [r3], #4
 80146a8:	f852 5b04 	ldr.w	r5, [r2], #4
 80146ac:	40cd      	lsrs	r5, r1
 80146ae:	e7e5      	b.n	801467c <rshift+0x3c>
 80146b0:	4623      	mov	r3, r4
 80146b2:	e7e9      	b.n	8014688 <rshift+0x48>

080146b4 <__hexdig_fun>:
 80146b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80146b8:	2b09      	cmp	r3, #9
 80146ba:	d802      	bhi.n	80146c2 <__hexdig_fun+0xe>
 80146bc:	3820      	subs	r0, #32
 80146be:	b2c0      	uxtb	r0, r0
 80146c0:	4770      	bx	lr
 80146c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80146c6:	2b05      	cmp	r3, #5
 80146c8:	d801      	bhi.n	80146ce <__hexdig_fun+0x1a>
 80146ca:	3847      	subs	r0, #71	; 0x47
 80146cc:	e7f7      	b.n	80146be <__hexdig_fun+0xa>
 80146ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80146d2:	2b05      	cmp	r3, #5
 80146d4:	d801      	bhi.n	80146da <__hexdig_fun+0x26>
 80146d6:	3827      	subs	r0, #39	; 0x27
 80146d8:	e7f1      	b.n	80146be <__hexdig_fun+0xa>
 80146da:	2000      	movs	r0, #0
 80146dc:	4770      	bx	lr

080146de <__gethex>:
 80146de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e2:	b08b      	sub	sp, #44	; 0x2c
 80146e4:	468a      	mov	sl, r1
 80146e6:	9002      	str	r0, [sp, #8]
 80146e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80146ea:	9306      	str	r3, [sp, #24]
 80146ec:	4690      	mov	r8, r2
 80146ee:	f000 fad0 	bl	8014c92 <__localeconv_l>
 80146f2:	6803      	ldr	r3, [r0, #0]
 80146f4:	9303      	str	r3, [sp, #12]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f7eb fd7c 	bl	80001f4 <strlen>
 80146fc:	9b03      	ldr	r3, [sp, #12]
 80146fe:	9001      	str	r0, [sp, #4]
 8014700:	4403      	add	r3, r0
 8014702:	f04f 0b00 	mov.w	fp, #0
 8014706:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801470a:	9307      	str	r3, [sp, #28]
 801470c:	f8da 3000 	ldr.w	r3, [sl]
 8014710:	3302      	adds	r3, #2
 8014712:	461f      	mov	r7, r3
 8014714:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014718:	2830      	cmp	r0, #48	; 0x30
 801471a:	d06c      	beq.n	80147f6 <__gethex+0x118>
 801471c:	f7ff ffca 	bl	80146b4 <__hexdig_fun>
 8014720:	4604      	mov	r4, r0
 8014722:	2800      	cmp	r0, #0
 8014724:	d16a      	bne.n	80147fc <__gethex+0x11e>
 8014726:	9a01      	ldr	r2, [sp, #4]
 8014728:	9903      	ldr	r1, [sp, #12]
 801472a:	4638      	mov	r0, r7
 801472c:	f001 f83c 	bl	80157a8 <strncmp>
 8014730:	2800      	cmp	r0, #0
 8014732:	d166      	bne.n	8014802 <__gethex+0x124>
 8014734:	9b01      	ldr	r3, [sp, #4]
 8014736:	5cf8      	ldrb	r0, [r7, r3]
 8014738:	18fe      	adds	r6, r7, r3
 801473a:	f7ff ffbb 	bl	80146b4 <__hexdig_fun>
 801473e:	2800      	cmp	r0, #0
 8014740:	d062      	beq.n	8014808 <__gethex+0x12a>
 8014742:	4633      	mov	r3, r6
 8014744:	7818      	ldrb	r0, [r3, #0]
 8014746:	2830      	cmp	r0, #48	; 0x30
 8014748:	461f      	mov	r7, r3
 801474a:	f103 0301 	add.w	r3, r3, #1
 801474e:	d0f9      	beq.n	8014744 <__gethex+0x66>
 8014750:	f7ff ffb0 	bl	80146b4 <__hexdig_fun>
 8014754:	fab0 f580 	clz	r5, r0
 8014758:	096d      	lsrs	r5, r5, #5
 801475a:	4634      	mov	r4, r6
 801475c:	f04f 0b01 	mov.w	fp, #1
 8014760:	463a      	mov	r2, r7
 8014762:	4616      	mov	r6, r2
 8014764:	3201      	adds	r2, #1
 8014766:	7830      	ldrb	r0, [r6, #0]
 8014768:	f7ff ffa4 	bl	80146b4 <__hexdig_fun>
 801476c:	2800      	cmp	r0, #0
 801476e:	d1f8      	bne.n	8014762 <__gethex+0x84>
 8014770:	9a01      	ldr	r2, [sp, #4]
 8014772:	9903      	ldr	r1, [sp, #12]
 8014774:	4630      	mov	r0, r6
 8014776:	f001 f817 	bl	80157a8 <strncmp>
 801477a:	b950      	cbnz	r0, 8014792 <__gethex+0xb4>
 801477c:	b954      	cbnz	r4, 8014794 <__gethex+0xb6>
 801477e:	9b01      	ldr	r3, [sp, #4]
 8014780:	18f4      	adds	r4, r6, r3
 8014782:	4622      	mov	r2, r4
 8014784:	4616      	mov	r6, r2
 8014786:	3201      	adds	r2, #1
 8014788:	7830      	ldrb	r0, [r6, #0]
 801478a:	f7ff ff93 	bl	80146b4 <__hexdig_fun>
 801478e:	2800      	cmp	r0, #0
 8014790:	d1f8      	bne.n	8014784 <__gethex+0xa6>
 8014792:	b10c      	cbz	r4, 8014798 <__gethex+0xba>
 8014794:	1ba4      	subs	r4, r4, r6
 8014796:	00a4      	lsls	r4, r4, #2
 8014798:	7833      	ldrb	r3, [r6, #0]
 801479a:	2b50      	cmp	r3, #80	; 0x50
 801479c:	d001      	beq.n	80147a2 <__gethex+0xc4>
 801479e:	2b70      	cmp	r3, #112	; 0x70
 80147a0:	d140      	bne.n	8014824 <__gethex+0x146>
 80147a2:	7873      	ldrb	r3, [r6, #1]
 80147a4:	2b2b      	cmp	r3, #43	; 0x2b
 80147a6:	d031      	beq.n	801480c <__gethex+0x12e>
 80147a8:	2b2d      	cmp	r3, #45	; 0x2d
 80147aa:	d033      	beq.n	8014814 <__gethex+0x136>
 80147ac:	1c71      	adds	r1, r6, #1
 80147ae:	f04f 0900 	mov.w	r9, #0
 80147b2:	7808      	ldrb	r0, [r1, #0]
 80147b4:	f7ff ff7e 	bl	80146b4 <__hexdig_fun>
 80147b8:	1e43      	subs	r3, r0, #1
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	2b18      	cmp	r3, #24
 80147be:	d831      	bhi.n	8014824 <__gethex+0x146>
 80147c0:	f1a0 0210 	sub.w	r2, r0, #16
 80147c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80147c8:	f7ff ff74 	bl	80146b4 <__hexdig_fun>
 80147cc:	1e43      	subs	r3, r0, #1
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	2b18      	cmp	r3, #24
 80147d2:	d922      	bls.n	801481a <__gethex+0x13c>
 80147d4:	f1b9 0f00 	cmp.w	r9, #0
 80147d8:	d000      	beq.n	80147dc <__gethex+0xfe>
 80147da:	4252      	negs	r2, r2
 80147dc:	4414      	add	r4, r2
 80147de:	f8ca 1000 	str.w	r1, [sl]
 80147e2:	b30d      	cbz	r5, 8014828 <__gethex+0x14a>
 80147e4:	f1bb 0f00 	cmp.w	fp, #0
 80147e8:	bf0c      	ite	eq
 80147ea:	2706      	moveq	r7, #6
 80147ec:	2700      	movne	r7, #0
 80147ee:	4638      	mov	r0, r7
 80147f0:	b00b      	add	sp, #44	; 0x2c
 80147f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f6:	f10b 0b01 	add.w	fp, fp, #1
 80147fa:	e78a      	b.n	8014712 <__gethex+0x34>
 80147fc:	2500      	movs	r5, #0
 80147fe:	462c      	mov	r4, r5
 8014800:	e7ae      	b.n	8014760 <__gethex+0x82>
 8014802:	463e      	mov	r6, r7
 8014804:	2501      	movs	r5, #1
 8014806:	e7c7      	b.n	8014798 <__gethex+0xba>
 8014808:	4604      	mov	r4, r0
 801480a:	e7fb      	b.n	8014804 <__gethex+0x126>
 801480c:	f04f 0900 	mov.w	r9, #0
 8014810:	1cb1      	adds	r1, r6, #2
 8014812:	e7ce      	b.n	80147b2 <__gethex+0xd4>
 8014814:	f04f 0901 	mov.w	r9, #1
 8014818:	e7fa      	b.n	8014810 <__gethex+0x132>
 801481a:	230a      	movs	r3, #10
 801481c:	fb03 0202 	mla	r2, r3, r2, r0
 8014820:	3a10      	subs	r2, #16
 8014822:	e7cf      	b.n	80147c4 <__gethex+0xe6>
 8014824:	4631      	mov	r1, r6
 8014826:	e7da      	b.n	80147de <__gethex+0x100>
 8014828:	1bf3      	subs	r3, r6, r7
 801482a:	3b01      	subs	r3, #1
 801482c:	4629      	mov	r1, r5
 801482e:	2b07      	cmp	r3, #7
 8014830:	dc49      	bgt.n	80148c6 <__gethex+0x1e8>
 8014832:	9802      	ldr	r0, [sp, #8]
 8014834:	f000 fa52 	bl	8014cdc <_Balloc>
 8014838:	9b01      	ldr	r3, [sp, #4]
 801483a:	f100 0914 	add.w	r9, r0, #20
 801483e:	f04f 0b00 	mov.w	fp, #0
 8014842:	f1c3 0301 	rsb	r3, r3, #1
 8014846:	4605      	mov	r5, r0
 8014848:	f8cd 9010 	str.w	r9, [sp, #16]
 801484c:	46da      	mov	sl, fp
 801484e:	9308      	str	r3, [sp, #32]
 8014850:	42b7      	cmp	r7, r6
 8014852:	d33b      	bcc.n	80148cc <__gethex+0x1ee>
 8014854:	9804      	ldr	r0, [sp, #16]
 8014856:	f840 ab04 	str.w	sl, [r0], #4
 801485a:	eba0 0009 	sub.w	r0, r0, r9
 801485e:	1080      	asrs	r0, r0, #2
 8014860:	6128      	str	r0, [r5, #16]
 8014862:	0147      	lsls	r7, r0, #5
 8014864:	4650      	mov	r0, sl
 8014866:	f000 fafd 	bl	8014e64 <__hi0bits>
 801486a:	f8d8 6000 	ldr.w	r6, [r8]
 801486e:	1a3f      	subs	r7, r7, r0
 8014870:	42b7      	cmp	r7, r6
 8014872:	dd64      	ble.n	801493e <__gethex+0x260>
 8014874:	1bbf      	subs	r7, r7, r6
 8014876:	4639      	mov	r1, r7
 8014878:	4628      	mov	r0, r5
 801487a:	f000 fe0d 	bl	8015498 <__any_on>
 801487e:	4682      	mov	sl, r0
 8014880:	b178      	cbz	r0, 80148a2 <__gethex+0x1c4>
 8014882:	1e7b      	subs	r3, r7, #1
 8014884:	1159      	asrs	r1, r3, #5
 8014886:	f003 021f 	and.w	r2, r3, #31
 801488a:	f04f 0a01 	mov.w	sl, #1
 801488e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014892:	fa0a f202 	lsl.w	r2, sl, r2
 8014896:	420a      	tst	r2, r1
 8014898:	d003      	beq.n	80148a2 <__gethex+0x1c4>
 801489a:	4553      	cmp	r3, sl
 801489c:	dc46      	bgt.n	801492c <__gethex+0x24e>
 801489e:	f04f 0a02 	mov.w	sl, #2
 80148a2:	4639      	mov	r1, r7
 80148a4:	4628      	mov	r0, r5
 80148a6:	f7ff fecb 	bl	8014640 <rshift>
 80148aa:	443c      	add	r4, r7
 80148ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80148b0:	42a3      	cmp	r3, r4
 80148b2:	da52      	bge.n	801495a <__gethex+0x27c>
 80148b4:	4629      	mov	r1, r5
 80148b6:	9802      	ldr	r0, [sp, #8]
 80148b8:	f000 fa44 	bl	8014d44 <_Bfree>
 80148bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148be:	2300      	movs	r3, #0
 80148c0:	6013      	str	r3, [r2, #0]
 80148c2:	27a3      	movs	r7, #163	; 0xa3
 80148c4:	e793      	b.n	80147ee <__gethex+0x110>
 80148c6:	3101      	adds	r1, #1
 80148c8:	105b      	asrs	r3, r3, #1
 80148ca:	e7b0      	b.n	801482e <__gethex+0x150>
 80148cc:	1e73      	subs	r3, r6, #1
 80148ce:	9305      	str	r3, [sp, #20]
 80148d0:	9a07      	ldr	r2, [sp, #28]
 80148d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d018      	beq.n	801490c <__gethex+0x22e>
 80148da:	f1bb 0f20 	cmp.w	fp, #32
 80148de:	d107      	bne.n	80148f0 <__gethex+0x212>
 80148e0:	9b04      	ldr	r3, [sp, #16]
 80148e2:	f8c3 a000 	str.w	sl, [r3]
 80148e6:	3304      	adds	r3, #4
 80148e8:	f04f 0a00 	mov.w	sl, #0
 80148ec:	9304      	str	r3, [sp, #16]
 80148ee:	46d3      	mov	fp, sl
 80148f0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80148f4:	f7ff fede 	bl	80146b4 <__hexdig_fun>
 80148f8:	f000 000f 	and.w	r0, r0, #15
 80148fc:	fa00 f00b 	lsl.w	r0, r0, fp
 8014900:	ea4a 0a00 	orr.w	sl, sl, r0
 8014904:	f10b 0b04 	add.w	fp, fp, #4
 8014908:	9b05      	ldr	r3, [sp, #20]
 801490a:	e00d      	b.n	8014928 <__gethex+0x24a>
 801490c:	9b05      	ldr	r3, [sp, #20]
 801490e:	9a08      	ldr	r2, [sp, #32]
 8014910:	4413      	add	r3, r2
 8014912:	42bb      	cmp	r3, r7
 8014914:	d3e1      	bcc.n	80148da <__gethex+0x1fc>
 8014916:	4618      	mov	r0, r3
 8014918:	9a01      	ldr	r2, [sp, #4]
 801491a:	9903      	ldr	r1, [sp, #12]
 801491c:	9309      	str	r3, [sp, #36]	; 0x24
 801491e:	f000 ff43 	bl	80157a8 <strncmp>
 8014922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014924:	2800      	cmp	r0, #0
 8014926:	d1d8      	bne.n	80148da <__gethex+0x1fc>
 8014928:	461e      	mov	r6, r3
 801492a:	e791      	b.n	8014850 <__gethex+0x172>
 801492c:	1eb9      	subs	r1, r7, #2
 801492e:	4628      	mov	r0, r5
 8014930:	f000 fdb2 	bl	8015498 <__any_on>
 8014934:	2800      	cmp	r0, #0
 8014936:	d0b2      	beq.n	801489e <__gethex+0x1c0>
 8014938:	f04f 0a03 	mov.w	sl, #3
 801493c:	e7b1      	b.n	80148a2 <__gethex+0x1c4>
 801493e:	da09      	bge.n	8014954 <__gethex+0x276>
 8014940:	1bf7      	subs	r7, r6, r7
 8014942:	4629      	mov	r1, r5
 8014944:	463a      	mov	r2, r7
 8014946:	9802      	ldr	r0, [sp, #8]
 8014948:	f000 fbc8 	bl	80150dc <__lshift>
 801494c:	1be4      	subs	r4, r4, r7
 801494e:	4605      	mov	r5, r0
 8014950:	f100 0914 	add.w	r9, r0, #20
 8014954:	f04f 0a00 	mov.w	sl, #0
 8014958:	e7a8      	b.n	80148ac <__gethex+0x1ce>
 801495a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801495e:	42a0      	cmp	r0, r4
 8014960:	dd6a      	ble.n	8014a38 <__gethex+0x35a>
 8014962:	1b04      	subs	r4, r0, r4
 8014964:	42a6      	cmp	r6, r4
 8014966:	dc2e      	bgt.n	80149c6 <__gethex+0x2e8>
 8014968:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801496c:	2b02      	cmp	r3, #2
 801496e:	d022      	beq.n	80149b6 <__gethex+0x2d8>
 8014970:	2b03      	cmp	r3, #3
 8014972:	d024      	beq.n	80149be <__gethex+0x2e0>
 8014974:	2b01      	cmp	r3, #1
 8014976:	d115      	bne.n	80149a4 <__gethex+0x2c6>
 8014978:	42a6      	cmp	r6, r4
 801497a:	d113      	bne.n	80149a4 <__gethex+0x2c6>
 801497c:	2e01      	cmp	r6, #1
 801497e:	dc0b      	bgt.n	8014998 <__gethex+0x2ba>
 8014980:	9a06      	ldr	r2, [sp, #24]
 8014982:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014986:	6013      	str	r3, [r2, #0]
 8014988:	2301      	movs	r3, #1
 801498a:	612b      	str	r3, [r5, #16]
 801498c:	f8c9 3000 	str.w	r3, [r9]
 8014990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014992:	2762      	movs	r7, #98	; 0x62
 8014994:	601d      	str	r5, [r3, #0]
 8014996:	e72a      	b.n	80147ee <__gethex+0x110>
 8014998:	1e71      	subs	r1, r6, #1
 801499a:	4628      	mov	r0, r5
 801499c:	f000 fd7c 	bl	8015498 <__any_on>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d1ed      	bne.n	8014980 <__gethex+0x2a2>
 80149a4:	4629      	mov	r1, r5
 80149a6:	9802      	ldr	r0, [sp, #8]
 80149a8:	f000 f9cc 	bl	8014d44 <_Bfree>
 80149ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80149ae:	2300      	movs	r3, #0
 80149b0:	6013      	str	r3, [r2, #0]
 80149b2:	2750      	movs	r7, #80	; 0x50
 80149b4:	e71b      	b.n	80147ee <__gethex+0x110>
 80149b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d0e1      	beq.n	8014980 <__gethex+0x2a2>
 80149bc:	e7f2      	b.n	80149a4 <__gethex+0x2c6>
 80149be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d1dd      	bne.n	8014980 <__gethex+0x2a2>
 80149c4:	e7ee      	b.n	80149a4 <__gethex+0x2c6>
 80149c6:	1e67      	subs	r7, r4, #1
 80149c8:	f1ba 0f00 	cmp.w	sl, #0
 80149cc:	d131      	bne.n	8014a32 <__gethex+0x354>
 80149ce:	b127      	cbz	r7, 80149da <__gethex+0x2fc>
 80149d0:	4639      	mov	r1, r7
 80149d2:	4628      	mov	r0, r5
 80149d4:	f000 fd60 	bl	8015498 <__any_on>
 80149d8:	4682      	mov	sl, r0
 80149da:	117a      	asrs	r2, r7, #5
 80149dc:	2301      	movs	r3, #1
 80149de:	f007 071f 	and.w	r7, r7, #31
 80149e2:	fa03 f707 	lsl.w	r7, r3, r7
 80149e6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80149ea:	4621      	mov	r1, r4
 80149ec:	421f      	tst	r7, r3
 80149ee:	4628      	mov	r0, r5
 80149f0:	bf18      	it	ne
 80149f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80149f6:	1b36      	subs	r6, r6, r4
 80149f8:	f7ff fe22 	bl	8014640 <rshift>
 80149fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014a00:	2702      	movs	r7, #2
 8014a02:	f1ba 0f00 	cmp.w	sl, #0
 8014a06:	d048      	beq.n	8014a9a <__gethex+0x3bc>
 8014a08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	d015      	beq.n	8014a3c <__gethex+0x35e>
 8014a10:	2b03      	cmp	r3, #3
 8014a12:	d017      	beq.n	8014a44 <__gethex+0x366>
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d109      	bne.n	8014a2c <__gethex+0x34e>
 8014a18:	f01a 0f02 	tst.w	sl, #2
 8014a1c:	d006      	beq.n	8014a2c <__gethex+0x34e>
 8014a1e:	f8d9 3000 	ldr.w	r3, [r9]
 8014a22:	ea4a 0a03 	orr.w	sl, sl, r3
 8014a26:	f01a 0f01 	tst.w	sl, #1
 8014a2a:	d10e      	bne.n	8014a4a <__gethex+0x36c>
 8014a2c:	f047 0710 	orr.w	r7, r7, #16
 8014a30:	e033      	b.n	8014a9a <__gethex+0x3bc>
 8014a32:	f04f 0a01 	mov.w	sl, #1
 8014a36:	e7d0      	b.n	80149da <__gethex+0x2fc>
 8014a38:	2701      	movs	r7, #1
 8014a3a:	e7e2      	b.n	8014a02 <__gethex+0x324>
 8014a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a3e:	f1c3 0301 	rsb	r3, r3, #1
 8014a42:	9315      	str	r3, [sp, #84]	; 0x54
 8014a44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d0f0      	beq.n	8014a2c <__gethex+0x34e>
 8014a4a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014a4e:	f105 0314 	add.w	r3, r5, #20
 8014a52:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8014a56:	eb03 010a 	add.w	r1, r3, sl
 8014a5a:	f04f 0c00 	mov.w	ip, #0
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014a68:	d01c      	beq.n	8014aa4 <__gethex+0x3c6>
 8014a6a:	3201      	adds	r2, #1
 8014a6c:	6002      	str	r2, [r0, #0]
 8014a6e:	2f02      	cmp	r7, #2
 8014a70:	f105 0314 	add.w	r3, r5, #20
 8014a74:	d138      	bne.n	8014ae8 <__gethex+0x40a>
 8014a76:	f8d8 2000 	ldr.w	r2, [r8]
 8014a7a:	3a01      	subs	r2, #1
 8014a7c:	42b2      	cmp	r2, r6
 8014a7e:	d10a      	bne.n	8014a96 <__gethex+0x3b8>
 8014a80:	1171      	asrs	r1, r6, #5
 8014a82:	2201      	movs	r2, #1
 8014a84:	f006 061f 	and.w	r6, r6, #31
 8014a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8014a90:	421e      	tst	r6, r3
 8014a92:	bf18      	it	ne
 8014a94:	4617      	movne	r7, r2
 8014a96:	f047 0720 	orr.w	r7, r7, #32
 8014a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a9c:	601d      	str	r5, [r3, #0]
 8014a9e:	9b06      	ldr	r3, [sp, #24]
 8014aa0:	601c      	str	r4, [r3, #0]
 8014aa2:	e6a4      	b.n	80147ee <__gethex+0x110>
 8014aa4:	4299      	cmp	r1, r3
 8014aa6:	f843 cc04 	str.w	ip, [r3, #-4]
 8014aaa:	d8d8      	bhi.n	8014a5e <__gethex+0x380>
 8014aac:	68ab      	ldr	r3, [r5, #8]
 8014aae:	4599      	cmp	r9, r3
 8014ab0:	db12      	blt.n	8014ad8 <__gethex+0x3fa>
 8014ab2:	6869      	ldr	r1, [r5, #4]
 8014ab4:	9802      	ldr	r0, [sp, #8]
 8014ab6:	3101      	adds	r1, #1
 8014ab8:	f000 f910 	bl	8014cdc <_Balloc>
 8014abc:	692a      	ldr	r2, [r5, #16]
 8014abe:	3202      	adds	r2, #2
 8014ac0:	f105 010c 	add.w	r1, r5, #12
 8014ac4:	4683      	mov	fp, r0
 8014ac6:	0092      	lsls	r2, r2, #2
 8014ac8:	300c      	adds	r0, #12
 8014aca:	f7fd fae7 	bl	801209c <memcpy>
 8014ace:	4629      	mov	r1, r5
 8014ad0:	9802      	ldr	r0, [sp, #8]
 8014ad2:	f000 f937 	bl	8014d44 <_Bfree>
 8014ad6:	465d      	mov	r5, fp
 8014ad8:	692b      	ldr	r3, [r5, #16]
 8014ada:	1c5a      	adds	r2, r3, #1
 8014adc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014ae0:	612a      	str	r2, [r5, #16]
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	615a      	str	r2, [r3, #20]
 8014ae6:	e7c2      	b.n	8014a6e <__gethex+0x390>
 8014ae8:	692a      	ldr	r2, [r5, #16]
 8014aea:	454a      	cmp	r2, r9
 8014aec:	dd0b      	ble.n	8014b06 <__gethex+0x428>
 8014aee:	2101      	movs	r1, #1
 8014af0:	4628      	mov	r0, r5
 8014af2:	f7ff fda5 	bl	8014640 <rshift>
 8014af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014afa:	3401      	adds	r4, #1
 8014afc:	42a3      	cmp	r3, r4
 8014afe:	f6ff aed9 	blt.w	80148b4 <__gethex+0x1d6>
 8014b02:	2701      	movs	r7, #1
 8014b04:	e7c7      	b.n	8014a96 <__gethex+0x3b8>
 8014b06:	f016 061f 	ands.w	r6, r6, #31
 8014b0a:	d0fa      	beq.n	8014b02 <__gethex+0x424>
 8014b0c:	449a      	add	sl, r3
 8014b0e:	f1c6 0620 	rsb	r6, r6, #32
 8014b12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014b16:	f000 f9a5 	bl	8014e64 <__hi0bits>
 8014b1a:	42b0      	cmp	r0, r6
 8014b1c:	dbe7      	blt.n	8014aee <__gethex+0x410>
 8014b1e:	e7f0      	b.n	8014b02 <__gethex+0x424>

08014b20 <L_shift>:
 8014b20:	f1c2 0208 	rsb	r2, r2, #8
 8014b24:	0092      	lsls	r2, r2, #2
 8014b26:	b570      	push	{r4, r5, r6, lr}
 8014b28:	f1c2 0620 	rsb	r6, r2, #32
 8014b2c:	6843      	ldr	r3, [r0, #4]
 8014b2e:	6804      	ldr	r4, [r0, #0]
 8014b30:	fa03 f506 	lsl.w	r5, r3, r6
 8014b34:	432c      	orrs	r4, r5
 8014b36:	40d3      	lsrs	r3, r2
 8014b38:	6004      	str	r4, [r0, #0]
 8014b3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8014b3e:	4288      	cmp	r0, r1
 8014b40:	d3f4      	bcc.n	8014b2c <L_shift+0xc>
 8014b42:	bd70      	pop	{r4, r5, r6, pc}

08014b44 <__match>:
 8014b44:	b530      	push	{r4, r5, lr}
 8014b46:	6803      	ldr	r3, [r0, #0]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b4e:	b914      	cbnz	r4, 8014b56 <__match+0x12>
 8014b50:	6003      	str	r3, [r0, #0]
 8014b52:	2001      	movs	r0, #1
 8014b54:	bd30      	pop	{r4, r5, pc}
 8014b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014b5e:	2d19      	cmp	r5, #25
 8014b60:	bf98      	it	ls
 8014b62:	3220      	addls	r2, #32
 8014b64:	42a2      	cmp	r2, r4
 8014b66:	d0f0      	beq.n	8014b4a <__match+0x6>
 8014b68:	2000      	movs	r0, #0
 8014b6a:	e7f3      	b.n	8014b54 <__match+0x10>

08014b6c <__hexnan>:
 8014b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b70:	680b      	ldr	r3, [r1, #0]
 8014b72:	6801      	ldr	r1, [r0, #0]
 8014b74:	115f      	asrs	r7, r3, #5
 8014b76:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8014b7a:	f013 031f 	ands.w	r3, r3, #31
 8014b7e:	b087      	sub	sp, #28
 8014b80:	bf18      	it	ne
 8014b82:	3704      	addne	r7, #4
 8014b84:	2500      	movs	r5, #0
 8014b86:	1f3e      	subs	r6, r7, #4
 8014b88:	4682      	mov	sl, r0
 8014b8a:	4690      	mov	r8, r2
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	f847 5c04 	str.w	r5, [r7, #-4]
 8014b92:	46b1      	mov	r9, r6
 8014b94:	4634      	mov	r4, r6
 8014b96:	9502      	str	r5, [sp, #8]
 8014b98:	46ab      	mov	fp, r5
 8014b9a:	784a      	ldrb	r2, [r1, #1]
 8014b9c:	1c4b      	adds	r3, r1, #1
 8014b9e:	9303      	str	r3, [sp, #12]
 8014ba0:	b342      	cbz	r2, 8014bf4 <__hexnan+0x88>
 8014ba2:	4610      	mov	r0, r2
 8014ba4:	9105      	str	r1, [sp, #20]
 8014ba6:	9204      	str	r2, [sp, #16]
 8014ba8:	f7ff fd84 	bl	80146b4 <__hexdig_fun>
 8014bac:	2800      	cmp	r0, #0
 8014bae:	d143      	bne.n	8014c38 <__hexnan+0xcc>
 8014bb0:	9a04      	ldr	r2, [sp, #16]
 8014bb2:	9905      	ldr	r1, [sp, #20]
 8014bb4:	2a20      	cmp	r2, #32
 8014bb6:	d818      	bhi.n	8014bea <__hexnan+0x7e>
 8014bb8:	9b02      	ldr	r3, [sp, #8]
 8014bba:	459b      	cmp	fp, r3
 8014bbc:	dd13      	ble.n	8014be6 <__hexnan+0x7a>
 8014bbe:	454c      	cmp	r4, r9
 8014bc0:	d206      	bcs.n	8014bd0 <__hexnan+0x64>
 8014bc2:	2d07      	cmp	r5, #7
 8014bc4:	dc04      	bgt.n	8014bd0 <__hexnan+0x64>
 8014bc6:	462a      	mov	r2, r5
 8014bc8:	4649      	mov	r1, r9
 8014bca:	4620      	mov	r0, r4
 8014bcc:	f7ff ffa8 	bl	8014b20 <L_shift>
 8014bd0:	4544      	cmp	r4, r8
 8014bd2:	d944      	bls.n	8014c5e <__hexnan+0xf2>
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	f1a4 0904 	sub.w	r9, r4, #4
 8014bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8014bde:	f8cd b008 	str.w	fp, [sp, #8]
 8014be2:	464c      	mov	r4, r9
 8014be4:	461d      	mov	r5, r3
 8014be6:	9903      	ldr	r1, [sp, #12]
 8014be8:	e7d7      	b.n	8014b9a <__hexnan+0x2e>
 8014bea:	2a29      	cmp	r2, #41	; 0x29
 8014bec:	d14a      	bne.n	8014c84 <__hexnan+0x118>
 8014bee:	3102      	adds	r1, #2
 8014bf0:	f8ca 1000 	str.w	r1, [sl]
 8014bf4:	f1bb 0f00 	cmp.w	fp, #0
 8014bf8:	d044      	beq.n	8014c84 <__hexnan+0x118>
 8014bfa:	454c      	cmp	r4, r9
 8014bfc:	d206      	bcs.n	8014c0c <__hexnan+0xa0>
 8014bfe:	2d07      	cmp	r5, #7
 8014c00:	dc04      	bgt.n	8014c0c <__hexnan+0xa0>
 8014c02:	462a      	mov	r2, r5
 8014c04:	4649      	mov	r1, r9
 8014c06:	4620      	mov	r0, r4
 8014c08:	f7ff ff8a 	bl	8014b20 <L_shift>
 8014c0c:	4544      	cmp	r4, r8
 8014c0e:	d928      	bls.n	8014c62 <__hexnan+0xf6>
 8014c10:	4643      	mov	r3, r8
 8014c12:	f854 2b04 	ldr.w	r2, [r4], #4
 8014c16:	f843 2b04 	str.w	r2, [r3], #4
 8014c1a:	42a6      	cmp	r6, r4
 8014c1c:	d2f9      	bcs.n	8014c12 <__hexnan+0xa6>
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f843 2b04 	str.w	r2, [r3], #4
 8014c24:	429e      	cmp	r6, r3
 8014c26:	d2fb      	bcs.n	8014c20 <__hexnan+0xb4>
 8014c28:	6833      	ldr	r3, [r6, #0]
 8014c2a:	b91b      	cbnz	r3, 8014c34 <__hexnan+0xc8>
 8014c2c:	4546      	cmp	r6, r8
 8014c2e:	d127      	bne.n	8014c80 <__hexnan+0x114>
 8014c30:	2301      	movs	r3, #1
 8014c32:	6033      	str	r3, [r6, #0]
 8014c34:	2005      	movs	r0, #5
 8014c36:	e026      	b.n	8014c86 <__hexnan+0x11a>
 8014c38:	3501      	adds	r5, #1
 8014c3a:	2d08      	cmp	r5, #8
 8014c3c:	f10b 0b01 	add.w	fp, fp, #1
 8014c40:	dd06      	ble.n	8014c50 <__hexnan+0xe4>
 8014c42:	4544      	cmp	r4, r8
 8014c44:	d9cf      	bls.n	8014be6 <__hexnan+0x7a>
 8014c46:	2300      	movs	r3, #0
 8014c48:	f844 3c04 	str.w	r3, [r4, #-4]
 8014c4c:	2501      	movs	r5, #1
 8014c4e:	3c04      	subs	r4, #4
 8014c50:	6822      	ldr	r2, [r4, #0]
 8014c52:	f000 000f 	and.w	r0, r0, #15
 8014c56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014c5a:	6020      	str	r0, [r4, #0]
 8014c5c:	e7c3      	b.n	8014be6 <__hexnan+0x7a>
 8014c5e:	2508      	movs	r5, #8
 8014c60:	e7c1      	b.n	8014be6 <__hexnan+0x7a>
 8014c62:	9b01      	ldr	r3, [sp, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d0df      	beq.n	8014c28 <__hexnan+0xbc>
 8014c68:	f04f 32ff 	mov.w	r2, #4294967295
 8014c6c:	f1c3 0320 	rsb	r3, r3, #32
 8014c70:	fa22 f303 	lsr.w	r3, r2, r3
 8014c74:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014c78:	401a      	ands	r2, r3
 8014c7a:	f847 2c04 	str.w	r2, [r7, #-4]
 8014c7e:	e7d3      	b.n	8014c28 <__hexnan+0xbc>
 8014c80:	3e04      	subs	r6, #4
 8014c82:	e7d1      	b.n	8014c28 <__hexnan+0xbc>
 8014c84:	2004      	movs	r0, #4
 8014c86:	b007      	add	sp, #28
 8014c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c8c <__locale_ctype_ptr_l>:
 8014c8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014c90:	4770      	bx	lr

08014c92 <__localeconv_l>:
 8014c92:	30f0      	adds	r0, #240	; 0xf0
 8014c94:	4770      	bx	lr
	...

08014c98 <_localeconv_r>:
 8014c98:	4b04      	ldr	r3, [pc, #16]	; (8014cac <_localeconv_r+0x14>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	6a18      	ldr	r0, [r3, #32]
 8014c9e:	4b04      	ldr	r3, [pc, #16]	; (8014cb0 <_localeconv_r+0x18>)
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	bf08      	it	eq
 8014ca4:	4618      	moveq	r0, r3
 8014ca6:	30f0      	adds	r0, #240	; 0xf0
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop
 8014cac:	20000064 	.word	0x20000064
 8014cb0:	200000c8 	.word	0x200000c8

08014cb4 <__ascii_mbtowc>:
 8014cb4:	b082      	sub	sp, #8
 8014cb6:	b901      	cbnz	r1, 8014cba <__ascii_mbtowc+0x6>
 8014cb8:	a901      	add	r1, sp, #4
 8014cba:	b142      	cbz	r2, 8014cce <__ascii_mbtowc+0x1a>
 8014cbc:	b14b      	cbz	r3, 8014cd2 <__ascii_mbtowc+0x1e>
 8014cbe:	7813      	ldrb	r3, [r2, #0]
 8014cc0:	600b      	str	r3, [r1, #0]
 8014cc2:	7812      	ldrb	r2, [r2, #0]
 8014cc4:	1c10      	adds	r0, r2, #0
 8014cc6:	bf18      	it	ne
 8014cc8:	2001      	movne	r0, #1
 8014cca:	b002      	add	sp, #8
 8014ccc:	4770      	bx	lr
 8014cce:	4610      	mov	r0, r2
 8014cd0:	e7fb      	b.n	8014cca <__ascii_mbtowc+0x16>
 8014cd2:	f06f 0001 	mvn.w	r0, #1
 8014cd6:	e7f8      	b.n	8014cca <__ascii_mbtowc+0x16>

08014cd8 <__malloc_lock>:
 8014cd8:	4770      	bx	lr

08014cda <__malloc_unlock>:
 8014cda:	4770      	bx	lr

08014cdc <_Balloc>:
 8014cdc:	b570      	push	{r4, r5, r6, lr}
 8014cde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	460e      	mov	r6, r1
 8014ce4:	b93d      	cbnz	r5, 8014cf6 <_Balloc+0x1a>
 8014ce6:	2010      	movs	r0, #16
 8014ce8:	f7fd f9c8 	bl	801207c <malloc>
 8014cec:	6260      	str	r0, [r4, #36]	; 0x24
 8014cee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014cf2:	6005      	str	r5, [r0, #0]
 8014cf4:	60c5      	str	r5, [r0, #12]
 8014cf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014cf8:	68eb      	ldr	r3, [r5, #12]
 8014cfa:	b183      	cbz	r3, 8014d1e <_Balloc+0x42>
 8014cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d04:	b9b8      	cbnz	r0, 8014d36 <_Balloc+0x5a>
 8014d06:	2101      	movs	r1, #1
 8014d08:	fa01 f506 	lsl.w	r5, r1, r6
 8014d0c:	1d6a      	adds	r2, r5, #5
 8014d0e:	0092      	lsls	r2, r2, #2
 8014d10:	4620      	mov	r0, r4
 8014d12:	f000 fbe2 	bl	80154da <_calloc_r>
 8014d16:	b160      	cbz	r0, 8014d32 <_Balloc+0x56>
 8014d18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014d1c:	e00e      	b.n	8014d3c <_Balloc+0x60>
 8014d1e:	2221      	movs	r2, #33	; 0x21
 8014d20:	2104      	movs	r1, #4
 8014d22:	4620      	mov	r0, r4
 8014d24:	f000 fbd9 	bl	80154da <_calloc_r>
 8014d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d2a:	60e8      	str	r0, [r5, #12]
 8014d2c:	68db      	ldr	r3, [r3, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d1e4      	bne.n	8014cfc <_Balloc+0x20>
 8014d32:	2000      	movs	r0, #0
 8014d34:	bd70      	pop	{r4, r5, r6, pc}
 8014d36:	6802      	ldr	r2, [r0, #0]
 8014d38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014d42:	e7f7      	b.n	8014d34 <_Balloc+0x58>

08014d44 <_Bfree>:
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014d48:	4606      	mov	r6, r0
 8014d4a:	460d      	mov	r5, r1
 8014d4c:	b93c      	cbnz	r4, 8014d5e <_Bfree+0x1a>
 8014d4e:	2010      	movs	r0, #16
 8014d50:	f7fd f994 	bl	801207c <malloc>
 8014d54:	6270      	str	r0, [r6, #36]	; 0x24
 8014d56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d5a:	6004      	str	r4, [r0, #0]
 8014d5c:	60c4      	str	r4, [r0, #12]
 8014d5e:	b13d      	cbz	r5, 8014d70 <_Bfree+0x2c>
 8014d60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014d62:	686a      	ldr	r2, [r5, #4]
 8014d64:	68db      	ldr	r3, [r3, #12]
 8014d66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d6a:	6029      	str	r1, [r5, #0]
 8014d6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014d70:	bd70      	pop	{r4, r5, r6, pc}

08014d72 <__multadd>:
 8014d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d76:	690d      	ldr	r5, [r1, #16]
 8014d78:	461f      	mov	r7, r3
 8014d7a:	4606      	mov	r6, r0
 8014d7c:	460c      	mov	r4, r1
 8014d7e:	f101 0c14 	add.w	ip, r1, #20
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8dc 0000 	ldr.w	r0, [ip]
 8014d88:	b281      	uxth	r1, r0
 8014d8a:	fb02 7101 	mla	r1, r2, r1, r7
 8014d8e:	0c0f      	lsrs	r7, r1, #16
 8014d90:	0c00      	lsrs	r0, r0, #16
 8014d92:	fb02 7000 	mla	r0, r2, r0, r7
 8014d96:	b289      	uxth	r1, r1
 8014d98:	3301      	adds	r3, #1
 8014d9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014d9e:	429d      	cmp	r5, r3
 8014da0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014da4:	f84c 1b04 	str.w	r1, [ip], #4
 8014da8:	dcec      	bgt.n	8014d84 <__multadd+0x12>
 8014daa:	b1d7      	cbz	r7, 8014de2 <__multadd+0x70>
 8014dac:	68a3      	ldr	r3, [r4, #8]
 8014dae:	42ab      	cmp	r3, r5
 8014db0:	dc12      	bgt.n	8014dd8 <__multadd+0x66>
 8014db2:	6861      	ldr	r1, [r4, #4]
 8014db4:	4630      	mov	r0, r6
 8014db6:	3101      	adds	r1, #1
 8014db8:	f7ff ff90 	bl	8014cdc <_Balloc>
 8014dbc:	6922      	ldr	r2, [r4, #16]
 8014dbe:	3202      	adds	r2, #2
 8014dc0:	f104 010c 	add.w	r1, r4, #12
 8014dc4:	4680      	mov	r8, r0
 8014dc6:	0092      	lsls	r2, r2, #2
 8014dc8:	300c      	adds	r0, #12
 8014dca:	f7fd f967 	bl	801209c <memcpy>
 8014dce:	4621      	mov	r1, r4
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f7ff ffb7 	bl	8014d44 <_Bfree>
 8014dd6:	4644      	mov	r4, r8
 8014dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ddc:	3501      	adds	r5, #1
 8014dde:	615f      	str	r7, [r3, #20]
 8014de0:	6125      	str	r5, [r4, #16]
 8014de2:	4620      	mov	r0, r4
 8014de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014de8 <__s2b>:
 8014de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dec:	460c      	mov	r4, r1
 8014dee:	4615      	mov	r5, r2
 8014df0:	461f      	mov	r7, r3
 8014df2:	2209      	movs	r2, #9
 8014df4:	3308      	adds	r3, #8
 8014df6:	4606      	mov	r6, r0
 8014df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	2201      	movs	r2, #1
 8014e00:	429a      	cmp	r2, r3
 8014e02:	db20      	blt.n	8014e46 <__s2b+0x5e>
 8014e04:	4630      	mov	r0, r6
 8014e06:	f7ff ff69 	bl	8014cdc <_Balloc>
 8014e0a:	9b08      	ldr	r3, [sp, #32]
 8014e0c:	6143      	str	r3, [r0, #20]
 8014e0e:	2d09      	cmp	r5, #9
 8014e10:	f04f 0301 	mov.w	r3, #1
 8014e14:	6103      	str	r3, [r0, #16]
 8014e16:	dd19      	ble.n	8014e4c <__s2b+0x64>
 8014e18:	f104 0809 	add.w	r8, r4, #9
 8014e1c:	46c1      	mov	r9, r8
 8014e1e:	442c      	add	r4, r5
 8014e20:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014e24:	4601      	mov	r1, r0
 8014e26:	3b30      	subs	r3, #48	; 0x30
 8014e28:	220a      	movs	r2, #10
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7ff ffa1 	bl	8014d72 <__multadd>
 8014e30:	45a1      	cmp	r9, r4
 8014e32:	d1f5      	bne.n	8014e20 <__s2b+0x38>
 8014e34:	eb08 0405 	add.w	r4, r8, r5
 8014e38:	3c08      	subs	r4, #8
 8014e3a:	1b2d      	subs	r5, r5, r4
 8014e3c:	1963      	adds	r3, r4, r5
 8014e3e:	42bb      	cmp	r3, r7
 8014e40:	db07      	blt.n	8014e52 <__s2b+0x6a>
 8014e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e46:	0052      	lsls	r2, r2, #1
 8014e48:	3101      	adds	r1, #1
 8014e4a:	e7d9      	b.n	8014e00 <__s2b+0x18>
 8014e4c:	340a      	adds	r4, #10
 8014e4e:	2509      	movs	r5, #9
 8014e50:	e7f3      	b.n	8014e3a <__s2b+0x52>
 8014e52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014e56:	4601      	mov	r1, r0
 8014e58:	3b30      	subs	r3, #48	; 0x30
 8014e5a:	220a      	movs	r2, #10
 8014e5c:	4630      	mov	r0, r6
 8014e5e:	f7ff ff88 	bl	8014d72 <__multadd>
 8014e62:	e7eb      	b.n	8014e3c <__s2b+0x54>

08014e64 <__hi0bits>:
 8014e64:	0c02      	lsrs	r2, r0, #16
 8014e66:	0412      	lsls	r2, r2, #16
 8014e68:	4603      	mov	r3, r0
 8014e6a:	b9b2      	cbnz	r2, 8014e9a <__hi0bits+0x36>
 8014e6c:	0403      	lsls	r3, r0, #16
 8014e6e:	2010      	movs	r0, #16
 8014e70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014e74:	bf04      	itt	eq
 8014e76:	021b      	lsleq	r3, r3, #8
 8014e78:	3008      	addeq	r0, #8
 8014e7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014e7e:	bf04      	itt	eq
 8014e80:	011b      	lsleq	r3, r3, #4
 8014e82:	3004      	addeq	r0, #4
 8014e84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014e88:	bf04      	itt	eq
 8014e8a:	009b      	lsleq	r3, r3, #2
 8014e8c:	3002      	addeq	r0, #2
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	db06      	blt.n	8014ea0 <__hi0bits+0x3c>
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	d503      	bpl.n	8014e9e <__hi0bits+0x3a>
 8014e96:	3001      	adds	r0, #1
 8014e98:	4770      	bx	lr
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	e7e8      	b.n	8014e70 <__hi0bits+0xc>
 8014e9e:	2020      	movs	r0, #32
 8014ea0:	4770      	bx	lr

08014ea2 <__lo0bits>:
 8014ea2:	6803      	ldr	r3, [r0, #0]
 8014ea4:	f013 0207 	ands.w	r2, r3, #7
 8014ea8:	4601      	mov	r1, r0
 8014eaa:	d00b      	beq.n	8014ec4 <__lo0bits+0x22>
 8014eac:	07da      	lsls	r2, r3, #31
 8014eae:	d423      	bmi.n	8014ef8 <__lo0bits+0x56>
 8014eb0:	0798      	lsls	r0, r3, #30
 8014eb2:	bf49      	itett	mi
 8014eb4:	085b      	lsrmi	r3, r3, #1
 8014eb6:	089b      	lsrpl	r3, r3, #2
 8014eb8:	2001      	movmi	r0, #1
 8014eba:	600b      	strmi	r3, [r1, #0]
 8014ebc:	bf5c      	itt	pl
 8014ebe:	600b      	strpl	r3, [r1, #0]
 8014ec0:	2002      	movpl	r0, #2
 8014ec2:	4770      	bx	lr
 8014ec4:	b298      	uxth	r0, r3
 8014ec6:	b9a8      	cbnz	r0, 8014ef4 <__lo0bits+0x52>
 8014ec8:	0c1b      	lsrs	r3, r3, #16
 8014eca:	2010      	movs	r0, #16
 8014ecc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014ed0:	bf04      	itt	eq
 8014ed2:	0a1b      	lsreq	r3, r3, #8
 8014ed4:	3008      	addeq	r0, #8
 8014ed6:	071a      	lsls	r2, r3, #28
 8014ed8:	bf04      	itt	eq
 8014eda:	091b      	lsreq	r3, r3, #4
 8014edc:	3004      	addeq	r0, #4
 8014ede:	079a      	lsls	r2, r3, #30
 8014ee0:	bf04      	itt	eq
 8014ee2:	089b      	lsreq	r3, r3, #2
 8014ee4:	3002      	addeq	r0, #2
 8014ee6:	07da      	lsls	r2, r3, #31
 8014ee8:	d402      	bmi.n	8014ef0 <__lo0bits+0x4e>
 8014eea:	085b      	lsrs	r3, r3, #1
 8014eec:	d006      	beq.n	8014efc <__lo0bits+0x5a>
 8014eee:	3001      	adds	r0, #1
 8014ef0:	600b      	str	r3, [r1, #0]
 8014ef2:	4770      	bx	lr
 8014ef4:	4610      	mov	r0, r2
 8014ef6:	e7e9      	b.n	8014ecc <__lo0bits+0x2a>
 8014ef8:	2000      	movs	r0, #0
 8014efa:	4770      	bx	lr
 8014efc:	2020      	movs	r0, #32
 8014efe:	4770      	bx	lr

08014f00 <__i2b>:
 8014f00:	b510      	push	{r4, lr}
 8014f02:	460c      	mov	r4, r1
 8014f04:	2101      	movs	r1, #1
 8014f06:	f7ff fee9 	bl	8014cdc <_Balloc>
 8014f0a:	2201      	movs	r2, #1
 8014f0c:	6144      	str	r4, [r0, #20]
 8014f0e:	6102      	str	r2, [r0, #16]
 8014f10:	bd10      	pop	{r4, pc}

08014f12 <__multiply>:
 8014f12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f16:	4614      	mov	r4, r2
 8014f18:	690a      	ldr	r2, [r1, #16]
 8014f1a:	6923      	ldr	r3, [r4, #16]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	bfb8      	it	lt
 8014f20:	460b      	movlt	r3, r1
 8014f22:	4688      	mov	r8, r1
 8014f24:	bfbc      	itt	lt
 8014f26:	46a0      	movlt	r8, r4
 8014f28:	461c      	movlt	r4, r3
 8014f2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014f2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014f3a:	eb07 0609 	add.w	r6, r7, r9
 8014f3e:	42b3      	cmp	r3, r6
 8014f40:	bfb8      	it	lt
 8014f42:	3101      	addlt	r1, #1
 8014f44:	f7ff feca 	bl	8014cdc <_Balloc>
 8014f48:	f100 0514 	add.w	r5, r0, #20
 8014f4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014f50:	462b      	mov	r3, r5
 8014f52:	2200      	movs	r2, #0
 8014f54:	4573      	cmp	r3, lr
 8014f56:	d316      	bcc.n	8014f86 <__multiply+0x74>
 8014f58:	f104 0214 	add.w	r2, r4, #20
 8014f5c:	f108 0114 	add.w	r1, r8, #20
 8014f60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014f64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	9b00      	ldr	r3, [sp, #0]
 8014f6c:	9201      	str	r2, [sp, #4]
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d80c      	bhi.n	8014f8c <__multiply+0x7a>
 8014f72:	2e00      	cmp	r6, #0
 8014f74:	dd03      	ble.n	8014f7e <__multiply+0x6c>
 8014f76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d05d      	beq.n	801503a <__multiply+0x128>
 8014f7e:	6106      	str	r6, [r0, #16]
 8014f80:	b003      	add	sp, #12
 8014f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f86:	f843 2b04 	str.w	r2, [r3], #4
 8014f8a:	e7e3      	b.n	8014f54 <__multiply+0x42>
 8014f8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8014f90:	f1bb 0f00 	cmp.w	fp, #0
 8014f94:	d023      	beq.n	8014fde <__multiply+0xcc>
 8014f96:	4689      	mov	r9, r1
 8014f98:	46ac      	mov	ip, r5
 8014f9a:	f04f 0800 	mov.w	r8, #0
 8014f9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8014fa2:	f8dc a000 	ldr.w	sl, [ip]
 8014fa6:	b2a3      	uxth	r3, r4
 8014fa8:	fa1f fa8a 	uxth.w	sl, sl
 8014fac:	fb0b a303 	mla	r3, fp, r3, sl
 8014fb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014fb4:	f8dc 4000 	ldr.w	r4, [ip]
 8014fb8:	4443      	add	r3, r8
 8014fba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014fbe:	fb0b 840a 	mla	r4, fp, sl, r8
 8014fc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014fc6:	46e2      	mov	sl, ip
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014fce:	454f      	cmp	r7, r9
 8014fd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014fd4:	f84a 3b04 	str.w	r3, [sl], #4
 8014fd8:	d82b      	bhi.n	8015032 <__multiply+0x120>
 8014fda:	f8cc 8004 	str.w	r8, [ip, #4]
 8014fde:	9b01      	ldr	r3, [sp, #4]
 8014fe0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014fe4:	3204      	adds	r2, #4
 8014fe6:	f1ba 0f00 	cmp.w	sl, #0
 8014fea:	d020      	beq.n	801502e <__multiply+0x11c>
 8014fec:	682b      	ldr	r3, [r5, #0]
 8014fee:	4689      	mov	r9, r1
 8014ff0:	46a8      	mov	r8, r5
 8014ff2:	f04f 0b00 	mov.w	fp, #0
 8014ff6:	f8b9 c000 	ldrh.w	ip, [r9]
 8014ffa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014ffe:	fb0a 440c 	mla	r4, sl, ip, r4
 8015002:	445c      	add	r4, fp
 8015004:	46c4      	mov	ip, r8
 8015006:	b29b      	uxth	r3, r3
 8015008:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801500c:	f84c 3b04 	str.w	r3, [ip], #4
 8015010:	f859 3b04 	ldr.w	r3, [r9], #4
 8015014:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015018:	0c1b      	lsrs	r3, r3, #16
 801501a:	fb0a b303 	mla	r3, sl, r3, fp
 801501e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015022:	454f      	cmp	r7, r9
 8015024:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015028:	d805      	bhi.n	8015036 <__multiply+0x124>
 801502a:	f8c8 3004 	str.w	r3, [r8, #4]
 801502e:	3504      	adds	r5, #4
 8015030:	e79b      	b.n	8014f6a <__multiply+0x58>
 8015032:	46d4      	mov	ip, sl
 8015034:	e7b3      	b.n	8014f9e <__multiply+0x8c>
 8015036:	46e0      	mov	r8, ip
 8015038:	e7dd      	b.n	8014ff6 <__multiply+0xe4>
 801503a:	3e01      	subs	r6, #1
 801503c:	e799      	b.n	8014f72 <__multiply+0x60>
	...

08015040 <__pow5mult>:
 8015040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015044:	4615      	mov	r5, r2
 8015046:	f012 0203 	ands.w	r2, r2, #3
 801504a:	4606      	mov	r6, r0
 801504c:	460f      	mov	r7, r1
 801504e:	d007      	beq.n	8015060 <__pow5mult+0x20>
 8015050:	3a01      	subs	r2, #1
 8015052:	4c21      	ldr	r4, [pc, #132]	; (80150d8 <__pow5mult+0x98>)
 8015054:	2300      	movs	r3, #0
 8015056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801505a:	f7ff fe8a 	bl	8014d72 <__multadd>
 801505e:	4607      	mov	r7, r0
 8015060:	10ad      	asrs	r5, r5, #2
 8015062:	d035      	beq.n	80150d0 <__pow5mult+0x90>
 8015064:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015066:	b93c      	cbnz	r4, 8015078 <__pow5mult+0x38>
 8015068:	2010      	movs	r0, #16
 801506a:	f7fd f807 	bl	801207c <malloc>
 801506e:	6270      	str	r0, [r6, #36]	; 0x24
 8015070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015074:	6004      	str	r4, [r0, #0]
 8015076:	60c4      	str	r4, [r0, #12]
 8015078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801507c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015080:	b94c      	cbnz	r4, 8015096 <__pow5mult+0x56>
 8015082:	f240 2171 	movw	r1, #625	; 0x271
 8015086:	4630      	mov	r0, r6
 8015088:	f7ff ff3a 	bl	8014f00 <__i2b>
 801508c:	2300      	movs	r3, #0
 801508e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015092:	4604      	mov	r4, r0
 8015094:	6003      	str	r3, [r0, #0]
 8015096:	f04f 0800 	mov.w	r8, #0
 801509a:	07eb      	lsls	r3, r5, #31
 801509c:	d50a      	bpl.n	80150b4 <__pow5mult+0x74>
 801509e:	4639      	mov	r1, r7
 80150a0:	4622      	mov	r2, r4
 80150a2:	4630      	mov	r0, r6
 80150a4:	f7ff ff35 	bl	8014f12 <__multiply>
 80150a8:	4639      	mov	r1, r7
 80150aa:	4681      	mov	r9, r0
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff fe49 	bl	8014d44 <_Bfree>
 80150b2:	464f      	mov	r7, r9
 80150b4:	106d      	asrs	r5, r5, #1
 80150b6:	d00b      	beq.n	80150d0 <__pow5mult+0x90>
 80150b8:	6820      	ldr	r0, [r4, #0]
 80150ba:	b938      	cbnz	r0, 80150cc <__pow5mult+0x8c>
 80150bc:	4622      	mov	r2, r4
 80150be:	4621      	mov	r1, r4
 80150c0:	4630      	mov	r0, r6
 80150c2:	f7ff ff26 	bl	8014f12 <__multiply>
 80150c6:	6020      	str	r0, [r4, #0]
 80150c8:	f8c0 8000 	str.w	r8, [r0]
 80150cc:	4604      	mov	r4, r0
 80150ce:	e7e4      	b.n	801509a <__pow5mult+0x5a>
 80150d0:	4638      	mov	r0, r7
 80150d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150d6:	bf00      	nop
 80150d8:	08022610 	.word	0x08022610

080150dc <__lshift>:
 80150dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150e0:	460c      	mov	r4, r1
 80150e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80150e6:	6923      	ldr	r3, [r4, #16]
 80150e8:	6849      	ldr	r1, [r1, #4]
 80150ea:	eb0a 0903 	add.w	r9, sl, r3
 80150ee:	68a3      	ldr	r3, [r4, #8]
 80150f0:	4607      	mov	r7, r0
 80150f2:	4616      	mov	r6, r2
 80150f4:	f109 0501 	add.w	r5, r9, #1
 80150f8:	42ab      	cmp	r3, r5
 80150fa:	db32      	blt.n	8015162 <__lshift+0x86>
 80150fc:	4638      	mov	r0, r7
 80150fe:	f7ff fded 	bl	8014cdc <_Balloc>
 8015102:	2300      	movs	r3, #0
 8015104:	4680      	mov	r8, r0
 8015106:	f100 0114 	add.w	r1, r0, #20
 801510a:	461a      	mov	r2, r3
 801510c:	4553      	cmp	r3, sl
 801510e:	db2b      	blt.n	8015168 <__lshift+0x8c>
 8015110:	6920      	ldr	r0, [r4, #16]
 8015112:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015116:	f104 0314 	add.w	r3, r4, #20
 801511a:	f016 021f 	ands.w	r2, r6, #31
 801511e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015122:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015126:	d025      	beq.n	8015174 <__lshift+0x98>
 8015128:	f1c2 0e20 	rsb	lr, r2, #32
 801512c:	2000      	movs	r0, #0
 801512e:	681e      	ldr	r6, [r3, #0]
 8015130:	468a      	mov	sl, r1
 8015132:	4096      	lsls	r6, r2
 8015134:	4330      	orrs	r0, r6
 8015136:	f84a 0b04 	str.w	r0, [sl], #4
 801513a:	f853 0b04 	ldr.w	r0, [r3], #4
 801513e:	459c      	cmp	ip, r3
 8015140:	fa20 f00e 	lsr.w	r0, r0, lr
 8015144:	d814      	bhi.n	8015170 <__lshift+0x94>
 8015146:	6048      	str	r0, [r1, #4]
 8015148:	b108      	cbz	r0, 801514e <__lshift+0x72>
 801514a:	f109 0502 	add.w	r5, r9, #2
 801514e:	3d01      	subs	r5, #1
 8015150:	4638      	mov	r0, r7
 8015152:	f8c8 5010 	str.w	r5, [r8, #16]
 8015156:	4621      	mov	r1, r4
 8015158:	f7ff fdf4 	bl	8014d44 <_Bfree>
 801515c:	4640      	mov	r0, r8
 801515e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015162:	3101      	adds	r1, #1
 8015164:	005b      	lsls	r3, r3, #1
 8015166:	e7c7      	b.n	80150f8 <__lshift+0x1c>
 8015168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801516c:	3301      	adds	r3, #1
 801516e:	e7cd      	b.n	801510c <__lshift+0x30>
 8015170:	4651      	mov	r1, sl
 8015172:	e7dc      	b.n	801512e <__lshift+0x52>
 8015174:	3904      	subs	r1, #4
 8015176:	f853 2b04 	ldr.w	r2, [r3], #4
 801517a:	f841 2f04 	str.w	r2, [r1, #4]!
 801517e:	459c      	cmp	ip, r3
 8015180:	d8f9      	bhi.n	8015176 <__lshift+0x9a>
 8015182:	e7e4      	b.n	801514e <__lshift+0x72>

08015184 <__mcmp>:
 8015184:	6903      	ldr	r3, [r0, #16]
 8015186:	690a      	ldr	r2, [r1, #16]
 8015188:	1a9b      	subs	r3, r3, r2
 801518a:	b530      	push	{r4, r5, lr}
 801518c:	d10c      	bne.n	80151a8 <__mcmp+0x24>
 801518e:	0092      	lsls	r2, r2, #2
 8015190:	3014      	adds	r0, #20
 8015192:	3114      	adds	r1, #20
 8015194:	1884      	adds	r4, r0, r2
 8015196:	4411      	add	r1, r2
 8015198:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801519c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80151a0:	4295      	cmp	r5, r2
 80151a2:	d003      	beq.n	80151ac <__mcmp+0x28>
 80151a4:	d305      	bcc.n	80151b2 <__mcmp+0x2e>
 80151a6:	2301      	movs	r3, #1
 80151a8:	4618      	mov	r0, r3
 80151aa:	bd30      	pop	{r4, r5, pc}
 80151ac:	42a0      	cmp	r0, r4
 80151ae:	d3f3      	bcc.n	8015198 <__mcmp+0x14>
 80151b0:	e7fa      	b.n	80151a8 <__mcmp+0x24>
 80151b2:	f04f 33ff 	mov.w	r3, #4294967295
 80151b6:	e7f7      	b.n	80151a8 <__mcmp+0x24>

080151b8 <__mdiff>:
 80151b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151bc:	460d      	mov	r5, r1
 80151be:	4607      	mov	r7, r0
 80151c0:	4611      	mov	r1, r2
 80151c2:	4628      	mov	r0, r5
 80151c4:	4614      	mov	r4, r2
 80151c6:	f7ff ffdd 	bl	8015184 <__mcmp>
 80151ca:	1e06      	subs	r6, r0, #0
 80151cc:	d108      	bne.n	80151e0 <__mdiff+0x28>
 80151ce:	4631      	mov	r1, r6
 80151d0:	4638      	mov	r0, r7
 80151d2:	f7ff fd83 	bl	8014cdc <_Balloc>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80151dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e0:	bfa4      	itt	ge
 80151e2:	4623      	movge	r3, r4
 80151e4:	462c      	movge	r4, r5
 80151e6:	4638      	mov	r0, r7
 80151e8:	6861      	ldr	r1, [r4, #4]
 80151ea:	bfa6      	itte	ge
 80151ec:	461d      	movge	r5, r3
 80151ee:	2600      	movge	r6, #0
 80151f0:	2601      	movlt	r6, #1
 80151f2:	f7ff fd73 	bl	8014cdc <_Balloc>
 80151f6:	692b      	ldr	r3, [r5, #16]
 80151f8:	60c6      	str	r6, [r0, #12]
 80151fa:	6926      	ldr	r6, [r4, #16]
 80151fc:	f105 0914 	add.w	r9, r5, #20
 8015200:	f104 0214 	add.w	r2, r4, #20
 8015204:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015208:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801520c:	f100 0514 	add.w	r5, r0, #20
 8015210:	f04f 0e00 	mov.w	lr, #0
 8015214:	f852 ab04 	ldr.w	sl, [r2], #4
 8015218:	f859 4b04 	ldr.w	r4, [r9], #4
 801521c:	fa1e f18a 	uxtah	r1, lr, sl
 8015220:	b2a3      	uxth	r3, r4
 8015222:	1ac9      	subs	r1, r1, r3
 8015224:	0c23      	lsrs	r3, r4, #16
 8015226:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801522a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801522e:	b289      	uxth	r1, r1
 8015230:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015234:	45c8      	cmp	r8, r9
 8015236:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801523a:	4694      	mov	ip, r2
 801523c:	f845 3b04 	str.w	r3, [r5], #4
 8015240:	d8e8      	bhi.n	8015214 <__mdiff+0x5c>
 8015242:	45bc      	cmp	ip, r7
 8015244:	d304      	bcc.n	8015250 <__mdiff+0x98>
 8015246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801524a:	b183      	cbz	r3, 801526e <__mdiff+0xb6>
 801524c:	6106      	str	r6, [r0, #16]
 801524e:	e7c5      	b.n	80151dc <__mdiff+0x24>
 8015250:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015254:	fa1e f381 	uxtah	r3, lr, r1
 8015258:	141a      	asrs	r2, r3, #16
 801525a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801525e:	b29b      	uxth	r3, r3
 8015260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015264:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015268:	f845 3b04 	str.w	r3, [r5], #4
 801526c:	e7e9      	b.n	8015242 <__mdiff+0x8a>
 801526e:	3e01      	subs	r6, #1
 8015270:	e7e9      	b.n	8015246 <__mdiff+0x8e>
	...

08015274 <__ulp>:
 8015274:	4b12      	ldr	r3, [pc, #72]	; (80152c0 <__ulp+0x4c>)
 8015276:	ee10 2a90 	vmov	r2, s1
 801527a:	401a      	ands	r2, r3
 801527c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015280:	2b00      	cmp	r3, #0
 8015282:	dd04      	ble.n	801528e <__ulp+0x1a>
 8015284:	2000      	movs	r0, #0
 8015286:	4619      	mov	r1, r3
 8015288:	ec41 0b10 	vmov	d0, r0, r1
 801528c:	4770      	bx	lr
 801528e:	425b      	negs	r3, r3
 8015290:	151b      	asrs	r3, r3, #20
 8015292:	2b13      	cmp	r3, #19
 8015294:	f04f 0000 	mov.w	r0, #0
 8015298:	f04f 0100 	mov.w	r1, #0
 801529c:	dc04      	bgt.n	80152a8 <__ulp+0x34>
 801529e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80152a2:	fa42 f103 	asr.w	r1, r2, r3
 80152a6:	e7ef      	b.n	8015288 <__ulp+0x14>
 80152a8:	3b14      	subs	r3, #20
 80152aa:	2b1e      	cmp	r3, #30
 80152ac:	f04f 0201 	mov.w	r2, #1
 80152b0:	bfda      	itte	le
 80152b2:	f1c3 031f 	rsble	r3, r3, #31
 80152b6:	fa02 f303 	lslle.w	r3, r2, r3
 80152ba:	4613      	movgt	r3, r2
 80152bc:	4618      	mov	r0, r3
 80152be:	e7e3      	b.n	8015288 <__ulp+0x14>
 80152c0:	7ff00000 	.word	0x7ff00000

080152c4 <__b2d>:
 80152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c6:	6905      	ldr	r5, [r0, #16]
 80152c8:	f100 0714 	add.w	r7, r0, #20
 80152cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80152d0:	1f2e      	subs	r6, r5, #4
 80152d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80152d6:	4620      	mov	r0, r4
 80152d8:	f7ff fdc4 	bl	8014e64 <__hi0bits>
 80152dc:	f1c0 0320 	rsb	r3, r0, #32
 80152e0:	280a      	cmp	r0, #10
 80152e2:	600b      	str	r3, [r1, #0]
 80152e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801535c <__b2d+0x98>
 80152e8:	dc14      	bgt.n	8015314 <__b2d+0x50>
 80152ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80152ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80152f2:	42b7      	cmp	r7, r6
 80152f4:	ea41 030c 	orr.w	r3, r1, ip
 80152f8:	bf34      	ite	cc
 80152fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80152fe:	2100      	movcs	r1, #0
 8015300:	3015      	adds	r0, #21
 8015302:	fa04 f000 	lsl.w	r0, r4, r0
 8015306:	fa21 f10e 	lsr.w	r1, r1, lr
 801530a:	ea40 0201 	orr.w	r2, r0, r1
 801530e:	ec43 2b10 	vmov	d0, r2, r3
 8015312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015314:	42b7      	cmp	r7, r6
 8015316:	bf3a      	itte	cc
 8015318:	f1a5 0608 	subcc.w	r6, r5, #8
 801531c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015320:	2100      	movcs	r1, #0
 8015322:	380b      	subs	r0, #11
 8015324:	d015      	beq.n	8015352 <__b2d+0x8e>
 8015326:	4084      	lsls	r4, r0
 8015328:	f1c0 0520 	rsb	r5, r0, #32
 801532c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015330:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015334:	42be      	cmp	r6, r7
 8015336:	fa21 fc05 	lsr.w	ip, r1, r5
 801533a:	ea44 030c 	orr.w	r3, r4, ip
 801533e:	bf8c      	ite	hi
 8015340:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015344:	2400      	movls	r4, #0
 8015346:	fa01 f000 	lsl.w	r0, r1, r0
 801534a:	40ec      	lsrs	r4, r5
 801534c:	ea40 0204 	orr.w	r2, r0, r4
 8015350:	e7dd      	b.n	801530e <__b2d+0x4a>
 8015352:	ea44 030c 	orr.w	r3, r4, ip
 8015356:	460a      	mov	r2, r1
 8015358:	e7d9      	b.n	801530e <__b2d+0x4a>
 801535a:	bf00      	nop
 801535c:	3ff00000 	.word	0x3ff00000

08015360 <__d2b>:
 8015360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015364:	460e      	mov	r6, r1
 8015366:	2101      	movs	r1, #1
 8015368:	ec59 8b10 	vmov	r8, r9, d0
 801536c:	4615      	mov	r5, r2
 801536e:	f7ff fcb5 	bl	8014cdc <_Balloc>
 8015372:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015376:	4607      	mov	r7, r0
 8015378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801537c:	bb34      	cbnz	r4, 80153cc <__d2b+0x6c>
 801537e:	9301      	str	r3, [sp, #4]
 8015380:	f1b8 0300 	subs.w	r3, r8, #0
 8015384:	d027      	beq.n	80153d6 <__d2b+0x76>
 8015386:	a802      	add	r0, sp, #8
 8015388:	f840 3d08 	str.w	r3, [r0, #-8]!
 801538c:	f7ff fd89 	bl	8014ea2 <__lo0bits>
 8015390:	9900      	ldr	r1, [sp, #0]
 8015392:	b1f0      	cbz	r0, 80153d2 <__d2b+0x72>
 8015394:	9a01      	ldr	r2, [sp, #4]
 8015396:	f1c0 0320 	rsb	r3, r0, #32
 801539a:	fa02 f303 	lsl.w	r3, r2, r3
 801539e:	430b      	orrs	r3, r1
 80153a0:	40c2      	lsrs	r2, r0
 80153a2:	617b      	str	r3, [r7, #20]
 80153a4:	9201      	str	r2, [sp, #4]
 80153a6:	9b01      	ldr	r3, [sp, #4]
 80153a8:	61bb      	str	r3, [r7, #24]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	bf14      	ite	ne
 80153ae:	2102      	movne	r1, #2
 80153b0:	2101      	moveq	r1, #1
 80153b2:	6139      	str	r1, [r7, #16]
 80153b4:	b1c4      	cbz	r4, 80153e8 <__d2b+0x88>
 80153b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80153ba:	4404      	add	r4, r0
 80153bc:	6034      	str	r4, [r6, #0]
 80153be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80153c2:	6028      	str	r0, [r5, #0]
 80153c4:	4638      	mov	r0, r7
 80153c6:	b003      	add	sp, #12
 80153c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80153d0:	e7d5      	b.n	801537e <__d2b+0x1e>
 80153d2:	6179      	str	r1, [r7, #20]
 80153d4:	e7e7      	b.n	80153a6 <__d2b+0x46>
 80153d6:	a801      	add	r0, sp, #4
 80153d8:	f7ff fd63 	bl	8014ea2 <__lo0bits>
 80153dc:	9b01      	ldr	r3, [sp, #4]
 80153de:	617b      	str	r3, [r7, #20]
 80153e0:	2101      	movs	r1, #1
 80153e2:	6139      	str	r1, [r7, #16]
 80153e4:	3020      	adds	r0, #32
 80153e6:	e7e5      	b.n	80153b4 <__d2b+0x54>
 80153e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80153ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80153f0:	6030      	str	r0, [r6, #0]
 80153f2:	6918      	ldr	r0, [r3, #16]
 80153f4:	f7ff fd36 	bl	8014e64 <__hi0bits>
 80153f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80153fc:	e7e1      	b.n	80153c2 <__d2b+0x62>

080153fe <__ratio>:
 80153fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015402:	4688      	mov	r8, r1
 8015404:	4669      	mov	r1, sp
 8015406:	4681      	mov	r9, r0
 8015408:	f7ff ff5c 	bl	80152c4 <__b2d>
 801540c:	a901      	add	r1, sp, #4
 801540e:	4640      	mov	r0, r8
 8015410:	ec57 6b10 	vmov	r6, r7, d0
 8015414:	f7ff ff56 	bl	80152c4 <__b2d>
 8015418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801541c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015420:	eba3 0c02 	sub.w	ip, r3, r2
 8015424:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015428:	1a9b      	subs	r3, r3, r2
 801542a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801542e:	ec5b ab10 	vmov	sl, fp, d0
 8015432:	2b00      	cmp	r3, #0
 8015434:	bfce      	itee	gt
 8015436:	463a      	movgt	r2, r7
 8015438:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801543c:	465a      	movle	r2, fp
 801543e:	4659      	mov	r1, fp
 8015440:	463d      	mov	r5, r7
 8015442:	bfd4      	ite	le
 8015444:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015448:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801544c:	4630      	mov	r0, r6
 801544e:	ee10 2a10 	vmov	r2, s0
 8015452:	460b      	mov	r3, r1
 8015454:	4629      	mov	r1, r5
 8015456:	f7eb fa11 	bl	800087c <__aeabi_ddiv>
 801545a:	ec41 0b10 	vmov	d0, r0, r1
 801545e:	b003      	add	sp, #12
 8015460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015464 <__copybits>:
 8015464:	3901      	subs	r1, #1
 8015466:	b510      	push	{r4, lr}
 8015468:	1149      	asrs	r1, r1, #5
 801546a:	6914      	ldr	r4, [r2, #16]
 801546c:	3101      	adds	r1, #1
 801546e:	f102 0314 	add.w	r3, r2, #20
 8015472:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801547a:	42a3      	cmp	r3, r4
 801547c:	4602      	mov	r2, r0
 801547e:	d303      	bcc.n	8015488 <__copybits+0x24>
 8015480:	2300      	movs	r3, #0
 8015482:	428a      	cmp	r2, r1
 8015484:	d305      	bcc.n	8015492 <__copybits+0x2e>
 8015486:	bd10      	pop	{r4, pc}
 8015488:	f853 2b04 	ldr.w	r2, [r3], #4
 801548c:	f840 2b04 	str.w	r2, [r0], #4
 8015490:	e7f3      	b.n	801547a <__copybits+0x16>
 8015492:	f842 3b04 	str.w	r3, [r2], #4
 8015496:	e7f4      	b.n	8015482 <__copybits+0x1e>

08015498 <__any_on>:
 8015498:	f100 0214 	add.w	r2, r0, #20
 801549c:	6900      	ldr	r0, [r0, #16]
 801549e:	114b      	asrs	r3, r1, #5
 80154a0:	4298      	cmp	r0, r3
 80154a2:	b510      	push	{r4, lr}
 80154a4:	db11      	blt.n	80154ca <__any_on+0x32>
 80154a6:	dd0a      	ble.n	80154be <__any_on+0x26>
 80154a8:	f011 011f 	ands.w	r1, r1, #31
 80154ac:	d007      	beq.n	80154be <__any_on+0x26>
 80154ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80154b2:	fa24 f001 	lsr.w	r0, r4, r1
 80154b6:	fa00 f101 	lsl.w	r1, r0, r1
 80154ba:	428c      	cmp	r4, r1
 80154bc:	d10b      	bne.n	80154d6 <__any_on+0x3e>
 80154be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80154c2:	4293      	cmp	r3, r2
 80154c4:	d803      	bhi.n	80154ce <__any_on+0x36>
 80154c6:	2000      	movs	r0, #0
 80154c8:	bd10      	pop	{r4, pc}
 80154ca:	4603      	mov	r3, r0
 80154cc:	e7f7      	b.n	80154be <__any_on+0x26>
 80154ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80154d2:	2900      	cmp	r1, #0
 80154d4:	d0f5      	beq.n	80154c2 <__any_on+0x2a>
 80154d6:	2001      	movs	r0, #1
 80154d8:	e7f6      	b.n	80154c8 <__any_on+0x30>

080154da <_calloc_r>:
 80154da:	b538      	push	{r3, r4, r5, lr}
 80154dc:	fb02 f401 	mul.w	r4, r2, r1
 80154e0:	4621      	mov	r1, r4
 80154e2:	f7fc fe3d 	bl	8012160 <_malloc_r>
 80154e6:	4605      	mov	r5, r0
 80154e8:	b118      	cbz	r0, 80154f2 <_calloc_r+0x18>
 80154ea:	4622      	mov	r2, r4
 80154ec:	2100      	movs	r1, #0
 80154ee:	f7fc fde0 	bl	80120b2 <memset>
 80154f2:	4628      	mov	r0, r5
 80154f4:	bd38      	pop	{r3, r4, r5, pc}

080154f6 <__ssputs_r>:
 80154f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154fa:	688e      	ldr	r6, [r1, #8]
 80154fc:	429e      	cmp	r6, r3
 80154fe:	4682      	mov	sl, r0
 8015500:	460c      	mov	r4, r1
 8015502:	4690      	mov	r8, r2
 8015504:	4699      	mov	r9, r3
 8015506:	d837      	bhi.n	8015578 <__ssputs_r+0x82>
 8015508:	898a      	ldrh	r2, [r1, #12]
 801550a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801550e:	d031      	beq.n	8015574 <__ssputs_r+0x7e>
 8015510:	6825      	ldr	r5, [r4, #0]
 8015512:	6909      	ldr	r1, [r1, #16]
 8015514:	1a6f      	subs	r7, r5, r1
 8015516:	6965      	ldr	r5, [r4, #20]
 8015518:	2302      	movs	r3, #2
 801551a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801551e:	fb95 f5f3 	sdiv	r5, r5, r3
 8015522:	f109 0301 	add.w	r3, r9, #1
 8015526:	443b      	add	r3, r7
 8015528:	429d      	cmp	r5, r3
 801552a:	bf38      	it	cc
 801552c:	461d      	movcc	r5, r3
 801552e:	0553      	lsls	r3, r2, #21
 8015530:	d530      	bpl.n	8015594 <__ssputs_r+0x9e>
 8015532:	4629      	mov	r1, r5
 8015534:	f7fc fe14 	bl	8012160 <_malloc_r>
 8015538:	4606      	mov	r6, r0
 801553a:	b950      	cbnz	r0, 8015552 <__ssputs_r+0x5c>
 801553c:	230c      	movs	r3, #12
 801553e:	f8ca 3000 	str.w	r3, [sl]
 8015542:	89a3      	ldrh	r3, [r4, #12]
 8015544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015548:	81a3      	strh	r3, [r4, #12]
 801554a:	f04f 30ff 	mov.w	r0, #4294967295
 801554e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015552:	463a      	mov	r2, r7
 8015554:	6921      	ldr	r1, [r4, #16]
 8015556:	f7fc fda1 	bl	801209c <memcpy>
 801555a:	89a3      	ldrh	r3, [r4, #12]
 801555c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015564:	81a3      	strh	r3, [r4, #12]
 8015566:	6126      	str	r6, [r4, #16]
 8015568:	6165      	str	r5, [r4, #20]
 801556a:	443e      	add	r6, r7
 801556c:	1bed      	subs	r5, r5, r7
 801556e:	6026      	str	r6, [r4, #0]
 8015570:	60a5      	str	r5, [r4, #8]
 8015572:	464e      	mov	r6, r9
 8015574:	454e      	cmp	r6, r9
 8015576:	d900      	bls.n	801557a <__ssputs_r+0x84>
 8015578:	464e      	mov	r6, r9
 801557a:	4632      	mov	r2, r6
 801557c:	4641      	mov	r1, r8
 801557e:	6820      	ldr	r0, [r4, #0]
 8015580:	f000 f931 	bl	80157e6 <memmove>
 8015584:	68a3      	ldr	r3, [r4, #8]
 8015586:	1b9b      	subs	r3, r3, r6
 8015588:	60a3      	str	r3, [r4, #8]
 801558a:	6823      	ldr	r3, [r4, #0]
 801558c:	441e      	add	r6, r3
 801558e:	6026      	str	r6, [r4, #0]
 8015590:	2000      	movs	r0, #0
 8015592:	e7dc      	b.n	801554e <__ssputs_r+0x58>
 8015594:	462a      	mov	r2, r5
 8015596:	f000 f93f 	bl	8015818 <_realloc_r>
 801559a:	4606      	mov	r6, r0
 801559c:	2800      	cmp	r0, #0
 801559e:	d1e2      	bne.n	8015566 <__ssputs_r+0x70>
 80155a0:	6921      	ldr	r1, [r4, #16]
 80155a2:	4650      	mov	r0, sl
 80155a4:	f7fc fd8e 	bl	80120c4 <_free_r>
 80155a8:	e7c8      	b.n	801553c <__ssputs_r+0x46>
	...

080155ac <_svfiprintf_r>:
 80155ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155b0:	461d      	mov	r5, r3
 80155b2:	898b      	ldrh	r3, [r1, #12]
 80155b4:	061f      	lsls	r7, r3, #24
 80155b6:	b09d      	sub	sp, #116	; 0x74
 80155b8:	4680      	mov	r8, r0
 80155ba:	460c      	mov	r4, r1
 80155bc:	4616      	mov	r6, r2
 80155be:	d50f      	bpl.n	80155e0 <_svfiprintf_r+0x34>
 80155c0:	690b      	ldr	r3, [r1, #16]
 80155c2:	b96b      	cbnz	r3, 80155e0 <_svfiprintf_r+0x34>
 80155c4:	2140      	movs	r1, #64	; 0x40
 80155c6:	f7fc fdcb 	bl	8012160 <_malloc_r>
 80155ca:	6020      	str	r0, [r4, #0]
 80155cc:	6120      	str	r0, [r4, #16]
 80155ce:	b928      	cbnz	r0, 80155dc <_svfiprintf_r+0x30>
 80155d0:	230c      	movs	r3, #12
 80155d2:	f8c8 3000 	str.w	r3, [r8]
 80155d6:	f04f 30ff 	mov.w	r0, #4294967295
 80155da:	e0c8      	b.n	801576e <_svfiprintf_r+0x1c2>
 80155dc:	2340      	movs	r3, #64	; 0x40
 80155de:	6163      	str	r3, [r4, #20]
 80155e0:	2300      	movs	r3, #0
 80155e2:	9309      	str	r3, [sp, #36]	; 0x24
 80155e4:	2320      	movs	r3, #32
 80155e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155ea:	2330      	movs	r3, #48	; 0x30
 80155ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155f0:	9503      	str	r5, [sp, #12]
 80155f2:	f04f 0b01 	mov.w	fp, #1
 80155f6:	4637      	mov	r7, r6
 80155f8:	463d      	mov	r5, r7
 80155fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80155fe:	b10b      	cbz	r3, 8015604 <_svfiprintf_r+0x58>
 8015600:	2b25      	cmp	r3, #37	; 0x25
 8015602:	d13e      	bne.n	8015682 <_svfiprintf_r+0xd6>
 8015604:	ebb7 0a06 	subs.w	sl, r7, r6
 8015608:	d00b      	beq.n	8015622 <_svfiprintf_r+0x76>
 801560a:	4653      	mov	r3, sl
 801560c:	4632      	mov	r2, r6
 801560e:	4621      	mov	r1, r4
 8015610:	4640      	mov	r0, r8
 8015612:	f7ff ff70 	bl	80154f6 <__ssputs_r>
 8015616:	3001      	adds	r0, #1
 8015618:	f000 80a4 	beq.w	8015764 <_svfiprintf_r+0x1b8>
 801561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801561e:	4453      	add	r3, sl
 8015620:	9309      	str	r3, [sp, #36]	; 0x24
 8015622:	783b      	ldrb	r3, [r7, #0]
 8015624:	2b00      	cmp	r3, #0
 8015626:	f000 809d 	beq.w	8015764 <_svfiprintf_r+0x1b8>
 801562a:	2300      	movs	r3, #0
 801562c:	f04f 32ff 	mov.w	r2, #4294967295
 8015630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015634:	9304      	str	r3, [sp, #16]
 8015636:	9307      	str	r3, [sp, #28]
 8015638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801563c:	931a      	str	r3, [sp, #104]	; 0x68
 801563e:	462f      	mov	r7, r5
 8015640:	2205      	movs	r2, #5
 8015642:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015646:	4850      	ldr	r0, [pc, #320]	; (8015788 <_svfiprintf_r+0x1dc>)
 8015648:	f7ea fde2 	bl	8000210 <memchr>
 801564c:	9b04      	ldr	r3, [sp, #16]
 801564e:	b9d0      	cbnz	r0, 8015686 <_svfiprintf_r+0xda>
 8015650:	06d9      	lsls	r1, r3, #27
 8015652:	bf44      	itt	mi
 8015654:	2220      	movmi	r2, #32
 8015656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801565a:	071a      	lsls	r2, r3, #28
 801565c:	bf44      	itt	mi
 801565e:	222b      	movmi	r2, #43	; 0x2b
 8015660:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015664:	782a      	ldrb	r2, [r5, #0]
 8015666:	2a2a      	cmp	r2, #42	; 0x2a
 8015668:	d015      	beq.n	8015696 <_svfiprintf_r+0xea>
 801566a:	9a07      	ldr	r2, [sp, #28]
 801566c:	462f      	mov	r7, r5
 801566e:	2000      	movs	r0, #0
 8015670:	250a      	movs	r5, #10
 8015672:	4639      	mov	r1, r7
 8015674:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015678:	3b30      	subs	r3, #48	; 0x30
 801567a:	2b09      	cmp	r3, #9
 801567c:	d94d      	bls.n	801571a <_svfiprintf_r+0x16e>
 801567e:	b1b8      	cbz	r0, 80156b0 <_svfiprintf_r+0x104>
 8015680:	e00f      	b.n	80156a2 <_svfiprintf_r+0xf6>
 8015682:	462f      	mov	r7, r5
 8015684:	e7b8      	b.n	80155f8 <_svfiprintf_r+0x4c>
 8015686:	4a40      	ldr	r2, [pc, #256]	; (8015788 <_svfiprintf_r+0x1dc>)
 8015688:	1a80      	subs	r0, r0, r2
 801568a:	fa0b f000 	lsl.w	r0, fp, r0
 801568e:	4318      	orrs	r0, r3
 8015690:	9004      	str	r0, [sp, #16]
 8015692:	463d      	mov	r5, r7
 8015694:	e7d3      	b.n	801563e <_svfiprintf_r+0x92>
 8015696:	9a03      	ldr	r2, [sp, #12]
 8015698:	1d11      	adds	r1, r2, #4
 801569a:	6812      	ldr	r2, [r2, #0]
 801569c:	9103      	str	r1, [sp, #12]
 801569e:	2a00      	cmp	r2, #0
 80156a0:	db01      	blt.n	80156a6 <_svfiprintf_r+0xfa>
 80156a2:	9207      	str	r2, [sp, #28]
 80156a4:	e004      	b.n	80156b0 <_svfiprintf_r+0x104>
 80156a6:	4252      	negs	r2, r2
 80156a8:	f043 0302 	orr.w	r3, r3, #2
 80156ac:	9207      	str	r2, [sp, #28]
 80156ae:	9304      	str	r3, [sp, #16]
 80156b0:	783b      	ldrb	r3, [r7, #0]
 80156b2:	2b2e      	cmp	r3, #46	; 0x2e
 80156b4:	d10c      	bne.n	80156d0 <_svfiprintf_r+0x124>
 80156b6:	787b      	ldrb	r3, [r7, #1]
 80156b8:	2b2a      	cmp	r3, #42	; 0x2a
 80156ba:	d133      	bne.n	8015724 <_svfiprintf_r+0x178>
 80156bc:	9b03      	ldr	r3, [sp, #12]
 80156be:	1d1a      	adds	r2, r3, #4
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	9203      	str	r2, [sp, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	bfb8      	it	lt
 80156c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80156cc:	3702      	adds	r7, #2
 80156ce:	9305      	str	r3, [sp, #20]
 80156d0:	4d2e      	ldr	r5, [pc, #184]	; (801578c <_svfiprintf_r+0x1e0>)
 80156d2:	7839      	ldrb	r1, [r7, #0]
 80156d4:	2203      	movs	r2, #3
 80156d6:	4628      	mov	r0, r5
 80156d8:	f7ea fd9a 	bl	8000210 <memchr>
 80156dc:	b138      	cbz	r0, 80156ee <_svfiprintf_r+0x142>
 80156de:	2340      	movs	r3, #64	; 0x40
 80156e0:	1b40      	subs	r0, r0, r5
 80156e2:	fa03 f000 	lsl.w	r0, r3, r0
 80156e6:	9b04      	ldr	r3, [sp, #16]
 80156e8:	4303      	orrs	r3, r0
 80156ea:	3701      	adds	r7, #1
 80156ec:	9304      	str	r3, [sp, #16]
 80156ee:	7839      	ldrb	r1, [r7, #0]
 80156f0:	4827      	ldr	r0, [pc, #156]	; (8015790 <_svfiprintf_r+0x1e4>)
 80156f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156f6:	2206      	movs	r2, #6
 80156f8:	1c7e      	adds	r6, r7, #1
 80156fa:	f7ea fd89 	bl	8000210 <memchr>
 80156fe:	2800      	cmp	r0, #0
 8015700:	d038      	beq.n	8015774 <_svfiprintf_r+0x1c8>
 8015702:	4b24      	ldr	r3, [pc, #144]	; (8015794 <_svfiprintf_r+0x1e8>)
 8015704:	bb13      	cbnz	r3, 801574c <_svfiprintf_r+0x1a0>
 8015706:	9b03      	ldr	r3, [sp, #12]
 8015708:	3307      	adds	r3, #7
 801570a:	f023 0307 	bic.w	r3, r3, #7
 801570e:	3308      	adds	r3, #8
 8015710:	9303      	str	r3, [sp, #12]
 8015712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015714:	444b      	add	r3, r9
 8015716:	9309      	str	r3, [sp, #36]	; 0x24
 8015718:	e76d      	b.n	80155f6 <_svfiprintf_r+0x4a>
 801571a:	fb05 3202 	mla	r2, r5, r2, r3
 801571e:	2001      	movs	r0, #1
 8015720:	460f      	mov	r7, r1
 8015722:	e7a6      	b.n	8015672 <_svfiprintf_r+0xc6>
 8015724:	2300      	movs	r3, #0
 8015726:	3701      	adds	r7, #1
 8015728:	9305      	str	r3, [sp, #20]
 801572a:	4619      	mov	r1, r3
 801572c:	250a      	movs	r5, #10
 801572e:	4638      	mov	r0, r7
 8015730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015734:	3a30      	subs	r2, #48	; 0x30
 8015736:	2a09      	cmp	r2, #9
 8015738:	d903      	bls.n	8015742 <_svfiprintf_r+0x196>
 801573a:	2b00      	cmp	r3, #0
 801573c:	d0c8      	beq.n	80156d0 <_svfiprintf_r+0x124>
 801573e:	9105      	str	r1, [sp, #20]
 8015740:	e7c6      	b.n	80156d0 <_svfiprintf_r+0x124>
 8015742:	fb05 2101 	mla	r1, r5, r1, r2
 8015746:	2301      	movs	r3, #1
 8015748:	4607      	mov	r7, r0
 801574a:	e7f0      	b.n	801572e <_svfiprintf_r+0x182>
 801574c:	ab03      	add	r3, sp, #12
 801574e:	9300      	str	r3, [sp, #0]
 8015750:	4622      	mov	r2, r4
 8015752:	4b11      	ldr	r3, [pc, #68]	; (8015798 <_svfiprintf_r+0x1ec>)
 8015754:	a904      	add	r1, sp, #16
 8015756:	4640      	mov	r0, r8
 8015758:	f7fc fdf0 	bl	801233c <_printf_float>
 801575c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015760:	4681      	mov	r9, r0
 8015762:	d1d6      	bne.n	8015712 <_svfiprintf_r+0x166>
 8015764:	89a3      	ldrh	r3, [r4, #12]
 8015766:	065b      	lsls	r3, r3, #25
 8015768:	f53f af35 	bmi.w	80155d6 <_svfiprintf_r+0x2a>
 801576c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801576e:	b01d      	add	sp, #116	; 0x74
 8015770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015774:	ab03      	add	r3, sp, #12
 8015776:	9300      	str	r3, [sp, #0]
 8015778:	4622      	mov	r2, r4
 801577a:	4b07      	ldr	r3, [pc, #28]	; (8015798 <_svfiprintf_r+0x1ec>)
 801577c:	a904      	add	r1, sp, #16
 801577e:	4640      	mov	r0, r8
 8015780:	f7fd f892 	bl	80128a8 <_printf_i>
 8015784:	e7ea      	b.n	801575c <_svfiprintf_r+0x1b0>
 8015786:	bf00      	nop
 8015788:	0802261c 	.word	0x0802261c
 801578c:	08022622 	.word	0x08022622
 8015790:	08022626 	.word	0x08022626
 8015794:	0801233d 	.word	0x0801233d
 8015798:	080154f7 	.word	0x080154f7

0801579c <nanf>:
 801579c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80157a4 <nanf+0x8>
 80157a0:	4770      	bx	lr
 80157a2:	bf00      	nop
 80157a4:	7fc00000 	.word	0x7fc00000

080157a8 <strncmp>:
 80157a8:	b510      	push	{r4, lr}
 80157aa:	b16a      	cbz	r2, 80157c8 <strncmp+0x20>
 80157ac:	3901      	subs	r1, #1
 80157ae:	1884      	adds	r4, r0, r2
 80157b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80157b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80157b8:	4293      	cmp	r3, r2
 80157ba:	d103      	bne.n	80157c4 <strncmp+0x1c>
 80157bc:	42a0      	cmp	r0, r4
 80157be:	d001      	beq.n	80157c4 <strncmp+0x1c>
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d1f5      	bne.n	80157b0 <strncmp+0x8>
 80157c4:	1a98      	subs	r0, r3, r2
 80157c6:	bd10      	pop	{r4, pc}
 80157c8:	4610      	mov	r0, r2
 80157ca:	e7fc      	b.n	80157c6 <strncmp+0x1e>

080157cc <__ascii_wctomb>:
 80157cc:	b149      	cbz	r1, 80157e2 <__ascii_wctomb+0x16>
 80157ce:	2aff      	cmp	r2, #255	; 0xff
 80157d0:	bf85      	ittet	hi
 80157d2:	238a      	movhi	r3, #138	; 0x8a
 80157d4:	6003      	strhi	r3, [r0, #0]
 80157d6:	700a      	strbls	r2, [r1, #0]
 80157d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80157dc:	bf98      	it	ls
 80157de:	2001      	movls	r0, #1
 80157e0:	4770      	bx	lr
 80157e2:	4608      	mov	r0, r1
 80157e4:	4770      	bx	lr

080157e6 <memmove>:
 80157e6:	4288      	cmp	r0, r1
 80157e8:	b510      	push	{r4, lr}
 80157ea:	eb01 0302 	add.w	r3, r1, r2
 80157ee:	d807      	bhi.n	8015800 <memmove+0x1a>
 80157f0:	1e42      	subs	r2, r0, #1
 80157f2:	4299      	cmp	r1, r3
 80157f4:	d00a      	beq.n	801580c <memmove+0x26>
 80157f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80157fe:	e7f8      	b.n	80157f2 <memmove+0xc>
 8015800:	4283      	cmp	r3, r0
 8015802:	d9f5      	bls.n	80157f0 <memmove+0xa>
 8015804:	1881      	adds	r1, r0, r2
 8015806:	1ad2      	subs	r2, r2, r3
 8015808:	42d3      	cmn	r3, r2
 801580a:	d100      	bne.n	801580e <memmove+0x28>
 801580c:	bd10      	pop	{r4, pc}
 801580e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015812:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015816:	e7f7      	b.n	8015808 <memmove+0x22>

08015818 <_realloc_r>:
 8015818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801581a:	4607      	mov	r7, r0
 801581c:	4614      	mov	r4, r2
 801581e:	460e      	mov	r6, r1
 8015820:	b921      	cbnz	r1, 801582c <_realloc_r+0x14>
 8015822:	4611      	mov	r1, r2
 8015824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015828:	f7fc bc9a 	b.w	8012160 <_malloc_r>
 801582c:	b922      	cbnz	r2, 8015838 <_realloc_r+0x20>
 801582e:	f7fc fc49 	bl	80120c4 <_free_r>
 8015832:	4625      	mov	r5, r4
 8015834:	4628      	mov	r0, r5
 8015836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015838:	f000 f814 	bl	8015864 <_malloc_usable_size_r>
 801583c:	42a0      	cmp	r0, r4
 801583e:	d20f      	bcs.n	8015860 <_realloc_r+0x48>
 8015840:	4621      	mov	r1, r4
 8015842:	4638      	mov	r0, r7
 8015844:	f7fc fc8c 	bl	8012160 <_malloc_r>
 8015848:	4605      	mov	r5, r0
 801584a:	2800      	cmp	r0, #0
 801584c:	d0f2      	beq.n	8015834 <_realloc_r+0x1c>
 801584e:	4631      	mov	r1, r6
 8015850:	4622      	mov	r2, r4
 8015852:	f7fc fc23 	bl	801209c <memcpy>
 8015856:	4631      	mov	r1, r6
 8015858:	4638      	mov	r0, r7
 801585a:	f7fc fc33 	bl	80120c4 <_free_r>
 801585e:	e7e9      	b.n	8015834 <_realloc_r+0x1c>
 8015860:	4635      	mov	r5, r6
 8015862:	e7e7      	b.n	8015834 <_realloc_r+0x1c>

08015864 <_malloc_usable_size_r>:
 8015864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015868:	1f18      	subs	r0, r3, #4
 801586a:	2b00      	cmp	r3, #0
 801586c:	bfbc      	itt	lt
 801586e:	580b      	ldrlt	r3, [r1, r0]
 8015870:	18c0      	addlt	r0, r0, r3
 8015872:	4770      	bx	lr

08015874 <_init>:
 8015874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015876:	bf00      	nop
 8015878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801587a:	bc08      	pop	{r3}
 801587c:	469e      	mov	lr, r3
 801587e:	4770      	bx	lr

08015880 <_fini>:
 8015880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015882:	bf00      	nop
 8015884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015886:	bc08      	pop	{r3}
 8015888:	469e      	mov	lr, r3
 801588a:	4770      	bx	lr

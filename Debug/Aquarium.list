
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012500  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000de14  080126c0  080126c0  000226c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080204d4  080204d4  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  080204d4  080204d4  000304d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080204dc  080204dc  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080204dc  080204dc  000304dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080204e0  080204e0  000304e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  080204e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cc08  200002c0  08020780  000402c0  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  2000cec8  08020780  0004cec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faf4  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b2e  00000000  00000000  0005fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  000658f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b60  00000000  00000000  00067770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a34  00000000  00000000  000692d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c83c  00000000  00000000  0008ad04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f519  00000000  00000000  000b7540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090e0  00000000  00000000  00156aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c0 	.word	0x200002c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012688 	.word	0x08012688

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	08012688 	.word	0x08012688

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <apInit>:

uint8_t button_status;


void apInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	//cliOpen(_DEF_UART1, 57600);
	uartOpen(_DEF_UART1, 57600);
 800102c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001030:	2000      	movs	r0, #0
 8001032:	f004 fa83 	bl	800553c <uartOpen>
	menuSetCallBack(lcdMain);
 8001036:	4802      	ldr	r0, [pc, #8]	; (8001040 <apInit+0x18>)
 8001038:	f002 f89e 	bl	8003178 <menuSetCallBack>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	080010bd 	.word	0x080010bd

08001044 <apMain>:

void apMain(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800104a:	f000 f96a 	bl	8001322 <millis>
 800104e:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8001050:	f000 f967 	bl	8001322 <millis>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800105e:	d314      	bcc.n	800108a <apMain+0x46>
    {
      pre_time = millis();
 8001060:	f000 f95f 	bl	8001322 <millis>
 8001064:	60f8      	str	r0, [r7, #12]
			struct {
      	float water_temp;
      	uint32_t water_level;
      	float water_tds;
			} tmp;
    	tmp.water_temp = (float)ds18b20[0].Temperature;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <apMain+0x54>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	603b      	str	r3, [r7, #0]
    	tmp.water_level = (uint32_t)sonar_tbl[0].filter_distance_cm/10;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <apMain+0x58>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <apMain+0x5c>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	607b      	str	r3, [r7, #4]
    	tmp.water_tds = (float)tds_tbl[0].filter_tdsValue;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <apMain+0x60>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	60bb      	str	r3, [r7, #8]
			s_struct((uint8_t*)&tmp,12);
 8001080:	463b      	mov	r3, r7
 8001082:	210c      	movs	r1, #12
 8001084:	4618      	mov	r0, r3
 8001086:	f003 ff8d 	bl	8004fa4 <s_struct>
    }

    sensorMain();
 800108a:	f000 f80d 	bl	80010a8 <sensorMain>
    //cliMain();
    menuMain();
 800108e:	f002 f8d7 	bl	8003240 <menuMain>
    SerialCom();
 8001092:	f003 ff9d 	bl	8004fd0 <SerialCom>
    if (millis()-pre_time >= 1000)
 8001096:	e7db      	b.n	8001050 <apMain+0xc>
 8001098:	200002e4 	.word	0x200002e4
 800109c:	2000c7a8 	.word	0x2000c7a8
 80010a0:	cccccccd 	.word	0xcccccccd
 80010a4:	2000c95c 	.word	0x2000c95c

080010a8 <sensorMain>:
  }
}

void sensorMain(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 80010ac:	f000 fd68 	bl	8001b80 <Ds18b20_ManualConvert>
    Sonar_measure();
 80010b0:	f003 f862 	bl	8004178 <Sonar_measure>
    tds_measure();
 80010b4:	f003 fd28 	bl	8004b08 <tds_measure>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcdMain>:

void lcdMain(uint8_t layer)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  static bool blink = 0;

  if (lcdIsInit() != true)
 80010c6:	f001 f9f1 	bl	80024ac <lcdIsInit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80d6 	bne.w	8001284 <lcdMain+0x1c8>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 80010d8:	f001 fbfa 	bl	80028d0 <lcdDrawAvailable>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80d1 	beq.w	8001286 <lcdMain+0x1ca>
  {
      lcdClearBuffer(black);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f001 fa1f 	bl	8002528 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f001 ffce 	bl	800308c <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 80010f0:	4b66      	ldr	r3, [pc, #408]	; (800128c <lcdMain+0x1d0>)
 80010f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2000      	movs	r0, #0
 80010fa:	f001 fdf7 	bl	8002cec <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010fe:	2003      	movs	r0, #3
 8001100:	f001 ffc4 	bl	800308c <lcdSetFont>
      lcdPrintf(0,16*1, white, "물온도 : %3.1f 도" , ds18b20[0].Temperature);
 8001104:	4b62      	ldr	r3, [pc, #392]	; (8001290 <lcdMain+0x1d4>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa35 	bl	8000578 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9cd 2300 	strd	r2, r3, [sp]
 8001116:	4b5f      	ldr	r3, [pc, #380]	; (8001294 <lcdMain+0x1d8>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	2110      	movs	r1, #16
 800111e:	2000      	movs	r0, #0
 8001120:	f001 fde4 	bl	8002cec <lcdPrintf>
      lcdPrintf(0,16*2, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <lcdMain+0x1dc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a5c      	ldr	r2, [pc, #368]	; (800129c <lcdMain+0x1e0>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <lcdMain+0x1e4>)
 8001134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001138:	2120      	movs	r1, #32
 800113a:	2000      	movs	r0, #0
 800113c:	f001 fdd6 	bl	8002cec <lcdPrintf>
      lcdPrintf(0,16*3, white, "TDS : %4.1f ppm" , tds_tbl[0].filter_tdsValue);
 8001140:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <lcdMain+0x1e8>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa17 	bl	8000578 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9cd 2300 	strd	r2, r3, [sp]
 8001152:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <lcdMain+0x1ec>)
 8001154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001158:	2130      	movs	r1, #48	; 0x30
 800115a:	2000      	movs	r0, #0
 800115c:	f001 fdc6 	bl	8002cec <lcdPrintf>
      //lcdDrawBufferImage(50, 20, 50, 50, TEST);

      blink = get_blink();
 8001160:	f004 fcf4 	bl	8005b4c <get_blink>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <lcdMain+0x1f0>)
 800116a:	701a      	strb	r2, [r3, #0]
      draw_fan_status(0, 16*4, blink);
 800116c:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <lcdMain+0x1f0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	2000      	movs	r0, #0
 8001176:	f004 fc9f 	bl	8005ab8 <draw_fan_status>

      switch(buttonMain())
 800117a:	f000 fbfd 	bl	8001978 <buttonMain>
 800117e:	4603      	mov	r3, r0
 8001180:	3b01      	subs	r3, #1
 8001182:	2b0f      	cmp	r3, #15
 8001184:	d83b      	bhi.n	80011fe <lcdMain+0x142>
 8001186:	a201      	add	r2, pc, #4	; (adr r2, 800118c <lcdMain+0xd0>)
 8001188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118c:	080011cd 	.word	0x080011cd
 8001190:	080011d7 	.word	0x080011d7
 8001194:	080011ff 	.word	0x080011ff
 8001198:	080011e1 	.word	0x080011e1
 800119c:	080011ff 	.word	0x080011ff
 80011a0:	080011ff 	.word	0x080011ff
 80011a4:	080011ff 	.word	0x080011ff
 80011a8:	080011eb 	.word	0x080011eb
 80011ac:	080011ff 	.word	0x080011ff
 80011b0:	080011ff 	.word	0x080011ff
 80011b4:	080011ff 	.word	0x080011ff
 80011b8:	080011ff 	.word	0x080011ff
 80011bc:	080011ff 	.word	0x080011ff
 80011c0:	080011ff 	.word	0x080011ff
 80011c4:	080011ff 	.word	0x080011ff
 80011c8:	080011f5 	.word	0x080011f5
      {
      	case(USER_BTN):
  				{
  					gpioPinWrite(BUZZER, true);
 80011cc:	2101      	movs	r1, #1
 80011ce:	2008      	movs	r0, #8
 80011d0:	f001 f85e 	bl	8002290 <gpioPinWrite>
  				}
      	break;
 80011d4:	e053      	b.n	800127e <lcdMain+0x1c2>

      	case(MENU_BTN):
  				{
  					gpioPinWrite(Relay1, true);
 80011d6:	2101      	movs	r1, #1
 80011d8:	2009      	movs	r0, #9
 80011da:	f001 f859 	bl	8002290 <gpioPinWrite>
  				}
      	break;
 80011de:	e04e      	b.n	800127e <lcdMain+0x1c2>

      	case(UP_BTN):
  				{
  					gpioPinWrite(Relay2, true);
 80011e0:	2101      	movs	r1, #1
 80011e2:	200a      	movs	r0, #10
 80011e4:	f001 f854 	bl	8002290 <gpioPinWrite>
  				}
      	break;
 80011e8:	e049      	b.n	800127e <lcdMain+0x1c2>

      	case(DOWN_BTN):
  				{
  					gpioPinWrite(Relay3, true);
 80011ea:	2101      	movs	r1, #1
 80011ec:	200b      	movs	r0, #11
 80011ee:	f001 f84f 	bl	8002290 <gpioPinWrite>
  				}
      	break;
 80011f2:	e044      	b.n	800127e <lcdMain+0x1c2>

      	case(SEL_BTN):
  				{
  					gpioPinWrite(Relay4, true);
 80011f4:	2101      	movs	r1, #1
 80011f6:	200c      	movs	r0, #12
 80011f8:	f001 f84a 	bl	8002290 <gpioPinWrite>
  				}
      	break;
 80011fc:	e03f      	b.n	800127e <lcdMain+0x1c2>

      	default:
      	{
          lcdDrawRoundRect(0, 0+110,  35, 17, 5, white);
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	2305      	movs	r3, #5
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2311      	movs	r3, #17
 800120a:	2223      	movs	r2, #35	; 0x23
 800120c:	216e      	movs	r1, #110	; 0x6e
 800120e:	2000      	movs	r0, #0
 8001210:	f001 fa32 	bl	8002678 <lcdDrawRoundRect>
          lcdDrawFillRoundRect(1, 1+110, 33, 15, 5, red);
 8001214:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2305      	movs	r3, #5
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	2221      	movs	r2, #33	; 0x21
 8001222:	216f      	movs	r1, #111	; 0x6f
 8001224:	2001      	movs	r0, #1
 8001226:	f001 fb21 	bl	800286c <lcdDrawFillRoundRect>
          lcdSetFont(LCD_FONT_07x10);
 800122a:	2000      	movs	r0, #0
 800122c:	f001 ff2e 	bl	800308c <lcdSetFont>
          lcdPrintf(5,5+110, white, "FAN");
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <lcdMain+0x1f4>)
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	2173      	movs	r1, #115	; 0x73
 8001238:	2005      	movs	r0, #5
 800123a:	f001 fd57 	bl	8002cec <lcdPrintf>

          lcdDrawRoundRect(0+40, 0+110,  35, 17, 5, white);
 800123e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2305      	movs	r3, #5
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2311      	movs	r3, #17
 800124a:	2223      	movs	r2, #35	; 0x23
 800124c:	216e      	movs	r1, #110	; 0x6e
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f001 fa12 	bl	8002678 <lcdDrawRoundRect>
          lcdDrawFillRoundRect(1+40, 1+110, 33, 15, 5, red);
 8001254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2305      	movs	r3, #5
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	230f      	movs	r3, #15
 8001260:	2221      	movs	r2, #33	; 0x21
 8001262:	216f      	movs	r1, #111	; 0x6f
 8001264:	2029      	movs	r0, #41	; 0x29
 8001266:	f001 fb01 	bl	800286c <lcdDrawFillRoundRect>
          lcdSetFont(LCD_FONT_07x10);
 800126a:	2000      	movs	r0, #0
 800126c:	f001 ff0e 	bl	800308c <lcdSetFont>
          lcdPrintf(5+40,5+110, white, "PUMP");
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <lcdMain+0x1f8>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	2173      	movs	r1, #115	; 0x73
 8001278:	202d      	movs	r0, #45	; 0x2d
 800127a:	f001 fd37 	bl	8002cec <lcdPrintf>
//      		gpioPinWrite(Relay4, false);
      	}

      }

      lcdRequestDraw();
 800127e:	f001 fb3d 	bl	80028fc <lcdRequestDraw>
 8001282:	e000      	b.n	8001286 <lcdMain+0x1ca>
    return;
 8001284:	bf00      	nop
  }

}
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	080126c0 	.word	0x080126c0
 8001290:	200002e4 	.word	0x200002e4
 8001294:	080126dc 	.word	0x080126dc
 8001298:	2000c7a8 	.word	0x2000c7a8
 800129c:	cccccccd 	.word	0xcccccccd
 80012a0:	080126f4 	.word	0x080126f4
 80012a4:	2000c95c 	.word	0x2000c95c
 80012a8:	08012708 	.word	0x08012708
 80012ac:	200002dc 	.word	0x200002dc
 80012b0:	08012718 	.word	0x08012718
 80012b4:	0801271c 	.word	0x0801271c

080012b8 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  HAL_Init();
 80012be:	f006 f833 	bl	8007328 <HAL_Init>
  SystemClock_Config();
 80012c2:	f000 f835 	bl	8001330 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <bspInit+0x50>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <bspInit+0x50>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <bspInit+0x50>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <bspInit+0x50>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <bspInit+0x50>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <bspInit+0x50>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <delay>:

void delay(uint32_t ms)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f006 f879 	bl	800740c <HAL_Delay>
#endif
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <millis>:

uint32_t millis(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001326:	f006 f865 	bl	80073f4 <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f00c fed8 	bl	800e0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <SystemClock_Config+0xc8>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <SystemClock_Config+0xc8>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <SystemClock_Config+0xc8>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <SystemClock_Config+0xcc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <SystemClock_Config+0xcc>)
 800137a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <SystemClock_Config+0xcc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013a0:	2319      	movs	r3, #25
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ac:	2304      	movs	r3, #4
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f007 fd61 	bl	8008e7c <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c0:	f000 f81e 	bl	8001400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	230f      	movs	r3, #15
 80013c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2103      	movs	r1, #3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 ffb9 	bl	8009358 <HAL_RCC_ClockConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013ec:	f000 f808 	bl	8001400 <Error_Handler>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3750      	adds	r7, #80	; 0x50
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_MspInit+0x4c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_MspInit+0x4c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x4c>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x4c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f005 ff90 	bl	80073cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <ADC_IRQHandler+0x10>)
 80014b6:	f006 f810 	bl	80074da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000c8b4 	.word	0x2000c8b4

080014c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM3_IRQHandler+0x10>)
 80014ca:	f00a fa1d 	bl	800b908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000c768 	.word	0x2000c768

080014d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <SPI1_IRQHandler+0x10>)
 80014de:	f009 feff 	bl	800b2e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000c7fc 	.word	0x2000c7fc

080014ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <USART1_IRQHandler+0x10>)
 80014f2:	f00b f8b7 	bl	800c664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000cd50 	.word	0x2000cd50

08001500 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <SDIO_IRQHandler+0x10>)
 8001506:	f008 fb71 	bl	8009bec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000c624 	.word	0x2000c624

08001514 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA2_Stream0_IRQHandler+0x10>)
 800151a:	f006 ff9f 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000c8fc 	.word	0x2000c8fc

08001528 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2_Stream2_IRQHandler+0x10>)
 800152e:	f006 ff95 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000cdf0 	.word	0x2000cdf0

0800153c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA2_Stream3_IRQHandler+0x10>)
 8001542:	f006 ff8b 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000c708 	.word	0x2000c708

08001550 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA2_Stream5_IRQHandler+0x10>)
 8001556:	f006 ff81 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000c854 	.word	0x2000c854

08001564 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA2_Stream6_IRQHandler+0x10>)
 800156a:	f006 ff77 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000c6a8 	.word	0x2000c6a8

08001578 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA2_Stream7_IRQHandler+0x10>)
 800157e:	f006 ff6d 	bl	800845c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000cd90 	.word	0x2000cd90

0800158c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_kill>:

int _kill(int pid, int sig)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015a6:	f00c fd73 	bl	800e090 <__errno>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2216      	movs	r2, #22
 80015ae:	601a      	str	r2, [r3, #0]
	return -1;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_exit>:

void _exit (int status)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ffe7 	bl	800159c <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ce:	e7fe      	b.n	80015ce <_exit+0x12>

080015d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	e00a      	b.n	80015f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015e2:	f3af 8000 	nop.w
 80015e6:	4601      	mov	r1, r0
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	60ba      	str	r2, [r7, #8]
 80015ee:	b2ca      	uxtb	r2, r1
 80015f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf0      	blt.n	80015e2 <_read+0x12>
	}

return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e009      	b.n	8001630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf1      	blt.n	800161c <_write+0x12>
	}
	return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f00c fcd8 	bl	800e090 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20020000 	.word	0x20020000
 800170c:	00000400 	.word	0x00000400
 8001710:	200002e0 	.word	0x200002e0
 8001714:	2000cec8 	.word	0x2000cec8

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SystemInit+0x28>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <SystemInit+0x28>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SystemInit+0x28>)
 800172e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001732:	609a      	str	r2, [r3, #8]
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001748:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800174a:	e003      	b.n	8001754 <LoopCopyDataInit>

0800174c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800174e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001750:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001752:	3104      	adds	r1, #4

08001754 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001758:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800175a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800175c:	d3f6      	bcc.n	800174c <CopyDataInit>
  ldr  r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001760:	e002      	b.n	8001768 <LoopFillZerobss>

08001762 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001762:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001764:	f842 3b04 	str.w	r3, [r2], #4

08001768 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800176a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800176c:	d3f9      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd3 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f00c fc93 	bl	800e09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f00c fc7f 	bl	800e078 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800177c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001780:	080204e4 	.word	0x080204e4
  ldr  r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001788:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 800178c:	200002c0 	.word	0x200002c0
  ldr  r3, = _ebss
 8001790:	2000cec8 	.word	0x2000cec8

08001794 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <DMA1_Stream0_IRQHandler>

08001796 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001796:	b480      	push	{r7}
 8001798:	b087      	sub	sp, #28
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	60da      	str	r2, [r3, #12]

  return ret;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80017d8:	2301      	movs	r3, #1
 80017da:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	e026      	b.n	8001830 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	441a      	add	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	440b      	add	r3, r1
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d00c      	beq.n	8001824 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	6892      	ldr	r2, [r2, #8]
 8001814:	fbb3 f1f2 	udiv	r1, r3, r2
 8001818:	fb01 f202 	mul.w	r2, r1, r2
 800181c:	1a9a      	subs	r2, r3, r2
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	e002      	b.n	800182a <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]
      break;
 8001828:	e006      	b.n	8001838 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3301      	adds	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8d4      	bhi.n	80017e2 <qbufferRead+0x16>
    }
  }

  return ret;
 8001838:	7dfb      	ldrb	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6892      	ldr	r2, [r2, #8]
 800185c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001860:	fb01 f202 	mul.w	r2, r1, r2
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

  return ret;
 8001868:	68fb      	ldr	r3, [r7, #12]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <DWT_Delay_Init+0x58>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <DWT_Delay_Init+0x58>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <DWT_Delay_Init+0x58>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <DWT_Delay_Init+0x58>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <DWT_Delay_Init+0x5c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <DWT_Delay_Init+0x5c>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <DWT_Delay_Init+0x5c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <DWT_Delay_Init+0x5c>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <DWT_Delay_Init+0x5c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80018b2:	bf00      	nop
     __ASM volatile ("NOP");
 80018b4:	bf00      	nop
     __ASM volatile ("NOP");
 80018b6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <DWT_Delay_Init+0x5c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80018c4:	2301      	movs	r3, #1
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000edf0 	.word	0xe000edf0
 80018d4:	e0001000 	.word	0xe0001000

080018d8 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
  bool ret = true;
 80018de:	2301      	movs	r3, #1
 80018e0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <buttonInit+0x98>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <buttonInit+0x98>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <buttonInit+0x98>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e023      	b.n	800195e <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001916:	4917      	ldr	r1, [pc, #92]	; (8001974 <buttonInit+0x9c>)
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 800192a:	4912      	ldr	r1, [pc, #72]	; (8001974 <buttonInit+0x9c>)
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3308      	adds	r3, #8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 800193e:	490d      	ldr	r1, [pc, #52]	; (8001974 <buttonInit+0x9c>)
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1d3a      	adds	r2, r7, #4
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f006 fff8 	bl	8008948 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3301      	adds	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	2b04      	cmp	r3, #4
 8001962:	ddd8      	ble.n	8001916 <buttonInit+0x3e>

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
#endif

  return ret;
 8001964:	7efb      	ldrb	r3, [r7, #27]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	20000004 	.word	0x20000004

08001978 <buttonMain>:
  }
  return ret;
}

uint8_t buttonMain(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]
	button_tbl_t *button;

	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	e06f      	b.n	8001a6c <buttonMain+0xf4>
	{
		temp = 0x1;
 800198c:	2301      	movs	r3, #1
 800198e:	71fb      	strb	r3, [r7, #7]
		button = &button_tbl[i];
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <buttonMain+0x104>)
 800199c:	4413      	add	r3, r2
 800199e:	603b      	str	r3, [r7, #0]
	  if (i >= BUTTON_MAX_CH)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	dd01      	ble.n	80019aa <buttonMain+0x32>
	  {
	   	return false;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e064      	b.n	8001a74 <buttonMain+0xfc>
	  }

	  switch(button->State)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	7b9b      	ldrb	r3, [r3, #14]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <buttonMain+0x40>
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d018      	beq.n	80019e8 <buttonMain+0x70>
 80019b6:	e056      	b.n	8001a66 <buttonMain+0xee>
	  {
	  	case BUTTON_IDLE:
	   		if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f007 fa27 	bl	8008e18 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d144      	bne.n	8001a60 <buttonMain+0xe8>
	    	{
	    		button->lastDebounceTime = millis();
 80019d6:	f7ff fca4 	bl	8001322 <millis>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	615a      	str	r2, [r3, #20]
	    		button->State = BUTTON_Pressed;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	739a      	strb	r2, [r3, #14]
	    	}
	    	break;
 80019e6:	e03b      	b.n	8001a60 <buttonMain+0xe8>

	    case BUTTON_Pressed:
	    	if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f007 fa0f 	bl	8008e18 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	7b1b      	ldrb	r3, [r3, #12]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d116      	bne.n	8001a34 <buttonMain+0xbc>
	    	{
	    		if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8001a06:	f7ff fc8c 	bl	8001322 <millis>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	1ad2      	subs	r2, r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d924      	bls.n	8001a64 <buttonMain+0xec>
	    		{
	    			button->PinState = GPIO_PIN_SET;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	735a      	strb	r2, [r3, #13]
	    			temp <<= i;
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	71fb      	strb	r3, [r7, #7]
	    			status |= temp;
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	73fb      	strb	r3, [r7, #15]
	    		button->PinState = GPIO_PIN_RESET;
	    		temp <<= i;
	    		temp ^= 0x11111111;
	    		status &= temp;
	    	}
	    	break;
 8001a32:	e017      	b.n	8001a64 <buttonMain+0xec>
	    		button->State = BUTTON_IDLE;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	739a      	strb	r2, [r3, #14]
	    		button->PinState = GPIO_PIN_RESET;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	735a      	strb	r2, [r3, #13]
	    		temp <<= i;
 8001a40:	79fa      	ldrb	r2, [r7, #7]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	71fb      	strb	r3, [r7, #7]
	    		temp ^= 0x11111111;
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	f083 0311 	eor.w	r3, r3, #17
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	71fb      	strb	r3, [r7, #7]
	    		status &= temp;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	73fb      	strb	r3, [r7, #15]
	    	break;
 8001a5e:	e001      	b.n	8001a64 <buttonMain+0xec>
	    	break;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <buttonMain+0xee>
	    	break;
 8001a64:	bf00      	nop
	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	dd8c      	ble.n	800198c <buttonMain+0x14>
	    }
	}
	  return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000004 	.word	0x20000004

08001a80 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8001a86:	2305      	movs	r3, #5
 8001a88:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4937      	ldr	r1, [pc, #220]	; (8001b6c <Ds18b20_Init+0xec>)
 8001a8e:	4838      	ldr	r0, [pc, #224]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001a90:	f001 fdc3 	bl	800361a <OneWire_Init>
		TempSensorCount = 0;
 8001a94:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8001a9a:	e002      	b.n	8001aa2 <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8001a9c:	2064      	movs	r0, #100	; 0x64
 8001a9e:	f005 fcb5 	bl	800740c <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8001aa2:	f005 fca7 	bl	80073f4 <HAL_GetTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d9f5      	bls.n	8001a9c <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8001ab0:	482f      	ldr	r0, [pc, #188]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001ab2:	f001 fea0 	bl	80037f6 <OneWire_First>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <Ds18b20_Init+0xf8>)
 8001abc:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8001abe:	e019      	b.n	8001af4 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8001ac0:	2064      	movs	r0, #100	; 0x64
 8001ac2:	f005 fca3 	bl	800740c <HAL_Delay>
			TempSensorCount++;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001ad0:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <Ds18b20_Init+0xfc>)
 8001adc:	4413      	add	r3, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4823      	ldr	r0, [pc, #140]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001ae2:	f001 ff9d 	bl	8003a20 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8001ae6:	4822      	ldr	r0, [pc, #136]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001ae8:	f001 fe95 	bl	8003816 <OneWire_Next>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <Ds18b20_Init+0xf8>)
 8001af2:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <Ds18b20_Init+0xf8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e1      	bne.n	8001ac0 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1bc      	bne.n	8001a8a <Ds18b20_Init+0xa>
 8001b10:	e000      	b.n	8001b14 <Ds18b20_Init+0x94>
			break;
 8001b12:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <Ds18b20_Init+0x9e>
		return false;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e022      	b.n	8001b64 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	e019      	b.n	8001b58 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 8001b24:	2032      	movs	r0, #50	; 0x32
 8001b26:	f005 fc71 	bl	800740c <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <Ds18b20_Init+0xfc>)
 8001b30:	4413      	add	r3, r2
 8001b32:	220c      	movs	r2, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001b38:	f000 f9c4 	bl	8001ec4 <DS18B20_SetResolution>
		HAL_Delay(50);
 8001b3c:	2032      	movs	r0, #50	; 0x32
 8001b3e:	f005 fc65 	bl	800740c <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <Ds18b20_Init+0xfc>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <Ds18b20_Init+0xf0>)
 8001b4e:	f000 fa52 	bl	8001ff6 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	3301      	adds	r3, #1
 8001b56:	71bb      	strb	r3, [r7, #6]
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <Ds18b20_Init+0xf4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	79ba      	ldrb	r2, [r7, #6]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3e0      	bcc.n	8001b24 <Ds18b20_Init+0xa4>

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
	#endif

	return true;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	200002f4 	.word	0x200002f4
 8001b74:	20000309 	.word	0x20000309
 8001b78:	20000308 	.word	0x20000308
 8001b7c:	200002e4 	.word	0x200002e4

08001b80 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <Ds18b20_ManualConvert+0x14>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d013      	beq.n	8001bba <Ds18b20_ManualConvert+0x3a>
 8001b92:	e072      	b.n	8001c7a <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <Ds18b20_ManualConvert+0x108>)
 8001b96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b9a:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8001b9c:	483b      	ldr	r0, [pc, #236]	; (8001c8c <Ds18b20_ManualConvert+0x10c>)
 8001b9e:	f000 f87d 	bl	8001c9c <DS18B20_StartAll>
	  		  pre_time = millis();
 8001ba2:	f7ff fbbe 	bl	8001322 <millis>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <Ds18b20_ManualConvert+0x110>)
 8001baa:	6013      	str	r3, [r2, #0]
	  		  state++;
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001bb6:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001bb8:	e05f      	b.n	8001c7a <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8001bba:	f7ff fbb2 	bl	8001322 <millis>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <Ds18b20_ManualConvert+0x110>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b09      	cmp	r3, #9
 8001bc8:	d956      	bls.n	8001c78 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8001bca:	4830      	ldr	r0, [pc, #192]	; (8001c8c <Ds18b20_ManualConvert+0x10c>)
 8001bcc:	f000 fa6e 	bl	80020ac <DS18B20_AllDone>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d112      	bne.n	8001bfc <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8001bd6:	f7ff fba4 	bl	8001322 <millis>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a2c      	ldr	r2, [pc, #176]	; (8001c90 <Ds18b20_ManualConvert+0x110>)
 8001bde:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <Ds18b20_ManualConvert+0x108>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <Ds18b20_ManualConvert+0x108>)
 8001bea:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <Ds18b20_ManualConvert+0x108>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d141      	bne.n	8001c78 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
						break;
 8001bfa:	e03e      	b.n	8001c7a <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <Ds18b20_ManualConvert+0x108>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d024      	beq.n	8001c4e <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	e01b      	b.n	8001c42 <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <Ds18b20_ManualConvert+0x114>)
 8001c10:	1899      	adds	r1, r3, r2
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	3308      	adds	r3, #8
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <Ds18b20_ManualConvert+0x114>)
 8001c1a:	4413      	add	r3, r2
 8001c1c:	79fc      	ldrb	r4, [r7, #7]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	481a      	ldr	r0, [pc, #104]	; (8001c8c <Ds18b20_ManualConvert+0x10c>)
 8001c22:	f000 f84f 	bl	8001cc4 <DS18B20_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <Ds18b20_ManualConvert+0x114>)
 8001c2c:	0123      	lsls	r3, r4, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	330c      	adds	r3, #12
 8001c32:	460a      	mov	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <Ds18b20_ManualConvert+0x118>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3de      	bcc.n	8001c0a <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8001c4c:	e014      	b.n	8001c78 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	71bb      	strb	r3, [r7, #6]
 8001c52:	e00c      	b.n	8001c6e <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <Ds18b20_ManualConvert+0x114>)
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <Ds18b20_ManualConvert+0x104>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <Ds18b20_ManualConvert+0x118>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	79ba      	ldrb	r2, [r7, #6]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3ed      	bcc.n	8001c54 <Ds18b20_ManualConvert+0xd4>
			  break;
 8001c78:	bf00      	nop
	  }
	#endif
	  return true;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}
 8001c84:	2000030c 	.word	0x2000030c
 8001c88:	2000030a 	.word	0x2000030a
 8001c8c:	200002f4 	.word	0x200002f4
 8001c90:	20000310 	.word	0x20000310
 8001c94:	200002e4 	.word	0x200002e4
 8001c98:	20000309 	.word	0x20000309

08001c9c <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fce1 	bl	800366c <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8001caa:	21cc      	movs	r1, #204	; 0xcc
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f001 fd63 	bl	8003778 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001cb2:	2144      	movs	r1, #68	; 0x44
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f001 fd5f 	bl	8003778 <OneWire_WriteByte>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8001cda:	68b8      	ldr	r0, [r7, #8]
 8001cdc:	f000 f97a 	bl	8001fd4 <DS18B20_Is>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <DS18B20_Read+0x26>
		return false;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e0e1      	b.n	8001eae <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f001 fd1a 	bl	8003724 <OneWire_ReadBit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e0d9      	b.n	8001eae <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f001 fcb6 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f001 fe6d 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001d08:	21be      	movs	r1, #190	; 0xbe
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f001 fd34 	bl	8003778 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	77fb      	strb	r3, [r7, #31]
 8001d14:	e00d      	b.n	8001d32 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001d16:	7ffc      	ldrb	r4, [r7, #31]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f001 fd4b 	bl	80037b4 <OneWire_ReadByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001d26:	443b      	add	r3, r7
 8001d28:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	77fb      	strb	r3, [r7, #31]
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d9ee      	bls.n	8001d16 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fe8b 	bl	8003a5a <OneWire_CRC8>
 8001d44:	4603      	mov	r3, r0
 8001d46:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8001d48:	7f3b      	ldrb	r3, [r7, #28]
 8001d4a:	7fba      	ldrb	r2, [r7, #30]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e0ac      	b.n	8001eae <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001d54:	7d3b      	ldrb	r3, [r7, #20]
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	7d7b      	ldrb	r3, [r7, #21]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f001 fc81 	bl	800366c <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8001d6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da05      	bge.n	8001d7e <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001d72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d74:	425b      	negs	r3, r3
 8001d76:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001d7e:	7e3b      	ldrb	r3, [r7, #24]
 8001d80:	115b      	asrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	3309      	adds	r3, #9
 8001d8c:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001d8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8001d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001da6:	b25a      	sxtb	r2, r3
 8001da8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8001db2:	7f7b      	ldrb	r3, [r7, #29]
 8001db4:	3b09      	subs	r3, #9
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d858      	bhi.n	8001e6c <DS18B20_Read+0x1a8>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DS18B20_Read+0xfc>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001df9 	.word	0x08001df9
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e49 	.word	0x08001e49
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8001dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001de6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df2:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8001df6:	e03e      	b.n	8001e76 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001e0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e12:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e1a:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8001e1e:	e02a      	b.n	8001e76 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8001e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8001e36:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e3a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8001e46:	e016      	b.n	8001e76 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8001e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8001e5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e5e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001eb8 <DS18B20_Read+0x1f4>
 8001e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e66:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8001e6a:	e004      	b.n	8001e76 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <DS18B20_Read+0x1f8>)
 8001e6e:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8001e76:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8001e8e:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8001e96:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ec0 <DS18B20_Read+0x1fc>
 8001e9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea2:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	372c      	adds	r7, #44	; 0x2c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	3d800000 	.word	0x3d800000
 8001ebc:	437f0000 	.word	0x437f0000
 8001ec0:	00000000 	.word	0x00000000

08001ec4 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8001ed2:	68b8      	ldr	r0, [r7, #8]
 8001ed4:	f000 f87e 	bl	8001fd4 <DS18B20_Is>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <DS18B20_SetResolution+0x1e>
		return 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e074      	b.n	8001fcc <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f001 fbc2 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f001 fd79 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001ef0:	21be      	movs	r1, #190	; 0xbe
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f001 fc40 	bl	8003778 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f001 fc5b 	bl	80037b4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f001 fc58 	bl	80037b4 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f001 fc55 	bl	80037b4 <OneWire_ReadByte>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f001 fc50 	bl	80037b4 <OneWire_ReadByte>
 8001f14:	4603      	mov	r3, r0
 8001f16:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f001 fc4b 	bl	80037b4 <OneWire_ReadByte>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d108      	bne.n	8001f3a <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	f023 0320 	bic.w	r3, r3, #32
 8001f36:	75fb      	strb	r3, [r7, #23]
 8001f38:	e022      	b.n	8001f80 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b0a      	cmp	r3, #10
 8001f3e:	d108      	bne.n	8001f52 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f46:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	f043 0320 	orr.w	r3, r3, #32
 8001f4e:	75fb      	strb	r3, [r7, #23]
 8001f50:	e016      	b.n	8001f80 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b0b      	cmp	r3, #11
 8001f56:	d108      	bne.n	8001f6a <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	f023 0320 	bic.w	r3, r3, #32
 8001f66:	75fb      	strb	r3, [r7, #23]
 8001f68:	e00a      	b.n	8001f80 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d107      	bne.n	8001f80 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f76:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f001 fb73 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f001 fd2a 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001f8e:	214e      	movs	r1, #78	; 0x4e
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f001 fbf1 	bl	8003778 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001f96:	7dbb      	ldrb	r3, [r7, #22]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f001 fbec 	bl	8003778 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001fa0:	7d7b      	ldrb	r3, [r7, #21]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f001 fbe7 	bl	8003778 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	4619      	mov	r1, r3
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f001 fbe2 	bl	8003778 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f001 fb59 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f001 fd10 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001fc2:	2148      	movs	r1, #72	; 0x48
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f001 fbd7 	bl	8003778 <OneWire_WriteByte>

	return 1;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b28      	cmp	r3, #40	; 0x28
 8001fe2:	d101      	bne.n	8001fe8 <DS18B20_Is+0x14>
		return 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <DS18B20_Is+0x16>

	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002000:	6838      	ldr	r0, [r7, #0]
 8002002:	f7ff ffe7 	bl	8001fd4 <DS18B20_Is>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800200c:	2300      	movs	r3, #0
 800200e:	e049      	b.n	80020a4 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 fb2b 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f001 fce2 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800201e:	21be      	movs	r1, #190	; 0xbe
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 fba9 	bl	8003778 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f001 fbc4 	bl	80037b4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 fbc1 	bl	80037b4 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 fbbe 	bl	80037b4 <OneWire_ReadByte>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 fbb9 	bl	80037b4 <OneWire_ReadByte>
 8002042:	4603      	mov	r3, r0
 8002044:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f001 fbb4 	bl	80037b4 <OneWire_ReadByte>
 800204c:	4603      	mov	r3, r0
 800204e:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002050:	237d      	movs	r3, #125	; 0x7d
 8002052:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002054:	23c9      	movs	r3, #201	; 0xc9
 8002056:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f001 fb07 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 fcbe 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002066:	214e      	movs	r1, #78	; 0x4e
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f001 fb85 	bl	8003778 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f001 fb80 	bl	8003778 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f001 fb7b 	bl	8003778 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 fb76 	bl	8003778 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f001 faed 	bl	800366c <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f001 fca4 	bl	80039e2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800209a:	2148      	movs	r1, #72	; 0x48
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f001 fb6b 	bl	8003778 <OneWire_WriteByte>

	return 1;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f001 fb35 	bl	8003724 <OneWire_ReadBit>
 80020ba:	4603      	mov	r3, r0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  bool ret = true;
 80020ca:	2301      	movs	r3, #1
 80020cc:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80020ce:	490b      	ldr	r1, [pc, #44]	; (80020fc <fatfsInit+0x38>)
 80020d0:	480b      	ldr	r0, [pc, #44]	; (8002100 <fatfsInit+0x3c>)
 80020d2:	f005 f919 	bl	8007308 <FATFS_LinkDriver>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10a      	bne.n	80020f2 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80020dc:	2200      	movs	r2, #0
 80020de:	4907      	ldr	r1, [pc, #28]	; (80020fc <fatfsInit+0x38>)
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <fatfsInit+0x40>)
 80020e2:	f005 f87f 	bl	80071e4 <f_mount>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <fatfsInit+0x2e>
    {
      is_init = true;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <fatfsInit+0x44>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
#endif

  return ret;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000054c 	.word	0x2000054c
 8002100:	080127e8 	.word	0x080127e8
 8002104:	20000318 	.word	0x20000318
 8002108:	20000314 	.word	0x20000314

0800210c <gpioInit>:
#endif



bool gpioInit(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
  bool ret = true;
 8002112:	2301      	movs	r3, #1
 8002114:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <gpioInit+0x98>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <gpioInit+0x98>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <gpioInit+0x98>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <gpioInit+0x98>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <gpioInit+0x98>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <gpioInit+0x98>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e01e      	b.n	8002192 <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	b2d8      	uxtb	r0, r3
 8002158:	4913      	ldr	r1, [pc, #76]	; (80021a8 <gpioInit+0x9c>)
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3308      	adds	r3, #8
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	f000 f81e 	bl	80021ac <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <gpioInit+0x9c>)
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	330b      	adds	r3, #11
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	f000 f882 	bl	8002290 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	dddd      	ble.n	8002154 <gpioInit+0x48>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
#endif

  return ret;
 8002198:	7afb      	ldrb	r3, [r7, #11]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	0801274c 	.word	0x0801274c

080021ac <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80021bc:	2301      	movs	r3, #1
 80021be:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d901      	bls.n	80021da <gpioPinMode+0x2e>
  {
    return false;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e054      	b.n	8002284 <gpioPinMode+0xd8>
  }

  switch(mode)
 80021da:	79bb      	ldrb	r3, [r7, #6]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d838      	bhi.n	8002252 <gpioPinMode+0xa6>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <gpioPinMode+0x3c>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	08002205 	.word	0x08002205
 80021ec:	0800220f 	.word	0x0800220f
 80021f0:	08002219 	.word	0x08002219
 80021f4:	08002223 	.word	0x08002223
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	08002237 	.word	0x08002237
 8002200:	08002241 	.word	0x08002241
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e021      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002212:	2301      	movs	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
      break;
 8002216:	e01c      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800221c:	2302      	movs	r3, #2
 800221e:	613b      	str	r3, [r7, #16]
      break;
 8002220:	e017      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
      break;
 800222a:	e012      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	e00d      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800223a:	2302      	movs	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e008      	b.n	8002252 <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
      break;
 8002250:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002252:	79fa      	ldrb	r2, [r7, #7]
 8002254:	490d      	ldr	r1, [pc, #52]	; (800228c <gpioPinMode+0xe0>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002266:	79fa      	ldrb	r2, [r7, #7]
 8002268:	4908      	ldr	r1, [pc, #32]	; (800228c <gpioPinMode+0xe0>)
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f107 0208 	add.w	r2, r7, #8
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f006 fb63 	bl	8008948 <HAL_GPIO_Init>

  return ret;
 8002282:	7ffb      	ldrb	r3, [r7, #31]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0801274c 	.word	0x0801274c

08002290 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	460a      	mov	r2, r1
 800229a:	71fb      	strb	r3, [r7, #7]
 800229c:	4613      	mov	r3, r2
 800229e:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d840      	bhi.n	8002328 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01e      	beq.n	80022ea <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	4920      	ldr	r1, [pc, #128]	; (8002330 <gpioPinWrite+0xa0>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	491c      	ldr	r1, [pc, #112]	; (8002330 <gpioPinWrite+0xa0>)
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3304      	adds	r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b299      	uxth	r1, r3
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	4c17      	ldr	r4, [pc, #92]	; (8002330 <gpioPinWrite+0xa0>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4423      	add	r3, r4
 80022de:	3309      	adds	r3, #9
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f006 fdb0 	bl	8008e48 <HAL_GPIO_WritePin>
 80022e8:	e01f      	b.n	800232a <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	4910      	ldr	r1, [pc, #64]	; (8002330 <gpioPinWrite+0xa0>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	79fa      	ldrb	r2, [r7, #7]
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <gpioPinWrite+0xa0>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b299      	uxth	r1, r3
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	4c07      	ldr	r4, [pc, #28]	; (8002330 <gpioPinWrite+0xa0>)
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4423      	add	r3, r4
 800231c:	330a      	adds	r3, #10
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	f006 fd91 	bl	8008e48 <HAL_GPIO_WritePin>
 8002326:	e000      	b.n	800232a <gpioPinWrite+0x9a>
    return;
 8002328:	bf00      	nop
  }
}
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	0801274c 	.word	0x0801274c

08002334 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d901      	bls.n	800234c <gpioPinRead+0x18>
  {
    return false;
 8002348:	2300      	movs	r3, #0
 800234a:	e024      	b.n	8002396 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	4914      	ldr	r1, [pc, #80]	; (80023a0 <gpioPinRead+0x6c>)
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	4910      	ldr	r1, [pc, #64]	; (80023a0 <gpioPinRead+0x6c>)
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	f006 fd51 	bl	8008e18 <HAL_GPIO_ReadPin>
 8002376:	4603      	mov	r3, r0
 8002378:	4618      	mov	r0, r3
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	4908      	ldr	r1, [pc, #32]	; (80023a0 <gpioPinRead+0x6c>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3309      	adds	r3, #9
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4298      	cmp	r0, r3
 800238e:	d101      	bne.n	8002394 <gpioPinRead+0x60>
  {
    ret = true;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0801274c 	.word	0x0801274c

080023a4 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 80023a8:	f7fe ffbb 	bl	8001322 <millis>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <TransferDoneISR+0x40>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <TransferDoneISR+0x44>)
 80023b6:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 80023b8:	f7fe ffb3 	bl	8001322 <millis>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <TransferDoneISR+0x40>)
 80023c0:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <TransferDoneISR+0x44>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <TransferDoneISR+0x44>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <TransferDoneISR+0x48>)
 80023d8:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <TransferDoneISR+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000570 	.word	0x20000570
 80023e8:	20000574 	.word	0x20000574
 80023ec:	20000578 	.word	0x20000578
 80023f0:	2000056e 	.word	0x2000056e

080023f4 <lcdInit>:


bool lcdInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
  backlight_value = 100;
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <lcdInit+0x9c>)
 80023fc:	2264      	movs	r2, #100	; 0x64
 80023fe:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8002400:	f003 ffbc 	bl	800637c <st7735Init>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <lcdInit+0xa0>)
 800240a:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 800240c:	4822      	ldr	r0, [pc, #136]	; (8002498 <lcdInit+0xa4>)
 800240e:	f003 ffc1 	bl	8006394 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <lcdInit+0xa4>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4821      	ldr	r0, [pc, #132]	; (800249c <lcdInit+0xa8>)
 8002418:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	e007      	b.n	8002430 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <lcdInit+0xac>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2100      	movs	r1, #0
 8002426:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3301      	adds	r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002436:	dbf3      	blt.n	8002420 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8002438:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800243c:	2100      	movs	r1, #0
 800243e:	4818      	ldr	r0, [pc, #96]	; (80024a0 <lcdInit+0xac>)
 8002440:	f00b fe58 	bl	800e0f4 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <lcdInit+0xb0>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	035b      	lsls	r3, r3, #13
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <lcdInit+0xac>)
 8002454:	4413      	add	r3, r2
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <lcdInit+0xb4>)
 8002458:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	22a0      	movs	r2, #160	; 0xa0
 8002462:	2100      	movs	r1, #0
 8002464:	2000      	movs	r0, #0
 8002466:	f000 fbbb 	bl	8002be0 <lcdDrawFillRect>
  lcdUpdateDraw();
 800246a:	f000 fa7f 	bl	800296c <lcdUpdateDraw>

  lcdSetBackLight(100);
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f000 f828 	bl	80024c4 <lcdSetBackLight>


  if (is_init != true)
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <lcdInit+0xa0>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <lcdInit+0x92>
  {
    return false;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <lcdInit+0x94>

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
#endif

  return true;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	2000007c 	.word	0x2000007c
 8002494:	2000056c 	.word	0x2000056c
 8002498:	20000550 	.word	0x20000550
 800249c:	080023a5 	.word	0x080023a5
 80024a0:	20000580 	.word	0x20000580
 80024a4:	2000056d 	.word	0x2000056d
 80024a8:	2000057c 	.word	0x2000057c

080024ac <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return is_init;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <lcdIsInit+0x14>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000056c 	.word	0x2000056c

080024c4 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b64      	cmp	r3, #100	; 0x64
 80024d2:	bf28      	it	cs
 80024d4:	2364      	movcs	r3, #100	; 0x64
 80024d6:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <lcdSetBackLight+0x48>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d002      	beq.n	80024e8 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <lcdSetBackLight+0x48>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <lcdSetBackLight+0x48>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 80024f0:	2101      	movs	r1, #1
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff fecc 	bl	8002290 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 80024f8:	e003      	b.n	8002502 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 80024fa:	2100      	movs	r1, #0
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fec7 	bl	8002290 <gpioPinWrite>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000007c 	.word	0x2000007c

08002510 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <lcdDrawPixel+0x14>)
 8002512:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800251c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000057c 	.word	0x2000057c

08002528 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8002528:	b510      	push	{r4, lr}
 800252a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 800252c:	f000 fa4a 	bl	80029c4 <lcdGetFrameBuffer>
 8002530:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8002534:	b2a2      	uxth	r2, r4
 8002536:	1e83      	subs	r3, r0, #2
 8002538:	31fe      	adds	r1, #254	; 0xfe
 800253a:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800253e:	428b      	cmp	r3, r1
 8002540:	d1fb      	bne.n	800253a <lcdClearBuffer+0x12>
  }
}
 8002542:	bd10      	pop	{r4, pc}

08002544 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8002544:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002548:	4616      	mov	r6, r2
 800254a:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 800254c:	2e00      	cmp	r6, #0
{
 800254e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 8002550:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 8002554:	f340 808d 	ble.w	8002672 <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8002558:	fa1f f981 	uxth.w	r9, r1
 800255c:	f003 0104 	and.w	r1, r3, #4
 8002560:	9103      	str	r1, [sp, #12]
 8002562:	f003 0102 	and.w	r1, r3, #2
 8002566:	9101      	str	r1, [sp, #4]
 8002568:	f003 0108 	and.w	r1, r3, #8
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	f1c6 0401 	rsb	r4, r6, #1
 8002574:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8002578:	fa1f f880 	uxth.w	r8, r0
 800257c:	9102      	str	r1, [sp, #8]
 800257e:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8002580:	2500      	movs	r5, #0
 8002582:	e00a      	b.n	800259a <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8002584:	9b01      	ldr	r3, [sp, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d12c      	bne.n	80025e4 <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 800258a:	9b02      	ldr	r3, [sp, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d141      	bne.n	8002614 <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8002590:	9b04      	ldr	r3, [sp, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d156      	bne.n	8002644 <lcdDrawCircleHelper+0x100>
  while (x < r)
 8002596:	42ae      	cmp	r6, r5
 8002598:	dd6b      	ble.n	8002672 <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 800259a:	2c00      	cmp	r4, #0
 800259c:	db03      	blt.n	80025a6 <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 800259e:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 80025a2:	3e01      	subs	r6, #1
      f     += ddF_y;
 80025a4:	445c      	add	r4, fp
    x++;
 80025a6:	3501      	adds	r5, #1
    if (cornername & 0x4)
 80025a8:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 80025aa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80025ae:	3401      	adds	r4, #1
    if (cornername & 0x4)
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0e7      	beq.n	8002584 <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 80025b4:	b2b3      	uxth	r3, r6
 80025b6:	fa1f fa85 	uxth.w	sl, r5
 80025ba:	eb09 0103 	add.w	r1, r9, r3
 80025be:	eb08 000a 	add.w	r0, r8, sl
 80025c2:	b289      	uxth	r1, r1
 80025c4:	b280      	uxth	r0, r0
 80025c6:	9305      	str	r3, [sp, #20]
 80025c8:	f7ff ffa2 	bl	8002510 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 80025cc:	9b05      	ldr	r3, [sp, #20]
 80025ce:	eb09 010a 	add.w	r1, r9, sl
 80025d2:	eb08 0003 	add.w	r0, r8, r3
 80025d6:	b289      	uxth	r1, r1
 80025d8:	b280      	uxth	r0, r0
 80025da:	f7ff ff99 	bl	8002510 <lcdDrawPixel>
    if (cornername & 0x2)
 80025de:	9b01      	ldr	r3, [sp, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0d2      	beq.n	800258a <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 80025e4:	b2b3      	uxth	r3, r6
 80025e6:	fa1f fa85 	uxth.w	sl, r5
 80025ea:	eba9 0103 	sub.w	r1, r9, r3
 80025ee:	eb08 000a 	add.w	r0, r8, sl
 80025f2:	b289      	uxth	r1, r1
 80025f4:	b280      	uxth	r0, r0
 80025f6:	9305      	str	r3, [sp, #20]
 80025f8:	f7ff ff8a 	bl	8002510 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 80025fc:	9b05      	ldr	r3, [sp, #20]
 80025fe:	eba9 010a 	sub.w	r1, r9, sl
 8002602:	eb08 0003 	add.w	r0, r8, r3
 8002606:	b289      	uxth	r1, r1
 8002608:	b280      	uxth	r0, r0
 800260a:	f7ff ff81 	bl	8002510 <lcdDrawPixel>
    if (cornername & 0x8)
 800260e:	9b02      	ldr	r3, [sp, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0bd      	beq.n	8002590 <lcdDrawCircleHelper+0x4c>
 8002614:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8002616:	fa1f fa86 	uxth.w	sl, r6
 800261a:	eb09 0103 	add.w	r1, r9, r3
 800261e:	eba8 000a 	sub.w	r0, r8, sl
 8002622:	b289      	uxth	r1, r1
 8002624:	b280      	uxth	r0, r0
 8002626:	9305      	str	r3, [sp, #20]
 8002628:	f7ff ff72 	bl	8002510 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 800262c:	9b05      	ldr	r3, [sp, #20]
 800262e:	eb0a 0109 	add.w	r1, sl, r9
 8002632:	eba8 0003 	sub.w	r0, r8, r3
 8002636:	b289      	uxth	r1, r1
 8002638:	b280      	uxth	r0, r0
 800263a:	f7ff ff69 	bl	8002510 <lcdDrawPixel>
    if (cornername & 0x1)
 800263e:	9b04      	ldr	r3, [sp, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0a8      	beq.n	8002596 <lcdDrawCircleHelper+0x52>
 8002644:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8002646:	fa1f fa86 	uxth.w	sl, r6
 800264a:	eba9 0103 	sub.w	r1, r9, r3
 800264e:	eba8 000a 	sub.w	r0, r8, sl
 8002652:	b289      	uxth	r1, r1
 8002654:	b280      	uxth	r0, r0
 8002656:	9305      	str	r3, [sp, #20]
 8002658:	f7ff ff5a 	bl	8002510 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 800265c:	9b05      	ldr	r3, [sp, #20]
 800265e:	eba9 010a 	sub.w	r1, r9, sl
 8002662:	eba8 0003 	sub.w	r0, r8, r3
 8002666:	b289      	uxth	r1, r1
 8002668:	b280      	uxth	r0, r0
 800266a:	f7ff ff51 	bl	8002510 <lcdDrawPixel>
  while (x < r)
 800266e:	42ae      	cmp	r6, r5
 8002670:	dc93      	bgt.n	800259a <lcdDrawCircleHelper+0x56>
    }
  }
}
 8002672:	b006      	add	sp, #24
 8002674:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002678 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8002678:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800267c:	b08a      	sub	sp, #40	; 0x28
 800267e:	4694      	mov	ip, r2
 8002680:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8002682:	f8cd c00c 	str.w	ip, [sp, #12]
 8002686:	fa1f f886 	uxth.w	r8, r6
 800268a:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 800268e:	460c      	mov	r4, r1
 8002690:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8002692:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8002696:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800269a:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800269c:	b280      	uxth	r0, r0
 800269e:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80026a2:	9005      	str	r0, [sp, #20]
 80026a4:	1a52      	subs	r2, r2, r1
 80026a6:	4440      	add	r0, r8
{
 80026a8:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80026aa:	b200      	sxth	r0, r0
 80026ac:	fa1f f38a 	uxth.w	r3, sl
 80026b0:	b212      	sxth	r2, r2
 80026b2:	b221      	sxth	r1, r4
 80026b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80026b8:	9004      	str	r0, [sp, #16]
 80026ba:	f000 fa6b 	bl	8002b94 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 80026be:	9804      	ldr	r0, [sp, #16]
 80026c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80026c4:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 80026c8:	9a08      	ldr	r2, [sp, #32]
 80026ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026cc:	9308      	str	r3, [sp, #32]
 80026ce:	fa1f fb84 	uxth.w	fp, r4
 80026d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80026d6:	4459      	add	r1, fp
 80026d8:	b209      	sxth	r1, r1
 80026da:	f000 fa5b 	bl	8002b94 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 80026de:	9b07      	ldr	r3, [sp, #28]
 80026e0:	eb08 010b 	add.w	r1, r8, fp
 80026e4:	eba9 0203 	sub.w	r2, r9, r3
 80026e8:	9b08      	ldr	r3, [sp, #32]
 80026ea:	b209      	sxth	r1, r1
 80026ec:	b212      	sxth	r2, r2
 80026ee:	b228      	sxth	r0, r5
 80026f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80026f4:	9107      	str	r1, [sp, #28]
 80026f6:	f000 fa27 	bl	8002b48 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80026fa:	9a06      	ldr	r2, [sp, #24]
 80026fc:	9b05      	ldr	r3, [sp, #20]
 80026fe:	9907      	ldr	r1, [sp, #28]
 8002700:	1e50      	subs	r0, r2, #1
 8002702:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8002704:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8002708:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800270c:	b200      	sxth	r0, r0
 800270e:	f000 fa1b 	bl	8002b48 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8002712:	1931      	adds	r1, r6, r4
 8002714:	4632      	mov	r2, r6
 8002716:	4640      	mov	r0, r8
 8002718:	f8cd a000 	str.w	sl, [sp]
 800271c:	2301      	movs	r3, #1
 800271e:	9105      	str	r1, [sp, #20]
 8002720:	f7ff ff10 	bl	8002544 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8002724:	9803      	ldr	r0, [sp, #12]
 8002726:	9905      	ldr	r1, [sp, #20]
 8002728:	f8cd a000 	str.w	sl, [sp]
 800272c:	4428      	add	r0, r5
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	3801      	subs	r0, #1
 8002732:	4632      	mov	r2, r6
 8002734:	2302      	movs	r3, #2
 8002736:	9003      	str	r0, [sp, #12]
 8002738:	f7ff ff04 	bl	8002544 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800273c:	9904      	ldr	r1, [sp, #16]
 800273e:	9803      	ldr	r0, [sp, #12]
 8002740:	f8cd a000 	str.w	sl, [sp]
 8002744:	4421      	add	r1, r4
 8002746:	1b89      	subs	r1, r1, r6
 8002748:	3901      	subs	r1, #1
 800274a:	4632      	mov	r2, r6
 800274c:	2304      	movs	r3, #4
 800274e:	9103      	str	r1, [sp, #12]
 8002750:	f7ff fef8 	bl	8002544 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8002754:	9903      	ldr	r1, [sp, #12]
 8002756:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800275a:	2308      	movs	r3, #8
 800275c:	4632      	mov	r2, r6
 800275e:	4640      	mov	r0, r8
}
 8002760:	b00a      	add	sp, #40	; 0x28
 8002762:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8002766:	f7ff beed 	b.w	8002544 <lcdDrawCircleHelper>
 800276a:	bf00      	nop

0800276c <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 800276c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002770:	4690      	mov	r8, r2
 8002772:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8002774:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8002778:	f1b8 0f00 	cmp.w	r8, #0
{
 800277c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 800277e:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8002782:	dd6f      	ble.n	8002864 <lcdDrawFillCircleHelper+0xf8>
 8002784:	3201      	adds	r2, #1
 8002786:	b292      	uxth	r2, r2
 8002788:	1c95      	adds	r5, r2, #2
 800278a:	9204      	str	r2, [sp, #16]
 800278c:	f003 0201 	and.w	r2, r3, #1
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8002796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002798:	9203      	str	r2, [sp, #12]
 800279a:	b280      	uxth	r0, r0
 800279c:	b289      	uxth	r1, r1
 800279e:	f1c8 0401 	rsb	r4, r8, #1
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	9101      	str	r1, [sp, #4]
 80027a6:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 80027a8:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	e006      	b.n	80027bc <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 80027ae:	9a02      	ldr	r2, [sp, #8]
 80027b0:	2a00      	cmp	r2, #0
 80027b2:	d133      	bne.n	800281c <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 80027b4:	3502      	adds	r5, #2
 80027b6:	45b0      	cmp	r8, r6
 80027b8:	b2ad      	uxth	r5, r5
 80027ba:	dd53      	ble.n	8002864 <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 80027bc:	2c00      	cmp	r4, #0
    y++;
 80027be:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 80027c2:	db04      	blt.n	80027ce <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 80027c4:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 80027c8:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 80027cc:	4454      	add	r4, sl
    if (cornername & 0x1)
 80027ce:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 80027d0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80027d4:	3401      	adds	r4, #1
    if (cornername & 0x1)
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d0e9      	beq.n	80027ae <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80027da:	9a04      	ldr	r2, [sp, #16]
 80027dc:	9901      	ldr	r1, [sp, #4]
 80027de:	9800      	ldr	r0, [sp, #0]
 80027e0:	9305      	str	r3, [sp, #20]
 80027e2:	fa1f f988 	uxth.w	r9, r8
 80027e6:	fa1f fb86 	uxth.w	fp, r6
 80027ea:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 80027ee:	4459      	add	r1, fp
 80027f0:	eba0 0009 	sub.w	r0, r0, r9
 80027f4:	b212      	sxth	r2, r2
 80027f6:	b209      	sxth	r1, r1
 80027f8:	b200      	sxth	r0, r0
 80027fa:	f000 f9cb 	bl	8002b94 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 80027fe:	9901      	ldr	r1, [sp, #4]
 8002800:	9800      	ldr	r0, [sp, #0]
 8002802:	9b05      	ldr	r3, [sp, #20]
 8002804:	4449      	add	r1, r9
 8002806:	eba0 000b 	sub.w	r0, r0, fp
 800280a:	b22a      	sxth	r2, r5
 800280c:	b209      	sxth	r1, r1
 800280e:	b200      	sxth	r0, r0
 8002810:	f000 f9c0 	bl	8002b94 <lcdDrawHLine>
    if (cornername & 0x2)
 8002814:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8002816:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 8002818:	2a00      	cmp	r2, #0
 800281a:	d0cb      	beq.n	80027b4 <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 800281c:	9a04      	ldr	r2, [sp, #16]
 800281e:	9901      	ldr	r1, [sp, #4]
 8002820:	9800      	ldr	r0, [sp, #0]
 8002822:	9305      	str	r3, [sp, #20]
 8002824:	fa1f f988 	uxth.w	r9, r8
 8002828:	fa1f fb86 	uxth.w	fp, r6
 800282c:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8002830:	eba1 010b 	sub.w	r1, r1, fp
 8002834:	eba0 0009 	sub.w	r0, r0, r9
 8002838:	b212      	sxth	r2, r2
 800283a:	b209      	sxth	r1, r1
 800283c:	b200      	sxth	r0, r0
 800283e:	f000 f9a9 	bl	8002b94 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8002842:	9901      	ldr	r1, [sp, #4]
 8002844:	9800      	ldr	r0, [sp, #0]
 8002846:	9b05      	ldr	r3, [sp, #20]
 8002848:	eba1 0109 	sub.w	r1, r1, r9
 800284c:	eba0 000b 	sub.w	r0, r0, fp
 8002850:	b22a      	sxth	r2, r5
 8002852:	b209      	sxth	r1, r1
 8002854:	b200      	sxth	r0, r0
 8002856:	f000 f99d 	bl	8002b94 <lcdDrawHLine>
  while (y < r)
 800285a:	3502      	adds	r5, #2
 800285c:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 800285e:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8002860:	b2ad      	uxth	r5, r5
 8002862:	dcab      	bgt.n	80027bc <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8002864:	b006      	add	sp, #24
 8002866:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800286a:	bf00      	nop

0800286c <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 800286c:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8002870:	b085      	sub	sp, #20
 8002872:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8002876:	4688      	mov	r8, r1
 8002878:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 800287a:	b2b1      	uxth	r1, r6
 800287c:	fa1f f289 	uxth.w	r2, r9
{
 8002880:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8002888:	b222      	sxth	r2, r4
 800288a:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 800288c:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8002890:	4445      	add	r5, r8
{
 8002892:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8002894:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8002896:	b21b      	sxth	r3, r3
 8002898:	b209      	sxth	r1, r1
 800289a:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 800289c:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 800289e:	f000 f99f 	bl	8002be0 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 80028a2:	eb0a 0006 	add.w	r0, sl, r6
 80028a6:	1e69      	subs	r1, r5, #1
 80028a8:	4632      	mov	r2, r6
 80028aa:	e9cd 4900 	strd	r4, r9, [sp]
 80028ae:	2301      	movs	r3, #1
 80028b0:	9003      	str	r0, [sp, #12]
 80028b2:	f7ff ff5b 	bl	800276c <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 80028b6:	9803      	ldr	r0, [sp, #12]
 80028b8:	2302      	movs	r3, #2
 80028ba:	4632      	mov	r2, r6
 80028bc:	eb08 0106 	add.w	r1, r8, r6
 80028c0:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 80028c4:	b005      	add	sp, #20
 80028c6:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 80028ca:	f7ff bf4f 	b.w	800276c <lcdDrawFillCircleHelper>
 80028ce:	bf00      	nop

080028d0 <lcdDrawAvailable>:
{
  return fps_time;
}

bool lcdDrawAvailable(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <lcdDrawAvailable+0x28>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f083 0301 	eor.w	r3, r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	2000056e 	.word	0x2000056e

080028fc <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80028fc:	b598      	push	{r3, r4, r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  if (is_init != true)
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <lcdRequestDraw+0x5c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <lcdRequestDraw+0x16>
  {
    return false;
 800290e:	2300      	movs	r3, #0
 8002910:	e020      	b.n	8002954 <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <lcdRequestDraw+0x60>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <lcdRequestDraw+0x22>
  {
    return false;
 800291a:	2300      	movs	r3, #0
 800291c:	e01a      	b.n	8002954 <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <lcdRequestDraw+0x64>)
 8002920:	689c      	ldr	r4, [r3, #8]
 8002922:	237f      	movs	r3, #127	; 0x7f
 8002924:	229f      	movs	r2, #159	; 0x9f
 8002926:	2100      	movs	r1, #0
 8002928:	2000      	movs	r0, #0
 800292a:	47a0      	blx	r4

  lcd_request_draw = true;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <lcdRequestDraw+0x60>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <lcdRequestDraw+0x64>)
 8002934:	699c      	ldr	r4, [r3, #24]
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <lcdRequestDraw+0x68>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	035b      	lsls	r3, r3, #13
 8002944:	4a08      	ldr	r2, [pc, #32]	; (8002968 <lcdRequestDraw+0x6c>)
 8002946:	4413      	add	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800294e:	4618      	mov	r0, r3
 8002950:	47a0      	blx	r4

  return true;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd98      	pop	{r3, r4, r7, pc}
 8002958:	2000056c 	.word	0x2000056c
 800295c:	2000056e 	.word	0x2000056e
 8002960:	20000550 	.word	0x20000550
 8002964:	2000056d 	.word	0x2000056d
 8002968:	20000580 	.word	0x20000580

0800296c <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <lcdUpdateDraw+0x54>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8002980:	f7ff ffbc 	bl	80028fc <lcdRequestDraw>

  pre_time = millis();
 8002984:	f7fe fccd 	bl	8001322 <millis>
 8002988:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 800298a:	e009      	b.n	80029a0 <lcdUpdateDraw+0x34>
  {
    delay(1);
 800298c:	2001      	movs	r0, #1
 800298e:	f7fe fcbd 	bl	800130c <delay>
    if (millis()-pre_time >= 100)
 8002992:	f7fe fcc6 	bl	8001322 <millis>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b63      	cmp	r3, #99	; 0x63
 800299e:	d80a      	bhi.n	80029b6 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 80029a0:	f7ff ff96 	bl	80028d0 <lcdDrawAvailable>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ed      	bne.n	800298c <lcdUpdateDraw+0x20>
 80029b0:	e002      	b.n	80029b8 <lcdUpdateDraw+0x4c>
    return;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <lcdUpdateDraw+0x4c>
    {
      break;
 80029b6:	bf00      	nop
    }
  }
}
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000056c 	.word	0x2000056c

080029c4 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <lcdGetFrameBuffer+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000057c 	.word	0x2000057c

080029dc <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4604      	mov	r4, r0
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	80fb      	strh	r3, [r7, #6]
 80029ee:	4603      	mov	r3, r0
 80029f0:	80bb      	strh	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	807b      	strh	r3, [r7, #2]
 80029f6:	4613      	mov	r3, r2
 80029f8:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80029fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80029fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a08:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a0c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a14:	1acb      	subs	r3, r1, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bfb8      	it	lt
 8002a1a:	425b      	neglt	r3, r3
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	bfcc      	ite	gt
 8002a20:	2301      	movgt	r3, #1
 8002a22:	2300      	movle	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8002a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da01      	bge.n	8002a34 <lcdDrawLine+0x58>
 8002a30:	2300      	movs	r3, #0
 8002a32:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8002a34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da01      	bge.n	8002a40 <lcdDrawLine+0x64>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8002a40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da01      	bge.n	8002a4c <lcdDrawLine+0x70>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8002a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	da01      	bge.n	8002a58 <lcdDrawLine+0x7c>
 8002a54:	2300      	movs	r3, #0
 8002a56:	803b      	strh	r3, [r7, #0]


  if (steep)
 8002a58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	833b      	strh	r3, [r7, #24]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	80fb      	strh	r3, [r7, #6]
 8002a68:	8b3b      	ldrh	r3, [r7, #24]
 8002a6a:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	82fb      	strh	r3, [r7, #22]
 8002a70:	883b      	ldrh	r3, [r7, #0]
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8002a78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dd0b      	ble.n	8002a9c <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	82bb      	strh	r3, [r7, #20]
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	80fb      	strh	r3, [r7, #6]
 8002a8c:	8abb      	ldrh	r3, [r7, #20]
 8002a8e:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8002a90:	88bb      	ldrh	r3, [r7, #4]
 8002a92:	827b      	strh	r3, [r7, #18]
 8002a94:	883b      	ldrh	r3, [r7, #0]
 8002a96:	80bb      	strh	r3, [r7, #4]
 8002a98:	8a7b      	ldrh	r3, [r7, #18]
 8002a9a:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8002aa6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bfb8      	it	lt
 8002ab4:	425b      	neglt	r3, r3
 8002ab6:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8002ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002abc:	0fda      	lsrs	r2, r3, #31
 8002abe:	4413      	add	r3, r2
 8002ac0:	105b      	asrs	r3, r3, #1
 8002ac2:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8002ac4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ac8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	da02      	bge.n	8002ad6 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	83bb      	strh	r3, [r7, #28]
 8002ad4:	e02d      	b.n	8002b32 <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8002ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ada:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8002adc:	e029      	b.n	8002b32 <lcdDrawLine+0x156>
  {
    if (steep)
 8002ade:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8002ae6:	88bb      	ldrh	r3, [r7, #4]
 8002ae8:	88f9      	ldrh	r1, [r7, #6]
 8002aea:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fd0f 	bl	8002510 <lcdDrawPixel>
 8002af2:	e005      	b.n	8002b00 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	88b9      	ldrh	r1, [r7, #4]
 8002af8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd08 	bl	8002510 <lcdDrawPixel>
    }
    err -= dy;
 8002b00:	8bfa      	ldrh	r2, [r7, #30]
 8002b02:	89fb      	ldrh	r3, [r7, #14]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8002b0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	da09      	bge.n	8002b26 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8002b12:	88ba      	ldrh	r2, [r7, #4]
 8002b14:	8bbb      	ldrh	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8002b1c:	8bfa      	ldrh	r2, [r7, #30]
 8002b1e:	8a3b      	ldrh	r3, [r7, #16]
 8002b20:	4413      	add	r3, r2
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8002b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	ddcf      	ble.n	8002ade <lcdDrawLine+0x102>
    }
  }
}
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
 8002b42:	3724      	adds	r7, #36	; 0x24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd90      	pop	{r4, r7, pc}

08002b48 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	80fb      	strh	r3, [r7, #6]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80bb      	strh	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8002b66:	88ba      	ldrh	r2, [r7, #4]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b21c      	sxth	r4, r3
 8002b74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4623      	mov	r3, r4
 8002b86:	f7ff ff29 	bl	80029dc <lcdDrawLine>
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}
 8002b92:	bf00      	nop

08002b94 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	80fb      	strh	r3, [r7, #6]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80bb      	strh	r3, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002bc4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bc8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bcc:	883b      	ldrh	r3, [r7, #0]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	f7ff ff03 	bl	80029dc <lcdDrawLine>
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop

08002be0 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4604      	mov	r4, r0
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	80fb      	strh	r3, [r7, #6]
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80bb      	strh	r3, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	807b      	strh	r3, [r7, #2]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	81fb      	strh	r3, [r7, #14]
 8002c02:	e00e      	b.n	8002c22 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8002c04:	8c3b      	ldrh	r3, [r7, #32]
 8002c06:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002c0a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c0e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002c12:	f7ff ff99 	bl	8002b48 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8002c16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	81fb      	strh	r3, [r7, #14]
 8002c22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c26:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c2e:	440b      	add	r3, r1
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbe7      	blt.n	8002c04 <lcdDrawFillRect+0x24>
  }
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
 8002c3e:	bf00      	nop

08002c40 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4604      	mov	r4, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	80fb      	strh	r3, [r7, #6]
 8002c52:	4603      	mov	r3, r0
 8002c54:	80bb      	strh	r3, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	807b      	strh	r3, [r7, #2]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b9f      	cmp	r3, #159	; 0x9f
 8002c62:	d83b      	bhi.n	8002cdc <lcdDrawBufferImage+0x9c>
 8002c64:	88bb      	ldrh	r3, [r7, #4]
 8002c66:	2b7f      	cmp	r3, #127	; 0x7f
 8002c68:	d838      	bhi.n	8002cdc <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	4413      	add	r3, r2
 8002c70:	2ba0      	cmp	r3, #160	; 0xa0
 8002c72:	dc35      	bgt.n	8002ce0 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 8002c74:	88ba      	ldrh	r2, [r7, #4]
 8002c76:	883b      	ldrh	r3, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	dc32      	bgt.n	8002ce4 <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 8002c82:	88bb      	ldrh	r3, [r7, #4]
 8002c84:	81bb      	strh	r3, [r7, #12]
 8002c86:	e021      	b.n	8002ccc <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	817b      	strh	r3, [r7, #10]
 8002c8c:	e011      	b.n	8002cb2 <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 8002c8e:	8978      	ldrh	r0, [r7, #10]
 8002c90:	89b9      	ldrh	r1, [r7, #12]
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	81fa      	strh	r2, [r7, #14]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6a3a      	ldr	r2, [r7, #32]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f7ff fc35 	bl	8002510 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 8002ca6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	817b      	strh	r3, [r7, #10]
 8002cb2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cb6:	88f9      	ldrh	r1, [r7, #6]
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	440b      	add	r3, r1
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dbe6      	blt.n	8002c8e <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 8002cc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	81bb      	strh	r3, [r7, #12]
 8002ccc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002cd0:	88b9      	ldrh	r1, [r7, #4]
 8002cd2:	883b      	ldrh	r3, [r7, #0]
 8002cd4:	440b      	add	r3, r1
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	dbd6      	blt.n	8002c88 <lcdDrawBufferImage+0x48>
 8002cda:	e004      	b.n	8002ce6 <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8002cdc:	bf00      	nop
 8002cde:	e002      	b.n	8002ce6 <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 8002ce4:	bf00      	nop
		}
    }
}
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd90      	pop	{r4, r7, pc}

08002cec <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8002cec:	b408      	push	{r3}
 8002cee:	b590      	push	{r4, r7, lr}
 8002cf0:	b0d8      	sub	sp, #352	; 0x160
 8002cf2:	af02      	add	r7, sp, #8
 8002cf4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002cf8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002cfc:	6018      	str	r0, [r3, #0]
 8002cfe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d02:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d06:	6019      	str	r1, [r3, #0]
 8002d08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d0c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8002d10:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8002d12:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d16:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8002d1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002d28:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002d2c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002d30:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002d34:	21ff      	movs	r1, #255	; 0xff
 8002d36:	f00c fe6d 	bl	800fa14 <vsniprintf>
 8002d3a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8002d3e:	4b80      	ldr	r3, [pc, #512]	; (8002f40 <lcdPrintf+0x254>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b7f      	ldr	r3, [pc, #508]	; (8002f44 <lcdPrintf+0x258>)
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d072      	beq.n	8002e36 <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d56:	e067      	b.n	8002e28 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8002d58:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d5c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8002d60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d64:	4413      	add	r3, r2
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	4b75      	ldr	r3, [pc, #468]	; (8002f40 <lcdPrintf+0x254>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4b75      	ldr	r3, [pc, #468]	; (8002f44 <lcdPrintf+0x258>)
 8002d70:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8002d74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d78:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8002d7c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d80:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8002d84:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d88:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4623      	mov	r3, r4
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	6800      	ldr	r0, [r0, #0]
 8002d96:	f000 f92d 	bl	8002ff4 <disEngFont>

      Size_Char = 1;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8002da0:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <lcdPrintf+0x254>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <lcdPrintf+0x258>)
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <lcdPrintf+0x254>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b62      	ldr	r3, [pc, #392]	; (8002f44 <lcdPrintf+0x258>)
 8002dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8002dc4:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8002dc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002dcc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd0:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002dd4:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8002dd8:	6809      	ldr	r1, [r1, #0]
 8002dda:	440a      	add	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 8002dde:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8002de2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002de6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	2ba0      	cmp	r3, #160	; 0xa0
 8002df0:	dd13      	ble.n	8002e1a <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 8002df2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002df6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dfa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002dfe:	601a      	str	r2, [r3, #0]
        y += font_height;
 8002e00:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8002e04:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e0c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002e10:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8002e14:	6809      	ldr	r1, [r1, #0]
 8002e16:	440a      	add	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8002e1a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002e1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002e22:	4413      	add	r3, r2
 8002e24:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e28:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002e2c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002e30:	429a      	cmp	r2, r3
 8002e32:	db91      	blt.n	8002d58 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8002e34:	e07b      	b.n	8002f2e <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e3c:	e06f      	b.n	8002f1e <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8002e3e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002e46:	4413      	add	r3, r2
 8002e48:	f107 0214 	add.w	r2, r7, #20
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 ffa2 	bl	8005d98 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8002e54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e58:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	f107 0214 	add.w	r2, r7, #20
 8002e62:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002e66:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8002e6a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8002e6e:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8002e72:	6809      	ldr	r1, [r1, #0]
 8002e74:	6800      	ldr	r0, [r0, #0]
 8002e76:	f000 f867 	bl	8002f48 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8002e7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002e82:	885b      	ldrh	r3, [r3, #2]
 8002e84:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8002e88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	dd0e      	ble.n	8002eae <lcdPrintf+0x1c2>
        font_width = 16;
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8002e96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002e9e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002ea2:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	3210      	adds	r2, #16
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e00d      	b.n	8002eca <lcdPrintf+0x1de>
        font_width = 8;
 8002eae:	2308      	movs	r3, #8
 8002eb0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8002eb4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002eb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ebc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002ec0:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8002eca:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8002ece:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002ed2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	2ba0      	cmp	r3, #160	; 0xa0
 8002edc:	dd11      	ble.n	8002f02 <lcdPrintf+0x216>
        x  = x_Pre;
 8002ede:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002ee2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ee6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002eea:	601a      	str	r2, [r3, #0]
        y += 16;
 8002eec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002ef0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ef4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002ef8:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	3210      	adds	r2, #16
 8002f00:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8002f02:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f0a:	889b      	ldrh	r3, [r3, #4]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00d      	beq.n	8002f2c <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8002f10:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002f14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f18:	4413      	add	r3, r2
 8002f1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f1e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002f22:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f26:	429a      	cmp	r2, r3
 8002f28:	db89      	blt.n	8002e3e <lcdPrintf+0x152>
}
 8002f2a:	e000      	b.n	8002f2e <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8002f2c:	bf00      	nop
}
 8002f2e:	bf00      	nop
 8002f30:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002f3a:	b001      	add	sp, #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000007d 	.word	0x2000007d
 8002f44:	20000080 	.word	0x20000080

08002f48 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	885b      	ldrh	r3, [r3, #2]
 8002f5a:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8002f5c:	8b3b      	ldrh	r3, [r7, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <disHanFont+0x1e>
  {
    FontSize = 2;
 8002f62:	2302      	movs	r3, #2
 8002f64:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002f66:	2300      	movs	r3, #0
 8002f68:	83fb      	strh	r3, [r7, #30]
 8002f6a:	e03a      	b.n	8002fe2 <disHanFont+0x9a>
  {
    index_x = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002f70:	2300      	movs	r3, #0
 8002f72:	83bb      	strh	r3, [r7, #28]
 8002f74:	e02e      	b.n	8002fd4 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	8b3a      	ldrh	r2, [r7, #24]
 8002f7a:	fb03 f202 	mul.w	r2, r3, r2
 8002f7e:	8bbb      	ldrh	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4413      	add	r3, r2
 8002f86:	799b      	ldrb	r3, [r3, #6]
 8002f88:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	837b      	strh	r3, [r7, #26]
 8002f8e:	e01b      	b.n	8002fc8 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8002f90:	7d7a      	ldrb	r2, [r7, #21]
 8002f92:	8b7b      	ldrh	r3, [r7, #26]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b298      	uxth	r0, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	8bfb      	ldrh	r3, [r7, #30]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	887a      	ldrh	r2, [r7, #2]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7ff faaa 	bl	8002510 <lcdDrawPixel>
        }
        index_x++;
 8002fbc:	8afb      	ldrh	r3, [r7, #22]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8002fc2:	8b7b      	ldrh	r3, [r7, #26]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	837b      	strh	r3, [r7, #26]
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	2b07      	cmp	r3, #7
 8002fcc:	d9e0      	bls.n	8002f90 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002fce:	8bbb      	ldrh	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	83bb      	strh	r3, [r7, #28]
 8002fd4:	8bba      	ldrh	r2, [r7, #28]
 8002fd6:	8b3b      	ldrh	r3, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3cc      	bcc.n	8002f76 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002fdc:	8bfb      	ldrh	r3, [r7, #30]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	83fb      	strh	r3, [r7, #30]
 8002fe2:	8bfb      	ldrh	r3, [r7, #30]
 8002fe4:	2b0f      	cmp	r3, #15
 8002fe6:	d9c1      	bls.n	8002f6c <disHanFont+0x24>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop

08002ff4 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e035      	b.n	8003076 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	3b20      	subs	r3, #32
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	7849      	ldrb	r1, [r1, #1]
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4619      	mov	r1, r3
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	440b      	add	r3, r1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e01a      	b.n	8003064 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00f      	beq.n	800305e <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	b29a      	uxth	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	b29b      	uxth	r3, r3
 8003046:	4413      	add	r3, r2
 8003048:	b298      	uxth	r0, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	b29a      	uxth	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4413      	add	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003058:	4619      	mov	r1, r3
 800305a:	f7ff fa59 	bl	8002510 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	3301      	adds	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4293      	cmp	r3, r2
 800306e:	d3de      	bcc.n	800302e <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	461a      	mov	r2, r3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4293      	cmp	r3, r2
 8003080:	d3c3      	bcc.n	800300a <disEngFont+0x16>
      }
    }
  }
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8003096:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <lcdSetFont+0x1c>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	7013      	strb	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	2000007d 	.word	0x2000007d

080030ac <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80030b2:	2301      	movs	r3, #1
 80030b4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <ledInit+0x84>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <ledInit+0x84>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6313      	str	r3, [r2, #48]	; 0x30
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <ledInit+0x84>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e016      	b.n	8003120 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80030f2:	4a10      	ldr	r2, [pc, #64]	; (8003134 <ledInit+0x88>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	889b      	ldrh	r3, [r3, #4]
 80030fc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <ledInit+0x88>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003106:	1d3a      	adds	r2, r7, #4
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f005 fc1c 	bl	8008948 <HAL_GPIO_Init>

    ledOff(i);
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f80f 	bl	8003138 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	dde5      	ble.n	80030f2 <ledInit+0x46>

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
#endif

  return ret;
 8003126:	7efb      	ldrb	r3, [r7, #27]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	20000090 	.word	0x20000090

08003138 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <ledOff+0x3c>)
 800314c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <ledOff+0x3c>)
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	8899      	ldrh	r1, [r3, #4]
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	4a05      	ldr	r2, [pc, #20]	; (8003174 <ledOff+0x3c>)
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	79db      	ldrb	r3, [r3, #7]
 8003164:	461a      	mov	r2, r3
 8003166:	f005 fe6f 	bl	8008e48 <HAL_GPIO_WritePin>
 800316a:	e000      	b.n	800316e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 800316c:	bf00      	nop
}
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000090 	.word	0x20000090

08003178 <menuSetCallBack>:
#ifdef _USE_HW_CLI
static void cliMenu(cli_args_t *args);
#endif

void menuSetCallBack(void (*callback)(uint8_t layer))
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	menu_node.callback = callback;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <menuSetCallBack+0x24>)
 8003182:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000a580 	.word	0x2000a580

080031a0 <menuInit>:

bool menuInit(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
	menu_node.node = 1;
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <menuInit+0x7c>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
	menu_node.main = 0;
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <menuInit+0x7c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	705a      	strb	r2, [r3, #1]
	menu_node.layer = 0;
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <menuInit+0x7c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	709a      	strb	r2, [r3, #2]
	menu_node.menu_count = 0;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <menuInit+0x7c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	70da      	strb	r2, [r3, #3]
	menu_node.menu_args.getData  = menuArgsGetData;
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <menuInit+0x7c>)
 80031be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <menuInit+0x80>)
 80031c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	menu_node.menu_args.getFloat = menuArgsGetFloat;
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <menuInit+0x7c>)
 80031cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <menuInit+0x84>)
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	menu_node.menu_args.getStr   = menuArgsGetStr;
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <menuInit+0x7c>)
 80031da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031de:	461a      	mov	r2, r3
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <menuInit+0x88>)
 80031e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	menu_node.menu_args.isStr    = menuArgsIsStr;
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <menuInit+0x7c>)
 80031e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <menuInit+0x8c>)
 80031f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	menu_node.callback = NULL;
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <menuInit+0x7c>)
 80031f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	menuAdd("Relay1", 0, menu_relay1);
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <menuInit+0x90>)
 8003204:	2100      	movs	r1, #0
 8003206:	480b      	ldr	r0, [pc, #44]	; (8003234 <menuInit+0x94>)
 8003208:	f000 f930 	bl	800346c <menuAdd>
	menuAdd("Relay2", 0, menu_relay2);
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <menuInit+0x98>)
 800320e:	2100      	movs	r1, #0
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <menuInit+0x9c>)
 8003212:	f000 f92b 	bl	800346c <menuAdd>

#ifdef _USE_HW_CLI
  cliAdd("menu", cliMenu);
#endif

	return true;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000a580 	.word	0x2000a580
 8003220:	08003309 	.word	0x08003309
 8003224:	08003361 	.word	0x08003361
 8003228:	080033c1 	.word	0x080033c1
 800322c:	08003411 	.word	0x08003411
 8003230:	080034f9 	.word	0x080034f9
 8003234:	08012724 	.word	0x08012724
 8003238:	08003515 	.word	0x08003515
 800323c:	0801272c 	.word	0x0801272c

08003240 <menuMain>:

bool menuMain(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  if (menu_node.node == 0)
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <menuMain+0x24>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <menuMain+0x10>
  {
    return false;
 800324c:	2300      	movs	r3, #0
 800324e:	e007      	b.n	8003260 <menuMain+0x20>
  }

  if (menu_node.node >= 1)
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <menuMain+0x24>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <menuMain+0x1e>
  {
    menuUpdate(&menu_node);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <menuMain+0x24>)
 800325a:	f000 f805 	bl	8003268 <menuUpdate>
  }

  return true;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000a580 	.word	0x2000a580

08003268 <menuUpdate>:

bool menuUpdate(menu_t *p_menu)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]

  if(p_menu->callback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800327a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <menuUpdate+0x2c>
  {
	  (*p_menu->callback)(p_menu->layer);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	7892      	ldrb	r2, [r2, #2]
 8003290:	4610      	mov	r0, r2
 8003292:	4798      	blx	r3
  }

  return ret;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <menu_strToUpper>:

void menu_strToUpper(char *str)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<MENU_NAME_MAX; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	81fb      	strh	r3, [r7, #14]
 80032aa:	e018      	b.n	80032de <menu_strToUpper+0x40>
  {
    str_ch = str[i];
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d014      	beq.n	80032e6 <menu_strToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80032bc:	7b7b      	ldrb	r3, [r7, #13]
 80032be:	2b60      	cmp	r3, #96	; 0x60
 80032c0:	d905      	bls.n	80032ce <menu_strToUpper+0x30>
 80032c2:	7b7b      	ldrb	r3, [r7, #13]
 80032c4:	2b7a      	cmp	r3, #122	; 0x7a
 80032c6:	d802      	bhi.n	80032ce <menu_strToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80032c8:	7b7b      	ldrb	r3, [r7, #13]
 80032ca:	3b20      	subs	r3, #32
 80032cc:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	7b7a      	ldrb	r2, [r7, #13]
 80032d6:	701a      	strb	r2, [r3, #0]
  for (i=0; i<MENU_NAME_MAX; i++)
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	3301      	adds	r3, #1
 80032dc:	81fb      	strh	r3, [r7, #14]
 80032de:	89fb      	ldrh	r3, [r7, #14]
 80032e0:	2bff      	cmp	r3, #255	; 0xff
 80032e2:	d9e3      	bls.n	80032ac <menu_strToUpper+0xe>
 80032e4:	e000      	b.n	80032e8 <menu_strToUpper+0x4a>
      break;
 80032e6:	bf00      	nop
  }

  if (i == MENU_NAME_MAX)
 80032e8:	89fb      	ldrh	r3, [r7, #14]
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d105      	bne.n	80032fc <menu_strToUpper+0x5e>
  {
    str[i-1] = 0;
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
  }
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <menuArgsGetData>:


int32_t menuArgsGetData(uint8_t index)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <menuArgsGetData+0x54>)
 8003318:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	b29a      	uxth	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003324:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003328:	429a      	cmp	r2, r3
 800332a:	d301      	bcc.n	8003330 <menuArgsGetData+0x28>
  {
    return 0;
 800332c:	2300      	movs	r3, #0
 800332e:	e010      	b.n	8003352 <menuArgsGetData+0x4a>
  }

  ret = (int32_t)strtoul((const char * ) p_menu->menu_args.argv[index], (char **)NULL, (int) 0);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003336:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f00c fb2e 	bl	800f9a8 <strtoul>
 800334c:	4603      	mov	r3, r0
 800334e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003350:	68fb      	ldr	r3, [r7, #12]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	2000a580 	.word	0x2000a580

08003360 <menuArgsGetFloat>:

float menuArgsGetFloat(uint8_t index)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <menuArgsGetFloat+0x5c>)
 8003372:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	b29a      	uxth	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800337e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <menuArgsGetFloat+0x2c>
  {
    return 0;
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e00f      	b.n	80033ac <menuArgsGetFloat+0x4c>
  }

  ret = (float)strtof((const char * ) p_menu->menu_args.argv[index], (char **)NULL);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f00c fa33 	bl	800f80c <strtof>
 80033a6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	ee07 3a90 	vmov	s15, r3
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000a580 	.word	0x2000a580

080033c0 <menuArgsGetStr>:

char *menuArgsGetStr(uint8_t index)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  menu_t *p_menu = &menu_node;
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <menuArgsGetStr+0x4c>)
 80033d0:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033dc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d301      	bcc.n	80033e8 <menuArgsGetStr+0x28>
  {
    return 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e00a      	b.n	80033fe <menuArgsGetStr+0x3e>
  }

  ret = p_menu->menu_args.argv[index];
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  return ret;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000a580 	.word	0x2000a580

08003410 <menuArgsIsStr>:

bool menuArgsIsStr(uint8_t index, char *p_str)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
  menu_t *p_menu = &menu_node;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <menuArgsIsStr+0x58>)
 8003422:	60bb      	str	r3, [r7, #8]


  if (index >= p_menu->menu_args.argc)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	b29a      	uxth	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800342e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003432:	429a      	cmp	r2, r3
 8003434:	d301      	bcc.n	800343a <menuArgsIsStr+0x2a>
  {
    return 0;
 8003436:	2300      	movs	r3, #0
 8003438:	e012      	b.n	8003460 <menuArgsIsStr+0x50>
  }

  if(strcmp(p_str, p_menu->menu_args.argv[index]) == 0)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4619      	mov	r1, r3
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f7fc fec6 	bl	80001e0 <strcmp>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <menuArgsIsStr+0x4e>
  {
    ret = true;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000a580 	.word	0x2000a580

0800346c <menuAdd>:

bool menuAdd(const char *menu_str, uint8_t layer, void (*p_func)(menu_args_t *))
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	460b      	mov	r3, r1
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	72fb      	strb	r3, [r7, #11]
  bool ret = true;
 800347a:	2301      	movs	r3, #1
 800347c:	77fb      	strb	r3, [r7, #31]
  menu_t *p_menu = &menu_node;
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <menuAdd+0x88>)
 8003480:	61bb      	str	r3, [r7, #24]
  uint16_t index;

  if (p_menu->menu_count >= MENU_LIST_MAX)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	2b1f      	cmp	r3, #31
 8003488:	d901      	bls.n	800348e <menuAdd+0x22>
  {
    return false;
 800348a:	2300      	movs	r3, #0
 800348c:	e02e      	b.n	80034ec <menuAdd+0x80>
  }

  index = p_menu->menu_count;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	82fb      	strh	r3, [r7, #22]
  p_menu->layer = layer;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	7afa      	ldrb	r2, [r7, #11]
 8003498:	709a      	strb	r2, [r3, #2]

  strcpy(p_menu->menu_list[index].menu_str, menu_str);
 800349a:	8afa      	ldrh	r2, [r7, #22]
 800349c:	4613      	mov	r3, r2
 800349e:	019b      	lsls	r3, r3, #6
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f00b fb83 	bl	800ebb8 <strcpy>
  p_menu->menu_list[index].menu_func = p_func;
 80034b2:	8afa      	ldrh	r2, [r7, #22]
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	4613      	mov	r3, r2
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]

  menu_strToUpper(p_menu->menu_list[index].menu_str);
 80034c8:	8afa      	ldrh	r2, [r7, #22]
 80034ca:	4613      	mov	r3, r2
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fee0 	bl	800329e <menu_strToUpper>

  p_menu->menu_count++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	78db      	ldrb	r3, [r3, #3]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	70da      	strb	r2, [r3, #3]

  return ret;
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	2000a580 	.word	0x2000a580

080034f8 <menu_relay1>:

void menu_relay1(menu_args_t *args)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	menu_t *p_menu = &menu_node;
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <menu_relay1+0x18>)
 8003502:	60fb      	str	r3, [r7, #12]

}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	2000a580 	.word	0x2000a580

08003514 <menu_relay2>:

void menu_relay2(menu_args_t *args)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	menu_t *p_menu = &menu_node;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <menu_relay2+0x18>)
 800351e:	60fb      	str	r3, [r7, #12]

}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	2000a580 	.word	0x2000a580

08003530 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <DWT_Delay_us+0x40>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800353e:	f006 f8b7 	bl	80096b0 <HAL_RCC_GetHCLKFreq>
 8003542:	4603      	mov	r3, r0
 8003544:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <DWT_Delay_us+0x44>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0c9b      	lsrs	r3, r3, #18
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003554:	bf00      	nop
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <DWT_Delay_us+0x40>)
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad2      	subs	r2, r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d3f8      	bcc.n	8003556 <DWT_Delay_us+0x26>
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	e0001000 	.word	0xe0001000
 8003574:	431bde83 	.word	0x431bde83

08003578 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	889b      	ldrh	r3, [r3, #4]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	619a      	str	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	889a      	ldrh	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	619a      	str	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b088      	sub	sp, #32
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c6:	2302      	movs	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	889b      	ldrh	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f107 020c 	add.w	r2, r7, #12
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f005 f9b4 	bl	8008948 <HAL_GPIO_Init>
}
 80035e0:	bf00      	nop
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80035f0:	2311      	movs	r3, #17
 80035f2:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	889b      	ldrh	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f107 020c 	add.w	r2, r7, #12
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f005 f99b 	bl	8008948 <HAL_GPIO_Init>

}
 8003612:	bf00      	nop
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	4613      	mov	r3, r2
 8003626:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ffd7 	bl	80035e8 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ffac 	bl	8003598 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8003640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003644:	f7ff ff74 	bl	8003530 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff ff95 	bl	8003578 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 800364e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003652:	f7ff ff6d 	bl	8003530 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff9e 	bl	8003598 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 800365c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003660:	f7ff ff66 	bl	8003530 <DWT_Delay_us>
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff7f 	bl	8003578 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffb4 	bl	80035e8 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8003680:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003684:	f7ff ff54 	bl	8003530 <DWT_Delay_us>
	DWT_Delay_us(20);
 8003688:	2014      	movs	r0, #20
 800368a:	f7ff ff51 	bl	8003530 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff91 	bl	80035b6 <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8003694:	2046      	movs	r0, #70	; 0x46
 8003696:	f7ff ff4b 	bl	8003530 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	889b      	ldrh	r3, [r3, #4]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f005 fbb7 	bl	8008e18 <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 80036ae:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80036b2:	f7ff ff3d 	bl	8003530 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
	if (bit)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff50 	bl	8003578 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff85 	bl	80035e8 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 80036de:	200a      	movs	r0, #10
 80036e0:	f7ff ff26 	bl	8003530 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff66 	bl	80035b6 <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 80036ea:	2037      	movs	r0, #55	; 0x37
 80036ec:	f7ff ff20 	bl	8003530 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff60 	bl	80035b6 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80036f6:	e011      	b.n	800371c <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff3d 	bl	8003578 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff72 	bl	80035e8 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8003704:	2041      	movs	r0, #65	; 0x41
 8003706:	f7ff ff13 	bl	8003530 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff53 	bl	80035b6 <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8003710:	2005      	movs	r0, #5
 8003712:	f7ff ff0d 	bl	8003530 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ff4d 	bl	80035b6 <ONEWIRE_INPUT>
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ff21 	bl	8003578 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ff56 	bl	80035e8 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 800373c:	2002      	movs	r0, #2
 800373e:	f7ff fef7 	bl	8003530 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ff37 	bl	80035b6 <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8003748:	200a      	movs	r0, #10
 800374a:	f7ff fef1 	bl	8003530 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	889b      	ldrh	r3, [r3, #4]
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f005 fb5d 	bl	8008e18 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8003768:	2032      	movs	r0, #50	; 0x32
 800376a:	f7ff fee1 	bl	8003530 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8003784:	2308      	movs	r3, #8
 8003786:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8003788:	e00a      	b.n	80037a0 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff93 	bl	80036c0 <OneWire_WriteBit>
		byte >>= 1;
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	1e5a      	subs	r2, r3, #1
 80037a4:	73fa      	strb	r2, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1ef      	bne.n	800378a <OneWire_WriteByte+0x12>
	}
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80037bc:	2308      	movs	r3, #8
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	2300      	movs	r3, #0
 80037c2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80037c4:	e00d      	b.n	80037e2 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80037c6:	7bbb      	ldrb	r3, [r7, #14]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffa9 	bl	8003724 <OneWire_ReadBit>
 80037d2:	4603      	mov	r3, r0
 80037d4:	01db      	lsls	r3, r3, #7
 80037d6:	b25a      	sxtb	r2, r3
 80037d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037dc:	4313      	orrs	r3, r2
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	1e5a      	subs	r2, r3, #1
 80037e6:	73fa      	strb	r2, [r7, #15]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ec      	bne.n	80037c6 <OneWire_ReadByte+0x12>
	}

	return byte;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f816 	bl	8003830 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003804:	21f0      	movs	r1, #240	; 0xf0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f825 	bl	8003856 <OneWire_Search>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 800381e:	21f0      	movs	r1, #240	; 0xf0
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f818 	bl	8003856 <OneWire_Search>
 8003826:	4603      	mov	r3, r0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	71da      	strb	r2, [r3, #7]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7a1b      	ldrb	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 809a 	bne.w	80039b4 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fef3 	bl	800366c <OneWire_Reset>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	71da      	strb	r2, [r3, #7]
			return 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	e09b      	b.n	80039da <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff66 	bl	8003778 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff39 	bl	8003724 <OneWire_ReadBit>
 80038b2:	4603      	mov	r3, r0
 80038b4:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff ff34 	bl	8003724 <OneWire_ReadBit>
 80038bc:	4603      	mov	r3, r0
 80038be:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80038c0:	7a7b      	ldrb	r3, [r7, #9]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <OneWire_Search+0x76>
 80038c6:	7a3b      	ldrb	r3, [r7, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d064      	beq.n	8003996 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80038cc:	7a7a      	ldrb	r2, [r7, #9]
 80038ce:	7a3b      	ldrb	r3, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d002      	beq.n	80038da <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80038d4:	7a7b      	ldrb	r3, [r7, #9]
 80038d6:	72bb      	strb	r3, [r7, #10]
 80038d8:	e026      	b.n	8003928 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d20d      	bcs.n	8003900 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80038e4:	7b7b      	ldrb	r3, [r7, #13]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	7a5a      	ldrb	r2, [r3, #9]
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	72bb      	strb	r3, [r7, #10]
 80038fe:	e008      	b.n	8003912 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	799b      	ldrb	r3, [r3, #6]
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8003912:	7abb      	ldrb	r3, [r7, #10]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800391c:	7bbb      	ldrb	r3, [r7, #14]
 800391e:	2b08      	cmp	r3, #8
 8003920:	d802      	bhi.n	8003928 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7bba      	ldrb	r2, [r7, #14]
 8003926:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8003928:	7abb      	ldrb	r3, [r7, #10]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10c      	bne.n	8003948 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800392e:	7b7b      	ldrb	r3, [r7, #13]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	7a59      	ldrb	r1, [r3, #9]
 8003936:	7b7b      	ldrb	r3, [r7, #13]
 8003938:	7afa      	ldrb	r2, [r7, #11]
 800393a:	430a      	orrs	r2, r1
 800393c:	b2d1      	uxtb	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	460a      	mov	r2, r1
 8003944:	725a      	strb	r2, [r3, #9]
 8003946:	e010      	b.n	800396a <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8003948:	7b7b      	ldrb	r3, [r7, #13]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	7a5b      	ldrb	r3, [r3, #9]
 8003950:	b25a      	sxtb	r2, r3
 8003952:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003956:	43db      	mvns	r3, r3
 8003958:	b25b      	sxtb	r3, r3
 800395a:	4013      	ands	r3, r2
 800395c:	b25a      	sxtb	r2, r3
 800395e:	7b7b      	ldrb	r3, [r7, #13]
 8003960:	b2d1      	uxtb	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800396a:	7abb      	ldrb	r3, [r7, #10]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fea6 	bl	80036c0 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	3301      	adds	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800397a:	7afb      	ldrb	r3, [r7, #11]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8003986:	7b7b      	ldrb	r3, [r7, #13]
 8003988:	3301      	adds	r3, #1
 800398a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800398c:	2301      	movs	r3, #1
 800398e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8003990:	7b7b      	ldrb	r3, [r7, #13]
 8003992:	2b07      	cmp	r3, #7
 8003994:	d98a      	bls.n	80038ac <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d90b      	bls.n	80039b4 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7bba      	ldrb	r2, [r7, #14]
 80039a0:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	799b      	ldrb	r3, [r3, #6]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <OneWire_Search+0x16c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7a5b      	ldrb	r3, [r3, #9]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80039d8:	7b3b      	ldrb	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80039ec:	2155      	movs	r1, #85	; 0x55
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fec2 	bl	8003778 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e00a      	b.n	8003a10 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff feb7 	bl	8003778 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b07      	cmp	r3, #7
 8003a14:	d9f1      	bls.n	80039fa <OneWire_SelectWithPointer+0x18>
	}
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	e00a      	b.n	8003a46 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	440b      	add	r3, r1
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	7a52      	ldrb	r2, [r2, #9]
 8003a3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	3301      	adds	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d9f1      	bls.n	8003a30 <OneWire_GetFullROM+0x10>
	}
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8003a6a:	e022      	b.n	8003ab2 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003a76:	2308      	movs	r3, #8
 8003a78:	737b      	strb	r3, [r7, #13]
 8003a7a:	e017      	b.n	8003aac <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	7bbb      	ldrb	r3, [r7, #14]
 8003a80:	4053      	eors	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003a90:	7b3b      	ldrb	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003aa0:	7bbb      	ldrb	r3, [r7, #14]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8003aa6:	7b7b      	ldrb	r3, [r7, #13]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	737b      	strb	r3, [r7, #13]
 8003aac:	7b7b      	ldrb	r3, [r7, #13]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e4      	bne.n	8003a7c <OneWire_CRC8+0x22>
	while (len--) {
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	1e5a      	subs	r2, r3, #1
 8003ab6:	70fa      	strb	r2, [r7, #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1d7      	bne.n	8003a6c <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  bool ret = false;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8003ad6:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <sdInit+0x78>)
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <sdInit+0x7c>)
 8003ada:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <sdInit+0x78>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <sdInit+0x78>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003ae8:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <sdInit+0x78>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <sdInit+0x78>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <sdInit+0x78>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <sdInit+0x78>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <sdInit+0x80>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <sdInit+0x80>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <sdInit+0x80>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8003b14:	480b      	ldr	r0, [pc, #44]	; (8003b44 <sdInit+0x78>)
 8003b16:	f005 fdff 	bl	8009718 <HAL_SD_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8003b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b24:	4807      	ldr	r0, [pc, #28]	; (8003b44 <sdInit+0x78>)
 8003b26:	f006 fbcb 	bl	800a2c0 <HAL_SD_ConfigWideBusOperation>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <sdInit+0x68>
      {
        ret = true;
 8003b30:	2301      	movs	r3, #1
 8003b32:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8003b34:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <sdInit+0x84>)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	7013      	strb	r3, [r2, #0]

#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
#endif

  return ret;
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000c624 	.word	0x2000c624
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	2000c621 	.word	0x2000c621
 8003b50:	2000c620 	.word	0x2000c620

08003b54 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return is_init;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <sdIsInit+0x14>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000c620 	.word	0x2000c620

08003b6c <sdIsDetected>:

bool sdIsDetected(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7fe fbdf 	bl	8002334 <gpioPinRead>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <sdIsDetected+0x18>
  {
    is_detected = true;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <sdIsDetected+0x28>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <sdIsDetected+0x28>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 8003b8a:	4b02      	ldr	r3, [pc, #8]	; (8003b94 <sdIsDetected+0x28>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000c621 	.word	0x2000c621

08003b98 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b08c      	sub	sp, #48	; 0x30
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <sdGetInfo+0xa8>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03d      	beq.n	8003c30 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8003bb4:	f107 0308 	add.w	r3, r7, #8
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4822      	ldr	r0, [pc, #136]	; (8003c44 <sdGetInfo+0xac>)
 8003bbc:	f006 fb54 	bl	800a268 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	4693      	mov	fp, r2
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4698      	mov	r8, r3
 8003c02:	4691      	mov	r9, r2
 8003c04:	fb08 f20b 	mul.w	r2, r8, fp
 8003c08:	fb0a f309 	mul.w	r3, sl, r9
 8003c0c:	4413      	add	r3, r2
 8003c0e:	fbaa 4508 	umull	r4, r5, sl, r8
 8003c12:	442b      	add	r3, r5
 8003c14:	461d      	mov	r5, r3
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	0d22      	lsrs	r2, r4, #20
 8003c20:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8003c24:	0d2b      	lsrs	r3, r5, #20
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	621a      	str	r2, [r3, #32]
    ret = true;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8003c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3730      	adds	r7, #48	; 0x30
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000c620 	.word	0x2000c620
 8003c44:	2000c624 	.word	0x2000c624

08003c48 <sdIsBusy>:

bool sdIsBusy(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8003c4e:	4808      	ldr	r0, [pc, #32]	; (8003c70 <sdIsBusy+0x28>)
 8003c50:	f006 fbb2 	bl	800a3b8 <HAL_SD_GetCardState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d102      	bne.n	8003c60 <sdIsBusy+0x18>
  {
    is_busy = false;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	71fb      	strb	r3, [r7, #7]
 8003c5e:	e001      	b.n	8003c64 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8003c60:	2301      	movs	r3, #1
 8003c62:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8003c64:	79fb      	ldrb	r3, [r7, #7]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000c624 	.word	0x2000c624

08003c74 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8003c7c:	f7fd fb51 	bl	8001322 <millis>
 8003c80:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8003c82:	e009      	b.n	8003c98 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8003c84:	f7ff ffe0 	bl	8003c48 <sdIsBusy>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f083 0301 	eor.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <sdIsReady+0x24>
    {
      return true;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e008      	b.n	8003caa <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8003c98:	f7fd fb43 	bl	8001322 <millis>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d8ed      	bhi.n	8003c84 <sdIsReady+0x10>
    }
  }

  return false;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <sdReadBlocks+0x8c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	481c      	ldr	r0, [pc, #112]	; (8003d44 <sdReadBlocks+0x90>)
 8003cd4:	f005 fdb0 	bl	8009838 <HAL_SD_ReadBlocks_DMA>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d12a      	bne.n	8003d34 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8003cde:	f7fd fb20 	bl	8001322 <millis>
 8003ce2:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8003ce4:	e007      	b.n	8003cf6 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8003ce6:	f7fd fb1c 	bl	8001322 <millis>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d908      	bls.n	8003d08 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <sdReadBlocks+0x8c>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f083 0301 	eor.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1ef      	bne.n	8003ce6 <sdReadBlocks+0x32>
 8003d06:	e00d      	b.n	8003d24 <sdReadBlocks+0x70>
      {
        break;
 8003d08:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8003d0a:	e00b      	b.n	8003d24 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8003d0c:	f7fd fb09 	bl	8001322 <millis>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d803      	bhi.n	8003d24 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <sdReadBlocks+0x8c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
        break;
 8003d22:	e004      	b.n	8003d2e <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8003d24:	f7ff ff90 	bl	8003c48 <sdIsBusy>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ee      	bne.n	8003d0c <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <sdReadBlocks+0x8c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000c622 	.word	0x2000c622
 8003d44:	2000c624 	.word	0x2000c624

08003d48 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <sdWriteBlocks+0x90>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	481d      	ldr	r0, [pc, #116]	; (8003ddc <sdWriteBlocks+0x94>)
 8003d68:	f005 fe50 	bl	8009a0c <HAL_SD_WriteBlocks_DMA>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d12d      	bne.n	8003dce <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 8003d72:	f7fd fad6 	bl	8001322 <millis>
 8003d76:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8003d78:	e007      	b.n	8003d8a <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8003d7a:	f7fd fad2 	bl	8001322 <millis>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d908      	bls.n	8003d9c <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <sdWriteBlocks+0x90>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f083 0301 	eor.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ef      	bne.n	8003d7a <sdWriteBlocks+0x32>
 8003d9a:	e000      	b.n	8003d9e <sdWriteBlocks+0x56>
      {
        break;
 8003d9c:	bf00      	nop
      }
    }
    pre_time = millis();
 8003d9e:	f7fd fac0 	bl	8001322 <millis>
 8003da2:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8003da4:	e00b      	b.n	8003dbe <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8003da6:	f7fd fabc 	bl	8001322 <millis>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d803      	bhi.n	8003dbe <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <sdWriteBlocks+0x90>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
        break;
 8003dbc:	e004      	b.n	8003dc8 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8003dbe:	f7ff ff43 	bl	8003c48 <sdIsBusy>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ee      	bne.n	8003da6 <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <sdWriteBlocks+0x90>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2000c623 	.word	0x2000c623
 8003ddc:	2000c624 	.word	0x2000c624

08003de0 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_SD_RxCpltCallback+0x1c>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	2000c622 	.word	0x2000c622

08003e00 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_SD_TxCpltCallback+0x1c>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000c623 	.word	0x2000c623

08003e20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a77      	ldr	r2, [pc, #476]	; (800401c <HAL_SD_MspInit+0x1fc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f040 80e8 	bne.w	8004014 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	4b75      	ldr	r3, [pc, #468]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a74      	ldr	r2, [pc, #464]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b72      	ldr	r3, [pc, #456]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	4b6e      	ldr	r3, [pc, #440]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	4a6d      	ldr	r2, [pc, #436]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e70:	4b6b      	ldr	r3, [pc, #428]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a66      	ldr	r2, [pc, #408]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8c:	4b64      	ldr	r3, [pc, #400]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4b60      	ldr	r3, [pc, #384]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a5f      	ldr	r2, [pc, #380]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003ea2:	f043 0302 	orr.w	r3, r3, #2
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_SD_MspInit+0x200>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003eb4:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	f107 031c 	add.w	r3, r7, #28
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4854      	ldr	r0, [pc, #336]	; (8004024 <HAL_SD_MspInit+0x204>)
 8003ed2:	f004 fd39 	bl	8008948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003ed6:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ee8:	230c      	movs	r3, #12
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eec:	f107 031c 	add.w	r3, r7, #28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	484d      	ldr	r0, [pc, #308]	; (8004028 <HAL_SD_MspInit+0x208>)
 8003ef4:	f004 fd28 	bl	8008948 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8003ef8:	4b4c      	ldr	r3, [pc, #304]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_SD_MspInit+0x210>)
 8003efc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f04:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f0c:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f18:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f1a:	4b44      	ldr	r3, [pc, #272]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f20:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f22:	4b42      	ldr	r3, [pc, #264]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f28:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f38:	2204      	movs	r2, #4
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f3e:	2203      	movs	r2, #3
 8003f40:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003f52:	4836      	ldr	r0, [pc, #216]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f54:	f004 f8fc 	bl	8008150 <HAL_DMA_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8003f5e:	f7fd fa4f 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
 8003f68:	4a30      	ldr	r2, [pc, #192]	; (800402c <HAL_SD_MspInit+0x20c>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <HAL_SD_MspInit+0x218>)
 8003f72:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003f74:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f7a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f7e:	2240      	movs	r2, #64	; 0x40
 8003f80:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f88:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f96:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f9e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fae:	2204      	movs	r2, #4
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003fc8:	481a      	ldr	r0, [pc, #104]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fca:	f004 f8c1 	bl	8008150 <HAL_DMA_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8003fd4:	f7fd fa14 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fde:	4a15      	ldr	r2, [pc, #84]	; (8004034 <HAL_SD_MspInit+0x214>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	2031      	movs	r0, #49	; 0x31
 8003fea:	f004 f86c 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003fee:	2031      	movs	r0, #49	; 0x31
 8003ff0:	f004 f885 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	203b      	movs	r0, #59	; 0x3b
 8003ffa:	f004 f864 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003ffe:	203b      	movs	r0, #59	; 0x3b
 8004000:	f004 f87d 	bl	80080fe <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2103      	movs	r1, #3
 8004008:	2045      	movs	r0, #69	; 0x45
 800400a:	f004 f85c 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800400e:	2045      	movs	r0, #69	; 0x45
 8004010:	f004 f875 	bl	80080fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004014:	bf00      	nop
 8004016:	3730      	adds	r7, #48	; 0x30
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40023800 	.word	0x40023800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	2000c6a8 	.word	0x2000c6a8
 8004030:	400264a0 	.word	0x400264a0
 8004034:	2000c708 	.word	0x2000c708
 8004038:	40026458 	.word	0x40026458

0800403c <DWT_Delay_us>:
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <DWT_Delay_us+0x40>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800404a:	f005 fb31 	bl	80096b0 <HAL_RCC_GetHCLKFreq>
 800404e:	4603      	mov	r3, r0
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <DWT_Delay_us+0x44>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0c9b      	lsrs	r3, r3, #18
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004060:	bf00      	nop
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <DWT_Delay_us+0x40>)
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad2      	subs	r2, r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d3f8      	bcc.n	8004062 <DWT_Delay_us+0x26>
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	e0001000 	.word	0xe0001000
 8004080:	431bde83 	.word	0x431bde83

08004084 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af00      	add	r7, sp, #0
	bool ret = false;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 80040b4:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <sonarInit+0xec>)
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <sonarInit+0xf0>)
 80040b8:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 80040ba:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <sonarInit+0xec>)
 80040bc:	225f      	movs	r2, #95	; 0x5f
 80040be:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <sonarInit+0xec>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <sonarInit+0xec>)
 80040c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040cc:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <sonarInit+0xec>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d4:	4b26      	ldr	r3, [pc, #152]	; (8004170 <sonarInit+0xec>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040da:	4825      	ldr	r0, [pc, #148]	; (8004170 <sonarInit+0xec>)
 80040dc:	f007 fb4c 	bl	800b778 <HAL_TIM_Base_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <sonarInit+0x66>
	  {
	    Error_Handler();
 80040e6:	f7fd f98b 	bl	8001400 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ee:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	4619      	mov	r1, r3
 80040f6:	481e      	ldr	r0, [pc, #120]	; (8004170 <sonarInit+0xec>)
 80040f8:	f007 fdaa 	bl	800bc50 <HAL_TIM_ConfigClockSource>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <sonarInit+0x82>
	  {
	    Error_Handler();
 8004102:	f7fd f97d 	bl	8001400 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004106:	481a      	ldr	r0, [pc, #104]	; (8004170 <sonarInit+0xec>)
 8004108:	f007 fb61 	bl	800b7ce <HAL_TIM_IC_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <sonarInit+0x92>
	  {
	    Error_Handler();
 8004112:	f7fd f975 	bl	8001400 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800411e:	f107 0314 	add.w	r3, r7, #20
 8004122:	4619      	mov	r1, r3
 8004124:	4812      	ldr	r0, [pc, #72]	; (8004170 <sonarInit+0xec>)
 8004126:	f008 f8dd 	bl	800c2e4 <HAL_TIMEx_MasterConfigSynchronization>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <sonarInit+0xb0>
	  {
	    Error_Handler();
 8004130:	f7fd f966 	bl	8001400 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004134:	2300      	movs	r3, #0
 8004136:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004138:	2301      	movs	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	220c      	movs	r2, #12
 8004148:	4619      	mov	r1, r3
 800414a:	4809      	ldr	r0, [pc, #36]	; (8004170 <sonarInit+0xec>)
 800414c:	f007 fce4 	bl	800bb18 <HAL_TIM_IC_ConfigChannel>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <sonarInit+0xd6>
	  {
	    Error_Handler();
 8004156:	f7fd f953 	bl	8001400 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800415a:	210c      	movs	r1, #12
 800415c:	4804      	ldr	r0, [pc, #16]	; (8004170 <sonarInit+0xec>)
 800415e:	f007 fb6b 	bl	800b838 <HAL_TIM_IC_Start_IT>

	return ret;
 8004162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004166:	4618      	mov	r0, r3
 8004168:	3730      	adds	r7, #48	; 0x30
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000c768 	.word	0x2000c768
 8004174:	40000400 	.word	0x40000400

08004178 <Sonar_measure>:

bool Sonar_measure(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	bool ret = false;
 800417e:	2300      	movs	r3, #0
 8004180:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8004182:	4b5d      	ldr	r3, [pc, #372]	; (80042f8 <Sonar_measure+0x180>)
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <Sonar_measure+0x18>
 800418a:	2b01      	cmp	r3, #1
 800418c:	d022      	beq.n	80041d4 <Sonar_measure+0x5c>
 800418e:	e0a9      	b.n	80042e4 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8004190:	2103      	movs	r1, #3
 8004192:	2007      	movs	r0, #7
 8004194:	f7fe f80a 	bl	80021ac <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8004198:	2101      	movs	r1, #1
 800419a:	2007      	movs	r0, #7
 800419c:	f7fe f878 	bl	8002290 <gpioPinWrite>
			DWT_Delay_us(5);
 80041a0:	2005      	movs	r0, #5
 80041a2:	f7ff ff4b 	bl	800403c <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 80041a6:	2100      	movs	r1, #0
 80041a8:	2007      	movs	r0, #7
 80041aa:	f7fe f871 	bl	8002290 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 80041ae:	2106      	movs	r1, #6
 80041b0:	2007      	movs	r0, #7
 80041b2:	f7fd fffb 	bl	80021ac <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 80041b6:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <Sonar_measure+0x180>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 80041bc:	4b4e      	ldr	r3, [pc, #312]	; (80042f8 <Sonar_measure+0x180>)
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <Sonar_measure+0x180>)
 80041c6:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 80041c8:	f7fd f8ab 	bl	8001322 <millis>
 80041cc:	4603      	mov	r3, r0
 80041ce:	4a4b      	ldr	r2, [pc, #300]	; (80042fc <Sonar_measure+0x184>)
 80041d0:	6013      	str	r3, [r2, #0]
			break;
 80041d2:	e087      	b.n	80042e4 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <Sonar_measure+0x180>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f083 0301 	eor.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06a      	beq.n	80042b8 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 80041e2:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <Sonar_measure+0x180>)
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	4b44      	ldr	r3, [pc, #272]	; (80042f8 <Sonar_measure+0x180>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d907      	bls.n	80041fe <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <Sonar_measure+0x180>)
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4b41      	ldr	r3, [pc, #260]	; (80042f8 <Sonar_measure+0x180>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <Sonar_measure+0x180>)
 80041fa:	60d3      	str	r3, [r2, #12]
 80041fc:	e00e      	b.n	800421c <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 80041fe:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <Sonar_measure+0x180>)
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <Sonar_measure+0x180>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d208      	bcs.n	800421c <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 800420a:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <Sonar_measure+0x180>)
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <Sonar_measure+0x180>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004218:	4a37      	ldr	r2, [pc, #220]	; (80042f8 <Sonar_measure+0x180>)
 800421a:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <Sonar_measure+0x180>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f983 	bl	8000534 <__aeabi_ui2d>
 800422e:	a330      	add	r3, pc, #192	; (adr r3, 80042f0 <Sonar_measure+0x178>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f7fc f9f8 	bl	8000628 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	f7fc fcca 	bl	8000bd8 <__aeabi_d2uiz>
 8004244:	4603      	mov	r3, r0
 8004246:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <Sonar_measure+0x180>)
 8004248:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <Sonar_measure+0x188>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	2b0b      	cmp	r3, #11
 8004258:	d101      	bne.n	800425e <Sonar_measure+0xe6>
 800425a:	2300      	movs	r3, #0
 800425c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <Sonar_measure+0x180>)
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <Sonar_measure+0x188>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b211      	sxth	r1, r2
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <Sonar_measure+0x18c>)
 800426a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <Sonar_measure+0x188>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <Sonar_measure+0x18c>)
 8004274:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004278:	461a      	mov	r2, r3
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <Sonar_measure+0x190>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4413      	add	r3, r2
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <Sonar_measure+0x190>)
 8004282:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <Sonar_measure+0x190>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	79ba      	ldrb	r2, [r7, #6]
 800428a:	491e      	ldr	r1, [pc, #120]	; (8004304 <Sonar_measure+0x18c>)
 800428c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <Sonar_measure+0x190>)
 8004294:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8004296:	79bb      	ldrb	r3, [r7, #6]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <Sonar_measure+0x188>)
 800429a:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <Sonar_measure+0x190>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1a      	ldr	r2, [pc, #104]	; (800430c <Sonar_measure+0x194>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	08db      	lsrs	r3, r3, #3
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <Sonar_measure+0x180>)
 80042aa:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <Sonar_measure+0x180>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	705a      	strb	r2, [r3, #1]
				ret = true;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 80042b6:	e014      	b.n	80042e2 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 80042b8:	f7fd f833 	bl	8001322 <millis>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <Sonar_measure+0x184>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b18      	cmp	r3, #24
 80042c6:	d90c      	bls.n	80042e2 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <Sonar_measure+0x180>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	3301      	adds	r3, #1
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <Sonar_measure+0x180>)
 80042d0:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <Sonar_measure+0x180>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <Sonar_measure+0x180>)
 80042da:	2200      	movs	r2, #0
 80042dc:	705a      	strb	r2, [r3, #1]
					ret = false;
 80042de:	2300      	movs	r3, #0
 80042e0:	71fb      	strb	r3, [r7, #7]
			break;
 80042e2:	bf00      	nop
	}
	return ret;
 80042e4:	79fb      	ldrb	r3, [r7, #7]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	75f6fd22 	.word	0x75f6fd22
 80042f4:	3f919ce0 	.word	0x3f919ce0
 80042f8:	2000c7a8 	.word	0x2000c7a8
 80042fc:	2000c7c4 	.word	0x2000c7c4
 8004300:	2000c7c8 	.word	0x2000c7c8
 8004304:	2000c7cc 	.word	0x2000c7cc
 8004308:	2000c7e4 	.word	0x2000c7e4
 800430c:	cccccccd 	.word	0xcccccccd

08004310 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <HAL_TIM_Base_MspInit+0x94>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d133      	bne.n	800439a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a1b      	ldr	r2, [pc, #108]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_TIM_Base_MspInit+0x98>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800436a:	2302      	movs	r3, #2
 800436c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800437a:	2302      	movs	r3, #2
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4809      	ldr	r0, [pc, #36]	; (80043ac <HAL_TIM_Base_MspInit+0x9c>)
 8004386:	f004 fadf 	bl	8008948 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2101      	movs	r1, #1
 800438e:	201d      	movs	r0, #29
 8004390:	f003 fe99 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004394:	201d      	movs	r0, #29
 8004396:	f003 feb2 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800439a:	bf00      	nop
 800439c:	3728      	adds	r7, #40	; 0x28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40020400 	.word	0x40020400

080043b0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7f1b      	ldrb	r3, [r3, #28]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d129      	bne.n	8004414 <HAL_TIM_IC_CaptureCallback+0x64>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d124      	bne.n	8004414 <HAL_TIM_IC_CaptureCallback+0x64>
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_TIM_IC_CaptureCallback+0x74>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_TIM_IC_CaptureCallback+0x78>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HAL_TIM_IC_CaptureCallback+0x74>)
 80043ea:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043f6:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 80043f8:	e00c      	b.n	8004414 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004400:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800440c:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40000400 	.word	0x40000400
 8004424:	2000c7a8 	.word	0x2000c7a8
 8004428:	40020400 	.word	0x40020400

0800442c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
  bool ret = true;
 8004432:	2301      	movs	r3, #1
 8004434:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e03d      	b.n	80044b8 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 800443c:	4923      	ldr	r1, [pc, #140]	; (80044cc <spiInit+0xa0>)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 800444e:	491f      	ldr	r1, [pc, #124]	; (80044cc <spiInit+0xa0>)
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3301      	adds	r3, #1
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8004462:	491a      	ldr	r1, [pc, #104]	; (80044cc <spiInit+0xa0>)
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	3302      	adds	r3, #2
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8004476:	4915      	ldr	r1, [pc, #84]	; (80044cc <spiInit+0xa0>)
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3304      	adds	r3, #4
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 800448a:	4910      	ldr	r1, [pc, #64]	; (80044cc <spiInit+0xa0>)
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3310      	adds	r3, #16
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 800449e:	490b      	ldr	r1, [pc, #44]	; (80044cc <spiInit+0xa0>)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	330c      	adds	r3, #12
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3301      	adds	r3, #1
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	ddbe      	ble.n	800443c <spiInit+0x10>
  }

  return ret;
 80044be:	78fb      	ldrb	r3, [r7, #3]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	2000c7e8 	.word	0x2000c7e8

080044d0 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 80044de:	79fa      	ldrb	r2, [r7, #7]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <spiBegin+0xa8>)
 80044ea:	4413      	add	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

  switch(ch)
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <spiBegin+0x28>
 80044f4:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 80044f6:	e03a      	b.n	800456e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a20      	ldr	r2, [pc, #128]	; (800457c <spiBegin+0xac>)
 80044fc:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <spiBegin+0xb0>)
 8004502:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <spiBegin+0xac>)
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <spiBegin+0xb4>)
 8004508:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <spiBegin+0xac>)
 800450c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004510:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <spiBegin+0xac>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <spiBegin+0xac>)
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <spiBegin+0xac>)
 8004520:	2200      	movs	r2, #0
 8004522:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004524:	4b15      	ldr	r3, [pc, #84]	; (800457c <spiBegin+0xac>)
 8004526:	2200      	movs	r2, #0
 8004528:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <spiBegin+0xac>)
 800452c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004530:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <spiBegin+0xac>)
 8004534:	2200      	movs	r2, #0
 8004536:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <spiBegin+0xac>)
 800453a:	2200      	movs	r2, #0
 800453c:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <spiBegin+0xac>)
 8004540:	2200      	movs	r2, #0
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <spiBegin+0xac>)
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <spiBegin+0xac>)
 800454c:	220a      	movs	r2, #10
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8004550:	480a      	ldr	r0, [pc, #40]	; (800457c <spiBegin+0xac>)
 8004552:	f006 fc4d 	bl	800adf0 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8004556:	4809      	ldr	r0, [pc, #36]	; (800457c <spiBegin+0xac>)
 8004558:	f006 fbe6 	bl	800ad28 <HAL_SPI_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <spiBegin+0x9c>
        p_spi->is_open = true;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
        ret = true;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	bf00      	nop
  }

  return ret;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000c7e8 	.word	0x2000c7e8
 800457c:	2000c7fc 	.word	0x2000c7fc
 8004580:	2000c854 	.word	0x2000c854
 8004584:	40013000 	.word	0x40013000

08004588 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	460a      	mov	r2, r1
 8004592:	71fb      	strb	r3, [r7, #7]
 8004594:	4613      	mov	r3, r2
 8004596:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8004598:	79fa      	ldrb	r2, [r7, #7]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <spiSetDataMode+0xc4>)
 80045a4:	4413      	add	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d146      	bne.n	8004644 <spiSetDataMode+0xbc>


  switch( dataMode )
 80045b6:	79bb      	ldrb	r3, [r7, #6]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d844      	bhi.n	8004646 <spiSetDataMode+0xbe>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <spiSetDataMode+0x3c>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	0800460d 	.word	0x0800460d
 80045d0:	08004629 	.word	0x08004629
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2200      	movs	r2, #0
 80045e2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f006 fb9d 	bl	800ad28 <HAL_SPI_Init>
      break;
 80045ee:	e02a      	b.n	8004646 <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2201      	movs	r2, #1
 80045fe:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f006 fb8f 	bl	800ad28 <HAL_SPI_Init>
      break;
 800460a:	e01c      	b.n	8004646 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2202      	movs	r2, #2
 8004612:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f006 fb81 	bl	800ad28 <HAL_SPI_Init>
      break;
 8004626:	e00e      	b.n	8004646 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2202      	movs	r2, #2
 800462e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2201      	movs	r2, #1
 8004636:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f006 fb73 	bl	800ad28 <HAL_SPI_Init>
      break;
 8004642:	e000      	b.n	8004646 <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8004644:	bf00      	nop
  }
}
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	2000c7e8 	.word	0x2000c7e8

08004650 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	460a      	mov	r2, r1
 800465a:	71fb      	strb	r3, [r7, #7]
 800465c:	4613      	mov	r3, r2
 800465e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8004660:	79fa      	ldrb	r2, [r7, #7]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4a10      	ldr	r2, [pc, #64]	; (80046ac <spiSetBitWidth+0x5c>)
 800466c:	4413      	add	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f083 0301 	eor.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d111      	bne.n	80046a2 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8004686:	79bb      	ldrb	r3, [r7, #6]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d104      	bne.n	8004696 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004694:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f006 fb44 	bl	800ad28 <HAL_SPI_Init>
 80046a0:	e000      	b.n	80046a4 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 80046a2:	bf00      	nop
}
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	2000c7e8 	.word	0x2000c7e8

080046b0 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	4603      	mov	r3, r0
 80046b8:	460a      	mov	r2, r1
 80046ba:	71fb      	strb	r3, [r7, #7]
 80046bc:	4613      	mov	r3, r2
 80046be:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80046c0:	79fa      	ldrb	r2, [r7, #7]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <spiTransfer8+0x50>)
 80046cc:	4413      	add	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <spiTransfer8+0x32>
 80046de:	2300      	movs	r3, #0
 80046e0:	e00a      	b.n	80046f8 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6898      	ldr	r0, [r3, #8]
 80046e6:	f107 020b 	add.w	r2, r7, #11
 80046ea:	1db9      	adds	r1, r7, #6
 80046ec:	230a      	movs	r3, #10
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2301      	movs	r3, #1
 80046f2:	f006 fba5 	bl	800ae40 <HAL_SPI_TransmitReceive>

  return ret;
 80046f6:	7afb      	ldrb	r3, [r7, #11]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000c7e8 	.word	0x2000c7e8

08004704 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <spiDmaTxStart+0x4c>)
 800471e:	4413      	add	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	b292      	uxth	r2, r2
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f006 fd1f 	bl	800b184 <HAL_SPI_Transmit_DMA>
 8004746:	e000      	b.n	800474a <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8004748:	bf00      	nop
}
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000c7e8 	.word	0x2000c7e8

08004754 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffc8 	bl	8004704 <spiDmaTxStart>

  t_time = millis();
 8004774:	f7fc fdd5 	bl	8001322 <millis>
 8004778:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <spiDmaTxTransfer+0x30>
 8004780:	2301      	movs	r3, #1
 8004782:	e013      	b.n	80047ac <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f814 	bl	80047b4 <spiDmaTxIsDone>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8004792:	f7fc fdc6 	bl	8001322 <millis>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d2f0      	bcs.n	8004784 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
      break;
 80047a6:	e000      	b.n	80047aa <spiDmaTxTransfer+0x56>
      break;
 80047a8:	bf00      	nop
    }
  }

  return ret;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80047be:	79fa      	ldrb	r2, [r7, #7]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <spiDmaTxIsDone+0x3c>)
 80047ca:	4413      	add	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f083 0301 	eor.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <spiDmaTxIsDone+0x2c>
 80047dc:	2301      	movs	r3, #1
 80047de:	e001      	b.n	80047e4 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	785b      	ldrb	r3, [r3, #1]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	2000c7e8 	.word	0x2000c7e8

080047f4 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8004800:	79fa      	ldrb	r2, [r7, #7]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <spiAttachTxInterrupt+0x40>)
 800480c:	4413      	add	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f083 0301 	eor.w	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	e000      	b.n	8004828 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8004826:	bf00      	nop
}
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000c7e8 	.word	0x2000c7e8

08004838 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_SPI_ErrorCallback+0x28>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d102      	bne.n	8004854 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <HAL_SPI_ErrorCallback+0x28>)
 8004850:	2201      	movs	r2, #1
 8004852:	709a      	strb	r2, [r3, #2]
  }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	2000c7e8 	.word	0x2000c7e8

08004864 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_SPI_TxCpltCallback+0x38>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d10b      	bne.n	8004892 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_SPI_TxCpltCallback+0x38>)
 800487c:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4798      	blx	r3
    }
  }
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	2000c7e8 	.word	0x2000c7e8

080048a0 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <HAL_SPI_MspInit+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d179      	bne.n	80049b6 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a3e      	ldr	r2, [pc, #248]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b3c      	ldr	r3, [pc, #240]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ec:	6453      	str	r3, [r2, #68]	; 0x44
 80048ee:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b2e      	ldr	r3, [pc, #184]	; (80049c4 <HAL_SPI_MspInit+0x124>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004916:	23a0      	movs	r3, #160	; 0xa0
 8004918:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004922:	2303      	movs	r3, #3
 8004924:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004926:	2305      	movs	r3, #5
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	4825      	ldr	r0, [pc, #148]	; (80049c8 <HAL_SPI_MspInit+0x128>)
 8004932:	f004 f809 	bl	8008948 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8004936:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004938:	4a25      	ldr	r2, [pc, #148]	; (80049d0 <HAL_SPI_MspInit+0x130>)
 800493a:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800493e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004942:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004950:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004956:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800495a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800495e:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004966:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004976:	2200      	movs	r2, #0
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800497a:	4814      	ldr	r0, [pc, #80]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800497c:	f003 fbe8 	bl	8008150 <HAL_DMA_Init>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8004986:	f7fc fd3b 	bl	8001400 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a0f      	ldr	r2, [pc, #60]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 800498e:	649a      	str	r2, [r3, #72]	; 0x48
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <HAL_SPI_MspInit+0x12c>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004996:	2200      	movs	r2, #0
 8004998:	2100      	movs	r1, #0
 800499a:	2023      	movs	r0, #35	; 0x23
 800499c:	f003 fb93 	bl	80080c6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80049a0:	2023      	movs	r0, #35	; 0x23
 80049a2:	f003 fbac 	bl	80080fe <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80049a6:	2200      	movs	r2, #0
 80049a8:	2105      	movs	r1, #5
 80049aa:	2044      	movs	r0, #68	; 0x44
 80049ac:	f003 fb8b 	bl	80080c6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80049b0:	2044      	movs	r0, #68	; 0x44
 80049b2:	f003 fba4 	bl	80080fe <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40013000 	.word	0x40013000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	2000c854 	.word	0x2000c854
 80049d0:	40026488 	.word	0x40026488

080049d4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_SPI_MspDeInit+0x40>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d111      	bne.n	8004a0a <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_SPI_MspDeInit+0x44>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <HAL_SPI_MspDeInit+0x44>)
 80049ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f0:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80049f2:	21a0      	movs	r1, #160	; 0xa0
 80049f4:	4809      	ldr	r0, [pc, #36]	; (8004a1c <HAL_SPI_MspDeInit+0x48>)
 80049f6:	f004 f92b 	bl	8008c50 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fe:	4618      	mov	r0, r3
 8004a00:	f003 fc54 	bl	80082ac <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8004a04:	2023      	movs	r0, #35	; 0x23
 8004a06:	f003 fb88 	bl	800811a <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40013000 	.word	0x40013000
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40020000 	.word	0x40020000

08004a20 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
	bool ret = true;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <tdsInit+0xd0>)
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8004a30:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <tdsInit+0xd0>)
 8004a32:	4a30      	ldr	r2, [pc, #192]	; (8004af4 <tdsInit+0xd4>)
 8004a34:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8004a36:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <tdsInit+0xd0>)
 8004a38:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004a3c:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	; (8004af0 <tdsInit+0xd0>)
 8004a40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a44:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <tdsInit+0xd8>)
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <tdsInit+0xdc>)
 8004a56:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a58:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <tdsInit+0xd8>)
 8004a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a5e:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <tdsInit+0xd8>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <tdsInit+0xd8>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a6c:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <tdsInit+0xd8>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004a72:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <tdsInit+0xd8>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <tdsInit+0xd8>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <tdsInit+0xd8>)
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <tdsInit+0xe0>)
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <tdsInit+0xd8>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <tdsInit+0xd8>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <tdsInit+0xd8>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a9a:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <tdsInit+0xd8>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004aa0:	4815      	ldr	r0, [pc, #84]	; (8004af8 <tdsInit+0xd8>)
 8004aa2:	f002 fcd7 	bl	8007454 <HAL_ADC_Init>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <tdsInit+0x90>
	  {
	    Error_Handler();
 8004aac:	f7fc fca8 	bl	8001400 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004ab8:	2307      	movs	r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004abc:	1d3b      	adds	r3, r7, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	480d      	ldr	r0, [pc, #52]	; (8004af8 <tdsInit+0xd8>)
 8004ac2:	f002 ff47 	bl	8007954 <HAL_ADC_ConfigChannel>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <tdsInit+0xb0>
	  {
	    Error_Handler();
 8004acc:	f7fc fc98 	bl	8001400 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	490c      	ldr	r1, [pc, #48]	; (8004b04 <tdsInit+0xe4>)
 8004ad4:	4808      	ldr	r0, [pc, #32]	; (8004af8 <tdsInit+0xd8>)
 8004ad6:	f002 fe41 	bl	800775c <HAL_ADC_Start_DMA>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <tdsInit+0xc4>
	{
		Error_Handler();
 8004ae0:	f7fc fc8e 	bl	8001400 <Error_Handler>
	}

	return ret;
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]

}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	2000c95c 	.word	0x2000c95c
 8004af4:	41c80000 	.word	0x41c80000
 8004af8:	2000c8b4 	.word	0x2000c8b4
 8004afc:	40012000 	.word	0x40012000
 8004b00:	0f000001 	.word	0x0f000001
 8004b04:	2000c96c 	.word	0x2000c96c

08004b08 <tds_measure>:
bool tds_measure(void)
{
 8004b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
	bool ret = true;
 8004b10:	2301      	movs	r3, #1
 8004b12:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8004b14:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <tds_measure+0x248>)
 8004b16:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fb fd15 	bl	8000578 <__aeabi_f2d>
 8004b4e:	a378      	add	r3, pc, #480	; (adr r3, 8004d30 <tds_measure+0x228>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fd68 	bl	8000628 <__aeabi_dmul>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	461d      	mov	r5, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fb fd07 	bl	8000578 <__aeabi_f2d>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fd59 	bl	8000628 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fb fcf8 	bl	8000578 <__aeabi_f2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb fd4a 	bl	8000628 <__aeabi_dmul>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fb fce9 	bl	8000578 <__aeabi_f2d>
 8004ba6:	a364      	add	r3, pc, #400	; (adr r3, 8004d38 <tds_measure+0x230>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	f7fb fd3c 	bl	8000628 <__aeabi_dmul>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4690      	mov	r8, r2
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fb fcdb 	bl	8000578 <__aeabi_f2d>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	4649      	mov	r1, r9
 8004bca:	f7fb fd2d 	bl	8000628 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fb6f 	bl	80002b8 <__aeabi_dsub>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4614      	mov	r4, r2
 8004be0:	461d      	mov	r5, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fcc6 	bl	8000578 <__aeabi_f2d>
 8004bec:	a354      	add	r3, pc, #336	; (adr r3, 8004d40 <tds_measure+0x238>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fd19 	bl	8000628 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fb5d 	bl	80002bc <__adddf3>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4614      	mov	r4, r2
 8004c08:	461d      	mov	r5, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fb fcb2 	bl	8000578 <__aeabi_f2d>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f7fb fd04 	bl	8000628 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4610      	mov	r0, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	f7fb fff6 	bl	8000c18 <__aeabi_d2f>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fb fc9e 	bl	8000578 <__aeabi_f2d>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	460d      	mov	r5, r1
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fc97 	bl	8000578 <__aeabi_f2d>
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <tds_measure+0x24c>)
 8004c50:	f7fb fb32 	bl	80002b8 <__aeabi_dsub>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	a33a      	add	r3, pc, #232	; (adr r3, 8004d48 <tds_measure+0x240>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fce1 	bl	8000628 <__aeabi_dmul>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <tds_measure+0x250>)
 8004c74:	f7fb fb22 	bl	80002bc <__adddf3>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fdfc 	bl	800087c <__aeabi_ddiv>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f7fb ffc4 	bl	8000c18 <__aeabi_d2f>
 8004c90:	4602      	mov	r2, r0
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8004caa:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <tds_measure+0x254>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b0b      	cmp	r3, #11
 8004cb8:	d101      	bne.n	8004cbe <tds_measure+0x1b6>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <tds_measure+0x254>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ccc:	ee17 2a90 	vmov	r2, s15
 8004cd0:	b211      	sxth	r1, r2
 8004cd2:	4a23      	ldr	r2, [pc, #140]	; (8004d60 <tds_measure+0x258>)
 8004cd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8004cd8:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <tds_measure+0x254>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <tds_measure+0x258>)
 8004cde:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <tds_measure+0x25c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4413      	add	r3, r2
 8004cea:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <tds_measure+0x25c>)
 8004cec:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <tds_measure+0x25c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	79fa      	ldrb	r2, [r7, #7]
 8004cf4:	491a      	ldr	r1, [pc, #104]	; (8004d60 <tds_measure+0x258>)
 8004cf6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <tds_measure+0x25c>)
 8004cfe:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8004d00:	79fb      	ldrb	r3, [r7, #7]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <tds_measure+0x254>)
 8004d04:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <tds_measure+0x25c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <tds_measure+0x260>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	08db      	lsrs	r3, r3, #3
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8004d20:	79bb      	ldrb	r3, [r7, #6]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d2c:	f3af 8000 	nop.w
 8004d30:	a3d70a3d 	.word	0xa3d70a3d
 8004d34:	4060ad70 	.word	0x4060ad70
 8004d38:	1eb851ec 	.word	0x1eb851ec
 8004d3c:	406ffb85 	.word	0x406ffb85
 8004d40:	b851eb85 	.word	0xb851eb85
 8004d44:	408acb1e 	.word	0x408acb1e
 8004d48:	47ae147b 	.word	0x47ae147b
 8004d4c:	3f947ae1 	.word	0x3f947ae1
 8004d50:	2000c95c 	.word	0x2000c95c
 8004d54:	40390000 	.word	0x40390000
 8004d58:	3ff00000 	.word	0x3ff00000
 8004d5c:	2000c984 	.word	0x2000c984
 8004d60:	2000c988 	.word	0x2000c988
 8004d64:	2000c9a0 	.word	0x2000c9a0
 8004d68:	cccccccd 	.word	0xcccccccd

08004d6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a3e      	ldr	r2, [pc, #248]	; (8004e84 <HAL_ADC_MspInit+0x118>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d175      	bne.n	8004e7a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	4b3d      	ldr	r3, [pc, #244]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	4a3c      	ldr	r2, [pc, #240]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9e:	4b3a      	ldr	r3, [pc, #232]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	4a35      	ldr	r2, [pc, #212]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dba:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a2e      	ldr	r2, [pc, #184]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_ADC_MspInit+0x11c>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004de2:	2302      	movs	r3, #2
 8004de4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004de6:	2303      	movs	r3, #3
 8004de8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4619      	mov	r1, r3
 8004df4:	4825      	ldr	r0, [pc, #148]	; (8004e8c <HAL_ADC_MspInit+0x120>)
 8004df6:	f003 fda7 	bl	8008948 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8004dfa:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <HAL_ADC_MspInit+0x128>)
 8004dfe:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e00:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e0c:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e12:	4b1f      	ldr	r3, [pc, #124]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e18:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e20:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e22:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e28:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e2a:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e30:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e32:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e3e:	4814      	ldr	r0, [pc, #80]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e40:	f003 f986 	bl	8008150 <HAL_DMA_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8004e4a:	f7fc fad9 	bl	8001400 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38
 8004e54:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_ADC_MspInit+0x124>)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2106      	movs	r1, #6
 8004e5e:	2012      	movs	r0, #18
 8004e60:	f003 f931 	bl	80080c6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004e64:	2012      	movs	r0, #18
 8004e66:	f003 f94a 	bl	80080fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2106      	movs	r1, #6
 8004e6e:	2038      	movs	r0, #56	; 0x38
 8004e70:	f003 f929 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004e74:	2038      	movs	r0, #56	; 0x38
 8004e76:	f003 f942 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40012000 	.word	0x40012000
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40020000 	.word	0x40020000
 8004e90:	2000c8fc 	.word	0x2000c8fc
 8004e94:	40026410 	.word	0x40026410

08004e98 <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
//static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <serialize8+0x34>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	79fa      	ldrb	r2, [r7, #7]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa80 	bl	80053b0 <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <serialize8+0x38>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	7819      	ldrb	r1, [r3, #0]
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <serialize8+0x38>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	79fa      	ldrb	r2, [r7, #7]
 8004ebc:	404a      	eors	r2, r1
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	2000cb2e 	.word	0x2000cb2e
 8004ed0:	20000098 	.word	0x20000098

08004ed4 <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	460a      	mov	r2, r1
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 8004ee4:	2024      	movs	r0, #36	; 0x24
 8004ee6:	f7ff ffd7 	bl	8004e98 <serialize8>
	serialize8('M');
 8004eea:	204d      	movs	r0, #77	; 0x4d
 8004eec:	f7ff ffd4 	bl	8004e98 <serialize8>
	serialize8(err ? '!' : '>');
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <headSerialResponse+0x26>
 8004ef6:	2321      	movs	r3, #33	; 0x21
 8004ef8:	e000      	b.n	8004efc <headSerialResponse+0x28>
 8004efa:	233e      	movs	r3, #62	; 0x3e
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ffcb 	bl	8004e98 <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <headSerialResponse+0x54>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 8004f0a:	79bb      	ldrb	r3, [r7, #6]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ffc3 	bl	8004e98 <serialize8>
	serialize8(currentPortState->cmdMSP);
 8004f12:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <headSerialResponse+0x54>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ffbc 	bl	8004e98 <serialize8>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000098 	.word	0x20000098

08004f2c <headSerialReply>:

void headSerialReply(uint8_t s)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7ff ffca 	bl	8004ed4 <headSerialResponse>
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <tailSerialReply+0x24>)
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <tailSerialReply+0x28>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 fa29 	bl	80053b0 <SerialSerialize>
	UartSendData(CURRENTPORT);
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <tailSerialReply+0x24>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa4e 	bl	8005404 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	2000cb2e 	.word	0x2000cb2e
 8004f70:	20000098 	.word	0x20000098

08004f74 <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 8004f80:	e006      	b.n	8004f90 <s_struct_partial+0x1c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ff84 	bl	8004e98 <serialize8>
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	1e5a      	subs	r2, r3, #1
 8004f94:	70fa      	strb	r2, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f3      	bne.n	8004f82 <s_struct_partial+0xe>
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ffba 	bl	8004f2c <headSerialReply>
	s_struct_partial(cb,siz);
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffd9 	bl	8004f74 <s_struct_partial>
	tailSerialReply();
 8004fc2:	f7ff ffc1 	bl	8004f48 <tailSerialReply>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
	uint8_t c;

	currentPortState = &ports[_DEF_UART1];
 8004fd6:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <SerialCom+0x1c4>)
 8004fd8:	4a6f      	ldr	r2, [pc, #444]	; (8005198 <SerialCom+0x1c8>)
 8004fda:	601a      	str	r2, [r3, #0]
	CURRENTPORT = _DEF_UART1;
 8004fdc:	4b6f      	ldr	r3, [pc, #444]	; (800519c <SerialCom+0x1cc>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
	while(uartAvailable(CURRENTPORT) > 0)
 8004fe2:	e0c8      	b.n	8005176 <SerialCom+0x1a6>
	{
		c = uartRead(CURRENTPORT);
 8004fe4:	4b6d      	ldr	r3, [pc, #436]	; (800519c <SerialCom+0x1cc>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fbff 	bl	80057ec <uartRead>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
		if (currentPortState->c_state == IDLE)
 8004ff2:	4b68      	ldr	r3, [pc, #416]	; (8005194 <SerialCom+0x1c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <SerialCom+0x44>
		{
			currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b24      	cmp	r3, #36	; 0x24
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2da      	uxtb	r2, r3
 800500a:	4b62      	ldr	r3, [pc, #392]	; (8005194 <SerialCom+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8005012:	e0b0      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_START)
 8005014:	4b5f      	ldr	r3, [pc, #380]	; (8005194 <SerialCom+0x1c4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10a      	bne.n	8005036 <SerialCom+0x66>
		{
			currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	2b4d      	cmp	r3, #77	; 0x4d
 8005024:	d101      	bne.n	800502a <SerialCom+0x5a>
 8005026:	2202      	movs	r2, #2
 8005028:	e000      	b.n	800502c <SerialCom+0x5c>
 800502a:	2200      	movs	r2, #0
 800502c:	4b59      	ldr	r3, [pc, #356]	; (8005194 <SerialCom+0x1c4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8005034:	e09f      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_M)
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <SerialCom+0x1c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800503e:	2b02      	cmp	r3, #2
 8005040:	d10a      	bne.n	8005058 <SerialCom+0x88>
		{
			currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b3c      	cmp	r3, #60	; 0x3c
 8005046:	d101      	bne.n	800504c <SerialCom+0x7c>
 8005048:	2203      	movs	r2, #3
 800504a:	e000      	b.n	800504e <SerialCom+0x7e>
 800504c:	2200      	movs	r2, #0
 800504e:	4b51      	ldr	r3, [pc, #324]	; (8005194 <SerialCom+0x1c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8005056:	e08e      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_ARROW)
 8005058:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <SerialCom+0x1c4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8005060:	2b03      	cmp	r3, #3
 8005062:	d129      	bne.n	80050b8 <SerialCom+0xe8>
		{
			if (c > INBUF_SIZE)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d905      	bls.n	8005076 <SerialCom+0xa6>
			{  // now we are expecting the payload size
				currentPortState->c_state = IDLE;
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <SerialCom+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				continue;
 8005074:	e07f      	b.n	8005176 <SerialCom+0x1a6>
			}
			currentPortState->dataSize = c;
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <SerialCom+0x1c4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	79fa      	ldrb	r2, [r7, #7]
 800507c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			currentPortState->offset = 0;
 8005080:	4b44      	ldr	r3, [pc, #272]	; (8005194 <SerialCom+0x1c4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			currentPortState->indRX = 0;
 800508a:	4b42      	ldr	r3, [pc, #264]	; (8005194 <SerialCom+0x1c4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	705a      	strb	r2, [r3, #1]
			currentPortState->checksum = 0;
 8005092:	4b40      	ldr	r3, [pc, #256]	; (8005194 <SerialCom+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
			currentPortState->checksum ^= c;
 800509a:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <SerialCom+0x1c4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	7819      	ldrb	r1, [r3, #0]
 80050a0:	4b3c      	ldr	r3, [pc, #240]	; (8005194 <SerialCom+0x1c4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	79fa      	ldrb	r2, [r7, #7]
 80050a6:	404a      	eors	r2, r1
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_SIZE;
 80050ac:	4b39      	ldr	r3, [pc, #228]	; (8005194 <SerialCom+0x1c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2204      	movs	r2, #4
 80050b2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80050b6:	e05e      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_SIZE)
 80050b8:	4b36      	ldr	r3, [pc, #216]	; (8005194 <SerialCom+0x1c4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d113      	bne.n	80050ec <SerialCom+0x11c>
		{
			currentPortState->cmdMSP = c;
 80050c4:	4b33      	ldr	r3, [pc, #204]	; (8005194 <SerialCom+0x1c4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	79fa      	ldrb	r2, [r7, #7]
 80050ca:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			currentPortState->checksum ^= c;
 80050ce:	4b31      	ldr	r3, [pc, #196]	; (8005194 <SerialCom+0x1c4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	7819      	ldrb	r1, [r3, #0]
 80050d4:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <SerialCom+0x1c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	404a      	eors	r2, r1
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_CMD;
 80050e0:	4b2c      	ldr	r3, [pc, #176]	; (8005194 <SerialCom+0x1c4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2205      	movs	r2, #5
 80050e6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80050ea:	e044      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <SerialCom+0x1c4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d121      	bne.n	800513c <SerialCom+0x16c>
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <SerialCom+0x1c4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8005100:	4b24      	ldr	r3, [pc, #144]	; (8005194 <SerialCom+0x1c4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005108:	429a      	cmp	r2, r3
 800510a:	d217      	bcs.n	800513c <SerialCom+0x16c>
		{
			currentPortState->checksum ^= c;
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <SerialCom+0x1c4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	7819      	ldrb	r1, [r3, #0]
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <SerialCom+0x1c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	79fa      	ldrb	r2, [r7, #7]
 8005118:	404a      	eors	r2, r1
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
			currentPortState->inBuf[currentPortState->offset++] = c;
 800511e:	4b1d      	ldr	r3, [pc, #116]	; (8005194 <SerialCom+0x1c4>)
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <SerialCom+0x1c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 800512a:	1c50      	adds	r0, r2, #1
 800512c:	b2c0      	uxtb	r0, r0
 800512e:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8005132:	4613      	mov	r3, r2
 8005134:	440b      	add	r3, r1
 8005136:	79fa      	ldrb	r2, [r7, #7]
 8005138:	709a      	strb	r2, [r3, #2]
 800513a:	e01c      	b.n	8005176 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <SerialCom+0x1c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8005144:	2b05      	cmp	r3, #5
 8005146:	d116      	bne.n	8005176 <SerialCom+0x1a6>
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <SerialCom+0x1c4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <SerialCom+0x1c4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005158:	429a      	cmp	r2, r3
 800515a:	d30c      	bcc.n	8005176 <SerialCom+0x1a6>
		{
			if (currentPortState->checksum == c)
 800515c:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <SerialCom+0x1c4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	79fa      	ldrb	r2, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d101      	bne.n	800516c <SerialCom+0x19c>
			{
				evaluateCommand();
 8005168:	f000 f81a 	bl	80051a0 <evaluateCommand>
			}
			currentPortState->c_state = IDLE;
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <SerialCom+0x1c4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	while(uartAvailable(CURRENTPORT) > 0)
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <SerialCom+0x1cc>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 faf0 	bl	8005760 <uartAvailable>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f47f af2e 	bne.w	8004fe4 <SerialCom+0x14>
		}
	}
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000098 	.word	0x20000098
 8005198:	2000cb30 	.word	0x2000cb30
 800519c:	2000cb2e 	.word	0x2000cb2e

080051a0 <evaluateCommand>:

void evaluateCommand(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	71fb      	strb	r3, [r7, #7]

	switch(currentPortState->cmdMSP)
 80051aa:	4b80      	ldr	r3, [pc, #512]	; (80053ac <evaluateCommand+0x20c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80051b2:	3b65      	subs	r3, #101	; 0x65
 80051b4:	2b71      	cmp	r3, #113	; 0x71
 80051b6:	f200 80f1 	bhi.w	800539c <evaluateCommand+0x1fc>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <evaluateCommand+0x20>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	0800539d 	.word	0x0800539d
 80051c4:	0800539d 	.word	0x0800539d
 80051c8:	0800539d 	.word	0x0800539d
 80051cc:	0800539d 	.word	0x0800539d
 80051d0:	0800539d 	.word	0x0800539d
 80051d4:	0800539d 	.word	0x0800539d
 80051d8:	0800539d 	.word	0x0800539d
 80051dc:	0800539d 	.word	0x0800539d
 80051e0:	0800539d 	.word	0x0800539d
 80051e4:	0800539d 	.word	0x0800539d
 80051e8:	0800539d 	.word	0x0800539d
 80051ec:	0800539d 	.word	0x0800539d
 80051f0:	0800539d 	.word	0x0800539d
 80051f4:	0800539d 	.word	0x0800539d
 80051f8:	0800539d 	.word	0x0800539d
 80051fc:	0800539d 	.word	0x0800539d
 8005200:	0800539d 	.word	0x0800539d
 8005204:	0800539d 	.word	0x0800539d
 8005208:	0800539d 	.word	0x0800539d
 800520c:	0800539d 	.word	0x0800539d
 8005210:	0800539d 	.word	0x0800539d
 8005214:	0800539d 	.word	0x0800539d
 8005218:	0800539d 	.word	0x0800539d
 800521c:	0800539d 	.word	0x0800539d
 8005220:	0800539d 	.word	0x0800539d
 8005224:	0800539d 	.word	0x0800539d
 8005228:	0800539d 	.word	0x0800539d
 800522c:	0800539d 	.word	0x0800539d
 8005230:	0800539d 	.word	0x0800539d
 8005234:	0800539d 	.word	0x0800539d
 8005238:	0800539d 	.word	0x0800539d
 800523c:	0800539d 	.word	0x0800539d
 8005240:	0800539d 	.word	0x0800539d
 8005244:	0800539d 	.word	0x0800539d
 8005248:	0800539d 	.word	0x0800539d
 800524c:	0800539d 	.word	0x0800539d
 8005250:	0800539d 	.word	0x0800539d
 8005254:	0800539d 	.word	0x0800539d
 8005258:	0800539d 	.word	0x0800539d
 800525c:	0800539d 	.word	0x0800539d
 8005260:	0800539d 	.word	0x0800539d
 8005264:	0800539d 	.word	0x0800539d
 8005268:	0800539d 	.word	0x0800539d
 800526c:	0800539d 	.word	0x0800539d
 8005270:	0800539d 	.word	0x0800539d
 8005274:	0800539d 	.word	0x0800539d
 8005278:	0800539d 	.word	0x0800539d
 800527c:	0800539d 	.word	0x0800539d
 8005280:	0800539d 	.word	0x0800539d
 8005284:	08005389 	.word	0x08005389
 8005288:	0800539d 	.word	0x0800539d
 800528c:	0800539d 	.word	0x0800539d
 8005290:	0800539d 	.word	0x0800539d
 8005294:	0800539d 	.word	0x0800539d
 8005298:	0800539d 	.word	0x0800539d
 800529c:	0800539d 	.word	0x0800539d
 80052a0:	0800539d 	.word	0x0800539d
 80052a4:	0800539d 	.word	0x0800539d
 80052a8:	0800539d 	.word	0x0800539d
 80052ac:	0800539d 	.word	0x0800539d
 80052b0:	0800539d 	.word	0x0800539d
 80052b4:	0800539d 	.word	0x0800539d
 80052b8:	0800539d 	.word	0x0800539d
 80052bc:	0800539d 	.word	0x0800539d
 80052c0:	0800539d 	.word	0x0800539d
 80052c4:	0800539d 	.word	0x0800539d
 80052c8:	0800539d 	.word	0x0800539d
 80052cc:	0800539d 	.word	0x0800539d
 80052d0:	0800539d 	.word	0x0800539d
 80052d4:	0800539d 	.word	0x0800539d
 80052d8:	0800539d 	.word	0x0800539d
 80052dc:	0800539d 	.word	0x0800539d
 80052e0:	0800539d 	.word	0x0800539d
 80052e4:	0800539d 	.word	0x0800539d
 80052e8:	0800539d 	.word	0x0800539d
 80052ec:	0800539d 	.word	0x0800539d
 80052f0:	0800539d 	.word	0x0800539d
 80052f4:	0800539d 	.word	0x0800539d
 80052f8:	0800539d 	.word	0x0800539d
 80052fc:	0800539d 	.word	0x0800539d
 8005300:	0800539d 	.word	0x0800539d
 8005304:	0800539d 	.word	0x0800539d
 8005308:	0800539d 	.word	0x0800539d
 800530c:	0800539d 	.word	0x0800539d
 8005310:	0800539d 	.word	0x0800539d
 8005314:	0800539d 	.word	0x0800539d
 8005318:	0800539d 	.word	0x0800539d
 800531c:	0800539d 	.word	0x0800539d
 8005320:	0800539d 	.word	0x0800539d
 8005324:	0800539d 	.word	0x0800539d
 8005328:	0800539d 	.word	0x0800539d
 800532c:	0800539d 	.word	0x0800539d
 8005330:	0800539d 	.word	0x0800539d
 8005334:	0800539d 	.word	0x0800539d
 8005338:	0800539d 	.word	0x0800539d
 800533c:	0800539d 	.word	0x0800539d
 8005340:	0800539d 	.word	0x0800539d
 8005344:	0800539d 	.word	0x0800539d
 8005348:	0800539d 	.word	0x0800539d
 800534c:	0800539d 	.word	0x0800539d
 8005350:	0800539d 	.word	0x0800539d
 8005354:	0800539d 	.word	0x0800539d
 8005358:	0800539d 	.word	0x0800539d
 800535c:	0800539d 	.word	0x0800539d
 8005360:	0800539d 	.word	0x0800539d
 8005364:	0800539d 	.word	0x0800539d
 8005368:	0800539d 	.word	0x0800539d
 800536c:	0800539d 	.word	0x0800539d
 8005370:	0800539d 	.word	0x0800539d
 8005374:	0800539d 	.word	0x0800539d
 8005378:	0800539d 	.word	0x0800539d
 800537c:	0800539d 	.word	0x0800539d
 8005380:	0800539d 	.word	0x0800539d
 8005384:	0800539d 	.word	0x0800539d
		case MSP_DISARM:
			//mwDisarm();
			break;

		case MSP_RC_RAW:
			for(i=0; i < 5; i++)
 8005388:	2300      	movs	r3, #0
 800538a:	71fb      	strb	r3, [r7, #7]
 800538c:	e002      	b.n	8005394 <evaluateCommand+0x1f4>
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	3301      	adds	r3, #1
 8005392:	71fb      	strb	r3, [r7, #7]
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d9f9      	bls.n	800538e <evaluateCommand+0x1ee>
			{
				//RC_Raw.rcCommand[i]  = read8();
			}
			break;
 800539a:	e000      	b.n	800539e <evaluateCommand+0x1fe>
			break;

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 800539c:	bf00      	nop
	}

}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000098 	.word	0x20000098

080053b0 <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	460a      	mov	r2, r1
 80053ba:	71fb      	strb	r3, [r7, #7]
 80053bc:	4613      	mov	r3, r2
 80053be:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <SerialSerialize+0x4c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	3301      	adds	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	da01      	bge.n	80053da <SerialSerialize+0x2a>
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 80053da:	7bfa      	ldrb	r2, [r7, #15]
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	4908      	ldr	r1, [pc, #32]	; (8005400 <SerialSerialize+0x50>)
 80053e0:	440a      	add	r2, r1
 80053e2:	4413      	add	r3, r2
 80053e4:	79ba      	ldrb	r2, [r7, #6]
 80053e6:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	4904      	ldr	r1, [pc, #16]	; (80053fc <SerialSerialize+0x4c>)
 80053ec:	7bfa      	ldrb	r2, [r7, #15]
 80053ee:	54ca      	strb	r2, [r1, r3]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	2000c9a4 	.word	0x2000c9a4
 8005400:	2000c9ac 	.word	0x2000c9ac

08005404 <UartSendData>:

void UartSendData(uint8_t port)
{
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	4a36      	ldr	r2, [pc, #216]	; (80054ec <UartSendData+0xe8>)
 8005412:	5cd3      	ldrb	r3, [r2, r3]
 8005414:	73fb      	strb	r3, [r7, #15]
	switch(port){
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01b      	beq.n	8005454 <UartSendData+0x50>
 800541c:	2b01      	cmp	r3, #1
 800541e:	d049      	beq.n	80054b4 <UartSendData+0xb0>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 8005420:	e05f      	b.n	80054e2 <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	3301      	adds	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da01      	bge.n	8005434 <UartSendData+0x30>
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 8005434:	7bf9      	ldrb	r1, [r7, #15]
 8005436:	79fa      	ldrb	r2, [r7, #7]
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <UartSendData+0xec>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	1c58      	adds	r0, r3, #1
 8005440:	b2c4      	uxtb	r4, r0
 8005442:	482b      	ldr	r0, [pc, #172]	; (80054f0 <UartSendData+0xec>)
 8005444:	7004      	strb	r4, [r0, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <UartSendData+0xf0>)
 800544a:	440b      	add	r3, r1
 800544c:	4413      	add	r3, r2
 800544e:	781a      	ldrb	r2, [r3, #0]
 8005450:	4b29      	ldr	r3, [pc, #164]	; (80054f8 <UartSendData+0xf4>)
 8005452:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	4a29      	ldr	r2, [pc, #164]	; (80054fc <UartSendData+0xf8>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	7bfa      	ldrb	r2, [r7, #15]
 800545e:	429a      	cmp	r2, r3
 8005460:	d1df      	bne.n	8005422 <UartSendData+0x1e>
			serialTailTX[port] = t;
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	4921      	ldr	r1, [pc, #132]	; (80054ec <UartSendData+0xe8>)
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <UartSendData+0xec>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	4921      	ldr	r1, [pc, #132]	; (80054f8 <UartSendData+0xf4>)
 8005474:	2000      	movs	r0, #0
 8005476:	f000 f9df 	bl	8005838 <uartWriteIT>
			serialHead_0 = 0;
 800547a:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <UartSendData+0xec>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
			break;
 8005480:	e02f      	b.n	80054e2 <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	3301      	adds	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548c:	2b00      	cmp	r3, #0
 800548e:	da01      	bge.n	8005494 <UartSendData+0x90>
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 8005494:	7bf9      	ldrb	r1, [r7, #15]
 8005496:	79fa      	ldrb	r2, [r7, #7]
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <UartSendData+0xfc>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	1c58      	adds	r0, r3, #1
 80054a0:	b2c4      	uxtb	r4, r0
 80054a2:	4817      	ldr	r0, [pc, #92]	; (8005500 <UartSendData+0xfc>)
 80054a4:	7004      	strb	r4, [r0, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <UartSendData+0xf0>)
 80054aa:	440b      	add	r3, r1
 80054ac:	4413      	add	r3, r2
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	4b14      	ldr	r3, [pc, #80]	; (8005504 <UartSendData+0x100>)
 80054b2:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	4a11      	ldr	r2, [pc, #68]	; (80054fc <UartSendData+0xf8>)
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	7bfa      	ldrb	r2, [r7, #15]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1df      	bne.n	8005482 <UartSendData+0x7e>
			serialTailTX[port] = t;
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	4909      	ldr	r1, [pc, #36]	; (80054ec <UartSendData+0xe8>)
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <UartSendData+0xfc>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	490c      	ldr	r1, [pc, #48]	; (8005504 <UartSendData+0x100>)
 80054d4:	2001      	movs	r0, #1
 80054d6:	f000 f9af 	bl	8005838 <uartWriteIT>
			serialHead_1 = 0;
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <UartSendData+0xfc>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
			break;
 80054e0:	bf00      	nop
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000c9a8 	.word	0x2000c9a8
 80054f0:	2000cb2c 	.word	0x2000cb2c
 80054f4:	2000c9ac 	.word	0x2000c9ac
 80054f8:	2000ca2c 	.word	0x2000ca2c
 80054fc:	2000c9a4 	.word	0x2000c9a4
 8005500:	2000cb2d 	.word	0x2000cb2d
 8005504:	2000caac 	.word	0x2000caac

08005508 <uartInit>:
#endif



bool uartInit(void)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	e007      	b.n	8005524 <uartInit+0x1c>
  {
    is_open[i] = false;
 8005514:	4a08      	ldr	r2, [pc, #32]	; (8005538 <uartInit+0x30>)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3301      	adds	r3, #1
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	ddf4      	ble.n	8005514 <uartInit+0xc>
  }


  return true;
 800552a:	2301      	movs	r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	2000cc3c 	.word	0x2000cc3c

0800553c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	6039      	str	r1, [r7, #0]
 8005546:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <uartOpen+0x1c>
 8005552:	2b01      	cmp	r3, #1
 8005554:	d078      	beq.n	8005648 <uartOpen+0x10c>
 8005556:	e0ef      	b.n	8005738 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8005558:	4b7a      	ldr	r3, [pc, #488]	; (8005744 <uartOpen+0x208>)
 800555a:	4a7b      	ldr	r2, [pc, #492]	; (8005748 <uartOpen+0x20c>)
 800555c:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800555e:	4a79      	ldr	r2, [pc, #484]	; (8005744 <uartOpen+0x208>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8005564:	4b77      	ldr	r3, [pc, #476]	; (8005744 <uartOpen+0x208>)
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 800556a:	4b76      	ldr	r3, [pc, #472]	; (8005744 <uartOpen+0x208>)
 800556c:	2200      	movs	r2, #0
 800556e:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8005570:	4b74      	ldr	r3, [pc, #464]	; (8005744 <uartOpen+0x208>)
 8005572:	2200      	movs	r2, #0
 8005574:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8005576:	4b73      	ldr	r3, [pc, #460]	; (8005744 <uartOpen+0x208>)
 8005578:	220c      	movs	r2, #12
 800557a:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 800557c:	4b71      	ldr	r3, [pc, #452]	; (8005744 <uartOpen+0x208>)
 800557e:	2200      	movs	r2, #0
 8005580:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8005582:	4b70      	ldr	r3, [pc, #448]	; (8005744 <uartOpen+0x208>)
 8005584:	2200      	movs	r2, #0
 8005586:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8005588:	486e      	ldr	r0, [pc, #440]	; (8005744 <uartOpen+0x208>)
 800558a:	f006 ff7a 	bl	800c482 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	4a6e      	ldr	r2, [pc, #440]	; (800574c <uartOpen+0x210>)
 8005594:	4413      	add	r3, r2
 8005596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559a:	496d      	ldr	r1, [pc, #436]	; (8005750 <uartOpen+0x214>)
 800559c:	4618      	mov	r0, r3
 800559e:	f7fc f8fa 	bl	8001796 <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	4b6b      	ldr	r3, [pc, #428]	; (8005754 <uartOpen+0x218>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	4a6a      	ldr	r2, [pc, #424]	; (8005754 <uartOpen+0x218>)
 80055ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055b0:	6313      	str	r3, [r2, #48]	; 0x30
 80055b2:	4b68      	ldr	r3, [pc, #416]	; (8005754 <uartOpen+0x218>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80055be:	2200      	movs	r2, #0
 80055c0:	2104      	movs	r1, #4
 80055c2:	203a      	movs	r0, #58	; 0x3a
 80055c4:	f002 fd7f 	bl	80080c6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80055c8:	203a      	movs	r0, #58	; 0x3a
 80055ca:	f002 fd98 	bl	80080fe <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2104      	movs	r1, #4
 80055d2:	2046      	movs	r0, #70	; 0x46
 80055d4:	f002 fd77 	bl	80080c6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80055d8:	2046      	movs	r0, #70	; 0x46
 80055da:	f002 fd90 	bl	80080fe <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 80055de:	4859      	ldr	r0, [pc, #356]	; (8005744 <uartOpen+0x208>)
 80055e0:	f006 ff02 	bl	800c3e8 <HAL_UART_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <uartOpen+0xb4>
        {
          ret = false;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 80055ee:	e0a3      	b.n	8005738 <uartOpen+0x1fc>
          ret = true;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	4a58      	ldr	r2, [pc, #352]	; (8005758 <uartOpen+0x21c>)
 80055f8:	2101      	movs	r1, #1
 80055fa:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80055fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005600:	4953      	ldr	r1, [pc, #332]	; (8005750 <uartOpen+0x214>)
 8005602:	4850      	ldr	r0, [pc, #320]	; (8005744 <uartOpen+0x208>)
 8005604:	f006 ffae 	bl	800c564 <HAL_UART_Receive_DMA>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <uartOpen+0xd6>
            ret = false;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	4a4d      	ldr	r2, [pc, #308]	; (800574c <uartOpen+0x210>)
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	4413      	add	r3, r2
 800561a:	3308      	adds	r3, #8
 800561c:	6819      	ldr	r1, [r3, #0]
 800561e:	4b4f      	ldr	r3, [pc, #316]	; (800575c <uartOpen+0x220>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	1a8a      	subs	r2, r1, r2
 8005628:	4948      	ldr	r1, [pc, #288]	; (800574c <uartOpen+0x210>)
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	440b      	add	r3, r1
 800562e:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8005630:	79fa      	ldrb	r2, [r7, #7]
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	4945      	ldr	r1, [pc, #276]	; (800574c <uartOpen+0x210>)
 8005636:	0112      	lsls	r2, r2, #4
 8005638:	440a      	add	r2, r1
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	4943      	ldr	r1, [pc, #268]	; (800574c <uartOpen+0x210>)
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	440b      	add	r3, r1
 8005642:	3304      	adds	r3, #4
 8005644:	601a      	str	r2, [r3, #0]
      break;
 8005646:	e077      	b.n	8005738 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <uartOpen+0x208>)
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <uartOpen+0x20c>)
 800564c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 800564e:	4a3d      	ldr	r2, [pc, #244]	; (8005744 <uartOpen+0x208>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005654:	4b3b      	ldr	r3, [pc, #236]	; (8005744 <uartOpen+0x208>)
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800565a:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <uartOpen+0x208>)
 800565c:	2200      	movs	r2, #0
 800565e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8005660:	4b38      	ldr	r3, [pc, #224]	; (8005744 <uartOpen+0x208>)
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8005666:	4b37      	ldr	r3, [pc, #220]	; (8005744 <uartOpen+0x208>)
 8005668:	220c      	movs	r2, #12
 800566a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <uartOpen+0x208>)
 800566e:	2200      	movs	r2, #0
 8005670:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005672:	4b34      	ldr	r3, [pc, #208]	; (8005744 <uartOpen+0x208>)
 8005674:	2200      	movs	r2, #0
 8005676:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8005678:	4832      	ldr	r0, [pc, #200]	; (8005744 <uartOpen+0x208>)
 800567a:	f006 ff02 	bl	800c482 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	4a32      	ldr	r2, [pc, #200]	; (800574c <uartOpen+0x210>)
 8005684:	4413      	add	r3, r2
 8005686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568a:	4931      	ldr	r1, [pc, #196]	; (8005750 <uartOpen+0x214>)
 800568c:	4618      	mov	r0, r3
 800568e:	f7fc f882 	bl	8001796 <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <uartOpen+0x218>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a2e      	ldr	r2, [pc, #184]	; (8005754 <uartOpen+0x218>)
 800569c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b2c      	ldr	r3, [pc, #176]	; (8005754 <uartOpen+0x218>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2104      	movs	r1, #4
 80056b2:	203a      	movs	r0, #58	; 0x3a
 80056b4:	f002 fd07 	bl	80080c6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80056b8:	203a      	movs	r0, #58	; 0x3a
 80056ba:	f002 fd20 	bl	80080fe <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80056be:	2200      	movs	r2, #0
 80056c0:	2104      	movs	r1, #4
 80056c2:	2046      	movs	r0, #70	; 0x46
 80056c4:	f002 fcff 	bl	80080c6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80056c8:	2046      	movs	r0, #70	; 0x46
 80056ca:	f002 fd18 	bl	80080fe <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 80056ce:	481d      	ldr	r0, [pc, #116]	; (8005744 <uartOpen+0x208>)
 80056d0:	f006 fe8a 	bl	800c3e8 <HAL_UART_Init>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <uartOpen+0x1a4>
      {
        ret = false;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 80056de:	e02a      	b.n	8005736 <uartOpen+0x1fa>
        ret = true;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <uartOpen+0x21c>)
 80056e8:	2101      	movs	r1, #1
 80056ea:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80056ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f0:	4917      	ldr	r1, [pc, #92]	; (8005750 <uartOpen+0x214>)
 80056f2:	4814      	ldr	r0, [pc, #80]	; (8005744 <uartOpen+0x208>)
 80056f4:	f006 ff36 	bl	800c564 <HAL_UART_Receive_DMA>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <uartOpen+0x1c6>
          ret = false;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <uartOpen+0x210>)
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	4413      	add	r3, r2
 800570a:	3308      	adds	r3, #8
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <uartOpen+0x220>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	79fb      	ldrb	r3, [r7, #7]
 8005716:	1a8a      	subs	r2, r1, r2
 8005718:	490c      	ldr	r1, [pc, #48]	; (800574c <uartOpen+0x210>)
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	440b      	add	r3, r1
 800571e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8005720:	79fa      	ldrb	r2, [r7, #7]
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	4909      	ldr	r1, [pc, #36]	; (800574c <uartOpen+0x210>)
 8005726:	0112      	lsls	r2, r2, #4
 8005728:	440a      	add	r2, r1
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	4907      	ldr	r1, [pc, #28]	; (800574c <uartOpen+0x210>)
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	440b      	add	r3, r1
 8005732:	3304      	adds	r3, #4
 8005734:	601a      	str	r2, [r3, #0]
      break;
 8005736:	bf00      	nop
  }

  return ret;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	2000cd50 	.word	0x2000cd50
 8005748:	40011000 	.word	0x40011000
 800574c:	2000cc40 	.word	0x2000cc40
 8005750:	2000cc50 	.word	0x2000cc50
 8005754:	40023800 	.word	0x40023800
 8005758:	2000cc3c 	.word	0x2000cc3c
 800575c:	2000cdf0 	.word	0x2000cdf0

08005760 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <uartAvailable+0x1a>
 8005774:	2b01      	cmp	r3, #1
 8005776:	d018      	beq.n	80057aa <uartAvailable+0x4a>
 8005778:	e02f      	b.n	80057da <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <uartAvailable+0x84>)
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	3308      	adds	r3, #8
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <uartAvailable+0x88>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	1a8a      	subs	r2, r1, r2
 8005790:	4914      	ldr	r1, [pc, #80]	; (80057e4 <uartAvailable+0x84>)
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	440b      	add	r3, r1
 8005796:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <uartAvailable+0x84>)
 800579e:	4413      	add	r3, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fc f850 	bl	8001846 <qbufferAvailable>
 80057a6:	60f8      	str	r0, [r7, #12]
      break;
 80057a8:	e017      	b.n	80057da <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <uartAvailable+0x84>)
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	4413      	add	r3, r2
 80057b2:	3308      	adds	r3, #8
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <uartAvailable+0x88>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	1a8a      	subs	r2, r1, r2
 80057c0:	4908      	ldr	r1, [pc, #32]	; (80057e4 <uartAvailable+0x84>)
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	440b      	add	r3, r1
 80057c6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	4a05      	ldr	r2, [pc, #20]	; (80057e4 <uartAvailable+0x84>)
 80057ce:	4413      	add	r3, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fc f838 	bl	8001846 <qbufferAvailable>
 80057d6:	60f8      	str	r0, [r7, #12]
      break;
 80057d8:	bf00      	nop
  }

  return ret;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2000cc40 	.word	0x2000cc40
 80057e8:	2000cdf0 	.word	0x2000cdf0

080057ec <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <uartRead+0x1a>
 8005800:	2b01      	cmp	r3, #1
 8005802:	d008      	beq.n	8005816 <uartRead+0x2a>
 8005804:	e00f      	b.n	8005826 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8005806:	f107 030f 	add.w	r3, r7, #15
 800580a:	2201      	movs	r2, #1
 800580c:	4619      	mov	r1, r3
 800580e:	4808      	ldr	r0, [pc, #32]	; (8005830 <uartRead+0x44>)
 8005810:	f7fb ffdc 	bl	80017cc <qbufferRead>
      break;
 8005814:	e007      	b.n	8005826 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8005816:	f107 030f 	add.w	r3, r7, #15
 800581a:	2201      	movs	r2, #1
 800581c:	4619      	mov	r1, r3
 800581e:	4805      	ldr	r0, [pc, #20]	; (8005834 <uartRead+0x48>)
 8005820:	f7fb ffd4 	bl	80017cc <qbufferRead>
      break;
 8005824:	bf00      	nop
  }

  return ret;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	2000cc40 	.word	0x2000cc40
 8005834:	2000cc50 	.word	0x2000cc50

08005838 <uartWriteIT>:

  return ret;
}

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <uartWriteIT+0x1c>
 8005850:	2b01      	cmp	r3, #1
//      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
//      if (status == HAL_OK)
//      {
//        ret = length;
//      }
      break;
 8005852:	e00e      	b.n	8005872 <uartWriteIT+0x3a>
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4807      	ldr	r0, [pc, #28]	; (800587c <uartWriteIT+0x44>)
 800585e:	f006 fe3c 	bl	800c4da <HAL_UART_Transmit_IT>
 8005862:	4603      	mov	r3, r0
 8005864:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8005866:	7cfb      	ldrb	r3, [r7, #19]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <uartWriteIT+0x38>
        ret = length;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	617b      	str	r3, [r7, #20]
      break;
 8005870:	bf00      	nop
  }

  return ret;
 8005872:	697b      	ldr	r3, [r7, #20]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	2000cd50 	.word	0x2000cd50

08005880 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	f107 0314 	add.w	r3, r7, #20
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a5b      	ldr	r2, [pc, #364]	; (8005a34 <HAL_UART_MspInit+0x18c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f040 80b0 	bne.w	8005a2c <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058d6:	f043 0310 	orr.w	r3, r3, #16
 80058da:	6453      	str	r3, [r2, #68]	; 0x44
 80058dc:	4b56      	ldr	r3, [pc, #344]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	4b52      	ldr	r3, [pc, #328]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	4a51      	ldr	r2, [pc, #324]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	6313      	str	r3, [r2, #48]	; 0x30
 80058f8:	4b4f      	ldr	r3, [pc, #316]	; (8005a38 <HAL_UART_MspInit+0x190>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_UART_MspInit+0x190>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	4a4a      	ldr	r2, [pc, #296]	; (8005a38 <HAL_UART_MspInit+0x190>)
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	6313      	str	r3, [r2, #48]	; 0x30
 8005914:	4b48      	ldr	r3, [pc, #288]	; (8005a38 <HAL_UART_MspInit+0x190>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005924:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005926:	2302      	movs	r3, #2
 8005928:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800592e:	2303      	movs	r3, #3
 8005930:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005932:	2307      	movs	r3, #7
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005936:	f107 0314 	add.w	r3, r7, #20
 800593a:	4619      	mov	r1, r3
 800593c:	483f      	ldr	r0, [pc, #252]	; (8005a3c <HAL_UART_MspInit+0x194>)
 800593e:	f003 f803 	bl	8008948 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005946:	2302      	movs	r3, #2
 8005948:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800594e:	2303      	movs	r3, #3
 8005950:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005952:	2307      	movs	r3, #7
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005956:	f107 0314 	add.w	r3, r7, #20
 800595a:	4619      	mov	r1, r3
 800595c:	4838      	ldr	r0, [pc, #224]	; (8005a40 <HAL_UART_MspInit+0x198>)
 800595e:	f002 fff3 	bl	8008948 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005962:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005964:	4a38      	ldr	r2, [pc, #224]	; (8005a48 <HAL_UART_MspInit+0x1a0>)
 8005966:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005968:	4b36      	ldr	r3, [pc, #216]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 800596a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800596e:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005970:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005978:	2200      	movs	r2, #0
 800597a:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800597c:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 800597e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005982:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005984:	4b2f      	ldr	r3, [pc, #188]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005986:	2200      	movs	r2, #0
 8005988:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 800598c:	2200      	movs	r2, #0
 800598e:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005990:	4b2c      	ldr	r3, [pc, #176]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005992:	2200      	movs	r2, #0
 8005994:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 8005998:	2200      	movs	r2, #0
 800599a:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800599c:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80059a2:	4828      	ldr	r0, [pc, #160]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 80059a4:	f002 fbd4 	bl	8008150 <HAL_DMA_Init>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80059ae:	f7fb fd27 	bl	8001400 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
 80059b8:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <HAL_UART_MspInit+0x19c>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80059be:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059c0:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <HAL_UART_MspInit+0x1a8>)
 80059c2:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80059c4:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059ca:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059cc:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059d8:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059de:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80059ec:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f2:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005a00:	4812      	ldr	r0, [pc, #72]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a02:	f002 fba5 	bl	8008150 <HAL_DMA_Init>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8005a0c:	f7fb fcf8 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a14:	635a      	str	r2, [r3, #52]	; 0x34
 8005a16:	4a0d      	ldr	r2, [pc, #52]	; (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2100      	movs	r1, #0
 8005a20:	2025      	movs	r0, #37	; 0x25
 8005a22:	f002 fb50 	bl	80080c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a26:	2025      	movs	r0, #37	; 0x25
 8005a28:	f002 fb69 	bl	80080fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005a2c:	bf00      	nop
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40011000 	.word	0x40011000
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	40020400 	.word	0x40020400
 8005a44:	2000cd90 	.word	0x2000cd90
 8005a48:	400264b8 	.word	0x400264b8
 8005a4c:	2000cdf0 	.word	0x2000cdf0
 8005a50:	40026440 	.word	0x40026440

08005a54 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <HAL_UART_MspDeInit+0x54>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d11b      	bne.n	8005a9e <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005a66:	4b11      	ldr	r3, [pc, #68]	; (8005aac <HAL_UART_MspDeInit+0x58>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <HAL_UART_MspDeInit+0x58>)
 8005a6c:	f023 0310 	bic.w	r3, r3, #16
 8005a70:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8005a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a76:	480e      	ldr	r0, [pc, #56]	; (8005ab0 <HAL_UART_MspDeInit+0x5c>)
 8005a78:	f003 f8ea 	bl	8008c50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005a7c:	2140      	movs	r1, #64	; 0x40
 8005a7e:	480d      	ldr	r0, [pc, #52]	; (8005ab4 <HAL_UART_MspDeInit+0x60>)
 8005a80:	f003 f8e6 	bl	8008c50 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 fc0f 	bl	80082ac <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 fc0a 	bl	80082ac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005a98:	2025      	movs	r0, #37	; 0x25
 8005a9a:	f002 fb3e 	bl	800811a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400

08005ab8 <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b089      	sub	sp, #36	; 0x24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	4603      	mov	r3, r0
 8005ac0:	80fb      	strh	r3, [r7, #6]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	80bb      	strh	r3, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 50;
 8005aca:	2332      	movs	r3, #50	; 0x32
 8005acc:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b7e      	cmp	r3, #126	; 0x7e
 8005ad2:	d910      	bls.n	8005af6 <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d006      	beq.n	8005ae8 <draw_fan_status+0x30>
 8005ada:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <draw_fan_status+0x8c>)
 8005adc:	f107 030c 	add.w	r3, r7, #12
 8005ae0:	6810      	ldr	r0, [r2, #0]
 8005ae2:	6851      	ldr	r1, [r2, #4]
 8005ae4:	c303      	stmia	r3!, {r0, r1}
 8005ae6:	e020      	b.n	8005b2a <draw_fan_status+0x72>
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <draw_fan_status+0x90>)
 8005aea:	f107 030c 	add.w	r3, r7, #12
 8005aee:	6810      	ldr	r0, [r2, #0]
 8005af0:	6851      	ldr	r1, [r2, #4]
 8005af2:	c303      	stmia	r3!, {r0, r1}
 8005af4:	e019      	b.n	8005b2a <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <draw_fan_status+0x58>
 8005b02:	4a10      	ldr	r2, [pc, #64]	; (8005b44 <draw_fan_status+0x8c>)
 8005b04:	f107 030c 	add.w	r3, r7, #12
 8005b08:	6810      	ldr	r0, [r2, #0]
 8005b0a:	6851      	ldr	r1, [r2, #4]
 8005b0c:	c303      	stmia	r3!, {r0, r1}
 8005b0e:	e00c      	b.n	8005b2a <draw_fan_status+0x72>
 8005b10:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <draw_fan_status+0x90>)
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	6810      	ldr	r0, [r2, #0]
 8005b18:	6851      	ldr	r1, [r2, #4]
 8005b1a:	c303      	stmia	r3!, {r0, r1}
 8005b1c:	e005      	b.n	8005b2a <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 8005b1e:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <draw_fan_status+0x90>)
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	6810      	ldr	r0, [r2, #0]
 8005b26:	6851      	ldr	r1, [r2, #4]
 8005b28:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(x, y, image.width, image.height, image.data);
 8005b2a:	8a3a      	ldrh	r2, [r7, #16]
 8005b2c:	8a7c      	ldrh	r4, [r7, #18]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88b9      	ldrh	r1, [r7, #4]
 8005b32:	88f8      	ldrh	r0, [r7, #6]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4623      	mov	r3, r4
 8005b38:	f7fd f882 	bl	8002c40 <lcdDrawBufferImage>
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd90      	pop	{r4, r7, pc}
 8005b44:	0801c008 	.word	0x0801c008
 8005b48:	0801c000 	.word	0x0801c000

08005b4c <get_blink>:

bool get_blink() {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 8005b52:	f7fb fbe6 	bl	8001322 <millis>
 8005b56:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 8005b58:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <get_blink+0x44>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	db0a      	blt.n	8005b7a <get_blink+0x2e>
    blink ^= 0xFF;
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <get_blink+0x48>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <get_blink+0x48>)
 8005b6e:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 8005b76:	4a06      	ldr	r2, [pc, #24]	; (8005b90 <get_blink+0x44>)
 8005b78:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <get_blink+0x48>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	2000ce50 	.word	0x2000ce50
 8005b94:	2000ce54 	.word	0x2000ce54

08005b98 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <SD_CheckStatus+0x80>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8005ba8:	f7fd ffd4 	bl	8003b54 <sdIsInit>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <SD_CheckStatus+0x80>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <SD_CheckStatus+0x80>)
 8005bc6:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8005bc8:	f7fd ffd0 	bl	8003b6c <sdIsDetected>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f083 0301 	eor.w	r3, r3, #1
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <SD_CheckStatus+0x80>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <SD_CheckStatus+0x80>)
 8005be6:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8005be8:	200a      	movs	r0, #10
 8005bea:	f7fe f843 	bl	8003c74 <sdIsReady>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f083 0301 	eor.w	r3, r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <SD_CheckStatus+0x80>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <SD_CheckStatus+0x80>)
 8005c08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c0a:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <SD_CheckStatus+0x80>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	2000009c 	.word	0x2000009c

08005c1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8005c26:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <SD_initialize+0x40>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8005c2c:	f7fd ff92 	bl	8003b54 <sdIsInit>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f083 0301 	eor.w	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <SD_initialize+0x40>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <SD_initialize+0x40>)
 8005c4a:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <SD_initialize+0x40>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	b2db      	uxtb	r3, r3
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000009c 	.word	0x2000009c

08005c60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff93 	bl	8005b98 <SD_CheckStatus>
 8005c72:	4603      	mov	r3, r0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8005c90:	f242 7310 	movw	r3, #10000	; 0x2710
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fe f80b 	bl	8003cb4 <sdReadBlocks>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <SD_read+0x2c>
  {
    res = RES_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8005cc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fe f83a 	bl	8003d48 <sdWriteBlocks>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <SD_write+0x2c>
  {
    res = RES_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	603a      	str	r2, [r7, #0]
 8005cf2:	71fb      	strb	r3, [r7, #7]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005cfe:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <SD_ioctl+0xac>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <SD_ioctl+0x28>
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e03c      	b.n	8005d8a <SD_ioctl+0xa2>

  switch (cmd)
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d834      	bhi.n	8005d80 <SD_ioctl+0x98>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <SD_ioctl+0x34>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d35 	.word	0x08005d35
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d67 	.word	0x08005d67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d32:	e028      	b.n	8005d86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fd ff2d 	bl	8003b98 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d4a:	e01c      	b.n	8005d86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fd ff21 	bl	8003b98 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d64:	e00f      	b.n	8005d86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd ff14 	bl	8003b98 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	0a5a      	lsrs	r2, r3, #9
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d7e:	e002      	b.n	8005d86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005d86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3730      	adds	r7, #48	; 0x30
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000009c 	.word	0x2000009c

08005d98 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	3306      	adds	r3, #6
 8005da6:	2220      	movs	r2, #32
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f008 f9a2 	bl	800e0f4 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <hanFontLoad+0x2e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b0a      	cmp	r3, #10
 8005dc4:	d107      	bne.n	8005dd6 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	e03b      	b.n	8005e4e <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	b25b      	sxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	da2b      	bge.n	8005e38 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	041a      	lsls	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3301      	adds	r3, #1
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	4313      	orrs	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	3202      	adds	r2, #2
 8005df4:	7812      	ldrb	r2, [r2, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <hanFontLoad+0xc0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d30e      	bcc.n	8005e20 <hanFontLoad+0x88>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <hanFontLoad+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d80a      	bhi.n	8005e20 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2203      	movs	r2, #3
 8005e14:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f91f 	bl	800605c <hanUniFontLoad>
 8005e1e:	e009      	b.n	8005e34 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2201      	movs	r2, #1
 8005e24:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f816 	bl	8005e60 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e00a      	b.n	8005e4e <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa30 	bl	80062ac <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8005e4c:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	00eab080 	.word	0x00eab080
 8005e5c:	00ed9fb0 	.word	0x00ed9fb0

08005e60 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	b21a      	sxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3301      	adds	r3, #1
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8005e80:	89bb      	ldrh	r3, [r7, #12]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fa3c 	bl	8006300 <hanCnvCodeWan2Johab>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8005e8c:	89bb      	ldrh	r3, [r7, #12]
 8005e8e:	0a9b      	lsrs	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	4b63      	ldr	r3, [pc, #396]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005e9a:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8005e9c:	89bb      	ldrh	r3, [r7, #12]
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b60      	ldr	r3, [pc, #384]	; (800602c <hanWanFontLoad+0x1cc>)
 8005eaa:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8005eac:	89bb      	ldrh	r3, [r7, #12]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	4b5e      	ldr	r3, [pc, #376]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005eb6:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8005eb8:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4b5d      	ldr	r3, [pc, #372]	; (8006034 <hanWanFontLoad+0x1d4>)
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	4b58      	ldr	r3, [pc, #352]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005ec6:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8005ec8:	4b58      	ldr	r3, [pc, #352]	; (800602c <hanWanFontLoad+0x1cc>)
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b5a      	ldr	r3, [pc, #360]	; (8006038 <hanWanFontLoad+0x1d8>)
 8005ed0:	5c9b      	ldrb	r3, [r3, r2]
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	4b55      	ldr	r3, [pc, #340]	; (800602c <hanWanFontLoad+0x1cc>)
 8005ed6:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8005ed8:	4b55      	ldr	r3, [pc, #340]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b57      	ldr	r3, [pc, #348]	; (800603c <hanWanFontLoad+0x1dc>)
 8005ee0:	5c9b      	ldrb	r3, [r3, r2]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	4b52      	ldr	r3, [pc, #328]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005ee6:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8005ee8:	4b51      	ldr	r3, [pc, #324]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <hanWanFontLoad+0x9e>
 8005ef0:	4b4e      	ldr	r3, [pc, #312]	; (800602c <hanWanFontLoad+0x1cc>)
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4b52      	ldr	r3, [pc, #328]	; (8006040 <hanWanFontLoad+0x1e0>)
 8005ef8:	5c9b      	ldrb	r3, [r3, r2]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	e005      	b.n	8005f0a <hanWanFontLoad+0xaa>
 8005efe:	4b4b      	ldr	r3, [pc, #300]	; (800602c <hanWanFontLoad+0x1cc>)
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b4f      	ldr	r3, [pc, #316]	; (8006044 <hanWanFontLoad+0x1e4>)
 8005f06:	5c9b      	ldrb	r3, [r3, r2]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4a4f      	ldr	r2, [pc, #316]	; (8006048 <hanWanFontLoad+0x1e8>)
 8005f0c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8005f0e:	4b46      	ldr	r3, [pc, #280]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <hanWanFontLoad+0xca>
 8005f16:	4b44      	ldr	r3, [pc, #272]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d005      	beq.n	8005f2a <hanWanFontLoad+0xca>
 8005f1e:	4b42      	ldr	r3, [pc, #264]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d001      	beq.n	8005f2a <hanWanFontLoad+0xca>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <hanWanFontLoad+0xcc>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	4a40      	ldr	r2, [pc, #256]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005f30:	8812      	ldrh	r2, [r2, #0]
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d001      	beq.n	8005f3a <hanWanFontLoad+0xda>
 8005f36:	2202      	movs	r2, #2
 8005f38:	e000      	b.n	8005f3c <hanWanFontLoad+0xdc>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4413      	add	r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	4b42      	ldr	r3, [pc, #264]	; (800604c <hanWanFontLoad+0x1ec>)
 8005f42:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8005f44:	4b39      	ldr	r3, [pc, #228]	; (800602c <hanWanFontLoad+0x1cc>)
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b41      	ldr	r3, [pc, #260]	; (8006050 <hanWanFontLoad+0x1f0>)
 8005f4c:	5c9b      	ldrb	r3, [r3, r2]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	4b40      	ldr	r3, [pc, #256]	; (8006054 <hanWanFontLoad+0x1f4>)
 8005f52:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	81fb      	strh	r3, [r7, #14]
 8005f58:	e035      	b.n	8005fc6 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <hanWanFontLoad+0x1e8>)
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <hanWanFontLoad+0x1c8>)
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	441a      	add	r2, r3
 8005f70:	89fb      	ldrh	r3, [r7, #14]
 8005f72:	4939      	ldr	r1, [pc, #228]	; (8006058 <hanWanFontLoad+0x1f8>)
 8005f74:	0152      	lsls	r2, r2, #5
 8005f76:	4413      	add	r3, r2
 8005f78:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005f7c:	89fb      	ldrh	r3, [r7, #14]
 8005f7e:	b2d1      	uxtb	r1, r2
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	4413      	add	r3, r2
 8005f84:	460a      	mov	r2, r1
 8005f86:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	7999      	ldrb	r1, [r3, #6]
 8005f90:	4b2e      	ldr	r3, [pc, #184]	; (800604c <hanWanFontLoad+0x1ec>)
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	2316      	movs	r3, #22
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	33a0      	adds	r3, #160	; 0xa0
 8005f9e:	4a23      	ldr	r2, [pc, #140]	; (800602c <hanWanFontLoad+0x1cc>)
 8005fa0:	8812      	ldrh	r2, [r2, #0]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	482c      	ldr	r0, [pc, #176]	; (8006058 <hanWanFontLoad+0x1f8>)
 8005fa8:	0152      	lsls	r2, r2, #5
 8005faa:	4413      	add	r3, r2
 8005fac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	b2d1      	uxtb	r1, r2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	4413      	add	r3, r2
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8005fc0:	89fb      	ldrh	r3, [r7, #14]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	81fb      	strh	r3, [r7, #14]
 8005fc6:	89fb      	ldrh	r3, [r7, #14]
 8005fc8:	2b1f      	cmp	r3, #31
 8005fca:	d9c6      	bls.n	8005f5a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8005fcc:	4b18      	ldr	r3, [pc, #96]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d025      	beq.n	8006020 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	81fb      	strh	r3, [r7, #14]
 8005fd8:	e01f      	b.n	800601a <hanWanFontLoad+0x1ba>
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	4413      	add	r3, r2
 8005fe0:	7999      	ldrb	r1, [r3, #6]
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <hanWanFontLoad+0x1f4>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	33f8      	adds	r3, #248	; 0xf8
 8005ff2:	4a0f      	ldr	r2, [pc, #60]	; (8006030 <hanWanFontLoad+0x1d0>)
 8005ff4:	8812      	ldrh	r2, [r2, #0]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	4817      	ldr	r0, [pc, #92]	; (8006058 <hanWanFontLoad+0x1f8>)
 8005ffc:	0152      	lsls	r2, r2, #5
 8005ffe:	4413      	add	r3, r2
 8006000:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	89fb      	ldrh	r3, [r7, #14]
 8006008:	430a      	orrs	r2, r1
 800600a:	b2d1      	uxtb	r1, r2
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	4413      	add	r3, r2
 8006010:	460a      	mov	r2, r1
 8006012:	719a      	strb	r2, [r3, #6]
 8006014:	89fb      	ldrh	r3, [r7, #14]
 8006016:	3301      	adds	r3, #1
 8006018:	81fb      	strh	r3, [r7, #14]
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	2b1f      	cmp	r3, #31
 800601e:	d9dc      	bls.n	8005fda <hanWanFontLoad+0x17a>
  }
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	2000ce56 	.word	0x2000ce56
 800602c:	2000ce58 	.word	0x2000ce58
 8006030:	2000ce5a 	.word	0x2000ce5a
 8006034:	08013ffc 	.word	0x08013ffc
 8006038:	0801401c 	.word	0x0801401c
 800603c:	0801403c 	.word	0x0801403c
 8006040:	080140d4 	.word	0x080140d4
 8006044:	080140bc 	.word	0x080140bc
 8006048:	2000ce5c 	.word	0x2000ce5c
 800604c:	2000ce5e 	.word	0x2000ce5e
 8006050:	080140ec 	.word	0x080140ec
 8006054:	2000ce60 	.word	0x2000ce60
 8006058:	08016600 	.word	0x08016600

0800605c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	b21a      	sxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3301      	adds	r3, #1
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	b21b      	sxth	r3, r3
 8006078:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800607c:	b21b      	sxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b21a      	sxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3302      	adds	r3, #2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b21b      	sxth	r3, r3
 800608a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608e:	b21b      	sxth	r3, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	b21b      	sxth	r3, r3
 8006094:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8006096:	89bb      	ldrh	r3, [r7, #12]
 8006098:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800609c:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800609e:	89ba      	ldrh	r2, [r7, #12]
 80060a0:	0893      	lsrs	r3, r2, #2
 80060a2:	4973      	ldr	r1, [pc, #460]	; (8006270 <hanUniFontLoad+0x214>)
 80060a4:	fba1 3103 	umull	r3, r1, r1, r3
 80060a8:	460b      	mov	r3, r1
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	1a5b      	subs	r3, r3, r1
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <hanUniFontLoad+0x218>)
 80060b6:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 80060b8:	89bb      	ldrh	r3, [r7, #12]
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	4a6c      	ldr	r2, [pc, #432]	; (8006270 <hanUniFontLoad+0x214>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 80060c4:	89b9      	ldrh	r1, [r7, #12]
 80060c6:	4b6c      	ldr	r3, [pc, #432]	; (8006278 <hanUniFontLoad+0x21c>)
 80060c8:	fba3 2301 	umull	r2, r3, r3, r1
 80060cc:	1aca      	subs	r2, r1, r3
 80060ce:	0852      	lsrs	r2, r2, #1
 80060d0:	4413      	add	r3, r2
 80060d2:	091a      	lsrs	r2, r3, #4
 80060d4:	4613      	mov	r3, r2
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	4413      	add	r3, r2
 80060da:	00da      	lsls	r2, r3, #3
 80060dc:	1ad2      	subs	r2, r2, r3
 80060de:	1a8b      	subs	r3, r1, r2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	4b66      	ldr	r3, [pc, #408]	; (800627c <hanUniFontLoad+0x220>)
 80060e4:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 80060e6:	89ba      	ldrh	r2, [r7, #12]
 80060e8:	4b63      	ldr	r3, [pc, #396]	; (8006278 <hanUniFontLoad+0x21c>)
 80060ea:	fba3 1302 	umull	r1, r3, r3, r2
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	0852      	lsrs	r2, r2, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b61      	ldr	r3, [pc, #388]	; (8006280 <hanUniFontLoad+0x224>)
 80060fa:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80060fc:	4b60      	ldr	r3, [pc, #384]	; (8006280 <hanUniFontLoad+0x224>)
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	4b60      	ldr	r3, [pc, #384]	; (8006284 <hanUniFontLoad+0x228>)
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	b29a      	uxth	r2, r3
 8006108:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <hanUniFontLoad+0x224>)
 800610a:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 800610c:	4b5b      	ldr	r3, [pc, #364]	; (800627c <hanUniFontLoad+0x220>)
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	4b5d      	ldr	r3, [pc, #372]	; (8006288 <hanUniFontLoad+0x22c>)
 8006114:	5c9b      	ldrb	r3, [r3, r2]
 8006116:	b29a      	uxth	r2, r3
 8006118:	4b58      	ldr	r3, [pc, #352]	; (800627c <hanUniFontLoad+0x220>)
 800611a:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800611c:	4b55      	ldr	r3, [pc, #340]	; (8006274 <hanUniFontLoad+0x218>)
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	4b5a      	ldr	r3, [pc, #360]	; (800628c <hanUniFontLoad+0x230>)
 8006124:	5c9b      	ldrb	r3, [r3, r2]
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b52      	ldr	r3, [pc, #328]	; (8006274 <hanUniFontLoad+0x218>)
 800612a:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800612c:	4b51      	ldr	r3, [pc, #324]	; (8006274 <hanUniFontLoad+0x218>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d006      	beq.n	8006142 <hanUniFontLoad+0xe6>
 8006134:	4b51      	ldr	r3, [pc, #324]	; (800627c <hanUniFontLoad+0x220>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	4b55      	ldr	r3, [pc, #340]	; (8006290 <hanUniFontLoad+0x234>)
 800613c:	5c9b      	ldrb	r3, [r3, r2]
 800613e:	b29b      	uxth	r3, r3
 8006140:	e005      	b.n	800614e <hanUniFontLoad+0xf2>
 8006142:	4b4e      	ldr	r3, [pc, #312]	; (800627c <hanUniFontLoad+0x220>)
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	4b52      	ldr	r3, [pc, #328]	; (8006294 <hanUniFontLoad+0x238>)
 800614a:	5c9b      	ldrb	r3, [r3, r2]
 800614c:	b29b      	uxth	r3, r3
 800614e:	4a52      	ldr	r2, [pc, #328]	; (8006298 <hanUniFontLoad+0x23c>)
 8006150:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8006152:	4b4b      	ldr	r3, [pc, #300]	; (8006280 <hanUniFontLoad+0x224>)
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <hanUniFontLoad+0x112>
 800615a:	4b49      	ldr	r3, [pc, #292]	; (8006280 <hanUniFontLoad+0x224>)
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d005      	beq.n	800616e <hanUniFontLoad+0x112>
 8006162:	4b47      	ldr	r3, [pc, #284]	; (8006280 <hanUniFontLoad+0x224>)
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	2b10      	cmp	r3, #16
 8006168:	d001      	beq.n	800616e <hanUniFontLoad+0x112>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <hanUniFontLoad+0x114>
 800616e:	2300      	movs	r3, #0
 8006170:	b29b      	uxth	r3, r3
 8006172:	4a40      	ldr	r2, [pc, #256]	; (8006274 <hanUniFontLoad+0x218>)
 8006174:	8812      	ldrh	r2, [r2, #0]
 8006176:	2a00      	cmp	r2, #0
 8006178:	d001      	beq.n	800617e <hanUniFontLoad+0x122>
 800617a:	2202      	movs	r2, #2
 800617c:	e000      	b.n	8006180 <hanUniFontLoad+0x124>
 800617e:	2200      	movs	r2, #0
 8006180:	4413      	add	r3, r2
 8006182:	b29a      	uxth	r2, r3
 8006184:	4b45      	ldr	r3, [pc, #276]	; (800629c <hanUniFontLoad+0x240>)
 8006186:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006188:	4b3c      	ldr	r3, [pc, #240]	; (800627c <hanUniFontLoad+0x220>)
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	4b44      	ldr	r3, [pc, #272]	; (80062a0 <hanUniFontLoad+0x244>)
 8006190:	5c9b      	ldrb	r3, [r3, r2]
 8006192:	b29a      	uxth	r2, r3
 8006194:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <hanUniFontLoad+0x248>)
 8006196:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	81fb      	strh	r3, [r7, #14]
 800619c:	e035      	b.n	800620a <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800619e:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <hanUniFontLoad+0x23c>)
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b34      	ldr	r3, [pc, #208]	; (8006280 <hanUniFontLoad+0x224>)
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	441a      	add	r2, r3
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	493c      	ldr	r1, [pc, #240]	; (80062a8 <hanUniFontLoad+0x24c>)
 80061b8:	0152      	lsls	r2, r2, #5
 80061ba:	4413      	add	r3, r2
 80061bc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80061c0:	89fb      	ldrh	r3, [r7, #14]
 80061c2:	b2d1      	uxtb	r1, r2
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	4413      	add	r3, r2
 80061c8:	460a      	mov	r2, r1
 80061ca:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 80061cc:	89fb      	ldrh	r3, [r7, #14]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4413      	add	r3, r2
 80061d2:	7999      	ldrb	r1, [r3, #6]
 80061d4:	4b31      	ldr	r3, [pc, #196]	; (800629c <hanUniFontLoad+0x240>)
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	2316      	movs	r3, #22
 80061dc:	fb02 f303 	mul.w	r3, r2, r3
 80061e0:	33a0      	adds	r3, #160	; 0xa0
 80061e2:	4a26      	ldr	r2, [pc, #152]	; (800627c <hanUniFontLoad+0x220>)
 80061e4:	8812      	ldrh	r2, [r2, #0]
 80061e6:	441a      	add	r2, r3
 80061e8:	89fb      	ldrh	r3, [r7, #14]
 80061ea:	482f      	ldr	r0, [pc, #188]	; (80062a8 <hanUniFontLoad+0x24c>)
 80061ec:	0152      	lsls	r2, r2, #5
 80061ee:	4413      	add	r3, r2
 80061f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	b2d1      	uxtb	r1, r2
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	4413      	add	r3, r2
 8006200:	460a      	mov	r2, r1
 8006202:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	3301      	adds	r3, #1
 8006208:	81fb      	strh	r3, [r7, #14]
 800620a:	89fb      	ldrh	r3, [r7, #14]
 800620c:	2b1f      	cmp	r3, #31
 800620e:	d9c6      	bls.n	800619e <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8006210:	4b18      	ldr	r3, [pc, #96]	; (8006274 <hanUniFontLoad+0x218>)
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d025      	beq.n	8006264 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006218:	2300      	movs	r3, #0
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	e01f      	b.n	800625e <hanUniFontLoad+0x202>
 800621e:	89fb      	ldrh	r3, [r7, #14]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	4413      	add	r3, r2
 8006224:	7999      	ldrb	r1, [r3, #6]
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <hanUniFontLoad+0x248>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	33f8      	adds	r3, #248	; 0xf8
 8006236:	4a0f      	ldr	r2, [pc, #60]	; (8006274 <hanUniFontLoad+0x218>)
 8006238:	8812      	ldrh	r2, [r2, #0]
 800623a:	441a      	add	r2, r3
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	481a      	ldr	r0, [pc, #104]	; (80062a8 <hanUniFontLoad+0x24c>)
 8006240:	0152      	lsls	r2, r2, #5
 8006242:	4413      	add	r3, r2
 8006244:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	89fb      	ldrh	r3, [r7, #14]
 800624c:	430a      	orrs	r2, r1
 800624e:	b2d1      	uxtb	r1, r2
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	4413      	add	r3, r2
 8006254:	460a      	mov	r2, r1
 8006256:	719a      	strb	r2, [r3, #6]
 8006258:	89fb      	ldrh	r3, [r7, #14]
 800625a:	3301      	adds	r3, #1
 800625c:	81fb      	strh	r3, [r7, #14]
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	2b1f      	cmp	r3, #31
 8006262:	d9dc      	bls.n	800621e <hanUniFontLoad+0x1c2>
  }
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	24924925 	.word	0x24924925
 8006274:	2000ce62 	.word	0x2000ce62
 8006278:	86186187 	.word	0x86186187
 800627c:	2000ce64 	.word	0x2000ce64
 8006280:	2000ce66 	.word	0x2000ce66
 8006284:	0801405c 	.word	0x0801405c
 8006288:	0801407c 	.word	0x0801407c
 800628c:	0801409c 	.word	0x0801409c
 8006290:	080140d4 	.word	0x080140d4
 8006294:	080140bc 	.word	0x080140bc
 8006298:	2000ce68 	.word	0x2000ce68
 800629c:	2000ce6a 	.word	0x2000ce6a
 80062a0:	080140ec 	.word	0x080140ec
 80062a4:	2000ce6c 	.word	0x2000ce6c
 80062a8:	08016600 	.word	0x08016600

080062ac <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 80062bc:	7b7b      	ldrb	r3, [r7, #13]
 80062be:	3b20      	subs	r3, #32
 80062c0:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 80062c2:	2300      	movs	r3, #0
 80062c4:	81fb      	strh	r3, [r7, #14]
 80062c6:	e00f      	b.n	80062e8 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 80062c8:	7b7a      	ldrb	r2, [r7, #13]
 80062ca:	89fb      	ldrh	r3, [r7, #14]
 80062cc:	490b      	ldr	r1, [pc, #44]	; (80062fc <hanEngFontLoad+0x50>)
 80062ce:	0112      	lsls	r2, r2, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	b2d1      	uxtb	r1, r2
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	460a      	mov	r2, r1
 80062e0:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	3301      	adds	r3, #1
 80062e6:	81fb      	strh	r3, [r7, #14]
 80062e8:	89fb      	ldrh	r3, [r7, #14]
 80062ea:	2b0f      	cmp	r3, #15
 80062ec:	d9ec      	bls.n	80062c8 <hanEngFontLoad+0x1c>
  }
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	080127fc 	.word	0x080127fc

08006300 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	b2db      	uxtb	r3, r3
 8006314:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8006316:	89fb      	ldrh	r3, [r7, #14]
 8006318:	3bb0      	subs	r3, #176	; 0xb0
 800631a:	225e      	movs	r2, #94	; 0x5e
 800631c:	fb03 f202 	mul.w	r2, r3, r2
 8006320:	89bb      	ldrh	r3, [r7, #12]
 8006322:	3ba1      	subs	r3, #161	; 0xa1
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8006328:	4a05      	ldr	r2, [pc, #20]	; (8006340 <hanCnvCodeWan2Johab+0x40>)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006330:	b29b      	uxth	r3, r3
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	08014140 	.word	0x08014140

08006344 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <TransferDoneISR+0x30>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <TransferDoneISR+0x30>)
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006358:	2101      	movs	r1, #1
 800635a:	2002      	movs	r0, #2
 800635c:	f7fb ff98 	bl	8002290 <gpioPinWrite>

    if (frameCallBack != NULL)
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <TransferDoneISR+0x34>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <TransferDoneISR+0x34>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4798      	blx	r3
    }
  }
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000ce74 	.word	0x2000ce74
 8006378:	2000ce70 	.word	0x2000ce70

0800637c <st7735Init>:


bool st7735Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8006382:	f000 f835 	bl	80063f0 <st7735Reset>
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]

  return ret;
 800638a:	79fb      	ldrb	r3, [r7, #7]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <st7735InitDriver+0x40>)
 80063a0:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <st7735InitDriver+0x44>)
 80063a6:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a0c      	ldr	r2, [pc, #48]	; (80063dc <st7735InitDriver+0x48>)
 80063ac:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <st7735InitDriver+0x4c>)
 80063b2:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <st7735InitDriver+0x50>)
 80063b8:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <st7735InitDriver+0x54>)
 80063be:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <st7735InitDriver+0x58>)
 80063c4:	619a      	str	r2, [r3, #24]
  return true;
 80063c6:	2301      	movs	r3, #1
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	0800637d 	.word	0x0800637d
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080066b5 	.word	0x080066b5
 80063e0:	08006469 	.word	0x08006469
 80063e4:	08006479 	.word	0x08006479
 80063e8:	0800690d 	.word	0x0800690d
 80063ec:	080068c1 	.word	0x080068c1

080063f0 <st7735Reset>:

bool st7735Reset(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <st7735Reset+0x70>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe f868 	bl	80044d0 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8006400:	4b17      	ldr	r3, [pc, #92]	; (8006460 <st7735Reset+0x70>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe f8be 	bl	8004588 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 800640c:	4b14      	ldr	r3, [pc, #80]	; (8006460 <st7735Reset+0x70>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4914      	ldr	r1, [pc, #80]	; (8006464 <st7735Reset+0x74>)
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe f9ee 	bl	80047f4 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006418:	2100      	movs	r1, #0
 800641a:	2001      	movs	r0, #1
 800641c:	f7fb ff38 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8006420:	2101      	movs	r1, #1
 8006422:	2003      	movs	r0, #3
 8006424:	f7fb ff34 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8006428:	2101      	movs	r1, #1
 800642a:	2002      	movs	r0, #2
 800642c:	f7fb ff30 	bl	8002290 <gpioPinWrite>
  delay(10);
 8006430:	200a      	movs	r0, #10
 8006432:	f7fa ff6b 	bl	800130c <delay>

  st7735InitRegs();
 8006436:	f000 f863 	bl	8006500 <st7735InitRegs>


  st7735SetRotation(1);
 800643a:	2001      	movs	r0, #1
 800643c:	f000 f910 	bl	8006660 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	22a0      	movs	r2, #160	; 0xa0
 8006448:	2100      	movs	r1, #0
 800644a:	2000      	movs	r0, #0
 800644c:	f000 f97e 	bl	800674c <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006450:	2100      	movs	r1, #0
 8006452:	2001      	movs	r0, #1
 8006454:	f7fb ff1c 	bl	8002290 <gpioPinWrite>
  return true;
 8006458:	2301      	movs	r3, #1
}
 800645a:	4618      	mov	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	2000ce6e 	.word	0x2000ce6e
 8006464:	08006345 	.word	0x08006345

08006468 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 800646c:	23a0      	movs	r3, #160	; 0xa0
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 800647c:	2380      	movs	r3, #128	; 0x80
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <writecommand>:

void writecommand(uint8_t c)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8006492:	2100      	movs	r1, #0
 8006494:	2003      	movs	r0, #3
 8006496:	f7fb fefb 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800649a:	2100      	movs	r1, #0
 800649c:	2002      	movs	r0, #2
 800649e:	f7fb fef7 	bl	8002290 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <writecommand+0x38>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	79fa      	ldrb	r2, [r7, #7]
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe f900 	bl	80046b0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80064b0:	2101      	movs	r1, #1
 80064b2:	2002      	movs	r0, #2
 80064b4:	f7fb feec 	bl	8002290 <gpioPinWrite>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	2000ce6e 	.word	0x2000ce6e

080064c4 <writedata>:

void writedata(uint8_t d)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80064ce:	2101      	movs	r1, #1
 80064d0:	2003      	movs	r0, #3
 80064d2:	f7fb fedd 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80064d6:	2100      	movs	r1, #0
 80064d8:	2002      	movs	r0, #2
 80064da:	f7fb fed9 	bl	8002290 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 80064de:	4b07      	ldr	r3, [pc, #28]	; (80064fc <writedata+0x38>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	79fa      	ldrb	r2, [r7, #7]
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe f8e2 	bl	80046b0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80064ec:	2101      	movs	r1, #1
 80064ee:	2002      	movs	r0, #2
 80064f0:	f7fb fece 	bl	8002290 <gpioPinWrite>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	2000ce6e 	.word	0x2000ce6e

08006500 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8006504:	2001      	movs	r0, #1
 8006506:	f7ff ffbf 	bl	8006488 <writecommand>
  delay(10);
 800650a:	200a      	movs	r0, #10
 800650c:	f7fa fefe 	bl	800130c <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8006510:	2011      	movs	r0, #17
 8006512:	f7ff ffb9 	bl	8006488 <writecommand>
  delay(10);
 8006516:	200a      	movs	r0, #10
 8006518:	f7fa fef8 	bl	800130c <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 800651c:	20b1      	movs	r0, #177	; 0xb1
 800651e:	f7ff ffb3 	bl	8006488 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8006522:	2001      	movs	r0, #1
 8006524:	f7ff ffce 	bl	80064c4 <writedata>
  writedata(0x2C);
 8006528:	202c      	movs	r0, #44	; 0x2c
 800652a:	f7ff ffcb 	bl	80064c4 <writedata>
  writedata(0x2D);
 800652e:	202d      	movs	r0, #45	; 0x2d
 8006530:	f7ff ffc8 	bl	80064c4 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8006534:	20b2      	movs	r0, #178	; 0xb2
 8006536:	f7ff ffa7 	bl	8006488 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800653a:	2001      	movs	r0, #1
 800653c:	f7ff ffc2 	bl	80064c4 <writedata>
  writedata(0x2C);
 8006540:	202c      	movs	r0, #44	; 0x2c
 8006542:	f7ff ffbf 	bl	80064c4 <writedata>
  writedata(0x2D);
 8006546:	202d      	movs	r0, #45	; 0x2d
 8006548:	f7ff ffbc 	bl	80064c4 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 800654c:	20b3      	movs	r0, #179	; 0xb3
 800654e:	f7ff ff9b 	bl	8006488 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8006552:	2001      	movs	r0, #1
 8006554:	f7ff ffb6 	bl	80064c4 <writedata>
  writedata(0x2C);
 8006558:	202c      	movs	r0, #44	; 0x2c
 800655a:	f7ff ffb3 	bl	80064c4 <writedata>
  writedata(0x2D);
 800655e:	202d      	movs	r0, #45	; 0x2d
 8006560:	f7ff ffb0 	bl	80064c4 <writedata>
  writedata(0x01);              //     Line inversion mode
 8006564:	2001      	movs	r0, #1
 8006566:	f7ff ffad 	bl	80064c4 <writedata>
  writedata(0x2C);
 800656a:	202c      	movs	r0, #44	; 0x2c
 800656c:	f7ff ffaa 	bl	80064c4 <writedata>
  writedata(0x2D);
 8006570:	202d      	movs	r0, #45	; 0x2d
 8006572:	f7ff ffa7 	bl	80064c4 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8006576:	20b4      	movs	r0, #180	; 0xb4
 8006578:	f7ff ff86 	bl	8006488 <writecommand>
  writedata(0x07);              //     No inversion
 800657c:	2007      	movs	r0, #7
 800657e:	f7ff ffa1 	bl	80064c4 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8006582:	20c0      	movs	r0, #192	; 0xc0
 8006584:	f7ff ff80 	bl	8006488 <writecommand>
  writedata(0xA2);
 8006588:	20a2      	movs	r0, #162	; 0xa2
 800658a:	f7ff ff9b 	bl	80064c4 <writedata>
  writedata(0x02);              //     -4.6V
 800658e:	2002      	movs	r0, #2
 8006590:	f7ff ff98 	bl	80064c4 <writedata>
  writedata(0x84);              //     AUTO mode
 8006594:	2084      	movs	r0, #132	; 0x84
 8006596:	f7ff ff95 	bl	80064c4 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 800659a:	20c1      	movs	r0, #193	; 0xc1
 800659c:	f7ff ff74 	bl	8006488 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80065a0:	20c5      	movs	r0, #197	; 0xc5
 80065a2:	f7ff ff8f 	bl	80064c4 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80065a6:	20c2      	movs	r0, #194	; 0xc2
 80065a8:	f7ff ff6e 	bl	8006488 <writecommand>
  writedata(0x0A);              //     Opamp current small
 80065ac:	200a      	movs	r0, #10
 80065ae:	f7ff ff89 	bl	80064c4 <writedata>
  writedata(0x00);              //     Boost frequency
 80065b2:	2000      	movs	r0, #0
 80065b4:	f7ff ff86 	bl	80064c4 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80065b8:	20c3      	movs	r0, #195	; 0xc3
 80065ba:	f7ff ff65 	bl	8006488 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80065be:	208a      	movs	r0, #138	; 0x8a
 80065c0:	f7ff ff80 	bl	80064c4 <writedata>
  writedata(0x2A);
 80065c4:	202a      	movs	r0, #42	; 0x2a
 80065c6:	f7ff ff7d 	bl	80064c4 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80065ca:	20c4      	movs	r0, #196	; 0xc4
 80065cc:	f7ff ff5c 	bl	8006488 <writecommand>
  writedata(0x8A);
 80065d0:	208a      	movs	r0, #138	; 0x8a
 80065d2:	f7ff ff77 	bl	80064c4 <writedata>
  writedata(0xEE);
 80065d6:	20ee      	movs	r0, #238	; 0xee
 80065d8:	f7ff ff74 	bl	80064c4 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 80065dc:	20c5      	movs	r0, #197	; 0xc5
 80065de:	f7ff ff53 	bl	8006488 <writecommand>
  writedata(0x0E);
 80065e2:	200e      	movs	r0, #14
 80065e4:	f7ff ff6e 	bl	80064c4 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 80065e8:	2020      	movs	r0, #32
 80065ea:	f7ff ff4d 	bl	8006488 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 80065ee:	2036      	movs	r0, #54	; 0x36
 80065f0:	f7ff ff4a 	bl	8006488 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 80065f4:	20c8      	movs	r0, #200	; 0xc8
 80065f6:	f7ff ff65 	bl	80064c4 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 80065fa:	203a      	movs	r0, #58	; 0x3a
 80065fc:	f7ff ff44 	bl	8006488 <writecommand>
  writedata(0x05);              //     16-bit color
 8006600:	2005      	movs	r0, #5
 8006602:	f7ff ff5f 	bl	80064c4 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8006606:	202a      	movs	r0, #42	; 0x2a
 8006608:	f7ff ff3e 	bl	8006488 <writecommand>
  writedata(0x00);
 800660c:	2000      	movs	r0, #0
 800660e:	f7ff ff59 	bl	80064c4 <writedata>
  writedata(0x00);              //     XSTART = 0
 8006612:	2000      	movs	r0, #0
 8006614:	f7ff ff56 	bl	80064c4 <writedata>
  writedata(0x00);
 8006618:	2000      	movs	r0, #0
 800661a:	f7ff ff53 	bl	80064c4 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 800661e:	209f      	movs	r0, #159	; 0x9f
 8006620:	f7ff ff50 	bl	80064c4 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8006624:	202b      	movs	r0, #43	; 0x2b
 8006626:	f7ff ff2f 	bl	8006488 <writecommand>
  writedata(0x00);
 800662a:	2000      	movs	r0, #0
 800662c:	f7ff ff4a 	bl	80064c4 <writedata>
  writedata(0x00);              //     XSTART = 0
 8006630:	2000      	movs	r0, #0
 8006632:	f7ff ff47 	bl	80064c4 <writedata>
  writedata(0x00);
 8006636:	2000      	movs	r0, #0
 8006638:	f7ff ff44 	bl	80064c4 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 800663c:	207f      	movs	r0, #127	; 0x7f
 800663e:	f7ff ff41 	bl	80064c4 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8006642:	2013      	movs	r0, #19
 8006644:	f7ff ff20 	bl	8006488 <writecommand>
  delay(10);
 8006648:	200a      	movs	r0, #10
 800664a:	f7fa fe5f 	bl	800130c <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 800664e:	2029      	movs	r0, #41	; 0x29
 8006650:	f7ff ff1a 	bl	8006488 <writecommand>
  delay(10);
 8006654:	200a      	movs	r0, #10
 8006656:	f7fa fe59 	bl	800130c <delay>
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 800666a:	2036      	movs	r0, #54	; 0x36
 800666c:	f7ff ff0c 	bl	8006488 <writecommand>

  switch (mode)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d81a      	bhi.n	80066ac <st7735SetRotation+0x4c>
 8006676:	a201      	add	r2, pc, #4	; (adr r2, 800667c <st7735SetRotation+0x1c>)
 8006678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667c:	0800668d 	.word	0x0800668d
 8006680:	08006695 	.word	0x08006695
 8006684:	0800669d 	.word	0x0800669d
 8006688:	080066a5 	.word	0x080066a5
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800668c:	20c0      	movs	r0, #192	; 0xc0
 800668e:	f7ff ff19 	bl	80064c4 <writedata>
     break;
 8006692:	e00b      	b.n	80066ac <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8006694:	20a0      	movs	r0, #160	; 0xa0
 8006696:	f7ff ff15 	bl	80064c4 <writedata>
     break;
 800669a:	e007      	b.n	80066ac <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 800669c:	2000      	movs	r0, #0
 800669e:	f7ff ff11 	bl	80064c4 <writedata>
    break;
 80066a2:	e003      	b.n	80066ac <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80066a4:	2060      	movs	r0, #96	; 0x60
 80066a6:	f7ff ff0d 	bl	80064c4 <writedata>
     break;
 80066aa:	bf00      	nop
  }
}
 80066ac:	bf00      	nop
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80066c2:	4b21      	ldr	r3, [pc, #132]	; (8006748 <st7735SetWindow+0x94>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2108      	movs	r1, #8
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fd ffc1 	bl	8004650 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 80066ce:	202a      	movs	r0, #42	; 0x2a
 80066d0:	f7ff feda 	bl	8006488 <writecommand>
  writedata(0x00);
 80066d4:	2000      	movs	r0, #0
 80066d6:	f7ff fef5 	bl	80064c4 <writedata>
  writedata(x0+colstart);     // XSTART
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff feec 	bl	80064c4 <writedata>
  writedata(0x00);
 80066ec:	2000      	movs	r0, #0
 80066ee:	f7ff fee9 	bl	80064c4 <writedata>
  writedata(x1+colstart);     // XEND
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	2300      	movs	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fee0 	bl	80064c4 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8006704:	202b      	movs	r0, #43	; 0x2b
 8006706:	f7ff febf 	bl	8006488 <writecommand>
  writedata(0x00);
 800670a:	2000      	movs	r0, #0
 800670c:	f7ff feda 	bl	80064c4 <writedata>
  writedata(y0+rowstart);     // YSTART
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	4413      	add	r3, r2
 800671a:	b2db      	uxtb	r3, r3
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fed1 	bl	80064c4 <writedata>
  writedata(0x00);
 8006722:	2000      	movs	r0, #0
 8006724:	f7ff fece 	bl	80064c4 <writedata>
  writedata(y1+rowstart);     // YEND
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	2300      	movs	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4413      	add	r3, r2
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fec5 	bl	80064c4 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 800673a:	202c      	movs	r0, #44	; 0x2c
 800673c:	f7ff fea4 	bl	8006488 <writecommand>
}
 8006740:	bf00      	nop
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000ce6e 	.word	0x2000ce6e

0800674c <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 800674c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006750:	b089      	sub	sp, #36	; 0x24
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	466b      	mov	r3, sp
 800675e:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	1e4b      	subs	r3, r1, #1
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	460a      	mov	r2, r1
 8006768:	2300      	movs	r3, #0
 800676a:	4690      	mov	r8, r2
 800676c:	4699      	mov	r9, r3
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800677a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800677e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8006782:	460a      	mov	r2, r1
 8006784:	2300      	movs	r3, #0
 8006786:	4614      	mov	r4, r2
 8006788:	461d      	mov	r5, r3
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	012b      	lsls	r3, r5, #4
 8006794:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8006798:	0122      	lsls	r2, r4, #4
 800679a:	460b      	mov	r3, r1
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	3307      	adds	r3, #7
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	ebad 0d03 	sub.w	sp, sp, r3
 80067a8:	466b      	mov	r3, sp
 80067aa:	3301      	adds	r3, #1
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80067b2:	22a0      	movs	r2, #160	; 0xa0
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	da78      	bge.n	80068ac <st7735FillRect+0x160>
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4293      	cmp	r3, r2
 80067c0:	da74      	bge.n	80068ac <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da05      	bge.n	80067d4 <st7735FillRect+0x88>
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da05      	bge.n	80067e6 <st7735FillRect+0x9a>
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4413      	add	r3, r2
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	22a0      	movs	r2, #160	; 0xa0
 80067ee:	4293      	cmp	r3, r2
 80067f0:	dd03      	ble.n	80067fa <st7735FillRect+0xae>
 80067f2:	22a0      	movs	r2, #160	; 0xa0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4413      	add	r3, r2
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	4293      	cmp	r3, r2
 8006804:	dd03      	ble.n	800680e <st7735FillRect+0xc2>
 8006806:	2280      	movs	r2, #128	; 0x80
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	dd4d      	ble.n	80068b0 <st7735FillRect+0x164>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd4a      	ble.n	80068b0 <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4413      	add	r3, r2
 8006820:	1e59      	subs	r1, r3, #1
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4413      	add	r3, r2
 8006828:	3b01      	subs	r3, #1
 800682a:	460a      	mov	r2, r1
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ff40 	bl	80066b4 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8006834:	4b21      	ldr	r3, [pc, #132]	; (80068bc <st7735FillRect+0x170>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2110      	movs	r1, #16
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd ff08 	bl	8004650 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006840:	2101      	movs	r1, #1
 8006842:	2003      	movs	r0, #3
 8006844:	f7fb fd24 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006848:	2100      	movs	r1, #0
 800684a:	2002      	movs	r0, #2
 800684c:	f7fb fd20 	bl	8002290 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e008      	b.n	8006868 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	b299      	uxth	r1, r3
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	dbf2      	blt.n	8006856 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e00e      	b.n	8006894 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	230a      	movs	r3, #10
 800687a:	6939      	ldr	r1, [r7, #16]
 800687c:	2000      	movs	r0, #0
 800687e:	f7fd ff69 	bl	8004754 <spiDmaTxTransfer>
 8006882:	4603      	mov	r3, r0
 8006884:	f083 0301 	eor.w	r3, r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	3301      	adds	r3, #1
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	dbec      	blt.n	8006876 <st7735FillRect+0x12a>
 800689c:	e000      	b.n	80068a0 <st7735FillRect+0x154>
    {
      break;
 800689e:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80068a0:	2101      	movs	r1, #1
 80068a2:	2002      	movs	r0, #2
 80068a4:	f7fb fcf4 	bl	8002290 <gpioPinWrite>
 80068a8:	46b5      	mov	sp, r6
 80068aa:	e003      	b.n	80068b4 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 80068ac:	bf00      	nop
 80068ae:	e000      	b.n	80068b2 <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 80068b0:	bf00      	nop
 80068b2:	46b5      	mov	sp, r6
}
 80068b4:	3724      	adds	r7, #36	; 0x24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068bc:	2000ce6e 	.word	0x2000ce6e

080068c0 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <st7735SendBuffer+0x44>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <st7735SendBuffer+0x48>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2110      	movs	r1, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fd feb9 	bl	8004650 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80068de:	2101      	movs	r1, #1
 80068e0:	2003      	movs	r0, #3
 80068e2:	f7fb fcd5 	bl	8002290 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80068e6:	2100      	movs	r1, #0
 80068e8:	2002      	movs	r0, #2
 80068ea:	f7fb fcd1 	bl	8002290 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 80068ee:	2300      	movs	r3, #0
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	2000      	movs	r0, #0
 80068f6:	f7fd ff2d 	bl	8004754 <spiDmaTxTransfer>
  return true;
 80068fa:	2301      	movs	r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	2000ce74 	.word	0x2000ce74
 8006908:	2000ce6e 	.word	0x2000ce6e

0800690c <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8006914:	4a04      	ldr	r2, [pc, #16]	; (8006928 <st7735SetCallBack+0x1c>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]

  return true;
 800691a:	2301      	movs	r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	2000ce70 	.word	0x2000ce70

0800692c <hwInit>:




void hwInit(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  bspInit();
 8006930:	f7fa fcc2 	bl	80012b8 <bspInit>

  //cliInit();
  ledInit();
 8006934:	f7fc fbba 	bl	80030ac <ledInit>
  uartInit();
 8006938:	f7fe fde6 	bl	8005508 <uartInit>
  spiInit();
 800693c:	f7fd fd76 	bl	800442c <spiInit>
  DWT_Delay_Init();
 8006940:	f7fa ff9a 	bl	8001878 <DWT_Delay_Init>
  buttonInit();
 8006944:	f7fa ffc8 	bl	80018d8 <buttonInit>
  gpioInit();
 8006948:	f7fb fbe0 	bl	800210c <gpioInit>
  Ds18b20_Init();
 800694c:	f7fb f898 	bl	8001a80 <Ds18b20_Init>
  sonarInit();
 8006950:	f7fd fb98 	bl	8004084 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8006954:	f7fb fd4e 	bl	80023f4 <lcdInit>
  tdsInit();
 8006958:	f7fe f862 	bl	8004a20 <tdsInit>

  if (sdInit() == true)
 800695c:	f7fd f8b6 	bl	8003acc <sdInit>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <hwInit+0x3e>
  {
    fatfsInit();
 8006966:	f7fb fbad 	bl	80020c4 <fatfsInit>
  }

  menuInit();
 800696a:	f7fc fc19 	bl	80031a0 <menuInit>
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <disk_status+0x30>)
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	79fa      	ldrb	r2, [r7, #7]
 800698c:	4905      	ldr	r1, [pc, #20]	; (80069a4 <disk_status+0x30>)
 800698e:	440a      	add	r2, r1
 8006990:	7b12      	ldrb	r2, [r2, #12]
 8006992:	4610      	mov	r0, r2
 8006994:	4798      	blx	r3
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
  return stat;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	2000cea4 	.word	0x2000cea4

080069a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	4a0d      	ldr	r2, [pc, #52]	; (80069f0 <disk_initialize+0x48>)
 80069ba:	5cd3      	ldrb	r3, [r2, r3]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <disk_initialize+0x48>)
 80069c4:	2101      	movs	r1, #1
 80069c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <disk_initialize+0x48>)
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	79fa      	ldrb	r2, [r7, #7]
 80069d6:	4906      	ldr	r1, [pc, #24]	; (80069f0 <disk_initialize+0x48>)
 80069d8:	440a      	add	r2, r1
 80069da:	7b12      	ldrb	r2, [r2, #12]
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	2000cea4 	.word	0x2000cea4

080069f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <disk_read+0x3c>)
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	689c      	ldr	r4, [r3, #8]
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	4a07      	ldr	r2, [pc, #28]	; (8006a30 <disk_read+0x3c>)
 8006a14:	4413      	add	r3, r2
 8006a16:	7b18      	ldrb	r0, [r3, #12]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	47a0      	blx	r4
 8006a20:	4603      	mov	r3, r0
 8006a22:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000cea4 	.word	0x2000cea4

08006a34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <disk_write+0x3c>)
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	68dc      	ldr	r4, [r3, #12]
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <disk_write+0x3c>)
 8006a54:	4413      	add	r3, r2
 8006a56:	7b18      	ldrb	r0, [r3, #12]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	47a0      	blx	r4
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
  return res;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd90      	pop	{r4, r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	2000cea4 	.word	0x2000cea4

08006a74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	b21a      	sxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b21b      	sxth	r3, r3
 8006a90:	4313      	orrs	r3, r2
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006a96:	89fb      	ldrh	r3, [r7, #14]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	3202      	adds	r2, #2
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	3201      	adds	r2, #1
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7812      	ldrb	r2, [r2, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
	return rv;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e010      	b.n	8006b1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006afa:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <clear_lock+0x44>)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4413      	add	r3, r2
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d105      	bne.n	8006b16 <clear_lock+0x2a>
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <clear_lock+0x44>)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	4413      	add	r3, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d9eb      	bls.n	8006afa <clear_lock+0xe>
	}
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	2000ce84 	.word	0x2000ce84

08006b34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d034      	beq.n	8006bb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7858      	ldrb	r0, [r3, #1]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b58:	2301      	movs	r3, #1
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	f7ff ff6a 	bl	8006a34 <disk_write>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	e022      	b.n	8006bb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	1ad2      	subs	r2, r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d217      	bcs.n	8006bb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	789b      	ldrb	r3, [r3, #2]
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	e010      	b.n	8006bac <sync_window+0x78>
					wsect += fs->fsize;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	7858      	ldrb	r0, [r3, #1]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	f7ff ff47 	bl	8006a34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d8eb      	bhi.n	8006b8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d01b      	beq.n	8006c0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ffad 	bl	8006b34 <sync_window>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d113      	bne.n	8006c0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7858      	ldrb	r0, [r3, #1]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bee:	2301      	movs	r3, #1
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	f7ff feff 	bl	80069f4 <disk_read>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006c00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d031      	beq.n	8006c90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e002      	b.n	8006c3a <get_ldnumber+0x24>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3301      	adds	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b1f      	cmp	r3, #31
 8006c40:	d903      	bls.n	8006c4a <get_ldnumber+0x34>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b3a      	cmp	r3, #58	; 0x3a
 8006c48:	d1f4      	bne.n	8006c34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b3a      	cmp	r3, #58	; 0x3a
 8006c50:	d11c      	bne.n	8006c8c <get_ldnumber+0x76>
			tp = *path;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	60fa      	str	r2, [r7, #12]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	3b30      	subs	r3, #48	; 0x30
 8006c62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	d80e      	bhi.n	8006c88 <get_ldnumber+0x72>
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d10a      	bne.n	8006c88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d807      	bhi.n	8006c88 <get_ldnumber+0x72>
					vol = (int)i;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	e002      	b.n	8006c92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c90:	693b      	ldr	r3, [r7, #16]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	70da      	strb	r2, [r3, #3]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff7e 	bl	8006bbc <move_window>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <check_fs+0x2a>
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	e038      	b.n	8006d3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3334      	adds	r3, #52	; 0x34
 8006cce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff fece 	bl	8006a74 <ld_word>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d001      	beq.n	8006ce8 <check_fs+0x48>
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e029      	b.n	8006d3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cee:	2be9      	cmp	r3, #233	; 0xe9
 8006cf0:	d009      	beq.n	8006d06 <check_fs+0x66>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cf8:	2beb      	cmp	r3, #235	; 0xeb
 8006cfa:	d11e      	bne.n	8006d3a <check_fs+0x9a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d02:	2b90      	cmp	r3, #144	; 0x90
 8006d04:	d119      	bne.n	8006d3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3334      	adds	r3, #52	; 0x34
 8006d0a:	3336      	adds	r3, #54	; 0x36
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fec9 	bl	8006aa4 <ld_dword>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	4a0a      	ldr	r2, [pc, #40]	; (8006d44 <check_fs+0xa4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <check_fs+0x82>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e00c      	b.n	8006d3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3334      	adds	r3, #52	; 0x34
 8006d26:	3352      	adds	r3, #82	; 0x52
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff febb 	bl	8006aa4 <ld_dword>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4a05      	ldr	r2, [pc, #20]	; (8006d48 <check_fs+0xa8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <check_fs+0x9a>
 8006d36:	2300      	movs	r3, #0
 8006d38:	e000      	b.n	8006d3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d3a:	2302      	movs	r3, #2
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	00544146 	.word	0x00544146
 8006d48:	33544146 	.word	0x33544146

08006d4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b096      	sub	sp, #88	; 0x58
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff ff58 	bl	8006c16 <get_ldnumber>
 8006d66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da01      	bge.n	8006d72 <find_volume+0x26>
 8006d6e:	230b      	movs	r3, #11
 8006d70:	e22d      	b.n	80071ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d72:	4aa1      	ldr	r2, [pc, #644]	; (8006ff8 <find_volume+0x2ac>)
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <find_volume+0x3a>
 8006d82:	230c      	movs	r3, #12
 8006d84:	e223      	b.n	80071ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01a      	beq.n	8006dd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fde7 	bl	8006974 <disk_status>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10c      	bne.n	8006dd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <find_volume+0x82>
 8006dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006dca:	230a      	movs	r3, #10
 8006dcc:	e1ff      	b.n	80071ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e1fd      	b.n	80071ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff fddf 	bl	80069a8 <disk_initialize>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006df0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e1e6      	b.n	80071ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <find_volume+0xca>
 8006e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e12:	230a      	movs	r3, #10
 8006e14:	e1db      	b.n	80071ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e1e:	f7ff ff3f 	bl	8006ca0 <check_fs>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d149      	bne.n	8006ec4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e30:	2300      	movs	r3, #0
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
 8006e34:	e01e      	b.n	8006e74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e44:	4413      	add	r3, r2
 8006e46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <find_volume+0x114>
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	3308      	adds	r3, #8
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff fe24 	bl	8006aa4 <ld_dword>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	e000      	b.n	8006e62 <find_volume+0x116>
 8006e60:	2200      	movs	r2, #0
 8006e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	3358      	adds	r3, #88	; 0x58
 8006e68:	443b      	add	r3, r7
 8006e6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e70:	3301      	adds	r3, #1
 8006e72:	643b      	str	r3, [r7, #64]	; 0x40
 8006e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d9dd      	bls.n	8006e36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <find_volume+0x13e>
 8006e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e86:	3b01      	subs	r3, #1
 8006e88:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	3358      	adds	r3, #88	; 0x58
 8006e90:	443b      	add	r3, r7
 8006e92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <find_volume+0x15e>
 8006e9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ea2:	f7ff fefd 	bl	8006ca0 <check_fs>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	e000      	b.n	8006eac <find_volume+0x160>
 8006eaa:	2303      	movs	r3, #3
 8006eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d905      	bls.n	8006ec4 <find_volume+0x178>
 8006eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eba:	3301      	adds	r3, #1
 8006ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d9e2      	bls.n	8006e8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d101      	bne.n	8006ed0 <find_volume+0x184>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e17e      	b.n	80071ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d901      	bls.n	8006edc <find_volume+0x190>
 8006ed8:	230d      	movs	r3, #13
 8006eda:	e178      	b.n	80071ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	3334      	adds	r3, #52	; 0x34
 8006ee0:	330b      	adds	r3, #11
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fdc6 	bl	8006a74 <ld_word>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eee:	d001      	beq.n	8006ef4 <find_volume+0x1a8>
 8006ef0:	230d      	movs	r3, #13
 8006ef2:	e16c      	b.n	80071ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	3334      	adds	r3, #52	; 0x34
 8006ef8:	3316      	adds	r3, #22
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fdba 	bl	8006a74 <ld_word>
 8006f00:	4603      	mov	r3, r0
 8006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <find_volume+0x1cc>
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	3334      	adds	r3, #52	; 0x34
 8006f0e:	3324      	adds	r3, #36	; 0x24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fdc7 	bl	8006aa4 <ld_dword>
 8006f16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f1c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d005      	beq.n	8006f3c <find_volume+0x1f0>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	789b      	ldrb	r3, [r3, #2]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d001      	beq.n	8006f3c <find_volume+0x1f0>
 8006f38:	230d      	movs	r3, #13
 8006f3a:	e148      	b.n	80071ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	789b      	ldrb	r3, [r3, #2]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	895b      	ldrh	r3, [r3, #10]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <find_volume+0x224>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	895b      	ldrh	r3, [r3, #10]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	895b      	ldrh	r3, [r3, #10]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <find_volume+0x228>
 8006f70:	230d      	movs	r3, #13
 8006f72:	e12c      	b.n	80071ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f76:	3334      	adds	r3, #52	; 0x34
 8006f78:	3311      	adds	r3, #17
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fd7a 	bl	8006a74 <ld_word>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	891b      	ldrh	r3, [r3, #8]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <find_volume+0x24e>
 8006f96:	230d      	movs	r3, #13
 8006f98:	e119      	b.n	80071ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	3334      	adds	r3, #52	; 0x34
 8006f9e:	3313      	adds	r3, #19
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fd67 	bl	8006a74 <ld_word>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <find_volume+0x272>
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	3334      	adds	r3, #52	; 0x34
 8006fb4:	3320      	adds	r3, #32
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fd74 	bl	8006aa4 <ld_dword>
 8006fbc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	3334      	adds	r3, #52	; 0x34
 8006fc2:	330e      	adds	r3, #14
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fd55 	bl	8006a74 <ld_word>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <find_volume+0x28c>
 8006fd4:	230d      	movs	r3, #13
 8006fd6:	e0fa      	b.n	80071ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006fd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fdc:	4413      	add	r3, r2
 8006fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe0:	8912      	ldrh	r2, [r2, #8]
 8006fe2:	0912      	lsrs	r2, r2, #4
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d204      	bcs.n	8006ffc <find_volume+0x2b0>
 8006ff2:	230d      	movs	r3, #13
 8006ff4:	e0eb      	b.n	80071ce <find_volume+0x482>
 8006ff6:	bf00      	nop
 8006ff8:	2000ce78 	.word	0x2000ce78
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007004:	8952      	ldrh	r2, [r2, #10]
 8007006:	fbb3 f3f2 	udiv	r3, r3, r2
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <find_volume+0x2ca>
 8007012:	230d      	movs	r3, #13
 8007014:	e0db      	b.n	80071ce <find_volume+0x482>
		fmt = FS_FAT32;
 8007016:	2303      	movs	r3, #3
 8007018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007022:	4293      	cmp	r3, r2
 8007024:	d802      	bhi.n	800702c <find_volume+0x2e0>
 8007026:	2302      	movs	r3, #2
 8007028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007032:	4293      	cmp	r3, r2
 8007034:	d802      	bhi.n	800703c <find_volume+0x2f0>
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007048:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800704a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800704c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704e:	441a      	add	r2, r3
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	441a      	add	r2, r3
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800705e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007062:	2b03      	cmp	r3, #3
 8007064:	d11e      	bne.n	80070a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	3334      	adds	r3, #52	; 0x34
 800706a:	332a      	adds	r3, #42	; 0x2a
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fd01 	bl	8006a74 <ld_word>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <find_volume+0x330>
 8007078:	230d      	movs	r3, #13
 800707a:	e0a8      	b.n	80071ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	891b      	ldrh	r3, [r3, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <find_volume+0x33c>
 8007084:	230d      	movs	r3, #13
 8007086:	e0a2      	b.n	80071ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	3334      	adds	r3, #52	; 0x34
 800708c:	332c      	adds	r3, #44	; 0x2c
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fd08 	bl	8006aa4 <ld_dword>
 8007094:	4602      	mov	r2, r0
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	647b      	str	r3, [r7, #68]	; 0x44
 80070a2:	e01f      	b.n	80070e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	891b      	ldrh	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <find_volume+0x364>
 80070ac:	230d      	movs	r3, #13
 80070ae:	e08e      	b.n	80071ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b6:	441a      	add	r2, r3
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d103      	bne.n	80070cc <find_volume+0x380>
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	e00a      	b.n	80070e2 <find_volume+0x396>
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	085a      	lsrs	r2, r3, #1
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80070e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070ee:	0a5b      	lsrs	r3, r3, #9
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d201      	bcs.n	80070f8 <find_volume+0x3ac>
 80070f4:	230d      	movs	r3, #13
 80070f6:	e06a      	b.n	80071ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	615a      	str	r2, [r3, #20]
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800710e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007112:	2b03      	cmp	r3, #3
 8007114:	d149      	bne.n	80071aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	3334      	adds	r3, #52	; 0x34
 800711a:	3330      	adds	r3, #48	; 0x30
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fca9 	bl	8006a74 <ld_word>
 8007122:	4603      	mov	r3, r0
 8007124:	2b01      	cmp	r3, #1
 8007126:	d140      	bne.n	80071aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800712a:	3301      	adds	r3, #1
 800712c:	4619      	mov	r1, r3
 800712e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007130:	f7ff fd44 	bl	8006bbc <move_window>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d137      	bne.n	80071aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	2200      	movs	r2, #0
 800713e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	3334      	adds	r3, #52	; 0x34
 8007144:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fc93 	bl	8006a74 <ld_word>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007156:	429a      	cmp	r2, r3
 8007158:	d127      	bne.n	80071aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	3334      	adds	r3, #52	; 0x34
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fca0 	bl	8006aa4 <ld_dword>
 8007164:	4603      	mov	r3, r0
 8007166:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <find_volume+0x48c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d11e      	bne.n	80071aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	3334      	adds	r3, #52	; 0x34
 8007170:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fc95 	bl	8006aa4 <ld_dword>
 800717a:	4603      	mov	r3, r0
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <find_volume+0x490>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d113      	bne.n	80071aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	3334      	adds	r3, #52	; 0x34
 8007186:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fc8a 	bl	8006aa4 <ld_dword>
 8007190:	4602      	mov	r2, r0
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	3334      	adds	r3, #52	; 0x34
 800719a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fc80 	bl	8006aa4 <ld_dword>
 80071a4:	4602      	mov	r2, r0
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80071b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <find_volume+0x494>)
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <find_volume+0x494>)
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <find_volume+0x494>)
 80071c0:	881a      	ldrh	r2, [r3, #0]
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80071c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071c8:	f7ff fc90 	bl	8006aec <clear_lock>
#endif
	return FR_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3758      	adds	r7, #88	; 0x58
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	41615252 	.word	0x41615252
 80071dc:	61417272 	.word	0x61417272
 80071e0:	2000ce80 	.word	0x2000ce80

080071e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071f6:	f107 0310 	add.w	r3, r7, #16
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fd0b 	bl	8006c16 <get_ldnumber>
 8007200:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	2b00      	cmp	r3, #0
 8007206:	da01      	bge.n	800720c <f_mount+0x28>
 8007208:	230b      	movs	r3, #11
 800720a:	e02b      	b.n	8007264 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800720c:	4a17      	ldr	r2, [pc, #92]	; (800726c <f_mount+0x88>)
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007214:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800721c:	69b8      	ldr	r0, [r7, #24]
 800721e:	f7ff fc65 	bl	8006aec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	490d      	ldr	r1, [pc, #52]	; (800726c <f_mount+0x88>)
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <f_mount+0x66>
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d001      	beq.n	800724e <f_mount+0x6a>
 800724a:	2300      	movs	r3, #0
 800724c:	e00a      	b.n	8007264 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800724e:	f107 010c 	add.w	r1, r7, #12
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	2200      	movs	r2, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fd77 	bl	8006d4c <find_volume>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007262:	7dfb      	ldrb	r3, [r7, #23]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	2000ce78 	.word	0x2000ce78

08007270 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 8007288:	7b9b      	ldrb	r3, [r3, #14]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b01      	cmp	r3, #1
 800728e:	d831      	bhi.n	80072f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007290:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 8007292:	7b9b      	ldrb	r3, [r3, #14]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 800729a:	2100      	movs	r1, #0
 800729c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800729e:	4b19      	ldr	r3, [pc, #100]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072a0:	7b9b      	ldrb	r3, [r3, #14]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	4a17      	ldr	r2, [pc, #92]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072b0:	7b9b      	ldrb	r3, [r3, #14]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072b8:	4413      	add	r3, r2
 80072ba:	79fa      	ldrb	r2, [r7, #7]
 80072bc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072c0:	7b9b      	ldrb	r3, [r3, #14]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	b2d1      	uxtb	r1, r2
 80072c8:	4a0e      	ldr	r2, [pc, #56]	; (8007304 <FATFS_LinkDriverEx+0x94>)
 80072ca:	7391      	strb	r1, [r2, #14]
 80072cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072ce:	7dbb      	ldrb	r3, [r7, #22]
 80072d0:	3330      	adds	r3, #48	; 0x30
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3301      	adds	r3, #1
 80072dc:	223a      	movs	r2, #58	; 0x3a
 80072de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3302      	adds	r3, #2
 80072e4:	222f      	movs	r2, #47	; 0x2f
 80072e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3303      	adds	r3, #3
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	2000cea4 	.word	0x2000cea4

08007308 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007312:	2200      	movs	r2, #0
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ffaa 	bl	8007270 <FATFS_LinkDriverEx>
 800731c:	4603      	mov	r3, r0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <HAL_Init+0x40>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a0d      	ldr	r2, [pc, #52]	; (8007368 <HAL_Init+0x40>)
 8007332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007338:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <HAL_Init+0x40>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <HAL_Init+0x40>)
 800733e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_Init+0x40>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a07      	ldr	r2, [pc, #28]	; (8007368 <HAL_Init+0x40>)
 800734a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007350:	2003      	movs	r0, #3
 8007352:	f000 fead 	bl	80080b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007356:	2000      	movs	r0, #0
 8007358:	f000 f808 	bl	800736c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800735c:	f7fa f856 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40023c00 	.word	0x40023c00

0800736c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007374:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <HAL_InitTick+0x54>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <HAL_InitTick+0x58>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	4619      	mov	r1, r3
 800737e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007382:	fbb3 f3f1 	udiv	r3, r3, r1
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fed3 	bl	8008136 <HAL_SYSTICK_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e00e      	b.n	80073b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d80a      	bhi.n	80073b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073a0:	2200      	movs	r2, #0
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	f000 fe8d 	bl	80080c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073ac:	4a06      	ldr	r2, [pc, #24]	; (80073c8 <HAL_InitTick+0x5c>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	e000      	b.n	80073b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000000 	.word	0x20000000
 80073c4:	200000c4 	.word	0x200000c4
 80073c8:	200000c0 	.word	0x200000c0

080073cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_IncTick+0x20>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <HAL_IncTick+0x24>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4413      	add	r3, r2
 80073dc:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <HAL_IncTick+0x24>)
 80073de:	6013      	str	r3, [r2, #0]
}
 80073e0:	bf00      	nop
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	200000c4 	.word	0x200000c4
 80073f0:	2000ceb4 	.word	0x2000ceb4

080073f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	af00      	add	r7, sp, #0
  return uwTick;
 80073f8:	4b03      	ldr	r3, [pc, #12]	; (8007408 <HAL_GetTick+0x14>)
 80073fa:	681b      	ldr	r3, [r3, #0]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	2000ceb4 	.word	0x2000ceb4

0800740c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007414:	f7ff ffee 	bl	80073f4 <HAL_GetTick>
 8007418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d005      	beq.n	8007432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <HAL_Delay+0x44>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007432:	bf00      	nop
 8007434:	f7ff ffde 	bl	80073f4 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d8f7      	bhi.n	8007434 <HAL_Delay+0x28>
  {
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	200000c4 	.word	0x200000c4

08007454 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e033      	b.n	80074d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fd fc7a 	bl	8004d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b00      	cmp	r3, #0
 8007490:	d118      	bne.n	80074c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800749a:	f023 0302 	bic.w	r3, r3, #2
 800749e:	f043 0202 	orr.w	r2, r3, #2
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb86 	bl	8007bb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	f043 0201 	orr.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
 80074c2:	e001      	b.n	80074c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	2300      	movs	r3, #0
 80074e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	bf0c      	ite	eq
 80074f8:	2301      	moveq	r3, #1
 80074fa:	2300      	movne	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b20      	cmp	r3, #32
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d049      	beq.n	80075b0 <HAL_ADC_IRQHandler+0xd6>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d046      	beq.n	80075b0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d12b      	bne.n	80075a0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800754c:	2b00      	cmp	r3, #0
 800754e:	d127      	bne.n	80075a0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800755a:	2b00      	cmp	r3, #0
 800755c:	d006      	beq.n	800756c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007568:	2b00      	cmp	r3, #0
 800756a:	d119      	bne.n	80075a0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0220 	bic.w	r2, r2, #32
 800757a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f9af 	bl	8007904 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0212 	mvn.w	r2, #18
 80075ae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d057      	beq.n	8007692 <HAL_ADC_IRQHandler+0x1b8>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d054      	beq.n	8007692 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d139      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007618:	2b00      	cmp	r3, #0
 800761a:	d006      	beq.n	800762a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d12b      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8007634:	2b00      	cmp	r3, #0
 8007636:	d124      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007642:	2b00      	cmp	r3, #0
 8007644:	d11d      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800764a:	2b00      	cmp	r3, #0
 800764c:	d119      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800765c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fc16 	bl	8007eb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f06f 020c 	mvn.w	r2, #12
 8007690:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d017      	beq.n	80076f4 <HAL_ADC_IRQHandler+0x21a>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10d      	bne.n	80076f4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f921 	bl	800792c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f06f 0201 	mvn.w	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b20      	cmp	r3, #32
 8007700:	bf0c      	ite	eq
 8007702:	2301      	moveq	r3, #1
 8007704:	2300      	movne	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007718:	bf0c      	ite	eq
 800771a:	2301      	moveq	r3, #1
 800771c:	2300      	movne	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d015      	beq.n	8007754 <HAL_ADC_IRQHandler+0x27a>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d012      	beq.n	8007754 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	f043 0202 	orr.w	r2, r3, #2
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f06f 0220 	mvn.w	r2, #32
 8007742:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8fb 	bl	8007940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f06f 0220 	mvn.w	r2, #32
 8007752:	601a      	str	r2, [r3, #0]
  }
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_ADC_Start_DMA+0x1e>
 8007776:	2302      	movs	r3, #2
 8007778:	e0b1      	b.n	80078de <HAL_ADC_Start_DMA+0x182>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b01      	cmp	r3, #1
 800778e:	d018      	beq.n	80077c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f042 0201 	orr.w	r2, r2, #1
 800779e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80077a0:	4b51      	ldr	r3, [pc, #324]	; (80078e8 <HAL_ADC_Start_DMA+0x18c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a51      	ldr	r2, [pc, #324]	; (80078ec <HAL_ADC_Start_DMA+0x190>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	0c9a      	lsrs	r2, r3, #18
 80077ac:	4613      	mov	r3, r2
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80077b4:	e002      	b.n	80077bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f9      	bne.n	80077b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	f040 8085 	bne.w	80078dc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800780c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007810:	d106      	bne.n	8007820 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	f023 0206 	bic.w	r2, r3, #6
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	645a      	str	r2, [r3, #68]	; 0x44
 800781e:	e002      	b.n	8007826 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800782e:	4b30      	ldr	r3, [pc, #192]	; (80078f0 <HAL_ADC_Start_DMA+0x194>)
 8007830:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	4a2f      	ldr	r2, [pc, #188]	; (80078f4 <HAL_ADC_Start_DMA+0x198>)
 8007838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	4a2e      	ldr	r2, [pc, #184]	; (80078f8 <HAL_ADC_Start_DMA+0x19c>)
 8007840:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	4a2d      	ldr	r2, [pc, #180]	; (80078fc <HAL_ADC_Start_DMA+0x1a0>)
 8007848:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007852:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007862:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007872:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	334c      	adds	r3, #76	; 0x4c
 800787e:	4619      	mov	r1, r3
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f000 fd70 	bl	8008368 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d11c      	bne.n	80078dc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078b0:	609a      	str	r2, [r3, #8]
 80078b2:	e013      	b.n	80078dc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a11      	ldr	r2, [pc, #68]	; (8007900 <HAL_ADC_Start_DMA+0x1a4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d10e      	bne.n	80078dc <HAL_ADC_Start_DMA+0x180>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078da:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000000 	.word	0x20000000
 80078ec:	431bde83 	.word	0x431bde83
 80078f0:	40012300 	.word	0x40012300
 80078f4:	08007db1 	.word	0x08007db1
 80078f8:	08007e6b 	.word	0x08007e6b
 80078fc:	08007e87 	.word	0x08007e87
 8007900:	40012000 	.word	0x40012000

08007904 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_ADC_ConfigChannel+0x1c>
 800796c:	2302      	movs	r3, #2
 800796e:	e113      	b.n	8007b98 <HAL_ADC_ConfigChannel+0x244>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b09      	cmp	r3, #9
 800797e:	d925      	bls.n	80079cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68d9      	ldr	r1, [r3, #12]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	461a      	mov	r2, r3
 800798e:	4613      	mov	r3, r2
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4413      	add	r3, r2
 8007994:	3b1e      	subs	r3, #30
 8007996:	2207      	movs	r2, #7
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	43da      	mvns	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	400a      	ands	r2, r1
 80079a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68d9      	ldr	r1, [r3, #12]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4618      	mov	r0, r3
 80079b8:	4603      	mov	r3, r0
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	4403      	add	r3, r0
 80079be:	3b1e      	subs	r3, #30
 80079c0:	409a      	lsls	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e022      	b.n	8007a12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6919      	ldr	r1, [r3, #16]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	4613      	mov	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4413      	add	r3, r2
 80079e0:	2207      	movs	r2, #7
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	400a      	ands	r2, r1
 80079ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6919      	ldr	r1, [r3, #16]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4618      	mov	r0, r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4403      	add	r3, r0
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b06      	cmp	r3, #6
 8007a18:	d824      	bhi.n	8007a64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	3b05      	subs	r3, #5
 8007a2c:	221f      	movs	r2, #31
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43da      	mvns	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	400a      	ands	r2, r1
 8007a3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	4618      	mov	r0, r3
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	3b05      	subs	r3, #5
 8007a56:	fa00 f203 	lsl.w	r2, r0, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	635a      	str	r2, [r3, #52]	; 0x34
 8007a62:	e04c      	b.n	8007afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b0c      	cmp	r3, #12
 8007a6a:	d824      	bhi.n	8007ab6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3b23      	subs	r3, #35	; 0x23
 8007a7e:	221f      	movs	r2, #31
 8007a80:	fa02 f303 	lsl.w	r3, r2, r3
 8007a84:	43da      	mvns	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	400a      	ands	r2, r1
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3b23      	subs	r3, #35	; 0x23
 8007aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ab4:	e023      	b.n	8007afe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3b41      	subs	r3, #65	; 0x41
 8007ac8:	221f      	movs	r2, #31
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43da      	mvns	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	400a      	ands	r2, r1
 8007ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	3b41      	subs	r3, #65	; 0x41
 8007af2:	fa00 f203 	lsl.w	r2, r0, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007afe:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <HAL_ADC_ConfigChannel+0x250>)
 8007b00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <HAL_ADC_ConfigChannel+0x254>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d10f      	bne.n	8007b2c <HAL_ADC_ConfigChannel+0x1d8>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b12      	cmp	r3, #18
 8007b12:	d10b      	bne.n	8007b2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1d      	ldr	r2, [pc, #116]	; (8007ba8 <HAL_ADC_ConfigChannel+0x254>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d12b      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x23a>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1c      	ldr	r2, [pc, #112]	; (8007bac <HAL_ADC_ConfigChannel+0x258>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d003      	beq.n	8007b48 <HAL_ADC_ConfigChannel+0x1f4>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b11      	cmp	r3, #17
 8007b46:	d122      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a11      	ldr	r2, [pc, #68]	; (8007bac <HAL_ADC_ConfigChannel+0x258>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d111      	bne.n	8007b8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b6a:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <HAL_ADC_ConfigChannel+0x25c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a11      	ldr	r2, [pc, #68]	; (8007bb4 <HAL_ADC_ConfigChannel+0x260>)
 8007b70:	fba2 2303 	umull	r2, r3, r2, r3
 8007b74:	0c9a      	lsrs	r2, r3, #18
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b80:	e002      	b.n	8007b88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f9      	bne.n	8007b82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	40012300 	.word	0x40012300
 8007ba8:	40012000 	.word	0x40012000
 8007bac:	10000012 	.word	0x10000012
 8007bb0:	20000000 	.word	0x20000000
 8007bb4:	431bde83 	.word	0x431bde83

08007bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007bc0:	4b79      	ldr	r3, [pc, #484]	; (8007da8 <ADC_Init+0x1f0>)
 8007bc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6859      	ldr	r1, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	021a      	lsls	r2, r3, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6859      	ldr	r1, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6899      	ldr	r1, [r3, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	4a58      	ldr	r2, [pc, #352]	; (8007dac <ADC_Init+0x1f4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d022      	beq.n	8007c96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6899      	ldr	r1, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689a      	ldr	r2, [r3, #8]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6899      	ldr	r1, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	e00f      	b.n	8007cb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0202 	bic.w	r2, r2, #2
 8007cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6899      	ldr	r1, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7e1b      	ldrb	r3, [r3, #24]
 8007cd0:	005a      	lsls	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01b      	beq.n	8007d1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cf2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6859      	ldr	r1, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	035a      	lsls	r2, r3, #13
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	e007      	b.n	8007d2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	051a      	lsls	r2, r3, #20
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6899      	ldr	r1, [r3, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d6e:	025a      	lsls	r2, r3, #9
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6899      	ldr	r1, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	029a      	lsls	r2, r3, #10
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	40012300 	.word	0x40012300
 8007dac:	0f000001 	.word	0x0f000001

08007db0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d13c      	bne.n	8007e44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d12b      	bne.n	8007e3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d127      	bne.n	8007e3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d119      	bne.n	8007e3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0220 	bic.w	r2, r2, #32
 8007e16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f043 0201 	orr.w	r2, r3, #1
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff fd61 	bl	8007904 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e42:	e00e      	b.n	8007e62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fd75 	bl	8007940 <HAL_ADC_ErrorCallback>
}
 8007e56:	e004      	b.n	8007e62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff fd4d 	bl	8007918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2240      	movs	r2, #64	; 0x40
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	f043 0204 	orr.w	r2, r3, #4
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff fd4a 	bl	8007940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <__NVIC_SetPriorityGrouping+0x44>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007efa:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <__NVIC_SetPriorityGrouping+0x44>)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	60d3      	str	r3, [r2, #12]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	e000ed00 	.word	0xe000ed00

08007f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <__NVIC_GetPriorityGrouping+0x18>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	0a1b      	lsrs	r3, r3, #8
 8007f1a:	f003 0307 	and.w	r3, r3, #7
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000ed00 	.word	0xe000ed00

08007f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db0b      	blt.n	8007f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	f003 021f 	and.w	r2, r3, #31
 8007f44:	4907      	ldr	r1, [pc, #28]	; (8007f64 <__NVIC_EnableIRQ+0x38>)
 8007f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	e000e100 	.word	0xe000e100

08007f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	db12      	blt.n	8007fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	f003 021f 	and.w	r2, r3, #31
 8007f80:	490a      	ldr	r1, [pc, #40]	; (8007fac <__NVIC_DisableIRQ+0x44>)
 8007f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f86:	095b      	lsrs	r3, r3, #5
 8007f88:	2001      	movs	r0, #1
 8007f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f8e:	3320      	adds	r3, #32
 8007f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f94:	f3bf 8f4f 	dsb	sy
}
 8007f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007f9a:	f3bf 8f6f 	isb	sy
}
 8007f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	e000e100 	.word	0xe000e100

08007fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	db0a      	blt.n	8007fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	490c      	ldr	r1, [pc, #48]	; (8007ffc <__NVIC_SetPriority+0x4c>)
 8007fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fce:	0112      	lsls	r2, r2, #4
 8007fd0:	b2d2      	uxtb	r2, r2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fd8:	e00a      	b.n	8007ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	4908      	ldr	r1, [pc, #32]	; (8008000 <__NVIC_SetPriority+0x50>)
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	3b04      	subs	r3, #4
 8007fe8:	0112      	lsls	r2, r2, #4
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	440b      	add	r3, r1
 8007fee:	761a      	strb	r2, [r3, #24]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	e000e100 	.word	0xe000e100
 8008000:	e000ed00 	.word	0xe000ed00

08008004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008004:	b480      	push	{r7}
 8008006:	b089      	sub	sp, #36	; 0x24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f1c3 0307 	rsb	r3, r3, #7
 800801e:	2b04      	cmp	r3, #4
 8008020:	bf28      	it	cs
 8008022:	2304      	movcs	r3, #4
 8008024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3304      	adds	r3, #4
 800802a:	2b06      	cmp	r3, #6
 800802c:	d902      	bls.n	8008034 <NVIC_EncodePriority+0x30>
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3b03      	subs	r3, #3
 8008032:	e000      	b.n	8008036 <NVIC_EncodePriority+0x32>
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008038:	f04f 32ff 	mov.w	r2, #4294967295
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43da      	mvns	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	401a      	ands	r2, r3
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800804c:	f04f 31ff 	mov.w	r1, #4294967295
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	fa01 f303 	lsl.w	r3, r1, r3
 8008056:	43d9      	mvns	r1, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800805c:	4313      	orrs	r3, r2
         );
}
 800805e:	4618      	mov	r0, r3
 8008060:	3724      	adds	r7, #36	; 0x24
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3b01      	subs	r3, #1
 8008078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800807c:	d301      	bcc.n	8008082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800807e:	2301      	movs	r3, #1
 8008080:	e00f      	b.n	80080a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008082:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <SysTick_Config+0x40>)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3b01      	subs	r3, #1
 8008088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800808a:	210f      	movs	r1, #15
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	f7ff ff8e 	bl	8007fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <SysTick_Config+0x40>)
 8008096:	2200      	movs	r2, #0
 8008098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800809a:	4b04      	ldr	r3, [pc, #16]	; (80080ac <SysTick_Config+0x40>)
 800809c:	2207      	movs	r2, #7
 800809e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	e000e010 	.word	0xe000e010

080080b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ff05 	bl	8007ec8 <__NVIC_SetPriorityGrouping>
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b086      	sub	sp, #24
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	4603      	mov	r3, r0
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080d8:	f7ff ff1a 	bl	8007f10 <__NVIC_GetPriorityGrouping>
 80080dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	f7ff ff8e 	bl	8008004 <NVIC_EncodePriority>
 80080e8:	4602      	mov	r2, r0
 80080ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff5d 	bl	8007fb0 <__NVIC_SetPriority>
}
 80080f6:	bf00      	nop
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	4603      	mov	r3, r0
 8008106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff0d 	bl	8007f2c <__NVIC_EnableIRQ>
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff1d 	bl	8007f68 <__NVIC_DisableIRQ>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff ff94 	bl	800806c <SysTick_Config>
 8008144:	4603      	mov	r3, r0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800815c:	f7ff f94a 	bl	80073f4 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e099      	b.n	80082a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800818c:	e00f      	b.n	80081ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800818e:	f7ff f931 	bl	80073f4 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b05      	cmp	r3, #5
 800819a:	d908      	bls.n	80081ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2203      	movs	r2, #3
 80081a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e078      	b.n	80082a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e8      	bne.n	800818e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4b38      	ldr	r3, [pc, #224]	; (80082a8 <HAL_DMA_Init+0x158>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	2b04      	cmp	r3, #4
 8008206:	d107      	bne.n	8008218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	4313      	orrs	r3, r2
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b04      	cmp	r3, #4
 8008240:	d117      	bne.n	8008272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fafb 	bl	8008850 <DMA_CheckFifoParam>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2240      	movs	r2, #64	; 0x40
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800826e:	2301      	movs	r3, #1
 8008270:	e016      	b.n	80082a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fab2 	bl	80087e4 <DMA_CalcBaseAndBitshift>
 8008280:	4603      	mov	r3, r0
 8008282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008288:	223f      	movs	r2, #63	; 0x3f
 800828a:	409a      	lsls	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	f010803f 	.word	0xf010803f

080082ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e050      	b.n	8008360 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d101      	bne.n	80082ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80082ca:	2302      	movs	r3, #2
 80082cc:	e048      	b.n	8008360 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2221      	movs	r2, #33	; 0x21
 800830c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa68 	bl	80087e4 <DMA_CalcBaseAndBitshift>
 8008314:	4603      	mov	r3, r0
 8008316:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008340:	223f      	movs	r2, #63	; 0x3f
 8008342:	409a      	lsls	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_DMA_Start_IT+0x26>
 800838a:	2302      	movs	r3, #2
 800838c:	e040      	b.n	8008410 <HAL_DMA_Start_IT+0xa8>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d12f      	bne.n	8008402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f9e6 	bl	8008788 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c0:	223f      	movs	r2, #63	; 0x3f
 80083c2:	409a      	lsls	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0216 	orr.w	r2, r2, #22
 80083d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d007      	beq.n	80083f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0208 	orr.w	r2, r2, #8
 80083ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e005      	b.n	800840e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800840a:	2302      	movs	r3, #2
 800840c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d004      	beq.n	8008436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2280      	movs	r2, #128	; 0x80
 8008430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e00c      	b.n	8008450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2205      	movs	r2, #5
 800843a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008468:	4b8e      	ldr	r3, [pc, #568]	; (80086a4 <HAL_DMA_IRQHandler+0x248>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a8e      	ldr	r2, [pc, #568]	; (80086a8 <HAL_DMA_IRQHandler+0x24c>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	0a9b      	lsrs	r3, r3, #10
 8008474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008486:	2208      	movs	r2, #8
 8008488:	409a      	lsls	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4013      	ands	r3, r2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01a      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0204 	bic.w	r2, r2, #4
 80084ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b4:	2208      	movs	r2, #8
 80084b6:	409a      	lsls	r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c0:	f043 0201 	orr.w	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084cc:	2201      	movs	r2, #1
 80084ce:	409a      	lsls	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d012      	beq.n	80084fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ea:	2201      	movs	r2, #1
 80084ec:	409a      	lsls	r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f043 0202 	orr.w	r2, r3, #2
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	2204      	movs	r2, #4
 8008504:	409a      	lsls	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d012      	beq.n	8008534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00b      	beq.n	8008534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008520:	2204      	movs	r2, #4
 8008522:	409a      	lsls	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852c:	f043 0204 	orr.w	r2, r3, #4
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008538:	2210      	movs	r2, #16
 800853a:	409a      	lsls	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4013      	ands	r3, r2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d043      	beq.n	80085cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d03c      	beq.n	80085cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008556:	2210      	movs	r2, #16
 8008558:	409a      	lsls	r2, r3
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d018      	beq.n	800859e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d108      	bne.n	800858c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	d024      	beq.n	80085cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
 800858a:	e01f      	b.n	80085cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01b      	beq.n	80085cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
 800859c:	e016      	b.n	80085cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d107      	bne.n	80085bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0208 	bic.w	r2, r2, #8
 80085ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d0:	2220      	movs	r2, #32
 80085d2:	409a      	lsls	r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 808f 	beq.w	80086fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8087 	beq.w	80086fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f2:	2220      	movs	r2, #32
 80085f4:	409a      	lsls	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b05      	cmp	r3, #5
 8008604:	d136      	bne.n	8008674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0216 	bic.w	r2, r2, #22
 8008614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	695a      	ldr	r2, [r3, #20]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d103      	bne.n	8008636 <HAL_DMA_IRQHandler+0x1da>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008632:	2b00      	cmp	r3, #0
 8008634:	d007      	beq.n	8008646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0208 	bic.w	r2, r2, #8
 8008644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864a:	223f      	movs	r2, #63	; 0x3f
 800864c:	409a      	lsls	r2, r3
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	2b00      	cmp	r3, #0
 8008668:	d07e      	beq.n	8008768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
        }
        return;
 8008672:	e079      	b.n	8008768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01d      	beq.n	80086be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10d      	bne.n	80086ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008694:	2b00      	cmp	r3, #0
 8008696:	d031      	beq.n	80086fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
 80086a0:	e02c      	b.n	80086fc <HAL_DMA_IRQHandler+0x2a0>
 80086a2:	bf00      	nop
 80086a4:	20000000 	.word	0x20000000
 80086a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d023      	beq.n	80086fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
 80086bc:	e01e      	b.n	80086fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10f      	bne.n	80086ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0210 	bic.w	r2, r2, #16
 80086da:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008700:	2b00      	cmp	r3, #0
 8008702:	d032      	beq.n	800876a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d022      	beq.n	8008756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2205      	movs	r2, #5
 8008714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0201 	bic.w	r2, r2, #1
 8008726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	429a      	cmp	r2, r3
 8008732:	d307      	bcc.n	8008744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f2      	bne.n	8008728 <HAL_DMA_IRQHandler+0x2cc>
 8008742:	e000      	b.n	8008746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008744:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
 8008766:	e000      	b.n	800876a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008768:	bf00      	nop
    }
  }
}
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b40      	cmp	r3, #64	; 0x40
 80087b4:	d108      	bne.n	80087c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80087c6:	e007      	b.n	80087d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	60da      	str	r2, [r3, #12]
}
 80087d8:	bf00      	nop
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	3b10      	subs	r3, #16
 80087f4:	4a14      	ldr	r2, [pc, #80]	; (8008848 <DMA_CalcBaseAndBitshift+0x64>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80087fe:	4a13      	ldr	r2, [pc, #76]	; (800884c <DMA_CalcBaseAndBitshift+0x68>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4413      	add	r3, r2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d909      	bls.n	8008826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	659a      	str	r2, [r3, #88]	; 0x58
 8008824:	e007      	b.n	8008836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	aaaaaaab 	.word	0xaaaaaaab
 800884c:	08020024 	.word	0x08020024

08008850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d11f      	bne.n	80088aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d856      	bhi.n	800891e <DMA_CheckFifoParam+0xce>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <DMA_CheckFifoParam+0x28>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	08008889 	.word	0x08008889
 800887c:	0800889b 	.word	0x0800889b
 8008880:	08008889 	.word	0x08008889
 8008884:	0800891f 	.word	0x0800891f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d046      	beq.n	8008922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008898:	e043      	b.n	8008922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088a2:	d140      	bne.n	8008926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088a8:	e03d      	b.n	8008926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b2:	d121      	bne.n	80088f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d837      	bhi.n	800892a <DMA_CheckFifoParam+0xda>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <DMA_CheckFifoParam+0x70>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088d7 	.word	0x080088d7
 80088c8:	080088d1 	.word	0x080088d1
 80088cc:	080088e9 	.word	0x080088e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
      break;
 80088d4:	e030      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d025      	beq.n	800892e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80088e6:	e022      	b.n	800892e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088f0:	d11f      	bne.n	8008932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80088f6:	e01c      	b.n	8008932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d903      	bls.n	8008906 <DMA_CheckFifoParam+0xb6>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d003      	beq.n	800890c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008904:	e018      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	e015      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
      break;
 800891c:	e00b      	b.n	8008936 <DMA_CheckFifoParam+0xe6>
      break;
 800891e:	bf00      	nop
 8008920:	e00a      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;
 8008922:	bf00      	nop
 8008924:	e008      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;
 8008926:	bf00      	nop
 8008928:	e006      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;
 800892a:	bf00      	nop
 800892c:	e004      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;   
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <DMA_CheckFifoParam+0xe8>
      break;
 8008936:	bf00      	nop
    }
  } 
  
  return status; 
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop

08008948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008948:	b480      	push	{r7}
 800894a:	b089      	sub	sp, #36	; 0x24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008956:	2300      	movs	r3, #0
 8008958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	e159      	b.n	8008c18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008964:	2201      	movs	r2, #1
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	fa02 f303 	lsl.w	r3, r2, r3
 800896c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	4013      	ands	r3, r2
 8008976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	429a      	cmp	r2, r3
 800897e:	f040 8148 	bne.w	8008c12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d00b      	beq.n	80089a2 <HAL_GPIO_Init+0x5a>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d007      	beq.n	80089a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008996:	2b11      	cmp	r3, #17
 8008998:	d003      	beq.n	80089a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2b12      	cmp	r3, #18
 80089a0:	d130      	bne.n	8008a04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	2203      	movs	r2, #3
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	43db      	mvns	r3, r3
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	4013      	ands	r3, r2
 80089b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80089d8:	2201      	movs	r2, #1
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	43db      	mvns	r3, r3
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 0201 	and.w	r2, r3, #1
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	2203      	movs	r2, #3
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	43db      	mvns	r3, r3
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	4013      	ands	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689a      	ldr	r2, [r3, #8]
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	fa02 f303 	lsl.w	r3, r2, r3
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d003      	beq.n	8008a44 <HAL_GPIO_Init+0xfc>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b12      	cmp	r3, #18
 8008a42:	d123      	bne.n	8008a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	08da      	lsrs	r2, r3, #3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3208      	adds	r2, #8
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	220f      	movs	r2, #15
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	43db      	mvns	r3, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4013      	ands	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	08da      	lsrs	r2, r3, #3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3208      	adds	r2, #8
 8008a86:	69b9      	ldr	r1, [r7, #24]
 8008a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	2203      	movs	r2, #3
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f003 0203 	and.w	r2, r3, #3
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 80a2 	beq.w	8008c12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	4b57      	ldr	r3, [pc, #348]	; (8008c30 <HAL_GPIO_Init+0x2e8>)
 8008ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad6:	4a56      	ldr	r2, [pc, #344]	; (8008c30 <HAL_GPIO_Init+0x2e8>)
 8008ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008adc:	6453      	str	r3, [r2, #68]	; 0x44
 8008ade:	4b54      	ldr	r3, [pc, #336]	; (8008c30 <HAL_GPIO_Init+0x2e8>)
 8008ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008aea:	4a52      	ldr	r2, [pc, #328]	; (8008c34 <HAL_GPIO_Init+0x2ec>)
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	089b      	lsrs	r3, r3, #2
 8008af0:	3302      	adds	r3, #2
 8008af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	220f      	movs	r2, #15
 8008b02:	fa02 f303 	lsl.w	r3, r2, r3
 8008b06:	43db      	mvns	r3, r3
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a49      	ldr	r2, [pc, #292]	; (8008c38 <HAL_GPIO_Init+0x2f0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d019      	beq.n	8008b4a <HAL_GPIO_Init+0x202>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a48      	ldr	r2, [pc, #288]	; (8008c3c <HAL_GPIO_Init+0x2f4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <HAL_GPIO_Init+0x1fe>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a47      	ldr	r2, [pc, #284]	; (8008c40 <HAL_GPIO_Init+0x2f8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00d      	beq.n	8008b42 <HAL_GPIO_Init+0x1fa>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a46      	ldr	r2, [pc, #280]	; (8008c44 <HAL_GPIO_Init+0x2fc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d007      	beq.n	8008b3e <HAL_GPIO_Init+0x1f6>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a45      	ldr	r2, [pc, #276]	; (8008c48 <HAL_GPIO_Init+0x300>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d101      	bne.n	8008b3a <HAL_GPIO_Init+0x1f2>
 8008b36:	2304      	movs	r3, #4
 8008b38:	e008      	b.n	8008b4c <HAL_GPIO_Init+0x204>
 8008b3a:	2307      	movs	r3, #7
 8008b3c:	e006      	b.n	8008b4c <HAL_GPIO_Init+0x204>
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e004      	b.n	8008b4c <HAL_GPIO_Init+0x204>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e002      	b.n	8008b4c <HAL_GPIO_Init+0x204>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <HAL_GPIO_Init+0x204>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	f002 0203 	and.w	r2, r2, #3
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	4093      	lsls	r3, r2
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b5c:	4935      	ldr	r1, [pc, #212]	; (8008c34 <HAL_GPIO_Init+0x2ec>)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	089b      	lsrs	r3, r3, #2
 8008b62:	3302      	adds	r3, #2
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b6a:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	43db      	mvns	r3, r3
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	4013      	ands	r3, r2
 8008b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b8e:	4a2f      	ldr	r2, [pc, #188]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008b94:	4b2d      	ldr	r3, [pc, #180]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008bb8:	4a24      	ldr	r2, [pc, #144]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008bbe:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008be2:	4a1a      	ldr	r2, [pc, #104]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c0c:	4a0f      	ldr	r2, [pc, #60]	; (8008c4c <HAL_GPIO_Init+0x304>)
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	3301      	adds	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b0f      	cmp	r3, #15
 8008c1c:	f67f aea2 	bls.w	8008964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40023800 	.word	0x40023800
 8008c34:	40013800 	.word	0x40013800
 8008c38:	40020000 	.word	0x40020000
 8008c3c:	40020400 	.word	0x40020400
 8008c40:	40020800 	.word	0x40020800
 8008c44:	40020c00 	.word	0x40020c00
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	40013c00 	.word	0x40013c00

08008c50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	e0bb      	b.n	8008de4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	f040 80ab 	bne.w	8008dde <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c88:	4a5c      	ldr	r2, [pc, #368]	; (8008dfc <HAL_GPIO_DeInit+0x1ac>)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	3302      	adds	r3, #2
 8008c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	220f      	movs	r2, #15
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a54      	ldr	r2, [pc, #336]	; (8008e00 <HAL_GPIO_DeInit+0x1b0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d019      	beq.n	8008ce6 <HAL_GPIO_DeInit+0x96>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a53      	ldr	r2, [pc, #332]	; (8008e04 <HAL_GPIO_DeInit+0x1b4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <HAL_GPIO_DeInit+0x92>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a52      	ldr	r2, [pc, #328]	; (8008e08 <HAL_GPIO_DeInit+0x1b8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00d      	beq.n	8008cde <HAL_GPIO_DeInit+0x8e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a51      	ldr	r2, [pc, #324]	; (8008e0c <HAL_GPIO_DeInit+0x1bc>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <HAL_GPIO_DeInit+0x8a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a50      	ldr	r2, [pc, #320]	; (8008e10 <HAL_GPIO_DeInit+0x1c0>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <HAL_GPIO_DeInit+0x86>
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	e008      	b.n	8008ce8 <HAL_GPIO_DeInit+0x98>
 8008cd6:	2307      	movs	r3, #7
 8008cd8:	e006      	b.n	8008ce8 <HAL_GPIO_DeInit+0x98>
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e004      	b.n	8008ce8 <HAL_GPIO_DeInit+0x98>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e002      	b.n	8008ce8 <HAL_GPIO_DeInit+0x98>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <HAL_GPIO_DeInit+0x98>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	f002 0203 	and.w	r2, r2, #3
 8008cee:	0092      	lsls	r2, r2, #2
 8008cf0:	4093      	lsls	r3, r2
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d132      	bne.n	8008d5e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008cf8:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	4944      	ldr	r1, [pc, #272]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008d06:	4b43      	ldr	r3, [pc, #268]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	4941      	ldr	r1, [pc, #260]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008d14:	4b3f      	ldr	r3, [pc, #252]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	493d      	ldr	r1, [pc, #244]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008d22:	4b3c      	ldr	r3, [pc, #240]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	493a      	ldr	r1, [pc, #232]	; (8008e14 <HAL_GPIO_DeInit+0x1c4>)
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	220f      	movs	r2, #15
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008d40:	4a2e      	ldr	r2, [pc, #184]	; (8008dfc <HAL_GPIO_DeInit+0x1ac>)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	089b      	lsrs	r3, r3, #2
 8008d46:	3302      	adds	r3, #2
 8008d48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	43da      	mvns	r2, r3
 8008d50:	482a      	ldr	r0, [pc, #168]	; (8008dfc <HAL_GPIO_DeInit+0x1ac>)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	089b      	lsrs	r3, r3, #2
 8008d56:	400a      	ands	r2, r1
 8008d58:	3302      	adds	r3, #2
 8008d5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	2103      	movs	r1, #3
 8008d68:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	401a      	ands	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	08da      	lsrs	r2, r3, #3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3208      	adds	r2, #8
 8008d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	220f      	movs	r2, #15
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	08d2      	lsrs	r2, r2, #3
 8008d94:	4019      	ands	r1, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3208      	adds	r2, #8
 8008d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	2103      	movs	r1, #3
 8008da8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dac:	43db      	mvns	r3, r3
 8008dae:	401a      	ands	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	2101      	movs	r1, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	401a      	ands	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	2103      	movs	r1, #3
 8008dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd6:	43db      	mvns	r3, r3
 8008dd8:	401a      	ands	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	3301      	adds	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2b0f      	cmp	r3, #15
 8008de8:	f67f af40 	bls.w	8008c6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40013800 	.word	0x40013800
 8008e00:	40020000 	.word	0x40020000
 8008e04:	40020400 	.word	0x40020400
 8008e08:	40020800 	.word	0x40020800
 8008e0c:	40020c00 	.word	0x40020c00
 8008e10:	40021000 	.word	0x40021000
 8008e14:	40013c00 	.word	0x40013c00

08008e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	887b      	ldrh	r3, [r7, #2]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
 8008e34:	e001      	b.n	8008e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
 8008e54:	4613      	mov	r3, r2
 8008e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e58:	787b      	ldrb	r3, [r7, #1]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e5e:	887a      	ldrh	r2, [r7, #2]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e64:	e003      	b.n	8008e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e66:	887b      	ldrh	r3, [r7, #2]
 8008e68:	041a      	lsls	r2, r3, #16
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	619a      	str	r2, [r3, #24]
}
 8008e6e:	bf00      	nop
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e25e      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d075      	beq.n	8008f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e9a:	4b88      	ldr	r3, [pc, #544]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 030c 	and.w	r3, r3, #12
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d00c      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ea6:	4b85      	ldr	r3, [pc, #532]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d112      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008eb2:	4b82      	ldr	r3, [pc, #520]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ebe:	d10b      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec0:	4b7e      	ldr	r3, [pc, #504]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d05b      	beq.n	8008f84 <HAL_RCC_OscConfig+0x108>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d157      	bne.n	8008f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e239      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee0:	d106      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x74>
 8008ee2:	4b76      	ldr	r3, [pc, #472]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a75      	ldr	r2, [pc, #468]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	e01d      	b.n	8008f2c <HAL_RCC_OscConfig+0xb0>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCC_OscConfig+0x98>
 8008efa:	4b70      	ldr	r3, [pc, #448]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a6f      	ldr	r2, [pc, #444]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4b6d      	ldr	r3, [pc, #436]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a6c      	ldr	r2, [pc, #432]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e00b      	b.n	8008f2c <HAL_RCC_OscConfig+0xb0>
 8008f14:	4b69      	ldr	r3, [pc, #420]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a68      	ldr	r2, [pc, #416]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	4b66      	ldr	r3, [pc, #408]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a65      	ldr	r2, [pc, #404]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d013      	beq.n	8008f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f34:	f7fe fa5e 	bl	80073f4 <HAL_GetTick>
 8008f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f3c:	f7fe fa5a 	bl	80073f4 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b64      	cmp	r3, #100	; 0x64
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e1fe      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f4e:	4b5b      	ldr	r3, [pc, #364]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0f0      	beq.n	8008f3c <HAL_RCC_OscConfig+0xc0>
 8008f5a:	e014      	b.n	8008f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f5c:	f7fe fa4a 	bl	80073f4 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f62:	e008      	b.n	8008f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f64:	f7fe fa46 	bl	80073f4 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b64      	cmp	r3, #100	; 0x64
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e1ea      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f76:	4b51      	ldr	r3, [pc, #324]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f0      	bne.n	8008f64 <HAL_RCC_OscConfig+0xe8>
 8008f82:	e000      	b.n	8008f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d063      	beq.n	800905a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f92:	4b4a      	ldr	r3, [pc, #296]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 030c 	and.w	r3, r3, #12
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f9e:	4b47      	ldr	r3, [pc, #284]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d11c      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008faa:	4b44      	ldr	r3, [pc, #272]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d116      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fb6:	4b41      	ldr	r3, [pc, #260]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <HAL_RCC_OscConfig+0x152>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d001      	beq.n	8008fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e1be      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fce:	4b3b      	ldr	r3, [pc, #236]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	4937      	ldr	r1, [pc, #220]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fe2:	e03a      	b.n	800905a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d020      	beq.n	800902e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fec:	4b34      	ldr	r3, [pc, #208]	; (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff2:	f7fe f9ff 	bl	80073f4 <HAL_GetTick>
 8008ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ff8:	e008      	b.n	800900c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ffa:	f7fe f9fb 	bl	80073f4 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d901      	bls.n	800900c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e19f      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800900c:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f0      	beq.n	8008ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009018:	4b28      	ldr	r3, [pc, #160]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	4925      	ldr	r1, [pc, #148]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8009028:	4313      	orrs	r3, r2
 800902a:	600b      	str	r3, [r1, #0]
 800902c:	e015      	b.n	800905a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800902e:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009034:	f7fe f9de 	bl	80073f4 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800903c:	f7fe f9da 	bl	80073f4 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e17e      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800904e:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	2b00      	cmp	r3, #0
 8009064:	d036      	beq.n	80090d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d016      	beq.n	800909c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <HAL_RCC_OscConfig+0x248>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009074:	f7fe f9be 	bl	80073f4 <HAL_GetTick>
 8009078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800907c:	f7fe f9ba 	bl	80073f4 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e15e      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800908e:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_RCC_OscConfig+0x240>)
 8009090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0f0      	beq.n	800907c <HAL_RCC_OscConfig+0x200>
 800909a:	e01b      	b.n	80090d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <HAL_RCC_OscConfig+0x248>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090a2:	f7fe f9a7 	bl	80073f4 <HAL_GetTick>
 80090a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090a8:	e00e      	b.n	80090c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090aa:	f7fe f9a3 	bl	80073f4 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d907      	bls.n	80090c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e147      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
 80090bc:	40023800 	.word	0x40023800
 80090c0:	42470000 	.word	0x42470000
 80090c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090c8:	4b88      	ldr	r3, [pc, #544]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80090ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1ea      	bne.n	80090aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8097 	beq.w	8009210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e6:	4b81      	ldr	r3, [pc, #516]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10f      	bne.n	8009112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090f2:	2300      	movs	r3, #0
 80090f4:	60bb      	str	r3, [r7, #8]
 80090f6:	4b7d      	ldr	r3, [pc, #500]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	4a7c      	ldr	r2, [pc, #496]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80090fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009100:	6413      	str	r3, [r2, #64]	; 0x40
 8009102:	4b7a      	ldr	r3, [pc, #488]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800910a:	60bb      	str	r3, [r7, #8]
 800910c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800910e:	2301      	movs	r3, #1
 8009110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009112:	4b77      	ldr	r3, [pc, #476]	; (80092f0 <HAL_RCC_OscConfig+0x474>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	2b00      	cmp	r3, #0
 800911c:	d118      	bne.n	8009150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800911e:	4b74      	ldr	r3, [pc, #464]	; (80092f0 <HAL_RCC_OscConfig+0x474>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a73      	ldr	r2, [pc, #460]	; (80092f0 <HAL_RCC_OscConfig+0x474>)
 8009124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800912a:	f7fe f963 	bl	80073f4 <HAL_GetTick>
 800912e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009130:	e008      	b.n	8009144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009132:	f7fe f95f 	bl	80073f4 <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	2b02      	cmp	r3, #2
 800913e:	d901      	bls.n	8009144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e103      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009144:	4b6a      	ldr	r3, [pc, #424]	; (80092f0 <HAL_RCC_OscConfig+0x474>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0f0      	beq.n	8009132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d106      	bne.n	8009166 <HAL_RCC_OscConfig+0x2ea>
 8009158:	4b64      	ldr	r3, [pc, #400]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800915a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915c:	4a63      	ldr	r2, [pc, #396]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800915e:	f043 0301 	orr.w	r3, r3, #1
 8009162:	6713      	str	r3, [r2, #112]	; 0x70
 8009164:	e01c      	b.n	80091a0 <HAL_RCC_OscConfig+0x324>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2b05      	cmp	r3, #5
 800916c:	d10c      	bne.n	8009188 <HAL_RCC_OscConfig+0x30c>
 800916e:	4b5f      	ldr	r3, [pc, #380]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	4a5e      	ldr	r2, [pc, #376]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009174:	f043 0304 	orr.w	r3, r3, #4
 8009178:	6713      	str	r3, [r2, #112]	; 0x70
 800917a:	4b5c      	ldr	r3, [pc, #368]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	4a5b      	ldr	r2, [pc, #364]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009180:	f043 0301 	orr.w	r3, r3, #1
 8009184:	6713      	str	r3, [r2, #112]	; 0x70
 8009186:	e00b      	b.n	80091a0 <HAL_RCC_OscConfig+0x324>
 8009188:	4b58      	ldr	r3, [pc, #352]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800918a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918c:	4a57      	ldr	r2, [pc, #348]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	6713      	str	r3, [r2, #112]	; 0x70
 8009194:	4b55      	ldr	r3, [pc, #340]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	4a54      	ldr	r2, [pc, #336]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800919a:	f023 0304 	bic.w	r3, r3, #4
 800919e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d015      	beq.n	80091d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a8:	f7fe f924 	bl	80073f4 <HAL_GetTick>
 80091ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091ae:	e00a      	b.n	80091c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091b0:	f7fe f920 	bl	80073f4 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80091be:	4293      	cmp	r3, r2
 80091c0:	d901      	bls.n	80091c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e0c2      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091c6:	4b49      	ldr	r3, [pc, #292]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0ee      	beq.n	80091b0 <HAL_RCC_OscConfig+0x334>
 80091d2:	e014      	b.n	80091fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091d4:	f7fe f90e 	bl	80073f4 <HAL_GetTick>
 80091d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091da:	e00a      	b.n	80091f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091dc:	f7fe f90a 	bl	80073f4 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e0ac      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091f2:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1ee      	bne.n	80091dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d105      	bne.n	8009210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009204:	4b39      	ldr	r3, [pc, #228]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	4a38      	ldr	r2, [pc, #224]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800920a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800920e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8098 	beq.w	800934a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800921a:	4b34      	ldr	r3, [pc, #208]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 030c 	and.w	r3, r3, #12
 8009222:	2b08      	cmp	r3, #8
 8009224:	d05c      	beq.n	80092e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d141      	bne.n	80092b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <HAL_RCC_OscConfig+0x478>)
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009234:	f7fe f8de 	bl	80073f4 <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800923c:	f7fe f8da 	bl	80073f4 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e07e      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800924e:	4b27      	ldr	r3, [pc, #156]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f0      	bne.n	800923c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	69da      	ldr	r2, [r3, #28]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	019b      	lsls	r3, r3, #6
 800926a:	431a      	orrs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	3b01      	subs	r3, #1
 8009274:	041b      	lsls	r3, r3, #16
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	061b      	lsls	r3, r3, #24
 800927e:	491b      	ldr	r1, [pc, #108]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 8009280:	4313      	orrs	r3, r2
 8009282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009284:	4b1b      	ldr	r3, [pc, #108]	; (80092f4 <HAL_RCC_OscConfig+0x478>)
 8009286:	2201      	movs	r2, #1
 8009288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800928a:	f7fe f8b3 	bl	80073f4 <HAL_GetTick>
 800928e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009290:	e008      	b.n	80092a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009292:	f7fe f8af 	bl	80073f4 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d901      	bls.n	80092a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e053      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a4:	4b11      	ldr	r3, [pc, #68]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0f0      	beq.n	8009292 <HAL_RCC_OscConfig+0x416>
 80092b0:	e04b      	b.n	800934a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <HAL_RCC_OscConfig+0x478>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b8:	f7fe f89c 	bl	80073f4 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092c0:	f7fe f898 	bl	80073f4 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e03c      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092d2:	4b06      	ldr	r3, [pc, #24]	; (80092ec <HAL_RCC_OscConfig+0x470>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f0      	bne.n	80092c0 <HAL_RCC_OscConfig+0x444>
 80092de:	e034      	b.n	800934a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d107      	bne.n	80092f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e02f      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
 80092ec:	40023800 	.word	0x40023800
 80092f0:	40007000 	.word	0x40007000
 80092f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092f8:	4b16      	ldr	r3, [pc, #88]	; (8009354 <HAL_RCC_OscConfig+0x4d8>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	429a      	cmp	r2, r3
 800930a:	d11c      	bne.n	8009346 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009316:	429a      	cmp	r2, r3
 8009318:	d115      	bne.n	8009346 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009320:	4013      	ands	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009326:	4293      	cmp	r3, r2
 8009328:	d10d      	bne.n	8009346 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009334:	429a      	cmp	r2, r3
 8009336:	d106      	bne.n	8009346 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009342:	429a      	cmp	r2, r3
 8009344:	d001      	beq.n	800934a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40023800 	.word	0x40023800

08009358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e0cc      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800936c:	4b68      	ldr	r3, [pc, #416]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d90c      	bls.n	8009394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800937a:	4b65      	ldr	r3, [pc, #404]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009382:	4b63      	ldr	r3, [pc, #396]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d001      	beq.n	8009394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0b8      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d020      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093ac:	4b59      	ldr	r3, [pc, #356]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	4a58      	ldr	r2, [pc, #352]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80093b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0308 	and.w	r3, r3, #8
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093c4:	4b53      	ldr	r3, [pc, #332]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	4a52      	ldr	r2, [pc, #328]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80093ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093d0:	4b50      	ldr	r3, [pc, #320]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	494d      	ldr	r1, [pc, #308]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d044      	beq.n	8009478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d107      	bne.n	8009406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093f6:	4b47      	ldr	r3, [pc, #284]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d119      	bne.n	8009436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e07f      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d003      	beq.n	8009416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009412:	2b03      	cmp	r3, #3
 8009414:	d107      	bne.n	8009426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009416:	4b3f      	ldr	r3, [pc, #252]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e06f      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009426:	4b3b      	ldr	r3, [pc, #236]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0302 	and.w	r3, r3, #2
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e067      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009436:	4b37      	ldr	r3, [pc, #220]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f023 0203 	bic.w	r2, r3, #3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4934      	ldr	r1, [pc, #208]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 8009444:	4313      	orrs	r3, r2
 8009446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009448:	f7fd ffd4 	bl	80073f4 <HAL_GetTick>
 800944c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800944e:	e00a      	b.n	8009466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009450:	f7fd ffd0 	bl	80073f4 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f241 3288 	movw	r2, #5000	; 0x1388
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e04f      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009466:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f003 020c 	and.w	r2, r3, #12
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	429a      	cmp	r2, r3
 8009476:	d1eb      	bne.n	8009450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009478:	4b25      	ldr	r3, [pc, #148]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d20c      	bcs.n	80094a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009486:	4b22      	ldr	r3, [pc, #136]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800948e:	4b20      	ldr	r3, [pc, #128]	; (8009510 <HAL_RCC_ClockConfig+0x1b8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d001      	beq.n	80094a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e032      	b.n	8009506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d008      	beq.n	80094be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094ac:	4b19      	ldr	r3, [pc, #100]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	4916      	ldr	r1, [pc, #88]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094ca:	4b12      	ldr	r3, [pc, #72]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	490e      	ldr	r1, [pc, #56]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80094de:	f000 f821 	bl	8009524 <HAL_RCC_GetSysClockFreq>
 80094e2:	4602      	mov	r2, r0
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <HAL_RCC_ClockConfig+0x1bc>)
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	091b      	lsrs	r3, r3, #4
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	490a      	ldr	r1, [pc, #40]	; (8009518 <HAL_RCC_ClockConfig+0x1c0>)
 80094f0:	5ccb      	ldrb	r3, [r1, r3]
 80094f2:	fa22 f303 	lsr.w	r3, r2, r3
 80094f6:	4a09      	ldr	r2, [pc, #36]	; (800951c <HAL_RCC_ClockConfig+0x1c4>)
 80094f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <HAL_RCC_ClockConfig+0x1c8>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd ff34 	bl	800736c <HAL_InitTick>

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	40023c00 	.word	0x40023c00
 8009514:	40023800 	.word	0x40023800
 8009518:	08012734 	.word	0x08012734
 800951c:	20000000 	.word	0x20000000
 8009520:	200000c0 	.word	0x200000c0

08009524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009528:	b090      	sub	sp, #64	; 0x40
 800952a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	2300      	movs	r3, #0
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009534:	2300      	movs	r3, #0
 8009536:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800953c:	4b59      	ldr	r3, [pc, #356]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 030c 	and.w	r3, r3, #12
 8009544:	2b08      	cmp	r3, #8
 8009546:	d00d      	beq.n	8009564 <HAL_RCC_GetSysClockFreq+0x40>
 8009548:	2b08      	cmp	r3, #8
 800954a:	f200 80a1 	bhi.w	8009690 <HAL_RCC_GetSysClockFreq+0x16c>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_RCC_GetSysClockFreq+0x34>
 8009552:	2b04      	cmp	r3, #4
 8009554:	d003      	beq.n	800955e <HAL_RCC_GetSysClockFreq+0x3a>
 8009556:	e09b      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009558:	4b53      	ldr	r3, [pc, #332]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800955a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800955c:	e09b      	b.n	8009696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800955e:	4b53      	ldr	r3, [pc, #332]	; (80096ac <HAL_RCC_GetSysClockFreq+0x188>)
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009562:	e098      	b.n	8009696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009564:	4b4f      	ldr	r3, [pc, #316]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800956e:	4b4d      	ldr	r3, [pc, #308]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d028      	beq.n	80095cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800957a:	4b4a      	ldr	r3, [pc, #296]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	099b      	lsrs	r3, r3, #6
 8009580:	2200      	movs	r2, #0
 8009582:	623b      	str	r3, [r7, #32]
 8009584:	627a      	str	r2, [r7, #36]	; 0x24
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800958c:	2100      	movs	r1, #0
 800958e:	4b47      	ldr	r3, [pc, #284]	; (80096ac <HAL_RCC_GetSysClockFreq+0x188>)
 8009590:	fb03 f201 	mul.w	r2, r3, r1
 8009594:	2300      	movs	r3, #0
 8009596:	fb00 f303 	mul.w	r3, r0, r3
 800959a:	4413      	add	r3, r2
 800959c:	4a43      	ldr	r2, [pc, #268]	; (80096ac <HAL_RCC_GetSysClockFreq+0x188>)
 800959e:	fba0 1202 	umull	r1, r2, r0, r2
 80095a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095a4:	460a      	mov	r2, r1
 80095a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80095a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095aa:	4413      	add	r3, r2
 80095ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	2200      	movs	r2, #0
 80095b2:	61bb      	str	r3, [r7, #24]
 80095b4:	61fa      	str	r2, [r7, #28]
 80095b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80095be:	f7f7 fb7b 	bl	8000cb8 <__aeabi_uldivmod>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4613      	mov	r3, r2
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095ca:	e053      	b.n	8009674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095cc:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	099b      	lsrs	r3, r3, #6
 80095d2:	2200      	movs	r2, #0
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	617a      	str	r2, [r7, #20]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80095de:	f04f 0b00 	mov.w	fp, #0
 80095e2:	4652      	mov	r2, sl
 80095e4:	465b      	mov	r3, fp
 80095e6:	f04f 0000 	mov.w	r0, #0
 80095ea:	f04f 0100 	mov.w	r1, #0
 80095ee:	0159      	lsls	r1, r3, #5
 80095f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095f4:	0150      	lsls	r0, r2, #5
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	ebb2 080a 	subs.w	r8, r2, sl
 80095fe:	eb63 090b 	sbc.w	r9, r3, fp
 8009602:	f04f 0200 	mov.w	r2, #0
 8009606:	f04f 0300 	mov.w	r3, #0
 800960a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800960e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009616:	ebb2 0408 	subs.w	r4, r2, r8
 800961a:	eb63 0509 	sbc.w	r5, r3, r9
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	f04f 0300 	mov.w	r3, #0
 8009626:	00eb      	lsls	r3, r5, #3
 8009628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800962c:	00e2      	lsls	r2, r4, #3
 800962e:	4614      	mov	r4, r2
 8009630:	461d      	mov	r5, r3
 8009632:	eb14 030a 	adds.w	r3, r4, sl
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	eb45 030b 	adc.w	r3, r5, fp
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	f04f 0200 	mov.w	r2, #0
 8009642:	f04f 0300 	mov.w	r3, #0
 8009646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800964a:	4629      	mov	r1, r5
 800964c:	028b      	lsls	r3, r1, #10
 800964e:	4621      	mov	r1, r4
 8009650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009654:	4621      	mov	r1, r4
 8009656:	028a      	lsls	r2, r1, #10
 8009658:	4610      	mov	r0, r2
 800965a:	4619      	mov	r1, r3
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	2200      	movs	r2, #0
 8009660:	60bb      	str	r3, [r7, #8]
 8009662:	60fa      	str	r2, [r7, #12]
 8009664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009668:	f7f7 fb26 	bl	8000cb8 <__aeabi_uldivmod>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4613      	mov	r3, r2
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009674:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	0c1b      	lsrs	r3, r3, #16
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	3301      	adds	r3, #1
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	fbb2 f3f3 	udiv	r3, r2, r3
 800968c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800968e:	e002      	b.n	8009696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009692:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009698:	4618      	mov	r0, r3
 800969a:	3740      	adds	r7, #64	; 0x40
 800969c:	46bd      	mov	sp, r7
 800969e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096a2:	bf00      	nop
 80096a4:	40023800 	.word	0x40023800
 80096a8:	00f42400 	.word	0x00f42400
 80096ac:	017d7840 	.word	0x017d7840

080096b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096b4:	4b03      	ldr	r3, [pc, #12]	; (80096c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80096b6:	681b      	ldr	r3, [r3, #0]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	20000000 	.word	0x20000000

080096c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80096cc:	f7ff fff0 	bl	80096b0 <HAL_RCC_GetHCLKFreq>
 80096d0:	4602      	mov	r2, r0
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	0a9b      	lsrs	r3, r3, #10
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	4903      	ldr	r1, [pc, #12]	; (80096ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80096de:	5ccb      	ldrb	r3, [r1, r3]
 80096e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40023800 	.word	0x40023800
 80096ec:	08012744 	.word	0x08012744

080096f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80096f4:	f7ff ffdc 	bl	80096b0 <HAL_RCC_GetHCLKFreq>
 80096f8:	4602      	mov	r2, r0
 80096fa:	4b05      	ldr	r3, [pc, #20]	; (8009710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	0b5b      	lsrs	r3, r3, #13
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	4903      	ldr	r1, [pc, #12]	; (8009714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009706:	5ccb      	ldrb	r3, [r1, r3]
 8009708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800970c:	4618      	mov	r0, r3
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40023800 	.word	0x40023800
 8009714:	08012744 	.word	0x08012744

08009718 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e022      	b.n	8009770 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7fa fb6f 	bl	8003e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2203      	movs	r2, #3
 8009746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f814 	bl	8009778 <HAL_SD_InitCard>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e00a      	b.n	8009770 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009778:	b5b0      	push	{r4, r5, r7, lr}
 800977a:	b08e      	sub	sp, #56	; 0x38
 800977c:	af04      	add	r7, sp, #16
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009780:	2300      	movs	r3, #0
 8009782:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800978c:	2300      	movs	r3, #0
 800978e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009794:	2376      	movs	r3, #118	; 0x76
 8009796:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681d      	ldr	r5, [r3, #0]
 800979c:	466c      	mov	r4, sp
 800979e:	f107 0314 	add.w	r3, r7, #20
 80097a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097b0:	4628      	mov	r0, r5
 80097b2:	f003 fefd 	bl	800d5b0 <SDIO_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e031      	b.n	800982c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80097c8:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <HAL_SD_InitCard+0xbc>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f003 ff35 	bl	800d642 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80097d8:	4b16      	ldr	r3, [pc, #88]	; (8009834 <HAL_SD_InitCard+0xbc>)
 80097da:	2201      	movs	r2, #1
 80097dc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 ffe6 	bl	800a7b0 <SD_PowerON>
 80097e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e013      	b.n	800982c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 ff05 	bl	800a614 <SD_InitCard>
 800980a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00b      	beq.n	800982a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3728      	adds	r7, #40	; 0x28
 8009830:	46bd      	mov	sp, r7
 8009832:	bdb0      	pop	{r4, r5, r7, pc}
 8009834:	422580a0 	.word	0x422580a0

08009838 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08c      	sub	sp, #48	; 0x30
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d107      	bne.n	8009860 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e0c9      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	f040 80c2 	bne.w	80099f2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	441a      	add	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987e:	429a      	cmp	r2, r3
 8009880:	d907      	bls.n	8009892 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e0b0      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2203      	movs	r2, #3
 8009896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	6812      	ldr	r2, [r2, #0]
 80098ac:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	4a50      	ldr	r2, [pc, #320]	; (80099fc <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80098bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	4a4f      	ldr	r2, [pc, #316]	; (8009a00 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80098c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	2200      	movs	r2, #0
 80098cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3380      	adds	r3, #128	; 0x80
 80098d8:	4619      	mov	r1, r3
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	025b      	lsls	r3, r3, #9
 80098e0:	089b      	lsrs	r3, r3, #2
 80098e2:	f7fe fd41 	bl	8008368 <HAL_DMA_Start_IT>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80098fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a40      	ldr	r2, [pc, #256]	; (8009a04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e06b      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800991c:	4b3a      	ldr	r3, [pc, #232]	; (8009a08 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009926:	2b01      	cmp	r3, #1
 8009928:	d002      	beq.n	8009930 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	025b      	lsls	r3, r3, #9
 800992e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009938:	4618      	mov	r0, r3
 800993a:	f003 ff15 	bl	800d768 <SDMMC_CmdBlockLength>
 800993e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00f      	beq.n	8009966 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a2e      	ldr	r2, [pc, #184]	; (8009a04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800994c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	431a      	orrs	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e046      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009966:	f04f 33ff 	mov.w	r3, #4294967295
 800996a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	025b      	lsls	r3, r3, #9
 8009970:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009972:	2390      	movs	r3, #144	; 0x90
 8009974:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009976:	2302      	movs	r3, #2
 8009978:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800997e:	2301      	movs	r3, #1
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f107 0210 	add.w	r2, r7, #16
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f003 febf 	bl	800d710 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d90a      	bls.n	80099ae <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2282      	movs	r2, #130	; 0x82
 800999c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099a4:	4618      	mov	r0, r3
 80099a6:	f003 ff23 	bl	800d7f0 <SDMMC_CmdReadMultiBlock>
 80099aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80099ac:	e009      	b.n	80099c2 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2281      	movs	r2, #129	; 0x81
 80099b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ba:	4618      	mov	r0, r3
 80099bc:	f003 fef6 	bl	800d7ac <SDMMC_CmdReadSingleBlock>
 80099c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	431a      	orrs	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e002      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e000      	b.n	80099f4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80099f2:	2302      	movs	r3, #2
  }
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3730      	adds	r7, #48	; 0x30
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	0800a423 	.word	0x0800a423
 8009a00:	0800a495 	.word	0x0800a495
 8009a04:	004005ff 	.word	0x004005ff
 8009a08:	4225858c 	.word	0x4225858c

08009a0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d107      	bne.n	8009a34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e0ce      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	f040 80c7 	bne.w	8009bd0 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	441a      	add	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d907      	bls.n	8009a66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e0b5      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2203      	movs	r2, #3
 8009a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	6812      	ldr	r2, [r2, #0]
 8009a80:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	4a53      	ldr	r2, [pc, #332]	; (8009bdc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a96:	4a52      	ldr	r2, [pc, #328]	; (8009be0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009a98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d002      	beq.n	8009ab0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	025b      	lsls	r3, r3, #9
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f003 fe55 	bl	800d768 <SDMMC_CmdBlockLength>
 8009abe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00f      	beq.n	8009ae6 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a46      	ldr	r2, [pc, #280]	; (8009be4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e075      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d90a      	bls.n	8009b02 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	22a0      	movs	r2, #160	; 0xa0
 8009af0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009af8:	4618      	mov	r0, r3
 8009afa:	f003 febd 	bl	800d878 <SDMMC_CmdWriteMultiBlock>
 8009afe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009b00:	e009      	b.n	8009b16 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2290      	movs	r2, #144	; 0x90
 8009b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f003 fe90 	bl	800d834 <SDMMC_CmdWriteSingleBlock>
 8009b14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d012      	beq.n	8009b42 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a30      	ldr	r2, [pc, #192]	; (8009be4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e047      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009b42:	4b29      	ldr	r3, [pc, #164]	; (8009be8 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8009b44:	2201      	movs	r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009b4c:	68b9      	ldr	r1, [r7, #8]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3380      	adds	r3, #128	; 0x80
 8009b54:	461a      	mov	r2, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	025b      	lsls	r3, r3, #9
 8009b5a:	089b      	lsrs	r3, r3, #2
 8009b5c:	f7fe fc04 	bl	8008368 <HAL_DMA_Start_IT>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01c      	beq.n	8009ba0 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8009b74:	f023 0302 	bic.w	r3, r3, #2
 8009b78:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e018      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	025b      	lsls	r3, r3, #9
 8009baa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009bac:	2390      	movs	r3, #144	; 0x90
 8009bae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f107 0210 	add.w	r2, r7, #16
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f003 fda2 	bl	800d710 <SDIO_ConfigData>

      return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e000      	b.n	8009bd2 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009bd0:	2302      	movs	r3, #2
  }
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3730      	adds	r7, #48	; 0x30
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	0800a3f9 	.word	0x0800a3f9
 8009be0:	0800a495 	.word	0x0800a495
 8009be4:	004005ff 	.word	0x004005ff
 8009be8:	4225858c 	.word	0x4225858c

08009bec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d008      	beq.n	8009c1a <HAL_SD_IRQHandler+0x2e>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 0308 	and.w	r3, r3, #8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 ffe2 	bl	800abdc <SD_Read_IT>
 8009c18:	e165      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 808f 	beq.w	8009d48 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009c42:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009c46:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 0308 	and.w	r3, r3, #8
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d039      	beq.n	8009cd6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <HAL_SD_IRQHandler+0x8a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0320 	and.w	r3, r3, #32
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d011      	beq.n	8009c9a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f003 fe1e 	bl	800d8bc <SDMMC_CmdStopTransfer>
 8009c80:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f92f 	bl	8009ef8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <HAL_SD_IRQHandler+0xda>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fa f88a 	bl	8003de0 <HAL_SD_RxCpltCallback>
 8009ccc:	e10b      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7fa f896 	bl	8003e00 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009cd4:	e107      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8102 	beq.w	8009ee6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0320 	and.w	r3, r3, #32
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d011      	beq.n	8009d10 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f003 fde3 	bl	800d8bc <SDMMC_CmdStopTransfer>
 8009cf6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d008      	beq.n	8009d10 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f8f4 	bl	8009ef8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f040 80e5 	bne.w	8009ee6 <HAL_SD_IRQHandler+0x2fa>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f040 80df 	bne.w	8009ee6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0208 	bic.w	r2, r2, #8
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7fa f85d 	bl	8003e00 <HAL_SD_TxCpltCallback>
}
 8009d46:	e0ce      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <HAL_SD_IRQHandler+0x17c>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f003 0308 	and.w	r3, r3, #8
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 ff8c 	bl	800ac7e <SD_Write_IT>
 8009d66:	e0be      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6e:	f240 233a 	movw	r3, #570	; 0x23a
 8009d72:	4013      	ands	r3, r2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80b6 	beq.w	8009ee6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8c:	f043 0202 	orr.w	r2, r3, #2
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	f003 0308 	and.w	r3, r3, #8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d005      	beq.n	8009dae <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	f043 0208 	orr.w	r2, r3, #8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d005      	beq.n	8009dc8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	f043 0220 	orr.w	r2, r3, #32
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	f003 0310 	and.w	r3, r3, #16
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	f043 0210 	orr.w	r2, r3, #16
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d005      	beq.n	8009dfc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	f043 0208 	orr.w	r2, r3, #8
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f240 723a 	movw	r2, #1850	; 0x73a
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6812      	ldr	r2, [r2, #0]
 8009e10:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009e14:	f023 0302 	bic.w	r3, r3, #2
 8009e18:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f003 fd4c 	bl	800d8bc <SDMMC_CmdStopTransfer>
 8009e24:	4602      	mov	r2, r0
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f855 	bl	8009ef8 <HAL_SD_ErrorCallback>
}
 8009e4e:	e04a      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d045      	beq.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f003 0310 	and.w	r3, r3, #16
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <HAL_SD_IRQHandler+0x282>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d011      	beq.n	8009e92 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <HAL_SD_IRQHandler+0x304>)
 8009e74:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe facc 	bl	8008418 <HAL_DMA_Abort_IT>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d02f      	beq.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fb54 	bl	800a538 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009e90:	e029      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f003 0301 	and.w	r3, r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d104      	bne.n	8009ea6 <HAL_SD_IRQHandler+0x2ba>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d011      	beq.n	8009eca <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	4a12      	ldr	r2, [pc, #72]	; (8009ef4 <HAL_SD_IRQHandler+0x308>)
 8009eac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fab0 	bl	8008418 <HAL_DMA_Abort_IT>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d013      	beq.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fb6f 	bl	800a5a6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009ec8:	e00d      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f814 	bl	8009f0c <HAL_SD_AbortCallback>
}
 8009ee4:	e7ff      	b.n	8009ee6 <HAL_SD_IRQHandler+0x2fa>
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800a539 	.word	0x0800a539
 8009ef4:	0800a5a7 	.word	0x0800a5a7

08009ef8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f2e:	0f9b      	lsrs	r3, r3, #30
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f3a:	0e9b      	lsrs	r3, r3, #26
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f4c:	0e1b      	lsrs	r3, r3, #24
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f6a:	0a1b      	lsrs	r3, r3, #8
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f80:	0d1b      	lsrs	r3, r3, #20
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	f003 030f 	and.w	r3, r3, #15
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f9e:	0bdb      	lsrs	r3, r3, #15
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb0:	0b9b      	lsrs	r3, r3, #14
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc2:	0b5b      	lsrs	r3, r3, #13
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fd4:	0b1b      	lsrs	r3, r3, #12
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d163      	bne.n	800a0b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ff4:	009a      	lsls	r2, r3, #2
 8009ff6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a000:	0f92      	lsrs	r2, r2, #30
 800a002:	431a      	orrs	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00c:	0edb      	lsrs	r3, r3, #27
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a01e:	0e1b      	lsrs	r3, r3, #24
 800a020:	b2db      	uxtb	r3, r3
 800a022:	f003 0307 	and.w	r3, r3, #7
 800a026:	b2da      	uxtb	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a030:	0d5b      	lsrs	r3, r3, #21
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a042:	0c9b      	lsrs	r3, r3, #18
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a054:	0bdb      	lsrs	r3, r3, #15
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	7e1b      	ldrb	r3, [r3, #24]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	3302      	adds	r3, #2
 800a078:	2201      	movs	r2, #1
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a082:	fb03 f202 	mul.w	r2, r3, r2
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	7a1b      	ldrb	r3, [r3, #8]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	2201      	movs	r2, #1
 800a096:	409a      	lsls	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a0a4:	0a52      	lsrs	r2, r2, #9
 800a0a6:	fb03 f202 	mul.w	r2, r3, r2
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0b4:	661a      	str	r2, [r3, #96]	; 0x60
 800a0b6:	e031      	b.n	800a11c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d11d      	bne.n	800a0fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0c4:	041b      	lsls	r3, r3, #16
 800a0c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ce:	0c1b      	lsrs	r3, r3, #16
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	029a      	lsls	r2, r3, #10
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	661a      	str	r2, [r3, #96]	; 0x60
 800a0fa:	e00f      	b.n	800a11c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a58      	ldr	r2, [pc, #352]	; (800a264 <HAL_SD_GetCardCSD+0x344>)
 800a102:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e09d      	b.n	800a258 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a120:	0b9b      	lsrs	r3, r3, #14
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a132:	09db      	lsrs	r3, r3, #7
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a144:	b2db      	uxtb	r3, r3
 800a146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a154:	0fdb      	lsrs	r3, r3, #31
 800a156:	b2da      	uxtb	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a160:	0f5b      	lsrs	r3, r3, #29
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a172:	0e9b      	lsrs	r3, r3, #26
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a184:	0d9b      	lsrs	r3, r3, #22
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	b2da      	uxtb	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a196:	0d5b      	lsrs	r3, r3, #21
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	0bdb      	lsrs	r3, r3, #15
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1da:	0b9b      	lsrs	r3, r3, #14
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	0b5b      	lsrs	r3, r3, #13
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a202:	0b1b      	lsrs	r3, r3, #12
 800a204:	b2db      	uxtb	r3, r3
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a216:	0a9b      	lsrs	r3, r3, #10
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	b2da      	uxtb	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23e:	085b      	lsrs	r3, r3, #1
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	b2da      	uxtb	r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	004005ff 	.word	0x004005ff

0800a268 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a2c0:	b5b0      	push	{r4, r5, r7, lr}
 800a2c2:	b08e      	sub	sp, #56	; 0x38
 800a2c4:	af04      	add	r7, sp, #16
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d02e      	beq.n	800a338 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e0:	d106      	bne.n	800a2f0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	639a      	str	r2, [r3, #56]	; 0x38
 800a2ee:	e029      	b.n	800a344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2f6:	d10a      	bne.n	800a30e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb0f 	bl	800a91c <SD_WideBus_Enable>
 800a2fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
 800a30c:	e01a      	b.n	800a344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fb4c 	bl	800a9b2 <SD_WideBus_Disable>
 800a31a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	431a      	orrs	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	639a      	str	r2, [r3, #56]	; 0x38
 800a328:	e00c      	b.n	800a344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	639a      	str	r2, [r3, #56]	; 0x38
 800a336:	e005      	b.n	800a344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d009      	beq.n	800a360 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a18      	ldr	r2, [pc, #96]	; (800a3b4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e024      	b.n	800a3aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681d      	ldr	r5, [r3, #0]
 800a386:	466c      	mov	r4, sp
 800a388:	f107 0318 	add.w	r3, r7, #24
 800a38c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a39a:	4628      	mov	r0, r5
 800a39c:	f003 f908 	bl	800d5b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3728      	adds	r7, #40	; 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	004005ff 	.word	0x004005ff

0800a3b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a3c4:	f107 030c 	add.w	r3, r7, #12
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa7e 	bl	800a8cc <SD_SendStatus>
 800a3d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	0a5b      	lsrs	r3, r3, #9
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a3ee:	693b      	ldr	r3, [r7, #16]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a404:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a414:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a416:	bf00      	nop
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	2b82      	cmp	r3, #130	; 0x82
 800a436:	d111      	bne.n	800a45c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f003 fa3d 	bl	800d8bc <SDMMC_CmdStopTransfer>
 800a442:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d008      	beq.n	800a45c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	431a      	orrs	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7ff fd4e 	bl	8009ef8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0208 	bic.w	r2, r2, #8
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f240 523a 	movw	r2, #1338	; 0x53a
 800a474:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7f9 fcab 	bl	8003de0 <HAL_SD_RxCpltCallback>
#endif
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7fe f964 	bl	8008770 <HAL_DMA_GetError>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d03e      	beq.n	800a52c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4bc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d002      	beq.n	800a4ca <SD_DMAError+0x36>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d12d      	bne.n	800a526 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a19      	ldr	r2, [pc, #100]	; (800a534 <SD_DMAError+0xa0>)
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a4e0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a4ee:	6978      	ldr	r0, [r7, #20]
 800a4f0:	f7ff ff62 	bl	800a3b8 <HAL_SD_GetCardState>
 800a4f4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	d002      	beq.n	800a502 <SD_DMAError+0x6e>
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b05      	cmp	r3, #5
 800a500:	d10a      	bne.n	800a518 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f003 f9d8 	bl	800d8bc <SDMMC_CmdStopTransfer>
 800a50c:	4602      	mov	r2, r0
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	431a      	orrs	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	2200      	movs	r2, #0
 800a524:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a526:	6978      	ldr	r0, [r7, #20]
 800a528:	f7ff fce6 	bl	8009ef8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a52c:	bf00      	nop
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	004005ff 	.word	0x004005ff

0800a538 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7ff ff31 	bl	800a3b8 <HAL_SD_GetCardState>
 800a556:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b06      	cmp	r3, #6
 800a56a:	d002      	beq.n	800a572 <SD_DMATxAbort+0x3a>
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d10a      	bne.n	800a588 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f003 f9a0 	bl	800d8bc <SDMMC_CmdStopTransfer>
 800a57c:	4602      	mov	r2, r0
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	431a      	orrs	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff fcbb 	bl	8009f0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a596:	e002      	b.n	800a59e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7ff fcad 	bl	8009ef8 <HAL_SD_ErrorCallback>
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff fefa 	bl	800a3b8 <HAL_SD_GetCardState>
 800a5c4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b06      	cmp	r3, #6
 800a5d8:	d002      	beq.n	800a5e0 <SD_DMARxAbort+0x3a>
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b05      	cmp	r3, #5
 800a5de:	d10a      	bne.n	800a5f6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f003 f969 	bl	800d8bc <SDMMC_CmdStopTransfer>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d103      	bne.n	800a606 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fc84 	bl	8009f0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a604:	e002      	b.n	800a60c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fc76 	bl	8009ef8 <HAL_SD_ErrorCallback>
}
 800a60c:	bf00      	nop
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a614:	b5b0      	push	{r4, r5, r7, lr}
 800a616:	b094      	sub	sp, #80	; 0x50
 800a618:	af04      	add	r7, sp, #16
 800a61a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a61c:	2301      	movs	r3, #1
 800a61e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f003 f81b 	bl	800d660 <SDIO_GetPowerState>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a634:	e0b8      	b.n	800a7a8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d02f      	beq.n	800a69e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4618      	mov	r0, r3
 800a644:	f003 fa44 	bl	800dad0 <SDMMC_CmdSendCID>
 800a648:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <SD_InitCard+0x40>
    {
      return errorstate;
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	e0a9      	b.n	800a7a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2100      	movs	r1, #0
 800a65a:	4618      	mov	r0, r3
 800a65c:	f003 f845 	bl	800d6ea <SDIO_GetResponse>
 800a660:	4602      	mov	r2, r0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2104      	movs	r1, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 f83c 	bl	800d6ea <SDIO_GetResponse>
 800a672:	4602      	mov	r2, r0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2108      	movs	r1, #8
 800a67e:	4618      	mov	r0, r3
 800a680:	f003 f833 	bl	800d6ea <SDIO_GetResponse>
 800a684:	4602      	mov	r2, r0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	210c      	movs	r1, #12
 800a690:	4618      	mov	r0, r3
 800a692:	f003 f82a 	bl	800d6ea <SDIO_GetResponse>
 800a696:	4602      	mov	r2, r0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d00d      	beq.n	800a6c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f107 020e 	add.w	r2, r7, #14
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f003 fa4a 	bl	800db4a <SDMMC_CmdSetRelAdd>
 800a6b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <SD_InitCard+0xae>
    {
      return errorstate;
 800a6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c0:	e072      	b.n	800a7a8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d036      	beq.n	800a738 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a6ca:	89fb      	ldrh	r3, [r7, #14]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6da:	041b      	lsls	r3, r3, #16
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f003 fa14 	bl	800db0c <SDMMC_CmdSendCSD>
 800a6e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ee:	e05b      	b.n	800a7a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 fff7 	bl	800d6ea <SDIO_GetResponse>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2104      	movs	r1, #4
 800a708:	4618      	mov	r0, r3
 800a70a:	f002 ffee 	bl	800d6ea <SDIO_GetResponse>
 800a70e:	4602      	mov	r2, r0
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2108      	movs	r1, #8
 800a71a:	4618      	mov	r0, r3
 800a71c:	f002 ffe5 	bl	800d6ea <SDIO_GetResponse>
 800a720:	4602      	mov	r2, r0
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	210c      	movs	r1, #12
 800a72c:	4618      	mov	r0, r3
 800a72e:	f002 ffdc 	bl	800d6ea <SDIO_GetResponse>
 800a732:	4602      	mov	r2, r0
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2104      	movs	r1, #4
 800a73e:	4618      	mov	r0, r3
 800a740:	f002 ffd3 	bl	800d6ea <SDIO_GetResponse>
 800a744:	4603      	mov	r3, r0
 800a746:	0d1a      	lsrs	r2, r3, #20
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a74c:	f107 0310 	add.w	r3, r7, #16
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff fbe4 	bl	8009f20 <HAL_SD_GetCardCSD>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a75e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a762:	e021      	b.n	800a7a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6819      	ldr	r1, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a76c:	041b      	lsls	r3, r3, #16
 800a76e:	2200      	movs	r2, #0
 800a770:	461c      	mov	r4, r3
 800a772:	4615      	mov	r5, r2
 800a774:	4622      	mov	r2, r4
 800a776:	462b      	mov	r3, r5
 800a778:	4608      	mov	r0, r1
 800a77a:	f003 f8c1 	bl	800d900 <SDMMC_CmdSelDesel>
 800a77e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <SD_InitCard+0x176>
  {
    return errorstate;
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	e00e      	b.n	800a7a8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681d      	ldr	r5, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	466c      	mov	r4, sp
 800a792:	f103 0210 	add.w	r2, r3, #16
 800a796:	ca07      	ldmia	r2, {r0, r1, r2}
 800a798:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a79c:	3304      	adds	r3, #4
 800a79e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f002 ff05 	bl	800d5b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3740      	adds	r7, #64	; 0x40
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bdb0      	pop	{r4, r5, r7, pc}

0800a7b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f003 f8bc 	bl	800d946 <SDMMC_CmdGoIdleState>
 800a7ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <SD_PowerON+0x2a>
  {
    return errorstate;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	e072      	b.n	800a8c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f003 f8cf 	bl	800d982 <SDMMC_CmdOperCond>
 800a7e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00d      	beq.n	800a808 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f003 f8a5 	bl	800d946 <SDMMC_CmdGoIdleState>
 800a7fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	e05b      	b.n	800a8c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a812:	2b01      	cmp	r3, #1
 800a814:	d137      	bne.n	800a886 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2100      	movs	r1, #0
 800a81c:	4618      	mov	r0, r3
 800a81e:	f003 f8cf 	bl	800d9c0 <SDMMC_CmdAppCommand>
 800a822:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d02d      	beq.n	800a886 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a82a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a82e:	e047      	b.n	800a8c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2100      	movs	r1, #0
 800a836:	4618      	mov	r0, r3
 800a838:	f003 f8c2 	bl	800d9c0 <SDMMC_CmdAppCommand>
 800a83c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <SD_PowerON+0x98>
    {
      return errorstate;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	e03b      	b.n	800a8c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	491e      	ldr	r1, [pc, #120]	; (800a8c8 <SD_PowerON+0x118>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f003 f8d8 	bl	800da04 <SDMMC_CmdAppOperCommand>
 800a854:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a85c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a860:	e02e      	b.n	800a8c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 ff3e 	bl	800d6ea <SDIO_GetResponse>
 800a86e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	0fdb      	lsrs	r3, r3, #31
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <SD_PowerON+0xcc>
 800a878:	2301      	movs	r3, #1
 800a87a:	e000      	b.n	800a87e <SD_PowerON+0xce>
 800a87c:	2300      	movs	r3, #0
 800a87e:	613b      	str	r3, [r7, #16]

    count++;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	3301      	adds	r3, #1
 800a884:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d802      	bhi.n	800a896 <SD_PowerON+0xe6>
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0cc      	beq.n	800a830 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d902      	bls.n	800a8a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a8a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8a4:	e00c      	b.n	800a8c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	645a      	str	r2, [r3, #68]	; 0x44
 800a8b6:	e002      	b.n	800a8be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	c1100000 	.word	0xc1100000

0800a8cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a8dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8e0:	e018      	b.n	800a914 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f003 f94c 	bl	800db8c <SDMMC_CmdSendStatus>
 800a8f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	e009      	b.n	800a914 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2100      	movs	r1, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f002 feef 	bl	800d6ea <SDIO_GetResponse>
 800a90c:	4602      	mov	r2, r0
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f002 fed9 	bl	800d6ea <SDIO_GetResponse>
 800a938:	4603      	mov	r3, r0
 800a93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a942:	d102      	bne.n	800a94a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a948:	e02f      	b.n	800a9aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f879 	bl	800aa48 <SD_FindSCR>
 800a956:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	e023      	b.n	800a9aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01c      	beq.n	800a9a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a974:	041b      	lsls	r3, r3, #16
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f003 f821 	bl	800d9c0 <SDMMC_CmdAppCommand>
 800a97e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	e00f      	b.n	800a9aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2102      	movs	r1, #2
 800a990:	4618      	mov	r0, r3
 800a992:	f003 f85a 	bl	800da4a <SDMMC_CmdBusWidth>
 800a996:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	e003      	b.n	800a9aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e001      	b.n	800a9aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b086      	sub	sp, #24
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f002 fe8e 	bl	800d6ea <SDIO_GetResponse>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9d8:	d102      	bne.n	800a9e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9de:	e02f      	b.n	800aa40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9e0:	f107 030c 	add.w	r3, r7, #12
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f82e 	bl	800aa48 <SD_FindSCR>
 800a9ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	e023      	b.n	800aa40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d01c      	beq.n	800aa3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0a:	041b      	lsls	r3, r3, #16
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	4610      	mov	r0, r2
 800aa10:	f002 ffd6 	bl	800d9c0 <SDMMC_CmdAppCommand>
 800aa14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	e00f      	b.n	800aa40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2100      	movs	r1, #0
 800aa26:	4618      	mov	r0, r3
 800aa28:	f003 f80f 	bl	800da4a <SDMMC_CmdBusWidth>
 800aa2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	e003      	b.n	800aa40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e001      	b.n	800aa40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b08f      	sub	sp, #60	; 0x3c
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa52:	f7fc fccf 	bl	80073f4 <HAL_GetTick>
 800aa56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60bb      	str	r3, [r7, #8]
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2108      	movs	r1, #8
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f002 fe7a 	bl	800d768 <SDMMC_CmdBlockLength>
 800aa74:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	e0a9      	b.n	800abd4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	f002 ff97 	bl	800d9c0 <SDMMC_CmdAppCommand>
 800aa92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <SD_FindSCR+0x56>
  {
    return errorstate;
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	e09a      	b.n	800abd4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aaa4:	2308      	movs	r3, #8
 800aaa6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800aaa8:	2330      	movs	r3, #48	; 0x30
 800aaaa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aaac:	2302      	movs	r3, #2
 800aaae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f107 0210 	add.w	r2, r7, #16
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 fe24 	bl	800d710 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 ffde 	bl	800da8e <SDMMC_CmdSendSCR>
 800aad2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d022      	beq.n	800ab20 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	e07a      	b.n	800abd4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	18d4      	adds	r4, r2, r3
 800aafa:	4608      	mov	r0, r1
 800aafc:	f002 fd83 	bl	800d606 <SDIO_ReadFIFO>
 800ab00:	4603      	mov	r3, r0
 800ab02:	6023      	str	r3, [r4, #0]
      index++;
 800ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab06:	3301      	adds	r3, #1
 800ab08:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab0a:	f7fc fc73 	bl	80073f4 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab18:	d102      	bne.n	800ab20 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab1e:	e059      	b.n	800abd4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab26:	f240 432a 	movw	r3, #1066	; 0x42a
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0d6      	beq.n	800aade <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2208      	movs	r2, #8
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ab46:	2308      	movs	r3, #8
 800ab48:	e044      	b.n	800abd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	e037      	b.n	800abd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2220      	movs	r2, #32
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ab7a:	2320      	movs	r3, #32
 800ab7c:	e02a      	b.n	800abd4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	061a      	lsls	r2, r3, #24
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ab9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	0e1b      	lsrs	r3, r3, #24
 800aba4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	601a      	str	r2, [r3, #0]
    scr++;
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	3304      	adds	r3, #4
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	061a      	lsls	r2, r3, #24
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	0a1b      	lsrs	r3, r3, #8
 800abc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	0e1b      	lsrs	r3, r3, #24
 800abcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	373c      	adds	r7, #60	; 0x3c
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd90      	pop	{r4, r7, pc}

0800abdc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d03f      	beq.n	800ac76 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	e033      	b.n	800ac64 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f002 fd00 	bl	800d606 <SDIO_ReadFIFO>
 800ac06:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	0c1b      	lsrs	r3, r3, #16
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	0e1b      	lsrs	r3, r3, #24
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	3301      	adds	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b07      	cmp	r3, #7
 800ac68:	d9c8      	bls.n	800abfc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ac76:	bf00      	nop
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b086      	sub	sp, #24
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d043      	beq.n	800ad20 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e037      	b.n	800ad0e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3301      	adds	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	3b01      	subs	r3, #1
 800acae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	021a      	lsls	r2, r3, #8
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	3301      	adds	r3, #1
 800acc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	041a      	lsls	r2, r3, #16
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3301      	adds	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	3b01      	subs	r3, #1
 800acde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	061a      	lsls	r2, r3, #24
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f107 0208 	add.w	r2, r7, #8
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f002 fc8c 	bl	800d620 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b07      	cmp	r3, #7
 800ad12:	d9c4      	bls.n	800ac9e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ad20:	bf00      	nop
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e056      	b.n	800ade8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7f9 fda3 	bl	80048a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	431a      	orrs	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad96:	431a      	orrs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	431a      	orrs	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	ea42 0103 	orr.w	r1, r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	0c1b      	lsrs	r3, r3, #16
 800adb8:	f003 0104 	and.w	r1, r3, #4
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	430a      	orrs	r2, r1
 800adc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	69da      	ldr	r2, [r3, #28]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800add6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e01a      	b.n	800ae38 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2202      	movs	r2, #2
 800ae06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f9 fdda 	bl	80049d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08c      	sub	sp, #48	; 0x30
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <HAL_SPI_TransmitReceive+0x26>
 800ae62:	2302      	movs	r3, #2
 800ae64:	e18a      	b.n	800b17c <HAL_SPI_TransmitReceive+0x33c>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae6e:	f7fc fac1 	bl	80073f4 <HAL_GetTick>
 800ae72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae84:	887b      	ldrh	r3, [r7, #2]
 800ae86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d00f      	beq.n	800aeb0 <HAL_SPI_TransmitReceive+0x70>
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae96:	d107      	bne.n	800aea8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d103      	bne.n	800aea8 <HAL_SPI_TransmitReceive+0x68>
 800aea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d003      	beq.n	800aeb0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aea8:	2302      	movs	r3, #2
 800aeaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aeae:	e15b      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d005      	beq.n	800aec2 <HAL_SPI_TransmitReceive+0x82>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <HAL_SPI_TransmitReceive+0x82>
 800aebc:	887b      	ldrh	r3, [r7, #2]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aec8:	e14e      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b04      	cmp	r3, #4
 800aed4:	d003      	beq.n	800aede <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2205      	movs	r2, #5
 800aeda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	887a      	ldrh	r2, [r7, #2]
 800aeee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	887a      	ldrh	r2, [r7, #2]
 800aef4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	887a      	ldrh	r2, [r7, #2]
 800af00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	887a      	ldrh	r2, [r7, #2]
 800af06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d007      	beq.n	800af32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af3a:	d178      	bne.n	800b02e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <HAL_SPI_TransmitReceive+0x10a>
 800af44:	8b7b      	ldrh	r3, [r7, #26]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d166      	bne.n	800b018 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4e:	881a      	ldrh	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5a:	1c9a      	adds	r2, r3, #2
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af64:	b29b      	uxth	r3, r3
 800af66:	3b01      	subs	r3, #1
 800af68:	b29a      	uxth	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af6e:	e053      	b.n	800b018 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d11b      	bne.n	800afb6 <HAL_SPI_TransmitReceive+0x176>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d016      	beq.n	800afb6 <HAL_SPI_TransmitReceive+0x176>
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d113      	bne.n	800afb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	881a      	ldrh	r2, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9e:	1c9a      	adds	r2, r3, #2
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	3b01      	subs	r3, #1
 800afac:	b29a      	uxth	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d119      	bne.n	800aff8 <HAL_SPI_TransmitReceive+0x1b8>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc8:	b29b      	uxth	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d014      	beq.n	800aff8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	b292      	uxth	r2, r2
 800afda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe0:	1c9a      	adds	r2, r3, #2
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aff4:	2301      	movs	r3, #1
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aff8:	f7fc f9fc 	bl	80073f4 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b004:	429a      	cmp	r2, r3
 800b006:	d807      	bhi.n	800b018 <HAL_SPI_TransmitReceive+0x1d8>
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d003      	beq.n	800b018 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b016:	e0a7      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1a6      	bne.n	800af70 <HAL_SPI_TransmitReceive+0x130>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b026:	b29b      	uxth	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1a1      	bne.n	800af70 <HAL_SPI_TransmitReceive+0x130>
 800b02c:	e07c      	b.n	800b128 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <HAL_SPI_TransmitReceive+0x1fc>
 800b036:	8b7b      	ldrh	r3, [r7, #26]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d16b      	bne.n	800b114 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	330c      	adds	r3, #12
 800b046:	7812      	ldrb	r2, [r2, #0]
 800b048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b058:	b29b      	uxth	r3, r3
 800b05a:	3b01      	subs	r3, #1
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b062:	e057      	b.n	800b114 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d11c      	bne.n	800b0ac <HAL_SPI_TransmitReceive+0x26c>
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b076:	b29b      	uxth	r3, r3
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d017      	beq.n	800b0ac <HAL_SPI_TransmitReceive+0x26c>
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d114      	bne.n	800b0ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	330c      	adds	r3, #12
 800b08c:	7812      	ldrb	r2, [r2, #0]
 800b08e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d119      	bne.n	800b0ee <HAL_SPI_TransmitReceive+0x2ae>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d014      	beq.n	800b0ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68da      	ldr	r2, [r3, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	b2d2      	uxtb	r2, r2
 800b0d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0ee:	f7fc f981 	bl	80073f4 <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d803      	bhi.n	800b106 <HAL_SPI_TransmitReceive+0x2c6>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d102      	bne.n	800b10c <HAL_SPI_TransmitReceive+0x2cc>
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b112:	e029      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b118:	b29b      	uxth	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1a2      	bne.n	800b064 <HAL_SPI_TransmitReceive+0x224>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b122:	b29b      	uxth	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	d19d      	bne.n	800b064 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b12a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 fae1 	bl	800b6f4 <SPI_EndRxTxTransaction>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d006      	beq.n	800b146 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2220      	movs	r2, #32
 800b142:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b144:	e010      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b14e:	2300      	movs	r3, #0
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	e000      	b.n	800b168 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b178:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3730      	adds	r7, #48	; 0x30
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	4613      	mov	r3, r2
 800b190:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_SPI_Transmit_DMA+0x20>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e093      	b.n	800b2cc <HAL_SPI_Transmit_DMA+0x148>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d002      	beq.n	800b1be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b1bc:	e081      	b.n	800b2c2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <HAL_SPI_Transmit_DMA+0x46>
 800b1c4:	88fb      	ldrh	r3, [r7, #6]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b1ce:	e078      	b.n	800b2c2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2203      	movs	r2, #3
 800b1d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	88fa      	ldrh	r2, [r7, #6]
 800b1ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b216:	d107      	bne.n	800b228 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b226:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b22c:	4a29      	ldr	r2, [pc, #164]	; (800b2d4 <HAL_SPI_Transmit_DMA+0x150>)
 800b22e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b234:	4a28      	ldr	r2, [pc, #160]	; (800b2d8 <HAL_SPI_Transmit_DMA+0x154>)
 800b236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b23c:	4a27      	ldr	r2, [pc, #156]	; (800b2dc <HAL_SPI_Transmit_DMA+0x158>)
 800b23e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b244:	2200      	movs	r2, #0
 800b246:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b250:	4619      	mov	r1, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	330c      	adds	r3, #12
 800b258:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b25e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b260:	f7fd f882 	bl	8008368 <HAL_DMA_Start_IT>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f043 0210 	orr.w	r2, r3, #16
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b282:	e01e      	b.n	800b2c2 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28e:	2b40      	cmp	r3, #64	; 0x40
 800b290:	d007      	beq.n	800b2a2 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f042 0220 	orr.w	r2, r2, #32
 800b2b0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	685a      	ldr	r2, [r3, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f042 0202 	orr.w	r2, r2, #2
 800b2c0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	0800b59d 	.word	0x0800b59d
 800b2d8:	0800b4f5 	.word	0x0800b4f5
 800b2dc:	0800b5b9 	.word	0x0800b5b9

0800b2e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	099b      	lsrs	r3, r3, #6
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10f      	bne.n	800b324 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00a      	beq.n	800b324 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	099b      	lsrs	r3, r3, #6
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d004      	beq.n	800b324 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
    return;
 800b322:	e0d7      	b.n	800b4d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	085b      	lsrs	r3, r3, #1
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00a      	beq.n	800b346 <HAL_SPI_IRQHandler+0x66>
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	09db      	lsrs	r3, r3, #7
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
    return;
 800b344:	e0c6      	b.n	800b4d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	095b      	lsrs	r3, r3, #5
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10c      	bne.n	800b36c <HAL_SPI_IRQHandler+0x8c>
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	099b      	lsrs	r3, r3, #6
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d106      	bne.n	800b36c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	0a1b      	lsrs	r3, r3, #8
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 80b4 	beq.w	800b4d4 <HAL_SPI_IRQHandler+0x1f4>
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	095b      	lsrs	r3, r3, #5
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	f000 80ad 	beq.w	800b4d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	099b      	lsrs	r3, r3, #6
 800b37e:	f003 0301 	and.w	r3, r3, #1
 800b382:	2b00      	cmp	r3, #0
 800b384:	d023      	beq.n	800b3ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d011      	beq.n	800b3b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b396:	f043 0204 	orr.w	r2, r3, #4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b39e:	2300      	movs	r3, #0
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	617b      	str	r3, [r7, #20]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	e00b      	b.n	800b3ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	613b      	str	r3, [r7, #16]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	613b      	str	r3, [r7, #16]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	613b      	str	r3, [r7, #16]
 800b3ca:	693b      	ldr	r3, [r7, #16]
        return;
 800b3cc:	e082      	b.n	800b4d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	095b      	lsrs	r3, r3, #5
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d014      	beq.n	800b404 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	f043 0201 	orr.w	r2, r3, #1
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	f003 0301 	and.w	r3, r3, #1
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00c      	beq.n	800b42a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b414:	f043 0208 	orr.w	r2, r3, #8
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b41c:	2300      	movs	r3, #0
 800b41e:	60bb      	str	r3, [r7, #8]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	60bb      	str	r3, [r7, #8]
 800b428:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d04f      	beq.n	800b4d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b440:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	f003 0302 	and.w	r3, r3, #2
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <HAL_SPI_IRQHandler+0x17e>
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d034      	beq.n	800b4c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 0203 	bic.w	r2, r2, #3
 800b46c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b472:	2b00      	cmp	r3, #0
 800b474:	d011      	beq.n	800b49a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47a:	4a18      	ldr	r2, [pc, #96]	; (800b4dc <HAL_SPI_IRQHandler+0x1fc>)
 800b47c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b482:	4618      	mov	r0, r3
 800b484:	f7fc ffc8 	bl	8008418 <HAL_DMA_Abort_IT>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d016      	beq.n	800b4d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4a6:	4a0d      	ldr	r2, [pc, #52]	; (800b4dc <HAL_SPI_IRQHandler+0x1fc>)
 800b4a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fc ffb2 	bl	8008418 <HAL_DMA_Abort_IT>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b4c6:	e003      	b.n	800b4d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7f9 f9b5 	bl	8004838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b4ce:	e000      	b.n	800b4d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b4d0:	bf00      	nop
    return;
 800b4d2:	bf00      	nop
  }
}
 800b4d4:	3720      	adds	r7, #32
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800b5f9 	.word	0x0800b5f9

0800b4e0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b500:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b502:	f7fb ff77 	bl	80073f4 <HAL_GetTick>
 800b506:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b516:	d03b      	beq.n	800b590 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 0220 	bic.w	r2, r2, #32
 800b526:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0202 	bic.w	r2, r2, #2
 800b536:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	2164      	movs	r1, #100	; 0x64
 800b53c:	6978      	ldr	r0, [r7, #20]
 800b53e:	f000 f8d9 	bl	800b6f4 <SPI_EndRxTxTransaction>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d005      	beq.n	800b554 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54c:	f043 0220 	orr.w	r2, r3, #32
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2200      	movs	r2, #0
 800b576:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b588:	6978      	ldr	r0, [r7, #20]
 800b58a:	f7f9 f955 	bl	8004838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b58e:	e002      	b.n	800b596 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b590:	6978      	ldr	r0, [r7, #20]
 800b592:	f7f9 f967 	bl	8004864 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b596:	3718      	adds	r7, #24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7ff ff98 	bl	800b4e0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 0203 	bic.w	r2, r2, #3
 800b5d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5da:	f043 0210 	orr.w	r2, r3, #16
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7f9 f924 	bl	8004838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b5f0:	bf00      	nop
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b604:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f7f9 f910 	bl	8004838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b618:	bf00      	nop
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	4613      	mov	r3, r2
 800b62e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b630:	e04c      	b.n	800b6cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b638:	d048      	beq.n	800b6cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b63a:	f7fb fedb 	bl	80073f4 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d902      	bls.n	800b650 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d13d      	bne.n	800b6cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b65e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b668:	d111      	bne.n	800b68e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b672:	d004      	beq.n	800b67e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b67c:	d107      	bne.n	800b68e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b68c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b696:	d10f      	bne.n	800b6b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e00f      	b.n	800b6ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	bf0c      	ite	eq
 800b6dc:	2301      	moveq	r3, #1
 800b6de:	2300      	movne	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d1a3      	bne.n	800b632 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <SPI_EndRxTxTransaction+0x7c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1b      	ldr	r2, [pc, #108]	; (800b774 <SPI_EndRxTxTransaction+0x80>)
 800b706:	fba2 2303 	umull	r2, r3, r2, r3
 800b70a:	0d5b      	lsrs	r3, r3, #21
 800b70c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b710:	fb02 f303 	mul.w	r3, r2, r3
 800b714:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b71e:	d112      	bne.n	800b746 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	2180      	movs	r1, #128	; 0x80
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff ff78 	bl	800b620 <SPI_WaitFlagStateUntilTimeout>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d016      	beq.n	800b764 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73a:	f043 0220 	orr.w	r2, r3, #32
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e00f      	b.n	800b766 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	3b01      	subs	r3, #1
 800b750:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b75c:	2b80      	cmp	r3, #128	; 0x80
 800b75e:	d0f2      	beq.n	800b746 <SPI_EndRxTxTransaction+0x52>
 800b760:	e000      	b.n	800b764 <SPI_EndRxTxTransaction+0x70>
        break;
 800b762:	bf00      	nop
  }

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20000000 	.word	0x20000000
 800b774:	165e9f81 	.word	0x165e9f81

0800b778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e01d      	b.n	800b7c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b790:	b2db      	uxtb	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	d106      	bne.n	800b7a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7f8 fdb6 	bl	8004310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f000 fb36 	bl	800be28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e01d      	b.n	800b81c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f815 	bl	800b824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3304      	adds	r3, #4
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f000 fb0b 	bl	800be28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b0c      	cmp	r3, #12
 800b846:	d841      	bhi.n	800b8cc <HAL_TIM_IC_Start_IT+0x94>
 800b848:	a201      	add	r2, pc, #4	; (adr r2, 800b850 <HAL_TIM_IC_Start_IT+0x18>)
 800b84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84e:	bf00      	nop
 800b850:	0800b885 	.word	0x0800b885
 800b854:	0800b8cd 	.word	0x0800b8cd
 800b858:	0800b8cd 	.word	0x0800b8cd
 800b85c:	0800b8cd 	.word	0x0800b8cd
 800b860:	0800b897 	.word	0x0800b897
 800b864:	0800b8cd 	.word	0x0800b8cd
 800b868:	0800b8cd 	.word	0x0800b8cd
 800b86c:	0800b8cd 	.word	0x0800b8cd
 800b870:	0800b8a9 	.word	0x0800b8a9
 800b874:	0800b8cd 	.word	0x0800b8cd
 800b878:	0800b8cd 	.word	0x0800b8cd
 800b87c:	0800b8cd 	.word	0x0800b8cd
 800b880:	0800b8bb 	.word	0x0800b8bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 0202 	orr.w	r2, r2, #2
 800b892:	60da      	str	r2, [r3, #12]
      break;
 800b894:	e01b      	b.n	800b8ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f042 0204 	orr.w	r2, r2, #4
 800b8a4:	60da      	str	r2, [r3, #12]
      break;
 800b8a6:	e012      	b.n	800b8ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68da      	ldr	r2, [r3, #12]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0208 	orr.w	r2, r2, #8
 800b8b6:	60da      	str	r2, [r3, #12]
      break;
 800b8b8:	e009      	b.n	800b8ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68da      	ldr	r2, [r3, #12]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0210 	orr.w	r2, r2, #16
 800b8c8:	60da      	str	r2, [r3, #12]
      break;
 800b8ca:	e000      	b.n	800b8ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800b8cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fcde 	bl	800c298 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f003 0307 	and.w	r3, r3, #7
 800b8e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b06      	cmp	r3, #6
 800b8ec:	d007      	beq.n	800b8fe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f042 0201 	orr.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	f003 0302 	and.w	r3, r3, #2
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d122      	bne.n	800b964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f003 0302 	and.w	r3, r3, #2
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d11b      	bne.n	800b964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f06f 0202 	mvn.w	r2, #2
 800b934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	699b      	ldr	r3, [r3, #24]
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7f8 fd30 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800b950:	e005      	b.n	800b95e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa4a 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa51 	bl	800be00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	2b04      	cmp	r3, #4
 800b970:	d122      	bne.n	800b9b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b04      	cmp	r3, #4
 800b97e:	d11b      	bne.n	800b9b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f06f 0204 	mvn.w	r2, #4
 800b988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2202      	movs	r2, #2
 800b98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7f8 fd06 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800b9a4:	e005      	b.n	800b9b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fa20 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa27 	bl	800be00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	f003 0308 	and.w	r3, r3, #8
 800b9c2:	2b08      	cmp	r3, #8
 800b9c4:	d122      	bne.n	800ba0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d11b      	bne.n	800ba0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f06f 0208 	mvn.w	r2, #8
 800b9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2204      	movs	r2, #4
 800b9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7f8 fcdc 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800b9f8:	e005      	b.n	800ba06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f9f6 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f9fd 	bl	800be00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	f003 0310 	and.w	r3, r3, #16
 800ba16:	2b10      	cmp	r3, #16
 800ba18:	d122      	bne.n	800ba60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f003 0310 	and.w	r3, r3, #16
 800ba24:	2b10      	cmp	r3, #16
 800ba26:	d11b      	bne.n	800ba60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f06f 0210 	mvn.w	r2, #16
 800ba30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2208      	movs	r2, #8
 800ba36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7f8 fcb2 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800ba4c:	e005      	b.n	800ba5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9cc 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9d3 	bl	800be00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d10e      	bne.n	800ba8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d107      	bne.n	800ba8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f06f 0201 	mvn.w	r2, #1
 800ba84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f9a6 	bl	800bdd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba96:	2b80      	cmp	r3, #128	; 0x80
 800ba98:	d10e      	bne.n	800bab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa4:	2b80      	cmp	r3, #128	; 0x80
 800baa6:	d107      	bne.n	800bab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fc8e 	bl	800c3d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac2:	2b40      	cmp	r3, #64	; 0x40
 800bac4:	d10e      	bne.n	800bae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad0:	2b40      	cmp	r3, #64	; 0x40
 800bad2:	d107      	bne.n	800bae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800badc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f998 	bl	800be14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b20      	cmp	r3, #32
 800baf0:	d10e      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b20      	cmp	r3, #32
 800bafe:	d107      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f06f 0220 	mvn.w	r2, #32
 800bb08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fc58 	bl	800c3c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d101      	bne.n	800bb32 <HAL_TIM_IC_ConfigChannel+0x1a>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e08a      	b.n	800bc48 <HAL_TIM_IC_ConfigChannel+0x130>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d11b      	bne.n	800bb80 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6818      	ldr	r0, [r3, #0]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	f000 f9e6 	bl	800bf28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	699a      	ldr	r2, [r3, #24]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f022 020c 	bic.w	r2, r2, #12
 800bb6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6999      	ldr	r1, [r3, #24]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	689a      	ldr	r2, [r3, #8]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	430a      	orrs	r2, r1
 800bb7c:	619a      	str	r2, [r3, #24]
 800bb7e:	e05a      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	d11c      	bne.n	800bbc0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	6819      	ldr	r1, [r3, #0]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f000 fa5e 	bl	800c056 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	699a      	ldr	r2, [r3, #24]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bba8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6999      	ldr	r1, [r3, #24]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	021a      	lsls	r2, r3, #8
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	619a      	str	r2, [r3, #24]
 800bbbe:	e03a      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b08      	cmp	r3, #8
 800bbc4:	d11b      	bne.n	800bbfe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	6819      	ldr	r1, [r3, #0]
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f000 faab 	bl	800c130 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69da      	ldr	r2, [r3, #28]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 020c 	bic.w	r2, r2, #12
 800bbe8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69d9      	ldr	r1, [r3, #28]
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	689a      	ldr	r2, [r3, #8]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	61da      	str	r2, [r3, #28]
 800bbfc:	e01b      	b.n	800bc36 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6818      	ldr	r0, [r3, #0]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6819      	ldr	r1, [r3, #0]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	f000 facb 	bl	800c1a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69da      	ldr	r2, [r3, #28]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bc20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	69d9      	ldr	r1, [r3, #28]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	021a      	lsls	r2, r3, #8
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d101      	bne.n	800bc68 <HAL_TIM_ConfigClockSource+0x18>
 800bc64:	2302      	movs	r3, #2
 800bc66:	e0b3      	b.n	800bdd0 <HAL_TIM_ConfigClockSource+0x180>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2202      	movs	r2, #2
 800bc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca0:	d03e      	beq.n	800bd20 <HAL_TIM_ConfigClockSource+0xd0>
 800bca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca6:	f200 8087 	bhi.w	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcae:	f000 8085 	beq.w	800bdbc <HAL_TIM_ConfigClockSource+0x16c>
 800bcb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcb6:	d87f      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcb8:	2b70      	cmp	r3, #112	; 0x70
 800bcba:	d01a      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0xa2>
 800bcbc:	2b70      	cmp	r3, #112	; 0x70
 800bcbe:	d87b      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcc0:	2b60      	cmp	r3, #96	; 0x60
 800bcc2:	d050      	beq.n	800bd66 <HAL_TIM_ConfigClockSource+0x116>
 800bcc4:	2b60      	cmp	r3, #96	; 0x60
 800bcc6:	d877      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcc8:	2b50      	cmp	r3, #80	; 0x50
 800bcca:	d03c      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0xf6>
 800bccc:	2b50      	cmp	r3, #80	; 0x50
 800bcce:	d873      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcd0:	2b40      	cmp	r3, #64	; 0x40
 800bcd2:	d058      	beq.n	800bd86 <HAL_TIM_ConfigClockSource+0x136>
 800bcd4:	2b40      	cmp	r3, #64	; 0x40
 800bcd6:	d86f      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bcd8:	2b30      	cmp	r3, #48	; 0x30
 800bcda:	d064      	beq.n	800bda6 <HAL_TIM_ConfigClockSource+0x156>
 800bcdc:	2b30      	cmp	r3, #48	; 0x30
 800bcde:	d86b      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d060      	beq.n	800bda6 <HAL_TIM_ConfigClockSource+0x156>
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d867      	bhi.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d05c      	beq.n	800bda6 <HAL_TIM_ConfigClockSource+0x156>
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d05a      	beq.n	800bda6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bcf0:	e062      	b.n	800bdb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6818      	ldr	r0, [r3, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	6899      	ldr	r1, [r3, #8]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	f000 faa9 	bl	800c258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	609a      	str	r2, [r3, #8]
      break;
 800bd1e:	e04e      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	6899      	ldr	r1, [r3, #8]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	f000 fa92 	bl	800c258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689a      	ldr	r2, [r3, #8]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd42:	609a      	str	r2, [r3, #8]
      break;
 800bd44:	e03b      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6859      	ldr	r1, [r3, #4]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	461a      	mov	r2, r3
 800bd54:	f000 f950 	bl	800bff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2150      	movs	r1, #80	; 0x50
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f000 fa5f 	bl	800c222 <TIM_ITRx_SetConfig>
      break;
 800bd64:	e02b      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6818      	ldr	r0, [r3, #0]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	6859      	ldr	r1, [r3, #4]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	461a      	mov	r2, r3
 800bd74:	f000 f9ac 	bl	800c0d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2160      	movs	r1, #96	; 0x60
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fa4f 	bl	800c222 <TIM_ITRx_SetConfig>
      break;
 800bd84:	e01b      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	6859      	ldr	r1, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	461a      	mov	r2, r3
 800bd94:	f000 f930 	bl	800bff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2140      	movs	r1, #64	; 0x40
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 fa3f 	bl	800c222 <TIM_ITRx_SetConfig>
      break;
 800bda4:	e00b      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f000 fa36 	bl	800c222 <TIM_ITRx_SetConfig>
      break;
 800bdb6:	e002      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bdb8:	bf00      	nop
 800bdba:	e000      	b.n	800bdbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bdbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a34      	ldr	r2, [pc, #208]	; (800bf0c <TIM_Base_SetConfig+0xe4>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d00f      	beq.n	800be60 <TIM_Base_SetConfig+0x38>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be46:	d00b      	beq.n	800be60 <TIM_Base_SetConfig+0x38>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a31      	ldr	r2, [pc, #196]	; (800bf10 <TIM_Base_SetConfig+0xe8>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d007      	beq.n	800be60 <TIM_Base_SetConfig+0x38>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a30      	ldr	r2, [pc, #192]	; (800bf14 <TIM_Base_SetConfig+0xec>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d003      	beq.n	800be60 <TIM_Base_SetConfig+0x38>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a2f      	ldr	r2, [pc, #188]	; (800bf18 <TIM_Base_SetConfig+0xf0>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d108      	bne.n	800be72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a25      	ldr	r2, [pc, #148]	; (800bf0c <TIM_Base_SetConfig+0xe4>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d01b      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be80:	d017      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a22      	ldr	r2, [pc, #136]	; (800bf10 <TIM_Base_SetConfig+0xe8>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d013      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a21      	ldr	r2, [pc, #132]	; (800bf14 <TIM_Base_SetConfig+0xec>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d00f      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a20      	ldr	r2, [pc, #128]	; (800bf18 <TIM_Base_SetConfig+0xf0>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d00b      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a1f      	ldr	r2, [pc, #124]	; (800bf1c <TIM_Base_SetConfig+0xf4>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d007      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <TIM_Base_SetConfig+0xf8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d003      	beq.n	800beb2 <TIM_Base_SetConfig+0x8a>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a1d      	ldr	r2, [pc, #116]	; (800bf24 <TIM_Base_SetConfig+0xfc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d108      	bne.n	800bec4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	4313      	orrs	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <TIM_Base_SetConfig+0xe4>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d103      	bne.n	800bef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	691a      	ldr	r2, [r3, #16]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	615a      	str	r2, [r3, #20]
}
 800befe:	bf00      	nop
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	40010000 	.word	0x40010000
 800bf10:	40000400 	.word	0x40000400
 800bf14:	40000800 	.word	0x40000800
 800bf18:	40000c00 	.word	0x40000c00
 800bf1c:	40014000 	.word	0x40014000
 800bf20:	40014400 	.word	0x40014400
 800bf24:	40014800 	.word	0x40014800

0800bf28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	f023 0201 	bic.w	r2, r3, #1
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4a24      	ldr	r2, [pc, #144]	; (800bfe4 <TIM_TI1_SetConfig+0xbc>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d013      	beq.n	800bf7e <TIM_TI1_SetConfig+0x56>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf5c:	d00f      	beq.n	800bf7e <TIM_TI1_SetConfig+0x56>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	4a21      	ldr	r2, [pc, #132]	; (800bfe8 <TIM_TI1_SetConfig+0xc0>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d00b      	beq.n	800bf7e <TIM_TI1_SetConfig+0x56>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4a20      	ldr	r2, [pc, #128]	; (800bfec <TIM_TI1_SetConfig+0xc4>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d007      	beq.n	800bf7e <TIM_TI1_SetConfig+0x56>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4a1f      	ldr	r2, [pc, #124]	; (800bff0 <TIM_TI1_SetConfig+0xc8>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d003      	beq.n	800bf7e <TIM_TI1_SetConfig+0x56>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4a1e      	ldr	r2, [pc, #120]	; (800bff4 <TIM_TI1_SetConfig+0xcc>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d101      	bne.n	800bf82 <TIM_TI1_SetConfig+0x5a>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e000      	b.n	800bf84 <TIM_TI1_SetConfig+0x5c>
 800bf82:	2300      	movs	r3, #0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d008      	beq.n	800bf9a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f023 0303 	bic.w	r3, r3, #3
 800bf8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e003      	b.n	800bfa2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	f043 0301 	orr.w	r3, r3, #1
 800bfa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	f023 030a 	bic.w	r3, r3, #10
 800bfbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	f003 030a 	and.w	r3, r3, #10
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	621a      	str	r2, [r3, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	371c      	adds	r7, #28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop
 800bfe4:	40010000 	.word	0x40010000
 800bfe8:	40000400 	.word	0x40000400
 800bfec:	40000800 	.word	0x40000800
 800bff0:	40000c00 	.word	0x40000c00
 800bff4:	40014000 	.word	0x40014000

0800bff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b087      	sub	sp, #28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6a1b      	ldr	r3, [r3, #32]
 800c008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	f023 0201 	bic.w	r2, r3, #1
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f023 030a 	bic.w	r3, r3, #10
 800c034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	621a      	str	r2, [r3, #32]
}
 800c04a:	bf00      	nop
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c056:	b480      	push	{r7}
 800c058:	b087      	sub	sp, #28
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
 800c062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6a1b      	ldr	r3, [r3, #32]
 800c068:	f023 0210 	bic.w	r2, r3, #16
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	021b      	lsls	r3, r3, #8
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	031b      	lsls	r3, r3, #12
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c0a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	621a      	str	r2, [r3, #32]
}
 800c0c4:	bf00      	nop
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	f023 0210 	bic.w	r2, r3, #16
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c0fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	031b      	lsls	r3, r3, #12
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	4313      	orrs	r3, r2
 800c104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c10c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	011b      	lsls	r3, r3, #4
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	4313      	orrs	r3, r2
 800c116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	621a      	str	r2, [r3, #32]
}
 800c124:	bf00      	nop
 800c126:	371c      	adds	r7, #28
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f023 0303 	bic.w	r3, r3, #3
 800c15c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4313      	orrs	r3, r2
 800c164:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c16c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	011b      	lsls	r3, r3, #4
 800c172:	b2db      	uxtb	r3, r3
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	4313      	orrs	r3, r2
 800c178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c180:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	021b      	lsls	r3, r3, #8
 800c186:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	621a      	str	r2, [r3, #32]
}
 800c19c:	bf00      	nop
 800c19e:	371c      	adds	r7, #28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	021b      	lsls	r3, r3, #8
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	031b      	lsls	r3, r3, #12
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c1fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	031b      	lsls	r3, r3, #12
 800c200:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	4313      	orrs	r3, r2
 800c208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	621a      	str	r2, [r3, #32]
}
 800c216:	bf00      	nop
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c222:	b480      	push	{r7}
 800c224:	b085      	sub	sp, #20
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4313      	orrs	r3, r2
 800c240:	f043 0307 	orr.w	r3, r3, #7
 800c244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	609a      	str	r2, [r3, #8]
}
 800c24c:	bf00      	nop
 800c24e:	3714      	adds	r7, #20
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	021a      	lsls	r2, r3, #8
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	4313      	orrs	r3, r2
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	4313      	orrs	r3, r2
 800c284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	609a      	str	r2, [r3, #8]
}
 800c28c:	bf00      	nop
 800c28e:	371c      	adds	r7, #28
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f003 031f 	and.w	r3, r3, #31
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6a1a      	ldr	r2, [r3, #32]
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	43db      	mvns	r3, r3
 800c2ba:	401a      	ands	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6a1a      	ldr	r2, [r3, #32]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f003 031f 	and.w	r3, r3, #31
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	621a      	str	r2, [r3, #32]
}
 800c2d6:	bf00      	nop
 800c2d8:	371c      	adds	r7, #28
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
	...

0800c2e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e050      	b.n	800c39e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2202      	movs	r2, #2
 800c308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a1c      	ldr	r2, [pc, #112]	; (800c3ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d018      	beq.n	800c372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c348:	d013      	beq.n	800c372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a18      	ldr	r2, [pc, #96]	; (800c3b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d00e      	beq.n	800c372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a16      	ldr	r2, [pc, #88]	; (800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d009      	beq.n	800c372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a15      	ldr	r2, [pc, #84]	; (800c3b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d004      	beq.n	800c372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a13      	ldr	r2, [pc, #76]	; (800c3bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d10c      	bne.n	800c38c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	4313      	orrs	r3, r2
 800c382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	40010000 	.word	0x40010000
 800c3b0:	40000400 	.word	0x40000400
 800c3b4:	40000800 	.word	0x40000800
 800c3b8:	40000c00 	.word	0x40000c00
 800c3bc:	40014000 	.word	0x40014000

0800c3c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e03f      	b.n	800c47a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c400:	b2db      	uxtb	r3, r3
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7f9 fa4a 	bl	80058a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2224      	movs	r2, #36	; 0x24
 800c418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68da      	ldr	r2, [r3, #12]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c42a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fbf1 	bl	800cc14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	691a      	ldr	r2, [r3, #16]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	695a      	ldr	r2, [r3, #20]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68da      	ldr	r2, [r3, #12]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2220      	movs	r2, #32
 800c46c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2220      	movs	r2, #32
 800c474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e01e      	b.n	800c4d2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2224      	movs	r2, #36	; 0x24
 800c498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68da      	ldr	r2, [r3, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7f9 fad1 	bl	8005a54 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b085      	sub	sp, #20
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	60f8      	str	r0, [r7, #12]
 800c4e2:	60b9      	str	r1, [r7, #8]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b20      	cmp	r3, #32
 800c4f2:	d130      	bne.n	800c556 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d002      	beq.n	800c500 <HAL_UART_Transmit_IT+0x26>
 800c4fa:	88fb      	ldrh	r3, [r7, #6]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	e029      	b.n	800c558 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d101      	bne.n	800c512 <HAL_UART_Transmit_IT+0x38>
 800c50e:	2302      	movs	r3, #2
 800c510:	e022      	b.n	800c558 <HAL_UART_Transmit_IT+0x7e>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	88fa      	ldrh	r2, [r7, #6]
 800c524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	88fa      	ldrh	r2, [r7, #6]
 800c52a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2221      	movs	r2, #33	; 0x21
 800c536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68da      	ldr	r2, [r3, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c550:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	e000      	b.n	800c558 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c556:	2302      	movs	r3, #2
  }
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4613      	mov	r3, r2
 800c570:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d166      	bne.n	800c64c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <HAL_UART_Receive_DMA+0x26>
 800c584:	88fb      	ldrh	r3, [r7, #6]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e05f      	b.n	800c64e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c594:	2b01      	cmp	r3, #1
 800c596:	d101      	bne.n	800c59c <HAL_UART_Receive_DMA+0x38>
 800c598:	2302      	movs	r3, #2
 800c59a:	e058      	b.n	800c64e <HAL_UART_Receive_DMA+0xea>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	88fa      	ldrh	r2, [r7, #6]
 800c5ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2222      	movs	r2, #34	; 0x22
 800c5ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c2:	4a25      	ldr	r2, [pc, #148]	; (800c658 <HAL_UART_Receive_DMA+0xf4>)
 800c5c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ca:	4a24      	ldr	r2, [pc, #144]	; (800c65c <HAL_UART_Receive_DMA+0xf8>)
 800c5cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d2:	4a23      	ldr	r2, [pc, #140]	; (800c660 <HAL_UART_Receive_DMA+0xfc>)
 800c5d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5da:	2200      	movs	r2, #0
 800c5dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c5de:	f107 0308 	add.w	r3, r7, #8
 800c5e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	88fb      	ldrh	r3, [r7, #6]
 800c5f6:	f7fb feb7 	bl	8008368 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	613b      	str	r3, [r7, #16]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	613b      	str	r3, [r7, #16]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c626:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	695a      	ldr	r2, [r3, #20]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f042 0201 	orr.w	r2, r2, #1
 800c636:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	695a      	ldr	r2, [r3, #20]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c646:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	e000      	b.n	800c64e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c64c:	2302      	movs	r3, #2
  }
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	0800c88d 	.word	0x0800c88d
 800c65c:	0800c8f5 	.word	0x0800c8f5
 800c660:	0800c911 	.word	0x0800c911

0800c664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c684:	2300      	movs	r3, #0
 800c686:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f003 030f 	and.w	r3, r3, #15
 800c692:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10d      	bne.n	800c6b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	f003 0320 	and.w	r3, r3, #32
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d008      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x52>
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	f003 0320 	and.w	r3, r3, #32
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa2e 	bl	800cb10 <UART_Receive_IT>
      return;
 800c6b4:	e0d0      	b.n	800c858 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f000 80b0 	beq.w	800c81e <HAL_UART_IRQHandler+0x1ba>
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <HAL_UART_IRQHandler+0x70>
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 80a5 	beq.w	800c81e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <HAL_UART_IRQHandler+0x90>
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d005      	beq.n	800c6f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ec:	f043 0201 	orr.w	r2, r3, #1
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <HAL_UART_IRQHandler+0xb0>
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70c:	f043 0202 	orr.w	r2, r3, #2
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00a      	beq.n	800c734 <HAL_UART_IRQHandler+0xd0>
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72c:	f043 0204 	orr.w	r2, r3, #4
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	f003 0308 	and.w	r3, r3, #8
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00f      	beq.n	800c75e <HAL_UART_IRQHandler+0xfa>
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	f003 0320 	and.w	r3, r3, #32
 800c744:	2b00      	cmp	r3, #0
 800c746:	d104      	bne.n	800c752 <HAL_UART_IRQHandler+0xee>
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c756:	f043 0208 	orr.w	r2, r3, #8
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c762:	2b00      	cmp	r3, #0
 800c764:	d077      	beq.n	800c856 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	f003 0320 	and.w	r3, r3, #32
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d007      	beq.n	800c780 <HAL_UART_IRQHandler+0x11c>
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f003 0320 	and.w	r3, r3, #32
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f9c8 	bl	800cb10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78a:	2b40      	cmp	r3, #64	; 0x40
 800c78c:	bf0c      	ite	eq
 800c78e:	2301      	moveq	r3, #1
 800c790:	2300      	movne	r3, #0
 800c792:	b2db      	uxtb	r3, r3
 800c794:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79a:	f003 0308 	and.w	r3, r3, #8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d102      	bne.n	800c7a8 <HAL_UART_IRQHandler+0x144>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d031      	beq.n	800c80c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f911 	bl	800c9d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b8:	2b40      	cmp	r3, #64	; 0x40
 800c7ba:	d123      	bne.n	800c804 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	695a      	ldr	r2, [r3, #20]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d013      	beq.n	800c7fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d8:	4a21      	ldr	r2, [pc, #132]	; (800c860 <HAL_UART_IRQHandler+0x1fc>)
 800c7da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fb fe19 	bl	8008418 <HAL_DMA_Abort_IT>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d016      	beq.n	800c81a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fa:	e00e      	b.n	800c81a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7f9 f83f 	bl	8005880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c802:	e00a      	b.n	800c81a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f7f9 f83b 	bl	8005880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c80a:	e006      	b.n	800c81a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7f9 f837 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c818:	e01d      	b.n	800c856 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c81a:	bf00      	nop
    return;
 800c81c:	e01b      	b.n	800c856 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c824:	2b00      	cmp	r3, #0
 800c826:	d008      	beq.n	800c83a <HAL_UART_IRQHandler+0x1d6>
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f8fe 	bl	800ca34 <UART_Transmit_IT>
    return;
 800c838:	e00e      	b.n	800c858 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c840:	2b00      	cmp	r3, #0
 800c842:	d009      	beq.n	800c858 <HAL_UART_IRQHandler+0x1f4>
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f946 	bl	800cae0 <UART_EndTransmit_IT>
    return;
 800c854:	e000      	b.n	800c858 <HAL_UART_IRQHandler+0x1f4>
    return;
 800c856:	bf00      	nop
  }
}
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	0800ca0d 	.word	0x0800ca0d

0800c864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d11e      	bne.n	800c8e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68da      	ldr	r2, [r3, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	695a      	ldr	r2, [r3, #20]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0201 	bic.w	r2, r2, #1
 800c8cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	695a      	ldr	r2, [r3, #20]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7f8 ffd4 	bl	8005894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ec:	bf00      	nop
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f7ff ffb8 	bl	800c878 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c920:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c92c:	2b80      	cmp	r3, #128	; 0x80
 800c92e:	bf0c      	ite	eq
 800c930:	2301      	moveq	r3, #1
 800c932:	2300      	movne	r3, #0
 800c934:	b2db      	uxtb	r3, r3
 800c936:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b21      	cmp	r3, #33	; 0x21
 800c942:	d108      	bne.n	800c956 <UART_DMAError+0x46>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2200      	movs	r2, #0
 800c94e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c950:	68b8      	ldr	r0, [r7, #8]
 800c952:	f000 f827 	bl	800c9a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c960:	2b40      	cmp	r3, #64	; 0x40
 800c962:	bf0c      	ite	eq
 800c964:	2301      	moveq	r3, #1
 800c966:	2300      	movne	r3, #0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b22      	cmp	r3, #34	; 0x22
 800c976:	d108      	bne.n	800c98a <UART_DMAError+0x7a>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d005      	beq.n	800c98a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2200      	movs	r2, #0
 800c982:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c984:	68b8      	ldr	r0, [r7, #8]
 800c986:	f000 f823 	bl	800c9d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98e:	f043 0210 	orr.w	r2, r3, #16
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c996:	68b8      	ldr	r0, [r7, #8]
 800c998:	f7f8 ff72 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68da      	ldr	r2, [r3, #12]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c9ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2220      	movs	r2, #32
 800c9c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68da      	ldr	r2, [r3, #12]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c9e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	695a      	ldr	r2, [r3, #20]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f022 0201 	bic.w	r2, r2, #1
 800c9f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7f8 ff2a 	bl	8005880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca2c:	bf00      	nop
 800ca2e:	3710      	adds	r7, #16
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b21      	cmp	r3, #33	; 0x21
 800ca46:	d144      	bne.n	800cad2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca50:	d11a      	bne.n	800ca88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d105      	bne.n	800ca7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6a1b      	ldr	r3, [r3, #32]
 800ca74:	1c9a      	adds	r2, r3, #2
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	621a      	str	r2, [r3, #32]
 800ca7a:	e00e      	b.n	800ca9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	621a      	str	r2, [r3, #32]
 800ca86:	e008      	b.n	800ca9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a1b      	ldr	r3, [r3, #32]
 800ca8c:	1c59      	adds	r1, r3, #1
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6211      	str	r1, [r2, #32]
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	3b01      	subs	r3, #1
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4619      	mov	r1, r3
 800caa8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10f      	bne.n	800cace <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cabc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68da      	ldr	r2, [r3, #12]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cacc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	e000      	b.n	800cad4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cad2:	2302      	movs	r3, #2
  }
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff feaf 	bl	800c864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b22      	cmp	r3, #34	; 0x22
 800cb22:	d171      	bne.n	800cc08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb2c:	d123      	bne.n	800cb76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10e      	bne.n	800cb5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	1c9a      	adds	r2, r3, #2
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	629a      	str	r2, [r3, #40]	; 0x28
 800cb58:	e029      	b.n	800cbae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	629a      	str	r2, [r3, #40]	; 0x28
 800cb74:	e01b      	b.n	800cbae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6858      	ldr	r0, [r3, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	1c59      	adds	r1, r3, #1
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	6291      	str	r1, [r2, #40]	; 0x28
 800cb8e:	b2c2      	uxtb	r2, r0
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	e00c      	b.n	800cbae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba0:	1c58      	adds	r0, r3, #1
 800cba2:	6879      	ldr	r1, [r7, #4]
 800cba4:	6288      	str	r0, [r1, #40]	; 0x28
 800cba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cbaa:	b2d2      	uxtb	r2, r2
 800cbac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d120      	bne.n	800cc04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 0220 	bic.w	r2, r2, #32
 800cbd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cbe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	695a      	ldr	r2, [r3, #20]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f022 0201 	bic.w	r2, r2, #1
 800cbf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2220      	movs	r2, #32
 800cbf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f8 fe4a 	bl	8005894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	e002      	b.n	800cc0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e000      	b.n	800cc0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800cc08:	2302      	movs	r3, #2
  }
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc18:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc32:	68d9      	ldr	r1, [r3, #12]
 800cc34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	ea40 0301 	orr.w	r3, r0, r1
 800cc3e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc44:	689a      	ldr	r2, [r3, #8]
 800cc46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	431a      	orrs	r2, r3
 800cc56:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc5a:	69db      	ldr	r3, [r3, #28]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800cc62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cc6e:	f021 010c 	bic.w	r1, r1, #12
 800cc72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc90:	6999      	ldr	r1, [r3, #24]
 800cc92:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	ea40 0301 	orr.w	r3, r0, r1
 800cc9c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cca2:	69db      	ldr	r3, [r3, #28]
 800cca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cca8:	f040 824a 	bne.w	800d140 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	4b96      	ldr	r3, [pc, #600]	; (800cf0c <UART_SetConfig+0x2f8>)
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d006      	beq.n	800ccc6 <UART_SetConfig+0xb2>
 800ccb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4b94      	ldr	r3, [pc, #592]	; (800cf10 <UART_SetConfig+0x2fc>)
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	f040 8129 	bne.w	800cf18 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccc6:	f7fc fd13 	bl	80096f0 <HAL_RCC_GetPCLK2Freq>
 800ccca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ccce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800ccd8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800ccdc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800cce0:	4622      	mov	r2, r4
 800cce2:	462b      	mov	r3, r5
 800cce4:	1891      	adds	r1, r2, r2
 800cce6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800ccea:	415b      	adcs	r3, r3
 800ccec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ccf0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	1851      	adds	r1, r2, r1
 800ccf8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	414b      	adcs	r3, r1
 800cd00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800cd10:	4649      	mov	r1, r9
 800cd12:	00cb      	lsls	r3, r1, #3
 800cd14:	4641      	mov	r1, r8
 800cd16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	00ca      	lsls	r2, r1, #3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	4619      	mov	r1, r3
 800cd22:	4603      	mov	r3, r0
 800cd24:	4622      	mov	r2, r4
 800cd26:	189b      	adds	r3, r3, r2
 800cd28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800cd2c:	462b      	mov	r3, r5
 800cd2e:	460a      	mov	r2, r1
 800cd30:	eb42 0303 	adc.w	r3, r2, r3
 800cd34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cd38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800cd44:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800cd48:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	18db      	adds	r3, r3, r3
 800cd50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd54:	4613      	mov	r3, r2
 800cd56:	eb42 0303 	adc.w	r3, r2, r3
 800cd5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd5e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800cd62:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800cd66:	f7f3 ffa7 	bl	8000cb8 <__aeabi_uldivmod>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	4b69      	ldr	r3, [pc, #420]	; (800cf14 <UART_SetConfig+0x300>)
 800cd70:	fba3 2302 	umull	r2, r3, r3, r2
 800cd74:	095b      	lsrs	r3, r3, #5
 800cd76:	011c      	lsls	r4, r3, #4
 800cd78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800cd82:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800cd86:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800cd8a:	4642      	mov	r2, r8
 800cd8c:	464b      	mov	r3, r9
 800cd8e:	1891      	adds	r1, r2, r2
 800cd90:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800cd94:	415b      	adcs	r3, r3
 800cd96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cd9a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800cd9e:	4641      	mov	r1, r8
 800cda0:	1851      	adds	r1, r2, r1
 800cda2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800cda6:	4649      	mov	r1, r9
 800cda8:	414b      	adcs	r3, r1
 800cdaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cdae:	f04f 0200 	mov.w	r2, #0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800cdba:	4659      	mov	r1, fp
 800cdbc:	00cb      	lsls	r3, r1, #3
 800cdbe:	4651      	mov	r1, sl
 800cdc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdc4:	4651      	mov	r1, sl
 800cdc6:	00ca      	lsls	r2, r1, #3
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	4603      	mov	r3, r0
 800cdce:	4642      	mov	r2, r8
 800cdd0:	189b      	adds	r3, r3, r2
 800cdd2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	460a      	mov	r2, r1
 800cdda:	eb42 0303 	adc.w	r3, r2, r3
 800cdde:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800cde2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800cdee:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800cdf2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	18db      	adds	r3, r3, r3
 800cdfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cdfe:	4613      	mov	r3, r2
 800ce00:	eb42 0303 	adc.w	r3, r2, r3
 800ce04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ce08:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800ce0c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800ce10:	f7f3 ff52 	bl	8000cb8 <__aeabi_uldivmod>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4b3e      	ldr	r3, [pc, #248]	; (800cf14 <UART_SetConfig+0x300>)
 800ce1c:	fba3 2301 	umull	r2, r3, r3, r1
 800ce20:	095b      	lsrs	r3, r3, #5
 800ce22:	2264      	movs	r2, #100	; 0x64
 800ce24:	fb02 f303 	mul.w	r3, r2, r3
 800ce28:	1acb      	subs	r3, r1, r3
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ce30:	4b38      	ldr	r3, [pc, #224]	; (800cf14 <UART_SetConfig+0x300>)
 800ce32:	fba3 2302 	umull	r2, r3, r3, r2
 800ce36:	095b      	lsrs	r3, r3, #5
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ce3e:	441c      	add	r4, r3
 800ce40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800ce44:	2200      	movs	r2, #0
 800ce46:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800ce4a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800ce4e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800ce52:	4642      	mov	r2, r8
 800ce54:	464b      	mov	r3, r9
 800ce56:	1891      	adds	r1, r2, r2
 800ce58:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800ce5c:	415b      	adcs	r3, r3
 800ce5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ce62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800ce66:	4641      	mov	r1, r8
 800ce68:	1851      	adds	r1, r2, r1
 800ce6a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800ce6e:	4649      	mov	r1, r9
 800ce70:	414b      	adcs	r3, r1
 800ce72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	f04f 0300 	mov.w	r3, #0
 800ce7e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800ce82:	4659      	mov	r1, fp
 800ce84:	00cb      	lsls	r3, r1, #3
 800ce86:	4651      	mov	r1, sl
 800ce88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce8c:	4651      	mov	r1, sl
 800ce8e:	00ca      	lsls	r2, r1, #3
 800ce90:	4610      	mov	r0, r2
 800ce92:	4619      	mov	r1, r3
 800ce94:	4603      	mov	r3, r0
 800ce96:	4642      	mov	r2, r8
 800ce98:	189b      	adds	r3, r3, r2
 800ce9a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800ce9e:	464b      	mov	r3, r9
 800cea0:	460a      	mov	r2, r1
 800cea2:	eb42 0303 	adc.w	r3, r2, r3
 800cea6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800ceaa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800ceb6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800ceba:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800cebe:	460b      	mov	r3, r1
 800cec0:	18db      	adds	r3, r3, r3
 800cec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cec6:	4613      	mov	r3, r2
 800cec8:	eb42 0303 	adc.w	r3, r2, r3
 800cecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ced0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ced4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800ced8:	f7f3 feee 	bl	8000cb8 <__aeabi_uldivmod>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4b0c      	ldr	r3, [pc, #48]	; (800cf14 <UART_SetConfig+0x300>)
 800cee2:	fba3 1302 	umull	r1, r3, r3, r2
 800cee6:	095b      	lsrs	r3, r3, #5
 800cee8:	2164      	movs	r1, #100	; 0x64
 800ceea:	fb01 f303 	mul.w	r3, r1, r3
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	3332      	adds	r3, #50	; 0x32
 800cef4:	4a07      	ldr	r2, [pc, #28]	; (800cf14 <UART_SetConfig+0x300>)
 800cef6:	fba2 2303 	umull	r2, r3, r2, r3
 800cefa:	095b      	lsrs	r3, r3, #5
 800cefc:	f003 0207 	and.w	r2, r3, #7
 800cf00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4422      	add	r2, r4
 800cf08:	609a      	str	r2, [r3, #8]
 800cf0a:	e349      	b.n	800d5a0 <UART_SetConfig+0x98c>
 800cf0c:	40011000 	.word	0x40011000
 800cf10:	40011400 	.word	0x40011400
 800cf14:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf18:	f7fc fbd6 	bl	80096c8 <HAL_RCC_GetPCLK1Freq>
 800cf1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800cf2a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800cf2e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800cf32:	4622      	mov	r2, r4
 800cf34:	462b      	mov	r3, r5
 800cf36:	1891      	adds	r1, r2, r2
 800cf38:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800cf3c:	415b      	adcs	r3, r3
 800cf3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cf42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800cf46:	4621      	mov	r1, r4
 800cf48:	eb12 0a01 	adds.w	sl, r2, r1
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	eb43 0b01 	adc.w	fp, r3, r1
 800cf52:	f04f 0200 	mov.w	r2, #0
 800cf56:	f04f 0300 	mov.w	r3, #0
 800cf5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf66:	4692      	mov	sl, r2
 800cf68:	469b      	mov	fp, r3
 800cf6a:	4623      	mov	r3, r4
 800cf6c:	eb1a 0303 	adds.w	r3, sl, r3
 800cf70:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800cf74:	462b      	mov	r3, r5
 800cf76:	eb4b 0303 	adc.w	r3, fp, r3
 800cf7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800cf7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800cf8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800cf8e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800cf92:	460b      	mov	r3, r1
 800cf94:	18db      	adds	r3, r3, r3
 800cf96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	eb42 0303 	adc.w	r3, r2, r3
 800cfa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cfa4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800cfa8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800cfac:	f7f3 fe84 	bl	8000cb8 <__aeabi_uldivmod>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4b61      	ldr	r3, [pc, #388]	; (800d13c <UART_SetConfig+0x528>)
 800cfb6:	fba3 2302 	umull	r2, r3, r3, r2
 800cfba:	095b      	lsrs	r3, r3, #5
 800cfbc:	011c      	lsls	r4, r3, #4
 800cfbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cfc8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800cfcc:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	464b      	mov	r3, r9
 800cfd4:	1891      	adds	r1, r2, r2
 800cfd6:	67b9      	str	r1, [r7, #120]	; 0x78
 800cfd8:	415b      	adcs	r3, r3
 800cfda:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cfdc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800cfe0:	4641      	mov	r1, r8
 800cfe2:	1851      	adds	r1, r2, r1
 800cfe4:	6739      	str	r1, [r7, #112]	; 0x70
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	414b      	adcs	r3, r1
 800cfea:	677b      	str	r3, [r7, #116]	; 0x74
 800cfec:	f04f 0200 	mov.w	r2, #0
 800cff0:	f04f 0300 	mov.w	r3, #0
 800cff4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800cff8:	4659      	mov	r1, fp
 800cffa:	00cb      	lsls	r3, r1, #3
 800cffc:	4651      	mov	r1, sl
 800cffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d002:	4651      	mov	r1, sl
 800d004:	00ca      	lsls	r2, r1, #3
 800d006:	4610      	mov	r0, r2
 800d008:	4619      	mov	r1, r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	4642      	mov	r2, r8
 800d00e:	189b      	adds	r3, r3, r2
 800d010:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800d014:	464b      	mov	r3, r9
 800d016:	460a      	mov	r2, r1
 800d018:	eb42 0303 	adc.w	r3, r2, r3
 800d01c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800d02c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800d030:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800d034:	460b      	mov	r3, r1
 800d036:	18db      	adds	r3, r3, r3
 800d038:	66bb      	str	r3, [r7, #104]	; 0x68
 800d03a:	4613      	mov	r3, r2
 800d03c:	eb42 0303 	adc.w	r3, r2, r3
 800d040:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d042:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d046:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800d04a:	f7f3 fe35 	bl	8000cb8 <__aeabi_uldivmod>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4611      	mov	r1, r2
 800d054:	4b39      	ldr	r3, [pc, #228]	; (800d13c <UART_SetConfig+0x528>)
 800d056:	fba3 2301 	umull	r2, r3, r3, r1
 800d05a:	095b      	lsrs	r3, r3, #5
 800d05c:	2264      	movs	r2, #100	; 0x64
 800d05e:	fb02 f303 	mul.w	r3, r2, r3
 800d062:	1acb      	subs	r3, r1, r3
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d06a:	4b34      	ldr	r3, [pc, #208]	; (800d13c <UART_SetConfig+0x528>)
 800d06c:	fba3 2302 	umull	r2, r3, r3, r2
 800d070:	095b      	lsrs	r3, r3, #5
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d078:	441c      	add	r4, r3
 800d07a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d07e:	2200      	movs	r2, #0
 800d080:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800d084:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800d088:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800d08c:	4642      	mov	r2, r8
 800d08e:	464b      	mov	r3, r9
 800d090:	1891      	adds	r1, r2, r2
 800d092:	6639      	str	r1, [r7, #96]	; 0x60
 800d094:	415b      	adcs	r3, r3
 800d096:	667b      	str	r3, [r7, #100]	; 0x64
 800d098:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d09c:	4641      	mov	r1, r8
 800d09e:	1851      	adds	r1, r2, r1
 800d0a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	414b      	adcs	r3, r1
 800d0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0a8:	f04f 0200 	mov.w	r2, #0
 800d0ac:	f04f 0300 	mov.w	r3, #0
 800d0b0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800d0b4:	4659      	mov	r1, fp
 800d0b6:	00cb      	lsls	r3, r1, #3
 800d0b8:	4651      	mov	r1, sl
 800d0ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0be:	4651      	mov	r1, sl
 800d0c0:	00ca      	lsls	r2, r1, #3
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	4642      	mov	r2, r8
 800d0ca:	189b      	adds	r3, r3, r2
 800d0cc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800d0d0:	464b      	mov	r3, r9
 800d0d2:	460a      	mov	r2, r1
 800d0d4:	eb42 0303 	adc.w	r3, r2, r3
 800d0d8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800d0dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800d0e8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800d0ec:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	18db      	adds	r3, r3, r3
 800d0f4:	653b      	str	r3, [r7, #80]	; 0x50
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	eb42 0303 	adc.w	r3, r2, r3
 800d0fc:	657b      	str	r3, [r7, #84]	; 0x54
 800d0fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d102:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800d106:	f7f3 fdd7 	bl	8000cb8 <__aeabi_uldivmod>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <UART_SetConfig+0x528>)
 800d110:	fba3 1302 	umull	r1, r3, r3, r2
 800d114:	095b      	lsrs	r3, r3, #5
 800d116:	2164      	movs	r1, #100	; 0x64
 800d118:	fb01 f303 	mul.w	r3, r1, r3
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	3332      	adds	r3, #50	; 0x32
 800d122:	4a06      	ldr	r2, [pc, #24]	; (800d13c <UART_SetConfig+0x528>)
 800d124:	fba2 2303 	umull	r2, r3, r2, r3
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	f003 0207 	and.w	r2, r3, #7
 800d12e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4422      	add	r2, r4
 800d136:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d138:	e232      	b.n	800d5a0 <UART_SetConfig+0x98c>
 800d13a:	bf00      	nop
 800d13c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d140:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	4b8d      	ldr	r3, [pc, #564]	; (800d37c <UART_SetConfig+0x768>)
 800d148:	429a      	cmp	r2, r3
 800d14a:	d006      	beq.n	800d15a <UART_SetConfig+0x546>
 800d14c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	4b8b      	ldr	r3, [pc, #556]	; (800d380 <UART_SetConfig+0x76c>)
 800d154:	429a      	cmp	r2, r3
 800d156:	f040 8117 	bne.w	800d388 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d15a:	f7fc fac9 	bl	80096f0 <HAL_RCC_GetPCLK2Freq>
 800d15e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d166:	2200      	movs	r2, #0
 800d168:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800d16c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800d170:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800d174:	4622      	mov	r2, r4
 800d176:	462b      	mov	r3, r5
 800d178:	1891      	adds	r1, r2, r2
 800d17a:	64b9      	str	r1, [r7, #72]	; 0x48
 800d17c:	415b      	adcs	r3, r3
 800d17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d184:	4621      	mov	r1, r4
 800d186:	eb12 0801 	adds.w	r8, r2, r1
 800d18a:	4629      	mov	r1, r5
 800d18c:	eb43 0901 	adc.w	r9, r3, r1
 800d190:	f04f 0200 	mov.w	r2, #0
 800d194:	f04f 0300 	mov.w	r3, #0
 800d198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d19c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1a4:	4690      	mov	r8, r2
 800d1a6:	4699      	mov	r9, r3
 800d1a8:	4623      	mov	r3, r4
 800d1aa:	eb18 0303 	adds.w	r3, r8, r3
 800d1ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	eb49 0303 	adc.w	r3, r9, r3
 800d1b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800d1bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800d1c8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800d1cc:	f04f 0200 	mov.w	r2, #0
 800d1d0:	f04f 0300 	mov.w	r3, #0
 800d1d4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800d1d8:	4629      	mov	r1, r5
 800d1da:	008b      	lsls	r3, r1, #2
 800d1dc:	4621      	mov	r1, r4
 800d1de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	008a      	lsls	r2, r1, #2
 800d1e6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800d1ea:	f7f3 fd65 	bl	8000cb8 <__aeabi_uldivmod>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4b64      	ldr	r3, [pc, #400]	; (800d384 <UART_SetConfig+0x770>)
 800d1f4:	fba3 2302 	umull	r2, r3, r3, r2
 800d1f8:	095b      	lsrs	r3, r3, #5
 800d1fa:	011c      	lsls	r4, r3, #4
 800d1fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d200:	2200      	movs	r2, #0
 800d202:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800d206:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800d20a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800d20e:	4642      	mov	r2, r8
 800d210:	464b      	mov	r3, r9
 800d212:	1891      	adds	r1, r2, r2
 800d214:	6439      	str	r1, [r7, #64]	; 0x40
 800d216:	415b      	adcs	r3, r3
 800d218:	647b      	str	r3, [r7, #68]	; 0x44
 800d21a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d21e:	4641      	mov	r1, r8
 800d220:	1851      	adds	r1, r2, r1
 800d222:	63b9      	str	r1, [r7, #56]	; 0x38
 800d224:	4649      	mov	r1, r9
 800d226:	414b      	adcs	r3, r1
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d22a:	f04f 0200 	mov.w	r2, #0
 800d22e:	f04f 0300 	mov.w	r3, #0
 800d232:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800d236:	4659      	mov	r1, fp
 800d238:	00cb      	lsls	r3, r1, #3
 800d23a:	4651      	mov	r1, sl
 800d23c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d240:	4651      	mov	r1, sl
 800d242:	00ca      	lsls	r2, r1, #3
 800d244:	4610      	mov	r0, r2
 800d246:	4619      	mov	r1, r3
 800d248:	4603      	mov	r3, r0
 800d24a:	4642      	mov	r2, r8
 800d24c:	189b      	adds	r3, r3, r2
 800d24e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800d252:	464b      	mov	r3, r9
 800d254:	460a      	mov	r2, r1
 800d256:	eb42 0303 	adc.w	r3, r2, r3
 800d25a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800d25e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800d26a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	f04f 0300 	mov.w	r3, #0
 800d276:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800d27a:	4649      	mov	r1, r9
 800d27c:	008b      	lsls	r3, r1, #2
 800d27e:	4641      	mov	r1, r8
 800d280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d284:	4641      	mov	r1, r8
 800d286:	008a      	lsls	r2, r1, #2
 800d288:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800d28c:	f7f3 fd14 	bl	8000cb8 <__aeabi_uldivmod>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	4b3b      	ldr	r3, [pc, #236]	; (800d384 <UART_SetConfig+0x770>)
 800d296:	fba3 1302 	umull	r1, r3, r3, r2
 800d29a:	095b      	lsrs	r3, r3, #5
 800d29c:	2164      	movs	r1, #100	; 0x64
 800d29e:	fb01 f303 	mul.w	r3, r1, r3
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	011b      	lsls	r3, r3, #4
 800d2a6:	3332      	adds	r3, #50	; 0x32
 800d2a8:	4a36      	ldr	r2, [pc, #216]	; (800d384 <UART_SetConfig+0x770>)
 800d2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ae:	095b      	lsrs	r3, r3, #5
 800d2b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2b4:	441c      	add	r4, r3
 800d2b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800d2c0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d2c4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800d2c8:	4642      	mov	r2, r8
 800d2ca:	464b      	mov	r3, r9
 800d2cc:	1891      	adds	r1, r2, r2
 800d2ce:	6339      	str	r1, [r7, #48]	; 0x30
 800d2d0:	415b      	adcs	r3, r3
 800d2d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d2d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d2d8:	4641      	mov	r1, r8
 800d2da:	1851      	adds	r1, r2, r1
 800d2dc:	62b9      	str	r1, [r7, #40]	; 0x28
 800d2de:	4649      	mov	r1, r9
 800d2e0:	414b      	adcs	r3, r1
 800d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2e4:	f04f 0200 	mov.w	r2, #0
 800d2e8:	f04f 0300 	mov.w	r3, #0
 800d2ec:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800d2f0:	4659      	mov	r1, fp
 800d2f2:	00cb      	lsls	r3, r1, #3
 800d2f4:	4651      	mov	r1, sl
 800d2f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2fa:	4651      	mov	r1, sl
 800d2fc:	00ca      	lsls	r2, r1, #3
 800d2fe:	4610      	mov	r0, r2
 800d300:	4619      	mov	r1, r3
 800d302:	4603      	mov	r3, r0
 800d304:	4642      	mov	r2, r8
 800d306:	189b      	adds	r3, r3, r2
 800d308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800d30c:	464b      	mov	r3, r9
 800d30e:	460a      	mov	r2, r1
 800d310:	eb42 0303 	adc.w	r3, r2, r3
 800d314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d318:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800d324:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800d328:	f04f 0200 	mov.w	r2, #0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800d334:	4649      	mov	r1, r9
 800d336:	008b      	lsls	r3, r1, #2
 800d338:	4641      	mov	r1, r8
 800d33a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d33e:	4641      	mov	r1, r8
 800d340:	008a      	lsls	r2, r1, #2
 800d342:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d346:	f7f3 fcb7 	bl	8000cb8 <__aeabi_uldivmod>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4b0d      	ldr	r3, [pc, #52]	; (800d384 <UART_SetConfig+0x770>)
 800d350:	fba3 1302 	umull	r1, r3, r3, r2
 800d354:	095b      	lsrs	r3, r3, #5
 800d356:	2164      	movs	r1, #100	; 0x64
 800d358:	fb01 f303 	mul.w	r3, r1, r3
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	011b      	lsls	r3, r3, #4
 800d360:	3332      	adds	r3, #50	; 0x32
 800d362:	4a08      	ldr	r2, [pc, #32]	; (800d384 <UART_SetConfig+0x770>)
 800d364:	fba2 2303 	umull	r2, r3, r2, r3
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	f003 020f 	and.w	r2, r3, #15
 800d36e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4422      	add	r2, r4
 800d376:	609a      	str	r2, [r3, #8]
 800d378:	e112      	b.n	800d5a0 <UART_SetConfig+0x98c>
 800d37a:	bf00      	nop
 800d37c:	40011000 	.word	0x40011000
 800d380:	40011400 	.word	0x40011400
 800d384:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800d388:	f7fc f99e 	bl	80096c8 <HAL_RCC_GetPCLK1Freq>
 800d38c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d390:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d394:	2200      	movs	r2, #0
 800d396:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d39a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d39e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800d3a2:	4642      	mov	r2, r8
 800d3a4:	464b      	mov	r3, r9
 800d3a6:	1891      	adds	r1, r2, r2
 800d3a8:	6239      	str	r1, [r7, #32]
 800d3aa:	415b      	adcs	r3, r3
 800d3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3b2:	4641      	mov	r1, r8
 800d3b4:	1854      	adds	r4, r2, r1
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	eb43 0501 	adc.w	r5, r3, r1
 800d3bc:	f04f 0200 	mov.w	r2, #0
 800d3c0:	f04f 0300 	mov.w	r3, #0
 800d3c4:	00eb      	lsls	r3, r5, #3
 800d3c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3ca:	00e2      	lsls	r2, r4, #3
 800d3cc:	4614      	mov	r4, r2
 800d3ce:	461d      	mov	r5, r3
 800d3d0:	4643      	mov	r3, r8
 800d3d2:	18e3      	adds	r3, r4, r3
 800d3d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d3d8:	464b      	mov	r3, r9
 800d3da:	eb45 0303 	adc.w	r3, r5, r3
 800d3de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d3e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d3ee:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d3f2:	f04f 0200 	mov.w	r2, #0
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800d3fe:	4629      	mov	r1, r5
 800d400:	008b      	lsls	r3, r1, #2
 800d402:	4621      	mov	r1, r4
 800d404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d408:	4621      	mov	r1, r4
 800d40a:	008a      	lsls	r2, r1, #2
 800d40c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d410:	f7f3 fc52 	bl	8000cb8 <__aeabi_uldivmod>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4b64      	ldr	r3, [pc, #400]	; (800d5ac <UART_SetConfig+0x998>)
 800d41a:	fba3 2302 	umull	r2, r3, r3, r2
 800d41e:	095b      	lsrs	r3, r3, #5
 800d420:	011c      	lsls	r4, r3, #4
 800d422:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d426:	2200      	movs	r2, #0
 800d428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d42c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d430:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800d434:	4642      	mov	r2, r8
 800d436:	464b      	mov	r3, r9
 800d438:	1891      	adds	r1, r2, r2
 800d43a:	61b9      	str	r1, [r7, #24]
 800d43c:	415b      	adcs	r3, r3
 800d43e:	61fb      	str	r3, [r7, #28]
 800d440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d444:	4641      	mov	r1, r8
 800d446:	1851      	adds	r1, r2, r1
 800d448:	6139      	str	r1, [r7, #16]
 800d44a:	4649      	mov	r1, r9
 800d44c:	414b      	adcs	r3, r1
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	f04f 0200 	mov.w	r2, #0
 800d454:	f04f 0300 	mov.w	r3, #0
 800d458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d45c:	4659      	mov	r1, fp
 800d45e:	00cb      	lsls	r3, r1, #3
 800d460:	4651      	mov	r1, sl
 800d462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d466:	4651      	mov	r1, sl
 800d468:	00ca      	lsls	r2, r1, #3
 800d46a:	4610      	mov	r0, r2
 800d46c:	4619      	mov	r1, r3
 800d46e:	4603      	mov	r3, r0
 800d470:	4642      	mov	r2, r8
 800d472:	189b      	adds	r3, r3, r2
 800d474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d478:	464b      	mov	r3, r9
 800d47a:	460a      	mov	r2, r1
 800d47c:	eb42 0303 	adc.w	r3, r2, r3
 800d480:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d484:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d490:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	f04f 0300 	mov.w	r3, #0
 800d49c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	008b      	lsls	r3, r1, #2
 800d4a4:	4641      	mov	r1, r8
 800d4a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4aa:	4641      	mov	r1, r8
 800d4ac:	008a      	lsls	r2, r1, #2
 800d4ae:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d4b2:	f7f3 fc01 	bl	8000cb8 <__aeabi_uldivmod>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4b3c      	ldr	r3, [pc, #240]	; (800d5ac <UART_SetConfig+0x998>)
 800d4bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d4c0:	095b      	lsrs	r3, r3, #5
 800d4c2:	2164      	movs	r1, #100	; 0x64
 800d4c4:	fb01 f303 	mul.w	r3, r1, r3
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	3332      	adds	r3, #50	; 0x32
 800d4ce:	4a37      	ldr	r2, [pc, #220]	; (800d5ac <UART_SetConfig+0x998>)
 800d4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d4:	095b      	lsrs	r3, r3, #5
 800d4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4da:	441c      	add	r4, r3
 800d4dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d4e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d4ea:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800d4ee:	4642      	mov	r2, r8
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	1891      	adds	r1, r2, r2
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	415b      	adcs	r3, r3
 800d4f8:	60fb      	str	r3, [r7, #12]
 800d4fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4fe:	4641      	mov	r1, r8
 800d500:	1851      	adds	r1, r2, r1
 800d502:	6039      	str	r1, [r7, #0]
 800d504:	4649      	mov	r1, r9
 800d506:	414b      	adcs	r3, r1
 800d508:	607b      	str	r3, [r7, #4]
 800d50a:	f04f 0200 	mov.w	r2, #0
 800d50e:	f04f 0300 	mov.w	r3, #0
 800d512:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d516:	4659      	mov	r1, fp
 800d518:	00cb      	lsls	r3, r1, #3
 800d51a:	4651      	mov	r1, sl
 800d51c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d520:	4651      	mov	r1, sl
 800d522:	00ca      	lsls	r2, r1, #3
 800d524:	4610      	mov	r0, r2
 800d526:	4619      	mov	r1, r3
 800d528:	4603      	mov	r3, r0
 800d52a:	4642      	mov	r2, r8
 800d52c:	189b      	adds	r3, r3, r2
 800d52e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d532:	464b      	mov	r3, r9
 800d534:	460a      	mov	r2, r1
 800d536:	eb42 0303 	adc.w	r3, r2, r3
 800d53a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d53e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d54a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d54e:	f04f 0200 	mov.w	r2, #0
 800d552:	f04f 0300 	mov.w	r3, #0
 800d556:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800d55a:	4649      	mov	r1, r9
 800d55c:	008b      	lsls	r3, r1, #2
 800d55e:	4641      	mov	r1, r8
 800d560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d564:	4641      	mov	r1, r8
 800d566:	008a      	lsls	r2, r1, #2
 800d568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d56c:	f7f3 fba4 	bl	8000cb8 <__aeabi_uldivmod>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <UART_SetConfig+0x998>)
 800d576:	fba3 1302 	umull	r1, r3, r3, r2
 800d57a:	095b      	lsrs	r3, r3, #5
 800d57c:	2164      	movs	r1, #100	; 0x64
 800d57e:	fb01 f303 	mul.w	r3, r1, r3
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	011b      	lsls	r3, r3, #4
 800d586:	3332      	adds	r3, #50	; 0x32
 800d588:	4a08      	ldr	r2, [pc, #32]	; (800d5ac <UART_SetConfig+0x998>)
 800d58a:	fba2 2303 	umull	r2, r3, r2, r3
 800d58e:	095b      	lsrs	r3, r3, #5
 800d590:	f003 020f 	and.w	r2, r3, #15
 800d594:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4422      	add	r2, r4
 800d59c:	609a      	str	r2, [r3, #8]
}
 800d59e:	e7ff      	b.n	800d5a0 <UART_SetConfig+0x98c>
 800d5a0:	bf00      	nop
 800d5a2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5ac:	51eb851f 	.word	0x51eb851f

0800d5b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	b480      	push	{r7}
 800d5b4:	b085      	sub	sp, #20
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	f107 001c 	add.w	r0, r7, #28
 800d5be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d5c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d5ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d5ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d5d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d5d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d5da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d5ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	431a      	orrs	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	b004      	add	sp, #16
 800d604:	4770      	bx	lr

0800d606 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d606:	b480      	push	{r7}
 800d608:	b083      	sub	sp, #12
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr

0800d642 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2203      	movs	r2, #3
 800d64e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d650:	2002      	movs	r0, #2
 800d652:	f7f9 fedb 	bl	800740c <HAL_Delay>
  
  return HAL_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0303 	and.w	r3, r3, #3
}
 800d670:	4618      	mov	r0, r3
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b085      	sub	sp, #20
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d69a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d6a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d6a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d6b6:	f023 030f 	bic.w	r3, r3, #15
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	b2db      	uxtb	r3, r3
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d6ea:	b480      	push	{r7}
 800d6ec:	b085      	sub	sp, #20
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3314      	adds	r3, #20
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
}  
 800d704:	4618      	mov	r0, r3
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685a      	ldr	r2, [r3, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d736:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d73c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d742:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	4313      	orrs	r3, r2
 800d748:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	431a      	orrs	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d75a:	2300      	movs	r3, #0

}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d776:	2310      	movs	r3, #16
 800d778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d77a:	2340      	movs	r3, #64	; 0x40
 800d77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4619      	mov	r1, r3
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff ff74 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d794:	f241 3288 	movw	r2, #5000	; 0x1388
 800d798:	2110      	movs	r1, #16
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 fa40 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a2:	69fb      	ldr	r3, [r7, #28]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d7ba:	2311      	movs	r3, #17
 800d7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7be:	2340      	movs	r3, #64	; 0x40
 800d7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff ff52 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7dc:	2111      	movs	r1, #17
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fa1e 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e6:	69fb      	ldr	r3, [r7, #28]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3720      	adds	r7, #32
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d7fe:	2312      	movs	r3, #18
 800d800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d806:	2300      	movs	r3, #0
 800d808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d80e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d810:	f107 0308 	add.w	r3, r7, #8
 800d814:	4619      	mov	r1, r3
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff ff30 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d81c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d820:	2112      	movs	r1, #18
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f9fc 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d82a:	69fb      	ldr	r3, [r7, #28]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3720      	adds	r7, #32
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d842:	2318      	movs	r3, #24
 800d844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d846:	2340      	movs	r3, #64	; 0x40
 800d848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d84a:	2300      	movs	r3, #0
 800d84c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d84e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d854:	f107 0308 	add.w	r3, r7, #8
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7ff ff0e 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d860:	f241 3288 	movw	r2, #5000	; 0x1388
 800d864:	2118      	movs	r1, #24
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f9da 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d86e:	69fb      	ldr	r3, [r7, #28]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d886:	2319      	movs	r3, #25
 800d888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d88e:	2300      	movs	r3, #0
 800d890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d898:	f107 0308 	add.w	r3, r7, #8
 800d89c:	4619      	mov	r1, r3
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff feec 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a8:	2119      	movs	r1, #25
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 f9b8 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3720      	adds	r7, #32
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d8c8:	230c      	movs	r3, #12
 800d8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8cc:	2340      	movs	r3, #64	; 0x40
 800d8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fecb 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d8e6:	4a05      	ldr	r2, [pc, #20]	; (800d8fc <SDMMC_CmdStopTransfer+0x40>)
 800d8e8:	210c      	movs	r1, #12
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 f998 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	05f5e100 	.word	0x05f5e100

0800d900 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b08a      	sub	sp, #40	; 0x28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d910:	2307      	movs	r3, #7
 800d912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d914:	2340      	movs	r3, #64	; 0x40
 800d916:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d918:	2300      	movs	r3, #0
 800d91a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d920:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d922:	f107 0310 	add.w	r3, r7, #16
 800d926:	4619      	mov	r1, r3
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff fea7 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d932:	2107      	movs	r1, #7
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 f973 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d93a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3728      	adds	r7, #40	; 0x28
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b088      	sub	sp, #32
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d94e:	2300      	movs	r3, #0
 800d950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d952:	2300      	movs	r3, #0
 800d954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d956:	2300      	movs	r3, #0
 800d958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d95a:	2300      	movs	r3, #0
 800d95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff fe86 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f92d 	bl	800dbd0 <SDMMC_GetCmdError>
 800d976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d978:	69fb      	ldr	r3, [r7, #28]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3720      	adds	r7, #32
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b088      	sub	sp, #32
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d98a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d98e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d990:	2308      	movs	r3, #8
 800d992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d998:	2300      	movs	r3, #0
 800d99a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d99c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9a2:	f107 0308 	add.w	r3, r7, #8
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff fe67 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fb16 	bl	800dfe0 <SDMMC_GetCmdResp7>
 800d9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3720      	adds	r7, #32
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b088      	sub	sp, #32
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d9ce:	2337      	movs	r3, #55	; 0x37
 800d9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9d2:	2340      	movs	r3, #64	; 0x40
 800d9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9e0:	f107 0308 	add.w	r3, r7, #8
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff fe48 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f0:	2137      	movs	r1, #55	; 0x37
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f914 	bl	800dc20 <SDMMC_GetCmdResp1>
 800d9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3720      	adds	r7, #32
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800da1a:	2329      	movs	r3, #41	; 0x29
 800da1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da1e:	2340      	movs	r3, #64	; 0x40
 800da20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da22:	2300      	movs	r3, #0
 800da24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da2c:	f107 0308 	add.w	r3, r7, #8
 800da30:	4619      	mov	r1, r3
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff fe22 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fa23 	bl	800de84 <SDMMC_GetCmdResp3>
 800da3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da40:	69fb      	ldr	r3, [r7, #28]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3720      	adds	r7, #32
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b088      	sub	sp, #32
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800da58:	2306      	movs	r3, #6
 800da5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da5c:	2340      	movs	r3, #64	; 0x40
 800da5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da60:	2300      	movs	r3, #0
 800da62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7ff fe03 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800da76:	f241 3288 	movw	r2, #5000	; 0x1388
 800da7a:	2106      	movs	r1, #6
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f8cf 	bl	800dc20 <SDMMC_GetCmdResp1>
 800da82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da84:	69fb      	ldr	r3, [r7, #28]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3720      	adds	r7, #32
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b088      	sub	sp, #32
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800da96:	2300      	movs	r3, #0
 800da98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800da9a:	2333      	movs	r3, #51	; 0x33
 800da9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da9e:	2340      	movs	r3, #64	; 0x40
 800daa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800daa2:	2300      	movs	r3, #0
 800daa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800daa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daac:	f107 0308 	add.w	r3, r7, #8
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff fde2 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800dab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dabc:	2133      	movs	r1, #51	; 0x33
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f8ae 	bl	800dc20 <SDMMC_GetCmdResp1>
 800dac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dac6:	69fb      	ldr	r3, [r7, #28]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3720      	adds	r7, #32
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dad8:	2300      	movs	r3, #0
 800dada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dadc:	2302      	movs	r3, #2
 800dade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800dae0:	23c0      	movs	r3, #192	; 0xc0
 800dae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dae4:	2300      	movs	r3, #0
 800dae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800daee:	f107 0308 	add.w	r3, r7, #8
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff fdc1 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f97c 	bl	800ddf8 <SDMMC_GetCmdResp2>
 800db00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db02:	69fb      	ldr	r3, [r7, #28]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800db1a:	2309      	movs	r3, #9
 800db1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800db1e:	23c0      	movs	r3, #192	; 0xc0
 800db20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db22:	2300      	movs	r3, #0
 800db24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db2c:	f107 0308 	add.w	r3, r7, #8
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7ff fda2 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f95d 	bl	800ddf8 <SDMMC_GetCmdResp2>
 800db3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db40:	69fb      	ldr	r3, [r7, #28]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3720      	adds	r7, #32
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b088      	sub	sp, #32
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800db58:	2303      	movs	r3, #3
 800db5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db5c:	2340      	movs	r3, #64	; 0x40
 800db5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800db60:	2300      	movs	r3, #0
 800db62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800db64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800db6a:	f107 0308 	add.w	r3, r7, #8
 800db6e:	4619      	mov	r1, r3
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f7ff fd83 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	2103      	movs	r1, #3
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f9bc 	bl	800def8 <SDMMC_GetCmdResp6>
 800db80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db82:	69fb      	ldr	r3, [r7, #28]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3720      	adds	r7, #32
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800db9a:	230d      	movs	r3, #13
 800db9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fd62 	bl	800d67c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dbb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbbc:	210d      	movs	r1, #13
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f82e 	bl	800dc20 <SDMMC_GetCmdResp1>
 800dbc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3720      	adds	r7, #32
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dbd0:	b490      	push	{r4, r7}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbd8:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <SDMMC_GetCmdError+0x48>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a0f      	ldr	r2, [pc, #60]	; (800dc1c <SDMMC_GetCmdError+0x4c>)
 800dbde:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe2:	0a5b      	lsrs	r3, r3, #9
 800dbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dbec:	4623      	mov	r3, r4
 800dbee:	1e5c      	subs	r4, r3, #1
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbf8:	e009      	b.n	800dc0e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d0f2      	beq.n	800dbec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	22c5      	movs	r2, #197	; 0xc5
 800dc0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bc90      	pop	{r4, r7}
 800dc16:	4770      	bx	lr
 800dc18:	20000000 	.word	0x20000000
 800dc1c:	10624dd3 	.word	0x10624dd3

0800dc20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	607a      	str	r2, [r7, #4]
 800dc2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc2e:	4b6f      	ldr	r3, [pc, #444]	; (800ddec <SDMMC_GetCmdResp1+0x1cc>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a6f      	ldr	r2, [pc, #444]	; (800ddf0 <SDMMC_GetCmdResp1+0x1d0>)
 800dc34:	fba2 2303 	umull	r2, r3, r2, r3
 800dc38:	0a5b      	lsrs	r3, r3, #9
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc40:	4623      	mov	r3, r4
 800dc42:	1e5c      	subs	r4, r3, #1
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d102      	bne.n	800dc4e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc4c:	e0c9      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f0      	beq.n	800dc40 <SDMMC_GetCmdResp1+0x20>
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1eb      	bne.n	800dc40 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6c:	f003 0304 	and.w	r3, r3, #4
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d004      	beq.n	800dc7e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2204      	movs	r2, #4
 800dc78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc7a:	2304      	movs	r3, #4
 800dc7c:	e0b1      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e0a6      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	22c5      	movs	r2, #197	; 0xc5
 800dc98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7ff fd18 	bl	800d6d0 <SDIO_GetCommandResponse>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	7afb      	ldrb	r3, [r7, #11]
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d001      	beq.n	800dcae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e099      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dcae:	2100      	movs	r1, #0
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff fd1a 	bl	800d6ea <SDIO_GetResponse>
 800dcb6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	4b4e      	ldr	r3, [pc, #312]	; (800ddf4 <SDMMC_GetCmdResp1+0x1d4>)
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e08d      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	da02      	bge.n	800dcd2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dcd0:	e087      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dcdc:	2340      	movs	r3, #64	; 0x40
 800dcde:	e080      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dcea:	2380      	movs	r3, #128	; 0x80
 800dcec:	e079      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dcf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcfc:	e071      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dd08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd0c:	e069      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dd18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd1c:	e061      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dd28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd2c:	e059      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd3c:	e051      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd4c:	e049      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dd58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dd5c:	e041      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800dd68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd6c:	e039      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dd78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dd7c:	e031      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dd88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dd8c:	e029      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dd98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dd9c:	e021      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dda8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ddac:	e019      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ddb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ddbc:	e011      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ddc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ddcc:	e009      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f003 0308 	and.w	r3, r3, #8
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ddd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dddc:	e001      	b.n	800dde2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ddde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd90      	pop	{r4, r7, pc}
 800ddea:	bf00      	nop
 800ddec:	20000000 	.word	0x20000000
 800ddf0:	10624dd3 	.word	0x10624dd3
 800ddf4:	fdffe008 	.word	0xfdffe008

0800ddf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ddf8:	b490      	push	{r4, r7}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de00:	4b1e      	ldr	r3, [pc, #120]	; (800de7c <SDMMC_GetCmdResp2+0x84>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a1e      	ldr	r2, [pc, #120]	; (800de80 <SDMMC_GetCmdResp2+0x88>)
 800de06:	fba2 2303 	umull	r2, r3, r2, r3
 800de0a:	0a5b      	lsrs	r3, r3, #9
 800de0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800de10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de14:	4623      	mov	r3, r4
 800de16:	1e5c      	subs	r4, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de20:	e026      	b.n	800de70 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d0f0      	beq.n	800de14 <SDMMC_GetCmdResp2+0x1c>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1eb      	bne.n	800de14 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de40:	f003 0304 	and.w	r3, r3, #4
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2204      	movs	r2, #4
 800de4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de4e:	2304      	movs	r3, #4
 800de50:	e00e      	b.n	800de70 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d004      	beq.n	800de68 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de64:	2301      	movs	r3, #1
 800de66:	e003      	b.n	800de70 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	22c5      	movs	r2, #197	; 0xc5
 800de6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bc90      	pop	{r4, r7}
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	20000000 	.word	0x20000000
 800de80:	10624dd3 	.word	0x10624dd3

0800de84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800de84:	b490      	push	{r4, r7}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de8c:	4b18      	ldr	r3, [pc, #96]	; (800def0 <SDMMC_GetCmdResp3+0x6c>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a18      	ldr	r2, [pc, #96]	; (800def4 <SDMMC_GetCmdResp3+0x70>)
 800de92:	fba2 2303 	umull	r2, r3, r2, r3
 800de96:	0a5b      	lsrs	r3, r3, #9
 800de98:	f241 3288 	movw	r2, #5000	; 0x1388
 800de9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dea0:	4623      	mov	r3, r4
 800dea2:	1e5c      	subs	r4, r3, #1
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800deac:	e01b      	b.n	800dee6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800deba:	2b00      	cmp	r3, #0
 800debc:	d0f0      	beq.n	800dea0 <SDMMC_GetCmdResp3+0x1c>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1eb      	bne.n	800dea0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d004      	beq.n	800dede <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2204      	movs	r2, #4
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800deda:	2304      	movs	r3, #4
 800dedc:	e003      	b.n	800dee6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	22c5      	movs	r2, #197	; 0xc5
 800dee2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bc90      	pop	{r4, r7}
 800deee:	4770      	bx	lr
 800def0:	20000000 	.word	0x20000000
 800def4:	10624dd3 	.word	0x10624dd3

0800def8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800def8:	b590      	push	{r4, r7, lr}
 800defa:	b087      	sub	sp, #28
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	460b      	mov	r3, r1
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df06:	4b34      	ldr	r3, [pc, #208]	; (800dfd8 <SDMMC_GetCmdResp6+0xe0>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a34      	ldr	r2, [pc, #208]	; (800dfdc <SDMMC_GetCmdResp6+0xe4>)
 800df0c:	fba2 2303 	umull	r2, r3, r2, r3
 800df10:	0a5b      	lsrs	r3, r3, #9
 800df12:	f241 3288 	movw	r2, #5000	; 0x1388
 800df16:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df1a:	4623      	mov	r3, r4
 800df1c:	1e5c      	subs	r4, r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d102      	bne.n	800df28 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df26:	e052      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800df34:	2b00      	cmp	r3, #0
 800df36:	d0f0      	beq.n	800df1a <SDMMC_GetCmdResp6+0x22>
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1eb      	bne.n	800df1a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df46:	f003 0304 	and.w	r3, r3, #4
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d004      	beq.n	800df58 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2204      	movs	r2, #4
 800df52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df54:	2304      	movs	r3, #4
 800df56:	e03a      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d004      	beq.n	800df6e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2201      	movs	r2, #1
 800df68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e02f      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f7ff fbae 	bl	800d6d0 <SDIO_GetCommandResponse>
 800df74:	4603      	mov	r3, r0
 800df76:	461a      	mov	r2, r3
 800df78:	7afb      	ldrb	r3, [r7, #11]
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d001      	beq.n	800df82 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df7e:	2301      	movs	r3, #1
 800df80:	e025      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	22c5      	movs	r2, #197	; 0xc5
 800df86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800df88:	2100      	movs	r1, #0
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f7ff fbad 	bl	800d6ea <SDIO_GetResponse>
 800df90:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d106      	bne.n	800dfaa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	0c1b      	lsrs	r3, r3, #16
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e011      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfb8:	e009      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfc8:	e001      	b.n	800dfce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dfca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	371c      	adds	r7, #28
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd90      	pop	{r4, r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000000 	.word	0x20000000
 800dfdc:	10624dd3 	.word	0x10624dd3

0800dfe0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dfe0:	b490      	push	{r4, r7}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfe8:	4b21      	ldr	r3, [pc, #132]	; (800e070 <SDMMC_GetCmdResp7+0x90>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a21      	ldr	r2, [pc, #132]	; (800e074 <SDMMC_GetCmdResp7+0x94>)
 800dfee:	fba2 2303 	umull	r2, r3, r2, r3
 800dff2:	0a5b      	lsrs	r3, r3, #9
 800dff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dff8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dffc:	4623      	mov	r3, r4
 800dffe:	1e5c      	subs	r4, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d102      	bne.n	800e00a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e008:	e02c      	b.n	800e064 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e00e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0f0      	beq.n	800dffc <SDMMC_GetCmdResp7+0x1c>
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1eb      	bne.n	800dffc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e028:	f003 0304 	and.w	r3, r3, #4
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d004      	beq.n	800e03a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2204      	movs	r2, #4
 800e034:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e036:	2304      	movs	r3, #4
 800e038:	e014      	b.n	800e064 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e04c:	2301      	movs	r3, #1
 800e04e:	e009      	b.n	800e064 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2240      	movs	r2, #64	; 0x40
 800e060:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e062:	2300      	movs	r3, #0
  
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bc90      	pop	{r4, r7}
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	20000000 	.word	0x20000000
 800e074:	10624dd3 	.word	0x10624dd3

0800e078 <main>:




int main(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	af00      	add	r7, sp, #0
  hwInit();
 800e07c:	f7f8 fc56 	bl	800692c <hwInit>
  apInit();
 800e080:	f7f2 ffd2 	bl	8001028 <apInit>

  apMain();
 800e084:	f7f2 ffde 	bl	8001044 <apMain>

  return 0;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <__errno>:
 800e090:	4b01      	ldr	r3, [pc, #4]	; (800e098 <__errno+0x8>)
 800e092:	6818      	ldr	r0, [r3, #0]
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	200000c8 	.word	0x200000c8

0800e09c <__libc_init_array>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	4d0d      	ldr	r5, [pc, #52]	; (800e0d4 <__libc_init_array+0x38>)
 800e0a0:	4c0d      	ldr	r4, [pc, #52]	; (800e0d8 <__libc_init_array+0x3c>)
 800e0a2:	1b64      	subs	r4, r4, r5
 800e0a4:	10a4      	asrs	r4, r4, #2
 800e0a6:	2600      	movs	r6, #0
 800e0a8:	42a6      	cmp	r6, r4
 800e0aa:	d109      	bne.n	800e0c0 <__libc_init_array+0x24>
 800e0ac:	4d0b      	ldr	r5, [pc, #44]	; (800e0dc <__libc_init_array+0x40>)
 800e0ae:	4c0c      	ldr	r4, [pc, #48]	; (800e0e0 <__libc_init_array+0x44>)
 800e0b0:	f004 faea 	bl	8012688 <_init>
 800e0b4:	1b64      	subs	r4, r4, r5
 800e0b6:	10a4      	asrs	r4, r4, #2
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	42a6      	cmp	r6, r4
 800e0bc:	d105      	bne.n	800e0ca <__libc_init_array+0x2e>
 800e0be:	bd70      	pop	{r4, r5, r6, pc}
 800e0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0c4:	4798      	blx	r3
 800e0c6:	3601      	adds	r6, #1
 800e0c8:	e7ee      	b.n	800e0a8 <__libc_init_array+0xc>
 800e0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ce:	4798      	blx	r3
 800e0d0:	3601      	adds	r6, #1
 800e0d2:	e7f2      	b.n	800e0ba <__libc_init_array+0x1e>
 800e0d4:	080204dc 	.word	0x080204dc
 800e0d8:	080204dc 	.word	0x080204dc
 800e0dc:	080204dc 	.word	0x080204dc
 800e0e0:	080204e0 	.word	0x080204e0

0800e0e4 <malloc>:
 800e0e4:	4b02      	ldr	r3, [pc, #8]	; (800e0f0 <malloc+0xc>)
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	6818      	ldr	r0, [r3, #0]
 800e0ea:	f000 b877 	b.w	800e1dc <_malloc_r>
 800e0ee:	bf00      	nop
 800e0f0:	200000c8 	.word	0x200000c8

0800e0f4 <memset>:
 800e0f4:	4402      	add	r2, r0
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d100      	bne.n	800e0fe <memset+0xa>
 800e0fc:	4770      	bx	lr
 800e0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800e102:	e7f9      	b.n	800e0f8 <memset+0x4>

0800e104 <_free_r>:
 800e104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e106:	2900      	cmp	r1, #0
 800e108:	d044      	beq.n	800e194 <_free_r+0x90>
 800e10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e10e:	9001      	str	r0, [sp, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	f1a1 0404 	sub.w	r4, r1, #4
 800e116:	bfb8      	it	lt
 800e118:	18e4      	addlt	r4, r4, r3
 800e11a:	f003 f975 	bl	8011408 <__malloc_lock>
 800e11e:	4a1e      	ldr	r2, [pc, #120]	; (800e198 <_free_r+0x94>)
 800e120:	9801      	ldr	r0, [sp, #4]
 800e122:	6813      	ldr	r3, [r2, #0]
 800e124:	b933      	cbnz	r3, 800e134 <_free_r+0x30>
 800e126:	6063      	str	r3, [r4, #4]
 800e128:	6014      	str	r4, [r2, #0]
 800e12a:	b003      	add	sp, #12
 800e12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e130:	f003 b970 	b.w	8011414 <__malloc_unlock>
 800e134:	42a3      	cmp	r3, r4
 800e136:	d908      	bls.n	800e14a <_free_r+0x46>
 800e138:	6825      	ldr	r5, [r4, #0]
 800e13a:	1961      	adds	r1, r4, r5
 800e13c:	428b      	cmp	r3, r1
 800e13e:	bf01      	itttt	eq
 800e140:	6819      	ldreq	r1, [r3, #0]
 800e142:	685b      	ldreq	r3, [r3, #4]
 800e144:	1949      	addeq	r1, r1, r5
 800e146:	6021      	streq	r1, [r4, #0]
 800e148:	e7ed      	b.n	800e126 <_free_r+0x22>
 800e14a:	461a      	mov	r2, r3
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	b10b      	cbz	r3, 800e154 <_free_r+0x50>
 800e150:	42a3      	cmp	r3, r4
 800e152:	d9fa      	bls.n	800e14a <_free_r+0x46>
 800e154:	6811      	ldr	r1, [r2, #0]
 800e156:	1855      	adds	r5, r2, r1
 800e158:	42a5      	cmp	r5, r4
 800e15a:	d10b      	bne.n	800e174 <_free_r+0x70>
 800e15c:	6824      	ldr	r4, [r4, #0]
 800e15e:	4421      	add	r1, r4
 800e160:	1854      	adds	r4, r2, r1
 800e162:	42a3      	cmp	r3, r4
 800e164:	6011      	str	r1, [r2, #0]
 800e166:	d1e0      	bne.n	800e12a <_free_r+0x26>
 800e168:	681c      	ldr	r4, [r3, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	6053      	str	r3, [r2, #4]
 800e16e:	4421      	add	r1, r4
 800e170:	6011      	str	r1, [r2, #0]
 800e172:	e7da      	b.n	800e12a <_free_r+0x26>
 800e174:	d902      	bls.n	800e17c <_free_r+0x78>
 800e176:	230c      	movs	r3, #12
 800e178:	6003      	str	r3, [r0, #0]
 800e17a:	e7d6      	b.n	800e12a <_free_r+0x26>
 800e17c:	6825      	ldr	r5, [r4, #0]
 800e17e:	1961      	adds	r1, r4, r5
 800e180:	428b      	cmp	r3, r1
 800e182:	bf04      	itt	eq
 800e184:	6819      	ldreq	r1, [r3, #0]
 800e186:	685b      	ldreq	r3, [r3, #4]
 800e188:	6063      	str	r3, [r4, #4]
 800e18a:	bf04      	itt	eq
 800e18c:	1949      	addeq	r1, r1, r5
 800e18e:	6021      	streq	r1, [r4, #0]
 800e190:	6054      	str	r4, [r2, #4]
 800e192:	e7ca      	b.n	800e12a <_free_r+0x26>
 800e194:	b003      	add	sp, #12
 800e196:	bd30      	pop	{r4, r5, pc}
 800e198:	2000ceb8 	.word	0x2000ceb8

0800e19c <sbrk_aligned>:
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	4e0e      	ldr	r6, [pc, #56]	; (800e1d8 <sbrk_aligned+0x3c>)
 800e1a0:	460c      	mov	r4, r1
 800e1a2:	6831      	ldr	r1, [r6, #0]
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	b911      	cbnz	r1, 800e1ae <sbrk_aligned+0x12>
 800e1a8:	f000 fcf6 	bl	800eb98 <_sbrk_r>
 800e1ac:	6030      	str	r0, [r6, #0]
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	f000 fcf1 	bl	800eb98 <_sbrk_r>
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	d00a      	beq.n	800e1d0 <sbrk_aligned+0x34>
 800e1ba:	1cc4      	adds	r4, r0, #3
 800e1bc:	f024 0403 	bic.w	r4, r4, #3
 800e1c0:	42a0      	cmp	r0, r4
 800e1c2:	d007      	beq.n	800e1d4 <sbrk_aligned+0x38>
 800e1c4:	1a21      	subs	r1, r4, r0
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 fce6 	bl	800eb98 <_sbrk_r>
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	d101      	bne.n	800e1d4 <sbrk_aligned+0x38>
 800e1d0:	f04f 34ff 	mov.w	r4, #4294967295
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	bd70      	pop	{r4, r5, r6, pc}
 800e1d8:	2000cebc 	.word	0x2000cebc

0800e1dc <_malloc_r>:
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	1ccd      	adds	r5, r1, #3
 800e1e2:	f025 0503 	bic.w	r5, r5, #3
 800e1e6:	3508      	adds	r5, #8
 800e1e8:	2d0c      	cmp	r5, #12
 800e1ea:	bf38      	it	cc
 800e1ec:	250c      	movcc	r5, #12
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	db01      	blt.n	800e1f8 <_malloc_r+0x1c>
 800e1f4:	42a9      	cmp	r1, r5
 800e1f6:	d905      	bls.n	800e204 <_malloc_r+0x28>
 800e1f8:	230c      	movs	r3, #12
 800e1fa:	603b      	str	r3, [r7, #0]
 800e1fc:	2600      	movs	r6, #0
 800e1fe:	4630      	mov	r0, r6
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	4e2e      	ldr	r6, [pc, #184]	; (800e2c0 <_malloc_r+0xe4>)
 800e206:	f003 f8ff 	bl	8011408 <__malloc_lock>
 800e20a:	6833      	ldr	r3, [r6, #0]
 800e20c:	461c      	mov	r4, r3
 800e20e:	bb34      	cbnz	r4, 800e25e <_malloc_r+0x82>
 800e210:	4629      	mov	r1, r5
 800e212:	4638      	mov	r0, r7
 800e214:	f7ff ffc2 	bl	800e19c <sbrk_aligned>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	4604      	mov	r4, r0
 800e21c:	d14d      	bne.n	800e2ba <_malloc_r+0xde>
 800e21e:	6834      	ldr	r4, [r6, #0]
 800e220:	4626      	mov	r6, r4
 800e222:	2e00      	cmp	r6, #0
 800e224:	d140      	bne.n	800e2a8 <_malloc_r+0xcc>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	4631      	mov	r1, r6
 800e22a:	4638      	mov	r0, r7
 800e22c:	eb04 0803 	add.w	r8, r4, r3
 800e230:	f000 fcb2 	bl	800eb98 <_sbrk_r>
 800e234:	4580      	cmp	r8, r0
 800e236:	d13a      	bne.n	800e2ae <_malloc_r+0xd2>
 800e238:	6821      	ldr	r1, [r4, #0]
 800e23a:	3503      	adds	r5, #3
 800e23c:	1a6d      	subs	r5, r5, r1
 800e23e:	f025 0503 	bic.w	r5, r5, #3
 800e242:	3508      	adds	r5, #8
 800e244:	2d0c      	cmp	r5, #12
 800e246:	bf38      	it	cc
 800e248:	250c      	movcc	r5, #12
 800e24a:	4629      	mov	r1, r5
 800e24c:	4638      	mov	r0, r7
 800e24e:	f7ff ffa5 	bl	800e19c <sbrk_aligned>
 800e252:	3001      	adds	r0, #1
 800e254:	d02b      	beq.n	800e2ae <_malloc_r+0xd2>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	442b      	add	r3, r5
 800e25a:	6023      	str	r3, [r4, #0]
 800e25c:	e00e      	b.n	800e27c <_malloc_r+0xa0>
 800e25e:	6822      	ldr	r2, [r4, #0]
 800e260:	1b52      	subs	r2, r2, r5
 800e262:	d41e      	bmi.n	800e2a2 <_malloc_r+0xc6>
 800e264:	2a0b      	cmp	r2, #11
 800e266:	d916      	bls.n	800e296 <_malloc_r+0xba>
 800e268:	1961      	adds	r1, r4, r5
 800e26a:	42a3      	cmp	r3, r4
 800e26c:	6025      	str	r5, [r4, #0]
 800e26e:	bf18      	it	ne
 800e270:	6059      	strne	r1, [r3, #4]
 800e272:	6863      	ldr	r3, [r4, #4]
 800e274:	bf08      	it	eq
 800e276:	6031      	streq	r1, [r6, #0]
 800e278:	5162      	str	r2, [r4, r5]
 800e27a:	604b      	str	r3, [r1, #4]
 800e27c:	4638      	mov	r0, r7
 800e27e:	f104 060b 	add.w	r6, r4, #11
 800e282:	f003 f8c7 	bl	8011414 <__malloc_unlock>
 800e286:	f026 0607 	bic.w	r6, r6, #7
 800e28a:	1d23      	adds	r3, r4, #4
 800e28c:	1af2      	subs	r2, r6, r3
 800e28e:	d0b6      	beq.n	800e1fe <_malloc_r+0x22>
 800e290:	1b9b      	subs	r3, r3, r6
 800e292:	50a3      	str	r3, [r4, r2]
 800e294:	e7b3      	b.n	800e1fe <_malloc_r+0x22>
 800e296:	6862      	ldr	r2, [r4, #4]
 800e298:	42a3      	cmp	r3, r4
 800e29a:	bf0c      	ite	eq
 800e29c:	6032      	streq	r2, [r6, #0]
 800e29e:	605a      	strne	r2, [r3, #4]
 800e2a0:	e7ec      	b.n	800e27c <_malloc_r+0xa0>
 800e2a2:	4623      	mov	r3, r4
 800e2a4:	6864      	ldr	r4, [r4, #4]
 800e2a6:	e7b2      	b.n	800e20e <_malloc_r+0x32>
 800e2a8:	4634      	mov	r4, r6
 800e2aa:	6876      	ldr	r6, [r6, #4]
 800e2ac:	e7b9      	b.n	800e222 <_malloc_r+0x46>
 800e2ae:	230c      	movs	r3, #12
 800e2b0:	603b      	str	r3, [r7, #0]
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	f003 f8ae 	bl	8011414 <__malloc_unlock>
 800e2b8:	e7a1      	b.n	800e1fe <_malloc_r+0x22>
 800e2ba:	6025      	str	r5, [r4, #0]
 800e2bc:	e7de      	b.n	800e27c <_malloc_r+0xa0>
 800e2be:	bf00      	nop
 800e2c0:	2000ceb8 	.word	0x2000ceb8

0800e2c4 <__cvt>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	ec55 4b10 	vmov	r4, r5, d0
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	460e      	mov	r6, r1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	bfbb      	ittet	lt
 800e2d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e2da:	461d      	movlt	r5, r3
 800e2dc:	2300      	movge	r3, #0
 800e2de:	232d      	movlt	r3, #45	; 0x2d
 800e2e0:	700b      	strb	r3, [r1, #0]
 800e2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e2e8:	4691      	mov	r9, r2
 800e2ea:	f023 0820 	bic.w	r8, r3, #32
 800e2ee:	bfbc      	itt	lt
 800e2f0:	4622      	movlt	r2, r4
 800e2f2:	4614      	movlt	r4, r2
 800e2f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e2f8:	d005      	beq.n	800e306 <__cvt+0x42>
 800e2fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e2fe:	d100      	bne.n	800e302 <__cvt+0x3e>
 800e300:	3601      	adds	r6, #1
 800e302:	2102      	movs	r1, #2
 800e304:	e000      	b.n	800e308 <__cvt+0x44>
 800e306:	2103      	movs	r1, #3
 800e308:	ab03      	add	r3, sp, #12
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	ab02      	add	r3, sp, #8
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	ec45 4b10 	vmov	d0, r4, r5
 800e314:	4653      	mov	r3, sl
 800e316:	4632      	mov	r2, r6
 800e318:	f001 fcd6 	bl	800fcc8 <_dtoa_r>
 800e31c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e320:	4607      	mov	r7, r0
 800e322:	d102      	bne.n	800e32a <__cvt+0x66>
 800e324:	f019 0f01 	tst.w	r9, #1
 800e328:	d022      	beq.n	800e370 <__cvt+0xac>
 800e32a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e32e:	eb07 0906 	add.w	r9, r7, r6
 800e332:	d110      	bne.n	800e356 <__cvt+0x92>
 800e334:	783b      	ldrb	r3, [r7, #0]
 800e336:	2b30      	cmp	r3, #48	; 0x30
 800e338:	d10a      	bne.n	800e350 <__cvt+0x8c>
 800e33a:	2200      	movs	r2, #0
 800e33c:	2300      	movs	r3, #0
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f2 fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 800e346:	b918      	cbnz	r0, 800e350 <__cvt+0x8c>
 800e348:	f1c6 0601 	rsb	r6, r6, #1
 800e34c:	f8ca 6000 	str.w	r6, [sl]
 800e350:	f8da 3000 	ldr.w	r3, [sl]
 800e354:	4499      	add	r9, r3
 800e356:	2200      	movs	r2, #0
 800e358:	2300      	movs	r3, #0
 800e35a:	4620      	mov	r0, r4
 800e35c:	4629      	mov	r1, r5
 800e35e:	f7f2 fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 800e362:	b108      	cbz	r0, 800e368 <__cvt+0xa4>
 800e364:	f8cd 900c 	str.w	r9, [sp, #12]
 800e368:	2230      	movs	r2, #48	; 0x30
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	454b      	cmp	r3, r9
 800e36e:	d307      	bcc.n	800e380 <__cvt+0xbc>
 800e370:	9b03      	ldr	r3, [sp, #12]
 800e372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e374:	1bdb      	subs	r3, r3, r7
 800e376:	4638      	mov	r0, r7
 800e378:	6013      	str	r3, [r2, #0]
 800e37a:	b004      	add	sp, #16
 800e37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e380:	1c59      	adds	r1, r3, #1
 800e382:	9103      	str	r1, [sp, #12]
 800e384:	701a      	strb	r2, [r3, #0]
 800e386:	e7f0      	b.n	800e36a <__cvt+0xa6>

0800e388 <__exponent>:
 800e388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e38a:	4603      	mov	r3, r0
 800e38c:	2900      	cmp	r1, #0
 800e38e:	bfb8      	it	lt
 800e390:	4249      	neglt	r1, r1
 800e392:	f803 2b02 	strb.w	r2, [r3], #2
 800e396:	bfb4      	ite	lt
 800e398:	222d      	movlt	r2, #45	; 0x2d
 800e39a:	222b      	movge	r2, #43	; 0x2b
 800e39c:	2909      	cmp	r1, #9
 800e39e:	7042      	strb	r2, [r0, #1]
 800e3a0:	dd2a      	ble.n	800e3f8 <__exponent+0x70>
 800e3a2:	f10d 0407 	add.w	r4, sp, #7
 800e3a6:	46a4      	mov	ip, r4
 800e3a8:	270a      	movs	r7, #10
 800e3aa:	46a6      	mov	lr, r4
 800e3ac:	460a      	mov	r2, r1
 800e3ae:	fb91 f6f7 	sdiv	r6, r1, r7
 800e3b2:	fb07 1516 	mls	r5, r7, r6, r1
 800e3b6:	3530      	adds	r5, #48	; 0x30
 800e3b8:	2a63      	cmp	r2, #99	; 0x63
 800e3ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800e3be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	dcf1      	bgt.n	800e3aa <__exponent+0x22>
 800e3c6:	3130      	adds	r1, #48	; 0x30
 800e3c8:	f1ae 0502 	sub.w	r5, lr, #2
 800e3cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e3d0:	1c44      	adds	r4, r0, #1
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4561      	cmp	r1, ip
 800e3d6:	d30a      	bcc.n	800e3ee <__exponent+0x66>
 800e3d8:	f10d 0209 	add.w	r2, sp, #9
 800e3dc:	eba2 020e 	sub.w	r2, r2, lr
 800e3e0:	4565      	cmp	r5, ip
 800e3e2:	bf88      	it	hi
 800e3e4:	2200      	movhi	r2, #0
 800e3e6:	4413      	add	r3, r2
 800e3e8:	1a18      	subs	r0, r3, r0
 800e3ea:	b003      	add	sp, #12
 800e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e3f6:	e7ed      	b.n	800e3d4 <__exponent+0x4c>
 800e3f8:	2330      	movs	r3, #48	; 0x30
 800e3fa:	3130      	adds	r1, #48	; 0x30
 800e3fc:	7083      	strb	r3, [r0, #2]
 800e3fe:	70c1      	strb	r1, [r0, #3]
 800e400:	1d03      	adds	r3, r0, #4
 800e402:	e7f1      	b.n	800e3e8 <__exponent+0x60>

0800e404 <_printf_float>:
 800e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	ed2d 8b02 	vpush	{d8}
 800e40c:	b08d      	sub	sp, #52	; 0x34
 800e40e:	460c      	mov	r4, r1
 800e410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e414:	4616      	mov	r6, r2
 800e416:	461f      	mov	r7, r3
 800e418:	4605      	mov	r5, r0
 800e41a:	f002 ff69 	bl	80112f0 <_localeconv_r>
 800e41e:	f8d0 a000 	ldr.w	sl, [r0]
 800e422:	4650      	mov	r0, sl
 800e424:	f7f1 fee6 	bl	80001f4 <strlen>
 800e428:	2300      	movs	r3, #0
 800e42a:	930a      	str	r3, [sp, #40]	; 0x28
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	9305      	str	r3, [sp, #20]
 800e430:	f8d8 3000 	ldr.w	r3, [r8]
 800e434:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	f103 0208 	add.w	r2, r3, #8
 800e442:	f8c8 2000 	str.w	r2, [r8]
 800e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e44e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	f8cd 8018 	str.w	r8, [sp, #24]
 800e45c:	ee08 0a10 	vmov	s16, r0
 800e460:	4b9f      	ldr	r3, [pc, #636]	; (800e6e0 <_printf_float+0x2dc>)
 800e462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e466:	f04f 32ff 	mov.w	r2, #4294967295
 800e46a:	f7f2 fb77 	bl	8000b5c <__aeabi_dcmpun>
 800e46e:	bb88      	cbnz	r0, 800e4d4 <_printf_float+0xd0>
 800e470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e474:	4b9a      	ldr	r3, [pc, #616]	; (800e6e0 <_printf_float+0x2dc>)
 800e476:	f04f 32ff 	mov.w	r2, #4294967295
 800e47a:	f7f2 fb51 	bl	8000b20 <__aeabi_dcmple>
 800e47e:	bb48      	cbnz	r0, 800e4d4 <_printf_float+0xd0>
 800e480:	2200      	movs	r2, #0
 800e482:	2300      	movs	r3, #0
 800e484:	4640      	mov	r0, r8
 800e486:	4649      	mov	r1, r9
 800e488:	f7f2 fb40 	bl	8000b0c <__aeabi_dcmplt>
 800e48c:	b110      	cbz	r0, 800e494 <_printf_float+0x90>
 800e48e:	232d      	movs	r3, #45	; 0x2d
 800e490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e494:	4b93      	ldr	r3, [pc, #588]	; (800e6e4 <_printf_float+0x2e0>)
 800e496:	4894      	ldr	r0, [pc, #592]	; (800e6e8 <_printf_float+0x2e4>)
 800e498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e49c:	bf94      	ite	ls
 800e49e:	4698      	movls	r8, r3
 800e4a0:	4680      	movhi	r8, r0
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	6123      	str	r3, [r4, #16]
 800e4a6:	9b05      	ldr	r3, [sp, #20]
 800e4a8:	f023 0204 	bic.w	r2, r3, #4
 800e4ac:	6022      	str	r2, [r4, #0]
 800e4ae:	f04f 0900 	mov.w	r9, #0
 800e4b2:	9700      	str	r7, [sp, #0]
 800e4b4:	4633      	mov	r3, r6
 800e4b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f000 f9d8 	bl	800e870 <_printf_common>
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	f040 8090 	bne.w	800e5e6 <_printf_float+0x1e2>
 800e4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ca:	b00d      	add	sp, #52	; 0x34
 800e4cc:	ecbd 8b02 	vpop	{d8}
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	4642      	mov	r2, r8
 800e4d6:	464b      	mov	r3, r9
 800e4d8:	4640      	mov	r0, r8
 800e4da:	4649      	mov	r1, r9
 800e4dc:	f7f2 fb3e 	bl	8000b5c <__aeabi_dcmpun>
 800e4e0:	b140      	cbz	r0, 800e4f4 <_printf_float+0xf0>
 800e4e2:	464b      	mov	r3, r9
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	bfbc      	itt	lt
 800e4e8:	232d      	movlt	r3, #45	; 0x2d
 800e4ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e4ee:	487f      	ldr	r0, [pc, #508]	; (800e6ec <_printf_float+0x2e8>)
 800e4f0:	4b7f      	ldr	r3, [pc, #508]	; (800e6f0 <_printf_float+0x2ec>)
 800e4f2:	e7d1      	b.n	800e498 <_printf_float+0x94>
 800e4f4:	6863      	ldr	r3, [r4, #4]
 800e4f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e4fa:	9206      	str	r2, [sp, #24]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	d13f      	bne.n	800e580 <_printf_float+0x17c>
 800e500:	2306      	movs	r3, #6
 800e502:	6063      	str	r3, [r4, #4]
 800e504:	9b05      	ldr	r3, [sp, #20]
 800e506:	6861      	ldr	r1, [r4, #4]
 800e508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e50c:	2300      	movs	r3, #0
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	ab0a      	add	r3, sp, #40	; 0x28
 800e512:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e516:	ab09      	add	r3, sp, #36	; 0x24
 800e518:	ec49 8b10 	vmov	d0, r8, r9
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	6022      	str	r2, [r4, #0]
 800e520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e524:	4628      	mov	r0, r5
 800e526:	f7ff fecd 	bl	800e2c4 <__cvt>
 800e52a:	9b06      	ldr	r3, [sp, #24]
 800e52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e52e:	2b47      	cmp	r3, #71	; 0x47
 800e530:	4680      	mov	r8, r0
 800e532:	d108      	bne.n	800e546 <_printf_float+0x142>
 800e534:	1cc8      	adds	r0, r1, #3
 800e536:	db02      	blt.n	800e53e <_printf_float+0x13a>
 800e538:	6863      	ldr	r3, [r4, #4]
 800e53a:	4299      	cmp	r1, r3
 800e53c:	dd41      	ble.n	800e5c2 <_printf_float+0x1be>
 800e53e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e542:	fa5f fb8b 	uxtb.w	fp, fp
 800e546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e54a:	d820      	bhi.n	800e58e <_printf_float+0x18a>
 800e54c:	3901      	subs	r1, #1
 800e54e:	465a      	mov	r2, fp
 800e550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e554:	9109      	str	r1, [sp, #36]	; 0x24
 800e556:	f7ff ff17 	bl	800e388 <__exponent>
 800e55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e55c:	1813      	adds	r3, r2, r0
 800e55e:	2a01      	cmp	r2, #1
 800e560:	4681      	mov	r9, r0
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	dc02      	bgt.n	800e56c <_printf_float+0x168>
 800e566:	6822      	ldr	r2, [r4, #0]
 800e568:	07d2      	lsls	r2, r2, #31
 800e56a:	d501      	bpl.n	800e570 <_printf_float+0x16c>
 800e56c:	3301      	adds	r3, #1
 800e56e:	6123      	str	r3, [r4, #16]
 800e570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e574:	2b00      	cmp	r3, #0
 800e576:	d09c      	beq.n	800e4b2 <_printf_float+0xae>
 800e578:	232d      	movs	r3, #45	; 0x2d
 800e57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57e:	e798      	b.n	800e4b2 <_printf_float+0xae>
 800e580:	9a06      	ldr	r2, [sp, #24]
 800e582:	2a47      	cmp	r2, #71	; 0x47
 800e584:	d1be      	bne.n	800e504 <_printf_float+0x100>
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1bc      	bne.n	800e504 <_printf_float+0x100>
 800e58a:	2301      	movs	r3, #1
 800e58c:	e7b9      	b.n	800e502 <_printf_float+0xfe>
 800e58e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e592:	d118      	bne.n	800e5c6 <_printf_float+0x1c2>
 800e594:	2900      	cmp	r1, #0
 800e596:	6863      	ldr	r3, [r4, #4]
 800e598:	dd0b      	ble.n	800e5b2 <_printf_float+0x1ae>
 800e59a:	6121      	str	r1, [r4, #16]
 800e59c:	b913      	cbnz	r3, 800e5a4 <_printf_float+0x1a0>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	07d0      	lsls	r0, r2, #31
 800e5a2:	d502      	bpl.n	800e5aa <_printf_float+0x1a6>
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	440b      	add	r3, r1
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800e5ac:	f04f 0900 	mov.w	r9, #0
 800e5b0:	e7de      	b.n	800e570 <_printf_float+0x16c>
 800e5b2:	b913      	cbnz	r3, 800e5ba <_printf_float+0x1b6>
 800e5b4:	6822      	ldr	r2, [r4, #0]
 800e5b6:	07d2      	lsls	r2, r2, #31
 800e5b8:	d501      	bpl.n	800e5be <_printf_float+0x1ba>
 800e5ba:	3302      	adds	r3, #2
 800e5bc:	e7f4      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e7f2      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c8:	4299      	cmp	r1, r3
 800e5ca:	db05      	blt.n	800e5d8 <_printf_float+0x1d4>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	6121      	str	r1, [r4, #16]
 800e5d0:	07d8      	lsls	r0, r3, #31
 800e5d2:	d5ea      	bpl.n	800e5aa <_printf_float+0x1a6>
 800e5d4:	1c4b      	adds	r3, r1, #1
 800e5d6:	e7e7      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	bfd4      	ite	le
 800e5dc:	f1c1 0202 	rsble	r2, r1, #2
 800e5e0:	2201      	movgt	r2, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	e7e0      	b.n	800e5a8 <_printf_float+0x1a4>
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	055a      	lsls	r2, r3, #21
 800e5ea:	d407      	bmi.n	800e5fc <_printf_float+0x1f8>
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	4642      	mov	r2, r8
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	47b8      	blx	r7
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	d12c      	bne.n	800e654 <_printf_float+0x250>
 800e5fa:	e764      	b.n	800e4c6 <_printf_float+0xc2>
 800e5fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e600:	f240 80e0 	bls.w	800e7c4 <_printf_float+0x3c0>
 800e604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e608:	2200      	movs	r2, #0
 800e60a:	2300      	movs	r3, #0
 800e60c:	f7f2 fa74 	bl	8000af8 <__aeabi_dcmpeq>
 800e610:	2800      	cmp	r0, #0
 800e612:	d034      	beq.n	800e67e <_printf_float+0x27a>
 800e614:	4a37      	ldr	r2, [pc, #220]	; (800e6f4 <_printf_float+0x2f0>)
 800e616:	2301      	movs	r3, #1
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f af51 	beq.w	800e4c6 <_printf_float+0xc2>
 800e624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e628:	429a      	cmp	r2, r3
 800e62a:	db02      	blt.n	800e632 <_printf_float+0x22e>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	07d8      	lsls	r0, r3, #31
 800e630:	d510      	bpl.n	800e654 <_printf_float+0x250>
 800e632:	ee18 3a10 	vmov	r3, s16
 800e636:	4652      	mov	r2, sl
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	47b8      	blx	r7
 800e63e:	3001      	adds	r0, #1
 800e640:	f43f af41 	beq.w	800e4c6 <_printf_float+0xc2>
 800e644:	f04f 0800 	mov.w	r8, #0
 800e648:	f104 091a 	add.w	r9, r4, #26
 800e64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e64e:	3b01      	subs	r3, #1
 800e650:	4543      	cmp	r3, r8
 800e652:	dc09      	bgt.n	800e668 <_printf_float+0x264>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	079b      	lsls	r3, r3, #30
 800e658:	f100 8105 	bmi.w	800e866 <_printf_float+0x462>
 800e65c:	68e0      	ldr	r0, [r4, #12]
 800e65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e660:	4298      	cmp	r0, r3
 800e662:	bfb8      	it	lt
 800e664:	4618      	movlt	r0, r3
 800e666:	e730      	b.n	800e4ca <_printf_float+0xc6>
 800e668:	2301      	movs	r3, #1
 800e66a:	464a      	mov	r2, r9
 800e66c:	4631      	mov	r1, r6
 800e66e:	4628      	mov	r0, r5
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f af27 	beq.w	800e4c6 <_printf_float+0xc2>
 800e678:	f108 0801 	add.w	r8, r8, #1
 800e67c:	e7e6      	b.n	800e64c <_printf_float+0x248>
 800e67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc39      	bgt.n	800e6f8 <_printf_float+0x2f4>
 800e684:	4a1b      	ldr	r2, [pc, #108]	; (800e6f4 <_printf_float+0x2f0>)
 800e686:	2301      	movs	r3, #1
 800e688:	4631      	mov	r1, r6
 800e68a:	4628      	mov	r0, r5
 800e68c:	47b8      	blx	r7
 800e68e:	3001      	adds	r0, #1
 800e690:	f43f af19 	beq.w	800e4c6 <_printf_float+0xc2>
 800e694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e698:	4313      	orrs	r3, r2
 800e69a:	d102      	bne.n	800e6a2 <_printf_float+0x29e>
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	07d9      	lsls	r1, r3, #31
 800e6a0:	d5d8      	bpl.n	800e654 <_printf_float+0x250>
 800e6a2:	ee18 3a10 	vmov	r3, s16
 800e6a6:	4652      	mov	r2, sl
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af09 	beq.w	800e4c6 <_printf_float+0xc2>
 800e6b4:	f04f 0900 	mov.w	r9, #0
 800e6b8:	f104 0a1a 	add.w	sl, r4, #26
 800e6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6be:	425b      	negs	r3, r3
 800e6c0:	454b      	cmp	r3, r9
 800e6c2:	dc01      	bgt.n	800e6c8 <_printf_float+0x2c4>
 800e6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c6:	e792      	b.n	800e5ee <_printf_float+0x1ea>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	4652      	mov	r2, sl
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	47b8      	blx	r7
 800e6d2:	3001      	adds	r0, #1
 800e6d4:	f43f aef7 	beq.w	800e4c6 <_printf_float+0xc2>
 800e6d8:	f109 0901 	add.w	r9, r9, #1
 800e6dc:	e7ee      	b.n	800e6bc <_printf_float+0x2b8>
 800e6de:	bf00      	nop
 800e6e0:	7fefffff 	.word	0x7fefffff
 800e6e4:	08020030 	.word	0x08020030
 800e6e8:	08020034 	.word	0x08020034
 800e6ec:	0802003c 	.word	0x0802003c
 800e6f0:	08020038 	.word	0x08020038
 800e6f4:	08020040 	.word	0x08020040
 800e6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	bfa8      	it	ge
 800e700:	461a      	movge	r2, r3
 800e702:	2a00      	cmp	r2, #0
 800e704:	4691      	mov	r9, r2
 800e706:	dc37      	bgt.n	800e778 <_printf_float+0x374>
 800e708:	f04f 0b00 	mov.w	fp, #0
 800e70c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e710:	f104 021a 	add.w	r2, r4, #26
 800e714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e716:	9305      	str	r3, [sp, #20]
 800e718:	eba3 0309 	sub.w	r3, r3, r9
 800e71c:	455b      	cmp	r3, fp
 800e71e:	dc33      	bgt.n	800e788 <_printf_float+0x384>
 800e720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e724:	429a      	cmp	r2, r3
 800e726:	db3b      	blt.n	800e7a0 <_printf_float+0x39c>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	07da      	lsls	r2, r3, #31
 800e72c:	d438      	bmi.n	800e7a0 <_printf_float+0x39c>
 800e72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e730:	9a05      	ldr	r2, [sp, #20]
 800e732:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e734:	1a9a      	subs	r2, r3, r2
 800e736:	eba3 0901 	sub.w	r9, r3, r1
 800e73a:	4591      	cmp	r9, r2
 800e73c:	bfa8      	it	ge
 800e73e:	4691      	movge	r9, r2
 800e740:	f1b9 0f00 	cmp.w	r9, #0
 800e744:	dc35      	bgt.n	800e7b2 <_printf_float+0x3ae>
 800e746:	f04f 0800 	mov.w	r8, #0
 800e74a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e74e:	f104 0a1a 	add.w	sl, r4, #26
 800e752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e756:	1a9b      	subs	r3, r3, r2
 800e758:	eba3 0309 	sub.w	r3, r3, r9
 800e75c:	4543      	cmp	r3, r8
 800e75e:	f77f af79 	ble.w	800e654 <_printf_float+0x250>
 800e762:	2301      	movs	r3, #1
 800e764:	4652      	mov	r2, sl
 800e766:	4631      	mov	r1, r6
 800e768:	4628      	mov	r0, r5
 800e76a:	47b8      	blx	r7
 800e76c:	3001      	adds	r0, #1
 800e76e:	f43f aeaa 	beq.w	800e4c6 <_printf_float+0xc2>
 800e772:	f108 0801 	add.w	r8, r8, #1
 800e776:	e7ec      	b.n	800e752 <_printf_float+0x34e>
 800e778:	4613      	mov	r3, r2
 800e77a:	4631      	mov	r1, r6
 800e77c:	4642      	mov	r2, r8
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	d1c0      	bne.n	800e708 <_printf_float+0x304>
 800e786:	e69e      	b.n	800e4c6 <_printf_float+0xc2>
 800e788:	2301      	movs	r3, #1
 800e78a:	4631      	mov	r1, r6
 800e78c:	4628      	mov	r0, r5
 800e78e:	9205      	str	r2, [sp, #20]
 800e790:	47b8      	blx	r7
 800e792:	3001      	adds	r0, #1
 800e794:	f43f ae97 	beq.w	800e4c6 <_printf_float+0xc2>
 800e798:	9a05      	ldr	r2, [sp, #20]
 800e79a:	f10b 0b01 	add.w	fp, fp, #1
 800e79e:	e7b9      	b.n	800e714 <_printf_float+0x310>
 800e7a0:	ee18 3a10 	vmov	r3, s16
 800e7a4:	4652      	mov	r2, sl
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	47b8      	blx	r7
 800e7ac:	3001      	adds	r0, #1
 800e7ae:	d1be      	bne.n	800e72e <_printf_float+0x32a>
 800e7b0:	e689      	b.n	800e4c6 <_printf_float+0xc2>
 800e7b2:	9a05      	ldr	r2, [sp, #20]
 800e7b4:	464b      	mov	r3, r9
 800e7b6:	4442      	add	r2, r8
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	47b8      	blx	r7
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d1c1      	bne.n	800e746 <_printf_float+0x342>
 800e7c2:	e680      	b.n	800e4c6 <_printf_float+0xc2>
 800e7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7c6:	2a01      	cmp	r2, #1
 800e7c8:	dc01      	bgt.n	800e7ce <_printf_float+0x3ca>
 800e7ca:	07db      	lsls	r3, r3, #31
 800e7cc:	d538      	bpl.n	800e840 <_printf_float+0x43c>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4642      	mov	r2, r8
 800e7d2:	4631      	mov	r1, r6
 800e7d4:	4628      	mov	r0, r5
 800e7d6:	47b8      	blx	r7
 800e7d8:	3001      	adds	r0, #1
 800e7da:	f43f ae74 	beq.w	800e4c6 <_printf_float+0xc2>
 800e7de:	ee18 3a10 	vmov	r3, s16
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4628      	mov	r0, r5
 800e7e8:	47b8      	blx	r7
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f43f ae6b 	beq.w	800e4c6 <_printf_float+0xc2>
 800e7f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	f7f2 f97e 	bl	8000af8 <__aeabi_dcmpeq>
 800e7fc:	b9d8      	cbnz	r0, 800e836 <_printf_float+0x432>
 800e7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e800:	f108 0201 	add.w	r2, r8, #1
 800e804:	3b01      	subs	r3, #1
 800e806:	4631      	mov	r1, r6
 800e808:	4628      	mov	r0, r5
 800e80a:	47b8      	blx	r7
 800e80c:	3001      	adds	r0, #1
 800e80e:	d10e      	bne.n	800e82e <_printf_float+0x42a>
 800e810:	e659      	b.n	800e4c6 <_printf_float+0xc2>
 800e812:	2301      	movs	r3, #1
 800e814:	4652      	mov	r2, sl
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	f43f ae52 	beq.w	800e4c6 <_printf_float+0xc2>
 800e822:	f108 0801 	add.w	r8, r8, #1
 800e826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e828:	3b01      	subs	r3, #1
 800e82a:	4543      	cmp	r3, r8
 800e82c:	dcf1      	bgt.n	800e812 <_printf_float+0x40e>
 800e82e:	464b      	mov	r3, r9
 800e830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e834:	e6dc      	b.n	800e5f0 <_printf_float+0x1ec>
 800e836:	f04f 0800 	mov.w	r8, #0
 800e83a:	f104 0a1a 	add.w	sl, r4, #26
 800e83e:	e7f2      	b.n	800e826 <_printf_float+0x422>
 800e840:	2301      	movs	r3, #1
 800e842:	4642      	mov	r2, r8
 800e844:	e7df      	b.n	800e806 <_printf_float+0x402>
 800e846:	2301      	movs	r3, #1
 800e848:	464a      	mov	r2, r9
 800e84a:	4631      	mov	r1, r6
 800e84c:	4628      	mov	r0, r5
 800e84e:	47b8      	blx	r7
 800e850:	3001      	adds	r0, #1
 800e852:	f43f ae38 	beq.w	800e4c6 <_printf_float+0xc2>
 800e856:	f108 0801 	add.w	r8, r8, #1
 800e85a:	68e3      	ldr	r3, [r4, #12]
 800e85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85e:	1a5b      	subs	r3, r3, r1
 800e860:	4543      	cmp	r3, r8
 800e862:	dcf0      	bgt.n	800e846 <_printf_float+0x442>
 800e864:	e6fa      	b.n	800e65c <_printf_float+0x258>
 800e866:	f04f 0800 	mov.w	r8, #0
 800e86a:	f104 0919 	add.w	r9, r4, #25
 800e86e:	e7f4      	b.n	800e85a <_printf_float+0x456>

0800e870 <_printf_common>:
 800e870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e874:	4616      	mov	r6, r2
 800e876:	4699      	mov	r9, r3
 800e878:	688a      	ldr	r2, [r1, #8]
 800e87a:	690b      	ldr	r3, [r1, #16]
 800e87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e880:	4293      	cmp	r3, r2
 800e882:	bfb8      	it	lt
 800e884:	4613      	movlt	r3, r2
 800e886:	6033      	str	r3, [r6, #0]
 800e888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e88c:	4607      	mov	r7, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	b10a      	cbz	r2, 800e896 <_printf_common+0x26>
 800e892:	3301      	adds	r3, #1
 800e894:	6033      	str	r3, [r6, #0]
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	0699      	lsls	r1, r3, #26
 800e89a:	bf42      	ittt	mi
 800e89c:	6833      	ldrmi	r3, [r6, #0]
 800e89e:	3302      	addmi	r3, #2
 800e8a0:	6033      	strmi	r3, [r6, #0]
 800e8a2:	6825      	ldr	r5, [r4, #0]
 800e8a4:	f015 0506 	ands.w	r5, r5, #6
 800e8a8:	d106      	bne.n	800e8b8 <_printf_common+0x48>
 800e8aa:	f104 0a19 	add.w	sl, r4, #25
 800e8ae:	68e3      	ldr	r3, [r4, #12]
 800e8b0:	6832      	ldr	r2, [r6, #0]
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	42ab      	cmp	r3, r5
 800e8b6:	dc26      	bgt.n	800e906 <_printf_common+0x96>
 800e8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8bc:	1e13      	subs	r3, r2, #0
 800e8be:	6822      	ldr	r2, [r4, #0]
 800e8c0:	bf18      	it	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	0692      	lsls	r2, r2, #26
 800e8c6:	d42b      	bmi.n	800e920 <_printf_common+0xb0>
 800e8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8cc:	4649      	mov	r1, r9
 800e8ce:	4638      	mov	r0, r7
 800e8d0:	47c0      	blx	r8
 800e8d2:	3001      	adds	r0, #1
 800e8d4:	d01e      	beq.n	800e914 <_printf_common+0xa4>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	68e5      	ldr	r5, [r4, #12]
 800e8da:	6832      	ldr	r2, [r6, #0]
 800e8dc:	f003 0306 	and.w	r3, r3, #6
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	bf08      	it	eq
 800e8e4:	1aad      	subeq	r5, r5, r2
 800e8e6:	68a3      	ldr	r3, [r4, #8]
 800e8e8:	6922      	ldr	r2, [r4, #16]
 800e8ea:	bf0c      	ite	eq
 800e8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8f0:	2500      	movne	r5, #0
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	bfc4      	itt	gt
 800e8f6:	1a9b      	subgt	r3, r3, r2
 800e8f8:	18ed      	addgt	r5, r5, r3
 800e8fa:	2600      	movs	r6, #0
 800e8fc:	341a      	adds	r4, #26
 800e8fe:	42b5      	cmp	r5, r6
 800e900:	d11a      	bne.n	800e938 <_printf_common+0xc8>
 800e902:	2000      	movs	r0, #0
 800e904:	e008      	b.n	800e918 <_printf_common+0xa8>
 800e906:	2301      	movs	r3, #1
 800e908:	4652      	mov	r2, sl
 800e90a:	4649      	mov	r1, r9
 800e90c:	4638      	mov	r0, r7
 800e90e:	47c0      	blx	r8
 800e910:	3001      	adds	r0, #1
 800e912:	d103      	bne.n	800e91c <_printf_common+0xac>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91c:	3501      	adds	r5, #1
 800e91e:	e7c6      	b.n	800e8ae <_printf_common+0x3e>
 800e920:	18e1      	adds	r1, r4, r3
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	2030      	movs	r0, #48	; 0x30
 800e926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e92a:	4422      	add	r2, r4
 800e92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e934:	3302      	adds	r3, #2
 800e936:	e7c7      	b.n	800e8c8 <_printf_common+0x58>
 800e938:	2301      	movs	r3, #1
 800e93a:	4622      	mov	r2, r4
 800e93c:	4649      	mov	r1, r9
 800e93e:	4638      	mov	r0, r7
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d0e6      	beq.n	800e914 <_printf_common+0xa4>
 800e946:	3601      	adds	r6, #1
 800e948:	e7d9      	b.n	800e8fe <_printf_common+0x8e>
	...

0800e94c <_printf_i>:
 800e94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e950:	7e0f      	ldrb	r7, [r1, #24]
 800e952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e954:	2f78      	cmp	r7, #120	; 0x78
 800e956:	4691      	mov	r9, r2
 800e958:	4680      	mov	r8, r0
 800e95a:	460c      	mov	r4, r1
 800e95c:	469a      	mov	sl, r3
 800e95e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e962:	d807      	bhi.n	800e974 <_printf_i+0x28>
 800e964:	2f62      	cmp	r7, #98	; 0x62
 800e966:	d80a      	bhi.n	800e97e <_printf_i+0x32>
 800e968:	2f00      	cmp	r7, #0
 800e96a:	f000 80d8 	beq.w	800eb1e <_printf_i+0x1d2>
 800e96e:	2f58      	cmp	r7, #88	; 0x58
 800e970:	f000 80a3 	beq.w	800eaba <_printf_i+0x16e>
 800e974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e97c:	e03a      	b.n	800e9f4 <_printf_i+0xa8>
 800e97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e982:	2b15      	cmp	r3, #21
 800e984:	d8f6      	bhi.n	800e974 <_printf_i+0x28>
 800e986:	a101      	add	r1, pc, #4	; (adr r1, 800e98c <_printf_i+0x40>)
 800e988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e98c:	0800e9e5 	.word	0x0800e9e5
 800e990:	0800e9f9 	.word	0x0800e9f9
 800e994:	0800e975 	.word	0x0800e975
 800e998:	0800e975 	.word	0x0800e975
 800e99c:	0800e975 	.word	0x0800e975
 800e9a0:	0800e975 	.word	0x0800e975
 800e9a4:	0800e9f9 	.word	0x0800e9f9
 800e9a8:	0800e975 	.word	0x0800e975
 800e9ac:	0800e975 	.word	0x0800e975
 800e9b0:	0800e975 	.word	0x0800e975
 800e9b4:	0800e975 	.word	0x0800e975
 800e9b8:	0800eb05 	.word	0x0800eb05
 800e9bc:	0800ea29 	.word	0x0800ea29
 800e9c0:	0800eae7 	.word	0x0800eae7
 800e9c4:	0800e975 	.word	0x0800e975
 800e9c8:	0800e975 	.word	0x0800e975
 800e9cc:	0800eb27 	.word	0x0800eb27
 800e9d0:	0800e975 	.word	0x0800e975
 800e9d4:	0800ea29 	.word	0x0800ea29
 800e9d8:	0800e975 	.word	0x0800e975
 800e9dc:	0800e975 	.word	0x0800e975
 800e9e0:	0800eaef 	.word	0x0800eaef
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	1d1a      	adds	r2, r3, #4
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	602a      	str	r2, [r5, #0]
 800e9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e0a3      	b.n	800eb40 <_printf_i+0x1f4>
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	6829      	ldr	r1, [r5, #0]
 800e9fc:	0606      	lsls	r6, r0, #24
 800e9fe:	f101 0304 	add.w	r3, r1, #4
 800ea02:	d50a      	bpl.n	800ea1a <_printf_i+0xce>
 800ea04:	680e      	ldr	r6, [r1, #0]
 800ea06:	602b      	str	r3, [r5, #0]
 800ea08:	2e00      	cmp	r6, #0
 800ea0a:	da03      	bge.n	800ea14 <_printf_i+0xc8>
 800ea0c:	232d      	movs	r3, #45	; 0x2d
 800ea0e:	4276      	negs	r6, r6
 800ea10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea14:	485e      	ldr	r0, [pc, #376]	; (800eb90 <_printf_i+0x244>)
 800ea16:	230a      	movs	r3, #10
 800ea18:	e019      	b.n	800ea4e <_printf_i+0x102>
 800ea1a:	680e      	ldr	r6, [r1, #0]
 800ea1c:	602b      	str	r3, [r5, #0]
 800ea1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea22:	bf18      	it	ne
 800ea24:	b236      	sxthne	r6, r6
 800ea26:	e7ef      	b.n	800ea08 <_printf_i+0xbc>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	6820      	ldr	r0, [r4, #0]
 800ea2c:	1d19      	adds	r1, r3, #4
 800ea2e:	6029      	str	r1, [r5, #0]
 800ea30:	0601      	lsls	r1, r0, #24
 800ea32:	d501      	bpl.n	800ea38 <_printf_i+0xec>
 800ea34:	681e      	ldr	r6, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <_printf_i+0xf2>
 800ea38:	0646      	lsls	r6, r0, #25
 800ea3a:	d5fb      	bpl.n	800ea34 <_printf_i+0xe8>
 800ea3c:	881e      	ldrh	r6, [r3, #0]
 800ea3e:	4854      	ldr	r0, [pc, #336]	; (800eb90 <_printf_i+0x244>)
 800ea40:	2f6f      	cmp	r7, #111	; 0x6f
 800ea42:	bf0c      	ite	eq
 800ea44:	2308      	moveq	r3, #8
 800ea46:	230a      	movne	r3, #10
 800ea48:	2100      	movs	r1, #0
 800ea4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea4e:	6865      	ldr	r5, [r4, #4]
 800ea50:	60a5      	str	r5, [r4, #8]
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	bfa2      	ittt	ge
 800ea56:	6821      	ldrge	r1, [r4, #0]
 800ea58:	f021 0104 	bicge.w	r1, r1, #4
 800ea5c:	6021      	strge	r1, [r4, #0]
 800ea5e:	b90e      	cbnz	r6, 800ea64 <_printf_i+0x118>
 800ea60:	2d00      	cmp	r5, #0
 800ea62:	d04d      	beq.n	800eb00 <_printf_i+0x1b4>
 800ea64:	4615      	mov	r5, r2
 800ea66:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea6a:	fb03 6711 	mls	r7, r3, r1, r6
 800ea6e:	5dc7      	ldrb	r7, [r0, r7]
 800ea70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea74:	4637      	mov	r7, r6
 800ea76:	42bb      	cmp	r3, r7
 800ea78:	460e      	mov	r6, r1
 800ea7a:	d9f4      	bls.n	800ea66 <_printf_i+0x11a>
 800ea7c:	2b08      	cmp	r3, #8
 800ea7e:	d10b      	bne.n	800ea98 <_printf_i+0x14c>
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	07de      	lsls	r6, r3, #31
 800ea84:	d508      	bpl.n	800ea98 <_printf_i+0x14c>
 800ea86:	6923      	ldr	r3, [r4, #16]
 800ea88:	6861      	ldr	r1, [r4, #4]
 800ea8a:	4299      	cmp	r1, r3
 800ea8c:	bfde      	ittt	le
 800ea8e:	2330      	movle	r3, #48	; 0x30
 800ea90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea98:	1b52      	subs	r2, r2, r5
 800ea9a:	6122      	str	r2, [r4, #16]
 800ea9c:	f8cd a000 	str.w	sl, [sp]
 800eaa0:	464b      	mov	r3, r9
 800eaa2:	aa03      	add	r2, sp, #12
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	4640      	mov	r0, r8
 800eaa8:	f7ff fee2 	bl	800e870 <_printf_common>
 800eaac:	3001      	adds	r0, #1
 800eaae:	d14c      	bne.n	800eb4a <_printf_i+0x1fe>
 800eab0:	f04f 30ff 	mov.w	r0, #4294967295
 800eab4:	b004      	add	sp, #16
 800eab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaba:	4835      	ldr	r0, [pc, #212]	; (800eb90 <_printf_i+0x244>)
 800eabc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eac0:	6829      	ldr	r1, [r5, #0]
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	f851 6b04 	ldr.w	r6, [r1], #4
 800eac8:	6029      	str	r1, [r5, #0]
 800eaca:	061d      	lsls	r5, r3, #24
 800eacc:	d514      	bpl.n	800eaf8 <_printf_i+0x1ac>
 800eace:	07df      	lsls	r7, r3, #31
 800ead0:	bf44      	itt	mi
 800ead2:	f043 0320 	orrmi.w	r3, r3, #32
 800ead6:	6023      	strmi	r3, [r4, #0]
 800ead8:	b91e      	cbnz	r6, 800eae2 <_printf_i+0x196>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	f023 0320 	bic.w	r3, r3, #32
 800eae0:	6023      	str	r3, [r4, #0]
 800eae2:	2310      	movs	r3, #16
 800eae4:	e7b0      	b.n	800ea48 <_printf_i+0xfc>
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	f043 0320 	orr.w	r3, r3, #32
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	2378      	movs	r3, #120	; 0x78
 800eaf0:	4828      	ldr	r0, [pc, #160]	; (800eb94 <_printf_i+0x248>)
 800eaf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eaf6:	e7e3      	b.n	800eac0 <_printf_i+0x174>
 800eaf8:	0659      	lsls	r1, r3, #25
 800eafa:	bf48      	it	mi
 800eafc:	b2b6      	uxthmi	r6, r6
 800eafe:	e7e6      	b.n	800eace <_printf_i+0x182>
 800eb00:	4615      	mov	r5, r2
 800eb02:	e7bb      	b.n	800ea7c <_printf_i+0x130>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	6826      	ldr	r6, [r4, #0]
 800eb08:	6961      	ldr	r1, [r4, #20]
 800eb0a:	1d18      	adds	r0, r3, #4
 800eb0c:	6028      	str	r0, [r5, #0]
 800eb0e:	0635      	lsls	r5, r6, #24
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	d501      	bpl.n	800eb18 <_printf_i+0x1cc>
 800eb14:	6019      	str	r1, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <_printf_i+0x1d2>
 800eb18:	0670      	lsls	r0, r6, #25
 800eb1a:	d5fb      	bpl.n	800eb14 <_printf_i+0x1c8>
 800eb1c:	8019      	strh	r1, [r3, #0]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	4615      	mov	r5, r2
 800eb24:	e7ba      	b.n	800ea9c <_printf_i+0x150>
 800eb26:	682b      	ldr	r3, [r5, #0]
 800eb28:	1d1a      	adds	r2, r3, #4
 800eb2a:	602a      	str	r2, [r5, #0]
 800eb2c:	681d      	ldr	r5, [r3, #0]
 800eb2e:	6862      	ldr	r2, [r4, #4]
 800eb30:	2100      	movs	r1, #0
 800eb32:	4628      	mov	r0, r5
 800eb34:	f7f1 fb6c 	bl	8000210 <memchr>
 800eb38:	b108      	cbz	r0, 800eb3e <_printf_i+0x1f2>
 800eb3a:	1b40      	subs	r0, r0, r5
 800eb3c:	6060      	str	r0, [r4, #4]
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	6123      	str	r3, [r4, #16]
 800eb42:	2300      	movs	r3, #0
 800eb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb48:	e7a8      	b.n	800ea9c <_printf_i+0x150>
 800eb4a:	6923      	ldr	r3, [r4, #16]
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4649      	mov	r1, r9
 800eb50:	4640      	mov	r0, r8
 800eb52:	47d0      	blx	sl
 800eb54:	3001      	adds	r0, #1
 800eb56:	d0ab      	beq.n	800eab0 <_printf_i+0x164>
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	079b      	lsls	r3, r3, #30
 800eb5c:	d413      	bmi.n	800eb86 <_printf_i+0x23a>
 800eb5e:	68e0      	ldr	r0, [r4, #12]
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	4298      	cmp	r0, r3
 800eb64:	bfb8      	it	lt
 800eb66:	4618      	movlt	r0, r3
 800eb68:	e7a4      	b.n	800eab4 <_printf_i+0x168>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	4649      	mov	r1, r9
 800eb70:	4640      	mov	r0, r8
 800eb72:	47d0      	blx	sl
 800eb74:	3001      	adds	r0, #1
 800eb76:	d09b      	beq.n	800eab0 <_printf_i+0x164>
 800eb78:	3501      	adds	r5, #1
 800eb7a:	68e3      	ldr	r3, [r4, #12]
 800eb7c:	9903      	ldr	r1, [sp, #12]
 800eb7e:	1a5b      	subs	r3, r3, r1
 800eb80:	42ab      	cmp	r3, r5
 800eb82:	dcf2      	bgt.n	800eb6a <_printf_i+0x21e>
 800eb84:	e7eb      	b.n	800eb5e <_printf_i+0x212>
 800eb86:	2500      	movs	r5, #0
 800eb88:	f104 0619 	add.w	r6, r4, #25
 800eb8c:	e7f5      	b.n	800eb7a <_printf_i+0x22e>
 800eb8e:	bf00      	nop
 800eb90:	08020042 	.word	0x08020042
 800eb94:	08020053 	.word	0x08020053

0800eb98 <_sbrk_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d06      	ldr	r5, [pc, #24]	; (800ebb4 <_sbrk_r+0x1c>)
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	4608      	mov	r0, r1
 800eba2:	602b      	str	r3, [r5, #0]
 800eba4:	f7f2 fd82 	bl	80016ac <_sbrk>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_sbrk_r+0x1a>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_sbrk_r+0x1a>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	2000cec4 	.word	0x2000cec4

0800ebb8 <strcpy>:
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebbe:	f803 2b01 	strb.w	r2, [r3], #1
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	d1f9      	bne.n	800ebba <strcpy+0x2>
 800ebc6:	4770      	bx	lr

0800ebc8 <sulp>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	4604      	mov	r4, r0
 800ebcc:	460d      	mov	r5, r1
 800ebce:	ec45 4b10 	vmov	d0, r4, r5
 800ebd2:	4616      	mov	r6, r2
 800ebd4:	f002 ff96 	bl	8011b04 <__ulp>
 800ebd8:	ec51 0b10 	vmov	r0, r1, d0
 800ebdc:	b17e      	cbz	r6, 800ebfe <sulp+0x36>
 800ebde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ebe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	dd09      	ble.n	800ebfe <sulp+0x36>
 800ebea:	051b      	lsls	r3, r3, #20
 800ebec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ebf0:	2400      	movs	r4, #0
 800ebf2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	462b      	mov	r3, r5
 800ebfa:	f7f1 fd15 	bl	8000628 <__aeabi_dmul>
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}

0800ec00 <_strtod_l>:
 800ec00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec04:	ed2d 8b02 	vpush	{d8}
 800ec08:	b09d      	sub	sp, #116	; 0x74
 800ec0a:	461f      	mov	r7, r3
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	9318      	str	r3, [sp, #96]	; 0x60
 800ec10:	4ba2      	ldr	r3, [pc, #648]	; (800ee9c <_strtod_l+0x29c>)
 800ec12:	9213      	str	r2, [sp, #76]	; 0x4c
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	9305      	str	r3, [sp, #20]
 800ec18:	4604      	mov	r4, r0
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	4688      	mov	r8, r1
 800ec1e:	f7f1 fae9 	bl	80001f4 <strlen>
 800ec22:	f04f 0a00 	mov.w	sl, #0
 800ec26:	4605      	mov	r5, r0
 800ec28:	f04f 0b00 	mov.w	fp, #0
 800ec2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec32:	781a      	ldrb	r2, [r3, #0]
 800ec34:	2a2b      	cmp	r2, #43	; 0x2b
 800ec36:	d04e      	beq.n	800ecd6 <_strtod_l+0xd6>
 800ec38:	d83b      	bhi.n	800ecb2 <_strtod_l+0xb2>
 800ec3a:	2a0d      	cmp	r2, #13
 800ec3c:	d834      	bhi.n	800eca8 <_strtod_l+0xa8>
 800ec3e:	2a08      	cmp	r2, #8
 800ec40:	d834      	bhi.n	800ecac <_strtod_l+0xac>
 800ec42:	2a00      	cmp	r2, #0
 800ec44:	d03e      	beq.n	800ecc4 <_strtod_l+0xc4>
 800ec46:	2300      	movs	r3, #0
 800ec48:	930a      	str	r3, [sp, #40]	; 0x28
 800ec4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ec4c:	7833      	ldrb	r3, [r6, #0]
 800ec4e:	2b30      	cmp	r3, #48	; 0x30
 800ec50:	f040 80b0 	bne.w	800edb4 <_strtod_l+0x1b4>
 800ec54:	7873      	ldrb	r3, [r6, #1]
 800ec56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec5a:	2b58      	cmp	r3, #88	; 0x58
 800ec5c:	d168      	bne.n	800ed30 <_strtod_l+0x130>
 800ec5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec60:	9301      	str	r3, [sp, #4]
 800ec62:	ab18      	add	r3, sp, #96	; 0x60
 800ec64:	9702      	str	r7, [sp, #8]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	4a8d      	ldr	r2, [pc, #564]	; (800eea0 <_strtod_l+0x2a0>)
 800ec6a:	ab19      	add	r3, sp, #100	; 0x64
 800ec6c:	a917      	add	r1, sp, #92	; 0x5c
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f002 f836 	bl	8010ce0 <__gethex>
 800ec74:	f010 0707 	ands.w	r7, r0, #7
 800ec78:	4605      	mov	r5, r0
 800ec7a:	d005      	beq.n	800ec88 <_strtod_l+0x88>
 800ec7c:	2f06      	cmp	r7, #6
 800ec7e:	d12c      	bne.n	800ecda <_strtod_l+0xda>
 800ec80:	3601      	adds	r6, #1
 800ec82:	2300      	movs	r3, #0
 800ec84:	9617      	str	r6, [sp, #92]	; 0x5c
 800ec86:	930a      	str	r3, [sp, #40]	; 0x28
 800ec88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f040 8590 	bne.w	800f7b0 <_strtod_l+0xbb0>
 800ec90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec92:	b1eb      	cbz	r3, 800ecd0 <_strtod_l+0xd0>
 800ec94:	4652      	mov	r2, sl
 800ec96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec9a:	ec43 2b10 	vmov	d0, r2, r3
 800ec9e:	b01d      	add	sp, #116	; 0x74
 800eca0:	ecbd 8b02 	vpop	{d8}
 800eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca8:	2a20      	cmp	r2, #32
 800ecaa:	d1cc      	bne.n	800ec46 <_strtod_l+0x46>
 800ecac:	3301      	adds	r3, #1
 800ecae:	9317      	str	r3, [sp, #92]	; 0x5c
 800ecb0:	e7be      	b.n	800ec30 <_strtod_l+0x30>
 800ecb2:	2a2d      	cmp	r2, #45	; 0x2d
 800ecb4:	d1c7      	bne.n	800ec46 <_strtod_l+0x46>
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	920a      	str	r2, [sp, #40]	; 0x28
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecbe:	785b      	ldrb	r3, [r3, #1]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1c2      	bne.n	800ec4a <_strtod_l+0x4a>
 800ecc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f040 856e 	bne.w	800f7ac <_strtod_l+0xbac>
 800ecd0:	4652      	mov	r2, sl
 800ecd2:	465b      	mov	r3, fp
 800ecd4:	e7e1      	b.n	800ec9a <_strtod_l+0x9a>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	e7ee      	b.n	800ecb8 <_strtod_l+0xb8>
 800ecda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ecdc:	b13a      	cbz	r2, 800ecee <_strtod_l+0xee>
 800ecde:	2135      	movs	r1, #53	; 0x35
 800ece0:	a81a      	add	r0, sp, #104	; 0x68
 800ece2:	f003 f81a 	bl	8011d1a <__copybits>
 800ece6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ece8:	4620      	mov	r0, r4
 800ecea:	f002 fbd9 	bl	80114a0 <_Bfree>
 800ecee:	3f01      	subs	r7, #1
 800ecf0:	2f04      	cmp	r7, #4
 800ecf2:	d806      	bhi.n	800ed02 <_strtod_l+0x102>
 800ecf4:	e8df f007 	tbb	[pc, r7]
 800ecf8:	1714030a 	.word	0x1714030a
 800ecfc:	0a          	.byte	0x0a
 800ecfd:	00          	.byte	0x00
 800ecfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ed02:	0728      	lsls	r0, r5, #28
 800ed04:	d5c0      	bpl.n	800ec88 <_strtod_l+0x88>
 800ed06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ed0a:	e7bd      	b.n	800ec88 <_strtod_l+0x88>
 800ed0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ed10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ed16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ed1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed1e:	e7f0      	b.n	800ed02 <_strtod_l+0x102>
 800ed20:	f8df b180 	ldr.w	fp, [pc, #384]	; 800eea4 <_strtod_l+0x2a4>
 800ed24:	e7ed      	b.n	800ed02 <_strtod_l+0x102>
 800ed26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ed2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ed2e:	e7e8      	b.n	800ed02 <_strtod_l+0x102>
 800ed30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed36:	785b      	ldrb	r3, [r3, #1]
 800ed38:	2b30      	cmp	r3, #48	; 0x30
 800ed3a:	d0f9      	beq.n	800ed30 <_strtod_l+0x130>
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d0a3      	beq.n	800ec88 <_strtod_l+0x88>
 800ed40:	2301      	movs	r3, #1
 800ed42:	f04f 0900 	mov.w	r9, #0
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed4a:	9308      	str	r3, [sp, #32]
 800ed4c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ed50:	464f      	mov	r7, r9
 800ed52:	220a      	movs	r2, #10
 800ed54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ed56:	7806      	ldrb	r6, [r0, #0]
 800ed58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ed5c:	b2d9      	uxtb	r1, r3
 800ed5e:	2909      	cmp	r1, #9
 800ed60:	d92a      	bls.n	800edb8 <_strtod_l+0x1b8>
 800ed62:	9905      	ldr	r1, [sp, #20]
 800ed64:	462a      	mov	r2, r5
 800ed66:	f003 f9e0 	bl	801212a <strncmp>
 800ed6a:	b398      	cbz	r0, 800edd4 <_strtod_l+0x1d4>
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463d      	mov	r5, r7
 800ed72:	9005      	str	r0, [sp, #20]
 800ed74:	4603      	mov	r3, r0
 800ed76:	2a65      	cmp	r2, #101	; 0x65
 800ed78:	d001      	beq.n	800ed7e <_strtod_l+0x17e>
 800ed7a:	2a45      	cmp	r2, #69	; 0x45
 800ed7c:	d118      	bne.n	800edb0 <_strtod_l+0x1b0>
 800ed7e:	b91d      	cbnz	r5, 800ed88 <_strtod_l+0x188>
 800ed80:	9a04      	ldr	r2, [sp, #16]
 800ed82:	4302      	orrs	r2, r0
 800ed84:	d09e      	beq.n	800ecc4 <_strtod_l+0xc4>
 800ed86:	2500      	movs	r5, #0
 800ed88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ed8c:	f108 0201 	add.w	r2, r8, #1
 800ed90:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed92:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ed96:	2a2b      	cmp	r2, #43	; 0x2b
 800ed98:	d075      	beq.n	800ee86 <_strtod_l+0x286>
 800ed9a:	2a2d      	cmp	r2, #45	; 0x2d
 800ed9c:	d07b      	beq.n	800ee96 <_strtod_l+0x296>
 800ed9e:	f04f 0c00 	mov.w	ip, #0
 800eda2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eda6:	2909      	cmp	r1, #9
 800eda8:	f240 8082 	bls.w	800eeb0 <_strtod_l+0x2b0>
 800edac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800edb0:	2600      	movs	r6, #0
 800edb2:	e09d      	b.n	800eef0 <_strtod_l+0x2f0>
 800edb4:	2300      	movs	r3, #0
 800edb6:	e7c4      	b.n	800ed42 <_strtod_l+0x142>
 800edb8:	2f08      	cmp	r7, #8
 800edba:	bfd8      	it	le
 800edbc:	9907      	ldrle	r1, [sp, #28]
 800edbe:	f100 0001 	add.w	r0, r0, #1
 800edc2:	bfda      	itte	le
 800edc4:	fb02 3301 	mlale	r3, r2, r1, r3
 800edc8:	9307      	strle	r3, [sp, #28]
 800edca:	fb02 3909 	mlagt	r9, r2, r9, r3
 800edce:	3701      	adds	r7, #1
 800edd0:	9017      	str	r0, [sp, #92]	; 0x5c
 800edd2:	e7bf      	b.n	800ed54 <_strtod_l+0x154>
 800edd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edd6:	195a      	adds	r2, r3, r5
 800edd8:	9217      	str	r2, [sp, #92]	; 0x5c
 800edda:	5d5a      	ldrb	r2, [r3, r5]
 800eddc:	2f00      	cmp	r7, #0
 800edde:	d037      	beq.n	800ee50 <_strtod_l+0x250>
 800ede0:	9005      	str	r0, [sp, #20]
 800ede2:	463d      	mov	r5, r7
 800ede4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ede8:	2b09      	cmp	r3, #9
 800edea:	d912      	bls.n	800ee12 <_strtod_l+0x212>
 800edec:	2301      	movs	r3, #1
 800edee:	e7c2      	b.n	800ed76 <_strtod_l+0x176>
 800edf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	9217      	str	r2, [sp, #92]	; 0x5c
 800edf6:	785a      	ldrb	r2, [r3, #1]
 800edf8:	3001      	adds	r0, #1
 800edfa:	2a30      	cmp	r2, #48	; 0x30
 800edfc:	d0f8      	beq.n	800edf0 <_strtod_l+0x1f0>
 800edfe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ee02:	2b08      	cmp	r3, #8
 800ee04:	f200 84d9 	bhi.w	800f7ba <_strtod_l+0xbba>
 800ee08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee0a:	9005      	str	r0, [sp, #20]
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	9308      	str	r3, [sp, #32]
 800ee10:	4605      	mov	r5, r0
 800ee12:	3a30      	subs	r2, #48	; 0x30
 800ee14:	f100 0301 	add.w	r3, r0, #1
 800ee18:	d014      	beq.n	800ee44 <_strtod_l+0x244>
 800ee1a:	9905      	ldr	r1, [sp, #20]
 800ee1c:	4419      	add	r1, r3
 800ee1e:	9105      	str	r1, [sp, #20]
 800ee20:	462b      	mov	r3, r5
 800ee22:	eb00 0e05 	add.w	lr, r0, r5
 800ee26:	210a      	movs	r1, #10
 800ee28:	4573      	cmp	r3, lr
 800ee2a:	d113      	bne.n	800ee54 <_strtod_l+0x254>
 800ee2c:	182b      	adds	r3, r5, r0
 800ee2e:	2b08      	cmp	r3, #8
 800ee30:	f105 0501 	add.w	r5, r5, #1
 800ee34:	4405      	add	r5, r0
 800ee36:	dc1c      	bgt.n	800ee72 <_strtod_l+0x272>
 800ee38:	9907      	ldr	r1, [sp, #28]
 800ee3a:	230a      	movs	r3, #10
 800ee3c:	fb03 2301 	mla	r3, r3, r1, r2
 800ee40:	9307      	str	r3, [sp, #28]
 800ee42:	2300      	movs	r3, #0
 800ee44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee46:	1c51      	adds	r1, r2, #1
 800ee48:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee4a:	7852      	ldrb	r2, [r2, #1]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	e7c9      	b.n	800ede4 <_strtod_l+0x1e4>
 800ee50:	4638      	mov	r0, r7
 800ee52:	e7d2      	b.n	800edfa <_strtod_l+0x1fa>
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	dc04      	bgt.n	800ee62 <_strtod_l+0x262>
 800ee58:	9e07      	ldr	r6, [sp, #28]
 800ee5a:	434e      	muls	r6, r1
 800ee5c:	9607      	str	r6, [sp, #28]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	e7e2      	b.n	800ee28 <_strtod_l+0x228>
 800ee62:	f103 0c01 	add.w	ip, r3, #1
 800ee66:	f1bc 0f10 	cmp.w	ip, #16
 800ee6a:	bfd8      	it	le
 800ee6c:	fb01 f909 	mulle.w	r9, r1, r9
 800ee70:	e7f5      	b.n	800ee5e <_strtod_l+0x25e>
 800ee72:	2d10      	cmp	r5, #16
 800ee74:	bfdc      	itt	le
 800ee76:	230a      	movle	r3, #10
 800ee78:	fb03 2909 	mlale	r9, r3, r9, r2
 800ee7c:	e7e1      	b.n	800ee42 <_strtod_l+0x242>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9305      	str	r3, [sp, #20]
 800ee82:	2301      	movs	r3, #1
 800ee84:	e77c      	b.n	800ed80 <_strtod_l+0x180>
 800ee86:	f04f 0c00 	mov.w	ip, #0
 800ee8a:	f108 0202 	add.w	r2, r8, #2
 800ee8e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee90:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ee94:	e785      	b.n	800eda2 <_strtod_l+0x1a2>
 800ee96:	f04f 0c01 	mov.w	ip, #1
 800ee9a:	e7f6      	b.n	800ee8a <_strtod_l+0x28a>
 800ee9c:	08020314 	.word	0x08020314
 800eea0:	08020064 	.word	0x08020064
 800eea4:	7ff00000 	.word	0x7ff00000
 800eea8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eeaa:	1c51      	adds	r1, r2, #1
 800eeac:	9117      	str	r1, [sp, #92]	; 0x5c
 800eeae:	7852      	ldrb	r2, [r2, #1]
 800eeb0:	2a30      	cmp	r2, #48	; 0x30
 800eeb2:	d0f9      	beq.n	800eea8 <_strtod_l+0x2a8>
 800eeb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eeb8:	2908      	cmp	r1, #8
 800eeba:	f63f af79 	bhi.w	800edb0 <_strtod_l+0x1b0>
 800eebe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eec2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eec4:	9206      	str	r2, [sp, #24]
 800eec6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eec8:	1c51      	adds	r1, r2, #1
 800eeca:	9117      	str	r1, [sp, #92]	; 0x5c
 800eecc:	7852      	ldrb	r2, [r2, #1]
 800eece:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800eed2:	2e09      	cmp	r6, #9
 800eed4:	d937      	bls.n	800ef46 <_strtod_l+0x346>
 800eed6:	9e06      	ldr	r6, [sp, #24]
 800eed8:	1b89      	subs	r1, r1, r6
 800eeda:	2908      	cmp	r1, #8
 800eedc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800eee0:	dc02      	bgt.n	800eee8 <_strtod_l+0x2e8>
 800eee2:	4576      	cmp	r6, lr
 800eee4:	bfa8      	it	ge
 800eee6:	4676      	movge	r6, lr
 800eee8:	f1bc 0f00 	cmp.w	ip, #0
 800eeec:	d000      	beq.n	800eef0 <_strtod_l+0x2f0>
 800eeee:	4276      	negs	r6, r6
 800eef0:	2d00      	cmp	r5, #0
 800eef2:	d14d      	bne.n	800ef90 <_strtod_l+0x390>
 800eef4:	9904      	ldr	r1, [sp, #16]
 800eef6:	4301      	orrs	r1, r0
 800eef8:	f47f aec6 	bne.w	800ec88 <_strtod_l+0x88>
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f47f aee1 	bne.w	800ecc4 <_strtod_l+0xc4>
 800ef02:	2a69      	cmp	r2, #105	; 0x69
 800ef04:	d027      	beq.n	800ef56 <_strtod_l+0x356>
 800ef06:	dc24      	bgt.n	800ef52 <_strtod_l+0x352>
 800ef08:	2a49      	cmp	r2, #73	; 0x49
 800ef0a:	d024      	beq.n	800ef56 <_strtod_l+0x356>
 800ef0c:	2a4e      	cmp	r2, #78	; 0x4e
 800ef0e:	f47f aed9 	bne.w	800ecc4 <_strtod_l+0xc4>
 800ef12:	499f      	ldr	r1, [pc, #636]	; (800f190 <_strtod_l+0x590>)
 800ef14:	a817      	add	r0, sp, #92	; 0x5c
 800ef16:	f002 f93b 	bl	8011190 <__match>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	f43f aed2 	beq.w	800ecc4 <_strtod_l+0xc4>
 800ef20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	2b28      	cmp	r3, #40	; 0x28
 800ef26:	d12d      	bne.n	800ef84 <_strtod_l+0x384>
 800ef28:	499a      	ldr	r1, [pc, #616]	; (800f194 <_strtod_l+0x594>)
 800ef2a:	aa1a      	add	r2, sp, #104	; 0x68
 800ef2c:	a817      	add	r0, sp, #92	; 0x5c
 800ef2e:	f002 f943 	bl	80111b8 <__hexnan>
 800ef32:	2805      	cmp	r0, #5
 800ef34:	d126      	bne.n	800ef84 <_strtod_l+0x384>
 800ef36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ef3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ef40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ef44:	e6a0      	b.n	800ec88 <_strtod_l+0x88>
 800ef46:	210a      	movs	r1, #10
 800ef48:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ef4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef50:	e7b9      	b.n	800eec6 <_strtod_l+0x2c6>
 800ef52:	2a6e      	cmp	r2, #110	; 0x6e
 800ef54:	e7db      	b.n	800ef0e <_strtod_l+0x30e>
 800ef56:	4990      	ldr	r1, [pc, #576]	; (800f198 <_strtod_l+0x598>)
 800ef58:	a817      	add	r0, sp, #92	; 0x5c
 800ef5a:	f002 f919 	bl	8011190 <__match>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f43f aeb0 	beq.w	800ecc4 <_strtod_l+0xc4>
 800ef64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef66:	498d      	ldr	r1, [pc, #564]	; (800f19c <_strtod_l+0x59c>)
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	a817      	add	r0, sp, #92	; 0x5c
 800ef6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef6e:	f002 f90f 	bl	8011190 <__match>
 800ef72:	b910      	cbnz	r0, 800ef7a <_strtod_l+0x37a>
 800ef74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef76:	3301      	adds	r3, #1
 800ef78:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f1ac <_strtod_l+0x5ac>
 800ef7e:	f04f 0a00 	mov.w	sl, #0
 800ef82:	e681      	b.n	800ec88 <_strtod_l+0x88>
 800ef84:	4886      	ldr	r0, [pc, #536]	; (800f1a0 <_strtod_l+0x5a0>)
 800ef86:	f003 f87f 	bl	8012088 <nan>
 800ef8a:	ec5b ab10 	vmov	sl, fp, d0
 800ef8e:	e67b      	b.n	800ec88 <_strtod_l+0x88>
 800ef90:	9b05      	ldr	r3, [sp, #20]
 800ef92:	9807      	ldr	r0, [sp, #28]
 800ef94:	1af3      	subs	r3, r6, r3
 800ef96:	2f00      	cmp	r7, #0
 800ef98:	bf08      	it	eq
 800ef9a:	462f      	moveq	r7, r5
 800ef9c:	2d10      	cmp	r5, #16
 800ef9e:	9306      	str	r3, [sp, #24]
 800efa0:	46a8      	mov	r8, r5
 800efa2:	bfa8      	it	ge
 800efa4:	f04f 0810 	movge.w	r8, #16
 800efa8:	f7f1 fac4 	bl	8000534 <__aeabi_ui2d>
 800efac:	2d09      	cmp	r5, #9
 800efae:	4682      	mov	sl, r0
 800efb0:	468b      	mov	fp, r1
 800efb2:	dd13      	ble.n	800efdc <_strtod_l+0x3dc>
 800efb4:	4b7b      	ldr	r3, [pc, #492]	; (800f1a4 <_strtod_l+0x5a4>)
 800efb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800efba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800efbe:	f7f1 fb33 	bl	8000628 <__aeabi_dmul>
 800efc2:	4682      	mov	sl, r0
 800efc4:	4648      	mov	r0, r9
 800efc6:	468b      	mov	fp, r1
 800efc8:	f7f1 fab4 	bl	8000534 <__aeabi_ui2d>
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	4650      	mov	r0, sl
 800efd2:	4659      	mov	r1, fp
 800efd4:	f7f1 f972 	bl	80002bc <__adddf3>
 800efd8:	4682      	mov	sl, r0
 800efda:	468b      	mov	fp, r1
 800efdc:	2d0f      	cmp	r5, #15
 800efde:	dc38      	bgt.n	800f052 <_strtod_l+0x452>
 800efe0:	9b06      	ldr	r3, [sp, #24]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f43f ae50 	beq.w	800ec88 <_strtod_l+0x88>
 800efe8:	dd24      	ble.n	800f034 <_strtod_l+0x434>
 800efea:	2b16      	cmp	r3, #22
 800efec:	dc0b      	bgt.n	800f006 <_strtod_l+0x406>
 800efee:	496d      	ldr	r1, [pc, #436]	; (800f1a4 <_strtod_l+0x5a4>)
 800eff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eff8:	4652      	mov	r2, sl
 800effa:	465b      	mov	r3, fp
 800effc:	f7f1 fb14 	bl	8000628 <__aeabi_dmul>
 800f000:	4682      	mov	sl, r0
 800f002:	468b      	mov	fp, r1
 800f004:	e640      	b.n	800ec88 <_strtod_l+0x88>
 800f006:	9a06      	ldr	r2, [sp, #24]
 800f008:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f00c:	4293      	cmp	r3, r2
 800f00e:	db20      	blt.n	800f052 <_strtod_l+0x452>
 800f010:	4c64      	ldr	r4, [pc, #400]	; (800f1a4 <_strtod_l+0x5a4>)
 800f012:	f1c5 050f 	rsb	r5, r5, #15
 800f016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f01a:	4652      	mov	r2, sl
 800f01c:	465b      	mov	r3, fp
 800f01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f022:	f7f1 fb01 	bl	8000628 <__aeabi_dmul>
 800f026:	9b06      	ldr	r3, [sp, #24]
 800f028:	1b5d      	subs	r5, r3, r5
 800f02a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f02e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f032:	e7e3      	b.n	800effc <_strtod_l+0x3fc>
 800f034:	9b06      	ldr	r3, [sp, #24]
 800f036:	3316      	adds	r3, #22
 800f038:	db0b      	blt.n	800f052 <_strtod_l+0x452>
 800f03a:	9b05      	ldr	r3, [sp, #20]
 800f03c:	1b9e      	subs	r6, r3, r6
 800f03e:	4b59      	ldr	r3, [pc, #356]	; (800f1a4 <_strtod_l+0x5a4>)
 800f040:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f044:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f048:	4650      	mov	r0, sl
 800f04a:	4659      	mov	r1, fp
 800f04c:	f7f1 fc16 	bl	800087c <__aeabi_ddiv>
 800f050:	e7d6      	b.n	800f000 <_strtod_l+0x400>
 800f052:	9b06      	ldr	r3, [sp, #24]
 800f054:	eba5 0808 	sub.w	r8, r5, r8
 800f058:	4498      	add	r8, r3
 800f05a:	f1b8 0f00 	cmp.w	r8, #0
 800f05e:	dd74      	ble.n	800f14a <_strtod_l+0x54a>
 800f060:	f018 030f 	ands.w	r3, r8, #15
 800f064:	d00a      	beq.n	800f07c <_strtod_l+0x47c>
 800f066:	494f      	ldr	r1, [pc, #316]	; (800f1a4 <_strtod_l+0x5a4>)
 800f068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f06c:	4652      	mov	r2, sl
 800f06e:	465b      	mov	r3, fp
 800f070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f074:	f7f1 fad8 	bl	8000628 <__aeabi_dmul>
 800f078:	4682      	mov	sl, r0
 800f07a:	468b      	mov	fp, r1
 800f07c:	f038 080f 	bics.w	r8, r8, #15
 800f080:	d04f      	beq.n	800f122 <_strtod_l+0x522>
 800f082:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f086:	dd22      	ble.n	800f0ce <_strtod_l+0x4ce>
 800f088:	2500      	movs	r5, #0
 800f08a:	462e      	mov	r6, r5
 800f08c:	9507      	str	r5, [sp, #28]
 800f08e:	9505      	str	r5, [sp, #20]
 800f090:	2322      	movs	r3, #34	; 0x22
 800f092:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f1ac <_strtod_l+0x5ac>
 800f096:	6023      	str	r3, [r4, #0]
 800f098:	f04f 0a00 	mov.w	sl, #0
 800f09c:	9b07      	ldr	r3, [sp, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f43f adf2 	beq.w	800ec88 <_strtod_l+0x88>
 800f0a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f002 f9fa 	bl	80114a0 <_Bfree>
 800f0ac:	9905      	ldr	r1, [sp, #20]
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f002 f9f6 	bl	80114a0 <_Bfree>
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f002 f9f2 	bl	80114a0 <_Bfree>
 800f0bc:	9907      	ldr	r1, [sp, #28]
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f002 f9ee 	bl	80114a0 <_Bfree>
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f002 f9ea 	bl	80114a0 <_Bfree>
 800f0cc:	e5dc      	b.n	800ec88 <_strtod_l+0x88>
 800f0ce:	4b36      	ldr	r3, [pc, #216]	; (800f1a8 <_strtod_l+0x5a8>)
 800f0d0:	9304      	str	r3, [sp, #16]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f0d8:	4650      	mov	r0, sl
 800f0da:	4659      	mov	r1, fp
 800f0dc:	4699      	mov	r9, r3
 800f0de:	f1b8 0f01 	cmp.w	r8, #1
 800f0e2:	dc21      	bgt.n	800f128 <_strtod_l+0x528>
 800f0e4:	b10b      	cbz	r3, 800f0ea <_strtod_l+0x4ea>
 800f0e6:	4682      	mov	sl, r0
 800f0e8:	468b      	mov	fp, r1
 800f0ea:	4b2f      	ldr	r3, [pc, #188]	; (800f1a8 <_strtod_l+0x5a8>)
 800f0ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f0f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f0f4:	4652      	mov	r2, sl
 800f0f6:	465b      	mov	r3, fp
 800f0f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f0fc:	f7f1 fa94 	bl	8000628 <__aeabi_dmul>
 800f100:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <_strtod_l+0x5ac>)
 800f102:	460a      	mov	r2, r1
 800f104:	400b      	ands	r3, r1
 800f106:	492a      	ldr	r1, [pc, #168]	; (800f1b0 <_strtod_l+0x5b0>)
 800f108:	428b      	cmp	r3, r1
 800f10a:	4682      	mov	sl, r0
 800f10c:	d8bc      	bhi.n	800f088 <_strtod_l+0x488>
 800f10e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f112:	428b      	cmp	r3, r1
 800f114:	bf86      	itte	hi
 800f116:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f1b4 <_strtod_l+0x5b4>
 800f11a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f11e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f122:	2300      	movs	r3, #0
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	e084      	b.n	800f232 <_strtod_l+0x632>
 800f128:	f018 0f01 	tst.w	r8, #1
 800f12c:	d005      	beq.n	800f13a <_strtod_l+0x53a>
 800f12e:	9b04      	ldr	r3, [sp, #16]
 800f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f134:	f7f1 fa78 	bl	8000628 <__aeabi_dmul>
 800f138:	2301      	movs	r3, #1
 800f13a:	9a04      	ldr	r2, [sp, #16]
 800f13c:	3208      	adds	r2, #8
 800f13e:	f109 0901 	add.w	r9, r9, #1
 800f142:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f146:	9204      	str	r2, [sp, #16]
 800f148:	e7c9      	b.n	800f0de <_strtod_l+0x4de>
 800f14a:	d0ea      	beq.n	800f122 <_strtod_l+0x522>
 800f14c:	f1c8 0800 	rsb	r8, r8, #0
 800f150:	f018 020f 	ands.w	r2, r8, #15
 800f154:	d00a      	beq.n	800f16c <_strtod_l+0x56c>
 800f156:	4b13      	ldr	r3, [pc, #76]	; (800f1a4 <_strtod_l+0x5a4>)
 800f158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f15c:	4650      	mov	r0, sl
 800f15e:	4659      	mov	r1, fp
 800f160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f164:	f7f1 fb8a 	bl	800087c <__aeabi_ddiv>
 800f168:	4682      	mov	sl, r0
 800f16a:	468b      	mov	fp, r1
 800f16c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f170:	d0d7      	beq.n	800f122 <_strtod_l+0x522>
 800f172:	f1b8 0f1f 	cmp.w	r8, #31
 800f176:	dd1f      	ble.n	800f1b8 <_strtod_l+0x5b8>
 800f178:	2500      	movs	r5, #0
 800f17a:	462e      	mov	r6, r5
 800f17c:	9507      	str	r5, [sp, #28]
 800f17e:	9505      	str	r5, [sp, #20]
 800f180:	2322      	movs	r3, #34	; 0x22
 800f182:	f04f 0a00 	mov.w	sl, #0
 800f186:	f04f 0b00 	mov.w	fp, #0
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	e786      	b.n	800f09c <_strtod_l+0x49c>
 800f18e:	bf00      	nop
 800f190:	0802003d 	.word	0x0802003d
 800f194:	08020078 	.word	0x08020078
 800f198:	08020035 	.word	0x08020035
 800f19c:	080201bc 	.word	0x080201bc
 800f1a0:	080204d0 	.word	0x080204d0
 800f1a4:	080203b0 	.word	0x080203b0
 800f1a8:	08020388 	.word	0x08020388
 800f1ac:	7ff00000 	.word	0x7ff00000
 800f1b0:	7ca00000 	.word	0x7ca00000
 800f1b4:	7fefffff 	.word	0x7fefffff
 800f1b8:	f018 0310 	ands.w	r3, r8, #16
 800f1bc:	bf18      	it	ne
 800f1be:	236a      	movne	r3, #106	; 0x6a
 800f1c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f570 <_strtod_l+0x970>
 800f1c4:	9304      	str	r3, [sp, #16]
 800f1c6:	4650      	mov	r0, sl
 800f1c8:	4659      	mov	r1, fp
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f018 0f01 	tst.w	r8, #1
 800f1d0:	d004      	beq.n	800f1dc <_strtod_l+0x5dc>
 800f1d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f1d6:	f7f1 fa27 	bl	8000628 <__aeabi_dmul>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f1e0:	f109 0908 	add.w	r9, r9, #8
 800f1e4:	d1f2      	bne.n	800f1cc <_strtod_l+0x5cc>
 800f1e6:	b10b      	cbz	r3, 800f1ec <_strtod_l+0x5ec>
 800f1e8:	4682      	mov	sl, r0
 800f1ea:	468b      	mov	fp, r1
 800f1ec:	9b04      	ldr	r3, [sp, #16]
 800f1ee:	b1c3      	cbz	r3, 800f222 <_strtod_l+0x622>
 800f1f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f1f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	4659      	mov	r1, fp
 800f1fc:	dd11      	ble.n	800f222 <_strtod_l+0x622>
 800f1fe:	2b1f      	cmp	r3, #31
 800f200:	f340 8124 	ble.w	800f44c <_strtod_l+0x84c>
 800f204:	2b34      	cmp	r3, #52	; 0x34
 800f206:	bfde      	ittt	le
 800f208:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f20c:	f04f 33ff 	movle.w	r3, #4294967295
 800f210:	fa03 f202 	lslle.w	r2, r3, r2
 800f214:	f04f 0a00 	mov.w	sl, #0
 800f218:	bfcc      	ite	gt
 800f21a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f21e:	ea02 0b01 	andle.w	fp, r2, r1
 800f222:	2200      	movs	r2, #0
 800f224:	2300      	movs	r3, #0
 800f226:	4650      	mov	r0, sl
 800f228:	4659      	mov	r1, fp
 800f22a:	f7f1 fc65 	bl	8000af8 <__aeabi_dcmpeq>
 800f22e:	2800      	cmp	r0, #0
 800f230:	d1a2      	bne.n	800f178 <_strtod_l+0x578>
 800f232:	9b07      	ldr	r3, [sp, #28]
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	9908      	ldr	r1, [sp, #32]
 800f238:	462b      	mov	r3, r5
 800f23a:	463a      	mov	r2, r7
 800f23c:	4620      	mov	r0, r4
 800f23e:	f002 f997 	bl	8011570 <__s2b>
 800f242:	9007      	str	r0, [sp, #28]
 800f244:	2800      	cmp	r0, #0
 800f246:	f43f af1f 	beq.w	800f088 <_strtod_l+0x488>
 800f24a:	9b05      	ldr	r3, [sp, #20]
 800f24c:	1b9e      	subs	r6, r3, r6
 800f24e:	9b06      	ldr	r3, [sp, #24]
 800f250:	2b00      	cmp	r3, #0
 800f252:	bfb4      	ite	lt
 800f254:	4633      	movlt	r3, r6
 800f256:	2300      	movge	r3, #0
 800f258:	930c      	str	r3, [sp, #48]	; 0x30
 800f25a:	9b06      	ldr	r3, [sp, #24]
 800f25c:	2500      	movs	r5, #0
 800f25e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f262:	9312      	str	r3, [sp, #72]	; 0x48
 800f264:	462e      	mov	r6, r5
 800f266:	9b07      	ldr	r3, [sp, #28]
 800f268:	4620      	mov	r0, r4
 800f26a:	6859      	ldr	r1, [r3, #4]
 800f26c:	f002 f8d8 	bl	8011420 <_Balloc>
 800f270:	9005      	str	r0, [sp, #20]
 800f272:	2800      	cmp	r0, #0
 800f274:	f43f af0c 	beq.w	800f090 <_strtod_l+0x490>
 800f278:	9b07      	ldr	r3, [sp, #28]
 800f27a:	691a      	ldr	r2, [r3, #16]
 800f27c:	3202      	adds	r2, #2
 800f27e:	f103 010c 	add.w	r1, r3, #12
 800f282:	0092      	lsls	r2, r2, #2
 800f284:	300c      	adds	r0, #12
 800f286:	f002 f8b1 	bl	80113ec <memcpy>
 800f28a:	ec4b ab10 	vmov	d0, sl, fp
 800f28e:	aa1a      	add	r2, sp, #104	; 0x68
 800f290:	a919      	add	r1, sp, #100	; 0x64
 800f292:	4620      	mov	r0, r4
 800f294:	f002 fcb2 	bl	8011bfc <__d2b>
 800f298:	ec4b ab18 	vmov	d8, sl, fp
 800f29c:	9018      	str	r0, [sp, #96]	; 0x60
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f43f aef6 	beq.w	800f090 <_strtod_l+0x490>
 800f2a4:	2101      	movs	r1, #1
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f002 f9fc 	bl	80116a4 <__i2b>
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	f43f aeee 	beq.w	800f090 <_strtod_l+0x490>
 800f2b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2b6:	9904      	ldr	r1, [sp, #16]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bfab      	itete	ge
 800f2bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f2be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f2c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f2c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f2c6:	bfac      	ite	ge
 800f2c8:	eb03 0902 	addge.w	r9, r3, r2
 800f2cc:	1ad7      	sublt	r7, r2, r3
 800f2ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f2d0:	eba3 0801 	sub.w	r8, r3, r1
 800f2d4:	4490      	add	r8, r2
 800f2d6:	4ba1      	ldr	r3, [pc, #644]	; (800f55c <_strtod_l+0x95c>)
 800f2d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2dc:	4598      	cmp	r8, r3
 800f2de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2e2:	f280 80c7 	bge.w	800f474 <_strtod_l+0x874>
 800f2e6:	eba3 0308 	sub.w	r3, r3, r8
 800f2ea:	2b1f      	cmp	r3, #31
 800f2ec:	eba2 0203 	sub.w	r2, r2, r3
 800f2f0:	f04f 0101 	mov.w	r1, #1
 800f2f4:	f300 80b1 	bgt.w	800f45a <_strtod_l+0x85a>
 800f2f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2fc:	930d      	str	r3, [sp, #52]	; 0x34
 800f2fe:	2300      	movs	r3, #0
 800f300:	9308      	str	r3, [sp, #32]
 800f302:	eb09 0802 	add.w	r8, r9, r2
 800f306:	9b04      	ldr	r3, [sp, #16]
 800f308:	45c1      	cmp	r9, r8
 800f30a:	4417      	add	r7, r2
 800f30c:	441f      	add	r7, r3
 800f30e:	464b      	mov	r3, r9
 800f310:	bfa8      	it	ge
 800f312:	4643      	movge	r3, r8
 800f314:	42bb      	cmp	r3, r7
 800f316:	bfa8      	it	ge
 800f318:	463b      	movge	r3, r7
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bfc2      	ittt	gt
 800f31e:	eba8 0803 	subgt.w	r8, r8, r3
 800f322:	1aff      	subgt	r7, r7, r3
 800f324:	eba9 0903 	subgt.w	r9, r9, r3
 800f328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dd17      	ble.n	800f35e <_strtod_l+0x75e>
 800f32e:	4631      	mov	r1, r6
 800f330:	461a      	mov	r2, r3
 800f332:	4620      	mov	r0, r4
 800f334:	f002 fa76 	bl	8011824 <__pow5mult>
 800f338:	4606      	mov	r6, r0
 800f33a:	2800      	cmp	r0, #0
 800f33c:	f43f aea8 	beq.w	800f090 <_strtod_l+0x490>
 800f340:	4601      	mov	r1, r0
 800f342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f344:	4620      	mov	r0, r4
 800f346:	f002 f9c3 	bl	80116d0 <__multiply>
 800f34a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f34c:	2800      	cmp	r0, #0
 800f34e:	f43f ae9f 	beq.w	800f090 <_strtod_l+0x490>
 800f352:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f354:	4620      	mov	r0, r4
 800f356:	f002 f8a3 	bl	80114a0 <_Bfree>
 800f35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f35c:	9318      	str	r3, [sp, #96]	; 0x60
 800f35e:	f1b8 0f00 	cmp.w	r8, #0
 800f362:	f300 808c 	bgt.w	800f47e <_strtod_l+0x87e>
 800f366:	9b06      	ldr	r3, [sp, #24]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	dd08      	ble.n	800f37e <_strtod_l+0x77e>
 800f36c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f36e:	9905      	ldr	r1, [sp, #20]
 800f370:	4620      	mov	r0, r4
 800f372:	f002 fa57 	bl	8011824 <__pow5mult>
 800f376:	9005      	str	r0, [sp, #20]
 800f378:	2800      	cmp	r0, #0
 800f37a:	f43f ae89 	beq.w	800f090 <_strtod_l+0x490>
 800f37e:	2f00      	cmp	r7, #0
 800f380:	dd08      	ble.n	800f394 <_strtod_l+0x794>
 800f382:	9905      	ldr	r1, [sp, #20]
 800f384:	463a      	mov	r2, r7
 800f386:	4620      	mov	r0, r4
 800f388:	f002 faa6 	bl	80118d8 <__lshift>
 800f38c:	9005      	str	r0, [sp, #20]
 800f38e:	2800      	cmp	r0, #0
 800f390:	f43f ae7e 	beq.w	800f090 <_strtod_l+0x490>
 800f394:	f1b9 0f00 	cmp.w	r9, #0
 800f398:	dd08      	ble.n	800f3ac <_strtod_l+0x7ac>
 800f39a:	4631      	mov	r1, r6
 800f39c:	464a      	mov	r2, r9
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f002 fa9a 	bl	80118d8 <__lshift>
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f43f ae72 	beq.w	800f090 <_strtod_l+0x490>
 800f3ac:	9a05      	ldr	r2, [sp, #20]
 800f3ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f002 fb1d 	bl	80119f0 <__mdiff>
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f43f ae69 	beq.w	800f090 <_strtod_l+0x490>
 800f3be:	68c3      	ldr	r3, [r0, #12]
 800f3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60c3      	str	r3, [r0, #12]
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	f002 faf6 	bl	80119b8 <__mcmp>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	da60      	bge.n	800f492 <_strtod_l+0x892>
 800f3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3d2:	ea53 030a 	orrs.w	r3, r3, sl
 800f3d6:	f040 8082 	bne.w	800f4de <_strtod_l+0x8de>
 800f3da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d17d      	bne.n	800f4de <_strtod_l+0x8de>
 800f3e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f3e6:	0d1b      	lsrs	r3, r3, #20
 800f3e8:	051b      	lsls	r3, r3, #20
 800f3ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3ee:	d976      	bls.n	800f4de <_strtod_l+0x8de>
 800f3f0:	696b      	ldr	r3, [r5, #20]
 800f3f2:	b913      	cbnz	r3, 800f3fa <_strtod_l+0x7fa>
 800f3f4:	692b      	ldr	r3, [r5, #16]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	dd71      	ble.n	800f4de <_strtod_l+0x8de>
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	4620      	mov	r0, r4
 800f400:	f002 fa6a 	bl	80118d8 <__lshift>
 800f404:	4631      	mov	r1, r6
 800f406:	4605      	mov	r5, r0
 800f408:	f002 fad6 	bl	80119b8 <__mcmp>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	dd66      	ble.n	800f4de <_strtod_l+0x8de>
 800f410:	9904      	ldr	r1, [sp, #16]
 800f412:	4a53      	ldr	r2, [pc, #332]	; (800f560 <_strtod_l+0x960>)
 800f414:	465b      	mov	r3, fp
 800f416:	2900      	cmp	r1, #0
 800f418:	f000 8081 	beq.w	800f51e <_strtod_l+0x91e>
 800f41c:	ea02 010b 	and.w	r1, r2, fp
 800f420:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f424:	dc7b      	bgt.n	800f51e <_strtod_l+0x91e>
 800f426:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f42a:	f77f aea9 	ble.w	800f180 <_strtod_l+0x580>
 800f42e:	4b4d      	ldr	r3, [pc, #308]	; (800f564 <_strtod_l+0x964>)
 800f430:	4650      	mov	r0, sl
 800f432:	4659      	mov	r1, fp
 800f434:	2200      	movs	r2, #0
 800f436:	f7f1 f8f7 	bl	8000628 <__aeabi_dmul>
 800f43a:	460b      	mov	r3, r1
 800f43c:	4303      	orrs	r3, r0
 800f43e:	bf08      	it	eq
 800f440:	2322      	moveq	r3, #34	; 0x22
 800f442:	4682      	mov	sl, r0
 800f444:	468b      	mov	fp, r1
 800f446:	bf08      	it	eq
 800f448:	6023      	streq	r3, [r4, #0]
 800f44a:	e62b      	b.n	800f0a4 <_strtod_l+0x4a4>
 800f44c:	f04f 32ff 	mov.w	r2, #4294967295
 800f450:	fa02 f303 	lsl.w	r3, r2, r3
 800f454:	ea03 0a0a 	and.w	sl, r3, sl
 800f458:	e6e3      	b.n	800f222 <_strtod_l+0x622>
 800f45a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f45e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f462:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f466:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f46a:	fa01 f308 	lsl.w	r3, r1, r8
 800f46e:	9308      	str	r3, [sp, #32]
 800f470:	910d      	str	r1, [sp, #52]	; 0x34
 800f472:	e746      	b.n	800f302 <_strtod_l+0x702>
 800f474:	2300      	movs	r3, #0
 800f476:	9308      	str	r3, [sp, #32]
 800f478:	2301      	movs	r3, #1
 800f47a:	930d      	str	r3, [sp, #52]	; 0x34
 800f47c:	e741      	b.n	800f302 <_strtod_l+0x702>
 800f47e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f480:	4642      	mov	r2, r8
 800f482:	4620      	mov	r0, r4
 800f484:	f002 fa28 	bl	80118d8 <__lshift>
 800f488:	9018      	str	r0, [sp, #96]	; 0x60
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f47f af6b 	bne.w	800f366 <_strtod_l+0x766>
 800f490:	e5fe      	b.n	800f090 <_strtod_l+0x490>
 800f492:	465f      	mov	r7, fp
 800f494:	d16e      	bne.n	800f574 <_strtod_l+0x974>
 800f496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f49c:	b342      	cbz	r2, 800f4f0 <_strtod_l+0x8f0>
 800f49e:	4a32      	ldr	r2, [pc, #200]	; (800f568 <_strtod_l+0x968>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d128      	bne.n	800f4f6 <_strtod_l+0x8f6>
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	4651      	mov	r1, sl
 800f4a8:	b1eb      	cbz	r3, 800f4e6 <_strtod_l+0x8e6>
 800f4aa:	4b2d      	ldr	r3, [pc, #180]	; (800f560 <_strtod_l+0x960>)
 800f4ac:	403b      	ands	r3, r7
 800f4ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b6:	d819      	bhi.n	800f4ec <_strtod_l+0x8ec>
 800f4b8:	0d1b      	lsrs	r3, r3, #20
 800f4ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f4be:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c2:	4299      	cmp	r1, r3
 800f4c4:	d117      	bne.n	800f4f6 <_strtod_l+0x8f6>
 800f4c6:	4b29      	ldr	r3, [pc, #164]	; (800f56c <_strtod_l+0x96c>)
 800f4c8:	429f      	cmp	r7, r3
 800f4ca:	d102      	bne.n	800f4d2 <_strtod_l+0x8d2>
 800f4cc:	3101      	adds	r1, #1
 800f4ce:	f43f addf 	beq.w	800f090 <_strtod_l+0x490>
 800f4d2:	4b23      	ldr	r3, [pc, #140]	; (800f560 <_strtod_l+0x960>)
 800f4d4:	403b      	ands	r3, r7
 800f4d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f4da:	f04f 0a00 	mov.w	sl, #0
 800f4de:	9b04      	ldr	r3, [sp, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1a4      	bne.n	800f42e <_strtod_l+0x82e>
 800f4e4:	e5de      	b.n	800f0a4 <_strtod_l+0x4a4>
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	e7ea      	b.n	800f4c2 <_strtod_l+0x8c2>
 800f4ec:	4613      	mov	r3, r2
 800f4ee:	e7e8      	b.n	800f4c2 <_strtod_l+0x8c2>
 800f4f0:	ea53 030a 	orrs.w	r3, r3, sl
 800f4f4:	d08c      	beq.n	800f410 <_strtod_l+0x810>
 800f4f6:	9b08      	ldr	r3, [sp, #32]
 800f4f8:	b1db      	cbz	r3, 800f532 <_strtod_l+0x932>
 800f4fa:	423b      	tst	r3, r7
 800f4fc:	d0ef      	beq.n	800f4de <_strtod_l+0x8de>
 800f4fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f500:	9a04      	ldr	r2, [sp, #16]
 800f502:	4650      	mov	r0, sl
 800f504:	4659      	mov	r1, fp
 800f506:	b1c3      	cbz	r3, 800f53a <_strtod_l+0x93a>
 800f508:	f7ff fb5e 	bl	800ebc8 <sulp>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	ec51 0b18 	vmov	r0, r1, d8
 800f514:	f7f0 fed2 	bl	80002bc <__adddf3>
 800f518:	4682      	mov	sl, r0
 800f51a:	468b      	mov	fp, r1
 800f51c:	e7df      	b.n	800f4de <_strtod_l+0x8de>
 800f51e:	4013      	ands	r3, r2
 800f520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f524:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f52c:	f04f 3aff 	mov.w	sl, #4294967295
 800f530:	e7d5      	b.n	800f4de <_strtod_l+0x8de>
 800f532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f534:	ea13 0f0a 	tst.w	r3, sl
 800f538:	e7e0      	b.n	800f4fc <_strtod_l+0x8fc>
 800f53a:	f7ff fb45 	bl	800ebc8 <sulp>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	ec51 0b18 	vmov	r0, r1, d8
 800f546:	f7f0 feb7 	bl	80002b8 <__aeabi_dsub>
 800f54a:	2200      	movs	r2, #0
 800f54c:	2300      	movs	r3, #0
 800f54e:	4682      	mov	sl, r0
 800f550:	468b      	mov	fp, r1
 800f552:	f7f1 fad1 	bl	8000af8 <__aeabi_dcmpeq>
 800f556:	2800      	cmp	r0, #0
 800f558:	d0c1      	beq.n	800f4de <_strtod_l+0x8de>
 800f55a:	e611      	b.n	800f180 <_strtod_l+0x580>
 800f55c:	fffffc02 	.word	0xfffffc02
 800f560:	7ff00000 	.word	0x7ff00000
 800f564:	39500000 	.word	0x39500000
 800f568:	000fffff 	.word	0x000fffff
 800f56c:	7fefffff 	.word	0x7fefffff
 800f570:	08020090 	.word	0x08020090
 800f574:	4631      	mov	r1, r6
 800f576:	4628      	mov	r0, r5
 800f578:	f002 fb9c 	bl	8011cb4 <__ratio>
 800f57c:	ec59 8b10 	vmov	r8, r9, d0
 800f580:	ee10 0a10 	vmov	r0, s0
 800f584:	2200      	movs	r2, #0
 800f586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f58a:	4649      	mov	r1, r9
 800f58c:	f7f1 fac8 	bl	8000b20 <__aeabi_dcmple>
 800f590:	2800      	cmp	r0, #0
 800f592:	d07a      	beq.n	800f68a <_strtod_l+0xa8a>
 800f594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d04a      	beq.n	800f630 <_strtod_l+0xa30>
 800f59a:	4b95      	ldr	r3, [pc, #596]	; (800f7f0 <_strtod_l+0xbf0>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f5a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f7f0 <_strtod_l+0xbf0>
 800f5a6:	f04f 0800 	mov.w	r8, #0
 800f5aa:	4b92      	ldr	r3, [pc, #584]	; (800f7f4 <_strtod_l+0xbf4>)
 800f5ac:	403b      	ands	r3, r7
 800f5ae:	930d      	str	r3, [sp, #52]	; 0x34
 800f5b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5b2:	4b91      	ldr	r3, [pc, #580]	; (800f7f8 <_strtod_l+0xbf8>)
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	f040 80b0 	bne.w	800f71a <_strtod_l+0xb1a>
 800f5ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f5c2:	ec4b ab10 	vmov	d0, sl, fp
 800f5c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f5ca:	f002 fa9b 	bl	8011b04 <__ulp>
 800f5ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5d2:	ec53 2b10 	vmov	r2, r3, d0
 800f5d6:	f7f1 f827 	bl	8000628 <__aeabi_dmul>
 800f5da:	4652      	mov	r2, sl
 800f5dc:	465b      	mov	r3, fp
 800f5de:	f7f0 fe6d 	bl	80002bc <__adddf3>
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4983      	ldr	r1, [pc, #524]	; (800f7f4 <_strtod_l+0xbf4>)
 800f5e6:	4a85      	ldr	r2, [pc, #532]	; (800f7fc <_strtod_l+0xbfc>)
 800f5e8:	4019      	ands	r1, r3
 800f5ea:	4291      	cmp	r1, r2
 800f5ec:	4682      	mov	sl, r0
 800f5ee:	d960      	bls.n	800f6b2 <_strtod_l+0xab2>
 800f5f0:	ee18 3a90 	vmov	r3, s17
 800f5f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d104      	bne.n	800f606 <_strtod_l+0xa06>
 800f5fc:	ee18 3a10 	vmov	r3, s16
 800f600:	3301      	adds	r3, #1
 800f602:	f43f ad45 	beq.w	800f090 <_strtod_l+0x490>
 800f606:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f808 <_strtod_l+0xc08>
 800f60a:	f04f 3aff 	mov.w	sl, #4294967295
 800f60e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f610:	4620      	mov	r0, r4
 800f612:	f001 ff45 	bl	80114a0 <_Bfree>
 800f616:	9905      	ldr	r1, [sp, #20]
 800f618:	4620      	mov	r0, r4
 800f61a:	f001 ff41 	bl	80114a0 <_Bfree>
 800f61e:	4631      	mov	r1, r6
 800f620:	4620      	mov	r0, r4
 800f622:	f001 ff3d 	bl	80114a0 <_Bfree>
 800f626:	4629      	mov	r1, r5
 800f628:	4620      	mov	r0, r4
 800f62a:	f001 ff39 	bl	80114a0 <_Bfree>
 800f62e:	e61a      	b.n	800f266 <_strtod_l+0x666>
 800f630:	f1ba 0f00 	cmp.w	sl, #0
 800f634:	d11b      	bne.n	800f66e <_strtod_l+0xa6e>
 800f636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f63a:	b9f3      	cbnz	r3, 800f67a <_strtod_l+0xa7a>
 800f63c:	4b6c      	ldr	r3, [pc, #432]	; (800f7f0 <_strtod_l+0xbf0>)
 800f63e:	2200      	movs	r2, #0
 800f640:	4640      	mov	r0, r8
 800f642:	4649      	mov	r1, r9
 800f644:	f7f1 fa62 	bl	8000b0c <__aeabi_dcmplt>
 800f648:	b9d0      	cbnz	r0, 800f680 <_strtod_l+0xa80>
 800f64a:	4640      	mov	r0, r8
 800f64c:	4649      	mov	r1, r9
 800f64e:	4b6c      	ldr	r3, [pc, #432]	; (800f800 <_strtod_l+0xc00>)
 800f650:	2200      	movs	r2, #0
 800f652:	f7f0 ffe9 	bl	8000628 <__aeabi_dmul>
 800f656:	4680      	mov	r8, r0
 800f658:	4689      	mov	r9, r1
 800f65a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f65e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f662:	9315      	str	r3, [sp, #84]	; 0x54
 800f664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f668:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f66c:	e79d      	b.n	800f5aa <_strtod_l+0x9aa>
 800f66e:	f1ba 0f01 	cmp.w	sl, #1
 800f672:	d102      	bne.n	800f67a <_strtod_l+0xa7a>
 800f674:	2f00      	cmp	r7, #0
 800f676:	f43f ad83 	beq.w	800f180 <_strtod_l+0x580>
 800f67a:	4b62      	ldr	r3, [pc, #392]	; (800f804 <_strtod_l+0xc04>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	e78e      	b.n	800f59e <_strtod_l+0x99e>
 800f680:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f800 <_strtod_l+0xc00>
 800f684:	f04f 0800 	mov.w	r8, #0
 800f688:	e7e7      	b.n	800f65a <_strtod_l+0xa5a>
 800f68a:	4b5d      	ldr	r3, [pc, #372]	; (800f800 <_strtod_l+0xc00>)
 800f68c:	4640      	mov	r0, r8
 800f68e:	4649      	mov	r1, r9
 800f690:	2200      	movs	r2, #0
 800f692:	f7f0 ffc9 	bl	8000628 <__aeabi_dmul>
 800f696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f698:	4680      	mov	r8, r0
 800f69a:	4689      	mov	r9, r1
 800f69c:	b933      	cbnz	r3, 800f6ac <_strtod_l+0xaac>
 800f69e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6a2:	900e      	str	r0, [sp, #56]	; 0x38
 800f6a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f6aa:	e7dd      	b.n	800f668 <_strtod_l+0xa68>
 800f6ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f6b0:	e7f9      	b.n	800f6a6 <_strtod_l+0xaa6>
 800f6b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f6b6:	9b04      	ldr	r3, [sp, #16]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1a8      	bne.n	800f60e <_strtod_l+0xa0e>
 800f6bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6c2:	0d1b      	lsrs	r3, r3, #20
 800f6c4:	051b      	lsls	r3, r3, #20
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d1a1      	bne.n	800f60e <_strtod_l+0xa0e>
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	f7f1 fb0b 	bl	8000ce8 <__aeabi_d2lz>
 800f6d2:	f7f0 ff7b 	bl	80005cc <__aeabi_l2d>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	460b      	mov	r3, r1
 800f6da:	4640      	mov	r0, r8
 800f6dc:	4649      	mov	r1, r9
 800f6de:	f7f0 fdeb 	bl	80002b8 <__aeabi_dsub>
 800f6e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f6e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6e8:	ea43 030a 	orr.w	r3, r3, sl
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	4680      	mov	r8, r0
 800f6f0:	4689      	mov	r9, r1
 800f6f2:	d055      	beq.n	800f7a0 <_strtod_l+0xba0>
 800f6f4:	a336      	add	r3, pc, #216	; (adr r3, 800f7d0 <_strtod_l+0xbd0>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	f7f1 fa07 	bl	8000b0c <__aeabi_dcmplt>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f47f acd0 	bne.w	800f0a4 <_strtod_l+0x4a4>
 800f704:	a334      	add	r3, pc, #208	; (adr r3, 800f7d8 <_strtod_l+0xbd8>)
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	4640      	mov	r0, r8
 800f70c:	4649      	mov	r1, r9
 800f70e:	f7f1 fa1b 	bl	8000b48 <__aeabi_dcmpgt>
 800f712:	2800      	cmp	r0, #0
 800f714:	f43f af7b 	beq.w	800f60e <_strtod_l+0xa0e>
 800f718:	e4c4      	b.n	800f0a4 <_strtod_l+0x4a4>
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	b333      	cbz	r3, 800f76c <_strtod_l+0xb6c>
 800f71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f720:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f724:	d822      	bhi.n	800f76c <_strtod_l+0xb6c>
 800f726:	a32e      	add	r3, pc, #184	; (adr r3, 800f7e0 <_strtod_l+0xbe0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	4640      	mov	r0, r8
 800f72e:	4649      	mov	r1, r9
 800f730:	f7f1 f9f6 	bl	8000b20 <__aeabi_dcmple>
 800f734:	b1a0      	cbz	r0, 800f760 <_strtod_l+0xb60>
 800f736:	4649      	mov	r1, r9
 800f738:	4640      	mov	r0, r8
 800f73a:	f7f1 fa4d 	bl	8000bd8 <__aeabi_d2uiz>
 800f73e:	2801      	cmp	r0, #1
 800f740:	bf38      	it	cc
 800f742:	2001      	movcc	r0, #1
 800f744:	f7f0 fef6 	bl	8000534 <__aeabi_ui2d>
 800f748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f74a:	4680      	mov	r8, r0
 800f74c:	4689      	mov	r9, r1
 800f74e:	bb23      	cbnz	r3, 800f79a <_strtod_l+0xb9a>
 800f750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f754:	9010      	str	r0, [sp, #64]	; 0x40
 800f756:	9311      	str	r3, [sp, #68]	; 0x44
 800f758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f75c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f764:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f768:	1a9b      	subs	r3, r3, r2
 800f76a:	9309      	str	r3, [sp, #36]	; 0x24
 800f76c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f770:	eeb0 0a48 	vmov.f32	s0, s16
 800f774:	eef0 0a68 	vmov.f32	s1, s17
 800f778:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f77c:	f002 f9c2 	bl	8011b04 <__ulp>
 800f780:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f784:	ec53 2b10 	vmov	r2, r3, d0
 800f788:	f7f0 ff4e 	bl	8000628 <__aeabi_dmul>
 800f78c:	ec53 2b18 	vmov	r2, r3, d8
 800f790:	f7f0 fd94 	bl	80002bc <__adddf3>
 800f794:	4682      	mov	sl, r0
 800f796:	468b      	mov	fp, r1
 800f798:	e78d      	b.n	800f6b6 <_strtod_l+0xab6>
 800f79a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f79e:	e7db      	b.n	800f758 <_strtod_l+0xb58>
 800f7a0:	a311      	add	r3, pc, #68	; (adr r3, 800f7e8 <_strtod_l+0xbe8>)
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	f7f1 f9b1 	bl	8000b0c <__aeabi_dcmplt>
 800f7aa:	e7b2      	b.n	800f712 <_strtod_l+0xb12>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f7b4:	6013      	str	r3, [r2, #0]
 800f7b6:	f7ff ba6b 	b.w	800ec90 <_strtod_l+0x90>
 800f7ba:	2a65      	cmp	r2, #101	; 0x65
 800f7bc:	f43f ab5f 	beq.w	800ee7e <_strtod_l+0x27e>
 800f7c0:	2a45      	cmp	r2, #69	; 0x45
 800f7c2:	f43f ab5c 	beq.w	800ee7e <_strtod_l+0x27e>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f7ff bb94 	b.w	800eef4 <_strtod_l+0x2f4>
 800f7cc:	f3af 8000 	nop.w
 800f7d0:	94a03595 	.word	0x94a03595
 800f7d4:	3fdfffff 	.word	0x3fdfffff
 800f7d8:	35afe535 	.word	0x35afe535
 800f7dc:	3fe00000 	.word	0x3fe00000
 800f7e0:	ffc00000 	.word	0xffc00000
 800f7e4:	41dfffff 	.word	0x41dfffff
 800f7e8:	94a03595 	.word	0x94a03595
 800f7ec:	3fcfffff 	.word	0x3fcfffff
 800f7f0:	3ff00000 	.word	0x3ff00000
 800f7f4:	7ff00000 	.word	0x7ff00000
 800f7f8:	7fe00000 	.word	0x7fe00000
 800f7fc:	7c9fffff 	.word	0x7c9fffff
 800f800:	3fe00000 	.word	0x3fe00000
 800f804:	bff00000 	.word	0xbff00000
 800f808:	7fefffff 	.word	0x7fefffff

0800f80c <strtof>:
 800f80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f810:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800f8c0 <strtof+0xb4>
 800f814:	4b26      	ldr	r3, [pc, #152]	; (800f8b0 <strtof+0xa4>)
 800f816:	460a      	mov	r2, r1
 800f818:	ed2d 8b02 	vpush	{d8}
 800f81c:	4601      	mov	r1, r0
 800f81e:	f8d8 0000 	ldr.w	r0, [r8]
 800f822:	f7ff f9ed 	bl	800ec00 <_strtod_l>
 800f826:	ec55 4b10 	vmov	r4, r5, d0
 800f82a:	ee10 2a10 	vmov	r2, s0
 800f82e:	ee10 0a10 	vmov	r0, s0
 800f832:	462b      	mov	r3, r5
 800f834:	4629      	mov	r1, r5
 800f836:	f7f1 f991 	bl	8000b5c <__aeabi_dcmpun>
 800f83a:	b190      	cbz	r0, 800f862 <strtof+0x56>
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	481d      	ldr	r0, [pc, #116]	; (800f8b4 <strtof+0xa8>)
 800f840:	da09      	bge.n	800f856 <strtof+0x4a>
 800f842:	f002 fc29 	bl	8012098 <nanf>
 800f846:	eeb1 8a40 	vneg.f32	s16, s0
 800f84a:	eeb0 0a48 	vmov.f32	s0, s16
 800f84e:	ecbd 8b02 	vpop	{d8}
 800f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f856:	ecbd 8b02 	vpop	{d8}
 800f85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f85e:	f002 bc1b 	b.w	8012098 <nanf>
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f1 f9d7 	bl	8000c18 <__aeabi_d2f>
 800f86a:	ee08 0a10 	vmov	s16, r0
 800f86e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f8b8 <strtof+0xac>
 800f872:	eeb0 7ac8 	vabs.f32	s14, s16
 800f876:	eeb4 7a67 	vcmp.f32	s14, s15
 800f87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87e:	dde4      	ble.n	800f84a <strtof+0x3e>
 800f880:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800f884:	4b0d      	ldr	r3, [pc, #52]	; (800f8bc <strtof+0xb0>)
 800f886:	f04f 32ff 	mov.w	r2, #4294967295
 800f88a:	4620      	mov	r0, r4
 800f88c:	4639      	mov	r1, r7
 800f88e:	f7f1 f965 	bl	8000b5c <__aeabi_dcmpun>
 800f892:	b940      	cbnz	r0, 800f8a6 <strtof+0x9a>
 800f894:	4b09      	ldr	r3, [pc, #36]	; (800f8bc <strtof+0xb0>)
 800f896:	f04f 32ff 	mov.w	r2, #4294967295
 800f89a:	4620      	mov	r0, r4
 800f89c:	4639      	mov	r1, r7
 800f89e:	f7f1 f93f 	bl	8000b20 <__aeabi_dcmple>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d0d1      	beq.n	800f84a <strtof+0x3e>
 800f8a6:	f8d8 3000 	ldr.w	r3, [r8]
 800f8aa:	2222      	movs	r2, #34	; 0x22
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	e7cc      	b.n	800f84a <strtof+0x3e>
 800f8b0:	20000130 	.word	0x20000130
 800f8b4:	080204d0 	.word	0x080204d0
 800f8b8:	7f7fffff 	.word	0x7f7fffff
 800f8bc:	7fefffff 	.word	0x7fefffff
 800f8c0:	200000c8 	.word	0x200000c8

0800f8c4 <_strtoul_l.constprop.0>:
 800f8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	4f36      	ldr	r7, [pc, #216]	; (800f9a4 <_strtoul_l.constprop.0+0xe0>)
 800f8ca:	4686      	mov	lr, r0
 800f8cc:	460d      	mov	r5, r1
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8d4:	5de6      	ldrb	r6, [r4, r7]
 800f8d6:	f016 0608 	ands.w	r6, r6, #8
 800f8da:	d1f8      	bne.n	800f8ce <_strtoul_l.constprop.0+0xa>
 800f8dc:	2c2d      	cmp	r4, #45	; 0x2d
 800f8de:	d12f      	bne.n	800f940 <_strtoul_l.constprop.0+0x7c>
 800f8e0:	782c      	ldrb	r4, [r5, #0]
 800f8e2:	2601      	movs	r6, #1
 800f8e4:	1c85      	adds	r5, r0, #2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d057      	beq.n	800f99a <_strtoul_l.constprop.0+0xd6>
 800f8ea:	2b10      	cmp	r3, #16
 800f8ec:	d109      	bne.n	800f902 <_strtoul_l.constprop.0+0x3e>
 800f8ee:	2c30      	cmp	r4, #48	; 0x30
 800f8f0:	d107      	bne.n	800f902 <_strtoul_l.constprop.0+0x3e>
 800f8f2:	7828      	ldrb	r0, [r5, #0]
 800f8f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f8f8:	2858      	cmp	r0, #88	; 0x58
 800f8fa:	d149      	bne.n	800f990 <_strtoul_l.constprop.0+0xcc>
 800f8fc:	786c      	ldrb	r4, [r5, #1]
 800f8fe:	2310      	movs	r3, #16
 800f900:	3502      	adds	r5, #2
 800f902:	f04f 38ff 	mov.w	r8, #4294967295
 800f906:	2700      	movs	r7, #0
 800f908:	fbb8 f8f3 	udiv	r8, r8, r3
 800f90c:	fb03 f908 	mul.w	r9, r3, r8
 800f910:	ea6f 0909 	mvn.w	r9, r9
 800f914:	4638      	mov	r0, r7
 800f916:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f91a:	f1bc 0f09 	cmp.w	ip, #9
 800f91e:	d814      	bhi.n	800f94a <_strtoul_l.constprop.0+0x86>
 800f920:	4664      	mov	r4, ip
 800f922:	42a3      	cmp	r3, r4
 800f924:	dd22      	ble.n	800f96c <_strtoul_l.constprop.0+0xa8>
 800f926:	2f00      	cmp	r7, #0
 800f928:	db1d      	blt.n	800f966 <_strtoul_l.constprop.0+0xa2>
 800f92a:	4580      	cmp	r8, r0
 800f92c:	d31b      	bcc.n	800f966 <_strtoul_l.constprop.0+0xa2>
 800f92e:	d101      	bne.n	800f934 <_strtoul_l.constprop.0+0x70>
 800f930:	45a1      	cmp	r9, r4
 800f932:	db18      	blt.n	800f966 <_strtoul_l.constprop.0+0xa2>
 800f934:	fb00 4003 	mla	r0, r0, r3, r4
 800f938:	2701      	movs	r7, #1
 800f93a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f93e:	e7ea      	b.n	800f916 <_strtoul_l.constprop.0+0x52>
 800f940:	2c2b      	cmp	r4, #43	; 0x2b
 800f942:	bf04      	itt	eq
 800f944:	782c      	ldrbeq	r4, [r5, #0]
 800f946:	1c85      	addeq	r5, r0, #2
 800f948:	e7cd      	b.n	800f8e6 <_strtoul_l.constprop.0+0x22>
 800f94a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f94e:	f1bc 0f19 	cmp.w	ip, #25
 800f952:	d801      	bhi.n	800f958 <_strtoul_l.constprop.0+0x94>
 800f954:	3c37      	subs	r4, #55	; 0x37
 800f956:	e7e4      	b.n	800f922 <_strtoul_l.constprop.0+0x5e>
 800f958:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f95c:	f1bc 0f19 	cmp.w	ip, #25
 800f960:	d804      	bhi.n	800f96c <_strtoul_l.constprop.0+0xa8>
 800f962:	3c57      	subs	r4, #87	; 0x57
 800f964:	e7dd      	b.n	800f922 <_strtoul_l.constprop.0+0x5e>
 800f966:	f04f 37ff 	mov.w	r7, #4294967295
 800f96a:	e7e6      	b.n	800f93a <_strtoul_l.constprop.0+0x76>
 800f96c:	2f00      	cmp	r7, #0
 800f96e:	da07      	bge.n	800f980 <_strtoul_l.constprop.0+0xbc>
 800f970:	2322      	movs	r3, #34	; 0x22
 800f972:	f8ce 3000 	str.w	r3, [lr]
 800f976:	f04f 30ff 	mov.w	r0, #4294967295
 800f97a:	b932      	cbnz	r2, 800f98a <_strtoul_l.constprop.0+0xc6>
 800f97c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f980:	b106      	cbz	r6, 800f984 <_strtoul_l.constprop.0+0xc0>
 800f982:	4240      	negs	r0, r0
 800f984:	2a00      	cmp	r2, #0
 800f986:	d0f9      	beq.n	800f97c <_strtoul_l.constprop.0+0xb8>
 800f988:	b107      	cbz	r7, 800f98c <_strtoul_l.constprop.0+0xc8>
 800f98a:	1e69      	subs	r1, r5, #1
 800f98c:	6011      	str	r1, [r2, #0]
 800f98e:	e7f5      	b.n	800f97c <_strtoul_l.constprop.0+0xb8>
 800f990:	2430      	movs	r4, #48	; 0x30
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1b5      	bne.n	800f902 <_strtoul_l.constprop.0+0x3e>
 800f996:	2308      	movs	r3, #8
 800f998:	e7b3      	b.n	800f902 <_strtoul_l.constprop.0+0x3e>
 800f99a:	2c30      	cmp	r4, #48	; 0x30
 800f99c:	d0a9      	beq.n	800f8f2 <_strtoul_l.constprop.0+0x2e>
 800f99e:	230a      	movs	r3, #10
 800f9a0:	e7af      	b.n	800f902 <_strtoul_l.constprop.0+0x3e>
 800f9a2:	bf00      	nop
 800f9a4:	080200b9 	.word	0x080200b9

0800f9a8 <strtoul>:
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	460a      	mov	r2, r1
 800f9ac:	4601      	mov	r1, r0
 800f9ae:	4802      	ldr	r0, [pc, #8]	; (800f9b8 <strtoul+0x10>)
 800f9b0:	6800      	ldr	r0, [r0, #0]
 800f9b2:	f7ff bf87 	b.w	800f8c4 <_strtoul_l.constprop.0>
 800f9b6:	bf00      	nop
 800f9b8:	200000c8 	.word	0x200000c8

0800f9bc <_vsniprintf_r>:
 800f9bc:	b530      	push	{r4, r5, lr}
 800f9be:	4614      	mov	r4, r2
 800f9c0:	2c00      	cmp	r4, #0
 800f9c2:	b09b      	sub	sp, #108	; 0x6c
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	da05      	bge.n	800f9d6 <_vsniprintf_r+0x1a>
 800f9ca:	238b      	movs	r3, #139	; 0x8b
 800f9cc:	6003      	str	r3, [r0, #0]
 800f9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d2:	b01b      	add	sp, #108	; 0x6c
 800f9d4:	bd30      	pop	{r4, r5, pc}
 800f9d6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f9da:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9de:	bf14      	ite	ne
 800f9e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9e4:	4623      	moveq	r3, r4
 800f9e6:	9302      	str	r3, [sp, #8]
 800f9e8:	9305      	str	r3, [sp, #20]
 800f9ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9ee:	9100      	str	r1, [sp, #0]
 800f9f0:	9104      	str	r1, [sp, #16]
 800f9f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9f6:	4669      	mov	r1, sp
 800f9f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f9fa:	f002 fa43 	bl	8011e84 <_svfiprintf_r>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	bfbc      	itt	lt
 800fa02:	238b      	movlt	r3, #139	; 0x8b
 800fa04:	602b      	strlt	r3, [r5, #0]
 800fa06:	2c00      	cmp	r4, #0
 800fa08:	d0e3      	beq.n	800f9d2 <_vsniprintf_r+0x16>
 800fa0a:	9b00      	ldr	r3, [sp, #0]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
 800fa10:	e7df      	b.n	800f9d2 <_vsniprintf_r+0x16>
	...

0800fa14 <vsniprintf>:
 800fa14:	b507      	push	{r0, r1, r2, lr}
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	4613      	mov	r3, r2
 800fa1a:	460a      	mov	r2, r1
 800fa1c:	4601      	mov	r1, r0
 800fa1e:	4803      	ldr	r0, [pc, #12]	; (800fa2c <vsniprintf+0x18>)
 800fa20:	6800      	ldr	r0, [r0, #0]
 800fa22:	f7ff ffcb 	bl	800f9bc <_vsniprintf_r>
 800fa26:	b003      	add	sp, #12
 800fa28:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa2c:	200000c8 	.word	0x200000c8

0800fa30 <__swbuf_r>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	460e      	mov	r6, r1
 800fa34:	4614      	mov	r4, r2
 800fa36:	4605      	mov	r5, r0
 800fa38:	b118      	cbz	r0, 800fa42 <__swbuf_r+0x12>
 800fa3a:	6983      	ldr	r3, [r0, #24]
 800fa3c:	b90b      	cbnz	r3, 800fa42 <__swbuf_r+0x12>
 800fa3e:	f001 f84b 	bl	8010ad8 <__sinit>
 800fa42:	4b21      	ldr	r3, [pc, #132]	; (800fac8 <__swbuf_r+0x98>)
 800fa44:	429c      	cmp	r4, r3
 800fa46:	d12b      	bne.n	800faa0 <__swbuf_r+0x70>
 800fa48:	686c      	ldr	r4, [r5, #4]
 800fa4a:	69a3      	ldr	r3, [r4, #24]
 800fa4c:	60a3      	str	r3, [r4, #8]
 800fa4e:	89a3      	ldrh	r3, [r4, #12]
 800fa50:	071a      	lsls	r2, r3, #28
 800fa52:	d52f      	bpl.n	800fab4 <__swbuf_r+0x84>
 800fa54:	6923      	ldr	r3, [r4, #16]
 800fa56:	b36b      	cbz	r3, 800fab4 <__swbuf_r+0x84>
 800fa58:	6923      	ldr	r3, [r4, #16]
 800fa5a:	6820      	ldr	r0, [r4, #0]
 800fa5c:	1ac0      	subs	r0, r0, r3
 800fa5e:	6963      	ldr	r3, [r4, #20]
 800fa60:	b2f6      	uxtb	r6, r6
 800fa62:	4283      	cmp	r3, r0
 800fa64:	4637      	mov	r7, r6
 800fa66:	dc04      	bgt.n	800fa72 <__swbuf_r+0x42>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f000 ffa0 	bl	80109b0 <_fflush_r>
 800fa70:	bb30      	cbnz	r0, 800fac0 <__swbuf_r+0x90>
 800fa72:	68a3      	ldr	r3, [r4, #8]
 800fa74:	3b01      	subs	r3, #1
 800fa76:	60a3      	str	r3, [r4, #8]
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	6022      	str	r2, [r4, #0]
 800fa7e:	701e      	strb	r6, [r3, #0]
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	3001      	adds	r0, #1
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d004      	beq.n	800fa92 <__swbuf_r+0x62>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	07db      	lsls	r3, r3, #31
 800fa8c:	d506      	bpl.n	800fa9c <__swbuf_r+0x6c>
 800fa8e:	2e0a      	cmp	r6, #10
 800fa90:	d104      	bne.n	800fa9c <__swbuf_r+0x6c>
 800fa92:	4621      	mov	r1, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	f000 ff8b 	bl	80109b0 <_fflush_r>
 800fa9a:	b988      	cbnz	r0, 800fac0 <__swbuf_r+0x90>
 800fa9c:	4638      	mov	r0, r7
 800fa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa0:	4b0a      	ldr	r3, [pc, #40]	; (800facc <__swbuf_r+0x9c>)
 800faa2:	429c      	cmp	r4, r3
 800faa4:	d101      	bne.n	800faaa <__swbuf_r+0x7a>
 800faa6:	68ac      	ldr	r4, [r5, #8]
 800faa8:	e7cf      	b.n	800fa4a <__swbuf_r+0x1a>
 800faaa:	4b09      	ldr	r3, [pc, #36]	; (800fad0 <__swbuf_r+0xa0>)
 800faac:	429c      	cmp	r4, r3
 800faae:	bf08      	it	eq
 800fab0:	68ec      	ldreq	r4, [r5, #12]
 800fab2:	e7ca      	b.n	800fa4a <__swbuf_r+0x1a>
 800fab4:	4621      	mov	r1, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 f80c 	bl	800fad4 <__swsetup_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d0cb      	beq.n	800fa58 <__swbuf_r+0x28>
 800fac0:	f04f 37ff 	mov.w	r7, #4294967295
 800fac4:	e7ea      	b.n	800fa9c <__swbuf_r+0x6c>
 800fac6:	bf00      	nop
 800fac8:	0802026c 	.word	0x0802026c
 800facc:	0802028c 	.word	0x0802028c
 800fad0:	0802024c 	.word	0x0802024c

0800fad4 <__swsetup_r>:
 800fad4:	4b32      	ldr	r3, [pc, #200]	; (800fba0 <__swsetup_r+0xcc>)
 800fad6:	b570      	push	{r4, r5, r6, lr}
 800fad8:	681d      	ldr	r5, [r3, #0]
 800fada:	4606      	mov	r6, r0
 800fadc:	460c      	mov	r4, r1
 800fade:	b125      	cbz	r5, 800faea <__swsetup_r+0x16>
 800fae0:	69ab      	ldr	r3, [r5, #24]
 800fae2:	b913      	cbnz	r3, 800faea <__swsetup_r+0x16>
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 fff7 	bl	8010ad8 <__sinit>
 800faea:	4b2e      	ldr	r3, [pc, #184]	; (800fba4 <__swsetup_r+0xd0>)
 800faec:	429c      	cmp	r4, r3
 800faee:	d10f      	bne.n	800fb10 <__swsetup_r+0x3c>
 800faf0:	686c      	ldr	r4, [r5, #4]
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800faf8:	0719      	lsls	r1, r3, #28
 800fafa:	d42c      	bmi.n	800fb56 <__swsetup_r+0x82>
 800fafc:	06dd      	lsls	r5, r3, #27
 800fafe:	d411      	bmi.n	800fb24 <__swsetup_r+0x50>
 800fb00:	2309      	movs	r3, #9
 800fb02:	6033      	str	r3, [r6, #0]
 800fb04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb08:	81a3      	strh	r3, [r4, #12]
 800fb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0e:	e03e      	b.n	800fb8e <__swsetup_r+0xba>
 800fb10:	4b25      	ldr	r3, [pc, #148]	; (800fba8 <__swsetup_r+0xd4>)
 800fb12:	429c      	cmp	r4, r3
 800fb14:	d101      	bne.n	800fb1a <__swsetup_r+0x46>
 800fb16:	68ac      	ldr	r4, [r5, #8]
 800fb18:	e7eb      	b.n	800faf2 <__swsetup_r+0x1e>
 800fb1a:	4b24      	ldr	r3, [pc, #144]	; (800fbac <__swsetup_r+0xd8>)
 800fb1c:	429c      	cmp	r4, r3
 800fb1e:	bf08      	it	eq
 800fb20:	68ec      	ldreq	r4, [r5, #12]
 800fb22:	e7e6      	b.n	800faf2 <__swsetup_r+0x1e>
 800fb24:	0758      	lsls	r0, r3, #29
 800fb26:	d512      	bpl.n	800fb4e <__swsetup_r+0x7a>
 800fb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb2a:	b141      	cbz	r1, 800fb3e <__swsetup_r+0x6a>
 800fb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb30:	4299      	cmp	r1, r3
 800fb32:	d002      	beq.n	800fb3a <__swsetup_r+0x66>
 800fb34:	4630      	mov	r0, r6
 800fb36:	f7fe fae5 	bl	800e104 <_free_r>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800fb3e:	89a3      	ldrh	r3, [r4, #12]
 800fb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb44:	81a3      	strh	r3, [r4, #12]
 800fb46:	2300      	movs	r3, #0
 800fb48:	6063      	str	r3, [r4, #4]
 800fb4a:	6923      	ldr	r3, [r4, #16]
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	f043 0308 	orr.w	r3, r3, #8
 800fb54:	81a3      	strh	r3, [r4, #12]
 800fb56:	6923      	ldr	r3, [r4, #16]
 800fb58:	b94b      	cbnz	r3, 800fb6e <__swsetup_r+0x9a>
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb64:	d003      	beq.n	800fb6e <__swsetup_r+0x9a>
 800fb66:	4621      	mov	r1, r4
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f001 fbed 	bl	8011348 <__smakebuf_r>
 800fb6e:	89a0      	ldrh	r0, [r4, #12]
 800fb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb74:	f010 0301 	ands.w	r3, r0, #1
 800fb78:	d00a      	beq.n	800fb90 <__swsetup_r+0xbc>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60a3      	str	r3, [r4, #8]
 800fb7e:	6963      	ldr	r3, [r4, #20]
 800fb80:	425b      	negs	r3, r3
 800fb82:	61a3      	str	r3, [r4, #24]
 800fb84:	6923      	ldr	r3, [r4, #16]
 800fb86:	b943      	cbnz	r3, 800fb9a <__swsetup_r+0xc6>
 800fb88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb8c:	d1ba      	bne.n	800fb04 <__swsetup_r+0x30>
 800fb8e:	bd70      	pop	{r4, r5, r6, pc}
 800fb90:	0781      	lsls	r1, r0, #30
 800fb92:	bf58      	it	pl
 800fb94:	6963      	ldrpl	r3, [r4, #20]
 800fb96:	60a3      	str	r3, [r4, #8]
 800fb98:	e7f4      	b.n	800fb84 <__swsetup_r+0xb0>
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	e7f7      	b.n	800fb8e <__swsetup_r+0xba>
 800fb9e:	bf00      	nop
 800fba0:	200000c8 	.word	0x200000c8
 800fba4:	0802026c 	.word	0x0802026c
 800fba8:	0802028c 	.word	0x0802028c
 800fbac:	0802024c 	.word	0x0802024c

0800fbb0 <quorem>:
 800fbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	6903      	ldr	r3, [r0, #16]
 800fbb6:	690c      	ldr	r4, [r1, #16]
 800fbb8:	42a3      	cmp	r3, r4
 800fbba:	4607      	mov	r7, r0
 800fbbc:	f2c0 8081 	blt.w	800fcc2 <quorem+0x112>
 800fbc0:	3c01      	subs	r4, #1
 800fbc2:	f101 0814 	add.w	r8, r1, #20
 800fbc6:	f100 0514 	add.w	r5, r0, #20
 800fbca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fbd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fbe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fbe8:	d331      	bcc.n	800fc4e <quorem+0x9e>
 800fbea:	f04f 0e00 	mov.w	lr, #0
 800fbee:	4640      	mov	r0, r8
 800fbf0:	46ac      	mov	ip, r5
 800fbf2:	46f2      	mov	sl, lr
 800fbf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbf8:	b293      	uxth	r3, r2
 800fbfa:	fb06 e303 	mla	r3, r6, r3, lr
 800fbfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	ebaa 0303 	sub.w	r3, sl, r3
 800fc08:	f8dc a000 	ldr.w	sl, [ip]
 800fc0c:	0c12      	lsrs	r2, r2, #16
 800fc0e:	fa13 f38a 	uxtah	r3, r3, sl
 800fc12:	fb06 e202 	mla	r2, r6, r2, lr
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	9b00      	ldr	r3, [sp, #0]
 800fc1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc1e:	b292      	uxth	r2, r2
 800fc20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fc24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc28:	f8bd 3000 	ldrh.w	r3, [sp]
 800fc2c:	4581      	cmp	r9, r0
 800fc2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc32:	f84c 3b04 	str.w	r3, [ip], #4
 800fc36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fc3a:	d2db      	bcs.n	800fbf4 <quorem+0x44>
 800fc3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800fc40:	b92b      	cbnz	r3, 800fc4e <quorem+0x9e>
 800fc42:	9b01      	ldr	r3, [sp, #4]
 800fc44:	3b04      	subs	r3, #4
 800fc46:	429d      	cmp	r5, r3
 800fc48:	461a      	mov	r2, r3
 800fc4a:	d32e      	bcc.n	800fcaa <quorem+0xfa>
 800fc4c:	613c      	str	r4, [r7, #16]
 800fc4e:	4638      	mov	r0, r7
 800fc50:	f001 feb2 	bl	80119b8 <__mcmp>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	db24      	blt.n	800fca2 <quorem+0xf2>
 800fc58:	3601      	adds	r6, #1
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f04f 0c00 	mov.w	ip, #0
 800fc60:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc64:	f8d0 e000 	ldr.w	lr, [r0]
 800fc68:	b293      	uxth	r3, r2
 800fc6a:	ebac 0303 	sub.w	r3, ip, r3
 800fc6e:	0c12      	lsrs	r2, r2, #16
 800fc70:	fa13 f38e 	uxtah	r3, r3, lr
 800fc74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc82:	45c1      	cmp	r9, r8
 800fc84:	f840 3b04 	str.w	r3, [r0], #4
 800fc88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc8c:	d2e8      	bcs.n	800fc60 <quorem+0xb0>
 800fc8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc96:	b922      	cbnz	r2, 800fca2 <quorem+0xf2>
 800fc98:	3b04      	subs	r3, #4
 800fc9a:	429d      	cmp	r5, r3
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	d30a      	bcc.n	800fcb6 <quorem+0x106>
 800fca0:	613c      	str	r4, [r7, #16]
 800fca2:	4630      	mov	r0, r6
 800fca4:	b003      	add	sp, #12
 800fca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcaa:	6812      	ldr	r2, [r2, #0]
 800fcac:	3b04      	subs	r3, #4
 800fcae:	2a00      	cmp	r2, #0
 800fcb0:	d1cc      	bne.n	800fc4c <quorem+0x9c>
 800fcb2:	3c01      	subs	r4, #1
 800fcb4:	e7c7      	b.n	800fc46 <quorem+0x96>
 800fcb6:	6812      	ldr	r2, [r2, #0]
 800fcb8:	3b04      	subs	r3, #4
 800fcba:	2a00      	cmp	r2, #0
 800fcbc:	d1f0      	bne.n	800fca0 <quorem+0xf0>
 800fcbe:	3c01      	subs	r4, #1
 800fcc0:	e7eb      	b.n	800fc9a <quorem+0xea>
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	e7ee      	b.n	800fca4 <quorem+0xf4>
	...

0800fcc8 <_dtoa_r>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	ed2d 8b04 	vpush	{d8-d9}
 800fcd0:	ec57 6b10 	vmov	r6, r7, d0
 800fcd4:	b093      	sub	sp, #76	; 0x4c
 800fcd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fcd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fcdc:	9106      	str	r1, [sp, #24]
 800fcde:	ee10 aa10 	vmov	sl, s0
 800fce2:	4604      	mov	r4, r0
 800fce4:	9209      	str	r2, [sp, #36]	; 0x24
 800fce6:	930c      	str	r3, [sp, #48]	; 0x30
 800fce8:	46bb      	mov	fp, r7
 800fcea:	b975      	cbnz	r5, 800fd0a <_dtoa_r+0x42>
 800fcec:	2010      	movs	r0, #16
 800fcee:	f7fe f9f9 	bl	800e0e4 <malloc>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	6260      	str	r0, [r4, #36]	; 0x24
 800fcf6:	b920      	cbnz	r0, 800fd02 <_dtoa_r+0x3a>
 800fcf8:	4ba7      	ldr	r3, [pc, #668]	; (800ff98 <_dtoa_r+0x2d0>)
 800fcfa:	21ea      	movs	r1, #234	; 0xea
 800fcfc:	48a7      	ldr	r0, [pc, #668]	; (800ff9c <_dtoa_r+0x2d4>)
 800fcfe:	f002 fa47 	bl	8012190 <__assert_func>
 800fd02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd06:	6005      	str	r5, [r0, #0]
 800fd08:	60c5      	str	r5, [r0, #12]
 800fd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd0c:	6819      	ldr	r1, [r3, #0]
 800fd0e:	b151      	cbz	r1, 800fd26 <_dtoa_r+0x5e>
 800fd10:	685a      	ldr	r2, [r3, #4]
 800fd12:	604a      	str	r2, [r1, #4]
 800fd14:	2301      	movs	r3, #1
 800fd16:	4093      	lsls	r3, r2
 800fd18:	608b      	str	r3, [r1, #8]
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f001 fbc0 	bl	80114a0 <_Bfree>
 800fd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	1e3b      	subs	r3, r7, #0
 800fd28:	bfaa      	itet	ge
 800fd2a:	2300      	movge	r3, #0
 800fd2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fd30:	f8c8 3000 	strge.w	r3, [r8]
 800fd34:	4b9a      	ldr	r3, [pc, #616]	; (800ffa0 <_dtoa_r+0x2d8>)
 800fd36:	bfbc      	itt	lt
 800fd38:	2201      	movlt	r2, #1
 800fd3a:	f8c8 2000 	strlt.w	r2, [r8]
 800fd3e:	ea33 030b 	bics.w	r3, r3, fp
 800fd42:	d11b      	bne.n	800fd7c <_dtoa_r+0xb4>
 800fd44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd46:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd50:	4333      	orrs	r3, r6
 800fd52:	f000 8592 	beq.w	801087a <_dtoa_r+0xbb2>
 800fd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd58:	b963      	cbnz	r3, 800fd74 <_dtoa_r+0xac>
 800fd5a:	4b92      	ldr	r3, [pc, #584]	; (800ffa4 <_dtoa_r+0x2dc>)
 800fd5c:	e022      	b.n	800fda4 <_dtoa_r+0xdc>
 800fd5e:	4b92      	ldr	r3, [pc, #584]	; (800ffa8 <_dtoa_r+0x2e0>)
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	3308      	adds	r3, #8
 800fd64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd66:	6013      	str	r3, [r2, #0]
 800fd68:	9801      	ldr	r0, [sp, #4]
 800fd6a:	b013      	add	sp, #76	; 0x4c
 800fd6c:	ecbd 8b04 	vpop	{d8-d9}
 800fd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd74:	4b8b      	ldr	r3, [pc, #556]	; (800ffa4 <_dtoa_r+0x2dc>)
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	3303      	adds	r3, #3
 800fd7a:	e7f3      	b.n	800fd64 <_dtoa_r+0x9c>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	2300      	movs	r3, #0
 800fd80:	4650      	mov	r0, sl
 800fd82:	4659      	mov	r1, fp
 800fd84:	f7f0 feb8 	bl	8000af8 <__aeabi_dcmpeq>
 800fd88:	ec4b ab19 	vmov	d9, sl, fp
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	b158      	cbz	r0, 800fda8 <_dtoa_r+0xe0>
 800fd90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd92:	2301      	movs	r3, #1
 800fd94:	6013      	str	r3, [r2, #0]
 800fd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 856b 	beq.w	8010874 <_dtoa_r+0xbac>
 800fd9e:	4883      	ldr	r0, [pc, #524]	; (800ffac <_dtoa_r+0x2e4>)
 800fda0:	6018      	str	r0, [r3, #0]
 800fda2:	1e43      	subs	r3, r0, #1
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	e7df      	b.n	800fd68 <_dtoa_r+0xa0>
 800fda8:	ec4b ab10 	vmov	d0, sl, fp
 800fdac:	aa10      	add	r2, sp, #64	; 0x40
 800fdae:	a911      	add	r1, sp, #68	; 0x44
 800fdb0:	4620      	mov	r0, r4
 800fdb2:	f001 ff23 	bl	8011bfc <__d2b>
 800fdb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fdba:	ee08 0a10 	vmov	s16, r0
 800fdbe:	2d00      	cmp	r5, #0
 800fdc0:	f000 8084 	beq.w	800fecc <_dtoa_r+0x204>
 800fdc4:	ee19 3a90 	vmov	r3, s19
 800fdc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fdd0:	4656      	mov	r6, sl
 800fdd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fdd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fdda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fdde:	4b74      	ldr	r3, [pc, #464]	; (800ffb0 <_dtoa_r+0x2e8>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	4630      	mov	r0, r6
 800fde4:	4639      	mov	r1, r7
 800fde6:	f7f0 fa67 	bl	80002b8 <__aeabi_dsub>
 800fdea:	a365      	add	r3, pc, #404	; (adr r3, 800ff80 <_dtoa_r+0x2b8>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fc1a 	bl	8000628 <__aeabi_dmul>
 800fdf4:	a364      	add	r3, pc, #400	; (adr r3, 800ff88 <_dtoa_r+0x2c0>)
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f7f0 fa5f 	bl	80002bc <__adddf3>
 800fdfe:	4606      	mov	r6, r0
 800fe00:	4628      	mov	r0, r5
 800fe02:	460f      	mov	r7, r1
 800fe04:	f7f0 fba6 	bl	8000554 <__aeabi_i2d>
 800fe08:	a361      	add	r3, pc, #388	; (adr r3, 800ff90 <_dtoa_r+0x2c8>)
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	f7f0 fc0b 	bl	8000628 <__aeabi_dmul>
 800fe12:	4602      	mov	r2, r0
 800fe14:	460b      	mov	r3, r1
 800fe16:	4630      	mov	r0, r6
 800fe18:	4639      	mov	r1, r7
 800fe1a:	f7f0 fa4f 	bl	80002bc <__adddf3>
 800fe1e:	4606      	mov	r6, r0
 800fe20:	460f      	mov	r7, r1
 800fe22:	f7f0 feb1 	bl	8000b88 <__aeabi_d2iz>
 800fe26:	2200      	movs	r2, #0
 800fe28:	9000      	str	r0, [sp, #0]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	4639      	mov	r1, r7
 800fe30:	f7f0 fe6c 	bl	8000b0c <__aeabi_dcmplt>
 800fe34:	b150      	cbz	r0, 800fe4c <_dtoa_r+0x184>
 800fe36:	9800      	ldr	r0, [sp, #0]
 800fe38:	f7f0 fb8c 	bl	8000554 <__aeabi_i2d>
 800fe3c:	4632      	mov	r2, r6
 800fe3e:	463b      	mov	r3, r7
 800fe40:	f7f0 fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 800fe44:	b910      	cbnz	r0, 800fe4c <_dtoa_r+0x184>
 800fe46:	9b00      	ldr	r3, [sp, #0]
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	9b00      	ldr	r3, [sp, #0]
 800fe4e:	2b16      	cmp	r3, #22
 800fe50:	d85a      	bhi.n	800ff08 <_dtoa_r+0x240>
 800fe52:	9a00      	ldr	r2, [sp, #0]
 800fe54:	4b57      	ldr	r3, [pc, #348]	; (800ffb4 <_dtoa_r+0x2ec>)
 800fe56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5e:	ec51 0b19 	vmov	r0, r1, d9
 800fe62:	f7f0 fe53 	bl	8000b0c <__aeabi_dcmplt>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d050      	beq.n	800ff0c <_dtoa_r+0x244>
 800fe6a:	9b00      	ldr	r3, [sp, #0]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	2300      	movs	r3, #0
 800fe72:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe76:	1b5d      	subs	r5, r3, r5
 800fe78:	1e6b      	subs	r3, r5, #1
 800fe7a:	9305      	str	r3, [sp, #20]
 800fe7c:	bf45      	ittet	mi
 800fe7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fe82:	9304      	strmi	r3, [sp, #16]
 800fe84:	2300      	movpl	r3, #0
 800fe86:	2300      	movmi	r3, #0
 800fe88:	bf4c      	ite	mi
 800fe8a:	9305      	strmi	r3, [sp, #20]
 800fe8c:	9304      	strpl	r3, [sp, #16]
 800fe8e:	9b00      	ldr	r3, [sp, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	db3d      	blt.n	800ff10 <_dtoa_r+0x248>
 800fe94:	9b05      	ldr	r3, [sp, #20]
 800fe96:	9a00      	ldr	r2, [sp, #0]
 800fe98:	920a      	str	r2, [sp, #40]	; 0x28
 800fe9a:	4413      	add	r3, r2
 800fe9c:	9305      	str	r3, [sp, #20]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9307      	str	r3, [sp, #28]
 800fea2:	9b06      	ldr	r3, [sp, #24]
 800fea4:	2b09      	cmp	r3, #9
 800fea6:	f200 8089 	bhi.w	800ffbc <_dtoa_r+0x2f4>
 800feaa:	2b05      	cmp	r3, #5
 800feac:	bfc4      	itt	gt
 800feae:	3b04      	subgt	r3, #4
 800feb0:	9306      	strgt	r3, [sp, #24]
 800feb2:	9b06      	ldr	r3, [sp, #24]
 800feb4:	f1a3 0302 	sub.w	r3, r3, #2
 800feb8:	bfcc      	ite	gt
 800feba:	2500      	movgt	r5, #0
 800febc:	2501      	movle	r5, #1
 800febe:	2b03      	cmp	r3, #3
 800fec0:	f200 8087 	bhi.w	800ffd2 <_dtoa_r+0x30a>
 800fec4:	e8df f003 	tbb	[pc, r3]
 800fec8:	59383a2d 	.word	0x59383a2d
 800fecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fed0:	441d      	add	r5, r3
 800fed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fed6:	2b20      	cmp	r3, #32
 800fed8:	bfc1      	itttt	gt
 800feda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fee2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800feea:	bfda      	itte	le
 800feec:	f1c3 0320 	rsble	r3, r3, #32
 800fef0:	fa06 f003 	lslle.w	r0, r6, r3
 800fef4:	4318      	orrgt	r0, r3
 800fef6:	f7f0 fb1d 	bl	8000534 <__aeabi_ui2d>
 800fefa:	2301      	movs	r3, #1
 800fefc:	4606      	mov	r6, r0
 800fefe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff02:	3d01      	subs	r5, #1
 800ff04:	930e      	str	r3, [sp, #56]	; 0x38
 800ff06:	e76a      	b.n	800fdde <_dtoa_r+0x116>
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e7b2      	b.n	800fe72 <_dtoa_r+0x1aa>
 800ff0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff0e:	e7b1      	b.n	800fe74 <_dtoa_r+0x1ac>
 800ff10:	9b04      	ldr	r3, [sp, #16]
 800ff12:	9a00      	ldr	r2, [sp, #0]
 800ff14:	1a9b      	subs	r3, r3, r2
 800ff16:	9304      	str	r3, [sp, #16]
 800ff18:	4253      	negs	r3, r2
 800ff1a:	9307      	str	r3, [sp, #28]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff20:	e7bf      	b.n	800fea2 <_dtoa_r+0x1da>
 800ff22:	2300      	movs	r3, #0
 800ff24:	9308      	str	r3, [sp, #32]
 800ff26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	dc55      	bgt.n	800ffd8 <_dtoa_r+0x310>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff32:	461a      	mov	r2, r3
 800ff34:	9209      	str	r2, [sp, #36]	; 0x24
 800ff36:	e00c      	b.n	800ff52 <_dtoa_r+0x28a>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e7f3      	b.n	800ff24 <_dtoa_r+0x25c>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff40:	9308      	str	r3, [sp, #32]
 800ff42:	9b00      	ldr	r3, [sp, #0]
 800ff44:	4413      	add	r3, r2
 800ff46:	9302      	str	r3, [sp, #8]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	bfb8      	it	lt
 800ff50:	2301      	movlt	r3, #1
 800ff52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ff54:	2200      	movs	r2, #0
 800ff56:	6042      	str	r2, [r0, #4]
 800ff58:	2204      	movs	r2, #4
 800ff5a:	f102 0614 	add.w	r6, r2, #20
 800ff5e:	429e      	cmp	r6, r3
 800ff60:	6841      	ldr	r1, [r0, #4]
 800ff62:	d93d      	bls.n	800ffe0 <_dtoa_r+0x318>
 800ff64:	4620      	mov	r0, r4
 800ff66:	f001 fa5b 	bl	8011420 <_Balloc>
 800ff6a:	9001      	str	r0, [sp, #4]
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d13b      	bne.n	800ffe8 <_dtoa_r+0x320>
 800ff70:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <_dtoa_r+0x2f0>)
 800ff72:	4602      	mov	r2, r0
 800ff74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ff78:	e6c0      	b.n	800fcfc <_dtoa_r+0x34>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e7df      	b.n	800ff3e <_dtoa_r+0x276>
 800ff7e:	bf00      	nop
 800ff80:	636f4361 	.word	0x636f4361
 800ff84:	3fd287a7 	.word	0x3fd287a7
 800ff88:	8b60c8b3 	.word	0x8b60c8b3
 800ff8c:	3fc68a28 	.word	0x3fc68a28
 800ff90:	509f79fb 	.word	0x509f79fb
 800ff94:	3fd34413 	.word	0x3fd34413
 800ff98:	080201c6 	.word	0x080201c6
 800ff9c:	080201dd 	.word	0x080201dd
 800ffa0:	7ff00000 	.word	0x7ff00000
 800ffa4:	080201c2 	.word	0x080201c2
 800ffa8:	080201b9 	.word	0x080201b9
 800ffac:	08020041 	.word	0x08020041
 800ffb0:	3ff80000 	.word	0x3ff80000
 800ffb4:	080203b0 	.word	0x080203b0
 800ffb8:	08020238 	.word	0x08020238
 800ffbc:	2501      	movs	r5, #1
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	9306      	str	r3, [sp, #24]
 800ffc2:	9508      	str	r5, [sp, #32]
 800ffc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	2312      	movs	r3, #18
 800ffd0:	e7b0      	b.n	800ff34 <_dtoa_r+0x26c>
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	9308      	str	r3, [sp, #32]
 800ffd6:	e7f5      	b.n	800ffc4 <_dtoa_r+0x2fc>
 800ffd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffde:	e7b8      	b.n	800ff52 <_dtoa_r+0x28a>
 800ffe0:	3101      	adds	r1, #1
 800ffe2:	6041      	str	r1, [r0, #4]
 800ffe4:	0052      	lsls	r2, r2, #1
 800ffe6:	e7b8      	b.n	800ff5a <_dtoa_r+0x292>
 800ffe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffea:	9a01      	ldr	r2, [sp, #4]
 800ffec:	601a      	str	r2, [r3, #0]
 800ffee:	9b03      	ldr	r3, [sp, #12]
 800fff0:	2b0e      	cmp	r3, #14
 800fff2:	f200 809d 	bhi.w	8010130 <_dtoa_r+0x468>
 800fff6:	2d00      	cmp	r5, #0
 800fff8:	f000 809a 	beq.w	8010130 <_dtoa_r+0x468>
 800fffc:	9b00      	ldr	r3, [sp, #0]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dd32      	ble.n	8010068 <_dtoa_r+0x3a0>
 8010002:	4ab7      	ldr	r2, [pc, #732]	; (80102e0 <_dtoa_r+0x618>)
 8010004:	f003 030f 	and.w	r3, r3, #15
 8010008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801000c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010010:	9b00      	ldr	r3, [sp, #0]
 8010012:	05d8      	lsls	r0, r3, #23
 8010014:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010018:	d516      	bpl.n	8010048 <_dtoa_r+0x380>
 801001a:	4bb2      	ldr	r3, [pc, #712]	; (80102e4 <_dtoa_r+0x61c>)
 801001c:	ec51 0b19 	vmov	r0, r1, d9
 8010020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010024:	f7f0 fc2a 	bl	800087c <__aeabi_ddiv>
 8010028:	f007 070f 	and.w	r7, r7, #15
 801002c:	4682      	mov	sl, r0
 801002e:	468b      	mov	fp, r1
 8010030:	2503      	movs	r5, #3
 8010032:	4eac      	ldr	r6, [pc, #688]	; (80102e4 <_dtoa_r+0x61c>)
 8010034:	b957      	cbnz	r7, 801004c <_dtoa_r+0x384>
 8010036:	4642      	mov	r2, r8
 8010038:	464b      	mov	r3, r9
 801003a:	4650      	mov	r0, sl
 801003c:	4659      	mov	r1, fp
 801003e:	f7f0 fc1d 	bl	800087c <__aeabi_ddiv>
 8010042:	4682      	mov	sl, r0
 8010044:	468b      	mov	fp, r1
 8010046:	e028      	b.n	801009a <_dtoa_r+0x3d2>
 8010048:	2502      	movs	r5, #2
 801004a:	e7f2      	b.n	8010032 <_dtoa_r+0x36a>
 801004c:	07f9      	lsls	r1, r7, #31
 801004e:	d508      	bpl.n	8010062 <_dtoa_r+0x39a>
 8010050:	4640      	mov	r0, r8
 8010052:	4649      	mov	r1, r9
 8010054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010058:	f7f0 fae6 	bl	8000628 <__aeabi_dmul>
 801005c:	3501      	adds	r5, #1
 801005e:	4680      	mov	r8, r0
 8010060:	4689      	mov	r9, r1
 8010062:	107f      	asrs	r7, r7, #1
 8010064:	3608      	adds	r6, #8
 8010066:	e7e5      	b.n	8010034 <_dtoa_r+0x36c>
 8010068:	f000 809b 	beq.w	80101a2 <_dtoa_r+0x4da>
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	4f9d      	ldr	r7, [pc, #628]	; (80102e4 <_dtoa_r+0x61c>)
 8010070:	425e      	negs	r6, r3
 8010072:	4b9b      	ldr	r3, [pc, #620]	; (80102e0 <_dtoa_r+0x618>)
 8010074:	f006 020f 	and.w	r2, r6, #15
 8010078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	ec51 0b19 	vmov	r0, r1, d9
 8010084:	f7f0 fad0 	bl	8000628 <__aeabi_dmul>
 8010088:	1136      	asrs	r6, r6, #4
 801008a:	4682      	mov	sl, r0
 801008c:	468b      	mov	fp, r1
 801008e:	2300      	movs	r3, #0
 8010090:	2502      	movs	r5, #2
 8010092:	2e00      	cmp	r6, #0
 8010094:	d17a      	bne.n	801018c <_dtoa_r+0x4c4>
 8010096:	2b00      	cmp	r3, #0
 8010098:	d1d3      	bne.n	8010042 <_dtoa_r+0x37a>
 801009a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 8082 	beq.w	80101a6 <_dtoa_r+0x4de>
 80100a2:	4b91      	ldr	r3, [pc, #580]	; (80102e8 <_dtoa_r+0x620>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	4650      	mov	r0, sl
 80100a8:	4659      	mov	r1, fp
 80100aa:	f7f0 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d079      	beq.n	80101a6 <_dtoa_r+0x4de>
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d076      	beq.n	80101a6 <_dtoa_r+0x4de>
 80100b8:	9b02      	ldr	r3, [sp, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	dd36      	ble.n	801012c <_dtoa_r+0x464>
 80100be:	9b00      	ldr	r3, [sp, #0]
 80100c0:	4650      	mov	r0, sl
 80100c2:	4659      	mov	r1, fp
 80100c4:	1e5f      	subs	r7, r3, #1
 80100c6:	2200      	movs	r2, #0
 80100c8:	4b88      	ldr	r3, [pc, #544]	; (80102ec <_dtoa_r+0x624>)
 80100ca:	f7f0 faad 	bl	8000628 <__aeabi_dmul>
 80100ce:	9e02      	ldr	r6, [sp, #8]
 80100d0:	4682      	mov	sl, r0
 80100d2:	468b      	mov	fp, r1
 80100d4:	3501      	adds	r5, #1
 80100d6:	4628      	mov	r0, r5
 80100d8:	f7f0 fa3c 	bl	8000554 <__aeabi_i2d>
 80100dc:	4652      	mov	r2, sl
 80100de:	465b      	mov	r3, fp
 80100e0:	f7f0 faa2 	bl	8000628 <__aeabi_dmul>
 80100e4:	4b82      	ldr	r3, [pc, #520]	; (80102f0 <_dtoa_r+0x628>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	f7f0 f8e8 	bl	80002bc <__adddf3>
 80100ec:	46d0      	mov	r8, sl
 80100ee:	46d9      	mov	r9, fp
 80100f0:	4682      	mov	sl, r0
 80100f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80100f6:	2e00      	cmp	r6, #0
 80100f8:	d158      	bne.n	80101ac <_dtoa_r+0x4e4>
 80100fa:	4b7e      	ldr	r3, [pc, #504]	; (80102f4 <_dtoa_r+0x62c>)
 80100fc:	2200      	movs	r2, #0
 80100fe:	4640      	mov	r0, r8
 8010100:	4649      	mov	r1, r9
 8010102:	f7f0 f8d9 	bl	80002b8 <__aeabi_dsub>
 8010106:	4652      	mov	r2, sl
 8010108:	465b      	mov	r3, fp
 801010a:	4680      	mov	r8, r0
 801010c:	4689      	mov	r9, r1
 801010e:	f7f0 fd1b 	bl	8000b48 <__aeabi_dcmpgt>
 8010112:	2800      	cmp	r0, #0
 8010114:	f040 8295 	bne.w	8010642 <_dtoa_r+0x97a>
 8010118:	4652      	mov	r2, sl
 801011a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801011e:	4640      	mov	r0, r8
 8010120:	4649      	mov	r1, r9
 8010122:	f7f0 fcf3 	bl	8000b0c <__aeabi_dcmplt>
 8010126:	2800      	cmp	r0, #0
 8010128:	f040 8289 	bne.w	801063e <_dtoa_r+0x976>
 801012c:	ec5b ab19 	vmov	sl, fp, d9
 8010130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010132:	2b00      	cmp	r3, #0
 8010134:	f2c0 8148 	blt.w	80103c8 <_dtoa_r+0x700>
 8010138:	9a00      	ldr	r2, [sp, #0]
 801013a:	2a0e      	cmp	r2, #14
 801013c:	f300 8144 	bgt.w	80103c8 <_dtoa_r+0x700>
 8010140:	4b67      	ldr	r3, [pc, #412]	; (80102e0 <_dtoa_r+0x618>)
 8010142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010146:	e9d3 8900 	ldrd	r8, r9, [r3]
 801014a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801014c:	2b00      	cmp	r3, #0
 801014e:	f280 80d5 	bge.w	80102fc <_dtoa_r+0x634>
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f300 80d1 	bgt.w	80102fc <_dtoa_r+0x634>
 801015a:	f040 826f 	bne.w	801063c <_dtoa_r+0x974>
 801015e:	4b65      	ldr	r3, [pc, #404]	; (80102f4 <_dtoa_r+0x62c>)
 8010160:	2200      	movs	r2, #0
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fa5f 	bl	8000628 <__aeabi_dmul>
 801016a:	4652      	mov	r2, sl
 801016c:	465b      	mov	r3, fp
 801016e:	f7f0 fce1 	bl	8000b34 <__aeabi_dcmpge>
 8010172:	9e03      	ldr	r6, [sp, #12]
 8010174:	4637      	mov	r7, r6
 8010176:	2800      	cmp	r0, #0
 8010178:	f040 8245 	bne.w	8010606 <_dtoa_r+0x93e>
 801017c:	9d01      	ldr	r5, [sp, #4]
 801017e:	2331      	movs	r3, #49	; 0x31
 8010180:	f805 3b01 	strb.w	r3, [r5], #1
 8010184:	9b00      	ldr	r3, [sp, #0]
 8010186:	3301      	adds	r3, #1
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	e240      	b.n	801060e <_dtoa_r+0x946>
 801018c:	07f2      	lsls	r2, r6, #31
 801018e:	d505      	bpl.n	801019c <_dtoa_r+0x4d4>
 8010190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010194:	f7f0 fa48 	bl	8000628 <__aeabi_dmul>
 8010198:	3501      	adds	r5, #1
 801019a:	2301      	movs	r3, #1
 801019c:	1076      	asrs	r6, r6, #1
 801019e:	3708      	adds	r7, #8
 80101a0:	e777      	b.n	8010092 <_dtoa_r+0x3ca>
 80101a2:	2502      	movs	r5, #2
 80101a4:	e779      	b.n	801009a <_dtoa_r+0x3d2>
 80101a6:	9f00      	ldr	r7, [sp, #0]
 80101a8:	9e03      	ldr	r6, [sp, #12]
 80101aa:	e794      	b.n	80100d6 <_dtoa_r+0x40e>
 80101ac:	9901      	ldr	r1, [sp, #4]
 80101ae:	4b4c      	ldr	r3, [pc, #304]	; (80102e0 <_dtoa_r+0x618>)
 80101b0:	4431      	add	r1, r6
 80101b2:	910d      	str	r1, [sp, #52]	; 0x34
 80101b4:	9908      	ldr	r1, [sp, #32]
 80101b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80101ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80101be:	2900      	cmp	r1, #0
 80101c0:	d043      	beq.n	801024a <_dtoa_r+0x582>
 80101c2:	494d      	ldr	r1, [pc, #308]	; (80102f8 <_dtoa_r+0x630>)
 80101c4:	2000      	movs	r0, #0
 80101c6:	f7f0 fb59 	bl	800087c <__aeabi_ddiv>
 80101ca:	4652      	mov	r2, sl
 80101cc:	465b      	mov	r3, fp
 80101ce:	f7f0 f873 	bl	80002b8 <__aeabi_dsub>
 80101d2:	9d01      	ldr	r5, [sp, #4]
 80101d4:	4682      	mov	sl, r0
 80101d6:	468b      	mov	fp, r1
 80101d8:	4649      	mov	r1, r9
 80101da:	4640      	mov	r0, r8
 80101dc:	f7f0 fcd4 	bl	8000b88 <__aeabi_d2iz>
 80101e0:	4606      	mov	r6, r0
 80101e2:	f7f0 f9b7 	bl	8000554 <__aeabi_i2d>
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4640      	mov	r0, r8
 80101ec:	4649      	mov	r1, r9
 80101ee:	f7f0 f863 	bl	80002b8 <__aeabi_dsub>
 80101f2:	3630      	adds	r6, #48	; 0x30
 80101f4:	f805 6b01 	strb.w	r6, [r5], #1
 80101f8:	4652      	mov	r2, sl
 80101fa:	465b      	mov	r3, fp
 80101fc:	4680      	mov	r8, r0
 80101fe:	4689      	mov	r9, r1
 8010200:	f7f0 fc84 	bl	8000b0c <__aeabi_dcmplt>
 8010204:	2800      	cmp	r0, #0
 8010206:	d163      	bne.n	80102d0 <_dtoa_r+0x608>
 8010208:	4642      	mov	r2, r8
 801020a:	464b      	mov	r3, r9
 801020c:	4936      	ldr	r1, [pc, #216]	; (80102e8 <_dtoa_r+0x620>)
 801020e:	2000      	movs	r0, #0
 8010210:	f7f0 f852 	bl	80002b8 <__aeabi_dsub>
 8010214:	4652      	mov	r2, sl
 8010216:	465b      	mov	r3, fp
 8010218:	f7f0 fc78 	bl	8000b0c <__aeabi_dcmplt>
 801021c:	2800      	cmp	r0, #0
 801021e:	f040 80b5 	bne.w	801038c <_dtoa_r+0x6c4>
 8010222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010224:	429d      	cmp	r5, r3
 8010226:	d081      	beq.n	801012c <_dtoa_r+0x464>
 8010228:	4b30      	ldr	r3, [pc, #192]	; (80102ec <_dtoa_r+0x624>)
 801022a:	2200      	movs	r2, #0
 801022c:	4650      	mov	r0, sl
 801022e:	4659      	mov	r1, fp
 8010230:	f7f0 f9fa 	bl	8000628 <__aeabi_dmul>
 8010234:	4b2d      	ldr	r3, [pc, #180]	; (80102ec <_dtoa_r+0x624>)
 8010236:	4682      	mov	sl, r0
 8010238:	468b      	mov	fp, r1
 801023a:	4640      	mov	r0, r8
 801023c:	4649      	mov	r1, r9
 801023e:	2200      	movs	r2, #0
 8010240:	f7f0 f9f2 	bl	8000628 <__aeabi_dmul>
 8010244:	4680      	mov	r8, r0
 8010246:	4689      	mov	r9, r1
 8010248:	e7c6      	b.n	80101d8 <_dtoa_r+0x510>
 801024a:	4650      	mov	r0, sl
 801024c:	4659      	mov	r1, fp
 801024e:	f7f0 f9eb 	bl	8000628 <__aeabi_dmul>
 8010252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010254:	9d01      	ldr	r5, [sp, #4]
 8010256:	930f      	str	r3, [sp, #60]	; 0x3c
 8010258:	4682      	mov	sl, r0
 801025a:	468b      	mov	fp, r1
 801025c:	4649      	mov	r1, r9
 801025e:	4640      	mov	r0, r8
 8010260:	f7f0 fc92 	bl	8000b88 <__aeabi_d2iz>
 8010264:	4606      	mov	r6, r0
 8010266:	f7f0 f975 	bl	8000554 <__aeabi_i2d>
 801026a:	3630      	adds	r6, #48	; 0x30
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	4640      	mov	r0, r8
 8010272:	4649      	mov	r1, r9
 8010274:	f7f0 f820 	bl	80002b8 <__aeabi_dsub>
 8010278:	f805 6b01 	strb.w	r6, [r5], #1
 801027c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801027e:	429d      	cmp	r5, r3
 8010280:	4680      	mov	r8, r0
 8010282:	4689      	mov	r9, r1
 8010284:	f04f 0200 	mov.w	r2, #0
 8010288:	d124      	bne.n	80102d4 <_dtoa_r+0x60c>
 801028a:	4b1b      	ldr	r3, [pc, #108]	; (80102f8 <_dtoa_r+0x630>)
 801028c:	4650      	mov	r0, sl
 801028e:	4659      	mov	r1, fp
 8010290:	f7f0 f814 	bl	80002bc <__adddf3>
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	4640      	mov	r0, r8
 801029a:	4649      	mov	r1, r9
 801029c:	f7f0 fc54 	bl	8000b48 <__aeabi_dcmpgt>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d173      	bne.n	801038c <_dtoa_r+0x6c4>
 80102a4:	4652      	mov	r2, sl
 80102a6:	465b      	mov	r3, fp
 80102a8:	4913      	ldr	r1, [pc, #76]	; (80102f8 <_dtoa_r+0x630>)
 80102aa:	2000      	movs	r0, #0
 80102ac:	f7f0 f804 	bl	80002b8 <__aeabi_dsub>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4640      	mov	r0, r8
 80102b6:	4649      	mov	r1, r9
 80102b8:	f7f0 fc28 	bl	8000b0c <__aeabi_dcmplt>
 80102bc:	2800      	cmp	r0, #0
 80102be:	f43f af35 	beq.w	801012c <_dtoa_r+0x464>
 80102c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80102c4:	1e6b      	subs	r3, r5, #1
 80102c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80102c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80102cc:	2b30      	cmp	r3, #48	; 0x30
 80102ce:	d0f8      	beq.n	80102c2 <_dtoa_r+0x5fa>
 80102d0:	9700      	str	r7, [sp, #0]
 80102d2:	e049      	b.n	8010368 <_dtoa_r+0x6a0>
 80102d4:	4b05      	ldr	r3, [pc, #20]	; (80102ec <_dtoa_r+0x624>)
 80102d6:	f7f0 f9a7 	bl	8000628 <__aeabi_dmul>
 80102da:	4680      	mov	r8, r0
 80102dc:	4689      	mov	r9, r1
 80102de:	e7bd      	b.n	801025c <_dtoa_r+0x594>
 80102e0:	080203b0 	.word	0x080203b0
 80102e4:	08020388 	.word	0x08020388
 80102e8:	3ff00000 	.word	0x3ff00000
 80102ec:	40240000 	.word	0x40240000
 80102f0:	401c0000 	.word	0x401c0000
 80102f4:	40140000 	.word	0x40140000
 80102f8:	3fe00000 	.word	0x3fe00000
 80102fc:	9d01      	ldr	r5, [sp, #4]
 80102fe:	4656      	mov	r6, sl
 8010300:	465f      	mov	r7, fp
 8010302:	4642      	mov	r2, r8
 8010304:	464b      	mov	r3, r9
 8010306:	4630      	mov	r0, r6
 8010308:	4639      	mov	r1, r7
 801030a:	f7f0 fab7 	bl	800087c <__aeabi_ddiv>
 801030e:	f7f0 fc3b 	bl	8000b88 <__aeabi_d2iz>
 8010312:	4682      	mov	sl, r0
 8010314:	f7f0 f91e 	bl	8000554 <__aeabi_i2d>
 8010318:	4642      	mov	r2, r8
 801031a:	464b      	mov	r3, r9
 801031c:	f7f0 f984 	bl	8000628 <__aeabi_dmul>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4630      	mov	r0, r6
 8010326:	4639      	mov	r1, r7
 8010328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801032c:	f7ef ffc4 	bl	80002b8 <__aeabi_dsub>
 8010330:	f805 6b01 	strb.w	r6, [r5], #1
 8010334:	9e01      	ldr	r6, [sp, #4]
 8010336:	9f03      	ldr	r7, [sp, #12]
 8010338:	1bae      	subs	r6, r5, r6
 801033a:	42b7      	cmp	r7, r6
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	d135      	bne.n	80103ae <_dtoa_r+0x6e6>
 8010342:	f7ef ffbb 	bl	80002bc <__adddf3>
 8010346:	4642      	mov	r2, r8
 8010348:	464b      	mov	r3, r9
 801034a:	4606      	mov	r6, r0
 801034c:	460f      	mov	r7, r1
 801034e:	f7f0 fbfb 	bl	8000b48 <__aeabi_dcmpgt>
 8010352:	b9d0      	cbnz	r0, 801038a <_dtoa_r+0x6c2>
 8010354:	4642      	mov	r2, r8
 8010356:	464b      	mov	r3, r9
 8010358:	4630      	mov	r0, r6
 801035a:	4639      	mov	r1, r7
 801035c:	f7f0 fbcc 	bl	8000af8 <__aeabi_dcmpeq>
 8010360:	b110      	cbz	r0, 8010368 <_dtoa_r+0x6a0>
 8010362:	f01a 0f01 	tst.w	sl, #1
 8010366:	d110      	bne.n	801038a <_dtoa_r+0x6c2>
 8010368:	4620      	mov	r0, r4
 801036a:	ee18 1a10 	vmov	r1, s16
 801036e:	f001 f897 	bl	80114a0 <_Bfree>
 8010372:	2300      	movs	r3, #0
 8010374:	9800      	ldr	r0, [sp, #0]
 8010376:	702b      	strb	r3, [r5, #0]
 8010378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801037a:	3001      	adds	r0, #1
 801037c:	6018      	str	r0, [r3, #0]
 801037e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010380:	2b00      	cmp	r3, #0
 8010382:	f43f acf1 	beq.w	800fd68 <_dtoa_r+0xa0>
 8010386:	601d      	str	r5, [r3, #0]
 8010388:	e4ee      	b.n	800fd68 <_dtoa_r+0xa0>
 801038a:	9f00      	ldr	r7, [sp, #0]
 801038c:	462b      	mov	r3, r5
 801038e:	461d      	mov	r5, r3
 8010390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010394:	2a39      	cmp	r2, #57	; 0x39
 8010396:	d106      	bne.n	80103a6 <_dtoa_r+0x6de>
 8010398:	9a01      	ldr	r2, [sp, #4]
 801039a:	429a      	cmp	r2, r3
 801039c:	d1f7      	bne.n	801038e <_dtoa_r+0x6c6>
 801039e:	9901      	ldr	r1, [sp, #4]
 80103a0:	2230      	movs	r2, #48	; 0x30
 80103a2:	3701      	adds	r7, #1
 80103a4:	700a      	strb	r2, [r1, #0]
 80103a6:	781a      	ldrb	r2, [r3, #0]
 80103a8:	3201      	adds	r2, #1
 80103aa:	701a      	strb	r2, [r3, #0]
 80103ac:	e790      	b.n	80102d0 <_dtoa_r+0x608>
 80103ae:	4ba6      	ldr	r3, [pc, #664]	; (8010648 <_dtoa_r+0x980>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	f7f0 f939 	bl	8000628 <__aeabi_dmul>
 80103b6:	2200      	movs	r2, #0
 80103b8:	2300      	movs	r3, #0
 80103ba:	4606      	mov	r6, r0
 80103bc:	460f      	mov	r7, r1
 80103be:	f7f0 fb9b 	bl	8000af8 <__aeabi_dcmpeq>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d09d      	beq.n	8010302 <_dtoa_r+0x63a>
 80103c6:	e7cf      	b.n	8010368 <_dtoa_r+0x6a0>
 80103c8:	9a08      	ldr	r2, [sp, #32]
 80103ca:	2a00      	cmp	r2, #0
 80103cc:	f000 80d7 	beq.w	801057e <_dtoa_r+0x8b6>
 80103d0:	9a06      	ldr	r2, [sp, #24]
 80103d2:	2a01      	cmp	r2, #1
 80103d4:	f300 80ba 	bgt.w	801054c <_dtoa_r+0x884>
 80103d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80103da:	2a00      	cmp	r2, #0
 80103dc:	f000 80b2 	beq.w	8010544 <_dtoa_r+0x87c>
 80103e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80103e4:	9e07      	ldr	r6, [sp, #28]
 80103e6:	9d04      	ldr	r5, [sp, #16]
 80103e8:	9a04      	ldr	r2, [sp, #16]
 80103ea:	441a      	add	r2, r3
 80103ec:	9204      	str	r2, [sp, #16]
 80103ee:	9a05      	ldr	r2, [sp, #20]
 80103f0:	2101      	movs	r1, #1
 80103f2:	441a      	add	r2, r3
 80103f4:	4620      	mov	r0, r4
 80103f6:	9205      	str	r2, [sp, #20]
 80103f8:	f001 f954 	bl	80116a4 <__i2b>
 80103fc:	4607      	mov	r7, r0
 80103fe:	2d00      	cmp	r5, #0
 8010400:	dd0c      	ble.n	801041c <_dtoa_r+0x754>
 8010402:	9b05      	ldr	r3, [sp, #20]
 8010404:	2b00      	cmp	r3, #0
 8010406:	dd09      	ble.n	801041c <_dtoa_r+0x754>
 8010408:	42ab      	cmp	r3, r5
 801040a:	9a04      	ldr	r2, [sp, #16]
 801040c:	bfa8      	it	ge
 801040e:	462b      	movge	r3, r5
 8010410:	1ad2      	subs	r2, r2, r3
 8010412:	9204      	str	r2, [sp, #16]
 8010414:	9a05      	ldr	r2, [sp, #20]
 8010416:	1aed      	subs	r5, r5, r3
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	9305      	str	r3, [sp, #20]
 801041c:	9b07      	ldr	r3, [sp, #28]
 801041e:	b31b      	cbz	r3, 8010468 <_dtoa_r+0x7a0>
 8010420:	9b08      	ldr	r3, [sp, #32]
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 80af 	beq.w	8010586 <_dtoa_r+0x8be>
 8010428:	2e00      	cmp	r6, #0
 801042a:	dd13      	ble.n	8010454 <_dtoa_r+0x78c>
 801042c:	4639      	mov	r1, r7
 801042e:	4632      	mov	r2, r6
 8010430:	4620      	mov	r0, r4
 8010432:	f001 f9f7 	bl	8011824 <__pow5mult>
 8010436:	ee18 2a10 	vmov	r2, s16
 801043a:	4601      	mov	r1, r0
 801043c:	4607      	mov	r7, r0
 801043e:	4620      	mov	r0, r4
 8010440:	f001 f946 	bl	80116d0 <__multiply>
 8010444:	ee18 1a10 	vmov	r1, s16
 8010448:	4680      	mov	r8, r0
 801044a:	4620      	mov	r0, r4
 801044c:	f001 f828 	bl	80114a0 <_Bfree>
 8010450:	ee08 8a10 	vmov	s16, r8
 8010454:	9b07      	ldr	r3, [sp, #28]
 8010456:	1b9a      	subs	r2, r3, r6
 8010458:	d006      	beq.n	8010468 <_dtoa_r+0x7a0>
 801045a:	ee18 1a10 	vmov	r1, s16
 801045e:	4620      	mov	r0, r4
 8010460:	f001 f9e0 	bl	8011824 <__pow5mult>
 8010464:	ee08 0a10 	vmov	s16, r0
 8010468:	2101      	movs	r1, #1
 801046a:	4620      	mov	r0, r4
 801046c:	f001 f91a 	bl	80116a4 <__i2b>
 8010470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010472:	2b00      	cmp	r3, #0
 8010474:	4606      	mov	r6, r0
 8010476:	f340 8088 	ble.w	801058a <_dtoa_r+0x8c2>
 801047a:	461a      	mov	r2, r3
 801047c:	4601      	mov	r1, r0
 801047e:	4620      	mov	r0, r4
 8010480:	f001 f9d0 	bl	8011824 <__pow5mult>
 8010484:	9b06      	ldr	r3, [sp, #24]
 8010486:	2b01      	cmp	r3, #1
 8010488:	4606      	mov	r6, r0
 801048a:	f340 8081 	ble.w	8010590 <_dtoa_r+0x8c8>
 801048e:	f04f 0800 	mov.w	r8, #0
 8010492:	6933      	ldr	r3, [r6, #16]
 8010494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010498:	6918      	ldr	r0, [r3, #16]
 801049a:	f001 f8b3 	bl	8011604 <__hi0bits>
 801049e:	f1c0 0020 	rsb	r0, r0, #32
 80104a2:	9b05      	ldr	r3, [sp, #20]
 80104a4:	4418      	add	r0, r3
 80104a6:	f010 001f 	ands.w	r0, r0, #31
 80104aa:	f000 8092 	beq.w	80105d2 <_dtoa_r+0x90a>
 80104ae:	f1c0 0320 	rsb	r3, r0, #32
 80104b2:	2b04      	cmp	r3, #4
 80104b4:	f340 808a 	ble.w	80105cc <_dtoa_r+0x904>
 80104b8:	f1c0 001c 	rsb	r0, r0, #28
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	4403      	add	r3, r0
 80104c0:	9304      	str	r3, [sp, #16]
 80104c2:	9b05      	ldr	r3, [sp, #20]
 80104c4:	4403      	add	r3, r0
 80104c6:	4405      	add	r5, r0
 80104c8:	9305      	str	r3, [sp, #20]
 80104ca:	9b04      	ldr	r3, [sp, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	dd07      	ble.n	80104e0 <_dtoa_r+0x818>
 80104d0:	ee18 1a10 	vmov	r1, s16
 80104d4:	461a      	mov	r2, r3
 80104d6:	4620      	mov	r0, r4
 80104d8:	f001 f9fe 	bl	80118d8 <__lshift>
 80104dc:	ee08 0a10 	vmov	s16, r0
 80104e0:	9b05      	ldr	r3, [sp, #20]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	dd05      	ble.n	80104f2 <_dtoa_r+0x82a>
 80104e6:	4631      	mov	r1, r6
 80104e8:	461a      	mov	r2, r3
 80104ea:	4620      	mov	r0, r4
 80104ec:	f001 f9f4 	bl	80118d8 <__lshift>
 80104f0:	4606      	mov	r6, r0
 80104f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d06e      	beq.n	80105d6 <_dtoa_r+0x90e>
 80104f8:	ee18 0a10 	vmov	r0, s16
 80104fc:	4631      	mov	r1, r6
 80104fe:	f001 fa5b 	bl	80119b8 <__mcmp>
 8010502:	2800      	cmp	r0, #0
 8010504:	da67      	bge.n	80105d6 <_dtoa_r+0x90e>
 8010506:	9b00      	ldr	r3, [sp, #0]
 8010508:	3b01      	subs	r3, #1
 801050a:	ee18 1a10 	vmov	r1, s16
 801050e:	9300      	str	r3, [sp, #0]
 8010510:	220a      	movs	r2, #10
 8010512:	2300      	movs	r3, #0
 8010514:	4620      	mov	r0, r4
 8010516:	f000 ffe5 	bl	80114e4 <__multadd>
 801051a:	9b08      	ldr	r3, [sp, #32]
 801051c:	ee08 0a10 	vmov	s16, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 81b1 	beq.w	8010888 <_dtoa_r+0xbc0>
 8010526:	2300      	movs	r3, #0
 8010528:	4639      	mov	r1, r7
 801052a:	220a      	movs	r2, #10
 801052c:	4620      	mov	r0, r4
 801052e:	f000 ffd9 	bl	80114e4 <__multadd>
 8010532:	9b02      	ldr	r3, [sp, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	4607      	mov	r7, r0
 8010538:	f300 808e 	bgt.w	8010658 <_dtoa_r+0x990>
 801053c:	9b06      	ldr	r3, [sp, #24]
 801053e:	2b02      	cmp	r3, #2
 8010540:	dc51      	bgt.n	80105e6 <_dtoa_r+0x91e>
 8010542:	e089      	b.n	8010658 <_dtoa_r+0x990>
 8010544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801054a:	e74b      	b.n	80103e4 <_dtoa_r+0x71c>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	1e5e      	subs	r6, r3, #1
 8010550:	9b07      	ldr	r3, [sp, #28]
 8010552:	42b3      	cmp	r3, r6
 8010554:	bfbf      	itttt	lt
 8010556:	9b07      	ldrlt	r3, [sp, #28]
 8010558:	9607      	strlt	r6, [sp, #28]
 801055a:	1af2      	sublt	r2, r6, r3
 801055c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801055e:	bfb6      	itet	lt
 8010560:	189b      	addlt	r3, r3, r2
 8010562:	1b9e      	subge	r6, r3, r6
 8010564:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010566:	9b03      	ldr	r3, [sp, #12]
 8010568:	bfb8      	it	lt
 801056a:	2600      	movlt	r6, #0
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfb7      	itett	lt
 8010570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010578:	1a9d      	sublt	r5, r3, r2
 801057a:	2300      	movlt	r3, #0
 801057c:	e734      	b.n	80103e8 <_dtoa_r+0x720>
 801057e:	9e07      	ldr	r6, [sp, #28]
 8010580:	9d04      	ldr	r5, [sp, #16]
 8010582:	9f08      	ldr	r7, [sp, #32]
 8010584:	e73b      	b.n	80103fe <_dtoa_r+0x736>
 8010586:	9a07      	ldr	r2, [sp, #28]
 8010588:	e767      	b.n	801045a <_dtoa_r+0x792>
 801058a:	9b06      	ldr	r3, [sp, #24]
 801058c:	2b01      	cmp	r3, #1
 801058e:	dc18      	bgt.n	80105c2 <_dtoa_r+0x8fa>
 8010590:	f1ba 0f00 	cmp.w	sl, #0
 8010594:	d115      	bne.n	80105c2 <_dtoa_r+0x8fa>
 8010596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801059a:	b993      	cbnz	r3, 80105c2 <_dtoa_r+0x8fa>
 801059c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80105a0:	0d1b      	lsrs	r3, r3, #20
 80105a2:	051b      	lsls	r3, r3, #20
 80105a4:	b183      	cbz	r3, 80105c8 <_dtoa_r+0x900>
 80105a6:	9b04      	ldr	r3, [sp, #16]
 80105a8:	3301      	adds	r3, #1
 80105aa:	9304      	str	r3, [sp, #16]
 80105ac:	9b05      	ldr	r3, [sp, #20]
 80105ae:	3301      	adds	r3, #1
 80105b0:	9305      	str	r3, [sp, #20]
 80105b2:	f04f 0801 	mov.w	r8, #1
 80105b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f47f af6a 	bne.w	8010492 <_dtoa_r+0x7ca>
 80105be:	2001      	movs	r0, #1
 80105c0:	e76f      	b.n	80104a2 <_dtoa_r+0x7da>
 80105c2:	f04f 0800 	mov.w	r8, #0
 80105c6:	e7f6      	b.n	80105b6 <_dtoa_r+0x8ee>
 80105c8:	4698      	mov	r8, r3
 80105ca:	e7f4      	b.n	80105b6 <_dtoa_r+0x8ee>
 80105cc:	f43f af7d 	beq.w	80104ca <_dtoa_r+0x802>
 80105d0:	4618      	mov	r0, r3
 80105d2:	301c      	adds	r0, #28
 80105d4:	e772      	b.n	80104bc <_dtoa_r+0x7f4>
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	dc37      	bgt.n	801064c <_dtoa_r+0x984>
 80105dc:	9b06      	ldr	r3, [sp, #24]
 80105de:	2b02      	cmp	r3, #2
 80105e0:	dd34      	ble.n	801064c <_dtoa_r+0x984>
 80105e2:	9b03      	ldr	r3, [sp, #12]
 80105e4:	9302      	str	r3, [sp, #8]
 80105e6:	9b02      	ldr	r3, [sp, #8]
 80105e8:	b96b      	cbnz	r3, 8010606 <_dtoa_r+0x93e>
 80105ea:	4631      	mov	r1, r6
 80105ec:	2205      	movs	r2, #5
 80105ee:	4620      	mov	r0, r4
 80105f0:	f000 ff78 	bl	80114e4 <__multadd>
 80105f4:	4601      	mov	r1, r0
 80105f6:	4606      	mov	r6, r0
 80105f8:	ee18 0a10 	vmov	r0, s16
 80105fc:	f001 f9dc 	bl	80119b8 <__mcmp>
 8010600:	2800      	cmp	r0, #0
 8010602:	f73f adbb 	bgt.w	801017c <_dtoa_r+0x4b4>
 8010606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010608:	9d01      	ldr	r5, [sp, #4]
 801060a:	43db      	mvns	r3, r3
 801060c:	9300      	str	r3, [sp, #0]
 801060e:	f04f 0800 	mov.w	r8, #0
 8010612:	4631      	mov	r1, r6
 8010614:	4620      	mov	r0, r4
 8010616:	f000 ff43 	bl	80114a0 <_Bfree>
 801061a:	2f00      	cmp	r7, #0
 801061c:	f43f aea4 	beq.w	8010368 <_dtoa_r+0x6a0>
 8010620:	f1b8 0f00 	cmp.w	r8, #0
 8010624:	d005      	beq.n	8010632 <_dtoa_r+0x96a>
 8010626:	45b8      	cmp	r8, r7
 8010628:	d003      	beq.n	8010632 <_dtoa_r+0x96a>
 801062a:	4641      	mov	r1, r8
 801062c:	4620      	mov	r0, r4
 801062e:	f000 ff37 	bl	80114a0 <_Bfree>
 8010632:	4639      	mov	r1, r7
 8010634:	4620      	mov	r0, r4
 8010636:	f000 ff33 	bl	80114a0 <_Bfree>
 801063a:	e695      	b.n	8010368 <_dtoa_r+0x6a0>
 801063c:	2600      	movs	r6, #0
 801063e:	4637      	mov	r7, r6
 8010640:	e7e1      	b.n	8010606 <_dtoa_r+0x93e>
 8010642:	9700      	str	r7, [sp, #0]
 8010644:	4637      	mov	r7, r6
 8010646:	e599      	b.n	801017c <_dtoa_r+0x4b4>
 8010648:	40240000 	.word	0x40240000
 801064c:	9b08      	ldr	r3, [sp, #32]
 801064e:	2b00      	cmp	r3, #0
 8010650:	f000 80ca 	beq.w	80107e8 <_dtoa_r+0xb20>
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	9302      	str	r3, [sp, #8]
 8010658:	2d00      	cmp	r5, #0
 801065a:	dd05      	ble.n	8010668 <_dtoa_r+0x9a0>
 801065c:	4639      	mov	r1, r7
 801065e:	462a      	mov	r2, r5
 8010660:	4620      	mov	r0, r4
 8010662:	f001 f939 	bl	80118d8 <__lshift>
 8010666:	4607      	mov	r7, r0
 8010668:	f1b8 0f00 	cmp.w	r8, #0
 801066c:	d05b      	beq.n	8010726 <_dtoa_r+0xa5e>
 801066e:	6879      	ldr	r1, [r7, #4]
 8010670:	4620      	mov	r0, r4
 8010672:	f000 fed5 	bl	8011420 <_Balloc>
 8010676:	4605      	mov	r5, r0
 8010678:	b928      	cbnz	r0, 8010686 <_dtoa_r+0x9be>
 801067a:	4b87      	ldr	r3, [pc, #540]	; (8010898 <_dtoa_r+0xbd0>)
 801067c:	4602      	mov	r2, r0
 801067e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010682:	f7ff bb3b 	b.w	800fcfc <_dtoa_r+0x34>
 8010686:	693a      	ldr	r2, [r7, #16]
 8010688:	3202      	adds	r2, #2
 801068a:	0092      	lsls	r2, r2, #2
 801068c:	f107 010c 	add.w	r1, r7, #12
 8010690:	300c      	adds	r0, #12
 8010692:	f000 feab 	bl	80113ec <memcpy>
 8010696:	2201      	movs	r2, #1
 8010698:	4629      	mov	r1, r5
 801069a:	4620      	mov	r0, r4
 801069c:	f001 f91c 	bl	80118d8 <__lshift>
 80106a0:	9b01      	ldr	r3, [sp, #4]
 80106a2:	f103 0901 	add.w	r9, r3, #1
 80106a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80106aa:	4413      	add	r3, r2
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	f00a 0301 	and.w	r3, sl, #1
 80106b2:	46b8      	mov	r8, r7
 80106b4:	9304      	str	r3, [sp, #16]
 80106b6:	4607      	mov	r7, r0
 80106b8:	4631      	mov	r1, r6
 80106ba:	ee18 0a10 	vmov	r0, s16
 80106be:	f7ff fa77 	bl	800fbb0 <quorem>
 80106c2:	4641      	mov	r1, r8
 80106c4:	9002      	str	r0, [sp, #8]
 80106c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80106ca:	ee18 0a10 	vmov	r0, s16
 80106ce:	f001 f973 	bl	80119b8 <__mcmp>
 80106d2:	463a      	mov	r2, r7
 80106d4:	9003      	str	r0, [sp, #12]
 80106d6:	4631      	mov	r1, r6
 80106d8:	4620      	mov	r0, r4
 80106da:	f001 f989 	bl	80119f0 <__mdiff>
 80106de:	68c2      	ldr	r2, [r0, #12]
 80106e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80106e4:	4605      	mov	r5, r0
 80106e6:	bb02      	cbnz	r2, 801072a <_dtoa_r+0xa62>
 80106e8:	4601      	mov	r1, r0
 80106ea:	ee18 0a10 	vmov	r0, s16
 80106ee:	f001 f963 	bl	80119b8 <__mcmp>
 80106f2:	4602      	mov	r2, r0
 80106f4:	4629      	mov	r1, r5
 80106f6:	4620      	mov	r0, r4
 80106f8:	9207      	str	r2, [sp, #28]
 80106fa:	f000 fed1 	bl	80114a0 <_Bfree>
 80106fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010702:	ea43 0102 	orr.w	r1, r3, r2
 8010706:	9b04      	ldr	r3, [sp, #16]
 8010708:	430b      	orrs	r3, r1
 801070a:	464d      	mov	r5, r9
 801070c:	d10f      	bne.n	801072e <_dtoa_r+0xa66>
 801070e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010712:	d02a      	beq.n	801076a <_dtoa_r+0xaa2>
 8010714:	9b03      	ldr	r3, [sp, #12]
 8010716:	2b00      	cmp	r3, #0
 8010718:	dd02      	ble.n	8010720 <_dtoa_r+0xa58>
 801071a:	9b02      	ldr	r3, [sp, #8]
 801071c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010720:	f88b a000 	strb.w	sl, [fp]
 8010724:	e775      	b.n	8010612 <_dtoa_r+0x94a>
 8010726:	4638      	mov	r0, r7
 8010728:	e7ba      	b.n	80106a0 <_dtoa_r+0x9d8>
 801072a:	2201      	movs	r2, #1
 801072c:	e7e2      	b.n	80106f4 <_dtoa_r+0xa2c>
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	db04      	blt.n	801073e <_dtoa_r+0xa76>
 8010734:	9906      	ldr	r1, [sp, #24]
 8010736:	430b      	orrs	r3, r1
 8010738:	9904      	ldr	r1, [sp, #16]
 801073a:	430b      	orrs	r3, r1
 801073c:	d122      	bne.n	8010784 <_dtoa_r+0xabc>
 801073e:	2a00      	cmp	r2, #0
 8010740:	ddee      	ble.n	8010720 <_dtoa_r+0xa58>
 8010742:	ee18 1a10 	vmov	r1, s16
 8010746:	2201      	movs	r2, #1
 8010748:	4620      	mov	r0, r4
 801074a:	f001 f8c5 	bl	80118d8 <__lshift>
 801074e:	4631      	mov	r1, r6
 8010750:	ee08 0a10 	vmov	s16, r0
 8010754:	f001 f930 	bl	80119b8 <__mcmp>
 8010758:	2800      	cmp	r0, #0
 801075a:	dc03      	bgt.n	8010764 <_dtoa_r+0xa9c>
 801075c:	d1e0      	bne.n	8010720 <_dtoa_r+0xa58>
 801075e:	f01a 0f01 	tst.w	sl, #1
 8010762:	d0dd      	beq.n	8010720 <_dtoa_r+0xa58>
 8010764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010768:	d1d7      	bne.n	801071a <_dtoa_r+0xa52>
 801076a:	2339      	movs	r3, #57	; 0x39
 801076c:	f88b 3000 	strb.w	r3, [fp]
 8010770:	462b      	mov	r3, r5
 8010772:	461d      	mov	r5, r3
 8010774:	3b01      	subs	r3, #1
 8010776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801077a:	2a39      	cmp	r2, #57	; 0x39
 801077c:	d071      	beq.n	8010862 <_dtoa_r+0xb9a>
 801077e:	3201      	adds	r2, #1
 8010780:	701a      	strb	r2, [r3, #0]
 8010782:	e746      	b.n	8010612 <_dtoa_r+0x94a>
 8010784:	2a00      	cmp	r2, #0
 8010786:	dd07      	ble.n	8010798 <_dtoa_r+0xad0>
 8010788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801078c:	d0ed      	beq.n	801076a <_dtoa_r+0xaa2>
 801078e:	f10a 0301 	add.w	r3, sl, #1
 8010792:	f88b 3000 	strb.w	r3, [fp]
 8010796:	e73c      	b.n	8010612 <_dtoa_r+0x94a>
 8010798:	9b05      	ldr	r3, [sp, #20]
 801079a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801079e:	4599      	cmp	r9, r3
 80107a0:	d047      	beq.n	8010832 <_dtoa_r+0xb6a>
 80107a2:	ee18 1a10 	vmov	r1, s16
 80107a6:	2300      	movs	r3, #0
 80107a8:	220a      	movs	r2, #10
 80107aa:	4620      	mov	r0, r4
 80107ac:	f000 fe9a 	bl	80114e4 <__multadd>
 80107b0:	45b8      	cmp	r8, r7
 80107b2:	ee08 0a10 	vmov	s16, r0
 80107b6:	f04f 0300 	mov.w	r3, #0
 80107ba:	f04f 020a 	mov.w	r2, #10
 80107be:	4641      	mov	r1, r8
 80107c0:	4620      	mov	r0, r4
 80107c2:	d106      	bne.n	80107d2 <_dtoa_r+0xb0a>
 80107c4:	f000 fe8e 	bl	80114e4 <__multadd>
 80107c8:	4680      	mov	r8, r0
 80107ca:	4607      	mov	r7, r0
 80107cc:	f109 0901 	add.w	r9, r9, #1
 80107d0:	e772      	b.n	80106b8 <_dtoa_r+0x9f0>
 80107d2:	f000 fe87 	bl	80114e4 <__multadd>
 80107d6:	4639      	mov	r1, r7
 80107d8:	4680      	mov	r8, r0
 80107da:	2300      	movs	r3, #0
 80107dc:	220a      	movs	r2, #10
 80107de:	4620      	mov	r0, r4
 80107e0:	f000 fe80 	bl	80114e4 <__multadd>
 80107e4:	4607      	mov	r7, r0
 80107e6:	e7f1      	b.n	80107cc <_dtoa_r+0xb04>
 80107e8:	9b03      	ldr	r3, [sp, #12]
 80107ea:	9302      	str	r3, [sp, #8]
 80107ec:	9d01      	ldr	r5, [sp, #4]
 80107ee:	ee18 0a10 	vmov	r0, s16
 80107f2:	4631      	mov	r1, r6
 80107f4:	f7ff f9dc 	bl	800fbb0 <quorem>
 80107f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80107fc:	9b01      	ldr	r3, [sp, #4]
 80107fe:	f805 ab01 	strb.w	sl, [r5], #1
 8010802:	1aea      	subs	r2, r5, r3
 8010804:	9b02      	ldr	r3, [sp, #8]
 8010806:	4293      	cmp	r3, r2
 8010808:	dd09      	ble.n	801081e <_dtoa_r+0xb56>
 801080a:	ee18 1a10 	vmov	r1, s16
 801080e:	2300      	movs	r3, #0
 8010810:	220a      	movs	r2, #10
 8010812:	4620      	mov	r0, r4
 8010814:	f000 fe66 	bl	80114e4 <__multadd>
 8010818:	ee08 0a10 	vmov	s16, r0
 801081c:	e7e7      	b.n	80107ee <_dtoa_r+0xb26>
 801081e:	9b02      	ldr	r3, [sp, #8]
 8010820:	2b00      	cmp	r3, #0
 8010822:	bfc8      	it	gt
 8010824:	461d      	movgt	r5, r3
 8010826:	9b01      	ldr	r3, [sp, #4]
 8010828:	bfd8      	it	le
 801082a:	2501      	movle	r5, #1
 801082c:	441d      	add	r5, r3
 801082e:	f04f 0800 	mov.w	r8, #0
 8010832:	ee18 1a10 	vmov	r1, s16
 8010836:	2201      	movs	r2, #1
 8010838:	4620      	mov	r0, r4
 801083a:	f001 f84d 	bl	80118d8 <__lshift>
 801083e:	4631      	mov	r1, r6
 8010840:	ee08 0a10 	vmov	s16, r0
 8010844:	f001 f8b8 	bl	80119b8 <__mcmp>
 8010848:	2800      	cmp	r0, #0
 801084a:	dc91      	bgt.n	8010770 <_dtoa_r+0xaa8>
 801084c:	d102      	bne.n	8010854 <_dtoa_r+0xb8c>
 801084e:	f01a 0f01 	tst.w	sl, #1
 8010852:	d18d      	bne.n	8010770 <_dtoa_r+0xaa8>
 8010854:	462b      	mov	r3, r5
 8010856:	461d      	mov	r5, r3
 8010858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801085c:	2a30      	cmp	r2, #48	; 0x30
 801085e:	d0fa      	beq.n	8010856 <_dtoa_r+0xb8e>
 8010860:	e6d7      	b.n	8010612 <_dtoa_r+0x94a>
 8010862:	9a01      	ldr	r2, [sp, #4]
 8010864:	429a      	cmp	r2, r3
 8010866:	d184      	bne.n	8010772 <_dtoa_r+0xaaa>
 8010868:	9b00      	ldr	r3, [sp, #0]
 801086a:	3301      	adds	r3, #1
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	2331      	movs	r3, #49	; 0x31
 8010870:	7013      	strb	r3, [r2, #0]
 8010872:	e6ce      	b.n	8010612 <_dtoa_r+0x94a>
 8010874:	4b09      	ldr	r3, [pc, #36]	; (801089c <_dtoa_r+0xbd4>)
 8010876:	f7ff ba95 	b.w	800fda4 <_dtoa_r+0xdc>
 801087a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801087c:	2b00      	cmp	r3, #0
 801087e:	f47f aa6e 	bne.w	800fd5e <_dtoa_r+0x96>
 8010882:	4b07      	ldr	r3, [pc, #28]	; (80108a0 <_dtoa_r+0xbd8>)
 8010884:	f7ff ba8e 	b.w	800fda4 <_dtoa_r+0xdc>
 8010888:	9b02      	ldr	r3, [sp, #8]
 801088a:	2b00      	cmp	r3, #0
 801088c:	dcae      	bgt.n	80107ec <_dtoa_r+0xb24>
 801088e:	9b06      	ldr	r3, [sp, #24]
 8010890:	2b02      	cmp	r3, #2
 8010892:	f73f aea8 	bgt.w	80105e6 <_dtoa_r+0x91e>
 8010896:	e7a9      	b.n	80107ec <_dtoa_r+0xb24>
 8010898:	08020238 	.word	0x08020238
 801089c:	08020040 	.word	0x08020040
 80108a0:	080201b9 	.word	0x080201b9

080108a4 <__sflush_r>:
 80108a4:	898a      	ldrh	r2, [r1, #12]
 80108a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108aa:	4605      	mov	r5, r0
 80108ac:	0710      	lsls	r0, r2, #28
 80108ae:	460c      	mov	r4, r1
 80108b0:	d458      	bmi.n	8010964 <__sflush_r+0xc0>
 80108b2:	684b      	ldr	r3, [r1, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	dc05      	bgt.n	80108c4 <__sflush_r+0x20>
 80108b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	dc02      	bgt.n	80108c4 <__sflush_r+0x20>
 80108be:	2000      	movs	r0, #0
 80108c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108c6:	2e00      	cmp	r6, #0
 80108c8:	d0f9      	beq.n	80108be <__sflush_r+0x1a>
 80108ca:	2300      	movs	r3, #0
 80108cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108d0:	682f      	ldr	r7, [r5, #0]
 80108d2:	602b      	str	r3, [r5, #0]
 80108d4:	d032      	beq.n	801093c <__sflush_r+0x98>
 80108d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108d8:	89a3      	ldrh	r3, [r4, #12]
 80108da:	075a      	lsls	r2, r3, #29
 80108dc:	d505      	bpl.n	80108ea <__sflush_r+0x46>
 80108de:	6863      	ldr	r3, [r4, #4]
 80108e0:	1ac0      	subs	r0, r0, r3
 80108e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108e4:	b10b      	cbz	r3, 80108ea <__sflush_r+0x46>
 80108e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108e8:	1ac0      	subs	r0, r0, r3
 80108ea:	2300      	movs	r3, #0
 80108ec:	4602      	mov	r2, r0
 80108ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f0:	6a21      	ldr	r1, [r4, #32]
 80108f2:	4628      	mov	r0, r5
 80108f4:	47b0      	blx	r6
 80108f6:	1c43      	adds	r3, r0, #1
 80108f8:	89a3      	ldrh	r3, [r4, #12]
 80108fa:	d106      	bne.n	801090a <__sflush_r+0x66>
 80108fc:	6829      	ldr	r1, [r5, #0]
 80108fe:	291d      	cmp	r1, #29
 8010900:	d82c      	bhi.n	801095c <__sflush_r+0xb8>
 8010902:	4a2a      	ldr	r2, [pc, #168]	; (80109ac <__sflush_r+0x108>)
 8010904:	40ca      	lsrs	r2, r1
 8010906:	07d6      	lsls	r6, r2, #31
 8010908:	d528      	bpl.n	801095c <__sflush_r+0xb8>
 801090a:	2200      	movs	r2, #0
 801090c:	6062      	str	r2, [r4, #4]
 801090e:	04d9      	lsls	r1, r3, #19
 8010910:	6922      	ldr	r2, [r4, #16]
 8010912:	6022      	str	r2, [r4, #0]
 8010914:	d504      	bpl.n	8010920 <__sflush_r+0x7c>
 8010916:	1c42      	adds	r2, r0, #1
 8010918:	d101      	bne.n	801091e <__sflush_r+0x7a>
 801091a:	682b      	ldr	r3, [r5, #0]
 801091c:	b903      	cbnz	r3, 8010920 <__sflush_r+0x7c>
 801091e:	6560      	str	r0, [r4, #84]	; 0x54
 8010920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010922:	602f      	str	r7, [r5, #0]
 8010924:	2900      	cmp	r1, #0
 8010926:	d0ca      	beq.n	80108be <__sflush_r+0x1a>
 8010928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801092c:	4299      	cmp	r1, r3
 801092e:	d002      	beq.n	8010936 <__sflush_r+0x92>
 8010930:	4628      	mov	r0, r5
 8010932:	f7fd fbe7 	bl	800e104 <_free_r>
 8010936:	2000      	movs	r0, #0
 8010938:	6360      	str	r0, [r4, #52]	; 0x34
 801093a:	e7c1      	b.n	80108c0 <__sflush_r+0x1c>
 801093c:	6a21      	ldr	r1, [r4, #32]
 801093e:	2301      	movs	r3, #1
 8010940:	4628      	mov	r0, r5
 8010942:	47b0      	blx	r6
 8010944:	1c41      	adds	r1, r0, #1
 8010946:	d1c7      	bne.n	80108d8 <__sflush_r+0x34>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d0c4      	beq.n	80108d8 <__sflush_r+0x34>
 801094e:	2b1d      	cmp	r3, #29
 8010950:	d001      	beq.n	8010956 <__sflush_r+0xb2>
 8010952:	2b16      	cmp	r3, #22
 8010954:	d101      	bne.n	801095a <__sflush_r+0xb6>
 8010956:	602f      	str	r7, [r5, #0]
 8010958:	e7b1      	b.n	80108be <__sflush_r+0x1a>
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010960:	81a3      	strh	r3, [r4, #12]
 8010962:	e7ad      	b.n	80108c0 <__sflush_r+0x1c>
 8010964:	690f      	ldr	r7, [r1, #16]
 8010966:	2f00      	cmp	r7, #0
 8010968:	d0a9      	beq.n	80108be <__sflush_r+0x1a>
 801096a:	0793      	lsls	r3, r2, #30
 801096c:	680e      	ldr	r6, [r1, #0]
 801096e:	bf08      	it	eq
 8010970:	694b      	ldreq	r3, [r1, #20]
 8010972:	600f      	str	r7, [r1, #0]
 8010974:	bf18      	it	ne
 8010976:	2300      	movne	r3, #0
 8010978:	eba6 0807 	sub.w	r8, r6, r7
 801097c:	608b      	str	r3, [r1, #8]
 801097e:	f1b8 0f00 	cmp.w	r8, #0
 8010982:	dd9c      	ble.n	80108be <__sflush_r+0x1a>
 8010984:	6a21      	ldr	r1, [r4, #32]
 8010986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010988:	4643      	mov	r3, r8
 801098a:	463a      	mov	r2, r7
 801098c:	4628      	mov	r0, r5
 801098e:	47b0      	blx	r6
 8010990:	2800      	cmp	r0, #0
 8010992:	dc06      	bgt.n	80109a2 <__sflush_r+0xfe>
 8010994:	89a3      	ldrh	r3, [r4, #12]
 8010996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801099a:	81a3      	strh	r3, [r4, #12]
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e78e      	b.n	80108c0 <__sflush_r+0x1c>
 80109a2:	4407      	add	r7, r0
 80109a4:	eba8 0800 	sub.w	r8, r8, r0
 80109a8:	e7e9      	b.n	801097e <__sflush_r+0xda>
 80109aa:	bf00      	nop
 80109ac:	20400001 	.word	0x20400001

080109b0 <_fflush_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	690b      	ldr	r3, [r1, #16]
 80109b4:	4605      	mov	r5, r0
 80109b6:	460c      	mov	r4, r1
 80109b8:	b913      	cbnz	r3, 80109c0 <_fflush_r+0x10>
 80109ba:	2500      	movs	r5, #0
 80109bc:	4628      	mov	r0, r5
 80109be:	bd38      	pop	{r3, r4, r5, pc}
 80109c0:	b118      	cbz	r0, 80109ca <_fflush_r+0x1a>
 80109c2:	6983      	ldr	r3, [r0, #24]
 80109c4:	b90b      	cbnz	r3, 80109ca <_fflush_r+0x1a>
 80109c6:	f000 f887 	bl	8010ad8 <__sinit>
 80109ca:	4b14      	ldr	r3, [pc, #80]	; (8010a1c <_fflush_r+0x6c>)
 80109cc:	429c      	cmp	r4, r3
 80109ce:	d11b      	bne.n	8010a08 <_fflush_r+0x58>
 80109d0:	686c      	ldr	r4, [r5, #4]
 80109d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d0ef      	beq.n	80109ba <_fflush_r+0xa>
 80109da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109dc:	07d0      	lsls	r0, r2, #31
 80109de:	d404      	bmi.n	80109ea <_fflush_r+0x3a>
 80109e0:	0599      	lsls	r1, r3, #22
 80109e2:	d402      	bmi.n	80109ea <_fflush_r+0x3a>
 80109e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109e6:	f000 fc88 	bl	80112fa <__retarget_lock_acquire_recursive>
 80109ea:	4628      	mov	r0, r5
 80109ec:	4621      	mov	r1, r4
 80109ee:	f7ff ff59 	bl	80108a4 <__sflush_r>
 80109f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109f4:	07da      	lsls	r2, r3, #31
 80109f6:	4605      	mov	r5, r0
 80109f8:	d4e0      	bmi.n	80109bc <_fflush_r+0xc>
 80109fa:	89a3      	ldrh	r3, [r4, #12]
 80109fc:	059b      	lsls	r3, r3, #22
 80109fe:	d4dd      	bmi.n	80109bc <_fflush_r+0xc>
 8010a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a02:	f000 fc7b 	bl	80112fc <__retarget_lock_release_recursive>
 8010a06:	e7d9      	b.n	80109bc <_fflush_r+0xc>
 8010a08:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <_fflush_r+0x70>)
 8010a0a:	429c      	cmp	r4, r3
 8010a0c:	d101      	bne.n	8010a12 <_fflush_r+0x62>
 8010a0e:	68ac      	ldr	r4, [r5, #8]
 8010a10:	e7df      	b.n	80109d2 <_fflush_r+0x22>
 8010a12:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <_fflush_r+0x74>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	bf08      	it	eq
 8010a18:	68ec      	ldreq	r4, [r5, #12]
 8010a1a:	e7da      	b.n	80109d2 <_fflush_r+0x22>
 8010a1c:	0802026c 	.word	0x0802026c
 8010a20:	0802028c 	.word	0x0802028c
 8010a24:	0802024c 	.word	0x0802024c

08010a28 <std>:
 8010a28:	2300      	movs	r3, #0
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8010a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a36:	6083      	str	r3, [r0, #8]
 8010a38:	8181      	strh	r1, [r0, #12]
 8010a3a:	6643      	str	r3, [r0, #100]	; 0x64
 8010a3c:	81c2      	strh	r2, [r0, #14]
 8010a3e:	6183      	str	r3, [r0, #24]
 8010a40:	4619      	mov	r1, r3
 8010a42:	2208      	movs	r2, #8
 8010a44:	305c      	adds	r0, #92	; 0x5c
 8010a46:	f7fd fb55 	bl	800e0f4 <memset>
 8010a4a:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <std+0x38>)
 8010a4c:	6263      	str	r3, [r4, #36]	; 0x24
 8010a4e:	4b05      	ldr	r3, [pc, #20]	; (8010a64 <std+0x3c>)
 8010a50:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a52:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <std+0x40>)
 8010a54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a56:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <std+0x44>)
 8010a58:	6224      	str	r4, [r4, #32]
 8010a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8010a5c:	bd10      	pop	{r4, pc}
 8010a5e:	bf00      	nop
 8010a60:	080120a5 	.word	0x080120a5
 8010a64:	080120c7 	.word	0x080120c7
 8010a68:	080120ff 	.word	0x080120ff
 8010a6c:	08012123 	.word	0x08012123

08010a70 <_cleanup_r>:
 8010a70:	4901      	ldr	r1, [pc, #4]	; (8010a78 <_cleanup_r+0x8>)
 8010a72:	f000 b8af 	b.w	8010bd4 <_fwalk_reent>
 8010a76:	bf00      	nop
 8010a78:	080109b1 	.word	0x080109b1

08010a7c <__sfmoreglue>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	2268      	movs	r2, #104	; 0x68
 8010a80:	1e4d      	subs	r5, r1, #1
 8010a82:	4355      	muls	r5, r2
 8010a84:	460e      	mov	r6, r1
 8010a86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a8a:	f7fd fba7 	bl	800e1dc <_malloc_r>
 8010a8e:	4604      	mov	r4, r0
 8010a90:	b140      	cbz	r0, 8010aa4 <__sfmoreglue+0x28>
 8010a92:	2100      	movs	r1, #0
 8010a94:	e9c0 1600 	strd	r1, r6, [r0]
 8010a98:	300c      	adds	r0, #12
 8010a9a:	60a0      	str	r0, [r4, #8]
 8010a9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010aa0:	f7fd fb28 	bl	800e0f4 <memset>
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}

08010aa8 <__sfp_lock_acquire>:
 8010aa8:	4801      	ldr	r0, [pc, #4]	; (8010ab0 <__sfp_lock_acquire+0x8>)
 8010aaa:	f000 bc26 	b.w	80112fa <__retarget_lock_acquire_recursive>
 8010aae:	bf00      	nop
 8010ab0:	2000cec1 	.word	0x2000cec1

08010ab4 <__sfp_lock_release>:
 8010ab4:	4801      	ldr	r0, [pc, #4]	; (8010abc <__sfp_lock_release+0x8>)
 8010ab6:	f000 bc21 	b.w	80112fc <__retarget_lock_release_recursive>
 8010aba:	bf00      	nop
 8010abc:	2000cec1 	.word	0x2000cec1

08010ac0 <__sinit_lock_acquire>:
 8010ac0:	4801      	ldr	r0, [pc, #4]	; (8010ac8 <__sinit_lock_acquire+0x8>)
 8010ac2:	f000 bc1a 	b.w	80112fa <__retarget_lock_acquire_recursive>
 8010ac6:	bf00      	nop
 8010ac8:	2000cec2 	.word	0x2000cec2

08010acc <__sinit_lock_release>:
 8010acc:	4801      	ldr	r0, [pc, #4]	; (8010ad4 <__sinit_lock_release+0x8>)
 8010ace:	f000 bc15 	b.w	80112fc <__retarget_lock_release_recursive>
 8010ad2:	bf00      	nop
 8010ad4:	2000cec2 	.word	0x2000cec2

08010ad8 <__sinit>:
 8010ad8:	b510      	push	{r4, lr}
 8010ada:	4604      	mov	r4, r0
 8010adc:	f7ff fff0 	bl	8010ac0 <__sinit_lock_acquire>
 8010ae0:	69a3      	ldr	r3, [r4, #24]
 8010ae2:	b11b      	cbz	r3, 8010aec <__sinit+0x14>
 8010ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ae8:	f7ff bff0 	b.w	8010acc <__sinit_lock_release>
 8010aec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010af0:	6523      	str	r3, [r4, #80]	; 0x50
 8010af2:	4b13      	ldr	r3, [pc, #76]	; (8010b40 <__sinit+0x68>)
 8010af4:	4a13      	ldr	r2, [pc, #76]	; (8010b44 <__sinit+0x6c>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010afa:	42a3      	cmp	r3, r4
 8010afc:	bf04      	itt	eq
 8010afe:	2301      	moveq	r3, #1
 8010b00:	61a3      	streq	r3, [r4, #24]
 8010b02:	4620      	mov	r0, r4
 8010b04:	f000 f820 	bl	8010b48 <__sfp>
 8010b08:	6060      	str	r0, [r4, #4]
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f000 f81c 	bl	8010b48 <__sfp>
 8010b10:	60a0      	str	r0, [r4, #8]
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 f818 	bl	8010b48 <__sfp>
 8010b18:	2200      	movs	r2, #0
 8010b1a:	60e0      	str	r0, [r4, #12]
 8010b1c:	2104      	movs	r1, #4
 8010b1e:	6860      	ldr	r0, [r4, #4]
 8010b20:	f7ff ff82 	bl	8010a28 <std>
 8010b24:	68a0      	ldr	r0, [r4, #8]
 8010b26:	2201      	movs	r2, #1
 8010b28:	2109      	movs	r1, #9
 8010b2a:	f7ff ff7d 	bl	8010a28 <std>
 8010b2e:	68e0      	ldr	r0, [r4, #12]
 8010b30:	2202      	movs	r2, #2
 8010b32:	2112      	movs	r1, #18
 8010b34:	f7ff ff78 	bl	8010a28 <std>
 8010b38:	2301      	movs	r3, #1
 8010b3a:	61a3      	str	r3, [r4, #24]
 8010b3c:	e7d2      	b.n	8010ae4 <__sinit+0xc>
 8010b3e:	bf00      	nop
 8010b40:	0802002c 	.word	0x0802002c
 8010b44:	08010a71 	.word	0x08010a71

08010b48 <__sfp>:
 8010b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4a:	4607      	mov	r7, r0
 8010b4c:	f7ff ffac 	bl	8010aa8 <__sfp_lock_acquire>
 8010b50:	4b1e      	ldr	r3, [pc, #120]	; (8010bcc <__sfp+0x84>)
 8010b52:	681e      	ldr	r6, [r3, #0]
 8010b54:	69b3      	ldr	r3, [r6, #24]
 8010b56:	b913      	cbnz	r3, 8010b5e <__sfp+0x16>
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f7ff ffbd 	bl	8010ad8 <__sinit>
 8010b5e:	3648      	adds	r6, #72	; 0x48
 8010b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b64:	3b01      	subs	r3, #1
 8010b66:	d503      	bpl.n	8010b70 <__sfp+0x28>
 8010b68:	6833      	ldr	r3, [r6, #0]
 8010b6a:	b30b      	cbz	r3, 8010bb0 <__sfp+0x68>
 8010b6c:	6836      	ldr	r6, [r6, #0]
 8010b6e:	e7f7      	b.n	8010b60 <__sfp+0x18>
 8010b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b74:	b9d5      	cbnz	r5, 8010bac <__sfp+0x64>
 8010b76:	4b16      	ldr	r3, [pc, #88]	; (8010bd0 <__sfp+0x88>)
 8010b78:	60e3      	str	r3, [r4, #12]
 8010b7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b7e:	6665      	str	r5, [r4, #100]	; 0x64
 8010b80:	f000 fbba 	bl	80112f8 <__retarget_lock_init_recursive>
 8010b84:	f7ff ff96 	bl	8010ab4 <__sfp_lock_release>
 8010b88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b90:	6025      	str	r5, [r4, #0]
 8010b92:	61a5      	str	r5, [r4, #24]
 8010b94:	2208      	movs	r2, #8
 8010b96:	4629      	mov	r1, r5
 8010b98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b9c:	f7fd faaa 	bl	800e0f4 <memset>
 8010ba0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ba4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ba8:	4620      	mov	r0, r4
 8010baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bac:	3468      	adds	r4, #104	; 0x68
 8010bae:	e7d9      	b.n	8010b64 <__sfp+0x1c>
 8010bb0:	2104      	movs	r1, #4
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	f7ff ff62 	bl	8010a7c <__sfmoreglue>
 8010bb8:	4604      	mov	r4, r0
 8010bba:	6030      	str	r0, [r6, #0]
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d1d5      	bne.n	8010b6c <__sfp+0x24>
 8010bc0:	f7ff ff78 	bl	8010ab4 <__sfp_lock_release>
 8010bc4:	230c      	movs	r3, #12
 8010bc6:	603b      	str	r3, [r7, #0]
 8010bc8:	e7ee      	b.n	8010ba8 <__sfp+0x60>
 8010bca:	bf00      	nop
 8010bcc:	0802002c 	.word	0x0802002c
 8010bd0:	ffff0001 	.word	0xffff0001

08010bd4 <_fwalk_reent>:
 8010bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bd8:	4606      	mov	r6, r0
 8010bda:	4688      	mov	r8, r1
 8010bdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010be0:	2700      	movs	r7, #0
 8010be2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010be6:	f1b9 0901 	subs.w	r9, r9, #1
 8010bea:	d505      	bpl.n	8010bf8 <_fwalk_reent+0x24>
 8010bec:	6824      	ldr	r4, [r4, #0]
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	d1f7      	bne.n	8010be2 <_fwalk_reent+0xe>
 8010bf2:	4638      	mov	r0, r7
 8010bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bf8:	89ab      	ldrh	r3, [r5, #12]
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d907      	bls.n	8010c0e <_fwalk_reent+0x3a>
 8010bfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c02:	3301      	adds	r3, #1
 8010c04:	d003      	beq.n	8010c0e <_fwalk_reent+0x3a>
 8010c06:	4629      	mov	r1, r5
 8010c08:	4630      	mov	r0, r6
 8010c0a:	47c0      	blx	r8
 8010c0c:	4307      	orrs	r7, r0
 8010c0e:	3568      	adds	r5, #104	; 0x68
 8010c10:	e7e9      	b.n	8010be6 <_fwalk_reent+0x12>

08010c12 <rshift>:
 8010c12:	6903      	ldr	r3, [r0, #16]
 8010c14:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c1c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c20:	f100 0414 	add.w	r4, r0, #20
 8010c24:	dd45      	ble.n	8010cb2 <rshift+0xa0>
 8010c26:	f011 011f 	ands.w	r1, r1, #31
 8010c2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c2e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010c32:	d10c      	bne.n	8010c4e <rshift+0x3c>
 8010c34:	f100 0710 	add.w	r7, r0, #16
 8010c38:	4629      	mov	r1, r5
 8010c3a:	42b1      	cmp	r1, r6
 8010c3c:	d334      	bcc.n	8010ca8 <rshift+0x96>
 8010c3e:	1a9b      	subs	r3, r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	1eea      	subs	r2, r5, #3
 8010c44:	4296      	cmp	r6, r2
 8010c46:	bf38      	it	cc
 8010c48:	2300      	movcc	r3, #0
 8010c4a:	4423      	add	r3, r4
 8010c4c:	e015      	b.n	8010c7a <rshift+0x68>
 8010c4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010c52:	f1c1 0820 	rsb	r8, r1, #32
 8010c56:	40cf      	lsrs	r7, r1
 8010c58:	f105 0e04 	add.w	lr, r5, #4
 8010c5c:	46a1      	mov	r9, r4
 8010c5e:	4576      	cmp	r6, lr
 8010c60:	46f4      	mov	ip, lr
 8010c62:	d815      	bhi.n	8010c90 <rshift+0x7e>
 8010c64:	1a9a      	subs	r2, r3, r2
 8010c66:	0092      	lsls	r2, r2, #2
 8010c68:	3a04      	subs	r2, #4
 8010c6a:	3501      	adds	r5, #1
 8010c6c:	42ae      	cmp	r6, r5
 8010c6e:	bf38      	it	cc
 8010c70:	2200      	movcc	r2, #0
 8010c72:	18a3      	adds	r3, r4, r2
 8010c74:	50a7      	str	r7, [r4, r2]
 8010c76:	b107      	cbz	r7, 8010c7a <rshift+0x68>
 8010c78:	3304      	adds	r3, #4
 8010c7a:	1b1a      	subs	r2, r3, r4
 8010c7c:	42a3      	cmp	r3, r4
 8010c7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c82:	bf08      	it	eq
 8010c84:	2300      	moveq	r3, #0
 8010c86:	6102      	str	r2, [r0, #16]
 8010c88:	bf08      	it	eq
 8010c8a:	6143      	streq	r3, [r0, #20]
 8010c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c90:	f8dc c000 	ldr.w	ip, [ip]
 8010c94:	fa0c fc08 	lsl.w	ip, ip, r8
 8010c98:	ea4c 0707 	orr.w	r7, ip, r7
 8010c9c:	f849 7b04 	str.w	r7, [r9], #4
 8010ca0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ca4:	40cf      	lsrs	r7, r1
 8010ca6:	e7da      	b.n	8010c5e <rshift+0x4c>
 8010ca8:	f851 cb04 	ldr.w	ip, [r1], #4
 8010cac:	f847 cf04 	str.w	ip, [r7, #4]!
 8010cb0:	e7c3      	b.n	8010c3a <rshift+0x28>
 8010cb2:	4623      	mov	r3, r4
 8010cb4:	e7e1      	b.n	8010c7a <rshift+0x68>

08010cb6 <__hexdig_fun>:
 8010cb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010cba:	2b09      	cmp	r3, #9
 8010cbc:	d802      	bhi.n	8010cc4 <__hexdig_fun+0xe>
 8010cbe:	3820      	subs	r0, #32
 8010cc0:	b2c0      	uxtb	r0, r0
 8010cc2:	4770      	bx	lr
 8010cc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010cc8:	2b05      	cmp	r3, #5
 8010cca:	d801      	bhi.n	8010cd0 <__hexdig_fun+0x1a>
 8010ccc:	3847      	subs	r0, #71	; 0x47
 8010cce:	e7f7      	b.n	8010cc0 <__hexdig_fun+0xa>
 8010cd0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010cd4:	2b05      	cmp	r3, #5
 8010cd6:	d801      	bhi.n	8010cdc <__hexdig_fun+0x26>
 8010cd8:	3827      	subs	r0, #39	; 0x27
 8010cda:	e7f1      	b.n	8010cc0 <__hexdig_fun+0xa>
 8010cdc:	2000      	movs	r0, #0
 8010cde:	4770      	bx	lr

08010ce0 <__gethex>:
 8010ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce4:	ed2d 8b02 	vpush	{d8}
 8010ce8:	b089      	sub	sp, #36	; 0x24
 8010cea:	ee08 0a10 	vmov	s16, r0
 8010cee:	9304      	str	r3, [sp, #16]
 8010cf0:	4bb4      	ldr	r3, [pc, #720]	; (8010fc4 <__gethex+0x2e4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	468b      	mov	fp, r1
 8010cfa:	4690      	mov	r8, r2
 8010cfc:	f7ef fa7a 	bl	80001f4 <strlen>
 8010d00:	9b01      	ldr	r3, [sp, #4]
 8010d02:	f8db 2000 	ldr.w	r2, [fp]
 8010d06:	4403      	add	r3, r0
 8010d08:	4682      	mov	sl, r0
 8010d0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d0e:	9305      	str	r3, [sp, #20]
 8010d10:	1c93      	adds	r3, r2, #2
 8010d12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d1a:	32fe      	adds	r2, #254	; 0xfe
 8010d1c:	18d1      	adds	r1, r2, r3
 8010d1e:	461f      	mov	r7, r3
 8010d20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d24:	9100      	str	r1, [sp, #0]
 8010d26:	2830      	cmp	r0, #48	; 0x30
 8010d28:	d0f8      	beq.n	8010d1c <__gethex+0x3c>
 8010d2a:	f7ff ffc4 	bl	8010cb6 <__hexdig_fun>
 8010d2e:	4604      	mov	r4, r0
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d13a      	bne.n	8010daa <__gethex+0xca>
 8010d34:	9901      	ldr	r1, [sp, #4]
 8010d36:	4652      	mov	r2, sl
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f001 f9f6 	bl	801212a <strncmp>
 8010d3e:	4605      	mov	r5, r0
 8010d40:	2800      	cmp	r0, #0
 8010d42:	d168      	bne.n	8010e16 <__gethex+0x136>
 8010d44:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010d48:	eb07 060a 	add.w	r6, r7, sl
 8010d4c:	f7ff ffb3 	bl	8010cb6 <__hexdig_fun>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d062      	beq.n	8010e1a <__gethex+0x13a>
 8010d54:	4633      	mov	r3, r6
 8010d56:	7818      	ldrb	r0, [r3, #0]
 8010d58:	2830      	cmp	r0, #48	; 0x30
 8010d5a:	461f      	mov	r7, r3
 8010d5c:	f103 0301 	add.w	r3, r3, #1
 8010d60:	d0f9      	beq.n	8010d56 <__gethex+0x76>
 8010d62:	f7ff ffa8 	bl	8010cb6 <__hexdig_fun>
 8010d66:	2301      	movs	r3, #1
 8010d68:	fab0 f480 	clz	r4, r0
 8010d6c:	0964      	lsrs	r4, r4, #5
 8010d6e:	4635      	mov	r5, r6
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	463a      	mov	r2, r7
 8010d74:	4616      	mov	r6, r2
 8010d76:	3201      	adds	r2, #1
 8010d78:	7830      	ldrb	r0, [r6, #0]
 8010d7a:	f7ff ff9c 	bl	8010cb6 <__hexdig_fun>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d1f8      	bne.n	8010d74 <__gethex+0x94>
 8010d82:	9901      	ldr	r1, [sp, #4]
 8010d84:	4652      	mov	r2, sl
 8010d86:	4630      	mov	r0, r6
 8010d88:	f001 f9cf 	bl	801212a <strncmp>
 8010d8c:	b980      	cbnz	r0, 8010db0 <__gethex+0xd0>
 8010d8e:	b94d      	cbnz	r5, 8010da4 <__gethex+0xc4>
 8010d90:	eb06 050a 	add.w	r5, r6, sl
 8010d94:	462a      	mov	r2, r5
 8010d96:	4616      	mov	r6, r2
 8010d98:	3201      	adds	r2, #1
 8010d9a:	7830      	ldrb	r0, [r6, #0]
 8010d9c:	f7ff ff8b 	bl	8010cb6 <__hexdig_fun>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d1f8      	bne.n	8010d96 <__gethex+0xb6>
 8010da4:	1bad      	subs	r5, r5, r6
 8010da6:	00ad      	lsls	r5, r5, #2
 8010da8:	e004      	b.n	8010db4 <__gethex+0xd4>
 8010daa:	2400      	movs	r4, #0
 8010dac:	4625      	mov	r5, r4
 8010dae:	e7e0      	b.n	8010d72 <__gethex+0x92>
 8010db0:	2d00      	cmp	r5, #0
 8010db2:	d1f7      	bne.n	8010da4 <__gethex+0xc4>
 8010db4:	7833      	ldrb	r3, [r6, #0]
 8010db6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010dba:	2b50      	cmp	r3, #80	; 0x50
 8010dbc:	d13b      	bne.n	8010e36 <__gethex+0x156>
 8010dbe:	7873      	ldrb	r3, [r6, #1]
 8010dc0:	2b2b      	cmp	r3, #43	; 0x2b
 8010dc2:	d02c      	beq.n	8010e1e <__gethex+0x13e>
 8010dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8010dc6:	d02e      	beq.n	8010e26 <__gethex+0x146>
 8010dc8:	1c71      	adds	r1, r6, #1
 8010dca:	f04f 0900 	mov.w	r9, #0
 8010dce:	7808      	ldrb	r0, [r1, #0]
 8010dd0:	f7ff ff71 	bl	8010cb6 <__hexdig_fun>
 8010dd4:	1e43      	subs	r3, r0, #1
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	2b18      	cmp	r3, #24
 8010dda:	d82c      	bhi.n	8010e36 <__gethex+0x156>
 8010ddc:	f1a0 0210 	sub.w	r2, r0, #16
 8010de0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010de4:	f7ff ff67 	bl	8010cb6 <__hexdig_fun>
 8010de8:	1e43      	subs	r3, r0, #1
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	2b18      	cmp	r3, #24
 8010dee:	d91d      	bls.n	8010e2c <__gethex+0x14c>
 8010df0:	f1b9 0f00 	cmp.w	r9, #0
 8010df4:	d000      	beq.n	8010df8 <__gethex+0x118>
 8010df6:	4252      	negs	r2, r2
 8010df8:	4415      	add	r5, r2
 8010dfa:	f8cb 1000 	str.w	r1, [fp]
 8010dfe:	b1e4      	cbz	r4, 8010e3a <__gethex+0x15a>
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	bf14      	ite	ne
 8010e06:	2700      	movne	r7, #0
 8010e08:	2706      	moveq	r7, #6
 8010e0a:	4638      	mov	r0, r7
 8010e0c:	b009      	add	sp, #36	; 0x24
 8010e0e:	ecbd 8b02 	vpop	{d8}
 8010e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e16:	463e      	mov	r6, r7
 8010e18:	4625      	mov	r5, r4
 8010e1a:	2401      	movs	r4, #1
 8010e1c:	e7ca      	b.n	8010db4 <__gethex+0xd4>
 8010e1e:	f04f 0900 	mov.w	r9, #0
 8010e22:	1cb1      	adds	r1, r6, #2
 8010e24:	e7d3      	b.n	8010dce <__gethex+0xee>
 8010e26:	f04f 0901 	mov.w	r9, #1
 8010e2a:	e7fa      	b.n	8010e22 <__gethex+0x142>
 8010e2c:	230a      	movs	r3, #10
 8010e2e:	fb03 0202 	mla	r2, r3, r2, r0
 8010e32:	3a10      	subs	r2, #16
 8010e34:	e7d4      	b.n	8010de0 <__gethex+0x100>
 8010e36:	4631      	mov	r1, r6
 8010e38:	e7df      	b.n	8010dfa <__gethex+0x11a>
 8010e3a:	1bf3      	subs	r3, r6, r7
 8010e3c:	3b01      	subs	r3, #1
 8010e3e:	4621      	mov	r1, r4
 8010e40:	2b07      	cmp	r3, #7
 8010e42:	dc0b      	bgt.n	8010e5c <__gethex+0x17c>
 8010e44:	ee18 0a10 	vmov	r0, s16
 8010e48:	f000 faea 	bl	8011420 <_Balloc>
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	b940      	cbnz	r0, 8010e62 <__gethex+0x182>
 8010e50:	4b5d      	ldr	r3, [pc, #372]	; (8010fc8 <__gethex+0x2e8>)
 8010e52:	4602      	mov	r2, r0
 8010e54:	21de      	movs	r1, #222	; 0xde
 8010e56:	485d      	ldr	r0, [pc, #372]	; (8010fcc <__gethex+0x2ec>)
 8010e58:	f001 f99a 	bl	8012190 <__assert_func>
 8010e5c:	3101      	adds	r1, #1
 8010e5e:	105b      	asrs	r3, r3, #1
 8010e60:	e7ee      	b.n	8010e40 <__gethex+0x160>
 8010e62:	f100 0914 	add.w	r9, r0, #20
 8010e66:	f04f 0b00 	mov.w	fp, #0
 8010e6a:	f1ca 0301 	rsb	r3, sl, #1
 8010e6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e72:	f8cd b000 	str.w	fp, [sp]
 8010e76:	9306      	str	r3, [sp, #24]
 8010e78:	42b7      	cmp	r7, r6
 8010e7a:	d340      	bcc.n	8010efe <__gethex+0x21e>
 8010e7c:	9802      	ldr	r0, [sp, #8]
 8010e7e:	9b00      	ldr	r3, [sp, #0]
 8010e80:	f840 3b04 	str.w	r3, [r0], #4
 8010e84:	eba0 0009 	sub.w	r0, r0, r9
 8010e88:	1080      	asrs	r0, r0, #2
 8010e8a:	0146      	lsls	r6, r0, #5
 8010e8c:	6120      	str	r0, [r4, #16]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 fbb8 	bl	8011604 <__hi0bits>
 8010e94:	1a30      	subs	r0, r6, r0
 8010e96:	f8d8 6000 	ldr.w	r6, [r8]
 8010e9a:	42b0      	cmp	r0, r6
 8010e9c:	dd63      	ble.n	8010f66 <__gethex+0x286>
 8010e9e:	1b87      	subs	r7, r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 ff5c 	bl	8011d60 <__any_on>
 8010ea8:	4682      	mov	sl, r0
 8010eaa:	b1a8      	cbz	r0, 8010ed8 <__gethex+0x1f8>
 8010eac:	1e7b      	subs	r3, r7, #1
 8010eae:	1159      	asrs	r1, r3, #5
 8010eb0:	f003 021f 	and.w	r2, r3, #31
 8010eb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010eb8:	f04f 0a01 	mov.w	sl, #1
 8010ebc:	fa0a f202 	lsl.w	r2, sl, r2
 8010ec0:	420a      	tst	r2, r1
 8010ec2:	d009      	beq.n	8010ed8 <__gethex+0x1f8>
 8010ec4:	4553      	cmp	r3, sl
 8010ec6:	dd05      	ble.n	8010ed4 <__gethex+0x1f4>
 8010ec8:	1eb9      	subs	r1, r7, #2
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f000 ff48 	bl	8011d60 <__any_on>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d145      	bne.n	8010f60 <__gethex+0x280>
 8010ed4:	f04f 0a02 	mov.w	sl, #2
 8010ed8:	4639      	mov	r1, r7
 8010eda:	4620      	mov	r0, r4
 8010edc:	f7ff fe99 	bl	8010c12 <rshift>
 8010ee0:	443d      	add	r5, r7
 8010ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ee6:	42ab      	cmp	r3, r5
 8010ee8:	da4c      	bge.n	8010f84 <__gethex+0x2a4>
 8010eea:	ee18 0a10 	vmov	r0, s16
 8010eee:	4621      	mov	r1, r4
 8010ef0:	f000 fad6 	bl	80114a0 <_Bfree>
 8010ef4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	6013      	str	r3, [r2, #0]
 8010efa:	27a3      	movs	r7, #163	; 0xa3
 8010efc:	e785      	b.n	8010e0a <__gethex+0x12a>
 8010efe:	1e73      	subs	r3, r6, #1
 8010f00:	9a05      	ldr	r2, [sp, #20]
 8010f02:	9303      	str	r3, [sp, #12]
 8010f04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d019      	beq.n	8010f40 <__gethex+0x260>
 8010f0c:	f1bb 0f20 	cmp.w	fp, #32
 8010f10:	d107      	bne.n	8010f22 <__gethex+0x242>
 8010f12:	9b02      	ldr	r3, [sp, #8]
 8010f14:	9a00      	ldr	r2, [sp, #0]
 8010f16:	f843 2b04 	str.w	r2, [r3], #4
 8010f1a:	9302      	str	r3, [sp, #8]
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	469b      	mov	fp, r3
 8010f22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f26:	f7ff fec6 	bl	8010cb6 <__hexdig_fun>
 8010f2a:	9b00      	ldr	r3, [sp, #0]
 8010f2c:	f000 000f 	and.w	r0, r0, #15
 8010f30:	fa00 f00b 	lsl.w	r0, r0, fp
 8010f34:	4303      	orrs	r3, r0
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	f10b 0b04 	add.w	fp, fp, #4
 8010f3c:	9b03      	ldr	r3, [sp, #12]
 8010f3e:	e00d      	b.n	8010f5c <__gethex+0x27c>
 8010f40:	9b03      	ldr	r3, [sp, #12]
 8010f42:	9a06      	ldr	r2, [sp, #24]
 8010f44:	4413      	add	r3, r2
 8010f46:	42bb      	cmp	r3, r7
 8010f48:	d3e0      	bcc.n	8010f0c <__gethex+0x22c>
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	9901      	ldr	r1, [sp, #4]
 8010f4e:	9307      	str	r3, [sp, #28]
 8010f50:	4652      	mov	r2, sl
 8010f52:	f001 f8ea 	bl	801212a <strncmp>
 8010f56:	9b07      	ldr	r3, [sp, #28]
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d1d7      	bne.n	8010f0c <__gethex+0x22c>
 8010f5c:	461e      	mov	r6, r3
 8010f5e:	e78b      	b.n	8010e78 <__gethex+0x198>
 8010f60:	f04f 0a03 	mov.w	sl, #3
 8010f64:	e7b8      	b.n	8010ed8 <__gethex+0x1f8>
 8010f66:	da0a      	bge.n	8010f7e <__gethex+0x29e>
 8010f68:	1a37      	subs	r7, r6, r0
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	ee18 0a10 	vmov	r0, s16
 8010f70:	463a      	mov	r2, r7
 8010f72:	f000 fcb1 	bl	80118d8 <__lshift>
 8010f76:	1bed      	subs	r5, r5, r7
 8010f78:	4604      	mov	r4, r0
 8010f7a:	f100 0914 	add.w	r9, r0, #20
 8010f7e:	f04f 0a00 	mov.w	sl, #0
 8010f82:	e7ae      	b.n	8010ee2 <__gethex+0x202>
 8010f84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010f88:	42a8      	cmp	r0, r5
 8010f8a:	dd72      	ble.n	8011072 <__gethex+0x392>
 8010f8c:	1b45      	subs	r5, r0, r5
 8010f8e:	42ae      	cmp	r6, r5
 8010f90:	dc36      	bgt.n	8011000 <__gethex+0x320>
 8010f92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d02a      	beq.n	8010ff0 <__gethex+0x310>
 8010f9a:	2b03      	cmp	r3, #3
 8010f9c:	d02c      	beq.n	8010ff8 <__gethex+0x318>
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d11c      	bne.n	8010fdc <__gethex+0x2fc>
 8010fa2:	42ae      	cmp	r6, r5
 8010fa4:	d11a      	bne.n	8010fdc <__gethex+0x2fc>
 8010fa6:	2e01      	cmp	r6, #1
 8010fa8:	d112      	bne.n	8010fd0 <__gethex+0x2f0>
 8010faa:	9a04      	ldr	r2, [sp, #16]
 8010fac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010fb0:	6013      	str	r3, [r2, #0]
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	6123      	str	r3, [r4, #16]
 8010fb6:	f8c9 3000 	str.w	r3, [r9]
 8010fba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010fbc:	2762      	movs	r7, #98	; 0x62
 8010fbe:	601c      	str	r4, [r3, #0]
 8010fc0:	e723      	b.n	8010e0a <__gethex+0x12a>
 8010fc2:	bf00      	nop
 8010fc4:	08020314 	.word	0x08020314
 8010fc8:	08020238 	.word	0x08020238
 8010fcc:	080202ac 	.word	0x080202ac
 8010fd0:	1e71      	subs	r1, r6, #1
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f000 fec4 	bl	8011d60 <__any_on>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d1e6      	bne.n	8010faa <__gethex+0x2ca>
 8010fdc:	ee18 0a10 	vmov	r0, s16
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	f000 fa5d 	bl	80114a0 <_Bfree>
 8010fe6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010fe8:	2300      	movs	r3, #0
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	2750      	movs	r7, #80	; 0x50
 8010fee:	e70c      	b.n	8010e0a <__gethex+0x12a>
 8010ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1f2      	bne.n	8010fdc <__gethex+0x2fc>
 8010ff6:	e7d8      	b.n	8010faa <__gethex+0x2ca>
 8010ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1d5      	bne.n	8010faa <__gethex+0x2ca>
 8010ffe:	e7ed      	b.n	8010fdc <__gethex+0x2fc>
 8011000:	1e6f      	subs	r7, r5, #1
 8011002:	f1ba 0f00 	cmp.w	sl, #0
 8011006:	d131      	bne.n	801106c <__gethex+0x38c>
 8011008:	b127      	cbz	r7, 8011014 <__gethex+0x334>
 801100a:	4639      	mov	r1, r7
 801100c:	4620      	mov	r0, r4
 801100e:	f000 fea7 	bl	8011d60 <__any_on>
 8011012:	4682      	mov	sl, r0
 8011014:	117b      	asrs	r3, r7, #5
 8011016:	2101      	movs	r1, #1
 8011018:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801101c:	f007 071f 	and.w	r7, r7, #31
 8011020:	fa01 f707 	lsl.w	r7, r1, r7
 8011024:	421f      	tst	r7, r3
 8011026:	4629      	mov	r1, r5
 8011028:	4620      	mov	r0, r4
 801102a:	bf18      	it	ne
 801102c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011030:	1b76      	subs	r6, r6, r5
 8011032:	f7ff fdee 	bl	8010c12 <rshift>
 8011036:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801103a:	2702      	movs	r7, #2
 801103c:	f1ba 0f00 	cmp.w	sl, #0
 8011040:	d048      	beq.n	80110d4 <__gethex+0x3f4>
 8011042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011046:	2b02      	cmp	r3, #2
 8011048:	d015      	beq.n	8011076 <__gethex+0x396>
 801104a:	2b03      	cmp	r3, #3
 801104c:	d017      	beq.n	801107e <__gethex+0x39e>
 801104e:	2b01      	cmp	r3, #1
 8011050:	d109      	bne.n	8011066 <__gethex+0x386>
 8011052:	f01a 0f02 	tst.w	sl, #2
 8011056:	d006      	beq.n	8011066 <__gethex+0x386>
 8011058:	f8d9 0000 	ldr.w	r0, [r9]
 801105c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011060:	f01a 0f01 	tst.w	sl, #1
 8011064:	d10e      	bne.n	8011084 <__gethex+0x3a4>
 8011066:	f047 0710 	orr.w	r7, r7, #16
 801106a:	e033      	b.n	80110d4 <__gethex+0x3f4>
 801106c:	f04f 0a01 	mov.w	sl, #1
 8011070:	e7d0      	b.n	8011014 <__gethex+0x334>
 8011072:	2701      	movs	r7, #1
 8011074:	e7e2      	b.n	801103c <__gethex+0x35c>
 8011076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011078:	f1c3 0301 	rsb	r3, r3, #1
 801107c:	9315      	str	r3, [sp, #84]	; 0x54
 801107e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011080:	2b00      	cmp	r3, #0
 8011082:	d0f0      	beq.n	8011066 <__gethex+0x386>
 8011084:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011088:	f104 0314 	add.w	r3, r4, #20
 801108c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011090:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011094:	f04f 0c00 	mov.w	ip, #0
 8011098:	4618      	mov	r0, r3
 801109a:	f853 2b04 	ldr.w	r2, [r3], #4
 801109e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80110a2:	d01c      	beq.n	80110de <__gethex+0x3fe>
 80110a4:	3201      	adds	r2, #1
 80110a6:	6002      	str	r2, [r0, #0]
 80110a8:	2f02      	cmp	r7, #2
 80110aa:	f104 0314 	add.w	r3, r4, #20
 80110ae:	d13f      	bne.n	8011130 <__gethex+0x450>
 80110b0:	f8d8 2000 	ldr.w	r2, [r8]
 80110b4:	3a01      	subs	r2, #1
 80110b6:	42b2      	cmp	r2, r6
 80110b8:	d10a      	bne.n	80110d0 <__gethex+0x3f0>
 80110ba:	1171      	asrs	r1, r6, #5
 80110bc:	2201      	movs	r2, #1
 80110be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110c2:	f006 061f 	and.w	r6, r6, #31
 80110c6:	fa02 f606 	lsl.w	r6, r2, r6
 80110ca:	421e      	tst	r6, r3
 80110cc:	bf18      	it	ne
 80110ce:	4617      	movne	r7, r2
 80110d0:	f047 0720 	orr.w	r7, r7, #32
 80110d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110d6:	601c      	str	r4, [r3, #0]
 80110d8:	9b04      	ldr	r3, [sp, #16]
 80110da:	601d      	str	r5, [r3, #0]
 80110dc:	e695      	b.n	8010e0a <__gethex+0x12a>
 80110de:	4299      	cmp	r1, r3
 80110e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80110e4:	d8d8      	bhi.n	8011098 <__gethex+0x3b8>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	459b      	cmp	fp, r3
 80110ea:	db19      	blt.n	8011120 <__gethex+0x440>
 80110ec:	6861      	ldr	r1, [r4, #4]
 80110ee:	ee18 0a10 	vmov	r0, s16
 80110f2:	3101      	adds	r1, #1
 80110f4:	f000 f994 	bl	8011420 <_Balloc>
 80110f8:	4681      	mov	r9, r0
 80110fa:	b918      	cbnz	r0, 8011104 <__gethex+0x424>
 80110fc:	4b1a      	ldr	r3, [pc, #104]	; (8011168 <__gethex+0x488>)
 80110fe:	4602      	mov	r2, r0
 8011100:	2184      	movs	r1, #132	; 0x84
 8011102:	e6a8      	b.n	8010e56 <__gethex+0x176>
 8011104:	6922      	ldr	r2, [r4, #16]
 8011106:	3202      	adds	r2, #2
 8011108:	f104 010c 	add.w	r1, r4, #12
 801110c:	0092      	lsls	r2, r2, #2
 801110e:	300c      	adds	r0, #12
 8011110:	f000 f96c 	bl	80113ec <memcpy>
 8011114:	4621      	mov	r1, r4
 8011116:	ee18 0a10 	vmov	r0, s16
 801111a:	f000 f9c1 	bl	80114a0 <_Bfree>
 801111e:	464c      	mov	r4, r9
 8011120:	6923      	ldr	r3, [r4, #16]
 8011122:	1c5a      	adds	r2, r3, #1
 8011124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011128:	6122      	str	r2, [r4, #16]
 801112a:	2201      	movs	r2, #1
 801112c:	615a      	str	r2, [r3, #20]
 801112e:	e7bb      	b.n	80110a8 <__gethex+0x3c8>
 8011130:	6922      	ldr	r2, [r4, #16]
 8011132:	455a      	cmp	r2, fp
 8011134:	dd0b      	ble.n	801114e <__gethex+0x46e>
 8011136:	2101      	movs	r1, #1
 8011138:	4620      	mov	r0, r4
 801113a:	f7ff fd6a 	bl	8010c12 <rshift>
 801113e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011142:	3501      	adds	r5, #1
 8011144:	42ab      	cmp	r3, r5
 8011146:	f6ff aed0 	blt.w	8010eea <__gethex+0x20a>
 801114a:	2701      	movs	r7, #1
 801114c:	e7c0      	b.n	80110d0 <__gethex+0x3f0>
 801114e:	f016 061f 	ands.w	r6, r6, #31
 8011152:	d0fa      	beq.n	801114a <__gethex+0x46a>
 8011154:	4453      	add	r3, sl
 8011156:	f1c6 0620 	rsb	r6, r6, #32
 801115a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801115e:	f000 fa51 	bl	8011604 <__hi0bits>
 8011162:	42b0      	cmp	r0, r6
 8011164:	dbe7      	blt.n	8011136 <__gethex+0x456>
 8011166:	e7f0      	b.n	801114a <__gethex+0x46a>
 8011168:	08020238 	.word	0x08020238

0801116c <L_shift>:
 801116c:	f1c2 0208 	rsb	r2, r2, #8
 8011170:	0092      	lsls	r2, r2, #2
 8011172:	b570      	push	{r4, r5, r6, lr}
 8011174:	f1c2 0620 	rsb	r6, r2, #32
 8011178:	6843      	ldr	r3, [r0, #4]
 801117a:	6804      	ldr	r4, [r0, #0]
 801117c:	fa03 f506 	lsl.w	r5, r3, r6
 8011180:	432c      	orrs	r4, r5
 8011182:	40d3      	lsrs	r3, r2
 8011184:	6004      	str	r4, [r0, #0]
 8011186:	f840 3f04 	str.w	r3, [r0, #4]!
 801118a:	4288      	cmp	r0, r1
 801118c:	d3f4      	bcc.n	8011178 <L_shift+0xc>
 801118e:	bd70      	pop	{r4, r5, r6, pc}

08011190 <__match>:
 8011190:	b530      	push	{r4, r5, lr}
 8011192:	6803      	ldr	r3, [r0, #0]
 8011194:	3301      	adds	r3, #1
 8011196:	f811 4b01 	ldrb.w	r4, [r1], #1
 801119a:	b914      	cbnz	r4, 80111a2 <__match+0x12>
 801119c:	6003      	str	r3, [r0, #0]
 801119e:	2001      	movs	r0, #1
 80111a0:	bd30      	pop	{r4, r5, pc}
 80111a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80111aa:	2d19      	cmp	r5, #25
 80111ac:	bf98      	it	ls
 80111ae:	3220      	addls	r2, #32
 80111b0:	42a2      	cmp	r2, r4
 80111b2:	d0f0      	beq.n	8011196 <__match+0x6>
 80111b4:	2000      	movs	r0, #0
 80111b6:	e7f3      	b.n	80111a0 <__match+0x10>

080111b8 <__hexnan>:
 80111b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111bc:	680b      	ldr	r3, [r1, #0]
 80111be:	115e      	asrs	r6, r3, #5
 80111c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80111c4:	f013 031f 	ands.w	r3, r3, #31
 80111c8:	b087      	sub	sp, #28
 80111ca:	bf18      	it	ne
 80111cc:	3604      	addne	r6, #4
 80111ce:	2500      	movs	r5, #0
 80111d0:	1f37      	subs	r7, r6, #4
 80111d2:	4690      	mov	r8, r2
 80111d4:	6802      	ldr	r2, [r0, #0]
 80111d6:	9301      	str	r3, [sp, #4]
 80111d8:	4682      	mov	sl, r0
 80111da:	f846 5c04 	str.w	r5, [r6, #-4]
 80111de:	46b9      	mov	r9, r7
 80111e0:	463c      	mov	r4, r7
 80111e2:	9502      	str	r5, [sp, #8]
 80111e4:	46ab      	mov	fp, r5
 80111e6:	7851      	ldrb	r1, [r2, #1]
 80111e8:	1c53      	adds	r3, r2, #1
 80111ea:	9303      	str	r3, [sp, #12]
 80111ec:	b341      	cbz	r1, 8011240 <__hexnan+0x88>
 80111ee:	4608      	mov	r0, r1
 80111f0:	9205      	str	r2, [sp, #20]
 80111f2:	9104      	str	r1, [sp, #16]
 80111f4:	f7ff fd5f 	bl	8010cb6 <__hexdig_fun>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d14f      	bne.n	801129c <__hexnan+0xe4>
 80111fc:	9904      	ldr	r1, [sp, #16]
 80111fe:	9a05      	ldr	r2, [sp, #20]
 8011200:	2920      	cmp	r1, #32
 8011202:	d818      	bhi.n	8011236 <__hexnan+0x7e>
 8011204:	9b02      	ldr	r3, [sp, #8]
 8011206:	459b      	cmp	fp, r3
 8011208:	dd13      	ble.n	8011232 <__hexnan+0x7a>
 801120a:	454c      	cmp	r4, r9
 801120c:	d206      	bcs.n	801121c <__hexnan+0x64>
 801120e:	2d07      	cmp	r5, #7
 8011210:	dc04      	bgt.n	801121c <__hexnan+0x64>
 8011212:	462a      	mov	r2, r5
 8011214:	4649      	mov	r1, r9
 8011216:	4620      	mov	r0, r4
 8011218:	f7ff ffa8 	bl	801116c <L_shift>
 801121c:	4544      	cmp	r4, r8
 801121e:	d950      	bls.n	80112c2 <__hexnan+0x10a>
 8011220:	2300      	movs	r3, #0
 8011222:	f1a4 0904 	sub.w	r9, r4, #4
 8011226:	f844 3c04 	str.w	r3, [r4, #-4]
 801122a:	f8cd b008 	str.w	fp, [sp, #8]
 801122e:	464c      	mov	r4, r9
 8011230:	461d      	mov	r5, r3
 8011232:	9a03      	ldr	r2, [sp, #12]
 8011234:	e7d7      	b.n	80111e6 <__hexnan+0x2e>
 8011236:	2929      	cmp	r1, #41	; 0x29
 8011238:	d156      	bne.n	80112e8 <__hexnan+0x130>
 801123a:	3202      	adds	r2, #2
 801123c:	f8ca 2000 	str.w	r2, [sl]
 8011240:	f1bb 0f00 	cmp.w	fp, #0
 8011244:	d050      	beq.n	80112e8 <__hexnan+0x130>
 8011246:	454c      	cmp	r4, r9
 8011248:	d206      	bcs.n	8011258 <__hexnan+0xa0>
 801124a:	2d07      	cmp	r5, #7
 801124c:	dc04      	bgt.n	8011258 <__hexnan+0xa0>
 801124e:	462a      	mov	r2, r5
 8011250:	4649      	mov	r1, r9
 8011252:	4620      	mov	r0, r4
 8011254:	f7ff ff8a 	bl	801116c <L_shift>
 8011258:	4544      	cmp	r4, r8
 801125a:	d934      	bls.n	80112c6 <__hexnan+0x10e>
 801125c:	f1a8 0204 	sub.w	r2, r8, #4
 8011260:	4623      	mov	r3, r4
 8011262:	f853 1b04 	ldr.w	r1, [r3], #4
 8011266:	f842 1f04 	str.w	r1, [r2, #4]!
 801126a:	429f      	cmp	r7, r3
 801126c:	d2f9      	bcs.n	8011262 <__hexnan+0xaa>
 801126e:	1b3b      	subs	r3, r7, r4
 8011270:	f023 0303 	bic.w	r3, r3, #3
 8011274:	3304      	adds	r3, #4
 8011276:	3401      	adds	r4, #1
 8011278:	3e03      	subs	r6, #3
 801127a:	42b4      	cmp	r4, r6
 801127c:	bf88      	it	hi
 801127e:	2304      	movhi	r3, #4
 8011280:	4443      	add	r3, r8
 8011282:	2200      	movs	r2, #0
 8011284:	f843 2b04 	str.w	r2, [r3], #4
 8011288:	429f      	cmp	r7, r3
 801128a:	d2fb      	bcs.n	8011284 <__hexnan+0xcc>
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	b91b      	cbnz	r3, 8011298 <__hexnan+0xe0>
 8011290:	4547      	cmp	r7, r8
 8011292:	d127      	bne.n	80112e4 <__hexnan+0x12c>
 8011294:	2301      	movs	r3, #1
 8011296:	603b      	str	r3, [r7, #0]
 8011298:	2005      	movs	r0, #5
 801129a:	e026      	b.n	80112ea <__hexnan+0x132>
 801129c:	3501      	adds	r5, #1
 801129e:	2d08      	cmp	r5, #8
 80112a0:	f10b 0b01 	add.w	fp, fp, #1
 80112a4:	dd06      	ble.n	80112b4 <__hexnan+0xfc>
 80112a6:	4544      	cmp	r4, r8
 80112a8:	d9c3      	bls.n	8011232 <__hexnan+0x7a>
 80112aa:	2300      	movs	r3, #0
 80112ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80112b0:	2501      	movs	r5, #1
 80112b2:	3c04      	subs	r4, #4
 80112b4:	6822      	ldr	r2, [r4, #0]
 80112b6:	f000 000f 	and.w	r0, r0, #15
 80112ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80112be:	6022      	str	r2, [r4, #0]
 80112c0:	e7b7      	b.n	8011232 <__hexnan+0x7a>
 80112c2:	2508      	movs	r5, #8
 80112c4:	e7b5      	b.n	8011232 <__hexnan+0x7a>
 80112c6:	9b01      	ldr	r3, [sp, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d0df      	beq.n	801128c <__hexnan+0xd4>
 80112cc:	f04f 32ff 	mov.w	r2, #4294967295
 80112d0:	f1c3 0320 	rsb	r3, r3, #32
 80112d4:	fa22 f303 	lsr.w	r3, r2, r3
 80112d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80112dc:	401a      	ands	r2, r3
 80112de:	f846 2c04 	str.w	r2, [r6, #-4]
 80112e2:	e7d3      	b.n	801128c <__hexnan+0xd4>
 80112e4:	3f04      	subs	r7, #4
 80112e6:	e7d1      	b.n	801128c <__hexnan+0xd4>
 80112e8:	2004      	movs	r0, #4
 80112ea:	b007      	add	sp, #28
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112f0 <_localeconv_r>:
 80112f0:	4800      	ldr	r0, [pc, #0]	; (80112f4 <_localeconv_r+0x4>)
 80112f2:	4770      	bx	lr
 80112f4:	20000220 	.word	0x20000220

080112f8 <__retarget_lock_init_recursive>:
 80112f8:	4770      	bx	lr

080112fa <__retarget_lock_acquire_recursive>:
 80112fa:	4770      	bx	lr

080112fc <__retarget_lock_release_recursive>:
 80112fc:	4770      	bx	lr

080112fe <__swhatbuf_r>:
 80112fe:	b570      	push	{r4, r5, r6, lr}
 8011300:	460e      	mov	r6, r1
 8011302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011306:	2900      	cmp	r1, #0
 8011308:	b096      	sub	sp, #88	; 0x58
 801130a:	4614      	mov	r4, r2
 801130c:	461d      	mov	r5, r3
 801130e:	da08      	bge.n	8011322 <__swhatbuf_r+0x24>
 8011310:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	602a      	str	r2, [r5, #0]
 8011318:	061a      	lsls	r2, r3, #24
 801131a:	d410      	bmi.n	801133e <__swhatbuf_r+0x40>
 801131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011320:	e00e      	b.n	8011340 <__swhatbuf_r+0x42>
 8011322:	466a      	mov	r2, sp
 8011324:	f000 ff74 	bl	8012210 <_fstat_r>
 8011328:	2800      	cmp	r0, #0
 801132a:	dbf1      	blt.n	8011310 <__swhatbuf_r+0x12>
 801132c:	9a01      	ldr	r2, [sp, #4]
 801132e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011336:	425a      	negs	r2, r3
 8011338:	415a      	adcs	r2, r3
 801133a:	602a      	str	r2, [r5, #0]
 801133c:	e7ee      	b.n	801131c <__swhatbuf_r+0x1e>
 801133e:	2340      	movs	r3, #64	; 0x40
 8011340:	2000      	movs	r0, #0
 8011342:	6023      	str	r3, [r4, #0]
 8011344:	b016      	add	sp, #88	; 0x58
 8011346:	bd70      	pop	{r4, r5, r6, pc}

08011348 <__smakebuf_r>:
 8011348:	898b      	ldrh	r3, [r1, #12]
 801134a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801134c:	079d      	lsls	r5, r3, #30
 801134e:	4606      	mov	r6, r0
 8011350:	460c      	mov	r4, r1
 8011352:	d507      	bpl.n	8011364 <__smakebuf_r+0x1c>
 8011354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011358:	6023      	str	r3, [r4, #0]
 801135a:	6123      	str	r3, [r4, #16]
 801135c:	2301      	movs	r3, #1
 801135e:	6163      	str	r3, [r4, #20]
 8011360:	b002      	add	sp, #8
 8011362:	bd70      	pop	{r4, r5, r6, pc}
 8011364:	ab01      	add	r3, sp, #4
 8011366:	466a      	mov	r2, sp
 8011368:	f7ff ffc9 	bl	80112fe <__swhatbuf_r>
 801136c:	9900      	ldr	r1, [sp, #0]
 801136e:	4605      	mov	r5, r0
 8011370:	4630      	mov	r0, r6
 8011372:	f7fc ff33 	bl	800e1dc <_malloc_r>
 8011376:	b948      	cbnz	r0, 801138c <__smakebuf_r+0x44>
 8011378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801137c:	059a      	lsls	r2, r3, #22
 801137e:	d4ef      	bmi.n	8011360 <__smakebuf_r+0x18>
 8011380:	f023 0303 	bic.w	r3, r3, #3
 8011384:	f043 0302 	orr.w	r3, r3, #2
 8011388:	81a3      	strh	r3, [r4, #12]
 801138a:	e7e3      	b.n	8011354 <__smakebuf_r+0xc>
 801138c:	4b0d      	ldr	r3, [pc, #52]	; (80113c4 <__smakebuf_r+0x7c>)
 801138e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011390:	89a3      	ldrh	r3, [r4, #12]
 8011392:	6020      	str	r0, [r4, #0]
 8011394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011398:	81a3      	strh	r3, [r4, #12]
 801139a:	9b00      	ldr	r3, [sp, #0]
 801139c:	6163      	str	r3, [r4, #20]
 801139e:	9b01      	ldr	r3, [sp, #4]
 80113a0:	6120      	str	r0, [r4, #16]
 80113a2:	b15b      	cbz	r3, 80113bc <__smakebuf_r+0x74>
 80113a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113a8:	4630      	mov	r0, r6
 80113aa:	f000 ff43 	bl	8012234 <_isatty_r>
 80113ae:	b128      	cbz	r0, 80113bc <__smakebuf_r+0x74>
 80113b0:	89a3      	ldrh	r3, [r4, #12]
 80113b2:	f023 0303 	bic.w	r3, r3, #3
 80113b6:	f043 0301 	orr.w	r3, r3, #1
 80113ba:	81a3      	strh	r3, [r4, #12]
 80113bc:	89a0      	ldrh	r0, [r4, #12]
 80113be:	4305      	orrs	r5, r0
 80113c0:	81a5      	strh	r5, [r4, #12]
 80113c2:	e7cd      	b.n	8011360 <__smakebuf_r+0x18>
 80113c4:	08010a71 	.word	0x08010a71

080113c8 <__ascii_mbtowc>:
 80113c8:	b082      	sub	sp, #8
 80113ca:	b901      	cbnz	r1, 80113ce <__ascii_mbtowc+0x6>
 80113cc:	a901      	add	r1, sp, #4
 80113ce:	b142      	cbz	r2, 80113e2 <__ascii_mbtowc+0x1a>
 80113d0:	b14b      	cbz	r3, 80113e6 <__ascii_mbtowc+0x1e>
 80113d2:	7813      	ldrb	r3, [r2, #0]
 80113d4:	600b      	str	r3, [r1, #0]
 80113d6:	7812      	ldrb	r2, [r2, #0]
 80113d8:	1e10      	subs	r0, r2, #0
 80113da:	bf18      	it	ne
 80113dc:	2001      	movne	r0, #1
 80113de:	b002      	add	sp, #8
 80113e0:	4770      	bx	lr
 80113e2:	4610      	mov	r0, r2
 80113e4:	e7fb      	b.n	80113de <__ascii_mbtowc+0x16>
 80113e6:	f06f 0001 	mvn.w	r0, #1
 80113ea:	e7f8      	b.n	80113de <__ascii_mbtowc+0x16>

080113ec <memcpy>:
 80113ec:	440a      	add	r2, r1
 80113ee:	4291      	cmp	r1, r2
 80113f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80113f4:	d100      	bne.n	80113f8 <memcpy+0xc>
 80113f6:	4770      	bx	lr
 80113f8:	b510      	push	{r4, lr}
 80113fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011402:	4291      	cmp	r1, r2
 8011404:	d1f9      	bne.n	80113fa <memcpy+0xe>
 8011406:	bd10      	pop	{r4, pc}

08011408 <__malloc_lock>:
 8011408:	4801      	ldr	r0, [pc, #4]	; (8011410 <__malloc_lock+0x8>)
 801140a:	f7ff bf76 	b.w	80112fa <__retarget_lock_acquire_recursive>
 801140e:	bf00      	nop
 8011410:	2000cec0 	.word	0x2000cec0

08011414 <__malloc_unlock>:
 8011414:	4801      	ldr	r0, [pc, #4]	; (801141c <__malloc_unlock+0x8>)
 8011416:	f7ff bf71 	b.w	80112fc <__retarget_lock_release_recursive>
 801141a:	bf00      	nop
 801141c:	2000cec0 	.word	0x2000cec0

08011420 <_Balloc>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011424:	4604      	mov	r4, r0
 8011426:	460d      	mov	r5, r1
 8011428:	b976      	cbnz	r6, 8011448 <_Balloc+0x28>
 801142a:	2010      	movs	r0, #16
 801142c:	f7fc fe5a 	bl	800e0e4 <malloc>
 8011430:	4602      	mov	r2, r0
 8011432:	6260      	str	r0, [r4, #36]	; 0x24
 8011434:	b920      	cbnz	r0, 8011440 <_Balloc+0x20>
 8011436:	4b18      	ldr	r3, [pc, #96]	; (8011498 <_Balloc+0x78>)
 8011438:	4818      	ldr	r0, [pc, #96]	; (801149c <_Balloc+0x7c>)
 801143a:	2166      	movs	r1, #102	; 0x66
 801143c:	f000 fea8 	bl	8012190 <__assert_func>
 8011440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011444:	6006      	str	r6, [r0, #0]
 8011446:	60c6      	str	r6, [r0, #12]
 8011448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801144a:	68f3      	ldr	r3, [r6, #12]
 801144c:	b183      	cbz	r3, 8011470 <_Balloc+0x50>
 801144e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011456:	b9b8      	cbnz	r0, 8011488 <_Balloc+0x68>
 8011458:	2101      	movs	r1, #1
 801145a:	fa01 f605 	lsl.w	r6, r1, r5
 801145e:	1d72      	adds	r2, r6, #5
 8011460:	0092      	lsls	r2, r2, #2
 8011462:	4620      	mov	r0, r4
 8011464:	f000 fc9d 	bl	8011da2 <_calloc_r>
 8011468:	b160      	cbz	r0, 8011484 <_Balloc+0x64>
 801146a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801146e:	e00e      	b.n	801148e <_Balloc+0x6e>
 8011470:	2221      	movs	r2, #33	; 0x21
 8011472:	2104      	movs	r1, #4
 8011474:	4620      	mov	r0, r4
 8011476:	f000 fc94 	bl	8011da2 <_calloc_r>
 801147a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801147c:	60f0      	str	r0, [r6, #12]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1e4      	bne.n	801144e <_Balloc+0x2e>
 8011484:	2000      	movs	r0, #0
 8011486:	bd70      	pop	{r4, r5, r6, pc}
 8011488:	6802      	ldr	r2, [r0, #0]
 801148a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801148e:	2300      	movs	r3, #0
 8011490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011494:	e7f7      	b.n	8011486 <_Balloc+0x66>
 8011496:	bf00      	nop
 8011498:	080201c6 	.word	0x080201c6
 801149c:	08020328 	.word	0x08020328

080114a0 <_Bfree>:
 80114a0:	b570      	push	{r4, r5, r6, lr}
 80114a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114a4:	4605      	mov	r5, r0
 80114a6:	460c      	mov	r4, r1
 80114a8:	b976      	cbnz	r6, 80114c8 <_Bfree+0x28>
 80114aa:	2010      	movs	r0, #16
 80114ac:	f7fc fe1a 	bl	800e0e4 <malloc>
 80114b0:	4602      	mov	r2, r0
 80114b2:	6268      	str	r0, [r5, #36]	; 0x24
 80114b4:	b920      	cbnz	r0, 80114c0 <_Bfree+0x20>
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <_Bfree+0x3c>)
 80114b8:	4809      	ldr	r0, [pc, #36]	; (80114e0 <_Bfree+0x40>)
 80114ba:	218a      	movs	r1, #138	; 0x8a
 80114bc:	f000 fe68 	bl	8012190 <__assert_func>
 80114c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114c4:	6006      	str	r6, [r0, #0]
 80114c6:	60c6      	str	r6, [r0, #12]
 80114c8:	b13c      	cbz	r4, 80114da <_Bfree+0x3a>
 80114ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114cc:	6862      	ldr	r2, [r4, #4]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114d4:	6021      	str	r1, [r4, #0]
 80114d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	080201c6 	.word	0x080201c6
 80114e0:	08020328 	.word	0x08020328

080114e4 <__multadd>:
 80114e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114e8:	690d      	ldr	r5, [r1, #16]
 80114ea:	4607      	mov	r7, r0
 80114ec:	460c      	mov	r4, r1
 80114ee:	461e      	mov	r6, r3
 80114f0:	f101 0c14 	add.w	ip, r1, #20
 80114f4:	2000      	movs	r0, #0
 80114f6:	f8dc 3000 	ldr.w	r3, [ip]
 80114fa:	b299      	uxth	r1, r3
 80114fc:	fb02 6101 	mla	r1, r2, r1, r6
 8011500:	0c1e      	lsrs	r6, r3, #16
 8011502:	0c0b      	lsrs	r3, r1, #16
 8011504:	fb02 3306 	mla	r3, r2, r6, r3
 8011508:	b289      	uxth	r1, r1
 801150a:	3001      	adds	r0, #1
 801150c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011510:	4285      	cmp	r5, r0
 8011512:	f84c 1b04 	str.w	r1, [ip], #4
 8011516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801151a:	dcec      	bgt.n	80114f6 <__multadd+0x12>
 801151c:	b30e      	cbz	r6, 8011562 <__multadd+0x7e>
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	42ab      	cmp	r3, r5
 8011522:	dc19      	bgt.n	8011558 <__multadd+0x74>
 8011524:	6861      	ldr	r1, [r4, #4]
 8011526:	4638      	mov	r0, r7
 8011528:	3101      	adds	r1, #1
 801152a:	f7ff ff79 	bl	8011420 <_Balloc>
 801152e:	4680      	mov	r8, r0
 8011530:	b928      	cbnz	r0, 801153e <__multadd+0x5a>
 8011532:	4602      	mov	r2, r0
 8011534:	4b0c      	ldr	r3, [pc, #48]	; (8011568 <__multadd+0x84>)
 8011536:	480d      	ldr	r0, [pc, #52]	; (801156c <__multadd+0x88>)
 8011538:	21b5      	movs	r1, #181	; 0xb5
 801153a:	f000 fe29 	bl	8012190 <__assert_func>
 801153e:	6922      	ldr	r2, [r4, #16]
 8011540:	3202      	adds	r2, #2
 8011542:	f104 010c 	add.w	r1, r4, #12
 8011546:	0092      	lsls	r2, r2, #2
 8011548:	300c      	adds	r0, #12
 801154a:	f7ff ff4f 	bl	80113ec <memcpy>
 801154e:	4621      	mov	r1, r4
 8011550:	4638      	mov	r0, r7
 8011552:	f7ff ffa5 	bl	80114a0 <_Bfree>
 8011556:	4644      	mov	r4, r8
 8011558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801155c:	3501      	adds	r5, #1
 801155e:	615e      	str	r6, [r3, #20]
 8011560:	6125      	str	r5, [r4, #16]
 8011562:	4620      	mov	r0, r4
 8011564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011568:	08020238 	.word	0x08020238
 801156c:	08020328 	.word	0x08020328

08011570 <__s2b>:
 8011570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	4615      	mov	r5, r2
 8011578:	461f      	mov	r7, r3
 801157a:	2209      	movs	r2, #9
 801157c:	3308      	adds	r3, #8
 801157e:	4606      	mov	r6, r0
 8011580:	fb93 f3f2 	sdiv	r3, r3, r2
 8011584:	2100      	movs	r1, #0
 8011586:	2201      	movs	r2, #1
 8011588:	429a      	cmp	r2, r3
 801158a:	db09      	blt.n	80115a0 <__s2b+0x30>
 801158c:	4630      	mov	r0, r6
 801158e:	f7ff ff47 	bl	8011420 <_Balloc>
 8011592:	b940      	cbnz	r0, 80115a6 <__s2b+0x36>
 8011594:	4602      	mov	r2, r0
 8011596:	4b19      	ldr	r3, [pc, #100]	; (80115fc <__s2b+0x8c>)
 8011598:	4819      	ldr	r0, [pc, #100]	; (8011600 <__s2b+0x90>)
 801159a:	21ce      	movs	r1, #206	; 0xce
 801159c:	f000 fdf8 	bl	8012190 <__assert_func>
 80115a0:	0052      	lsls	r2, r2, #1
 80115a2:	3101      	adds	r1, #1
 80115a4:	e7f0      	b.n	8011588 <__s2b+0x18>
 80115a6:	9b08      	ldr	r3, [sp, #32]
 80115a8:	6143      	str	r3, [r0, #20]
 80115aa:	2d09      	cmp	r5, #9
 80115ac:	f04f 0301 	mov.w	r3, #1
 80115b0:	6103      	str	r3, [r0, #16]
 80115b2:	dd16      	ble.n	80115e2 <__s2b+0x72>
 80115b4:	f104 0909 	add.w	r9, r4, #9
 80115b8:	46c8      	mov	r8, r9
 80115ba:	442c      	add	r4, r5
 80115bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80115c0:	4601      	mov	r1, r0
 80115c2:	3b30      	subs	r3, #48	; 0x30
 80115c4:	220a      	movs	r2, #10
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ff8c 	bl	80114e4 <__multadd>
 80115cc:	45a0      	cmp	r8, r4
 80115ce:	d1f5      	bne.n	80115bc <__s2b+0x4c>
 80115d0:	f1a5 0408 	sub.w	r4, r5, #8
 80115d4:	444c      	add	r4, r9
 80115d6:	1b2d      	subs	r5, r5, r4
 80115d8:	1963      	adds	r3, r4, r5
 80115da:	42bb      	cmp	r3, r7
 80115dc:	db04      	blt.n	80115e8 <__s2b+0x78>
 80115de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e2:	340a      	adds	r4, #10
 80115e4:	2509      	movs	r5, #9
 80115e6:	e7f6      	b.n	80115d6 <__s2b+0x66>
 80115e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80115ec:	4601      	mov	r1, r0
 80115ee:	3b30      	subs	r3, #48	; 0x30
 80115f0:	220a      	movs	r2, #10
 80115f2:	4630      	mov	r0, r6
 80115f4:	f7ff ff76 	bl	80114e4 <__multadd>
 80115f8:	e7ee      	b.n	80115d8 <__s2b+0x68>
 80115fa:	bf00      	nop
 80115fc:	08020238 	.word	0x08020238
 8011600:	08020328 	.word	0x08020328

08011604 <__hi0bits>:
 8011604:	0c03      	lsrs	r3, r0, #16
 8011606:	041b      	lsls	r3, r3, #16
 8011608:	b9d3      	cbnz	r3, 8011640 <__hi0bits+0x3c>
 801160a:	0400      	lsls	r0, r0, #16
 801160c:	2310      	movs	r3, #16
 801160e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011612:	bf04      	itt	eq
 8011614:	0200      	lsleq	r0, r0, #8
 8011616:	3308      	addeq	r3, #8
 8011618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801161c:	bf04      	itt	eq
 801161e:	0100      	lsleq	r0, r0, #4
 8011620:	3304      	addeq	r3, #4
 8011622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011626:	bf04      	itt	eq
 8011628:	0080      	lsleq	r0, r0, #2
 801162a:	3302      	addeq	r3, #2
 801162c:	2800      	cmp	r0, #0
 801162e:	db05      	blt.n	801163c <__hi0bits+0x38>
 8011630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011634:	f103 0301 	add.w	r3, r3, #1
 8011638:	bf08      	it	eq
 801163a:	2320      	moveq	r3, #32
 801163c:	4618      	mov	r0, r3
 801163e:	4770      	bx	lr
 8011640:	2300      	movs	r3, #0
 8011642:	e7e4      	b.n	801160e <__hi0bits+0xa>

08011644 <__lo0bits>:
 8011644:	6803      	ldr	r3, [r0, #0]
 8011646:	f013 0207 	ands.w	r2, r3, #7
 801164a:	4601      	mov	r1, r0
 801164c:	d00b      	beq.n	8011666 <__lo0bits+0x22>
 801164e:	07da      	lsls	r2, r3, #31
 8011650:	d423      	bmi.n	801169a <__lo0bits+0x56>
 8011652:	0798      	lsls	r0, r3, #30
 8011654:	bf49      	itett	mi
 8011656:	085b      	lsrmi	r3, r3, #1
 8011658:	089b      	lsrpl	r3, r3, #2
 801165a:	2001      	movmi	r0, #1
 801165c:	600b      	strmi	r3, [r1, #0]
 801165e:	bf5c      	itt	pl
 8011660:	600b      	strpl	r3, [r1, #0]
 8011662:	2002      	movpl	r0, #2
 8011664:	4770      	bx	lr
 8011666:	b298      	uxth	r0, r3
 8011668:	b9a8      	cbnz	r0, 8011696 <__lo0bits+0x52>
 801166a:	0c1b      	lsrs	r3, r3, #16
 801166c:	2010      	movs	r0, #16
 801166e:	b2da      	uxtb	r2, r3
 8011670:	b90a      	cbnz	r2, 8011676 <__lo0bits+0x32>
 8011672:	3008      	adds	r0, #8
 8011674:	0a1b      	lsrs	r3, r3, #8
 8011676:	071a      	lsls	r2, r3, #28
 8011678:	bf04      	itt	eq
 801167a:	091b      	lsreq	r3, r3, #4
 801167c:	3004      	addeq	r0, #4
 801167e:	079a      	lsls	r2, r3, #30
 8011680:	bf04      	itt	eq
 8011682:	089b      	lsreq	r3, r3, #2
 8011684:	3002      	addeq	r0, #2
 8011686:	07da      	lsls	r2, r3, #31
 8011688:	d403      	bmi.n	8011692 <__lo0bits+0x4e>
 801168a:	085b      	lsrs	r3, r3, #1
 801168c:	f100 0001 	add.w	r0, r0, #1
 8011690:	d005      	beq.n	801169e <__lo0bits+0x5a>
 8011692:	600b      	str	r3, [r1, #0]
 8011694:	4770      	bx	lr
 8011696:	4610      	mov	r0, r2
 8011698:	e7e9      	b.n	801166e <__lo0bits+0x2a>
 801169a:	2000      	movs	r0, #0
 801169c:	4770      	bx	lr
 801169e:	2020      	movs	r0, #32
 80116a0:	4770      	bx	lr
	...

080116a4 <__i2b>:
 80116a4:	b510      	push	{r4, lr}
 80116a6:	460c      	mov	r4, r1
 80116a8:	2101      	movs	r1, #1
 80116aa:	f7ff feb9 	bl	8011420 <_Balloc>
 80116ae:	4602      	mov	r2, r0
 80116b0:	b928      	cbnz	r0, 80116be <__i2b+0x1a>
 80116b2:	4b05      	ldr	r3, [pc, #20]	; (80116c8 <__i2b+0x24>)
 80116b4:	4805      	ldr	r0, [pc, #20]	; (80116cc <__i2b+0x28>)
 80116b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116ba:	f000 fd69 	bl	8012190 <__assert_func>
 80116be:	2301      	movs	r3, #1
 80116c0:	6144      	str	r4, [r0, #20]
 80116c2:	6103      	str	r3, [r0, #16]
 80116c4:	bd10      	pop	{r4, pc}
 80116c6:	bf00      	nop
 80116c8:	08020238 	.word	0x08020238
 80116cc:	08020328 	.word	0x08020328

080116d0 <__multiply>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	4691      	mov	r9, r2
 80116d6:	690a      	ldr	r2, [r1, #16]
 80116d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80116dc:	429a      	cmp	r2, r3
 80116de:	bfb8      	it	lt
 80116e0:	460b      	movlt	r3, r1
 80116e2:	460c      	mov	r4, r1
 80116e4:	bfbc      	itt	lt
 80116e6:	464c      	movlt	r4, r9
 80116e8:	4699      	movlt	r9, r3
 80116ea:	6927      	ldr	r7, [r4, #16]
 80116ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80116f0:	68a3      	ldr	r3, [r4, #8]
 80116f2:	6861      	ldr	r1, [r4, #4]
 80116f4:	eb07 060a 	add.w	r6, r7, sl
 80116f8:	42b3      	cmp	r3, r6
 80116fa:	b085      	sub	sp, #20
 80116fc:	bfb8      	it	lt
 80116fe:	3101      	addlt	r1, #1
 8011700:	f7ff fe8e 	bl	8011420 <_Balloc>
 8011704:	b930      	cbnz	r0, 8011714 <__multiply+0x44>
 8011706:	4602      	mov	r2, r0
 8011708:	4b44      	ldr	r3, [pc, #272]	; (801181c <__multiply+0x14c>)
 801170a:	4845      	ldr	r0, [pc, #276]	; (8011820 <__multiply+0x150>)
 801170c:	f240 115d 	movw	r1, #349	; 0x15d
 8011710:	f000 fd3e 	bl	8012190 <__assert_func>
 8011714:	f100 0514 	add.w	r5, r0, #20
 8011718:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801171c:	462b      	mov	r3, r5
 801171e:	2200      	movs	r2, #0
 8011720:	4543      	cmp	r3, r8
 8011722:	d321      	bcc.n	8011768 <__multiply+0x98>
 8011724:	f104 0314 	add.w	r3, r4, #20
 8011728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801172c:	f109 0314 	add.w	r3, r9, #20
 8011730:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011734:	9202      	str	r2, [sp, #8]
 8011736:	1b3a      	subs	r2, r7, r4
 8011738:	3a15      	subs	r2, #21
 801173a:	f022 0203 	bic.w	r2, r2, #3
 801173e:	3204      	adds	r2, #4
 8011740:	f104 0115 	add.w	r1, r4, #21
 8011744:	428f      	cmp	r7, r1
 8011746:	bf38      	it	cc
 8011748:	2204      	movcc	r2, #4
 801174a:	9201      	str	r2, [sp, #4]
 801174c:	9a02      	ldr	r2, [sp, #8]
 801174e:	9303      	str	r3, [sp, #12]
 8011750:	429a      	cmp	r2, r3
 8011752:	d80c      	bhi.n	801176e <__multiply+0x9e>
 8011754:	2e00      	cmp	r6, #0
 8011756:	dd03      	ble.n	8011760 <__multiply+0x90>
 8011758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801175c:	2b00      	cmp	r3, #0
 801175e:	d05a      	beq.n	8011816 <__multiply+0x146>
 8011760:	6106      	str	r6, [r0, #16]
 8011762:	b005      	add	sp, #20
 8011764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011768:	f843 2b04 	str.w	r2, [r3], #4
 801176c:	e7d8      	b.n	8011720 <__multiply+0x50>
 801176e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011772:	f1ba 0f00 	cmp.w	sl, #0
 8011776:	d024      	beq.n	80117c2 <__multiply+0xf2>
 8011778:	f104 0e14 	add.w	lr, r4, #20
 801177c:	46a9      	mov	r9, r5
 801177e:	f04f 0c00 	mov.w	ip, #0
 8011782:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011786:	f8d9 1000 	ldr.w	r1, [r9]
 801178a:	fa1f fb82 	uxth.w	fp, r2
 801178e:	b289      	uxth	r1, r1
 8011790:	fb0a 110b 	mla	r1, sl, fp, r1
 8011794:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011798:	f8d9 2000 	ldr.w	r2, [r9]
 801179c:	4461      	add	r1, ip
 801179e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80117a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117aa:	b289      	uxth	r1, r1
 80117ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80117b0:	4577      	cmp	r7, lr
 80117b2:	f849 1b04 	str.w	r1, [r9], #4
 80117b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117ba:	d8e2      	bhi.n	8011782 <__multiply+0xb2>
 80117bc:	9a01      	ldr	r2, [sp, #4]
 80117be:	f845 c002 	str.w	ip, [r5, r2]
 80117c2:	9a03      	ldr	r2, [sp, #12]
 80117c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117c8:	3304      	adds	r3, #4
 80117ca:	f1b9 0f00 	cmp.w	r9, #0
 80117ce:	d020      	beq.n	8011812 <__multiply+0x142>
 80117d0:	6829      	ldr	r1, [r5, #0]
 80117d2:	f104 0c14 	add.w	ip, r4, #20
 80117d6:	46ae      	mov	lr, r5
 80117d8:	f04f 0a00 	mov.w	sl, #0
 80117dc:	f8bc b000 	ldrh.w	fp, [ip]
 80117e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80117e4:	fb09 220b 	mla	r2, r9, fp, r2
 80117e8:	4492      	add	sl, r2
 80117ea:	b289      	uxth	r1, r1
 80117ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80117f0:	f84e 1b04 	str.w	r1, [lr], #4
 80117f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80117f8:	f8be 1000 	ldrh.w	r1, [lr]
 80117fc:	0c12      	lsrs	r2, r2, #16
 80117fe:	fb09 1102 	mla	r1, r9, r2, r1
 8011802:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011806:	4567      	cmp	r7, ip
 8011808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801180c:	d8e6      	bhi.n	80117dc <__multiply+0x10c>
 801180e:	9a01      	ldr	r2, [sp, #4]
 8011810:	50a9      	str	r1, [r5, r2]
 8011812:	3504      	adds	r5, #4
 8011814:	e79a      	b.n	801174c <__multiply+0x7c>
 8011816:	3e01      	subs	r6, #1
 8011818:	e79c      	b.n	8011754 <__multiply+0x84>
 801181a:	bf00      	nop
 801181c:	08020238 	.word	0x08020238
 8011820:	08020328 	.word	0x08020328

08011824 <__pow5mult>:
 8011824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011828:	4615      	mov	r5, r2
 801182a:	f012 0203 	ands.w	r2, r2, #3
 801182e:	4606      	mov	r6, r0
 8011830:	460f      	mov	r7, r1
 8011832:	d007      	beq.n	8011844 <__pow5mult+0x20>
 8011834:	4c25      	ldr	r4, [pc, #148]	; (80118cc <__pow5mult+0xa8>)
 8011836:	3a01      	subs	r2, #1
 8011838:	2300      	movs	r3, #0
 801183a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801183e:	f7ff fe51 	bl	80114e4 <__multadd>
 8011842:	4607      	mov	r7, r0
 8011844:	10ad      	asrs	r5, r5, #2
 8011846:	d03d      	beq.n	80118c4 <__pow5mult+0xa0>
 8011848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801184a:	b97c      	cbnz	r4, 801186c <__pow5mult+0x48>
 801184c:	2010      	movs	r0, #16
 801184e:	f7fc fc49 	bl	800e0e4 <malloc>
 8011852:	4602      	mov	r2, r0
 8011854:	6270      	str	r0, [r6, #36]	; 0x24
 8011856:	b928      	cbnz	r0, 8011864 <__pow5mult+0x40>
 8011858:	4b1d      	ldr	r3, [pc, #116]	; (80118d0 <__pow5mult+0xac>)
 801185a:	481e      	ldr	r0, [pc, #120]	; (80118d4 <__pow5mult+0xb0>)
 801185c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011860:	f000 fc96 	bl	8012190 <__assert_func>
 8011864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011868:	6004      	str	r4, [r0, #0]
 801186a:	60c4      	str	r4, [r0, #12]
 801186c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011874:	b94c      	cbnz	r4, 801188a <__pow5mult+0x66>
 8011876:	f240 2171 	movw	r1, #625	; 0x271
 801187a:	4630      	mov	r0, r6
 801187c:	f7ff ff12 	bl	80116a4 <__i2b>
 8011880:	2300      	movs	r3, #0
 8011882:	f8c8 0008 	str.w	r0, [r8, #8]
 8011886:	4604      	mov	r4, r0
 8011888:	6003      	str	r3, [r0, #0]
 801188a:	f04f 0900 	mov.w	r9, #0
 801188e:	07eb      	lsls	r3, r5, #31
 8011890:	d50a      	bpl.n	80118a8 <__pow5mult+0x84>
 8011892:	4639      	mov	r1, r7
 8011894:	4622      	mov	r2, r4
 8011896:	4630      	mov	r0, r6
 8011898:	f7ff ff1a 	bl	80116d0 <__multiply>
 801189c:	4639      	mov	r1, r7
 801189e:	4680      	mov	r8, r0
 80118a0:	4630      	mov	r0, r6
 80118a2:	f7ff fdfd 	bl	80114a0 <_Bfree>
 80118a6:	4647      	mov	r7, r8
 80118a8:	106d      	asrs	r5, r5, #1
 80118aa:	d00b      	beq.n	80118c4 <__pow5mult+0xa0>
 80118ac:	6820      	ldr	r0, [r4, #0]
 80118ae:	b938      	cbnz	r0, 80118c0 <__pow5mult+0x9c>
 80118b0:	4622      	mov	r2, r4
 80118b2:	4621      	mov	r1, r4
 80118b4:	4630      	mov	r0, r6
 80118b6:	f7ff ff0b 	bl	80116d0 <__multiply>
 80118ba:	6020      	str	r0, [r4, #0]
 80118bc:	f8c0 9000 	str.w	r9, [r0]
 80118c0:	4604      	mov	r4, r0
 80118c2:	e7e4      	b.n	801188e <__pow5mult+0x6a>
 80118c4:	4638      	mov	r0, r7
 80118c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ca:	bf00      	nop
 80118cc:	08020478 	.word	0x08020478
 80118d0:	080201c6 	.word	0x080201c6
 80118d4:	08020328 	.word	0x08020328

080118d8 <__lshift>:
 80118d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118dc:	460c      	mov	r4, r1
 80118de:	6849      	ldr	r1, [r1, #4]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80118e6:	68a3      	ldr	r3, [r4, #8]
 80118e8:	4607      	mov	r7, r0
 80118ea:	4691      	mov	r9, r2
 80118ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118f0:	f108 0601 	add.w	r6, r8, #1
 80118f4:	42b3      	cmp	r3, r6
 80118f6:	db0b      	blt.n	8011910 <__lshift+0x38>
 80118f8:	4638      	mov	r0, r7
 80118fa:	f7ff fd91 	bl	8011420 <_Balloc>
 80118fe:	4605      	mov	r5, r0
 8011900:	b948      	cbnz	r0, 8011916 <__lshift+0x3e>
 8011902:	4602      	mov	r2, r0
 8011904:	4b2a      	ldr	r3, [pc, #168]	; (80119b0 <__lshift+0xd8>)
 8011906:	482b      	ldr	r0, [pc, #172]	; (80119b4 <__lshift+0xdc>)
 8011908:	f240 11d9 	movw	r1, #473	; 0x1d9
 801190c:	f000 fc40 	bl	8012190 <__assert_func>
 8011910:	3101      	adds	r1, #1
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	e7ee      	b.n	80118f4 <__lshift+0x1c>
 8011916:	2300      	movs	r3, #0
 8011918:	f100 0114 	add.w	r1, r0, #20
 801191c:	f100 0210 	add.w	r2, r0, #16
 8011920:	4618      	mov	r0, r3
 8011922:	4553      	cmp	r3, sl
 8011924:	db37      	blt.n	8011996 <__lshift+0xbe>
 8011926:	6920      	ldr	r0, [r4, #16]
 8011928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801192c:	f104 0314 	add.w	r3, r4, #20
 8011930:	f019 091f 	ands.w	r9, r9, #31
 8011934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801193c:	d02f      	beq.n	801199e <__lshift+0xc6>
 801193e:	f1c9 0e20 	rsb	lr, r9, #32
 8011942:	468a      	mov	sl, r1
 8011944:	f04f 0c00 	mov.w	ip, #0
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	fa02 f209 	lsl.w	r2, r2, r9
 801194e:	ea42 020c 	orr.w	r2, r2, ip
 8011952:	f84a 2b04 	str.w	r2, [sl], #4
 8011956:	f853 2b04 	ldr.w	r2, [r3], #4
 801195a:	4298      	cmp	r0, r3
 801195c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011960:	d8f2      	bhi.n	8011948 <__lshift+0x70>
 8011962:	1b03      	subs	r3, r0, r4
 8011964:	3b15      	subs	r3, #21
 8011966:	f023 0303 	bic.w	r3, r3, #3
 801196a:	3304      	adds	r3, #4
 801196c:	f104 0215 	add.w	r2, r4, #21
 8011970:	4290      	cmp	r0, r2
 8011972:	bf38      	it	cc
 8011974:	2304      	movcc	r3, #4
 8011976:	f841 c003 	str.w	ip, [r1, r3]
 801197a:	f1bc 0f00 	cmp.w	ip, #0
 801197e:	d001      	beq.n	8011984 <__lshift+0xac>
 8011980:	f108 0602 	add.w	r6, r8, #2
 8011984:	3e01      	subs	r6, #1
 8011986:	4638      	mov	r0, r7
 8011988:	612e      	str	r6, [r5, #16]
 801198a:	4621      	mov	r1, r4
 801198c:	f7ff fd88 	bl	80114a0 <_Bfree>
 8011990:	4628      	mov	r0, r5
 8011992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011996:	f842 0f04 	str.w	r0, [r2, #4]!
 801199a:	3301      	adds	r3, #1
 801199c:	e7c1      	b.n	8011922 <__lshift+0x4a>
 801199e:	3904      	subs	r1, #4
 80119a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80119a8:	4298      	cmp	r0, r3
 80119aa:	d8f9      	bhi.n	80119a0 <__lshift+0xc8>
 80119ac:	e7ea      	b.n	8011984 <__lshift+0xac>
 80119ae:	bf00      	nop
 80119b0:	08020238 	.word	0x08020238
 80119b4:	08020328 	.word	0x08020328

080119b8 <__mcmp>:
 80119b8:	b530      	push	{r4, r5, lr}
 80119ba:	6902      	ldr	r2, [r0, #16]
 80119bc:	690c      	ldr	r4, [r1, #16]
 80119be:	1b12      	subs	r2, r2, r4
 80119c0:	d10e      	bne.n	80119e0 <__mcmp+0x28>
 80119c2:	f100 0314 	add.w	r3, r0, #20
 80119c6:	3114      	adds	r1, #20
 80119c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80119cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80119d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80119d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80119d8:	42a5      	cmp	r5, r4
 80119da:	d003      	beq.n	80119e4 <__mcmp+0x2c>
 80119dc:	d305      	bcc.n	80119ea <__mcmp+0x32>
 80119de:	2201      	movs	r2, #1
 80119e0:	4610      	mov	r0, r2
 80119e2:	bd30      	pop	{r4, r5, pc}
 80119e4:	4283      	cmp	r3, r0
 80119e6:	d3f3      	bcc.n	80119d0 <__mcmp+0x18>
 80119e8:	e7fa      	b.n	80119e0 <__mcmp+0x28>
 80119ea:	f04f 32ff 	mov.w	r2, #4294967295
 80119ee:	e7f7      	b.n	80119e0 <__mcmp+0x28>

080119f0 <__mdiff>:
 80119f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	460c      	mov	r4, r1
 80119f6:	4606      	mov	r6, r0
 80119f8:	4611      	mov	r1, r2
 80119fa:	4620      	mov	r0, r4
 80119fc:	4690      	mov	r8, r2
 80119fe:	f7ff ffdb 	bl	80119b8 <__mcmp>
 8011a02:	1e05      	subs	r5, r0, #0
 8011a04:	d110      	bne.n	8011a28 <__mdiff+0x38>
 8011a06:	4629      	mov	r1, r5
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f7ff fd09 	bl	8011420 <_Balloc>
 8011a0e:	b930      	cbnz	r0, 8011a1e <__mdiff+0x2e>
 8011a10:	4b3a      	ldr	r3, [pc, #232]	; (8011afc <__mdiff+0x10c>)
 8011a12:	4602      	mov	r2, r0
 8011a14:	f240 2132 	movw	r1, #562	; 0x232
 8011a18:	4839      	ldr	r0, [pc, #228]	; (8011b00 <__mdiff+0x110>)
 8011a1a:	f000 fbb9 	bl	8012190 <__assert_func>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a28:	bfa4      	itt	ge
 8011a2a:	4643      	movge	r3, r8
 8011a2c:	46a0      	movge	r8, r4
 8011a2e:	4630      	mov	r0, r6
 8011a30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a34:	bfa6      	itte	ge
 8011a36:	461c      	movge	r4, r3
 8011a38:	2500      	movge	r5, #0
 8011a3a:	2501      	movlt	r5, #1
 8011a3c:	f7ff fcf0 	bl	8011420 <_Balloc>
 8011a40:	b920      	cbnz	r0, 8011a4c <__mdiff+0x5c>
 8011a42:	4b2e      	ldr	r3, [pc, #184]	; (8011afc <__mdiff+0x10c>)
 8011a44:	4602      	mov	r2, r0
 8011a46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a4a:	e7e5      	b.n	8011a18 <__mdiff+0x28>
 8011a4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a50:	6926      	ldr	r6, [r4, #16]
 8011a52:	60c5      	str	r5, [r0, #12]
 8011a54:	f104 0914 	add.w	r9, r4, #20
 8011a58:	f108 0514 	add.w	r5, r8, #20
 8011a5c:	f100 0e14 	add.w	lr, r0, #20
 8011a60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011a64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a68:	f108 0210 	add.w	r2, r8, #16
 8011a6c:	46f2      	mov	sl, lr
 8011a6e:	2100      	movs	r1, #0
 8011a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011a78:	fa1f f883 	uxth.w	r8, r3
 8011a7c:	fa11 f18b 	uxtah	r1, r1, fp
 8011a80:	0c1b      	lsrs	r3, r3, #16
 8011a82:	eba1 0808 	sub.w	r8, r1, r8
 8011a86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011a8e:	fa1f f888 	uxth.w	r8, r8
 8011a92:	1419      	asrs	r1, r3, #16
 8011a94:	454e      	cmp	r6, r9
 8011a96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8011a9e:	d8e7      	bhi.n	8011a70 <__mdiff+0x80>
 8011aa0:	1b33      	subs	r3, r6, r4
 8011aa2:	3b15      	subs	r3, #21
 8011aa4:	f023 0303 	bic.w	r3, r3, #3
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	3415      	adds	r4, #21
 8011aac:	42a6      	cmp	r6, r4
 8011aae:	bf38      	it	cc
 8011ab0:	2304      	movcc	r3, #4
 8011ab2:	441d      	add	r5, r3
 8011ab4:	4473      	add	r3, lr
 8011ab6:	469e      	mov	lr, r3
 8011ab8:	462e      	mov	r6, r5
 8011aba:	4566      	cmp	r6, ip
 8011abc:	d30e      	bcc.n	8011adc <__mdiff+0xec>
 8011abe:	f10c 0203 	add.w	r2, ip, #3
 8011ac2:	1b52      	subs	r2, r2, r5
 8011ac4:	f022 0203 	bic.w	r2, r2, #3
 8011ac8:	3d03      	subs	r5, #3
 8011aca:	45ac      	cmp	ip, r5
 8011acc:	bf38      	it	cc
 8011ace:	2200      	movcc	r2, #0
 8011ad0:	441a      	add	r2, r3
 8011ad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011ad6:	b17b      	cbz	r3, 8011af8 <__mdiff+0x108>
 8011ad8:	6107      	str	r7, [r0, #16]
 8011ada:	e7a3      	b.n	8011a24 <__mdiff+0x34>
 8011adc:	f856 8b04 	ldr.w	r8, [r6], #4
 8011ae0:	fa11 f288 	uxtah	r2, r1, r8
 8011ae4:	1414      	asrs	r4, r2, #16
 8011ae6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011aea:	b292      	uxth	r2, r2
 8011aec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011af0:	f84e 2b04 	str.w	r2, [lr], #4
 8011af4:	1421      	asrs	r1, r4, #16
 8011af6:	e7e0      	b.n	8011aba <__mdiff+0xca>
 8011af8:	3f01      	subs	r7, #1
 8011afa:	e7ea      	b.n	8011ad2 <__mdiff+0xe2>
 8011afc:	08020238 	.word	0x08020238
 8011b00:	08020328 	.word	0x08020328

08011b04 <__ulp>:
 8011b04:	b082      	sub	sp, #8
 8011b06:	ed8d 0b00 	vstr	d0, [sp]
 8011b0a:	9b01      	ldr	r3, [sp, #4]
 8011b0c:	4912      	ldr	r1, [pc, #72]	; (8011b58 <__ulp+0x54>)
 8011b0e:	4019      	ands	r1, r3
 8011b10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011b14:	2900      	cmp	r1, #0
 8011b16:	dd05      	ble.n	8011b24 <__ulp+0x20>
 8011b18:	2200      	movs	r2, #0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	ec43 2b10 	vmov	d0, r2, r3
 8011b20:	b002      	add	sp, #8
 8011b22:	4770      	bx	lr
 8011b24:	4249      	negs	r1, r1
 8011b26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011b2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011b2e:	f04f 0200 	mov.w	r2, #0
 8011b32:	f04f 0300 	mov.w	r3, #0
 8011b36:	da04      	bge.n	8011b42 <__ulp+0x3e>
 8011b38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011b3c:	fa41 f300 	asr.w	r3, r1, r0
 8011b40:	e7ec      	b.n	8011b1c <__ulp+0x18>
 8011b42:	f1a0 0114 	sub.w	r1, r0, #20
 8011b46:	291e      	cmp	r1, #30
 8011b48:	bfda      	itte	le
 8011b4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011b4e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011b52:	2101      	movgt	r1, #1
 8011b54:	460a      	mov	r2, r1
 8011b56:	e7e1      	b.n	8011b1c <__ulp+0x18>
 8011b58:	7ff00000 	.word	0x7ff00000

08011b5c <__b2d>:
 8011b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b5e:	6905      	ldr	r5, [r0, #16]
 8011b60:	f100 0714 	add.w	r7, r0, #20
 8011b64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011b68:	1f2e      	subs	r6, r5, #4
 8011b6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f7ff fd48 	bl	8011604 <__hi0bits>
 8011b74:	f1c0 0320 	rsb	r3, r0, #32
 8011b78:	280a      	cmp	r0, #10
 8011b7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011bf8 <__b2d+0x9c>
 8011b7e:	600b      	str	r3, [r1, #0]
 8011b80:	dc14      	bgt.n	8011bac <__b2d+0x50>
 8011b82:	f1c0 0e0b 	rsb	lr, r0, #11
 8011b86:	fa24 f10e 	lsr.w	r1, r4, lr
 8011b8a:	42b7      	cmp	r7, r6
 8011b8c:	ea41 030c 	orr.w	r3, r1, ip
 8011b90:	bf34      	ite	cc
 8011b92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011b96:	2100      	movcs	r1, #0
 8011b98:	3015      	adds	r0, #21
 8011b9a:	fa04 f000 	lsl.w	r0, r4, r0
 8011b9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011ba2:	ea40 0201 	orr.w	r2, r0, r1
 8011ba6:	ec43 2b10 	vmov	d0, r2, r3
 8011baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bac:	42b7      	cmp	r7, r6
 8011bae:	bf3a      	itte	cc
 8011bb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011bb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8011bb8:	2100      	movcs	r1, #0
 8011bba:	380b      	subs	r0, #11
 8011bbc:	d017      	beq.n	8011bee <__b2d+0x92>
 8011bbe:	f1c0 0c20 	rsb	ip, r0, #32
 8011bc2:	fa04 f500 	lsl.w	r5, r4, r0
 8011bc6:	42be      	cmp	r6, r7
 8011bc8:	fa21 f40c 	lsr.w	r4, r1, ip
 8011bcc:	ea45 0504 	orr.w	r5, r5, r4
 8011bd0:	bf8c      	ite	hi
 8011bd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011bd6:	2400      	movls	r4, #0
 8011bd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011bdc:	fa01 f000 	lsl.w	r0, r1, r0
 8011be0:	fa24 f40c 	lsr.w	r4, r4, ip
 8011be4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011be8:	ea40 0204 	orr.w	r2, r0, r4
 8011bec:	e7db      	b.n	8011ba6 <__b2d+0x4a>
 8011bee:	ea44 030c 	orr.w	r3, r4, ip
 8011bf2:	460a      	mov	r2, r1
 8011bf4:	e7d7      	b.n	8011ba6 <__b2d+0x4a>
 8011bf6:	bf00      	nop
 8011bf8:	3ff00000 	.word	0x3ff00000

08011bfc <__d2b>:
 8011bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	4689      	mov	r9, r1
 8011c02:	2101      	movs	r1, #1
 8011c04:	ec57 6b10 	vmov	r6, r7, d0
 8011c08:	4690      	mov	r8, r2
 8011c0a:	f7ff fc09 	bl	8011420 <_Balloc>
 8011c0e:	4604      	mov	r4, r0
 8011c10:	b930      	cbnz	r0, 8011c20 <__d2b+0x24>
 8011c12:	4602      	mov	r2, r0
 8011c14:	4b25      	ldr	r3, [pc, #148]	; (8011cac <__d2b+0xb0>)
 8011c16:	4826      	ldr	r0, [pc, #152]	; (8011cb0 <__d2b+0xb4>)
 8011c18:	f240 310a 	movw	r1, #778	; 0x30a
 8011c1c:	f000 fab8 	bl	8012190 <__assert_func>
 8011c20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c28:	bb35      	cbnz	r5, 8011c78 <__d2b+0x7c>
 8011c2a:	2e00      	cmp	r6, #0
 8011c2c:	9301      	str	r3, [sp, #4]
 8011c2e:	d028      	beq.n	8011c82 <__d2b+0x86>
 8011c30:	4668      	mov	r0, sp
 8011c32:	9600      	str	r6, [sp, #0]
 8011c34:	f7ff fd06 	bl	8011644 <__lo0bits>
 8011c38:	9900      	ldr	r1, [sp, #0]
 8011c3a:	b300      	cbz	r0, 8011c7e <__d2b+0x82>
 8011c3c:	9a01      	ldr	r2, [sp, #4]
 8011c3e:	f1c0 0320 	rsb	r3, r0, #32
 8011c42:	fa02 f303 	lsl.w	r3, r2, r3
 8011c46:	430b      	orrs	r3, r1
 8011c48:	40c2      	lsrs	r2, r0
 8011c4a:	6163      	str	r3, [r4, #20]
 8011c4c:	9201      	str	r2, [sp, #4]
 8011c4e:	9b01      	ldr	r3, [sp, #4]
 8011c50:	61a3      	str	r3, [r4, #24]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	bf14      	ite	ne
 8011c56:	2202      	movne	r2, #2
 8011c58:	2201      	moveq	r2, #1
 8011c5a:	6122      	str	r2, [r4, #16]
 8011c5c:	b1d5      	cbz	r5, 8011c94 <__d2b+0x98>
 8011c5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c62:	4405      	add	r5, r0
 8011c64:	f8c9 5000 	str.w	r5, [r9]
 8011c68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c6c:	f8c8 0000 	str.w	r0, [r8]
 8011c70:	4620      	mov	r0, r4
 8011c72:	b003      	add	sp, #12
 8011c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c7c:	e7d5      	b.n	8011c2a <__d2b+0x2e>
 8011c7e:	6161      	str	r1, [r4, #20]
 8011c80:	e7e5      	b.n	8011c4e <__d2b+0x52>
 8011c82:	a801      	add	r0, sp, #4
 8011c84:	f7ff fcde 	bl	8011644 <__lo0bits>
 8011c88:	9b01      	ldr	r3, [sp, #4]
 8011c8a:	6163      	str	r3, [r4, #20]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	6122      	str	r2, [r4, #16]
 8011c90:	3020      	adds	r0, #32
 8011c92:	e7e3      	b.n	8011c5c <__d2b+0x60>
 8011c94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c9c:	f8c9 0000 	str.w	r0, [r9]
 8011ca0:	6918      	ldr	r0, [r3, #16]
 8011ca2:	f7ff fcaf 	bl	8011604 <__hi0bits>
 8011ca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011caa:	e7df      	b.n	8011c6c <__d2b+0x70>
 8011cac:	08020238 	.word	0x08020238
 8011cb0:	08020328 	.word	0x08020328

08011cb4 <__ratio>:
 8011cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb8:	4688      	mov	r8, r1
 8011cba:	4669      	mov	r1, sp
 8011cbc:	4681      	mov	r9, r0
 8011cbe:	f7ff ff4d 	bl	8011b5c <__b2d>
 8011cc2:	a901      	add	r1, sp, #4
 8011cc4:	4640      	mov	r0, r8
 8011cc6:	ec55 4b10 	vmov	r4, r5, d0
 8011cca:	f7ff ff47 	bl	8011b5c <__b2d>
 8011cce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011cd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011cd6:	eba3 0c02 	sub.w	ip, r3, r2
 8011cda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011ce4:	ec51 0b10 	vmov	r0, r1, d0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	bfd6      	itet	le
 8011cec:	460a      	movle	r2, r1
 8011cee:	462a      	movgt	r2, r5
 8011cf0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011cf4:	468b      	mov	fp, r1
 8011cf6:	462f      	mov	r7, r5
 8011cf8:	bfd4      	ite	le
 8011cfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011cfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d02:	4620      	mov	r0, r4
 8011d04:	ee10 2a10 	vmov	r2, s0
 8011d08:	465b      	mov	r3, fp
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fdb6 	bl	800087c <__aeabi_ddiv>
 8011d10:	ec41 0b10 	vmov	d0, r0, r1
 8011d14:	b003      	add	sp, #12
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d1a <__copybits>:
 8011d1a:	3901      	subs	r1, #1
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	1149      	asrs	r1, r1, #5
 8011d20:	6914      	ldr	r4, [r2, #16]
 8011d22:	3101      	adds	r1, #1
 8011d24:	f102 0314 	add.w	r3, r2, #20
 8011d28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d30:	1f05      	subs	r5, r0, #4
 8011d32:	42a3      	cmp	r3, r4
 8011d34:	d30c      	bcc.n	8011d50 <__copybits+0x36>
 8011d36:	1aa3      	subs	r3, r4, r2
 8011d38:	3b11      	subs	r3, #17
 8011d3a:	f023 0303 	bic.w	r3, r3, #3
 8011d3e:	3211      	adds	r2, #17
 8011d40:	42a2      	cmp	r2, r4
 8011d42:	bf88      	it	hi
 8011d44:	2300      	movhi	r3, #0
 8011d46:	4418      	add	r0, r3
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4288      	cmp	r0, r1
 8011d4c:	d305      	bcc.n	8011d5a <__copybits+0x40>
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d54:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d58:	e7eb      	b.n	8011d32 <__copybits+0x18>
 8011d5a:	f840 3b04 	str.w	r3, [r0], #4
 8011d5e:	e7f4      	b.n	8011d4a <__copybits+0x30>

08011d60 <__any_on>:
 8011d60:	f100 0214 	add.w	r2, r0, #20
 8011d64:	6900      	ldr	r0, [r0, #16]
 8011d66:	114b      	asrs	r3, r1, #5
 8011d68:	4298      	cmp	r0, r3
 8011d6a:	b510      	push	{r4, lr}
 8011d6c:	db11      	blt.n	8011d92 <__any_on+0x32>
 8011d6e:	dd0a      	ble.n	8011d86 <__any_on+0x26>
 8011d70:	f011 011f 	ands.w	r1, r1, #31
 8011d74:	d007      	beq.n	8011d86 <__any_on+0x26>
 8011d76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011d7a:	fa24 f001 	lsr.w	r0, r4, r1
 8011d7e:	fa00 f101 	lsl.w	r1, r0, r1
 8011d82:	428c      	cmp	r4, r1
 8011d84:	d10b      	bne.n	8011d9e <__any_on+0x3e>
 8011d86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d803      	bhi.n	8011d96 <__any_on+0x36>
 8011d8e:	2000      	movs	r0, #0
 8011d90:	bd10      	pop	{r4, pc}
 8011d92:	4603      	mov	r3, r0
 8011d94:	e7f7      	b.n	8011d86 <__any_on+0x26>
 8011d96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011d9a:	2900      	cmp	r1, #0
 8011d9c:	d0f5      	beq.n	8011d8a <__any_on+0x2a>
 8011d9e:	2001      	movs	r0, #1
 8011da0:	e7f6      	b.n	8011d90 <__any_on+0x30>

08011da2 <_calloc_r>:
 8011da2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011da4:	fba1 2402 	umull	r2, r4, r1, r2
 8011da8:	b94c      	cbnz	r4, 8011dbe <_calloc_r+0x1c>
 8011daa:	4611      	mov	r1, r2
 8011dac:	9201      	str	r2, [sp, #4]
 8011dae:	f7fc fa15 	bl	800e1dc <_malloc_r>
 8011db2:	9a01      	ldr	r2, [sp, #4]
 8011db4:	4605      	mov	r5, r0
 8011db6:	b930      	cbnz	r0, 8011dc6 <_calloc_r+0x24>
 8011db8:	4628      	mov	r0, r5
 8011dba:	b003      	add	sp, #12
 8011dbc:	bd30      	pop	{r4, r5, pc}
 8011dbe:	220c      	movs	r2, #12
 8011dc0:	6002      	str	r2, [r0, #0]
 8011dc2:	2500      	movs	r5, #0
 8011dc4:	e7f8      	b.n	8011db8 <_calloc_r+0x16>
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	f7fc f994 	bl	800e0f4 <memset>
 8011dcc:	e7f4      	b.n	8011db8 <_calloc_r+0x16>

08011dce <__ssputs_r>:
 8011dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd2:	688e      	ldr	r6, [r1, #8]
 8011dd4:	429e      	cmp	r6, r3
 8011dd6:	4682      	mov	sl, r0
 8011dd8:	460c      	mov	r4, r1
 8011dda:	4690      	mov	r8, r2
 8011ddc:	461f      	mov	r7, r3
 8011dde:	d838      	bhi.n	8011e52 <__ssputs_r+0x84>
 8011de0:	898a      	ldrh	r2, [r1, #12]
 8011de2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011de6:	d032      	beq.n	8011e4e <__ssputs_r+0x80>
 8011de8:	6825      	ldr	r5, [r4, #0]
 8011dea:	6909      	ldr	r1, [r1, #16]
 8011dec:	eba5 0901 	sub.w	r9, r5, r1
 8011df0:	6965      	ldr	r5, [r4, #20]
 8011df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	444b      	add	r3, r9
 8011dfe:	106d      	asrs	r5, r5, #1
 8011e00:	429d      	cmp	r5, r3
 8011e02:	bf38      	it	cc
 8011e04:	461d      	movcc	r5, r3
 8011e06:	0553      	lsls	r3, r2, #21
 8011e08:	d531      	bpl.n	8011e6e <__ssputs_r+0xa0>
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	f7fc f9e6 	bl	800e1dc <_malloc_r>
 8011e10:	4606      	mov	r6, r0
 8011e12:	b950      	cbnz	r0, 8011e2a <__ssputs_r+0x5c>
 8011e14:	230c      	movs	r3, #12
 8011e16:	f8ca 3000 	str.w	r3, [sl]
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295
 8011e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e2a:	6921      	ldr	r1, [r4, #16]
 8011e2c:	464a      	mov	r2, r9
 8011e2e:	f7ff fadd 	bl	80113ec <memcpy>
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e3c:	81a3      	strh	r3, [r4, #12]
 8011e3e:	6126      	str	r6, [r4, #16]
 8011e40:	6165      	str	r5, [r4, #20]
 8011e42:	444e      	add	r6, r9
 8011e44:	eba5 0509 	sub.w	r5, r5, r9
 8011e48:	6026      	str	r6, [r4, #0]
 8011e4a:	60a5      	str	r5, [r4, #8]
 8011e4c:	463e      	mov	r6, r7
 8011e4e:	42be      	cmp	r6, r7
 8011e50:	d900      	bls.n	8011e54 <__ssputs_r+0x86>
 8011e52:	463e      	mov	r6, r7
 8011e54:	6820      	ldr	r0, [r4, #0]
 8011e56:	4632      	mov	r2, r6
 8011e58:	4641      	mov	r1, r8
 8011e5a:	f000 fa0d 	bl	8012278 <memmove>
 8011e5e:	68a3      	ldr	r3, [r4, #8]
 8011e60:	1b9b      	subs	r3, r3, r6
 8011e62:	60a3      	str	r3, [r4, #8]
 8011e64:	6823      	ldr	r3, [r4, #0]
 8011e66:	4433      	add	r3, r6
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e7db      	b.n	8011e26 <__ssputs_r+0x58>
 8011e6e:	462a      	mov	r2, r5
 8011e70:	f000 fa1c 	bl	80122ac <_realloc_r>
 8011e74:	4606      	mov	r6, r0
 8011e76:	2800      	cmp	r0, #0
 8011e78:	d1e1      	bne.n	8011e3e <__ssputs_r+0x70>
 8011e7a:	6921      	ldr	r1, [r4, #16]
 8011e7c:	4650      	mov	r0, sl
 8011e7e:	f7fc f941 	bl	800e104 <_free_r>
 8011e82:	e7c7      	b.n	8011e14 <__ssputs_r+0x46>

08011e84 <_svfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	4698      	mov	r8, r3
 8011e8a:	898b      	ldrh	r3, [r1, #12]
 8011e8c:	061b      	lsls	r3, r3, #24
 8011e8e:	b09d      	sub	sp, #116	; 0x74
 8011e90:	4607      	mov	r7, r0
 8011e92:	460d      	mov	r5, r1
 8011e94:	4614      	mov	r4, r2
 8011e96:	d50e      	bpl.n	8011eb6 <_svfiprintf_r+0x32>
 8011e98:	690b      	ldr	r3, [r1, #16]
 8011e9a:	b963      	cbnz	r3, 8011eb6 <_svfiprintf_r+0x32>
 8011e9c:	2140      	movs	r1, #64	; 0x40
 8011e9e:	f7fc f99d 	bl	800e1dc <_malloc_r>
 8011ea2:	6028      	str	r0, [r5, #0]
 8011ea4:	6128      	str	r0, [r5, #16]
 8011ea6:	b920      	cbnz	r0, 8011eb2 <_svfiprintf_r+0x2e>
 8011ea8:	230c      	movs	r3, #12
 8011eaa:	603b      	str	r3, [r7, #0]
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb0:	e0d1      	b.n	8012056 <_svfiprintf_r+0x1d2>
 8011eb2:	2340      	movs	r3, #64	; 0x40
 8011eb4:	616b      	str	r3, [r5, #20]
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eba:	2320      	movs	r3, #32
 8011ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ec4:	2330      	movs	r3, #48	; 0x30
 8011ec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012070 <_svfiprintf_r+0x1ec>
 8011eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ece:	f04f 0901 	mov.w	r9, #1
 8011ed2:	4623      	mov	r3, r4
 8011ed4:	469a      	mov	sl, r3
 8011ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eda:	b10a      	cbz	r2, 8011ee0 <_svfiprintf_r+0x5c>
 8011edc:	2a25      	cmp	r2, #37	; 0x25
 8011ede:	d1f9      	bne.n	8011ed4 <_svfiprintf_r+0x50>
 8011ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ee4:	d00b      	beq.n	8011efe <_svfiprintf_r+0x7a>
 8011ee6:	465b      	mov	r3, fp
 8011ee8:	4622      	mov	r2, r4
 8011eea:	4629      	mov	r1, r5
 8011eec:	4638      	mov	r0, r7
 8011eee:	f7ff ff6e 	bl	8011dce <__ssputs_r>
 8011ef2:	3001      	adds	r0, #1
 8011ef4:	f000 80aa 	beq.w	801204c <_svfiprintf_r+0x1c8>
 8011ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011efa:	445a      	add	r2, fp
 8011efc:	9209      	str	r2, [sp, #36]	; 0x24
 8011efe:	f89a 3000 	ldrb.w	r3, [sl]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f000 80a2 	beq.w	801204c <_svfiprintf_r+0x1c8>
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f12:	f10a 0a01 	add.w	sl, sl, #1
 8011f16:	9304      	str	r3, [sp, #16]
 8011f18:	9307      	str	r3, [sp, #28]
 8011f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8011f20:	4654      	mov	r4, sl
 8011f22:	2205      	movs	r2, #5
 8011f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f28:	4851      	ldr	r0, [pc, #324]	; (8012070 <_svfiprintf_r+0x1ec>)
 8011f2a:	f7ee f971 	bl	8000210 <memchr>
 8011f2e:	9a04      	ldr	r2, [sp, #16]
 8011f30:	b9d8      	cbnz	r0, 8011f6a <_svfiprintf_r+0xe6>
 8011f32:	06d0      	lsls	r0, r2, #27
 8011f34:	bf44      	itt	mi
 8011f36:	2320      	movmi	r3, #32
 8011f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f3c:	0711      	lsls	r1, r2, #28
 8011f3e:	bf44      	itt	mi
 8011f40:	232b      	movmi	r3, #43	; 0x2b
 8011f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f46:	f89a 3000 	ldrb.w	r3, [sl]
 8011f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f4c:	d015      	beq.n	8011f7a <_svfiprintf_r+0xf6>
 8011f4e:	9a07      	ldr	r2, [sp, #28]
 8011f50:	4654      	mov	r4, sl
 8011f52:	2000      	movs	r0, #0
 8011f54:	f04f 0c0a 	mov.w	ip, #10
 8011f58:	4621      	mov	r1, r4
 8011f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f5e:	3b30      	subs	r3, #48	; 0x30
 8011f60:	2b09      	cmp	r3, #9
 8011f62:	d94e      	bls.n	8012002 <_svfiprintf_r+0x17e>
 8011f64:	b1b0      	cbz	r0, 8011f94 <_svfiprintf_r+0x110>
 8011f66:	9207      	str	r2, [sp, #28]
 8011f68:	e014      	b.n	8011f94 <_svfiprintf_r+0x110>
 8011f6a:	eba0 0308 	sub.w	r3, r0, r8
 8011f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f72:	4313      	orrs	r3, r2
 8011f74:	9304      	str	r3, [sp, #16]
 8011f76:	46a2      	mov	sl, r4
 8011f78:	e7d2      	b.n	8011f20 <_svfiprintf_r+0x9c>
 8011f7a:	9b03      	ldr	r3, [sp, #12]
 8011f7c:	1d19      	adds	r1, r3, #4
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	9103      	str	r1, [sp, #12]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	bfbb      	ittet	lt
 8011f86:	425b      	neglt	r3, r3
 8011f88:	f042 0202 	orrlt.w	r2, r2, #2
 8011f8c:	9307      	strge	r3, [sp, #28]
 8011f8e:	9307      	strlt	r3, [sp, #28]
 8011f90:	bfb8      	it	lt
 8011f92:	9204      	strlt	r2, [sp, #16]
 8011f94:	7823      	ldrb	r3, [r4, #0]
 8011f96:	2b2e      	cmp	r3, #46	; 0x2e
 8011f98:	d10c      	bne.n	8011fb4 <_svfiprintf_r+0x130>
 8011f9a:	7863      	ldrb	r3, [r4, #1]
 8011f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f9e:	d135      	bne.n	801200c <_svfiprintf_r+0x188>
 8011fa0:	9b03      	ldr	r3, [sp, #12]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	9203      	str	r2, [sp, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	bfb8      	it	lt
 8011fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fb0:	3402      	adds	r4, #2
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012080 <_svfiprintf_r+0x1fc>
 8011fb8:	7821      	ldrb	r1, [r4, #0]
 8011fba:	2203      	movs	r2, #3
 8011fbc:	4650      	mov	r0, sl
 8011fbe:	f7ee f927 	bl	8000210 <memchr>
 8011fc2:	b140      	cbz	r0, 8011fd6 <_svfiprintf_r+0x152>
 8011fc4:	2340      	movs	r3, #64	; 0x40
 8011fc6:	eba0 000a 	sub.w	r0, r0, sl
 8011fca:	fa03 f000 	lsl.w	r0, r3, r0
 8011fce:	9b04      	ldr	r3, [sp, #16]
 8011fd0:	4303      	orrs	r3, r0
 8011fd2:	3401      	adds	r4, #1
 8011fd4:	9304      	str	r3, [sp, #16]
 8011fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fda:	4826      	ldr	r0, [pc, #152]	; (8012074 <_svfiprintf_r+0x1f0>)
 8011fdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fe0:	2206      	movs	r2, #6
 8011fe2:	f7ee f915 	bl	8000210 <memchr>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	d038      	beq.n	801205c <_svfiprintf_r+0x1d8>
 8011fea:	4b23      	ldr	r3, [pc, #140]	; (8012078 <_svfiprintf_r+0x1f4>)
 8011fec:	bb1b      	cbnz	r3, 8012036 <_svfiprintf_r+0x1b2>
 8011fee:	9b03      	ldr	r3, [sp, #12]
 8011ff0:	3307      	adds	r3, #7
 8011ff2:	f023 0307 	bic.w	r3, r3, #7
 8011ff6:	3308      	adds	r3, #8
 8011ff8:	9303      	str	r3, [sp, #12]
 8011ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ffc:	4433      	add	r3, r6
 8011ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8012000:	e767      	b.n	8011ed2 <_svfiprintf_r+0x4e>
 8012002:	fb0c 3202 	mla	r2, ip, r2, r3
 8012006:	460c      	mov	r4, r1
 8012008:	2001      	movs	r0, #1
 801200a:	e7a5      	b.n	8011f58 <_svfiprintf_r+0xd4>
 801200c:	2300      	movs	r3, #0
 801200e:	3401      	adds	r4, #1
 8012010:	9305      	str	r3, [sp, #20]
 8012012:	4619      	mov	r1, r3
 8012014:	f04f 0c0a 	mov.w	ip, #10
 8012018:	4620      	mov	r0, r4
 801201a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801201e:	3a30      	subs	r2, #48	; 0x30
 8012020:	2a09      	cmp	r2, #9
 8012022:	d903      	bls.n	801202c <_svfiprintf_r+0x1a8>
 8012024:	2b00      	cmp	r3, #0
 8012026:	d0c5      	beq.n	8011fb4 <_svfiprintf_r+0x130>
 8012028:	9105      	str	r1, [sp, #20]
 801202a:	e7c3      	b.n	8011fb4 <_svfiprintf_r+0x130>
 801202c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012030:	4604      	mov	r4, r0
 8012032:	2301      	movs	r3, #1
 8012034:	e7f0      	b.n	8012018 <_svfiprintf_r+0x194>
 8012036:	ab03      	add	r3, sp, #12
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	462a      	mov	r2, r5
 801203c:	4b0f      	ldr	r3, [pc, #60]	; (801207c <_svfiprintf_r+0x1f8>)
 801203e:	a904      	add	r1, sp, #16
 8012040:	4638      	mov	r0, r7
 8012042:	f7fc f9df 	bl	800e404 <_printf_float>
 8012046:	1c42      	adds	r2, r0, #1
 8012048:	4606      	mov	r6, r0
 801204a:	d1d6      	bne.n	8011ffa <_svfiprintf_r+0x176>
 801204c:	89ab      	ldrh	r3, [r5, #12]
 801204e:	065b      	lsls	r3, r3, #25
 8012050:	f53f af2c 	bmi.w	8011eac <_svfiprintf_r+0x28>
 8012054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012056:	b01d      	add	sp, #116	; 0x74
 8012058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205c:	ab03      	add	r3, sp, #12
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	462a      	mov	r2, r5
 8012062:	4b06      	ldr	r3, [pc, #24]	; (801207c <_svfiprintf_r+0x1f8>)
 8012064:	a904      	add	r1, sp, #16
 8012066:	4638      	mov	r0, r7
 8012068:	f7fc fc70 	bl	800e94c <_printf_i>
 801206c:	e7eb      	b.n	8012046 <_svfiprintf_r+0x1c2>
 801206e:	bf00      	nop
 8012070:	08020484 	.word	0x08020484
 8012074:	0802048e 	.word	0x0802048e
 8012078:	0800e405 	.word	0x0800e405
 801207c:	08011dcf 	.word	0x08011dcf
 8012080:	0802048a 	.word	0x0802048a
 8012084:	00000000 	.word	0x00000000

08012088 <nan>:
 8012088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012090 <nan+0x8>
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	00000000 	.word	0x00000000
 8012094:	7ff80000 	.word	0x7ff80000

08012098 <nanf>:
 8012098:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80120a0 <nanf+0x8>
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	7fc00000 	.word	0x7fc00000

080120a4 <__sread>:
 80120a4:	b510      	push	{r4, lr}
 80120a6:	460c      	mov	r4, r1
 80120a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ac:	f000 fa86 	bl	80125bc <_read_r>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	bfab      	itete	ge
 80120b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120b6:	89a3      	ldrhlt	r3, [r4, #12]
 80120b8:	181b      	addge	r3, r3, r0
 80120ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120be:	bfac      	ite	ge
 80120c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80120c2:	81a3      	strhlt	r3, [r4, #12]
 80120c4:	bd10      	pop	{r4, pc}

080120c6 <__swrite>:
 80120c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ca:	461f      	mov	r7, r3
 80120cc:	898b      	ldrh	r3, [r1, #12]
 80120ce:	05db      	lsls	r3, r3, #23
 80120d0:	4605      	mov	r5, r0
 80120d2:	460c      	mov	r4, r1
 80120d4:	4616      	mov	r6, r2
 80120d6:	d505      	bpl.n	80120e4 <__swrite+0x1e>
 80120d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120dc:	2302      	movs	r3, #2
 80120de:	2200      	movs	r2, #0
 80120e0:	f000 f8b8 	bl	8012254 <_lseek_r>
 80120e4:	89a3      	ldrh	r3, [r4, #12]
 80120e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120ee:	81a3      	strh	r3, [r4, #12]
 80120f0:	4632      	mov	r2, r6
 80120f2:	463b      	mov	r3, r7
 80120f4:	4628      	mov	r0, r5
 80120f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120fa:	f000 b837 	b.w	801216c <_write_r>

080120fe <__sseek>:
 80120fe:	b510      	push	{r4, lr}
 8012100:	460c      	mov	r4, r1
 8012102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012106:	f000 f8a5 	bl	8012254 <_lseek_r>
 801210a:	1c43      	adds	r3, r0, #1
 801210c:	89a3      	ldrh	r3, [r4, #12]
 801210e:	bf15      	itete	ne
 8012110:	6560      	strne	r0, [r4, #84]	; 0x54
 8012112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801211a:	81a3      	strheq	r3, [r4, #12]
 801211c:	bf18      	it	ne
 801211e:	81a3      	strhne	r3, [r4, #12]
 8012120:	bd10      	pop	{r4, pc}

08012122 <__sclose>:
 8012122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012126:	f000 b851 	b.w	80121cc <_close_r>

0801212a <strncmp>:
 801212a:	b510      	push	{r4, lr}
 801212c:	b17a      	cbz	r2, 801214e <strncmp+0x24>
 801212e:	4603      	mov	r3, r0
 8012130:	3901      	subs	r1, #1
 8012132:	1884      	adds	r4, r0, r2
 8012134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012138:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801213c:	4290      	cmp	r0, r2
 801213e:	d101      	bne.n	8012144 <strncmp+0x1a>
 8012140:	42a3      	cmp	r3, r4
 8012142:	d101      	bne.n	8012148 <strncmp+0x1e>
 8012144:	1a80      	subs	r0, r0, r2
 8012146:	bd10      	pop	{r4, pc}
 8012148:	2800      	cmp	r0, #0
 801214a:	d1f3      	bne.n	8012134 <strncmp+0xa>
 801214c:	e7fa      	b.n	8012144 <strncmp+0x1a>
 801214e:	4610      	mov	r0, r2
 8012150:	e7f9      	b.n	8012146 <strncmp+0x1c>

08012152 <__ascii_wctomb>:
 8012152:	b149      	cbz	r1, 8012168 <__ascii_wctomb+0x16>
 8012154:	2aff      	cmp	r2, #255	; 0xff
 8012156:	bf85      	ittet	hi
 8012158:	238a      	movhi	r3, #138	; 0x8a
 801215a:	6003      	strhi	r3, [r0, #0]
 801215c:	700a      	strbls	r2, [r1, #0]
 801215e:	f04f 30ff 	movhi.w	r0, #4294967295
 8012162:	bf98      	it	ls
 8012164:	2001      	movls	r0, #1
 8012166:	4770      	bx	lr
 8012168:	4608      	mov	r0, r1
 801216a:	4770      	bx	lr

0801216c <_write_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4d07      	ldr	r5, [pc, #28]	; (801218c <_write_r+0x20>)
 8012170:	4604      	mov	r4, r0
 8012172:	4608      	mov	r0, r1
 8012174:	4611      	mov	r1, r2
 8012176:	2200      	movs	r2, #0
 8012178:	602a      	str	r2, [r5, #0]
 801217a:	461a      	mov	r2, r3
 801217c:	f7ef fa45 	bl	800160a <_write>
 8012180:	1c43      	adds	r3, r0, #1
 8012182:	d102      	bne.n	801218a <_write_r+0x1e>
 8012184:	682b      	ldr	r3, [r5, #0]
 8012186:	b103      	cbz	r3, 801218a <_write_r+0x1e>
 8012188:	6023      	str	r3, [r4, #0]
 801218a:	bd38      	pop	{r3, r4, r5, pc}
 801218c:	2000cec4 	.word	0x2000cec4

08012190 <__assert_func>:
 8012190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012192:	4614      	mov	r4, r2
 8012194:	461a      	mov	r2, r3
 8012196:	4b09      	ldr	r3, [pc, #36]	; (80121bc <__assert_func+0x2c>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	4605      	mov	r5, r0
 801219c:	68d8      	ldr	r0, [r3, #12]
 801219e:	b14c      	cbz	r4, 80121b4 <__assert_func+0x24>
 80121a0:	4b07      	ldr	r3, [pc, #28]	; (80121c0 <__assert_func+0x30>)
 80121a2:	9100      	str	r1, [sp, #0]
 80121a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121a8:	4906      	ldr	r1, [pc, #24]	; (80121c4 <__assert_func+0x34>)
 80121aa:	462b      	mov	r3, r5
 80121ac:	f000 f81e 	bl	80121ec <fiprintf>
 80121b0:	f000 fa16 	bl	80125e0 <abort>
 80121b4:	4b04      	ldr	r3, [pc, #16]	; (80121c8 <__assert_func+0x38>)
 80121b6:	461c      	mov	r4, r3
 80121b8:	e7f3      	b.n	80121a2 <__assert_func+0x12>
 80121ba:	bf00      	nop
 80121bc:	200000c8 	.word	0x200000c8
 80121c0:	08020495 	.word	0x08020495
 80121c4:	080204a2 	.word	0x080204a2
 80121c8:	080204d0 	.word	0x080204d0

080121cc <_close_r>:
 80121cc:	b538      	push	{r3, r4, r5, lr}
 80121ce:	4d06      	ldr	r5, [pc, #24]	; (80121e8 <_close_r+0x1c>)
 80121d0:	2300      	movs	r3, #0
 80121d2:	4604      	mov	r4, r0
 80121d4:	4608      	mov	r0, r1
 80121d6:	602b      	str	r3, [r5, #0]
 80121d8:	f7ef fa33 	bl	8001642 <_close>
 80121dc:	1c43      	adds	r3, r0, #1
 80121de:	d102      	bne.n	80121e6 <_close_r+0x1a>
 80121e0:	682b      	ldr	r3, [r5, #0]
 80121e2:	b103      	cbz	r3, 80121e6 <_close_r+0x1a>
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	bd38      	pop	{r3, r4, r5, pc}
 80121e8:	2000cec4 	.word	0x2000cec4

080121ec <fiprintf>:
 80121ec:	b40e      	push	{r1, r2, r3}
 80121ee:	b503      	push	{r0, r1, lr}
 80121f0:	4601      	mov	r1, r0
 80121f2:	ab03      	add	r3, sp, #12
 80121f4:	4805      	ldr	r0, [pc, #20]	; (801220c <fiprintf+0x20>)
 80121f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80121fa:	6800      	ldr	r0, [r0, #0]
 80121fc:	9301      	str	r3, [sp, #4]
 80121fe:	f000 f8ad 	bl	801235c <_vfiprintf_r>
 8012202:	b002      	add	sp, #8
 8012204:	f85d eb04 	ldr.w	lr, [sp], #4
 8012208:	b003      	add	sp, #12
 801220a:	4770      	bx	lr
 801220c:	200000c8 	.word	0x200000c8

08012210 <_fstat_r>:
 8012210:	b538      	push	{r3, r4, r5, lr}
 8012212:	4d07      	ldr	r5, [pc, #28]	; (8012230 <_fstat_r+0x20>)
 8012214:	2300      	movs	r3, #0
 8012216:	4604      	mov	r4, r0
 8012218:	4608      	mov	r0, r1
 801221a:	4611      	mov	r1, r2
 801221c:	602b      	str	r3, [r5, #0]
 801221e:	f7ef fa1c 	bl	800165a <_fstat>
 8012222:	1c43      	adds	r3, r0, #1
 8012224:	d102      	bne.n	801222c <_fstat_r+0x1c>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	b103      	cbz	r3, 801222c <_fstat_r+0x1c>
 801222a:	6023      	str	r3, [r4, #0]
 801222c:	bd38      	pop	{r3, r4, r5, pc}
 801222e:	bf00      	nop
 8012230:	2000cec4 	.word	0x2000cec4

08012234 <_isatty_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	4d06      	ldr	r5, [pc, #24]	; (8012250 <_isatty_r+0x1c>)
 8012238:	2300      	movs	r3, #0
 801223a:	4604      	mov	r4, r0
 801223c:	4608      	mov	r0, r1
 801223e:	602b      	str	r3, [r5, #0]
 8012240:	f7ef fa1b 	bl	800167a <_isatty>
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	d102      	bne.n	801224e <_isatty_r+0x1a>
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	b103      	cbz	r3, 801224e <_isatty_r+0x1a>
 801224c:	6023      	str	r3, [r4, #0]
 801224e:	bd38      	pop	{r3, r4, r5, pc}
 8012250:	2000cec4 	.word	0x2000cec4

08012254 <_lseek_r>:
 8012254:	b538      	push	{r3, r4, r5, lr}
 8012256:	4d07      	ldr	r5, [pc, #28]	; (8012274 <_lseek_r+0x20>)
 8012258:	4604      	mov	r4, r0
 801225a:	4608      	mov	r0, r1
 801225c:	4611      	mov	r1, r2
 801225e:	2200      	movs	r2, #0
 8012260:	602a      	str	r2, [r5, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	f7ef fa14 	bl	8001690 <_lseek>
 8012268:	1c43      	adds	r3, r0, #1
 801226a:	d102      	bne.n	8012272 <_lseek_r+0x1e>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	b103      	cbz	r3, 8012272 <_lseek_r+0x1e>
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	bd38      	pop	{r3, r4, r5, pc}
 8012274:	2000cec4 	.word	0x2000cec4

08012278 <memmove>:
 8012278:	4288      	cmp	r0, r1
 801227a:	b510      	push	{r4, lr}
 801227c:	eb01 0402 	add.w	r4, r1, r2
 8012280:	d902      	bls.n	8012288 <memmove+0x10>
 8012282:	4284      	cmp	r4, r0
 8012284:	4623      	mov	r3, r4
 8012286:	d807      	bhi.n	8012298 <memmove+0x20>
 8012288:	1e43      	subs	r3, r0, #1
 801228a:	42a1      	cmp	r1, r4
 801228c:	d008      	beq.n	80122a0 <memmove+0x28>
 801228e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012296:	e7f8      	b.n	801228a <memmove+0x12>
 8012298:	4402      	add	r2, r0
 801229a:	4601      	mov	r1, r0
 801229c:	428a      	cmp	r2, r1
 801229e:	d100      	bne.n	80122a2 <memmove+0x2a>
 80122a0:	bd10      	pop	{r4, pc}
 80122a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122aa:	e7f7      	b.n	801229c <memmove+0x24>

080122ac <_realloc_r>:
 80122ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b0:	4680      	mov	r8, r0
 80122b2:	4614      	mov	r4, r2
 80122b4:	460e      	mov	r6, r1
 80122b6:	b921      	cbnz	r1, 80122c2 <_realloc_r+0x16>
 80122b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122bc:	4611      	mov	r1, r2
 80122be:	f7fb bf8d 	b.w	800e1dc <_malloc_r>
 80122c2:	b92a      	cbnz	r2, 80122d0 <_realloc_r+0x24>
 80122c4:	f7fb ff1e 	bl	800e104 <_free_r>
 80122c8:	4625      	mov	r5, r4
 80122ca:	4628      	mov	r0, r5
 80122cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d0:	f000 f98d 	bl	80125ee <_malloc_usable_size_r>
 80122d4:	4284      	cmp	r4, r0
 80122d6:	4607      	mov	r7, r0
 80122d8:	d802      	bhi.n	80122e0 <_realloc_r+0x34>
 80122da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80122de:	d812      	bhi.n	8012306 <_realloc_r+0x5a>
 80122e0:	4621      	mov	r1, r4
 80122e2:	4640      	mov	r0, r8
 80122e4:	f7fb ff7a 	bl	800e1dc <_malloc_r>
 80122e8:	4605      	mov	r5, r0
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d0ed      	beq.n	80122ca <_realloc_r+0x1e>
 80122ee:	42bc      	cmp	r4, r7
 80122f0:	4622      	mov	r2, r4
 80122f2:	4631      	mov	r1, r6
 80122f4:	bf28      	it	cs
 80122f6:	463a      	movcs	r2, r7
 80122f8:	f7ff f878 	bl	80113ec <memcpy>
 80122fc:	4631      	mov	r1, r6
 80122fe:	4640      	mov	r0, r8
 8012300:	f7fb ff00 	bl	800e104 <_free_r>
 8012304:	e7e1      	b.n	80122ca <_realloc_r+0x1e>
 8012306:	4635      	mov	r5, r6
 8012308:	e7df      	b.n	80122ca <_realloc_r+0x1e>

0801230a <__sfputc_r>:
 801230a:	6893      	ldr	r3, [r2, #8]
 801230c:	3b01      	subs	r3, #1
 801230e:	2b00      	cmp	r3, #0
 8012310:	b410      	push	{r4}
 8012312:	6093      	str	r3, [r2, #8]
 8012314:	da08      	bge.n	8012328 <__sfputc_r+0x1e>
 8012316:	6994      	ldr	r4, [r2, #24]
 8012318:	42a3      	cmp	r3, r4
 801231a:	db01      	blt.n	8012320 <__sfputc_r+0x16>
 801231c:	290a      	cmp	r1, #10
 801231e:	d103      	bne.n	8012328 <__sfputc_r+0x1e>
 8012320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012324:	f7fd bb84 	b.w	800fa30 <__swbuf_r>
 8012328:	6813      	ldr	r3, [r2, #0]
 801232a:	1c58      	adds	r0, r3, #1
 801232c:	6010      	str	r0, [r2, #0]
 801232e:	7019      	strb	r1, [r3, #0]
 8012330:	4608      	mov	r0, r1
 8012332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012336:	4770      	bx	lr

08012338 <__sfputs_r>:
 8012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233a:	4606      	mov	r6, r0
 801233c:	460f      	mov	r7, r1
 801233e:	4614      	mov	r4, r2
 8012340:	18d5      	adds	r5, r2, r3
 8012342:	42ac      	cmp	r4, r5
 8012344:	d101      	bne.n	801234a <__sfputs_r+0x12>
 8012346:	2000      	movs	r0, #0
 8012348:	e007      	b.n	801235a <__sfputs_r+0x22>
 801234a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801234e:	463a      	mov	r2, r7
 8012350:	4630      	mov	r0, r6
 8012352:	f7ff ffda 	bl	801230a <__sfputc_r>
 8012356:	1c43      	adds	r3, r0, #1
 8012358:	d1f3      	bne.n	8012342 <__sfputs_r+0xa>
 801235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801235c <_vfiprintf_r>:
 801235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012360:	460d      	mov	r5, r1
 8012362:	b09d      	sub	sp, #116	; 0x74
 8012364:	4614      	mov	r4, r2
 8012366:	4698      	mov	r8, r3
 8012368:	4606      	mov	r6, r0
 801236a:	b118      	cbz	r0, 8012374 <_vfiprintf_r+0x18>
 801236c:	6983      	ldr	r3, [r0, #24]
 801236e:	b90b      	cbnz	r3, 8012374 <_vfiprintf_r+0x18>
 8012370:	f7fe fbb2 	bl	8010ad8 <__sinit>
 8012374:	4b89      	ldr	r3, [pc, #548]	; (801259c <_vfiprintf_r+0x240>)
 8012376:	429d      	cmp	r5, r3
 8012378:	d11b      	bne.n	80123b2 <_vfiprintf_r+0x56>
 801237a:	6875      	ldr	r5, [r6, #4]
 801237c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801237e:	07d9      	lsls	r1, r3, #31
 8012380:	d405      	bmi.n	801238e <_vfiprintf_r+0x32>
 8012382:	89ab      	ldrh	r3, [r5, #12]
 8012384:	059a      	lsls	r2, r3, #22
 8012386:	d402      	bmi.n	801238e <_vfiprintf_r+0x32>
 8012388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801238a:	f7fe ffb6 	bl	80112fa <__retarget_lock_acquire_recursive>
 801238e:	89ab      	ldrh	r3, [r5, #12]
 8012390:	071b      	lsls	r3, r3, #28
 8012392:	d501      	bpl.n	8012398 <_vfiprintf_r+0x3c>
 8012394:	692b      	ldr	r3, [r5, #16]
 8012396:	b9eb      	cbnz	r3, 80123d4 <_vfiprintf_r+0x78>
 8012398:	4629      	mov	r1, r5
 801239a:	4630      	mov	r0, r6
 801239c:	f7fd fb9a 	bl	800fad4 <__swsetup_r>
 80123a0:	b1c0      	cbz	r0, 80123d4 <_vfiprintf_r+0x78>
 80123a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123a4:	07dc      	lsls	r4, r3, #31
 80123a6:	d50e      	bpl.n	80123c6 <_vfiprintf_r+0x6a>
 80123a8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ac:	b01d      	add	sp, #116	; 0x74
 80123ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b2:	4b7b      	ldr	r3, [pc, #492]	; (80125a0 <_vfiprintf_r+0x244>)
 80123b4:	429d      	cmp	r5, r3
 80123b6:	d101      	bne.n	80123bc <_vfiprintf_r+0x60>
 80123b8:	68b5      	ldr	r5, [r6, #8]
 80123ba:	e7df      	b.n	801237c <_vfiprintf_r+0x20>
 80123bc:	4b79      	ldr	r3, [pc, #484]	; (80125a4 <_vfiprintf_r+0x248>)
 80123be:	429d      	cmp	r5, r3
 80123c0:	bf08      	it	eq
 80123c2:	68f5      	ldreq	r5, [r6, #12]
 80123c4:	e7da      	b.n	801237c <_vfiprintf_r+0x20>
 80123c6:	89ab      	ldrh	r3, [r5, #12]
 80123c8:	0598      	lsls	r0, r3, #22
 80123ca:	d4ed      	bmi.n	80123a8 <_vfiprintf_r+0x4c>
 80123cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ce:	f7fe ff95 	bl	80112fc <__retarget_lock_release_recursive>
 80123d2:	e7e9      	b.n	80123a8 <_vfiprintf_r+0x4c>
 80123d4:	2300      	movs	r3, #0
 80123d6:	9309      	str	r3, [sp, #36]	; 0x24
 80123d8:	2320      	movs	r3, #32
 80123da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123de:	f8cd 800c 	str.w	r8, [sp, #12]
 80123e2:	2330      	movs	r3, #48	; 0x30
 80123e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80125a8 <_vfiprintf_r+0x24c>
 80123e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123ec:	f04f 0901 	mov.w	r9, #1
 80123f0:	4623      	mov	r3, r4
 80123f2:	469a      	mov	sl, r3
 80123f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123f8:	b10a      	cbz	r2, 80123fe <_vfiprintf_r+0xa2>
 80123fa:	2a25      	cmp	r2, #37	; 0x25
 80123fc:	d1f9      	bne.n	80123f2 <_vfiprintf_r+0x96>
 80123fe:	ebba 0b04 	subs.w	fp, sl, r4
 8012402:	d00b      	beq.n	801241c <_vfiprintf_r+0xc0>
 8012404:	465b      	mov	r3, fp
 8012406:	4622      	mov	r2, r4
 8012408:	4629      	mov	r1, r5
 801240a:	4630      	mov	r0, r6
 801240c:	f7ff ff94 	bl	8012338 <__sfputs_r>
 8012410:	3001      	adds	r0, #1
 8012412:	f000 80aa 	beq.w	801256a <_vfiprintf_r+0x20e>
 8012416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012418:	445a      	add	r2, fp
 801241a:	9209      	str	r2, [sp, #36]	; 0x24
 801241c:	f89a 3000 	ldrb.w	r3, [sl]
 8012420:	2b00      	cmp	r3, #0
 8012422:	f000 80a2 	beq.w	801256a <_vfiprintf_r+0x20e>
 8012426:	2300      	movs	r3, #0
 8012428:	f04f 32ff 	mov.w	r2, #4294967295
 801242c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012430:	f10a 0a01 	add.w	sl, sl, #1
 8012434:	9304      	str	r3, [sp, #16]
 8012436:	9307      	str	r3, [sp, #28]
 8012438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801243c:	931a      	str	r3, [sp, #104]	; 0x68
 801243e:	4654      	mov	r4, sl
 8012440:	2205      	movs	r2, #5
 8012442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012446:	4858      	ldr	r0, [pc, #352]	; (80125a8 <_vfiprintf_r+0x24c>)
 8012448:	f7ed fee2 	bl	8000210 <memchr>
 801244c:	9a04      	ldr	r2, [sp, #16]
 801244e:	b9d8      	cbnz	r0, 8012488 <_vfiprintf_r+0x12c>
 8012450:	06d1      	lsls	r1, r2, #27
 8012452:	bf44      	itt	mi
 8012454:	2320      	movmi	r3, #32
 8012456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801245a:	0713      	lsls	r3, r2, #28
 801245c:	bf44      	itt	mi
 801245e:	232b      	movmi	r3, #43	; 0x2b
 8012460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012464:	f89a 3000 	ldrb.w	r3, [sl]
 8012468:	2b2a      	cmp	r3, #42	; 0x2a
 801246a:	d015      	beq.n	8012498 <_vfiprintf_r+0x13c>
 801246c:	9a07      	ldr	r2, [sp, #28]
 801246e:	4654      	mov	r4, sl
 8012470:	2000      	movs	r0, #0
 8012472:	f04f 0c0a 	mov.w	ip, #10
 8012476:	4621      	mov	r1, r4
 8012478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801247c:	3b30      	subs	r3, #48	; 0x30
 801247e:	2b09      	cmp	r3, #9
 8012480:	d94e      	bls.n	8012520 <_vfiprintf_r+0x1c4>
 8012482:	b1b0      	cbz	r0, 80124b2 <_vfiprintf_r+0x156>
 8012484:	9207      	str	r2, [sp, #28]
 8012486:	e014      	b.n	80124b2 <_vfiprintf_r+0x156>
 8012488:	eba0 0308 	sub.w	r3, r0, r8
 801248c:	fa09 f303 	lsl.w	r3, r9, r3
 8012490:	4313      	orrs	r3, r2
 8012492:	9304      	str	r3, [sp, #16]
 8012494:	46a2      	mov	sl, r4
 8012496:	e7d2      	b.n	801243e <_vfiprintf_r+0xe2>
 8012498:	9b03      	ldr	r3, [sp, #12]
 801249a:	1d19      	adds	r1, r3, #4
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	9103      	str	r1, [sp, #12]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	bfbb      	ittet	lt
 80124a4:	425b      	neglt	r3, r3
 80124a6:	f042 0202 	orrlt.w	r2, r2, #2
 80124aa:	9307      	strge	r3, [sp, #28]
 80124ac:	9307      	strlt	r3, [sp, #28]
 80124ae:	bfb8      	it	lt
 80124b0:	9204      	strlt	r2, [sp, #16]
 80124b2:	7823      	ldrb	r3, [r4, #0]
 80124b4:	2b2e      	cmp	r3, #46	; 0x2e
 80124b6:	d10c      	bne.n	80124d2 <_vfiprintf_r+0x176>
 80124b8:	7863      	ldrb	r3, [r4, #1]
 80124ba:	2b2a      	cmp	r3, #42	; 0x2a
 80124bc:	d135      	bne.n	801252a <_vfiprintf_r+0x1ce>
 80124be:	9b03      	ldr	r3, [sp, #12]
 80124c0:	1d1a      	adds	r2, r3, #4
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	9203      	str	r2, [sp, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	bfb8      	it	lt
 80124ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80124ce:	3402      	adds	r4, #2
 80124d0:	9305      	str	r3, [sp, #20]
 80124d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125b8 <_vfiprintf_r+0x25c>
 80124d6:	7821      	ldrb	r1, [r4, #0]
 80124d8:	2203      	movs	r2, #3
 80124da:	4650      	mov	r0, sl
 80124dc:	f7ed fe98 	bl	8000210 <memchr>
 80124e0:	b140      	cbz	r0, 80124f4 <_vfiprintf_r+0x198>
 80124e2:	2340      	movs	r3, #64	; 0x40
 80124e4:	eba0 000a 	sub.w	r0, r0, sl
 80124e8:	fa03 f000 	lsl.w	r0, r3, r0
 80124ec:	9b04      	ldr	r3, [sp, #16]
 80124ee:	4303      	orrs	r3, r0
 80124f0:	3401      	adds	r4, #1
 80124f2:	9304      	str	r3, [sp, #16]
 80124f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124f8:	482c      	ldr	r0, [pc, #176]	; (80125ac <_vfiprintf_r+0x250>)
 80124fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124fe:	2206      	movs	r2, #6
 8012500:	f7ed fe86 	bl	8000210 <memchr>
 8012504:	2800      	cmp	r0, #0
 8012506:	d03f      	beq.n	8012588 <_vfiprintf_r+0x22c>
 8012508:	4b29      	ldr	r3, [pc, #164]	; (80125b0 <_vfiprintf_r+0x254>)
 801250a:	bb1b      	cbnz	r3, 8012554 <_vfiprintf_r+0x1f8>
 801250c:	9b03      	ldr	r3, [sp, #12]
 801250e:	3307      	adds	r3, #7
 8012510:	f023 0307 	bic.w	r3, r3, #7
 8012514:	3308      	adds	r3, #8
 8012516:	9303      	str	r3, [sp, #12]
 8012518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801251a:	443b      	add	r3, r7
 801251c:	9309      	str	r3, [sp, #36]	; 0x24
 801251e:	e767      	b.n	80123f0 <_vfiprintf_r+0x94>
 8012520:	fb0c 3202 	mla	r2, ip, r2, r3
 8012524:	460c      	mov	r4, r1
 8012526:	2001      	movs	r0, #1
 8012528:	e7a5      	b.n	8012476 <_vfiprintf_r+0x11a>
 801252a:	2300      	movs	r3, #0
 801252c:	3401      	adds	r4, #1
 801252e:	9305      	str	r3, [sp, #20]
 8012530:	4619      	mov	r1, r3
 8012532:	f04f 0c0a 	mov.w	ip, #10
 8012536:	4620      	mov	r0, r4
 8012538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801253c:	3a30      	subs	r2, #48	; 0x30
 801253e:	2a09      	cmp	r2, #9
 8012540:	d903      	bls.n	801254a <_vfiprintf_r+0x1ee>
 8012542:	2b00      	cmp	r3, #0
 8012544:	d0c5      	beq.n	80124d2 <_vfiprintf_r+0x176>
 8012546:	9105      	str	r1, [sp, #20]
 8012548:	e7c3      	b.n	80124d2 <_vfiprintf_r+0x176>
 801254a:	fb0c 2101 	mla	r1, ip, r1, r2
 801254e:	4604      	mov	r4, r0
 8012550:	2301      	movs	r3, #1
 8012552:	e7f0      	b.n	8012536 <_vfiprintf_r+0x1da>
 8012554:	ab03      	add	r3, sp, #12
 8012556:	9300      	str	r3, [sp, #0]
 8012558:	462a      	mov	r2, r5
 801255a:	4b16      	ldr	r3, [pc, #88]	; (80125b4 <_vfiprintf_r+0x258>)
 801255c:	a904      	add	r1, sp, #16
 801255e:	4630      	mov	r0, r6
 8012560:	f7fb ff50 	bl	800e404 <_printf_float>
 8012564:	4607      	mov	r7, r0
 8012566:	1c78      	adds	r0, r7, #1
 8012568:	d1d6      	bne.n	8012518 <_vfiprintf_r+0x1bc>
 801256a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801256c:	07d9      	lsls	r1, r3, #31
 801256e:	d405      	bmi.n	801257c <_vfiprintf_r+0x220>
 8012570:	89ab      	ldrh	r3, [r5, #12]
 8012572:	059a      	lsls	r2, r3, #22
 8012574:	d402      	bmi.n	801257c <_vfiprintf_r+0x220>
 8012576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012578:	f7fe fec0 	bl	80112fc <__retarget_lock_release_recursive>
 801257c:	89ab      	ldrh	r3, [r5, #12]
 801257e:	065b      	lsls	r3, r3, #25
 8012580:	f53f af12 	bmi.w	80123a8 <_vfiprintf_r+0x4c>
 8012584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012586:	e711      	b.n	80123ac <_vfiprintf_r+0x50>
 8012588:	ab03      	add	r3, sp, #12
 801258a:	9300      	str	r3, [sp, #0]
 801258c:	462a      	mov	r2, r5
 801258e:	4b09      	ldr	r3, [pc, #36]	; (80125b4 <_vfiprintf_r+0x258>)
 8012590:	a904      	add	r1, sp, #16
 8012592:	4630      	mov	r0, r6
 8012594:	f7fc f9da 	bl	800e94c <_printf_i>
 8012598:	e7e4      	b.n	8012564 <_vfiprintf_r+0x208>
 801259a:	bf00      	nop
 801259c:	0802026c 	.word	0x0802026c
 80125a0:	0802028c 	.word	0x0802028c
 80125a4:	0802024c 	.word	0x0802024c
 80125a8:	08020484 	.word	0x08020484
 80125ac:	0802048e 	.word	0x0802048e
 80125b0:	0800e405 	.word	0x0800e405
 80125b4:	08012339 	.word	0x08012339
 80125b8:	0802048a 	.word	0x0802048a

080125bc <_read_r>:
 80125bc:	b538      	push	{r3, r4, r5, lr}
 80125be:	4d07      	ldr	r5, [pc, #28]	; (80125dc <_read_r+0x20>)
 80125c0:	4604      	mov	r4, r0
 80125c2:	4608      	mov	r0, r1
 80125c4:	4611      	mov	r1, r2
 80125c6:	2200      	movs	r2, #0
 80125c8:	602a      	str	r2, [r5, #0]
 80125ca:	461a      	mov	r2, r3
 80125cc:	f7ef f800 	bl	80015d0 <_read>
 80125d0:	1c43      	adds	r3, r0, #1
 80125d2:	d102      	bne.n	80125da <_read_r+0x1e>
 80125d4:	682b      	ldr	r3, [r5, #0]
 80125d6:	b103      	cbz	r3, 80125da <_read_r+0x1e>
 80125d8:	6023      	str	r3, [r4, #0]
 80125da:	bd38      	pop	{r3, r4, r5, pc}
 80125dc:	2000cec4 	.word	0x2000cec4

080125e0 <abort>:
 80125e0:	b508      	push	{r3, lr}
 80125e2:	2006      	movs	r0, #6
 80125e4:	f000 f834 	bl	8012650 <raise>
 80125e8:	2001      	movs	r0, #1
 80125ea:	f7ee ffe7 	bl	80015bc <_exit>

080125ee <_malloc_usable_size_r>:
 80125ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125f2:	1f18      	subs	r0, r3, #4
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	bfbc      	itt	lt
 80125f8:	580b      	ldrlt	r3, [r1, r0]
 80125fa:	18c0      	addlt	r0, r0, r3
 80125fc:	4770      	bx	lr

080125fe <_raise_r>:
 80125fe:	291f      	cmp	r1, #31
 8012600:	b538      	push	{r3, r4, r5, lr}
 8012602:	4604      	mov	r4, r0
 8012604:	460d      	mov	r5, r1
 8012606:	d904      	bls.n	8012612 <_raise_r+0x14>
 8012608:	2316      	movs	r3, #22
 801260a:	6003      	str	r3, [r0, #0]
 801260c:	f04f 30ff 	mov.w	r0, #4294967295
 8012610:	bd38      	pop	{r3, r4, r5, pc}
 8012612:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012614:	b112      	cbz	r2, 801261c <_raise_r+0x1e>
 8012616:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801261a:	b94b      	cbnz	r3, 8012630 <_raise_r+0x32>
 801261c:	4620      	mov	r0, r4
 801261e:	f000 f831 	bl	8012684 <_getpid_r>
 8012622:	462a      	mov	r2, r5
 8012624:	4601      	mov	r1, r0
 8012626:	4620      	mov	r0, r4
 8012628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801262c:	f000 b818 	b.w	8012660 <_kill_r>
 8012630:	2b01      	cmp	r3, #1
 8012632:	d00a      	beq.n	801264a <_raise_r+0x4c>
 8012634:	1c59      	adds	r1, r3, #1
 8012636:	d103      	bne.n	8012640 <_raise_r+0x42>
 8012638:	2316      	movs	r3, #22
 801263a:	6003      	str	r3, [r0, #0]
 801263c:	2001      	movs	r0, #1
 801263e:	e7e7      	b.n	8012610 <_raise_r+0x12>
 8012640:	2400      	movs	r4, #0
 8012642:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012646:	4628      	mov	r0, r5
 8012648:	4798      	blx	r3
 801264a:	2000      	movs	r0, #0
 801264c:	e7e0      	b.n	8012610 <_raise_r+0x12>
	...

08012650 <raise>:
 8012650:	4b02      	ldr	r3, [pc, #8]	; (801265c <raise+0xc>)
 8012652:	4601      	mov	r1, r0
 8012654:	6818      	ldr	r0, [r3, #0]
 8012656:	f7ff bfd2 	b.w	80125fe <_raise_r>
 801265a:	bf00      	nop
 801265c:	200000c8 	.word	0x200000c8

08012660 <_kill_r>:
 8012660:	b538      	push	{r3, r4, r5, lr}
 8012662:	4d07      	ldr	r5, [pc, #28]	; (8012680 <_kill_r+0x20>)
 8012664:	2300      	movs	r3, #0
 8012666:	4604      	mov	r4, r0
 8012668:	4608      	mov	r0, r1
 801266a:	4611      	mov	r1, r2
 801266c:	602b      	str	r3, [r5, #0]
 801266e:	f7ee ff95 	bl	800159c <_kill>
 8012672:	1c43      	adds	r3, r0, #1
 8012674:	d102      	bne.n	801267c <_kill_r+0x1c>
 8012676:	682b      	ldr	r3, [r5, #0]
 8012678:	b103      	cbz	r3, 801267c <_kill_r+0x1c>
 801267a:	6023      	str	r3, [r4, #0]
 801267c:	bd38      	pop	{r3, r4, r5, pc}
 801267e:	bf00      	nop
 8012680:	2000cec4 	.word	0x2000cec4

08012684 <_getpid_r>:
 8012684:	f7ee bf82 	b.w	800158c <_getpid>

08012688 <_init>:
 8012688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268a:	bf00      	nop
 801268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801268e:	bc08      	pop	{r3}
 8012690:	469e      	mov	lr, r3
 8012692:	4770      	bx	lr

08012694 <_fini>:
 8012694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012696:	bf00      	nop
 8012698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801269a:	bc08      	pop	{r3}
 801269c:	469e      	mov	lr, r3
 801269e:	4770      	bx	lr

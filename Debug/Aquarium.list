
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c678  0800d3c0  0800d3c0  0001d3c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a38  08019a38  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08019a38  08019a38  00029a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a40  08019a40  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a40  08019a40  00029a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a44  08019a44  00029a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08019a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a970  20000240  08019c78  00030240  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  2000abb0  08019c78  0003abb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223c7  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004df3  00000000  00000000  00052627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  00057420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001460  00000000  00000000  00058ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cae0  00000000  00000000  00059f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000195d0  00000000  00000000  00076a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009691c  00000000  00000000  0008ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001268ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c0  00000000  00000000  00126968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d390 	.word	0x0800d390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800d390 	.word	0x0800d390

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:
#include "ap.h"

void lcdMain(void);

void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fca1 	bl	8001908 <cliOpen>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <apMain>:

void apMain(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fd0:	f000 f91b 	bl	800120a <millis>
 8000fd4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fd6:	f000 f918 	bl	800120a <millis>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d302      	bcc.n	8000fec <apMain+0x22>
    {
      pre_time = millis();
 8000fe6:	f000 f910 	bl	800120a <millis>
 8000fea:	6078      	str	r0, [r7, #4]

    }
    //Ds18b20_ManualConvert();

    Sonar_measure();
 8000fec:	f003 f9cc 	bl	8004388 <Sonar_measure>
    tds_measure();
 8000ff0:	f003 fe96 	bl	8004d20 <tds_measure>

    if(buttonGetPressed(_DEF_BUTTON1))
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fb83 	bl	8001700 <buttonGetPressed>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <apMain+0x3e>
    {
    	ledOn(_DEF_LED1);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 fde7 	bl	8003bd4 <ledOn>
 8001006:	e002      	b.n	800100e <apMain+0x44>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001008:	2000      	movs	r0, #0
 800100a:	f002 fe03 	bl	8003c14 <ledOff>
    }
    cliMain();
 800100e:	f000 fd33 	bl	8001a78 <cliMain>
    lcdMain();
 8001012:	f000 f801 	bl	8001018 <lcdMain>
    if (millis()-pre_time >= 1000)
 8001016:	e7de      	b.n	8000fd6 <apMain+0xc>

08001018 <lcdMain>:
  }
}


void lcdMain(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 800101e:	f001 ff75 	bl	8002f0c <lcdIsInit>
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 809f 	bne.w	800116e <lcdMain+0x156>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 8001030:	f002 f9a4 	bl	800337c <lcdDrawAvailable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 809a 	beq.w	8001170 <lcdMain+0x158>
  {
      lcdClearBuffer(black);
 800103c:	2000      	movs	r0, #0
 800103e:	f001 ffa3 	bl	8002f88 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 8001042:	2003      	movs	r0, #3
 8001044:	f002 fce2 	bl	8003a0c <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <lcdMain+0x15c>)
 800104a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f002 fb47 	bl	80036e4 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001056:	f002 f979 	bl	800334c <lcdGetFps>
 800105a:	4603      	mov	r3, r0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <lcdMain+0x160>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	2110      	movs	r1, #16
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fb3c 	bl	80036e4 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 800106c:	f002 f97a 	bl	8003364 <lcdGetFpsTime>
 8001070:	4603      	mov	r3, r0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <lcdMain+0x164>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	2120      	movs	r1, #32
 800107c:	2000      	movs	r0, #0
 800107e:	f002 fb31 	bl	80036e4 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 8001082:	f000 f8c2 	bl	800120a <millis>
 8001086:	4603      	mov	r3, r0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <lcdMain+0x164>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	2000      	movs	r0, #0
 8001094:	f002 fb26 	bl	80036e4 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2305      	movs	r3, #5
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2311      	movs	r3, #17
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	2110      	movs	r1, #16
 80010a8:	2046      	movs	r0, #70	; 0x46
 80010aa:	f002 f81b 	bl	80030e4 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, blue);
 80010ae:	231f      	movs	r3, #31
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2305      	movs	r3, #5
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	230f      	movs	r3, #15
 80010b8:	2232      	movs	r2, #50	; 0x32
 80010ba:	2111      	movs	r1, #17
 80010bc:	2047      	movs	r0, #71	; 0x47
 80010be:	f002 f912 	bl	80032e6 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 fca2 	bl	8003a0c <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <lcdMain+0x168>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	2115      	movs	r1, #21
 80010d0:	204b      	movs	r0, #75	; 0x4b
 80010d2:	f002 fb07 	bl	80036e4 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f002 fc98 	bl	8003a0c <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3d 도" , (int32_t) ds18b20[0].Temperature);
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <lcdMain+0x16c>)
 80010de:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <lcdMain+0x170>)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 faf5 	bl	80036e4 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <lcdMain+0x174>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <lcdMain+0x178>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <lcdMain+0x17c>)
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	2150      	movs	r1, #80	; 0x50
 8001110:	2000      	movs	r0, #0
 8001112:	f002 fae7 	bl	80036e4 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4d ppm" , (int32_t) tds_tbl[0].filter_tdsValue);
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <lcdMain+0x180>)
 8001118:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <lcdMain+0x184>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	2160      	movs	r1, #96	; 0x60
 800112e:	2000      	movs	r0, #0
 8001130:	f002 fad8 	bl	80036e4 <lcdPrintf>

      lcdDrawFillRect( 0, 118, 10, 10, red);
 8001134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	230a      	movs	r3, #10
 800113c:	220a      	movs	r2, #10
 800113e:	2176      	movs	r1, #118	; 0x76
 8001140:	2000      	movs	r0, #0
 8001142:	f002 faa0 	bl	8003686 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 8001146:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230a      	movs	r3, #10
 800114e:	220a      	movs	r2, #10
 8001150:	2176      	movs	r1, #118	; 0x76
 8001152:	200a      	movs	r0, #10
 8001154:	f002 fa97 	bl	8003686 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 8001158:	231f      	movs	r3, #31
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230a      	movs	r3, #10
 800115e:	220a      	movs	r2, #10
 8001160:	2176      	movs	r1, #118	; 0x76
 8001162:	2014      	movs	r0, #20
 8001164:	f002 fa8f 	bl	8003686 <lcdDrawFillRect>

      lcdRequestDraw();
 8001168:	f002 f91e 	bl	80033a8 <lcdRequestDraw>
 800116c:	e000      	b.n	8001170 <lcdMain+0x158>
    return;
 800116e:	bf00      	nop
  }
}
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800d3c0 	.word	0x0800d3c0
 8001178:	0800d3dc 	.word	0x0800d3dc
 800117c:	0800d3e4 	.word	0x0800d3e4
 8001180:	0800d3ec 	.word	0x0800d3ec
 8001184:	2000a8a8 	.word	0x2000a8a8
 8001188:	0800d3f4 	.word	0x0800d3f4
 800118c:	2000a2c0 	.word	0x2000a2c0
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	0800d408 	.word	0x0800d408
 8001198:	2000a9d8 	.word	0x2000a9d8
 800119c:	0800d41c 	.word	0x0800d41c

080011a0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_Init();
 80011a6:	f005 f881 	bl	80062ac <HAL_Init>
  SystemClock_Config();
 80011aa:	f000 f835 	bl	8001218 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <bspInit+0x50>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <bspInit+0x50>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <bspInit+0x50>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <bspInit+0x50>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <bspInit+0x50>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <bspInit+0x50>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <delay>:

void delay(uint32_t ms)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f005 f8c7 	bl	8006390 <HAL_Delay>
#endif
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <millis>:

uint32_t millis(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800120e:	f005 f8b3 	bl	8006378 <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f009 fdef 	bl	800ae0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <SystemClock_Config+0xc8>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <SystemClock_Config+0xcc>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <SystemClock_Config+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001288:	230c      	movs	r3, #12
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fdb3 	bl	8007e08 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a8:	f000 f81e 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 f80d 	bl	80082e8 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d4:	f000 f808 	bl	80012e8 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	; 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x6>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f004 ffe0 	bl	8006350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ADC_IRQHandler+0x10>)
 800139a:	f005 f85e 	bl	800645a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000aa00 	.word	0x2000aa00

080013a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM3_IRQHandler+0x10>)
 80013ae:	f007 ff57 	bl	8009260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000a8cc 	.word	0x2000a8cc

080013bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <SPI1_IRQHandler+0x10>)
 80013c2:	f007 fc39 	bl	8008c38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000a920 	.word	0x2000a920

080013d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART1_IRQHandler+0x10>)
 80013d6:	f008 fe39 	bl	800a04c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000ab68 	.word	0x2000ab68

080013e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <DMA2_Stream0_IRQHandler+0x10>)
 80013ea:	f005 fff5 	bl	80073d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000aa48 	.word	0x2000aa48

080013f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream2_IRQHandler+0x10>)
 80013fe:	f005 ffeb 	bl	80073d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000ab08 	.word	0x2000ab08

0800140c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA2_Stream3_IRQHandler+0x10>)
 8001412:	f005 ffe1 	bl	80073d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000a978 	.word	0x2000a978

08001420 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Stream7_IRQHandler+0x10>)
 8001426:	f005 ffd7 	bl	80073d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000aaa8 	.word	0x2000aaa8

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f009 fc9c 	bl	800ada0 <__errno>
 8001468:	4602      	mov	r2, r0
 800146a:	230c      	movs	r3, #12
 800146c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20020000 	.word	0x20020000
 8001494:	00000400 	.word	0x00000400
 8001498:	2000025c 	.word	0x2000025c
 800149c:	2000abb0 	.word	0x2000abb0

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SystemInit+0x28>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <SystemInit+0x28>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SystemInit+0x28>)
 80014b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ba:	609a      	str	r2, [r3, #8]
#endif
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014d2:	e003      	b.n	80014dc <LoopCopyDataInit>

080014d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014da:	3104      	adds	r1, #4

080014dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e4:	d3f6      	bcc.n	80014d4 <CopyDataInit>
  ldr  r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014e8:	e002      	b.n	80014f0 <LoopFillZerobss>

080014ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014ec:	f842 3b04 	str.w	r3, [r2], #4

080014f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f4:	d3f9      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd3 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f009 fc57 	bl	800adac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f009 fc43 	bl	800ad88 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001508:	08019a48 	.word	0x08019a48
  ldr  r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001510:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8001514:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8001518:	2000abb0 	.word	0x2000abb0

0800151c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <DMA1_Stream0_IRQHandler>

0800151e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800151e:	b480      	push	{r7}
 8001520:	b087      	sub	sp, #28
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	60da      	str	r2, [r3, #12]

  return ret;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001560:	2301      	movs	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	e026      	b.n	80015b8 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	441a      	add	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	440b      	add	r3, r1
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d00c      	beq.n	80015ac <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	3301      	adds	r3, #1
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6892      	ldr	r2, [r2, #8]
 800159c:	fbb3 f1f2 	udiv	r1, r3, r2
 80015a0:	fb02 f201 	mul.w	r2, r2, r1
 80015a4:	1a9a      	subs	r2, r3, r2
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	e002      	b.n	80015b2 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	75fb      	strb	r3, [r7, #23]
      break;
 80015b0:	e006      	b.n	80015c0 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8d4      	bhi.n	800156a <qbufferRead+0x16>
    }
  }

  return ret;
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6892      	ldr	r2, [r2, #8]
 80015e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80015e8:	fb02 f201 	mul.w	r2, r2, r1
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

  return ret;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <DWT_Delay_Init+0x58>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <DWT_Delay_Init+0x58>)
 800160a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <DWT_Delay_Init+0x58>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <DWT_Delay_Init+0x58>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <DWT_Delay_Init+0x5c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <DWT_Delay_Init+0x5c>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <DWT_Delay_Init+0x5c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <DWT_Delay_Init+0x5c>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <DWT_Delay_Init+0x5c>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800163a:	bf00      	nop
     __ASM volatile ("NOP");
 800163c:	bf00      	nop
     __ASM volatile ("NOP");
 800163e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <DWT_Delay_Init+0x5c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800164c:	2301      	movs	r3, #1
  }
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000edf0 	.word	0xe000edf0
 800165c:	e0001000 	.word	0xe0001000

08001660 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  bool ret = true;
 8001666:	2301      	movs	r3, #1
 8001668:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <buttonInit+0x90>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <buttonInit+0x90>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <buttonInit+0x90>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e019      	b.n	80016d6 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80016a2:	4914      	ldr	r1, [pc, #80]	; (80016f4 <buttonInit+0x94>)
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3304      	adds	r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 80016b6:	490f      	ldr	r1, [pc, #60]	; (80016f4 <buttonInit+0x94>)
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	1d3a      	adds	r2, r7, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 f8ec 	bl	80078a8 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	3301      	adds	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dde2      	ble.n	80016a2 <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 80016dc:	4906      	ldr	r1, [pc, #24]	; (80016f8 <buttonInit+0x98>)
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <buttonInit+0x9c>)
 80016e0:	f000 feea 	bl	80024b8 <cliAdd>
#endif

  return ret;
 80016e4:	7efb      	ldrb	r3, [r7, #27]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	20000004 	.word	0x20000004
 80016f8:	080017e1 	.word	0x080017e1
 80016fc:	0800d42c 	.word	0x0800d42c

08001700 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4a30      	ldr	r2, [pc, #192]	; (80017dc <buttonGetPressed+0xdc>)
 800171a:	4413      	add	r3, r2
 800171c:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <buttonGetPressed+0x28>
  {
    return false;
 8001724:	2300      	movs	r3, #0
 8001726:	e054      	b.n	80017d2 <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	7a9b      	ldrb	r3, [r3, #10]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <buttonGetPressed+0x36>
 8001730:	2b01      	cmp	r3, #1
 8001732:	d018      	beq.n	8001766 <buttonGetPressed+0x66>
 8001734:	e04c      	b.n	80017d0 <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f006 fb14 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	7a1b      	ldrb	r3, [r3, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d13a      	bne.n	80017ca <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8001754:	f7ff fd59 	bl	800120a <millis>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2201      	movs	r2, #1
 8001762:	729a      	strb	r2, [r3, #10]
  		  }
  		  break;
 8001764:	e031      	b.n	80017ca <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f006 fafc 	bl	8007d70 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	7a1b      	ldrb	r3, [r3, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d114      	bne.n	80017ae <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8001784:	f7ff fd41 	bl	800120a <millis>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	1ad2      	subs	r2, r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d91a      	bls.n	80017ce <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2201      	movs	r2, #1
 800179c:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	7a5b      	ldrb	r3, [r3, #9]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 80017ac:	e00f      	b.n	80017ce <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2200      	movs	r2, #0
 80017b2:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2200      	movs	r2, #0
 80017b8:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	7a5b      	ldrb	r3, [r3, #9]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
		  break;
 80017c8:	e001      	b.n	80017ce <buttonGetPressed+0xce>
  		  break;
 80017ca:	bf00      	nop
 80017cc:	e000      	b.n	80017d0 <buttonGetPressed+0xd0>
		  break;
 80017ce:	bf00      	nop
  }
  return ret;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000004 	.word	0x20000004

080017e0 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d128      	bne.n	8001846 <cliButton+0x66>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	4919      	ldr	r1, [pc, #100]	; (8001860 <cliButton+0x80>)
 80017fa:	2000      	movs	r0, #0
 80017fc:	4798      	blx	r3
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001804:	e018      	b.n	8001838 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	e00c      	b.n	8001826 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff75 	bl	8001700 <buttonGetPressed>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	4812      	ldr	r0, [pc, #72]	; (8001864 <cliButton+0x84>)
 800181c:	f000 fd3c 	bl	8002298 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	ddef      	ble.n	800180c <cliButton+0x2c>
      }
      cliPrintf("\n");
 800182c:	480e      	ldr	r0, [pc, #56]	; (8001868 <cliButton+0x88>)
 800182e:	f000 fd33 	bl	8002298 <cliPrintf>

      delay(100);
 8001832:	2064      	movs	r0, #100	; 0x64
 8001834:	f7ff fcde 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8001838:	f000 fe28 	bl	800248c <cliKeepLoop>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e1      	bne.n	8001806 <cliButton+0x26>
    }

    ret = true;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <cliButton+0x8c>)
 8001854:	f000 fd20 	bl	8002298 <cliPrintf>
  }
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0800d434 	.word	0x0800d434
 8001864:	0800d43c 	.word	0x0800d43c
 8001868:	0800d440 	.word	0x0800d440
 800186c:	0800d444 	.word	0x0800d444

08001870 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <cliInit+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <cliInit+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <cliInit+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <cliInit+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <cliInit+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <cliInit+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <cliInit+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <cliInit+0x74>)
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <cliInit+0x78>)
 80018aa:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <cliInit+0x74>)
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <cliInit+0x7c>)
 80018b2:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <cliInit+0x74>)
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <cliInit+0x80>)
 80018ba:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <cliInit+0x74>)
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <cliInit+0x84>)
 80018c2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <cliInit+0x74>)
 80018c8:	f000 fb5c 	bl	8001f84 <cliLineClean>


  cliAdd("help", cliShowList);
 80018cc:	490a      	ldr	r1, [pc, #40]	; (80018f8 <cliInit+0x88>)
 80018ce:	480b      	ldr	r0, [pc, #44]	; (80018fc <cliInit+0x8c>)
 80018d0:	f000 fdf2 	bl	80024b8 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80018d4:	490a      	ldr	r1, [pc, #40]	; (8001900 <cliInit+0x90>)
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <cliInit+0x94>)
 80018d8:	f000 fdee 	bl	80024b8 <cliAdd>

  return true;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000a460 	.word	0x2000a460
 80018e8:	08002349 	.word	0x08002349
 80018ec:	08002399 	.word	0x08002399
 80018f0:	080023f1 	.word	0x080023f1
 80018f4:	08002439 	.word	0x08002439
 80018f8:	0800254d 	.word	0x0800254d
 80018fc:	0800d454 	.word	0x0800d454
 8001900:	080025bd 	.word	0x080025bd
 8001904:	0800d45c 	.word	0x0800d45c

08001908 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001914:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <cliOpen+0x38>)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <cliOpen+0x38>)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	6839      	ldr	r1, [r7, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fbdd 	bl	80050e4 <uartOpen>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <cliOpen+0x38>)
 8001930:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <cliOpen+0x38>)
 8001934:	7a1b      	ldrb	r3, [r3, #8]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000a460 	.word	0x2000a460

08001944 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <cliShowLog+0xdc>)
 800194e:	7a5b      	ldrb	r3, [r3, #9]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d061      	beq.n	8001a18 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7a98      	ldrb	r0, [r3, #10]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800195e:	461a      	mov	r2, r3
 8001960:	4930      	ldr	r1, [pc, #192]	; (8001a24 <cliShowLog+0xe0>)
 8001962:	f003 fd75 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7a98      	ldrb	r0, [r3, #10]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001970:	461a      	mov	r2, r3
 8001972:	492d      	ldr	r1, [pc, #180]	; (8001a28 <cliShowLog+0xe4>)
 8001974:	f003 fd6c 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a98      	ldrb	r0, [r3, #10]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8001982:	461a      	mov	r2, r3
 8001984:	4929      	ldr	r1, [pc, #164]	; (8001a2c <cliShowLog+0xe8>)
 8001986:	f003 fd63 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7a98      	ldrb	r0, [r3, #10]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001994:	461a      	mov	r2, r3
 8001996:	4926      	ldr	r1, [pc, #152]	; (8001a30 <cliShowLog+0xec>)
 8001998:	f003 fd5a 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7a98      	ldrb	r0, [r3, #10]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019a6:	461a      	mov	r2, r3
 80019a8:	4922      	ldr	r1, [pc, #136]	; (8001a34 <cliShowLog+0xf0>)
 80019aa:	f003 fd51 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7a98      	ldrb	r0, [r3, #10]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019b8:	461a      	mov	r2, r3
 80019ba:	491f      	ldr	r1, [pc, #124]	; (8001a38 <cliShowLog+0xf4>)
 80019bc:	f003 fd48 	bl	8005450 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7a98      	ldrb	r0, [r3, #10]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80019ca:	461a      	mov	r2, r3
 80019cc:	491b      	ldr	r1, [pc, #108]	; (8001a3c <cliShowLog+0xf8>)
 80019ce:	f003 fd3f 	bl	8005450 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e012      	b.n	80019fe <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a98      	ldrb	r0, [r3, #10]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4613      	mov	r3, r2
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	4413      	add	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4913      	ldr	r1, [pc, #76]	; (8001a40 <cliShowLog+0xfc>)
 80019f4:	f003 fd2c 	bl	8005450 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	dbe5      	blt.n	80019d8 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7a9b      	ldrb	r3, [r3, #10]
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <cliShowLog+0x100>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fd1c 	bl	8005450 <uartPrintf>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000a460 	.word	0x2000a460
 8001a24:	0800d460 	.word	0x0800d460
 8001a28:	0800d470 	.word	0x0800d470
 8001a2c:	0800d480 	.word	0x0800d480
 8001a30:	0800d490 	.word	0x0800d490
 8001a34:	0800d4a0 	.word	0x0800d4a0
 8001a38:	0800d4b0 	.word	0x0800d4b0
 8001a3c:	0800d4c0 	.word	0x0800d4c0
 8001a40:	0800d4d0 	.word	0x0800d4d0
 8001a44:	0800d4e0 	.word	0x0800d4e0

08001a48 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <cliShowPrompt+0x28>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fcfa 	bl	8005450 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <cliShowPrompt+0x2c>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fcf4 	bl	8005450 <uartPrintf>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	0800d4e4 	.word	0x0800d4e4
 8001a74:	0800d4e8 	.word	0x0800d4e8

08001a78 <cliMain>:

bool cliMain(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <cliMain+0x40>)
 8001a7e:	7a1b      	ldrb	r3, [r3, #8]
 8001a80:	f083 0301 	eor.w	r3, r3, #1
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <cliMain+0x16>
  {
    return false;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e012      	b.n	8001ab4 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <cliMain+0x40>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fc38 	bl	8005308 <uartAvailable>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <cliMain+0x40>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fc76 	bl	8005394 <uartRead>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <cliMain+0x40>)
 8001aae:	f000 f805 	bl	8001abc <cliUpdate>
  }

  return true;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000a460 	.word	0x2000a460

08001abc <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ad4:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7c1b      	ldrb	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 8165 	bne.w	8001daa <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	2b0d      	cmp	r3, #13
 8001ae4:	d009      	beq.n	8001afa <cliUpdate+0x3e>
 8001ae6:	2b0d      	cmp	r3, #13
 8001ae8:	dc02      	bgt.n	8001af0 <cliUpdate+0x34>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d065      	beq.n	8001bba <cliUpdate+0xfe>
 8001aee:	e0d4      	b.n	8001c9a <cliUpdate+0x1de>
 8001af0:	2b1b      	cmp	r3, #27
 8001af2:	d01c      	beq.n	8001b2e <cliUpdate+0x72>
 8001af4:	2b7f      	cmp	r3, #127	; 0x7f
 8001af6:	d01e      	beq.n	8001b36 <cliUpdate+0x7a>
 8001af8:	e0cf      	b.n	8001c9a <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fa57 	bl	8001fb8 <cliLineAdd>
          cliRunCmd(p_cli);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb22 	bl	8002154 <cliRunCmd>
        }

        line->count = 0;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff8e 	bl	8001a48 <cliShowPrompt>
        break;
 8001b2c:	e144      	b.n	8001db8 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	741a      	strb	r2, [r3, #16]
        break;
 8001b34:	e140      	b.n	8001db8 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b42:	429a      	cmp	r2, r3
 8001b44:	f080 8133 	bcs.w	8001dae <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5c:	e013      	b.n	8001b86 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b64:	461a      	mov	r2, r3
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	441a      	add	r2, r3
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b70:	4619      	mov	r1, r3
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	440b      	add	r3, r1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	5c89      	ldrb	r1, [r1, r2]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b82:	3301      	adds	r3, #1
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b86:	7efb      	ldrb	r3, [r7, #27]
 8001b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbe7      	blt.n	8001b5e <cliUpdate+0xa2>
          }

          line->count--;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	498e      	ldr	r1, [pc, #568]	; (8001dec <cliUpdate+0x330>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fc4c 	bl	8005450 <uartPrintf>
        }
        break;
 8001bb8:	e0f9      	b.n	8001dae <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d055      	beq.n	8001c70 <cliUpdate+0x1b4>
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d050      	beq.n	8001c70 <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d10e      	bne.n	8001bfc <cliUpdate+0x140>
          {
            line->count--;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d231      	bcs.n	8001c70 <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c20:	e013      	b.n	8001c4a <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	461a      	mov	r2, r3
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	441a      	add	r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	4619      	mov	r1, r3
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	440b      	add	r3, r1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	5c89      	ldrb	r1, [r1, r2]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	3301      	adds	r3, #1
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4a:	7ebb      	ldrb	r3, [r7, #26]
 8001c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dbe7      	blt.n	8001c22 <cliUpdate+0x166>
            }

            line->count--;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c68:	461a      	mov	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 809b 	beq.w	8001db2 <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4957      	ldr	r1, [pc, #348]	; (8001df0 <cliUpdate+0x334>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fbdc 	bl	8005450 <uartPrintf>
        }
        break;
 8001c98:	e08b      	b.n	8001db2 <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f280 8084 	bge.w	8001db6 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d124      	bne.n	8001d08 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	1cf9      	adds	r1, r7, #3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fb8a 	bl	80053e0 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	78f9      	ldrb	r1, [r7, #3]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d00:	461a      	mov	r2, r3
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2100      	movs	r1, #0
 8001d06:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d24e      	bcs.n	8001db6 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e013      	b.n	8001d56 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d42:	4619      	mov	r1, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	69f9      	ldr	r1, [r7, #28]
 8001d4a:	5c89      	ldrb	r1, [r1, r2]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	7e7b      	ldrb	r3, [r7, #25]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbe7      	blt.n	8001d2e <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	461a      	mov	r2, r3
 8001d66:	78f9      	ldrb	r1, [r7, #3]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d92:	461a      	mov	r2, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2100      	movs	r1, #0
 8001d98:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	4914      	ldr	r1, [pc, #80]	; (8001df4 <cliUpdate+0x338>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fb54 	bl	8005450 <uartPrintf>
          }
        }
        break;
 8001da8:	e005      	b.n	8001db6 <cliUpdate+0x2fa>
    }
  }
 8001daa:	bf00      	nop
 8001dac:	e004      	b.n	8001db8 <cliUpdate+0x2fc>
        break;
 8001dae:	bf00      	nop
 8001db0:	e002      	b.n	8001db8 <cliUpdate+0x2fc>
        break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <cliUpdate+0x2fc>
        break;
 8001db6:	bf00      	nop

  switch(p_cli->state)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7c1b      	ldrb	r3, [r3, #16]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	f200 80d3 	bhi.w	8001f6a <cliUpdate+0x4ae>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <cliUpdate+0x310>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001de5 	.word	0x08001de5
 8001dd4:	08001df9 	.word	0x08001df9
 8001dd8:	08001f61 	.word	0x08001f61
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	741a      	strb	r2, [r3, #16]
      break;
 8001de2:	e0c2      	b.n	8001f6a <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	741a      	strb	r2, [r3, #16]
      break;
 8001dea:	e0be      	b.n	8001f6a <cliUpdate+0x4ae>
 8001dec:	0800d4f0 	.word	0x0800d4f0
 8001df0:	0800d4f8 	.word	0x0800d4f8
 8001df4:	0800d500 	.word	0x0800d500

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	2b44      	cmp	r3, #68	; 0x44
 8001e02:	d11a      	bne.n	8001e3a <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e1e:	231b      	movs	r3, #27
 8001e20:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e22:	235b      	movs	r3, #91	; 0x5b
 8001e24:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f107 010c 	add.w	r1, r7, #12
 8001e32:	2203      	movs	r2, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fad3 	bl	80053e0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b43      	cmp	r3, #67	; 0x43
 8001e3e:	d11d      	bne.n	8001e7c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d215      	bcs.n	8001e7c <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e60:	231b      	movs	r3, #27
 8001e62:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e64:	235b      	movs	r3, #91	; 0x5b
 8001e66:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f107 010c 	add.w	r1, r7, #12
 8001e74:	2203      	movs	r2, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fab2 	bl	80053e0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	2b41      	cmp	r3, #65	; 0x41
 8001e80:	d10c      	bne.n	8001e9c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001e82:	2101      	movs	r1, #1
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f8db 	bl	8002040 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f003 fada 	bl	8005450 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	2b42      	cmp	r3, #66	; 0x42
 8001ea0:	d10c      	bne.n	8001ebc <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8cb 	bl	8002040 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f003 faca 	bl	8005450 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2b31      	cmp	r3, #49	; 0x31
 8001ec0:	d10f      	bne.n	8001ee2 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7818      	ldrb	r0, [r3, #0]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	461a      	mov	r2, r3
 8001ece:	492b      	ldr	r1, [pc, #172]	; (8001f7c <cliUpdate+0x4c0>)
 8001ed0:	f003 fabe 	bl	8005450 <uartPrintf>
        line->cursor = 0;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	2b34      	cmp	r3, #52	; 0x34
 8001ee6:	d13f      	bne.n	8001f68 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d210      	bcs.n	8001f1a <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	8afa      	ldrh	r2, [r7, #22]
 8001f12:	491b      	ldr	r1, [pc, #108]	; (8001f80 <cliUpdate+0x4c4>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fa9b 	bl	8005450 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	8afa      	ldrh	r2, [r7, #22]
 8001f44:	490d      	ldr	r1, [pc, #52]	; (8001f7c <cliUpdate+0x4c0>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fa82 	bl	8005450 <uartPrintf>
        }
        line->cursor = line->count;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f5e:	e003      	b.n	8001f68 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	741a      	strb	r2, [r3, #16]
      break;
 8001f66:	e000      	b.n	8001f6a <cliUpdate+0x4ae>
      break;
 8001f68:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fcea 	bl	8001944 <cliShowLog>

  return ret;
 8001f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0800d50c 	.word	0x0800d50c
 8001f80:	0800d514 	.word	0x0800d514

08001f84 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	223f      	movs	r2, #63	; 0x3f
 8001fa0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	4413      	add	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001fe2:	2243      	movs	r2, #67	; 0x43
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f008 ff05 	bl	800adf4 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d807      	bhi.n	8002004 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800200a:	b25a      	sxtb	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002018:	3301      	adds	r3, #1
 800201a:	425a      	negs	r2, r3
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	bf58      	it	pl
 8002026:	4253      	negpl	r3, r2
 8002028:	b2da      	uxtb	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002052:	2b00      	cmp	r3, #0
 8002054:	d076      	beq.n	8002144 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7818      	ldrb	r0, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800206a:	461a      	mov	r2, r3
 800206c:	4937      	ldr	r1, [pc, #220]	; (800214c <cliLineChange+0x10c>)
 800206e:	f003 f9ef 	bl	8005450 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7818      	ldrb	r0, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8002086:	461a      	mov	r2, r3
 8002088:	4931      	ldr	r1, [pc, #196]	; (8002150 <cliLineChange+0x110>)
 800208a:	f003 f9e1 	bl	8005450 <uartPrintf>
  }


  if (key_up == true)
 800208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d125      	bne.n	80020e2 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020bc:	4413      	add	r3, r2
 80020be:	3b01      	subs	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80020c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80020ca:	fb02 f201 	mul.w	r2, r2, r1
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e013      	b.n	800210a <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020e8:	3301      	adds	r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 80020f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f4:	fb02 f201 	mul.w	r2, r2, r1
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	b25a      	sxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002108:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	015b      	lsls	r3, r3, #5
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	4403      	add	r3, r0
 800211c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002120:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002124:	4611      	mov	r1, r2
 8002126:	2243      	movs	r2, #67	; 0x43
 8002128:	4618      	mov	r0, r3
 800212a:	f008 fe63 	bl	800adf4 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002142:	e000      	b.n	8002146 <cliLineChange+0x106>
    return;
 8002144:	bf00      	nop
}
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0800d50c 	.word	0x0800d50c
 8002150:	0800d51c 	.word	0x0800d51c

08002154 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800215c:	2300      	movs	r3, #0
 800215e:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f851 	bl	8002208 <cliParseArgs>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d046      	beq.n	80021fa <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 800216c:	4825      	ldr	r0, [pc, #148]	; (8002204 <cliRunCmd+0xb0>)
 800216e:	f000 f893 	bl	8002298 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f8b1 	bl	80022e0 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e033      	b.n	80021ec <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	f7fe f81e 	bl	80001e0 <strcmp>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11d      	bne.n	80021e6 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
        break;
 80021e4:	e009      	b.n	80021fa <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	dbc4      	blt.n	8002184 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	0800d524 	.word	0x0800d524

08002208 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002226:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800222e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8002230:	8afb      	ldrh	r3, [r7, #22]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800223c:	4b15      	ldr	r3, [pc, #84]	; (8002294 <cliParseArgs+0x8c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f107 0208 	add.w	r2, r7, #8
 8002244:	4619      	mov	r1, r3
 8002246:	6938      	ldr	r0, [r7, #16]
 8002248:	f009 fc80 	bl	800bb4c <strtok_r>
 800224c:	61b8      	str	r0, [r7, #24]
 800224e:	e010      	b.n	8002272 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8002250:	8afb      	ldrh	r3, [r7, #22]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	82fa      	strh	r2, [r7, #22]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <cliParseArgs+0x8c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f107 0208 	add.w	r2, r7, #8
 8002268:	4619      	mov	r1, r3
 800226a:	2000      	movs	r0, #0
 800226c:	f009 fc6e 	bl	800bb4c <strtok_r>
 8002270:	61b8      	str	r0, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1eb      	bne.n	8002250 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8afa      	ldrh	r2, [r7, #22]
 800227c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8002280:	8afb      	ldrh	r3, [r7, #22]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <cliParseArgs+0x82>
  {
    ret = true;
 8002286:	2301      	movs	r3, #1
 8002288:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800228a:	7ffb      	ldrb	r3, [r7, #31]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000018 	.word	0x20000018

08002298 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002298:	b40f      	push	{r0, r1, r2, r3}
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <cliPrintf+0x44>)
 80022a8:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f103 0011 	add.w	r0, r3, #17
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b8:	f009 fd08 	bl	800bccc <vsniprintf>
 80022bc:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	7818      	ldrb	r0, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3311      	adds	r3, #17
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f003 f889 	bl	80053e0 <uartWrite>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d8:	b004      	add	sp, #16
 80022da:	4770      	bx	lr
 80022dc:	2000a460 	.word	0x2000a460

080022e0 <cliToUpper>:

void cliToUpper(char *str)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	81fb      	strh	r3, [r7, #14]
 80022ec:	e018      	b.n	8002320 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80022ee:	89fb      	ldrh	r3, [r7, #14]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80022fe:	7b7b      	ldrb	r3, [r7, #13]
 8002300:	2b60      	cmp	r3, #96	; 0x60
 8002302:	d905      	bls.n	8002310 <cliToUpper+0x30>
 8002304:	7b7b      	ldrb	r3, [r7, #13]
 8002306:	2b7a      	cmp	r3, #122	; 0x7a
 8002308:	d802      	bhi.n	8002310 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800230a:	7b7b      	ldrb	r3, [r7, #13]
 800230c:	3b20      	subs	r3, #32
 800230e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	7b7a      	ldrb	r2, [r7, #13]
 8002318:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	3301      	adds	r3, #1
 800231e:	81fb      	strh	r3, [r7, #14]
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	d9e3      	bls.n	80022ee <cliToUpper+0xe>
 8002326:	e000      	b.n	800232a <cliToUpper+0x4a>
      break;
 8002328:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	2b10      	cmp	r3, #16
 800232e:	d105      	bne.n	800233c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	3b01      	subs	r3, #1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
  }
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <cliArgsGetData+0x4c>)
 8002358:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	b29a      	uxth	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002364:	429a      	cmp	r2, r3
 8002366:	d301      	bcc.n	800236c <cliArgsGetData+0x24>
  {
    return 0;
 8002368:	2300      	movs	r3, #0
 800236a:	e00e      	b.n	800238a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f009 fc62 	bl	800bc48 <strtoul>
 8002384:	4603      	mov	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]

  return ret;
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000a460 	.word	0x2000a460

08002398 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <cliArgsGetFloat+0x54>)
 80023aa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <cliArgsGetFloat+0x28>
  {
    return 0;
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e00d      	b.n	80023dc <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f009 fb3d 	bl	800ba50 <strtof>
 80023d6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	ee07 3a90 	vmov	s15, r3
}
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000a460 	.word	0x2000a460

080023f0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <cliArgsGetStr+0x44>)
 8002400:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	b29a      	uxth	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800240c:	429a      	cmp	r2, r3
 800240e:	d301      	bcc.n	8002414 <cliArgsGetStr+0x24>
  {
    return 0;
 8002410:	2300      	movs	r3, #0
 8002412:	e008      	b.n	8002426 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]

  return ret;
 8002424:	68fb      	ldr	r3, [r7, #12]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2000a460 	.word	0x2000a460

08002438 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <cliArgsIsStr+0x50>)
 800244a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	b29a      	uxth	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002456:	429a      	cmp	r2, r3
 8002458:	d301      	bcc.n	800245e <cliArgsIsStr+0x26>
  {
    return 0;
 800245a:	2300      	movs	r3, #0
 800245c:	e010      	b.n	8002480 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	f7fd feb6 	bl	80001e0 <strcmp>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <cliArgsIsStr+0x46>
  {
    ret = true;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000a460 	.word	0x2000a460

0800248c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <cliKeepLoop+0x28>)
 8002494:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f002 ff34 	bl	8005308 <uartAvailable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <cliKeepLoop+0x1e>
  {
    return true;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024aa:	2300      	movs	r3, #0
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000a460 	.word	0x2000a460

080024b8 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <cliAdd+0x90>)
 80024c8:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d901      	bls.n	80024d8 <cliAdd+0x20>
  {
    return false;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e032      	b.n	800253e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024de:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80024e0:	89fa      	ldrh	r2, [r7, #14]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f008 fc8f 	bl	800ae1a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80024fc:	89fa      	ldrh	r2, [r7, #14]
 80024fe:	6939      	ldr	r1, [r7, #16]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002512:	89fa      	ldrh	r2, [r7, #14]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff feda 	bl	80022e0 <cliToUpper>

  p_cli->cmd_count++;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002532:	3301      	adds	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000a460 	.word	0x2000a460

0800254c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <cliShowList+0x60>)
 8002556:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002558:	4815      	ldr	r0, [pc, #84]	; (80025b0 <cliShowList+0x64>)
 800255a:	f7ff fe9d 	bl	8002298 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <cliShowList+0x68>)
 8002560:	f7ff fe9a 	bl	8002298 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e012      	b.n	8002590 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fe8a 	bl	8002298 <cliPrintf>
    cliPrintf("\r\n");
 8002584:	480a      	ldr	r0, [pc, #40]	; (80025b0 <cliShowList+0x64>)
 8002586:	f7ff fe87 	bl	8002298 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3301      	adds	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4293      	cmp	r3, r2
 800259c:	dbe5      	blt.n	800256a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <cliShowList+0x6c>)
 80025a0:	f7ff fe7a 	bl	8002298 <cliPrintf>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000a460 	.word	0x2000a460
 80025b0:	0800d524 	.word	0x0800d524
 80025b4:	0800d528 	.word	0x0800d528
 80025b8:	0800d548 	.word	0x0800d548

080025bc <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80025c4:	2310      	movs	r3, #16
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80025dc:	4840      	ldr	r0, [pc, #256]	; (80026e0 <cliMemoryDump+0x124>)
 80025de:	f7ff fe5b 	bl	8002298 <cliPrintf>
 80025e2:	e07a      	b.n	80026da <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	dd09      	ble.n	80025fe <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3304      	adds	r3, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f009 fb27 	bl	800bc48 <strtoul>
 80025fa:	4603      	mov	r3, r0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f009 fb1e 	bl	800bc48 <strtoul>
 800260c:	4603      	mov	r3, r0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002614:	4833      	ldr	r0, [pc, #204]	; (80026e4 <cliMemoryDump+0x128>)
 8002616:	f7ff fe3f 	bl	8002298 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	e058      	b.n	80026d2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	4619      	mov	r1, r3
 800262e:	482e      	ldr	r0, [pc, #184]	; (80026e8 <cliMemoryDump+0x12c>)
 8002630:	f7ff fe32 	bl	8002298 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	482c      	ldr	r0, [pc, #176]	; (80026ec <cliMemoryDump+0x130>)
 800263c:	f7ff fe2c 	bl	8002298 <cliPrintf>

    if ((idx%4) == 3)
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	425a      	negs	r2, r3
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	f002 0203 	and.w	r2, r2, #3
 800264c:	bf58      	it	pl
 800264e:	4253      	negpl	r3, r2
 8002650:	2b03      	cmp	r3, #3
 8002652:	d138      	bne.n	80026c6 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002654:	4826      	ldr	r0, [pc, #152]	; (80026f0 <cliMemoryDump+0x134>)
 8002656:	f7ff fe1f 	bl	8002298 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	e02c      	b.n	80026ba <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e01d      	b.n	80026a8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800266c:	f107 020c 	add.w	r2, r7, #12
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b1f      	cmp	r3, #31
 8002678:	d910      	bls.n	800269c <cliMemoryDump+0xe0>
 800267a:	f107 020c 	add.w	r2, r7, #12
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b7e      	cmp	r3, #126	; 0x7e
 8002686:	d809      	bhi.n	800269c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002688:	f107 020c 	add.w	r2, r7, #12
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4817      	ldr	r0, [pc, #92]	; (80026f4 <cliMemoryDump+0x138>)
 8002696:	f7ff fdff 	bl	8002298 <cliPrintf>
 800269a:	e002      	b.n	80026a2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <cliMemoryDump+0x13c>)
 800269e:	f7ff fdfb 	bl	8002298 <cliPrintf>
        for (i=0;i<4;i++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	ddde      	ble.n	800266c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	3304      	adds	r3, #4
 80026b2:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	3301      	adds	r3, #1
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	ddcf      	ble.n	8002660 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026c0:	480e      	ldr	r0, [pc, #56]	; (80026fc <cliMemoryDump+0x140>)
 80026c2:	f7ff fde9 	bl	8002298 <cliPrintf>
    }
    addr++;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3304      	adds	r3, #4
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	3301      	adds	r3, #1
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	429a      	cmp	r2, r3
 80026d8:	dba2      	blt.n	8002620 <cliMemoryDump+0x64>
  }
}
 80026da:	3730      	adds	r7, #48	; 0x30
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	0800d568 	.word	0x0800d568
 80026e4:	0800d57c 	.word	0x0800d57c
 80026e8:	0800d584 	.word	0x0800d584
 80026ec:	0800d590 	.word	0x0800d590
 80026f0:	0800d598 	.word	0x0800d598
 80026f4:	0800d59c 	.word	0x0800d59c
 80026f8:	0800d5a0 	.word	0x0800d5a0
 80026fc:	0800d5a4 	.word	0x0800d5a4

08002700 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002706:	2305      	movs	r3, #5
 8002708:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 800270a:	2201      	movs	r2, #1
 800270c:	4937      	ldr	r1, [pc, #220]	; (80027ec <Ds18b20_Init+0xec>)
 800270e:	4838      	ldr	r0, [pc, #224]	; (80027f0 <Ds18b20_Init+0xf0>)
 8002710:	f001 fb7f 	bl	8003e12 <OneWire_Init>
		TempSensorCount = 0;
 8002714:	4b37      	ldr	r3, [pc, #220]	; (80027f4 <Ds18b20_Init+0xf4>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 800271a:	e002      	b.n	8002722 <Ds18b20_Init+0x22>
			HAL_Delay(100);
 800271c:	2064      	movs	r0, #100	; 0x64
 800271e:	f003 fe37 	bl	8006390 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8002722:	f003 fe29 	bl	8006378 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	f640 33b7 	movw	r3, #2999	; 0xbb7
 800272c:	429a      	cmp	r2, r3
 800272e:	d9f5      	bls.n	800271c <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8002730:	482f      	ldr	r0, [pc, #188]	; (80027f0 <Ds18b20_Init+0xf0>)
 8002732:	f001 fc5b 	bl	8003fec <OneWire_First>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <Ds18b20_Init+0xf8>)
 800273c:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800273e:	e019      	b.n	8002774 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f003 fe25 	bl	8006390 <HAL_Delay>
			TempSensorCount++;
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <Ds18b20_Init+0xf4>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <Ds18b20_Init+0xf4>)
 8002750:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <Ds18b20_Init+0xf4>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3b01      	subs	r3, #1
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4a28      	ldr	r2, [pc, #160]	; (80027fc <Ds18b20_Init+0xfc>)
 800275c:	4413      	add	r3, r2
 800275e:	4619      	mov	r1, r3
 8002760:	4823      	ldr	r0, [pc, #140]	; (80027f0 <Ds18b20_Init+0xf0>)
 8002762:	f001 fd57 	bl	8004214 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8002766:	4822      	ldr	r0, [pc, #136]	; (80027f0 <Ds18b20_Init+0xf0>)
 8002768:	f001 fc50 	bl	800400c <OneWire_Next>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <Ds18b20_Init+0xf8>)
 8002772:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <Ds18b20_Init+0xf8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e1      	bne.n	8002740 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <Ds18b20_Init+0xf4>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	3b01      	subs	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1bc      	bne.n	800270a <Ds18b20_Init+0xa>
 8002790:	e000      	b.n	8002794 <Ds18b20_Init+0x94>
			break;
 8002792:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <Ds18b20_Init+0x9e>
		return false;
 800279a:	2300      	movs	r3, #0
 800279c:	e022      	b.n	80027e4 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	e019      	b.n	80027d8 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80027a4:	2032      	movs	r0, #50	; 0x32
 80027a6:	f003 fdf3 	bl	8006390 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80027aa:	79bb      	ldrb	r3, [r7, #6]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <Ds18b20_Init+0xfc>)
 80027b0:	4413      	add	r3, r2
 80027b2:	220c      	movs	r2, #12
 80027b4:	4619      	mov	r1, r3
 80027b6:	480e      	ldr	r0, [pc, #56]	; (80027f0 <Ds18b20_Init+0xf0>)
 80027b8:	f000 f822 	bl	8002800 <DS18B20_SetResolution>
		HAL_Delay(50);
 80027bc:	2032      	movs	r0, #50	; 0x32
 80027be:	f003 fde7 	bl	8006390 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <Ds18b20_Init+0xfc>)
 80027c8:	4413      	add	r3, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	4808      	ldr	r0, [pc, #32]	; (80027f0 <Ds18b20_Init+0xf0>)
 80027ce:	f000 f8b0 	bl	8002932 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80027d2:	79bb      	ldrb	r3, [r7, #6]
 80027d4:	3301      	adds	r3, #1
 80027d6:	71bb      	strb	r3, [r7, #6]
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <Ds18b20_Init+0xf4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	79ba      	ldrb	r2, [r7, #6]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3e0      	bcc.n	80027a4 <Ds18b20_Init+0xa4>
	}
	return true;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40020400 	.word	0x40020400
 80027f0:	2000a8b8 	.word	0x2000a8b8
 80027f4:	20000260 	.word	0x20000260
 80027f8:	2000a8a4 	.word	0x2000a8a4
 80027fc:	2000a8a8 	.word	0x2000a8a8

08002800 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 800280e:	68b8      	ldr	r0, [r7, #8]
 8002810:	f000 f87e 	bl	8002910 <DS18B20_Is>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <DS18B20_SetResolution+0x1e>
		return 0;
 800281a:	2300      	movs	r3, #0
 800281c:	e074      	b.n	8002908 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f001 fb20 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f001 fcd6 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800282c:	21be      	movs	r1, #190	; 0xbe
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f001 fb9e 	bl	8003f70 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f001 fbb8 	bl	8003faa <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f001 fbb5 	bl	8003faa <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f001 fbb2 	bl	8003faa <OneWire_ReadByte>
 8002846:	4603      	mov	r3, r0
 8002848:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f001 fbad 	bl	8003faa <OneWire_ReadByte>
 8002850:	4603      	mov	r3, r0
 8002852:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f001 fba8 	bl	8003faa <OneWire_ReadByte>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d108      	bne.n	8002876 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	f023 0320 	bic.w	r3, r3, #32
 8002872:	75fb      	strb	r3, [r7, #23]
 8002874:	e022      	b.n	80028bc <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b0a      	cmp	r3, #10
 800287a:	d108      	bne.n	800288e <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002882:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	f043 0320 	orr.w	r3, r3, #32
 800288a:	75fb      	strb	r3, [r7, #23]
 800288c:	e016      	b.n	80028bc <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b0b      	cmp	r3, #11
 8002892:	d108      	bne.n	80028a6 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	75fb      	strb	r3, [r7, #23]
 80028a4:	e00a      	b.n	80028bc <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d107      	bne.n	80028bc <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b2:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f001 fad1 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f001 fc87 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80028ca:	214e      	movs	r1, #78	; 0x4e
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 fb4f 	bl	8003f70 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80028d2:	7dbb      	ldrb	r3, [r7, #22]
 80028d4:	4619      	mov	r1, r3
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f001 fb4a 	bl	8003f70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80028dc:	7d7b      	ldrb	r3, [r7, #21]
 80028de:	4619      	mov	r1, r3
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f001 fb45 	bl	8003f70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f001 fb40 	bl	8003f70 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f001 fab7 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f001 fc6d 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80028fe:	2148      	movs	r1, #72	; 0x48
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 fb35 	bl	8003f70 <OneWire_WriteByte>

	return 1;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b28      	cmp	r3, #40	; 0x28
 800291e:	d101      	bne.n	8002924 <DS18B20_Is+0x14>
		return 1;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <DS18B20_Is+0x16>

	return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 800293c:	6838      	ldr	r0, [r7, #0]
 800293e:	f7ff ffe7 	bl	8002910 <DS18B20_Is>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002948:	2300      	movs	r3, #0
 800294a:	e049      	b.n	80029e0 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f001 fa89 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002952:	6839      	ldr	r1, [r7, #0]
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f001 fc3f 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800295a:	21be      	movs	r1, #190	; 0xbe
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f001 fb07 	bl	8003f70 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f001 fb21 	bl	8003faa <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f001 fb1e 	bl	8003faa <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f001 fb1b 	bl	8003faa <OneWire_ReadByte>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f001 fb16 	bl	8003faa <OneWire_ReadByte>
 800297e:	4603      	mov	r3, r0
 8002980:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 fb11 	bl	8003faa <OneWire_ReadByte>
 8002988:	4603      	mov	r3, r0
 800298a:	737b      	strb	r3, [r7, #13]

	th = 125;
 800298c:	237d      	movs	r3, #125	; 0x7d
 800298e:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002990:	23c9      	movs	r3, #201	; 0xc9
 8002992:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f001 fa65 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f001 fc1b 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80029a2:	214e      	movs	r1, #78	; 0x4e
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fae3 	bl	8003f70 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f001 fade 	bl	8003f70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f001 fad9 	bl	8003f70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80029be:	7b7b      	ldrb	r3, [r7, #13]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 fad4 	bl	8003f70 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f001 fa4b 	bl	8003e64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80029ce:	6839      	ldr	r1, [r7, #0]
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fc01 	bl	80041d8 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80029d6:	2148      	movs	r1, #72	; 0x48
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 fac9 	bl	8003f70 <OneWire_WriteByte>

	return 1;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <gpioInit>:
#endif



bool gpioInit(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
  bool ret = true;
 80029ee:	2301      	movs	r3, #1
 80029f0:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <gpioInit+0xa0>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <gpioInit+0xa0>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <gpioInit+0xa0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <gpioInit+0xa0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <gpioInit+0xa0>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <gpioInit+0xa0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e01e      	b.n	8002a6e <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	b2d8      	uxtb	r0, r3
 8002a34:	4915      	ldr	r1, [pc, #84]	; (8002a8c <gpioInit+0xa4>)
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3308      	adds	r3, #8
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	f000 f826 	bl	8002a98 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	b2d8      	uxtb	r0, r3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <gpioInit+0xa4>)
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	330b      	adds	r3, #11
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	4619      	mov	r1, r3
 8002a64:	f000 f88a 	bl	8002b7c <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	dddd      	ble.n	8002a30 <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <gpioInit+0xa8>)
 8002a76:	4807      	ldr	r0, [pc, #28]	; (8002a94 <gpioInit+0xac>)
 8002a78:	f7ff fd1e 	bl	80024b8 <cliAdd>
#endif

  return ret;
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	0800d684 	.word	0x0800d684
 8002a90:	08002c95 	.word	0x08002c95
 8002a94:	0800d5b4 	.word	0x0800d5b4

08002a98 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	d901      	bls.n	8002ac6 <gpioPinMode+0x2e>
  {
    return false;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e054      	b.n	8002b70 <gpioPinMode+0xd8>
  }

  switch(mode)
 8002ac6:	79bb      	ldrb	r3, [r7, #6]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d838      	bhi.n	8002b3e <gpioPinMode+0xa6>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <gpioPinMode+0x3c>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002af1 	.word	0x08002af1
 8002ad8:	08002afb 	.word	0x08002afb
 8002adc:	08002b05 	.word	0x08002b05
 8002ae0:	08002b0f 	.word	0x08002b0f
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b23 	.word	0x08002b23
 8002aec:	08002b2d 	.word	0x08002b2d
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
      break;
 8002af8:	e021      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e01c      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
      break;
 8002b0c:	e017      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
      break;
 8002b16:	e012      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]
      break;
 8002b20:	e00d      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b26:	2302      	movs	r3, #2
 8002b28:	613b      	str	r3, [r7, #16]
      break;
 8002b2a:	e008      	b.n	8002b3e <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61bb      	str	r3, [r7, #24]
      break;
 8002b3c:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	490d      	ldr	r1, [pc, #52]	; (8002b78 <gpioPinMode+0xe0>)
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002b52:	79fa      	ldrb	r2, [r7, #7]
 8002b54:	4908      	ldr	r1, [pc, #32]	; (8002b78 <gpioPinMode+0xe0>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f107 0208 	add.w	r2, r7, #8
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fe9d 	bl	80078a8 <HAL_GPIO_Init>

  return ret;
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	0800d684 	.word	0x0800d684

08002b7c <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	460a      	mov	r2, r1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	d842      	bhi.n	8002c18 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 8002b92:	79bb      	ldrb	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01f      	beq.n	8002bd8 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002b98:	79fa      	ldrb	r2, [r7, #7]
 8002b9a:	4921      	ldr	r1, [pc, #132]	; (8002c20 <gpioPinWrite+0xa4>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	491d      	ldr	r1, [pc, #116]	; (8002c20 <gpioPinWrite+0xa4>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29c      	uxth	r4, r3
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4918      	ldr	r1, [pc, #96]	; (8002c20 <gpioPinWrite+0xa4>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3309      	adds	r3, #9
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	f005 f8e5 	bl	8007da0 <HAL_GPIO_WritePin>
 8002bd6:	e020      	b.n	8002c1a <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	4911      	ldr	r1, [pc, #68]	; (8002c20 <gpioPinWrite+0xa4>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	79fa      	ldrb	r2, [r7, #7]
 8002bea:	490d      	ldr	r1, [pc, #52]	; (8002c20 <gpioPinWrite+0xa4>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29c      	uxth	r4, r3
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <gpioPinWrite+0xa4>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	330a      	adds	r3, #10
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4621      	mov	r1, r4
 8002c12:	f005 f8c5 	bl	8007da0 <HAL_GPIO_WritePin>
 8002c16:	e000      	b.n	8002c1a <gpioPinWrite+0x9e>
    return;
 8002c18:	bf00      	nop
  }
}
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}
 8002c20:	0800d684 	.word	0x0800d684

08002c24 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d901      	bls.n	8002c3c <gpioPinRead+0x18>
  {
    return false;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e024      	b.n	8002c86 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002c3c:	79fa      	ldrb	r2, [r7, #7]
 8002c3e:	4914      	ldr	r1, [pc, #80]	; (8002c90 <gpioPinRead+0x6c>)
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	4910      	ldr	r1, [pc, #64]	; (8002c90 <gpioPinRead+0x6c>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	f005 f885 	bl	8007d70 <HAL_GPIO_ReadPin>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	4908      	ldr	r1, [pc, #32]	; (8002c90 <gpioPinRead+0x6c>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3309      	adds	r3, #9
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4298      	cmp	r0, r3
 8002c7e:	d101      	bne.n	8002c84 <gpioPinRead+0x60>
  {
    ret = true;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	0800d684 	.word	0x0800d684

08002c94 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d128      	bne.n	8002cfa <cliGpio+0x66>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	4947      	ldr	r1, [pc, #284]	; (8002dcc <cliGpio+0x138>)
 8002cae:	2000      	movs	r0, #0
 8002cb0:	4798      	blx	r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8002cb8:	e018      	b.n	8002cec <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e00c      	b.n	8002cda <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ffad 	bl	8002c24 <gpioPinRead>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4840      	ldr	r0, [pc, #256]	; (8002dd0 <cliGpio+0x13c>)
 8002cd0:	f7ff fae2 	bl	8002298 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	ddef      	ble.n	8002cc0 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8002ce0:	483c      	ldr	r0, [pc, #240]	; (8002dd4 <cliGpio+0x140>)
 8002ce2:	f7ff fad9 	bl	8002298 <cliPrintf>
      delay(100);
 8002ce6:	2064      	movs	r0, #100	; 0x64
 8002ce8:	f7fe fa84 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8002cec:	f7ff fbce 	bl	800248c <cliKeepLoop>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e1      	bne.n	8002cba <cliGpio+0x26>
    }
    ret = true;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <cliGpio+0xb6>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <cliGpio+0x144>)
 8002d08:	2000      	movs	r0, #0
 8002d0a:	4798      	blx	r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01b      	beq.n	8002d4a <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2001      	movs	r0, #1
 8002d18:	4798      	blx	r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8002d1e:	e00d      	b.n	8002d3c <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002d20:	7bfc      	ldrb	r4, [r7, #15]
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff7d 	bl	8002c24 <gpioPinRead>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4621      	mov	r1, r4
 8002d30:	482a      	ldr	r0, [pc, #168]	; (8002ddc <cliGpio+0x148>)
 8002d32:	f7ff fab1 	bl	8002298 <cliPrintf>
      delay(100);
 8002d36:	2064      	movs	r0, #100	; 0x64
 8002d38:	f7fe fa5c 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8002d3c:	f7ff fba6 	bl	800248c <cliKeepLoop>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ec      	bne.n	8002d20 <cliGpio+0x8c>
    }

    ret = true;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d126      	bne.n	8002da0 <cliGpio+0x10c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4922      	ldr	r1, [pc, #136]	; (8002de0 <cliGpio+0x14c>)
 8002d58:	2000      	movs	r0, #0
 8002d5a:	4798      	blx	r3
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01e      	beq.n	8002da0 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2001      	movs	r0, #1
 8002d68:	4798      	blx	r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2002      	movs	r0, #2
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8002d7a:	7b7b      	ldrb	r3, [r7, #13]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fef6 	bl	8002b7c <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8002d90:	7bbb      	ldrb	r3, [r7, #14]
 8002d92:	7b7a      	ldrb	r2, [r7, #13]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4813      	ldr	r0, [pc, #76]	; (8002de4 <cliGpio+0x150>)
 8002d98:	f7ff fa7e 	bl	8002298 <cliPrintf>
    ret = true;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8002dac:	480e      	ldr	r0, [pc, #56]	; (8002de8 <cliGpio+0x154>)
 8002dae:	f7ff fa73 	bl	8002298 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002db2:	210f      	movs	r1, #15
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <cliGpio+0x158>)
 8002db6:	f7ff fa6f 	bl	8002298 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8002dba:	210f      	movs	r1, #15
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <cliGpio+0x15c>)
 8002dbe:	f7ff fa6b 	bl	8002298 <cliPrintf>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	0800d5bc 	.word	0x0800d5bc
 8002dd0:	0800d5c4 	.word	0x0800d5c4
 8002dd4:	0800d5c8 	.word	0x0800d5c8
 8002dd8:	0800d5cc 	.word	0x0800d5cc
 8002ddc:	0800d5d4 	.word	0x0800d5d4
 8002de0:	0800d5e8 	.word	0x0800d5e8
 8002de4:	0800d5f0 	.word	0x0800d5f0
 8002de8:	0800d604 	.word	0x0800d604
 8002dec:	0800d610 	.word	0x0800d610
 8002df0:	0800d624 	.word	0x0800d624

08002df4 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8002df8:	f7fe fa07 	bl	800120a <millis>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <TransferDoneISR+0x40>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <TransferDoneISR+0x44>)
 8002e06:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8002e08:	f7fe f9ff 	bl	800120a <millis>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <TransferDoneISR+0x40>)
 8002e10:	601a      	str	r2, [r3, #0]

  if (fps_time > 0)
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <TransferDoneISR+0x44>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <TransferDoneISR+0x44>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <TransferDoneISR+0x48>)
 8002e28:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <TransferDoneISR+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000284 	.word	0x20000284
 8002e38:	20000288 	.word	0x20000288
 8002e3c:	2000028c 	.word	0x2000028c
 8002e40:	20000282 	.word	0x20000282

08002e44 <lcdInit>:


bool lcdInit(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8002e4a:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <lcdInit+0xa4>)
 8002e4c:	2264      	movs	r2, #100	; 0x64
 8002e4e:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8002e50:	f002 ff3a 	bl	8005cc8 <st7735Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <lcdInit+0xa8>)
 8002e5a:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8002e5c:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <lcdInit+0xac>)
 8002e5e:	f002 ff3f 	bl	8005ce0 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <lcdInit+0xac>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4823      	ldr	r0, [pc, #140]	; (8002ef4 <lcdInit+0xb0>)
 8002e68:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	e007      	b.n	8002e80 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <lcdInit+0xb4>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2100      	movs	r1, #0
 8002e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e86:	dbf3      	blt.n	8002e70 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8002e88:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	481a      	ldr	r0, [pc, #104]	; (8002ef8 <lcdInit+0xb4>)
 8002e90:	f007 ffbb 	bl	800ae0a <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <lcdInit+0xb8>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	035b      	lsls	r3, r3, #13
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <lcdInit+0xb4>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <lcdInit+0xbc>)
 8002ea8:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	22a0      	movs	r2, #160	; 0xa0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f000 fbe6 	bl	8003686 <lcdDrawFillRect>
  lcdUpdateDraw();
 8002eba:	f000 faad 	bl	8003418 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8002ebe:	2064      	movs	r0, #100	; 0x64
 8002ec0:	f000 f830 	bl	8002f24 <lcdSetBackLight>


  if (is_init != true)
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <lcdInit+0xa8>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f083 0301 	eor.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <lcdInit+0x92>
  {
    return false;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e004      	b.n	8002ee0 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8002ed6:	490b      	ldr	r1, [pc, #44]	; (8002f04 <lcdInit+0xc0>)
 8002ed8:	480b      	ldr	r0, [pc, #44]	; (8002f08 <lcdInit+0xc4>)
 8002eda:	f7ff faed 	bl	80024b8 <cliAdd>
#endif

  return true;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	2000001c 	.word	0x2000001c
 8002eec:	20000280 	.word	0x20000280
 8002ef0:	20000264 	.word	0x20000264
 8002ef4:	08002df5 	.word	0x08002df5
 8002ef8:	200002c0 	.word	0x200002c0
 8002efc:	20000281 	.word	0x20000281
 8002f00:	20000290 	.word	0x20000290
 8002f04:	08003a2d 	.word	0x08003a2d
 8002f08:	0800d744 	.word	0x0800d744

08002f0c <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return is_init;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <lcdIsInit+0x14>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000280 	.word	0x20000280

08002f24 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	bf28      	it	cs
 8002f34:	2364      	movcs	r3, #100	; 0x64
 8002f36:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <lcdSetBackLight+0x48>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d002      	beq.n	8002f48 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <lcdSetBackLight+0x48>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <lcdSetBackLight+0x48>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8002f50:	2101      	movs	r1, #1
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7ff fe12 	bl	8002b7c <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8002f58:	e003      	b.n	8002f62 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7ff fe0d 	bl	8002b7c <gpioPinWrite>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000001c 	.word	0x2000001c

08002f70 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <lcdDrawPixel+0x14>)
 8002f72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002f76:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000290 	.word	0x20000290

08002f88 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8002f8c:	f000 fa70 	bl	8003470 <lcdGetFrameBuffer>
 8002f90:	f500 421f 	add.w	r2, r0, #40704	; 0x9f00
 8002f94:	b2a1      	uxth	r1, r4
 8002f96:	32fe      	adds	r2, #254	; 0xfe
 8002f98:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8002f9a:	f823 1f02 	strh.w	r1, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d1fb      	bne.n	8002f9a <lcdClearBuffer+0x12>
  }
}
 8002fa2:	bd10      	pop	{r4, pc}

08002fa4 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8002fa4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002fa8:	4616      	mov	r6, r2
 8002faa:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
 8002fac:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 8002fb0:	0052      	lsls	r2, r2, #1
  int32_t x     = 0;

  while (x < r)
 8002fb2:	2e00      	cmp	r6, #0
  int32_t ddF_y = -2 * r;
 8002fb4:	9200      	str	r2, [sp, #0]
{
 8002fb6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  while (x < r)
 8002fba:	f340 8090 	ble.w	80030de <lcdDrawCircleHelper+0x13a>
 8002fbe:	f003 0204 	and.w	r2, r3, #4
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	f003 0202 	and.w	r2, r3, #2
 8002fc8:	9202      	str	r2, [sp, #8]
 8002fca:	f003 0208 	and.w	r2, r3, #8
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	f1c6 0401 	rsb	r4, r6, #1
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8002fd6:	fa1f f880 	uxth.w	r8, r0
 8002fda:	fa1f f981 	uxth.w	r9, r1
 8002fde:	9203      	str	r2, [sp, #12]
 8002fe0:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	e00a      	b.n	8002ffc <lcdDrawCircleHelper+0x58>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8002fe6:	9b02      	ldr	r3, [sp, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12e      	bne.n	800304a <lcdDrawCircleHelper+0xa6>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8002fec:	9b03      	ldr	r3, [sp, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d144      	bne.n	800307c <lcdDrawCircleHelper+0xd8>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8002ff2:	9b04      	ldr	r3, [sp, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d15a      	bne.n	80030ae <lcdDrawCircleHelper+0x10a>
  while (x < r)
 8002ff8:	42ae      	cmp	r6, r5
 8002ffa:	dd70      	ble.n	80030de <lcdDrawCircleHelper+0x13a>
    if (f >= 0)
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	db04      	blt.n	800300a <lcdDrawCircleHelper+0x66>
      ddF_y += 2;
 8003000:	9b00      	ldr	r3, [sp, #0]
 8003002:	3302      	adds	r3, #2
 8003004:	9300      	str	r3, [sp, #0]
      f     += ddF_y;
 8003006:	441c      	add	r4, r3
      r--;
 8003008:	3e01      	subs	r6, #1
    x++;
 800300a:	3501      	adds	r5, #1
    if (cornername & 0x4)
 800300c:	9b01      	ldr	r3, [sp, #4]
    f     += ddF_x;
 800300e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003012:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0e6      	beq.n	8002fe6 <lcdDrawCircleHelper+0x42>
 8003018:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 + r, color);
 800301a:	fa1f fb86 	uxth.w	fp, r6
 800301e:	eb08 0003 	add.w	r0, r8, r3
 8003022:	eb09 010b 	add.w	r1, r9, fp
 8003026:	b280      	uxth	r0, r0
 8003028:	b289      	uxth	r1, r1
 800302a:	4652      	mov	r2, sl
 800302c:	9305      	str	r3, [sp, #20]
 800302e:	f7ff ff9f 	bl	8002f70 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8003032:	9b05      	ldr	r3, [sp, #20]
 8003034:	eb08 000b 	add.w	r0, r8, fp
 8003038:	eb09 0103 	add.w	r1, r9, r3
 800303c:	b289      	uxth	r1, r1
 800303e:	b280      	uxth	r0, r0
 8003040:	f7ff ff96 	bl	8002f70 <lcdDrawPixel>
    if (cornername & 0x2)
 8003044:	9b02      	ldr	r3, [sp, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0d0      	beq.n	8002fec <lcdDrawCircleHelper+0x48>
 800304a:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 - r, color);
 800304c:	fa1f fb86 	uxth.w	fp, r6
 8003050:	eb08 0003 	add.w	r0, r8, r3
 8003054:	eba9 010b 	sub.w	r1, r9, fp
 8003058:	b280      	uxth	r0, r0
 800305a:	b289      	uxth	r1, r1
 800305c:	4652      	mov	r2, sl
 800305e:	9305      	str	r3, [sp, #20]
 8003060:	f7ff ff86 	bl	8002f70 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8003064:	9b05      	ldr	r3, [sp, #20]
 8003066:	eb08 000b 	add.w	r0, r8, fp
 800306a:	eba9 0103 	sub.w	r1, r9, r3
 800306e:	b289      	uxth	r1, r1
 8003070:	b280      	uxth	r0, r0
 8003072:	f7ff ff7d 	bl	8002f70 <lcdDrawPixel>
    if (cornername & 0x8)
 8003076:	9b03      	ldr	r3, [sp, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0ba      	beq.n	8002ff2 <lcdDrawCircleHelper+0x4e>
      lcdDrawPixel(x0 - r, y0 + x, color);
 800307c:	b2b3      	uxth	r3, r6
 800307e:	fa1f fb85 	uxth.w	fp, r5
 8003082:	eba8 0003 	sub.w	r0, r8, r3
 8003086:	eb09 010b 	add.w	r1, r9, fp
 800308a:	b280      	uxth	r0, r0
 800308c:	b289      	uxth	r1, r1
 800308e:	4652      	mov	r2, sl
 8003090:	9305      	str	r3, [sp, #20]
 8003092:	f7ff ff6d 	bl	8002f70 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8003096:	9b05      	ldr	r3, [sp, #20]
 8003098:	eba8 000b 	sub.w	r0, r8, fp
 800309c:	eb03 0109 	add.w	r1, r3, r9
 80030a0:	b289      	uxth	r1, r1
 80030a2:	b280      	uxth	r0, r0
 80030a4:	f7ff ff64 	bl	8002f70 <lcdDrawPixel>
    if (cornername & 0x1)
 80030a8:	9b04      	ldr	r3, [sp, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0a4      	beq.n	8002ff8 <lcdDrawCircleHelper+0x54>
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 80030ae:	b2b3      	uxth	r3, r6
 80030b0:	fa1f fb85 	uxth.w	fp, r5
 80030b4:	eba8 0003 	sub.w	r0, r8, r3
 80030b8:	eba9 010b 	sub.w	r1, r9, fp
 80030bc:	b280      	uxth	r0, r0
 80030be:	b289      	uxth	r1, r1
 80030c0:	4652      	mov	r2, sl
 80030c2:	9305      	str	r3, [sp, #20]
 80030c4:	f7ff ff54 	bl	8002f70 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 80030c8:	9b05      	ldr	r3, [sp, #20]
 80030ca:	eba8 000b 	sub.w	r0, r8, fp
 80030ce:	eba9 0103 	sub.w	r1, r9, r3
 80030d2:	b289      	uxth	r1, r1
 80030d4:	b280      	uxth	r0, r0
 80030d6:	f7ff ff4b 	bl	8002f70 <lcdDrawPixel>
  while (x < r)
 80030da:	42ae      	cmp	r6, r5
 80030dc:	dc8e      	bgt.n	8002ffc <lcdDrawCircleHelper+0x58>
    }
  }
}
 80030de:	b006      	add	sp, #24
 80030e0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080030e4 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 80030e4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80030e8:	b08a      	sub	sp, #40	; 0x28
 80030ea:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80030ee:	9206      	str	r2, [sp, #24]
 80030f0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
{
 80030f4:	9604      	str	r6, [sp, #16]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80030f6:	fa1f f984 	uxth.w	r9, r4
{
 80030fa:	4606      	mov	r6, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 80030fc:	b280      	uxth	r0, r0
{
 80030fe:	469c      	mov	ip, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003100:	f8bd 8010 	ldrh.w	r8, [sp, #16]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003104:	f8cd c01c 	str.w	ip, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003108:	eb00 0a09 	add.w	sl, r0, r9
 800310c:	eba5 0b49 	sub.w	fp, r5, r9, lsl #1
 8003110:	fa0f fa8a 	sxth.w	sl, sl
 8003114:	fa0f fb8b 	sxth.w	fp, fp
 8003118:	9103      	str	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 800311a:	f8bd e01c 	ldrh.w	lr, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800311e:	9008      	str	r0, [sp, #32]
 8003120:	465a      	mov	r2, fp
 8003122:	4650      	mov	r0, sl
 8003124:	4643      	mov	r3, r8
 8003126:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 800312a:	f8cd e014 	str.w	lr, [sp, #20]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800312e:	9509      	str	r5, [sp, #36]	; 0x24
 8003130:	f000 fa84 	bl	800363c <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003134:	9905      	ldr	r1, [sp, #20]
 8003136:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 800313a:	3901      	subs	r1, #1
 800313c:	4429      	add	r1, r5
 800313e:	465a      	mov	r2, fp
 8003140:	4650      	mov	r0, sl
 8003142:	4643      	mov	r3, r8
 8003144:	b209      	sxth	r1, r1
 8003146:	f000 fa79 	bl	800363c <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 800314a:	9905      	ldr	r1, [sp, #20]
 800314c:	444d      	add	r5, r9
 800314e:	eba1 0949 	sub.w	r9, r1, r9, lsl #1
 8003152:	b22d      	sxth	r5, r5
 8003154:	fa0f f989 	sxth.w	r9, r9
 8003158:	464a      	mov	r2, r9
 800315a:	4629      	mov	r1, r5
 800315c:	4643      	mov	r3, r8
 800315e:	b230      	sxth	r0, r6
 8003160:	f000 fa47 	bl	80035f2 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003166:	9a08      	ldr	r2, [sp, #32]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	4629      	mov	r1, r5
 800316c:	4410      	add	r0, r2

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800316e:	4635      	mov	r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003170:	464a      	mov	r2, r9
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8003172:	46b1      	mov	r9, r6
 8003174:	9e03      	ldr	r6, [sp, #12]
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8003176:	4643      	mov	r3, r8
 8003178:	b200      	sxth	r0, r0
 800317a:	f000 fa3a 	bl	80035f2 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 800317e:	eb04 0806 	add.w	r8, r4, r6
 8003182:	4425      	add	r5, r4
 8003184:	9e04      	ldr	r6, [sp, #16]
 8003186:	9600      	str	r6, [sp, #0]
 8003188:	4628      	mov	r0, r5
 800318a:	4641      	mov	r1, r8
 800318c:	4622      	mov	r2, r4
 800318e:	2301      	movs	r3, #1
 8003190:	f7ff ff08 	bl	8002fa4 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8003194:	9a06      	ldr	r2, [sp, #24]
 8003196:	9600      	str	r6, [sp, #0]
 8003198:	444a      	add	r2, r9
 800319a:	eba2 0904 	sub.w	r9, r2, r4
 800319e:	f109 39ff 	add.w	r9, r9, #4294967295
 80031a2:	4641      	mov	r1, r8
 80031a4:	4648      	mov	r0, r9
 80031a6:	4622      	mov	r2, r4
 80031a8:	2302      	movs	r3, #2
 80031aa:	9604      	str	r6, [sp, #16]
 80031ac:	f7ff fefa 	bl	8002fa4 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80031b0:	9e03      	ldr	r6, [sp, #12]
 80031b2:	9b07      	ldr	r3, [sp, #28]
 80031b4:	4433      	add	r3, r6
 80031b6:	eba3 0804 	sub.w	r8, r3, r4
 80031ba:	9e04      	ldr	r6, [sp, #16]
 80031bc:	9600      	str	r6, [sp, #0]
 80031be:	f108 38ff 	add.w	r8, r8, #4294967295
 80031c2:	4648      	mov	r0, r9
 80031c4:	4641      	mov	r1, r8
 80031c6:	4622      	mov	r2, r4
 80031c8:	2304      	movs	r3, #4
 80031ca:	f7ff feeb 	bl	8002fa4 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80031ce:	4641      	mov	r1, r8
 80031d0:	4628      	mov	r0, r5
 80031d2:	4622      	mov	r2, r4
 80031d4:	2308      	movs	r3, #8
 80031d6:	9612      	str	r6, [sp, #72]	; 0x48
}
 80031d8:	b00a      	add	sp, #40	; 0x28
 80031da:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 80031de:	f7ff bee1 	b.w	8002fa4 <lcdDrawCircleHelper>

080031e2 <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 80031e2:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80031e6:	4616      	mov	r6, r2
 80031e8:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 80031ea:	f1c6 0a00 	rsb	sl, r6, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 80031ee:	2e00      	cmp	r6, #0
{
 80031f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 80031f2:	ebaa 0a06 	sub.w	sl, sl, r6
  while (y < r)
 80031f6:	dd73      	ble.n	80032e0 <lcdDrawFillCircleHelper+0xfe>
 80031f8:	3201      	adds	r2, #1
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80031fa:	b292      	uxth	r2, r2
 80031fc:	b280      	uxth	r0, r0
 80031fe:	b289      	uxth	r1, r1
 8003200:	9203      	str	r2, [sp, #12]
 8003202:	f003 0201 	and.w	r2, r3, #1
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	f1c6 0401 	rsb	r4, r6, #1
 800320e:	9001      	str	r0, [sp, #4]
 8003210:	9102      	str	r1, [sp, #8]
 8003212:	9205      	str	r2, [sp, #20]
 8003214:	9304      	str	r3, [sp, #16]
  int32_t y     = 0;
 8003216:	2500      	movs	r5, #0
 8003218:	e004      	b.n	8003224 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 800321a:	9b04      	ldr	r3, [sp, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d137      	bne.n	8003290 <lcdDrawFillCircleHelper+0xae>
  while (y < r)
 8003220:	42ae      	cmp	r6, r5
 8003222:	dd5d      	ble.n	80032e0 <lcdDrawFillCircleHelper+0xfe>
    if (f >= 0)
 8003224:	2c00      	cmp	r4, #0
    y++;
 8003226:	f105 0501 	add.w	r5, r5, #1
    if (f >= 0)
 800322a:	db03      	blt.n	8003234 <lcdDrawFillCircleHelper+0x52>
      ddF_y += 2;
 800322c:	f10a 0a02 	add.w	sl, sl, #2
      f     += ddF_y;
 8003230:	4454      	add	r4, sl
      r--;
 8003232:	3e01      	subs	r6, #1
    if (cornername & 0x1)
 8003234:	9b05      	ldr	r3, [sp, #20]
    f     += ddF_x;
 8003236:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800323a:	3401      	adds	r4, #1
    if (cornername & 0x1)
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ec      	beq.n	800321a <lcdDrawFillCircleHelper+0x38>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003240:	9901      	ldr	r1, [sp, #4]
 8003242:	9b03      	ldr	r3, [sp, #12]
 8003244:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003248:	fa1f f986 	uxth.w	r9, r6
 800324c:	eba1 0009 	sub.w	r0, r1, r9
 8003250:	9902      	ldr	r1, [sp, #8]
 8003252:	fa1f f885 	uxth.w	r8, r5
 8003256:	fa1f fb8c 	uxth.w	fp, ip
 800325a:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 800325e:	4441      	add	r1, r8
 8003260:	b212      	sxth	r2, r2
 8003262:	b200      	sxth	r0, r0
 8003264:	b209      	sxth	r1, r1
 8003266:	465b      	mov	r3, fp
 8003268:	f000 f9e8 	bl	800363c <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 800326c:	9a02      	ldr	r2, [sp, #8]
 800326e:	9b03      	ldr	r3, [sp, #12]
 8003270:	eb09 0102 	add.w	r1, r9, r2
 8003274:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003278:	9b01      	ldr	r3, [sp, #4]
 800327a:	eba3 0008 	sub.w	r0, r3, r8
 800327e:	b209      	sxth	r1, r1
 8003280:	465b      	mov	r3, fp
 8003282:	b212      	sxth	r2, r2
 8003284:	b200      	sxth	r0, r0
 8003286:	f000 f9d9 	bl	800363c <lcdDrawHLine>
    if (cornername & 0x2)
 800328a:	9b04      	ldr	r3, [sp, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0c7      	beq.n	8003220 <lcdDrawFillCircleHelper+0x3e>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8003290:	9901      	ldr	r1, [sp, #4]
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003298:	fa1f f986 	uxth.w	r9, r6
 800329c:	eba1 0009 	sub.w	r0, r1, r9
 80032a0:	9902      	ldr	r1, [sp, #8]
 80032a2:	fa1f f885 	uxth.w	r8, r5
 80032a6:	fa1f fb8c 	uxth.w	fp, ip
 80032aa:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 80032ae:	eba1 0108 	sub.w	r1, r1, r8
 80032b2:	b212      	sxth	r2, r2
 80032b4:	b200      	sxth	r0, r0
 80032b6:	b209      	sxth	r1, r1
 80032b8:	465b      	mov	r3, fp
 80032ba:	f000 f9bf 	bl	800363c <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 80032be:	9a02      	ldr	r2, [sp, #8]
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	eba2 0109 	sub.w	r1, r2, r9
 80032c6:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 80032ca:	9b01      	ldr	r3, [sp, #4]
 80032cc:	eba3 0008 	sub.w	r0, r3, r8
 80032d0:	b209      	sxth	r1, r1
 80032d2:	465b      	mov	r3, fp
 80032d4:	b212      	sxth	r2, r2
 80032d6:	b200      	sxth	r0, r0
 80032d8:	f000 f9b0 	bl	800363c <lcdDrawHLine>
  while (y < r)
 80032dc:	42ae      	cmp	r6, r5
 80032de:	dca1      	bgt.n	8003224 <lcdDrawFillCircleHelper+0x42>
    }
  }
}
 80032e0:	b006      	add	sp, #24
 80032e2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080032e6 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 80032e6:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 80032f0:	4689      	mov	r9, r1
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 80032f2:	b2a1      	uxth	r1, r4
{
 80032f4:	461e      	mov	r6, r3
 80032f6:	4615      	mov	r5, r2
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 80032f8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80032fc:	fa1f f28a 	uxth.w	r2, sl
 8003300:	4449      	add	r1, r9
 8003302:	9200      	str	r2, [sp, #0]
{
 8003304:	4680      	mov	r8, r0
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003306:	b22a      	sxth	r2, r5
 8003308:	b21b      	sxth	r3, r3
 800330a:	b209      	sxth	r1, r1
 800330c:	b200      	sxth	r0, r0
 800330e:	f000 f9ba 	bl	8003686 <lcdDrawFillRect>

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8003312:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003316:	eb09 0106 	add.w	r1, r9, r6
 800331a:	3d01      	subs	r5, #1
 800331c:	44a0      	add	r8, r4
 800331e:	1b09      	subs	r1, r1, r4
 8003320:	4640      	mov	r0, r8
 8003322:	4622      	mov	r2, r4
 8003324:	9500      	str	r5, [sp, #0]
 8003326:	3901      	subs	r1, #1
 8003328:	f8cd a004 	str.w	sl, [sp, #4]
 800332c:	2301      	movs	r3, #1
 800332e:	f7ff ff58 	bl	80031e2 <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003332:	4640      	mov	r0, r8
 8003334:	eb09 0104 	add.w	r1, r9, r4
 8003338:	4622      	mov	r2, r4
 800333a:	2302      	movs	r3, #2
 800333c:	950a      	str	r5, [sp, #40]	; 0x28
 800333e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
}
 8003342:	b003      	add	sp, #12
 8003344:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003348:	f7ff bf4b 	b.w	80031e2 <lcdDrawFillCircleHelper>

0800334c <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return fps_count;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <lcdGetFps+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000028c 	.word	0x2000028c

08003364 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return fps_time;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <lcdGetFpsTime+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000288 	.word	0x20000288

0800337c <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <lcdDrawAvailable+0x28>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	20000282 	.word	0x20000282

080033a8 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80033a8:	b598      	push	{r3, r4, r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  if (is_init != true)
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <lcdRequestDraw+0x5c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <lcdRequestDraw+0x16>
  {
    return false;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e020      	b.n	8003400 <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <lcdRequestDraw+0x60>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <lcdRequestDraw+0x22>
  {
    return false;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e01a      	b.n	8003400 <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <lcdRequestDraw+0x64>)
 80033cc:	689c      	ldr	r4, [r3, #8]
 80033ce:	237f      	movs	r3, #127	; 0x7f
 80033d0:	229f      	movs	r2, #159	; 0x9f
 80033d2:	2100      	movs	r1, #0
 80033d4:	2000      	movs	r0, #0
 80033d6:	47a0      	blx	r4

  lcd_request_draw = true;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <lcdRequestDraw+0x60>)
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <lcdRequestDraw+0x64>)
 80033e0:	699c      	ldr	r4, [r3, #24]
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <lcdRequestDraw+0x68>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	035b      	lsls	r3, r3, #13
 80033f0:	4a08      	ldr	r2, [pc, #32]	; (8003414 <lcdRequestDraw+0x6c>)
 80033f2:	4413      	add	r3, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80033fa:	4618      	mov	r0, r3
 80033fc:	47a0      	blx	r4

  return true;
 80033fe:	2301      	movs	r3, #1
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd98      	pop	{r3, r4, r7, pc}
 8003404:	20000280 	.word	0x20000280
 8003408:	20000282 	.word	0x20000282
 800340c:	20000264 	.word	0x20000264
 8003410:	20000281 	.word	0x20000281
 8003414:	200002c0 	.word	0x200002c0

08003418 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <lcdUpdateDraw+0x54>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d118      	bne.n	800345e <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 800342c:	f7ff ffbc 	bl	80033a8 <lcdRequestDraw>

  pre_time = millis();
 8003430:	f7fd feeb 	bl	800120a <millis>
 8003434:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003436:	e009      	b.n	800344c <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003438:	2001      	movs	r0, #1
 800343a:	f7fd fedb 	bl	80011f4 <delay>
    if (millis()-pre_time >= 100)
 800343e:	f7fd fee4 	bl	800120a <millis>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b63      	cmp	r3, #99	; 0x63
 800344a:	d80a      	bhi.n	8003462 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 800344c:	f7ff ff96 	bl	800337c <lcdDrawAvailable>
 8003450:	4603      	mov	r3, r0
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ed      	bne.n	8003438 <lcdUpdateDraw+0x20>
 800345c:	e002      	b.n	8003464 <lcdUpdateDraw+0x4c>
    return;
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <lcdUpdateDraw+0x4c>
    {
      break;
 8003462:	bf00      	nop
    }
  }
}
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000280 	.word	0x20000280

08003470 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <lcdGetFrameBuffer+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000290 	.word	0x20000290

08003488 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	4604      	mov	r4, r0
 8003490:	4608      	mov	r0, r1
 8003492:	4611      	mov	r1, r2
 8003494:	461a      	mov	r2, r3
 8003496:	4623      	mov	r3, r4
 8003498:	80fb      	strh	r3, [r7, #6]
 800349a:	4603      	mov	r3, r0
 800349c:	80bb      	strh	r3, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]
 80034a2:	4613      	mov	r3, r2
 80034a4:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80034a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80034aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80034b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80034b8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80034bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c0:	1acb      	subs	r3, r1, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bfb8      	it	lt
 80034c6:	425b      	neglt	r3, r3
 80034c8:	429a      	cmp	r2, r3
 80034ca:	bfcc      	ite	gt
 80034cc:	2301      	movgt	r3, #1
 80034ce:	2300      	movle	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80034d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da01      	bge.n	80034e0 <lcdDrawLine+0x58>
 80034dc:	2300      	movs	r3, #0
 80034de:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80034e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da01      	bge.n	80034ec <lcdDrawLine+0x64>
 80034e8:	2300      	movs	r3, #0
 80034ea:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80034ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da01      	bge.n	80034f8 <lcdDrawLine+0x70>
 80034f4:	2300      	movs	r3, #0
 80034f6:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 80034f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da01      	bge.n	8003504 <lcdDrawLine+0x7c>
 8003500:	2300      	movs	r3, #0
 8003502:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003504:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	833b      	strh	r3, [r7, #24]
 8003510:	88bb      	ldrh	r3, [r7, #4]
 8003512:	80fb      	strh	r3, [r7, #6]
 8003514:	8b3b      	ldrh	r3, [r7, #24]
 8003516:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003518:	887b      	ldrh	r3, [r7, #2]
 800351a:	82fb      	strh	r3, [r7, #22]
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	8afb      	ldrh	r3, [r7, #22]
 8003522:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800352c:	429a      	cmp	r2, r3
 800352e:	dd0b      	ble.n	8003548 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	82bb      	strh	r3, [r7, #20]
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	80fb      	strh	r3, [r7, #6]
 8003538:	8abb      	ldrh	r3, [r7, #20]
 800353a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 800353c:	88bb      	ldrh	r3, [r7, #4]
 800353e:	827b      	strh	r3, [r7, #18]
 8003540:	883b      	ldrh	r3, [r7, #0]
 8003542:	80bb      	strh	r3, [r7, #4]
 8003544:	8a7b      	ldrh	r3, [r7, #18]
 8003546:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003548:	887a      	ldrh	r2, [r7, #2]
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8003552:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bfb8      	it	lt
 8003560:	425b      	neglt	r3, r3
 8003562:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003568:	0fda      	lsrs	r2, r3, #31
 800356a:	4413      	add	r3, r2
 800356c:	105b      	asrs	r3, r3, #1
 800356e:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8003570:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003574:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003578:	429a      	cmp	r2, r3
 800357a:	da02      	bge.n	8003582 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	83bb      	strh	r3, [r7, #28]
 8003580:	e02d      	b.n	80035de <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8003582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003586:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003588:	e029      	b.n	80035de <lcdDrawLine+0x156>
  {
    if (steep)
 800358a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8003592:	88bb      	ldrh	r3, [r7, #4]
 8003594:	88f9      	ldrh	r1, [r7, #6]
 8003596:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fce9 	bl	8002f70 <lcdDrawPixel>
 800359e:	e005      	b.n	80035ac <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	88b9      	ldrh	r1, [r7, #4]
 80035a4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fce2 	bl	8002f70 <lcdDrawPixel>
    }
    err -= dy;
 80035ac:	8bfa      	ldrh	r2, [r7, #30]
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80035b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da09      	bge.n	80035d2 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80035be:	88ba      	ldrh	r2, [r7, #4]
 80035c0:	8bbb      	ldrh	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80035c8:	8bfa      	ldrh	r2, [r7, #30]
 80035ca:	8a3b      	ldrh	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80035d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	80fb      	strh	r3, [r7, #6]
 80035de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	ddcf      	ble.n	800358a <lcdDrawLine+0x102>
    }
  }
}
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}

080035f2 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80035f2:	b590      	push	{r4, r7, lr}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af02      	add	r7, sp, #8
 80035f8:	4604      	mov	r4, r0
 80035fa:	4608      	mov	r0, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	461a      	mov	r2, r3
 8003600:	4623      	mov	r3, r4
 8003602:	80fb      	strh	r3, [r7, #6]
 8003604:	4603      	mov	r3, r0
 8003606:	80bb      	strh	r3, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
 800360c:	4613      	mov	r3, r2
 800360e:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8003610:	88ba      	ldrh	r2, [r7, #4]
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	4413      	add	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29b      	uxth	r3, r3
 800361c:	b21c      	sxth	r4, r3
 800361e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003622:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003626:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800362a:	883b      	ldrh	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4623      	mov	r3, r4
 8003630:	f7ff ff2a 	bl	8003488 <lcdDrawLine>
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}

0800363c <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af02      	add	r7, sp, #8
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4623      	mov	r3, r4
 800364c:	80fb      	strh	r3, [r7, #6]
 800364e:	4603      	mov	r3, r0
 8003650:	80bb      	strh	r3, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]
 8003656:	4613      	mov	r3, r2
 8003658:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	4413      	add	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	b21a      	sxth	r2, r3
 8003668:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800366c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003670:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003674:	883b      	ldrh	r3, [r7, #0]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4623      	mov	r3, r4
 800367a:	f7ff ff05 	bl	8003488 <lcdDrawLine>
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}

08003686 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003686:	b590      	push	{r4, r7, lr}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	4604      	mov	r4, r0
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	80fb      	strh	r3, [r7, #6]
 8003698:	4603      	mov	r3, r0
 800369a:	80bb      	strh	r3, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
 80036a0:	4613      	mov	r3, r2
 80036a2:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	81fb      	strh	r3, [r7, #14]
 80036a8:	e00e      	b.n	80036c8 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 80036aa:	8c3b      	ldrh	r3, [r7, #32]
 80036ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036b4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80036b8:	f7ff ff9b 	bl	80035f2 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80036bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	81fb      	strh	r3, [r7, #14]
 80036c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80036cc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80036d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036d4:	440b      	add	r3, r1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	dbe7      	blt.n	80036aa <lcdDrawFillRect+0x24>
  }
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}
	...

080036e4 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 80036e4:	b408      	push	{r3}
 80036e6:	b590      	push	{r4, r7, lr}
 80036e8:	b0d8      	sub	sp, #352	; 0x160
 80036ea:	af02      	add	r7, sp, #8
 80036ec:	f107 030c 	add.w	r3, r7, #12
 80036f0:	6018      	str	r0, [r3, #0]
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	6019      	str	r1, [r3, #0]
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 80036fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003700:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8003704:	f107 030c 	add.w	r3, r7, #12
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 800370e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003712:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003716:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800371a:	21ff      	movs	r1, #255	; 0xff
 800371c:	f008 fad6 	bl	800bccc <vsniprintf>
 8003720:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8003724:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <lcdPrintf+0x1e0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b67      	ldr	r3, [pc, #412]	; (80038c8 <lcdPrintf+0x1e4>)
 800372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d05d      	beq.n	80037f2 <lcdPrintf+0x10e>
  {
    for( i=0; i<len; i+=Size_Char )
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800373c:	e052      	b.n	80037e4 <lcdPrintf+0x100>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 800373e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003742:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003746:	4413      	add	r3, r2
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b5e      	ldr	r3, [pc, #376]	; (80038c4 <lcdPrintf+0x1e0>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	4b5d      	ldr	r3, [pc, #372]	; (80038c8 <lcdPrintf+0x1e4>)
 8003752:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003756:	f107 0108 	add.w	r1, r7, #8
 800375a:	f107 000c 	add.w	r0, r7, #12
 800375e:	1dbb      	adds	r3, r7, #6
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4623      	mov	r3, r4
 8003766:	6809      	ldr	r1, [r1, #0]
 8003768:	6800      	ldr	r0, [r0, #0]
 800376a:	f000 f903 	bl	8003974 <disEngFont>

      Size_Char = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 8003774:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <lcdPrintf+0x1e0>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <lcdPrintf+0x1e4>)
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 8003786:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <lcdPrintf+0x1e0>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	4b4e      	ldr	r3, [pc, #312]	; (80038c8 <lcdPrintf+0x1e4>)
 800378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 8003798:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	f107 010c 	add.w	r1, r7, #12
 80037a4:	6809      	ldr	r1, [r1, #0]
 80037a6:	440a      	add	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80037aa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	2ba0      	cmp	r3, #160	; 0xa0
 80037b8:	dd0d      	ble.n	80037d6 <lcdPrintf+0xf2>
      {
        x  = x_Pre;
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037c2:	601a      	str	r2, [r3, #0]
        y += font_height;
 80037c4:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	f107 0108 	add.w	r1, r7, #8
 80037d0:	6809      	ldr	r1, [r1, #0]
 80037d2:	440a      	add	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 80037d6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80037da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037de:	4413      	add	r3, r2
 80037e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037e4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80037e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80037ec:	429a      	cmp	r2, r3
 80037ee:	dba6      	blt.n	800373e <lcdPrintf+0x5a>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 80037f0:	e060      	b.n	80038b4 <lcdPrintf+0x1d0>
    for( i=0; i<len; i+=Size_Char )
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037f8:	e054      	b.n	80038a4 <lcdPrintf+0x1c0>
      hanFontLoad( &print_buffer[i], &FontBuf );
 80037fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80037fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003802:	4413      	add	r3, r2
 8003804:	f107 0214 	add.w	r2, r7, #20
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f001 ff6a 	bl	80056e4 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8003810:	1dbb      	adds	r3, r7, #6
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f107 0214 	add.w	r2, r7, #20
 8003818:	f107 0108 	add.w	r1, r7, #8
 800381c:	f107 000c 	add.w	r0, r7, #12
 8003820:	6809      	ldr	r1, [r1, #0]
 8003822:	6800      	ldr	r0, [r0, #0]
 8003824:	f000 f852 	bl	80038cc <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	885b      	ldrh	r3, [r3, #2]
 800382e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 8003832:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003836:	2b01      	cmp	r3, #1
 8003838:	dd0a      	ble.n	8003850 <lcdPrintf+0x16c>
        font_width = 16;
 800383a:	2310      	movs	r3, #16
 800383c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	f107 020c 	add.w	r2, r7, #12
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	3210      	adds	r2, #16
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e009      	b.n	8003864 <lcdPrintf+0x180>
        font_width = 8;
 8003850:	2308      	movs	r3, #8
 8003852:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	f107 020c 	add.w	r2, r7, #12
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	3208      	adds	r2, #8
 8003862:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 8003864:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8003868:	f107 030c 	add.w	r3, r7, #12
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	2ba0      	cmp	r3, #160	; 0xa0
 8003872:	dd0b      	ble.n	800388c <lcdPrintf+0x1a8>
        x  = x_Pre;
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800387c:	601a      	str	r2, [r3, #0]
        y += 16;
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	f107 0208 	add.w	r2, r7, #8
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	3210      	adds	r2, #16
 800388a:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	889b      	ldrh	r3, [r3, #4]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00d      	beq.n	80038b2 <lcdPrintf+0x1ce>
    for( i=0; i<len; i+=Size_Char )
 8003896:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800389a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800389e:	4413      	add	r3, r2
 80038a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038a4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80038a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dba4      	blt.n	80037fa <lcdPrintf+0x116>
}
 80038b0:	e000      	b.n	80038b4 <lcdPrintf+0x1d0>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80038b2:	bf00      	nop
}
 80038b4:	bf00      	nop
 80038b6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80038ba:	46bd      	mov	sp, r7
 80038bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80038c0:	b001      	add	sp, #4
 80038c2:	4770      	bx	lr
 80038c4:	2000001d 	.word	0x2000001d
 80038c8:	20000020 	.word	0x20000020

080038cc <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 80038e0:	8b3b      	ldrh	r3, [r7, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <disHanFont+0x1e>
  {
    FontSize = 2;
 80038e6:	2302      	movs	r3, #2
 80038e8:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80038ea:	2300      	movs	r3, #0
 80038ec:	83fb      	strh	r3, [r7, #30]
 80038ee:	e03a      	b.n	8003966 <disHanFont+0x9a>
  {
    index_x = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80038f4:	2300      	movs	r3, #0
 80038f6:	83bb      	strh	r3, [r7, #28]
 80038f8:	e02e      	b.n	8003958 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 80038fa:	8bfb      	ldrh	r3, [r7, #30]
 80038fc:	8b3a      	ldrh	r2, [r7, #24]
 80038fe:	fb02 f203 	mul.w	r2, r2, r3
 8003902:	8bbb      	ldrh	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	799b      	ldrb	r3, [r3, #6]
 800390c:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 800390e:	2300      	movs	r3, #0
 8003910:	837b      	strh	r3, [r7, #26]
 8003912:	e01b      	b.n	800394c <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8003914:	7d7a      	ldrb	r2, [r7, #21]
 8003916:	8b7b      	ldrh	r3, [r7, #26]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	b29a      	uxth	r2, r3
 8003928:	8afb      	ldrh	r3, [r7, #22]
 800392a:	4413      	add	r3, r2
 800392c:	b298      	uxth	r0, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	b29a      	uxth	r2, r3
 8003932:	8bfb      	ldrh	r3, [r7, #30]
 8003934:	4413      	add	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	887a      	ldrh	r2, [r7, #2]
 800393a:	4619      	mov	r1, r3
 800393c:	f7ff fb18 	bl	8002f70 <lcdDrawPixel>
        }
        index_x++;
 8003940:	8afb      	ldrh	r3, [r7, #22]
 8003942:	3301      	adds	r3, #1
 8003944:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8003946:	8b7b      	ldrh	r3, [r7, #26]
 8003948:	3301      	adds	r3, #1
 800394a:	837b      	strh	r3, [r7, #26]
 800394c:	8b7b      	ldrh	r3, [r7, #26]
 800394e:	2b07      	cmp	r3, #7
 8003950:	d9e0      	bls.n	8003914 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8003952:	8bbb      	ldrh	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	83bb      	strh	r3, [r7, #28]
 8003958:	8bba      	ldrh	r2, [r7, #28]
 800395a:	8b3b      	ldrh	r3, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d3cc      	bcc.n	80038fa <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8003960:	8bfb      	ldrh	r3, [r7, #30]
 8003962:	3301      	adds	r3, #1
 8003964:	83fb      	strh	r3, [r7, #30]
 8003966:	8bfb      	ldrh	r3, [r7, #30]
 8003968:	2b0f      	cmp	r3, #15
 800396a:	d9c1      	bls.n	80038f0 <disHanFont+0x24>
      }
    }
  }
}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e035      	b.n	80039f6 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	3b20      	subs	r3, #32
 8003992:	6839      	ldr	r1, [r7, #0]
 8003994:	7849      	ldrb	r1, [r1, #1]
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4619      	mov	r1, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	440b      	add	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e01a      	b.n	80039e4 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00f      	beq.n	80039de <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	b298      	uxth	r0, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039d8:	4619      	mov	r1, r3
 80039da:	f7ff fac9 	bl	8002f70 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d3de      	bcc.n	80039ae <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	461a      	mov	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d3c3      	bcc.n	800398a <disEngFont+0x16>
      }
    }
  }
}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <lcdSetFont+0x1c>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	7013      	strb	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	2000001d 	.word	0x2000001d

08003a2c <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d163      	bne.n	8003b08 <cliLcd+0xdc>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	4937      	ldr	r1, [pc, #220]	; (8003b24 <cliLcd+0xf8>)
 8003a46:	2000      	movs	r0, #0
 8003a48:	4798      	blx	r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05b      	beq.n	8003b08 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8003a50:	2003      	movs	r0, #3
 8003a52:	f7ff ffdb 	bl	8003a0c <lcdSetFont>

    while(cliKeepLoop())
 8003a56:	e04b      	b.n	8003af0 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8003a58:	f7ff fc90 	bl	800337c <lcdDrawAvailable>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d046      	beq.n	8003af0 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 8003a62:	2000      	movs	r0, #0
 8003a64:	f7ff fa90 	bl	8002f88 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <cliLcd+0xfc>)
 8003a6a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2019      	movs	r0, #25
 8003a72:	f7ff fe37 	bl	80036e4 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8003a76:	f7ff fc69 	bl	800334c <lcdGetFps>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <cliLcd+0x100>)
 8003a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a84:	2110      	movs	r1, #16
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7ff fe2c 	bl	80036e4 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8003a8c:	f7ff fc6a 	bl	8003364 <lcdGetFpsTime>
 8003a90:	4603      	mov	r3, r0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <cliLcd+0x104>)
 8003a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9a:	2120      	movs	r1, #32
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f7ff fe21 	bl	80036e4 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8003aa2:	f7fd fbb2 	bl	800120a <millis>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <cliLcd+0x104>)
 8003aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab0:	2130      	movs	r1, #48	; 0x30
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7ff fe16 	bl	80036e4 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8003ab8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	230a      	movs	r3, #10
 8003ac0:	220a      	movs	r2, #10
 8003ac2:	2146      	movs	r1, #70	; 0x46
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f7ff fdde 	bl	8003686 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8003aca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	230a      	movs	r3, #10
 8003ad2:	220a      	movs	r2, #10
 8003ad4:	2146      	movs	r1, #70	; 0x46
 8003ad6:	200a      	movs	r0, #10
 8003ad8:	f7ff fdd5 	bl	8003686 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8003adc:	231f      	movs	r3, #31
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	230a      	movs	r3, #10
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	2146      	movs	r1, #70	; 0x46
 8003ae6:	2014      	movs	r0, #20
 8003ae8:	f7ff fdcd 	bl	8003686 <lcdDrawFillRect>

        lcdRequestDraw();
 8003aec:	f7ff fc5c 	bl	80033a8 <lcdRequestDraw>
    while(cliKeepLoop())
 8003af0:	f7fe fccc 	bl	800248c <cliKeepLoop>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ae      	bne.n	8003a58 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f7ff fa44 	bl	8002f88 <lcdClearBuffer>
    lcdUpdateDraw();
 8003b00:	f7ff fc8a 	bl	8003418 <lcdUpdateDraw>

    ret = true;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <cliLcd+0xee>
  {
    cliPrintf("lcd test\n");
 8003b14:	4807      	ldr	r0, [pc, #28]	; (8003b34 <cliLcd+0x108>)
 8003b16:	f7fe fbbf 	bl	8002298 <cliPrintf>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	0800d748 	.word	0x0800d748
 8003b28:	0800d750 	.word	0x0800d750
 8003b2c:	0800d760 	.word	0x0800d760
 8003b30:	0800d768 	.word	0x0800d768
 8003b34:	0800d770 	.word	0x0800d770

08003b38 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
  bool ret = true;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b50:	2300      	movs	r3, #0
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <ledInit+0x8c>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <ledInit+0x8c>)
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b60:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <ledInit+0x8c>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	e016      	b.n	8003bac <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <ledInit+0x90>)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	889b      	ldrh	r3, [r3, #4]
 8003b88:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8003b8a:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <ledInit+0x90>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b92:	1d3a      	adds	r2, r7, #4
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 fe86 	bl	80078a8 <HAL_GPIO_Init>

    ledOff(i);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f837 	bl	8003c14 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	dde5      	ble.n	8003b7e <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003bb2:	4906      	ldr	r1, [pc, #24]	; (8003bcc <ledInit+0x94>)
 8003bb4:	4806      	ldr	r0, [pc, #24]	; (8003bd0 <ledInit+0x98>)
 8003bb6:	f7fe fc7f 	bl	80024b8 <cliAdd>
#endif

  return ret;
 8003bba:	7efb      	ldrb	r3, [r7, #27]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	20000030 	.word	0x20000030
 8003bcc:	08003c8d 	.word	0x08003c8d
 8003bd0:	0800d640 	.word	0x0800d640

08003bd4 <ledOn>:

void ledOn(uint8_t ch)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <ledOn+0x3c>)
 8003be8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <ledOn+0x3c>)
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	8899      	ldrh	r1, [r3, #4]
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <ledOn+0x3c>)
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	799b      	ldrb	r3, [r3, #6]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f004 f8cd 	bl	8007da0 <HAL_GPIO_WritePin>
 8003c06:	e000      	b.n	8003c0a <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8003c08:	bf00      	nop
}
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000030 	.word	0x20000030

08003c14 <ledOff>:

void ledOff(uint8_t ch)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <ledOff+0x3c>)
 8003c28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <ledOff+0x3c>)
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	8899      	ldrh	r1, [r3, #4]
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <ledOff+0x3c>)
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	79db      	ldrb	r3, [r3, #7]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f004 f8ad 	bl	8007da0 <HAL_GPIO_WritePin>
 8003c46:	e000      	b.n	8003c4a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003c48:	bf00      	nop
}
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000030 	.word	0x20000030

08003c54 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10c      	bne.n	8003c7e <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <ledToggle+0x34>)
 8003c68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <ledToggle+0x34>)
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	889b      	ldrh	r3, [r3, #4]
 8003c76:	4619      	mov	r1, r3
 8003c78:	f004 f8ab 	bl	8007dd2 <HAL_GPIO_TogglePin>
 8003c7c:	e000      	b.n	8003c80 <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 8003c7e:	bf00      	nop
}
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000030 	.word	0x20000030

08003c8c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d133      	bne.n	8003d08 <cliLed+0x7c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	491f      	ldr	r1, [pc, #124]	; (8003d24 <cliLed+0x98>)
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	4798      	blx	r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	4798      	blx	r3
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8003cc8:	7dbb      	ldrb	r3, [r7, #22]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <cliLed+0x48>
    {
      led_ch--;
 8003cce:	7dbb      	ldrb	r3, [r7, #22]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8003cd4:	f7fd fa99 	bl	800120a <millis>
 8003cd8:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8003cda:	e00e      	b.n	8003cfa <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8003cdc:	f7fd fa95 	bl	800120a <millis>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d806      	bhi.n	8003cfa <cliLed+0x6e>
      {
        pre_time = millis();
 8003cec:	f7fd fa8d 	bl	800120a <millis>
 8003cf0:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8003cf2:	7dbb      	ldrb	r3, [r7, #22]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ffad 	bl	8003c54 <ledToggle>
    while(cliKeepLoop())
 8003cfa:	f7fe fbc7 	bl	800248c <cliKeepLoop>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1eb      	bne.n	8003cdc <cliLed+0x50>
      }
    }

    ret = true;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8003d14:	2101      	movs	r1, #1
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <cliLed+0x9c>)
 8003d18:	f7fe fabe 	bl	8002298 <cliPrintf>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	0800d644 	.word	0x0800d644
 8003d28:	0800d64c 	.word	0x0800d64c

08003d2c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <DWT_Delay_us+0x3c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003d3a:	f004 fc6d 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <DWT_Delay_us+0x40>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003d50:	bf00      	nop
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <DWT_Delay_us+0x3c>)
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3f8      	bcc.n	8003d52 <DWT_Delay_us+0x26>
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	e0001000 	.word	0xe0001000
 8003d6c:	431bde83 	.word	0x431bde83

08003d70 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	889b      	ldrh	r3, [r3, #4]
 8003d7c:	041a      	lsls	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	619a      	str	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	889a      	ldrh	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	619a      	str	r2, [r3, #24]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b088      	sub	sp, #32
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	889b      	ldrh	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f107 020c 	add.w	r2, r7, #12
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 fd68 	bl	80078a8 <HAL_GPIO_Init>
}
 8003dd8:	bf00      	nop
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8003de8:	2311      	movs	r3, #17
 8003dea:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f107 020c 	add.w	r2, r7, #12
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fd4f 	bl	80078a8 <HAL_GPIO_Init>

}
 8003e0a:	bf00      	nop
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff ffd7 	bl	8003de0 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff ffac 	bl	8003d90 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8003e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e3c:	f7ff ff76 	bl	8003d2c <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7ff ff95 	bl	8003d70 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8003e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e4a:	f7ff ff6f 	bl	8003d2c <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff9e 	bl	8003d90 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8003e54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e58:	f7ff ff68 	bl	8003d2c <DWT_Delay_us>
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff7f 	bl	8003d70 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffb4 	bl	8003de0 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8003e78:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003e7c:	f7ff ff56 	bl	8003d2c <DWT_Delay_us>
	DWT_Delay_us(20);
 8003e80:	2014      	movs	r0, #20
 8003e82:	f7ff ff53 	bl	8003d2c <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ff91 	bl	8003dae <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8003e8c:	2046      	movs	r0, #70	; 0x46
 8003e8e:	f7ff ff4d 	bl	8003d2c <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	889b      	ldrh	r3, [r3, #4]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f003 ff67 	bl	8007d70 <HAL_GPIO_ReadPin>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8003ea6:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003eaa:	f7ff ff3f 	bl	8003d2c <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff50 	bl	8003d70 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff85 	bl	8003de0 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f7ff ff28 	bl	8003d2c <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff66 	bl	8003dae <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8003ee2:	2037      	movs	r0, #55	; 0x37
 8003ee4:	f7ff ff22 	bl	8003d2c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff60 	bl	8003dae <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8003eee:	e011      	b.n	8003f14 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff3d 	bl	8003d70 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff72 	bl	8003de0 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8003efc:	2041      	movs	r0, #65	; 0x41
 8003efe:	f7ff ff15 	bl	8003d2c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff53 	bl	8003dae <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8003f08:	2005      	movs	r0, #5
 8003f0a:	f7ff ff0f 	bl	8003d2c <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ff4d 	bl	8003dae <ONEWIRE_INPUT>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff21 	bl	8003d70 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff56 	bl	8003de0 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8003f34:	2002      	movs	r0, #2
 8003f36:	f7ff fef9 	bl	8003d2c <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff37 	bl	8003dae <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8003f40:	200a      	movs	r0, #10
 8003f42:	f7ff fef3 	bl	8003d2c <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	889b      	ldrh	r3, [r3, #4]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f003 ff0d 	bl	8007d70 <HAL_GPIO_ReadPin>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8003f60:	2032      	movs	r0, #50	; 0x32
 8003f62:	f7ff fee3 	bl	8003d2c <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8003f80:	e00a      	b.n	8003f98 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff93 	bl	8003eb8 <OneWire_WriteBit>
		byte >>= 1;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	73fa      	strb	r2, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1ef      	bne.n	8003f82 <OneWire_WriteByte+0x12>
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003fba:	e00d      	b.n	8003fd8 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8003fbc:	7bbb      	ldrb	r3, [r7, #14]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff ffaa 	bl	8003f1c <OneWire_ReadBit>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	b25a      	sxtb	r2, r3
 8003fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	73fa      	strb	r2, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ec      	bne.n	8003fbc <OneWire_ReadByte+0x12>
	}

	return byte;
 8003fe2:	7bbb      	ldrb	r3, [r7, #14]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f816 	bl	8004026 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8003ffa:	21f0      	movs	r1, #240	; 0xf0
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f825 	bl	800404c <OneWire_Search>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004014:	21f0      	movs	r1, #240	; 0xf0
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f818 	bl	800404c <OneWire_Search>
 800401c:	4603      	mov	r3, r0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	71da      	strb	r2, [r3, #7]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7a1b      	ldrb	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f040 809a 	bne.w	80041aa <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fef4 	bl	8003e64 <OneWire_Reset>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	71da      	strb	r2, [r3, #7]
			return 0;
 8004094:	2300      	movs	r3, #0
 8004096:	e09b      	b.n	80041d0 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff67 	bl	8003f70 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ff3a 	bl	8003f1c <OneWire_ReadBit>
 80040a8:	4603      	mov	r3, r0
 80040aa:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff35 	bl	8003f1c <OneWire_ReadBit>
 80040b2:	4603      	mov	r3, r0
 80040b4:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80040b6:	7a7b      	ldrb	r3, [r7, #9]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d102      	bne.n	80040c2 <OneWire_Search+0x76>
 80040bc:	7a3b      	ldrb	r3, [r7, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d064      	beq.n	800418c <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80040c2:	7a7a      	ldrb	r2, [r7, #9]
 80040c4:	7a3b      	ldrb	r3, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d002      	beq.n	80040d0 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80040ca:	7a7b      	ldrb	r3, [r7, #9]
 80040cc:	72bb      	strb	r3, [r7, #10]
 80040ce:	e026      	b.n	800411e <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	799b      	ldrb	r3, [r3, #6]
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20d      	bcs.n	80040f6 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80040da:	7b7b      	ldrb	r3, [r7, #13]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	7a5a      	ldrb	r2, [r3, #9]
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	4013      	ands	r3, r2
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	72bb      	strb	r3, [r7, #10]
 80040f4:	e008      	b.n	8004108 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	799b      	ldrb	r3, [r3, #6]
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8004108:	7abb      	ldrb	r3, [r7, #10]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8004112:	7bbb      	ldrb	r3, [r7, #14]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d802      	bhi.n	800411e <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7bba      	ldrb	r2, [r7, #14]
 800411c:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800411e:	7abb      	ldrb	r3, [r7, #10]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8004124:	7b7b      	ldrb	r3, [r7, #13]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	7a59      	ldrb	r1, [r3, #9]
 800412c:	7b7b      	ldrb	r3, [r7, #13]
 800412e:	7afa      	ldrb	r2, [r7, #11]
 8004130:	430a      	orrs	r2, r1
 8004132:	b2d1      	uxtb	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	460a      	mov	r2, r1
 800413a:	725a      	strb	r2, [r3, #9]
 800413c:	e010      	b.n	8004160 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800413e:	7b7b      	ldrb	r3, [r7, #13]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	7a5b      	ldrb	r3, [r3, #9]
 8004146:	b25a      	sxtb	r2, r3
 8004148:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800414c:	43db      	mvns	r3, r3
 800414e:	b25b      	sxtb	r3, r3
 8004150:	4013      	ands	r3, r2
 8004152:	b25a      	sxtb	r2, r3
 8004154:	7b7b      	ldrb	r3, [r7, #13]
 8004156:	b2d1      	uxtb	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	460a      	mov	r2, r1
 800415e:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8004160:	7abb      	ldrb	r3, [r7, #10]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fea7 	bl	8003eb8 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	3301      	adds	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8004170:	7afb      	ldrb	r3, [r7, #11]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8004176:	7afb      	ldrb	r3, [r7, #11]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800417c:	7b7b      	ldrb	r3, [r7, #13]
 800417e:	3301      	adds	r3, #1
 8004180:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	2b07      	cmp	r3, #7
 800418a:	d98a      	bls.n	80040a2 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d90b      	bls.n	80041aa <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7bba      	ldrb	r2, [r7, #14]
 8004196:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	799b      	ldrb	r3, [r3, #6]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80041aa:	7b3b      	ldrb	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <OneWire_Search+0x16c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	7a5b      	ldrb	r3, [r3, #9]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80041ce:	7b3b      	ldrb	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80041e2:	2155      	movs	r1, #85	; 0x55
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fec3 	bl	8003f70 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e00a      	b.n	8004206 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff feb8 	bl	8003f70 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b07      	cmp	r3, #7
 800420a:	d9f1      	bls.n	80041f0 <OneWire_SelectWithPointer+0x18>
	}
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e00a      	b.n	800423a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	6839      	ldr	r1, [r7, #0]
 800422a:	440b      	add	r3, r1
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	440a      	add	r2, r1
 8004230:	7a52      	ldrb	r2, [r2, #9]
 8004232:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	3301      	adds	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b07      	cmp	r3, #7
 800423e:	d9f1      	bls.n	8004224 <OneWire_GetFullROM+0x10>
	}
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <DWT_Delay_us>:
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <DWT_Delay_us+0x3c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800425a:	f004 f9dd 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 800425e:	4602      	mov	r2, r0
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <DWT_Delay_us+0x40>)
 8004262:	fba3 2302 	umull	r2, r3, r3, r2
 8004266:	0c9b      	lsrs	r3, r3, #18
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004270:	bf00      	nop
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <DWT_Delay_us+0x3c>)
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3f8      	bcc.n	8004272 <DWT_Delay_us+0x26>
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	e0001000 	.word	0xe0001000
 800428c:	431bde83 	.word	0x431bde83

08004290 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	; 0x30
 8004294:	af00      	add	r7, sp, #0
	bool ret = false;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 80042c0:	4b2e      	ldr	r3, [pc, #184]	; (800437c <sonarInit+0xec>)
 80042c2:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <sonarInit+0xf0>)
 80042c4:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 100-1;
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <sonarInit+0xec>)
 80042c8:	2263      	movs	r2, #99	; 0x63
 80042ca:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042cc:	4b2b      	ldr	r3, [pc, #172]	; (800437c <sonarInit+0xec>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 80042d2:	4b2a      	ldr	r3, [pc, #168]	; (800437c <sonarInit+0xec>)
 80042d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042d8:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <sonarInit+0xec>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <sonarInit+0xec>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042e6:	4825      	ldr	r0, [pc, #148]	; (800437c <sonarInit+0xec>)
 80042e8:	f004 fef2 	bl	80090d0 <HAL_TIM_Base_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <sonarInit+0x66>
	  {
	    Error_Handler();
 80042f2:	f7fc fff9 	bl	80012e8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fa:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042fc:	f107 031c 	add.w	r3, r7, #28
 8004300:	4619      	mov	r1, r3
 8004302:	481e      	ldr	r0, [pc, #120]	; (800437c <sonarInit+0xec>)
 8004304:	f005 f950 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <sonarInit+0x82>
	  {
	    Error_Handler();
 800430e:	f7fc ffeb 	bl	80012e8 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004312:	481a      	ldr	r0, [pc, #104]	; (800437c <sonarInit+0xec>)
 8004314:	f004 ff07 	bl	8009126 <HAL_TIM_IC_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <sonarInit+0x92>
	  {
	    Error_Handler();
 800431e:	f7fc ffe3 	bl	80012e8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	4619      	mov	r1, r3
 8004330:	4812      	ldr	r0, [pc, #72]	; (800437c <sonarInit+0xec>)
 8004332:	f005 fc77 	bl	8009c24 <HAL_TIMEx_MasterConfigSynchronization>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <sonarInit+0xb0>
	  {
	    Error_Handler();
 800433c:	f7fc ffd4 	bl	80012e8 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004340:	2300      	movs	r3, #0
 8004342:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004344:	2301      	movs	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	220c      	movs	r2, #12
 8004354:	4619      	mov	r1, r3
 8004356:	4809      	ldr	r0, [pc, #36]	; (800437c <sonarInit+0xec>)
 8004358:	f005 f88a 	bl	8009470 <HAL_TIM_IC_ConfigChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <sonarInit+0xd6>
	  {
	    Error_Handler();
 8004362:	f7fc ffc1 	bl	80012e8 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8004366:	210c      	movs	r1, #12
 8004368:	4804      	ldr	r0, [pc, #16]	; (800437c <sonarInit+0xec>)
 800436a:	f004 ff11 	bl	8009190 <HAL_TIM_IC_Start_IT>

	return ret;
 800436e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004372:	4618      	mov	r0, r3
 8004374:	3730      	adds	r7, #48	; 0x30
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000a8cc 	.word	0x2000a8cc
 8004380:	40000400 	.word	0x40000400
 8004384:	00000000 	.word	0x00000000

08004388 <Sonar_measure>:

bool Sonar_measure(void)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
	bool ret = false;
 800438e:	2300      	movs	r3, #0
 8004390:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8004392:	4b5d      	ldr	r3, [pc, #372]	; (8004508 <Sonar_measure+0x180>)
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <Sonar_measure+0x18>
 800439a:	2b01      	cmp	r3, #1
 800439c:	d022      	beq.n	80043e4 <Sonar_measure+0x5c>
 800439e:	e0a9      	b.n	80044f4 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 80043a0:	2103      	movs	r1, #3
 80043a2:	2008      	movs	r0, #8
 80043a4:	f7fe fb78 	bl	8002a98 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 80043a8:	2101      	movs	r1, #1
 80043aa:	2008      	movs	r0, #8
 80043ac:	f7fe fbe6 	bl	8002b7c <gpioPinWrite>
			DWT_Delay_us(5);
 80043b0:	2005      	movs	r0, #5
 80043b2:	f7ff ff4b 	bl	800424c <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 80043b6:	2100      	movs	r1, #0
 80043b8:	2008      	movs	r0, #8
 80043ba:	f7fe fbdf 	bl	8002b7c <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 80043be:	2106      	movs	r1, #6
 80043c0:	2008      	movs	r0, #8
 80043c2:	f7fe fb69 	bl	8002a98 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 80043c6:	4b50      	ldr	r3, [pc, #320]	; (8004508 <Sonar_measure+0x180>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 80043cc:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <Sonar_measure+0x180>)
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <Sonar_measure+0x180>)
 80043d6:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 80043d8:	f7fc ff17 	bl	800120a <millis>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b4b      	ldr	r3, [pc, #300]	; (800450c <Sonar_measure+0x184>)
 80043e0:	601a      	str	r2, [r3, #0]
			break;
 80043e2:	e087      	b.n	80044f4 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <Sonar_measure+0x180>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	f083 0301 	eor.w	r3, r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06a      	beq.n	80044c8 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 80043f2:	4b45      	ldr	r3, [pc, #276]	; (8004508 <Sonar_measure+0x180>)
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <Sonar_measure+0x180>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d907      	bls.n	800440e <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 80043fe:	4b42      	ldr	r3, [pc, #264]	; (8004508 <Sonar_measure+0x180>)
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4b41      	ldr	r3, [pc, #260]	; (8004508 <Sonar_measure+0x180>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <Sonar_measure+0x180>)
 800440a:	60d3      	str	r3, [r2, #12]
 800440c:	e00e      	b.n	800442c <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 800440e:	4b3e      	ldr	r3, [pc, #248]	; (8004508 <Sonar_measure+0x180>)
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <Sonar_measure+0x180>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d208      	bcs.n	800442c <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 800441a:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <Sonar_measure+0x180>)
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	4b3a      	ldr	r3, [pc, #232]	; (8004508 <Sonar_measure+0x180>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004428:	4a37      	ldr	r2, [pc, #220]	; (8004508 <Sonar_measure+0x180>)
 800442a:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <Sonar_measure+0x180>)
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc f87b 	bl	8000534 <__aeabi_ui2d>
 800443e:	a330      	add	r3, pc, #192	; (adr r3, 8004500 <Sonar_measure+0x178>)
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f7fc f8f0 	bl	8000628 <__aeabi_dmul>
 8004448:	4603      	mov	r3, r0
 800444a:	460c      	mov	r4, r1
 800444c:	4618      	mov	r0, r3
 800444e:	4621      	mov	r1, r4
 8004450:	f7fc fbc2 	bl	8000bd8 <__aeabi_d2uiz>
 8004454:	4602      	mov	r2, r0
 8004456:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <Sonar_measure+0x180>)
 8004458:	615a      	str	r2, [r3, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 800445a:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <Sonar_measure+0x188>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8004464:	79bb      	ldrb	r3, [r7, #6]
 8004466:	2b0b      	cmp	r3, #11
 8004468:	d101      	bne.n	800446e <Sonar_measure+0xe6>
 800446a:	2300      	movs	r3, #0
 800446c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <Sonar_measure+0x180>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <Sonar_measure+0x188>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	b211      	sxth	r1, r2
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <Sonar_measure+0x18c>)
 800447a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <Sonar_measure+0x188>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	; (8004514 <Sonar_measure+0x18c>)
 8004484:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004488:	461a      	mov	r2, r3
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <Sonar_measure+0x190>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4413      	add	r3, r2
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <Sonar_measure+0x190>)
 8004492:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <Sonar_measure+0x190>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	79ba      	ldrb	r2, [r7, #6]
 800449a:	491e      	ldr	r1, [pc, #120]	; (8004514 <Sonar_measure+0x18c>)
 800449c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <Sonar_measure+0x190>)
 80044a4:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 80044a6:	79bb      	ldrb	r3, [r7, #6]
 80044a8:	4a19      	ldr	r2, [pc, #100]	; (8004510 <Sonar_measure+0x188>)
 80044aa:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <Sonar_measure+0x190>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <Sonar_measure+0x194>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	4a13      	ldr	r2, [pc, #76]	; (8004508 <Sonar_measure+0x180>)
 80044ba:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <Sonar_measure+0x180>)
 80044be:	2200      	movs	r2, #0
 80044c0:	705a      	strb	r2, [r3, #1]
				ret = true;
 80044c2:	2301      	movs	r3, #1
 80044c4:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 80044c6:	e014      	b.n	80044f2 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 80044c8:	f7fc fe9f 	bl	800120a <millis>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <Sonar_measure+0x184>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b18      	cmp	r3, #24
 80044d6:	d90c      	bls.n	80044f2 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <Sonar_measure+0x180>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	3301      	adds	r3, #1
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <Sonar_measure+0x180>)
 80044e0:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <Sonar_measure+0x180>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <Sonar_measure+0x180>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	705a      	strb	r2, [r3, #1]
					ret = false;
 80044ee:	2300      	movs	r3, #0
 80044f0:	71fb      	strb	r3, [r7, #7]
			break;
 80044f2:	bf00      	nop
	}
	return ret;
 80044f4:	79fb      	ldrb	r3, [r7, #7]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}
 80044fe:	bf00      	nop
 8004500:	75f6fd22 	.word	0x75f6fd22
 8004504:	3f919ce0 	.word	0x3f919ce0
 8004508:	2000a2c0 	.word	0x2000a2c0
 800450c:	2000a2dc 	.word	0x2000a2dc
 8004510:	2000a2e0 	.word	0x2000a2e0
 8004514:	2000a2e4 	.word	0x2000a2e4
 8004518:	2000a2fc 	.word	0x2000a2fc
 800451c:	cccccccd 	.word	0xcccccccd

08004520 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_TIM_Base_MspInit+0x94>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d133      	bne.n	80045aa <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_TIM_Base_MspInit+0x98>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800457a:	2302      	movs	r3, #2
 800457c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800458a:	2302      	movs	r3, #2
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	4619      	mov	r1, r3
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <HAL_TIM_Base_MspInit+0x9c>)
 8004596:	f003 f987 	bl	80078a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	201d      	movs	r0, #29
 80045a0:	f002 fd4f 	bl	8007042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045a4:	201d      	movs	r0, #29
 80045a6:	f002 fd68 	bl	800707a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80045aa:	bf00      	nop
 80045ac:	3728      	adds	r7, #40	; 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40020400 	.word	0x40020400

080045c0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7f1b      	ldrb	r3, [r3, #28]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d129      	bne.n	8004624 <HAL_TIM_IC_CaptureCallback+0x64>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d124      	bne.n	8004624 <HAL_TIM_IC_CaptureCallback+0x64>
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x74>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d020      	beq.n	8004624 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_TIM_IC_CaptureCallback+0x78>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x74>)
 80045fa:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a0b      	ldr	r2, [pc, #44]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004606:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8004608:	e00c      	b.n	8004624 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004610:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4a06      	ldr	r2, [pc, #24]	; (8004630 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800461c:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40000400 	.word	0x40000400
 8004634:	2000a2c0 	.word	0x2000a2c0
 8004638:	40020400 	.word	0x40020400

0800463c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
  bool ret = true;
 8004642:	2301      	movs	r3, #1
 8004644:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	e03d      	b.n	80046c8 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 800464c:	4923      	ldr	r1, [pc, #140]	; (80046dc <spiInit+0xa0>)
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 800465e:	491f      	ldr	r1, [pc, #124]	; (80046dc <spiInit+0xa0>)
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3301      	adds	r3, #1
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8004672:	491a      	ldr	r1, [pc, #104]	; (80046dc <spiInit+0xa0>)
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3302      	adds	r3, #2
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8004686:	4915      	ldr	r1, [pc, #84]	; (80046dc <spiInit+0xa0>)
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3304      	adds	r3, #4
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 800469a:	4910      	ldr	r1, [pc, #64]	; (80046dc <spiInit+0xa0>)
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	3310      	adds	r3, #16
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 80046ae:	490b      	ldr	r1, [pc, #44]	; (80046dc <spiInit+0xa0>)
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	330c      	adds	r3, #12
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3301      	adds	r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	ddbe      	ble.n	800464c <spiInit+0x10>
  }

  return ret;
 80046ce:	78fb      	ldrb	r3, [r7, #3]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	2000a90c 	.word	0x2000a90c

080046e0 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 80046ee:	79fa      	ldrb	r2, [r7, #7]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <spiBegin+0xa8>)
 80046fa:	4413      	add	r3, r2
 80046fc:	60bb      	str	r3, [r7, #8]

  switch(ch)
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <spiBegin+0x28>
 8004704:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8004706:	e03a      	b.n	800477e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4a20      	ldr	r2, [pc, #128]	; (800478c <spiBegin+0xac>)
 800470c:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <spiBegin+0xb0>)
 8004712:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <spiBegin+0xac>)
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <spiBegin+0xb4>)
 8004718:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <spiBegin+0xac>)
 800471c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004720:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <spiBegin+0xac>)
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <spiBegin+0xac>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <spiBegin+0xac>)
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <spiBegin+0xac>)
 8004736:	2200      	movs	r2, #0
 8004738:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <spiBegin+0xac>)
 800473c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004740:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <spiBegin+0xac>)
 8004744:	2200      	movs	r2, #0
 8004746:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <spiBegin+0xac>)
 800474a:	2200      	movs	r2, #0
 800474c:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <spiBegin+0xac>)
 8004750:	2200      	movs	r2, #0
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	4b0d      	ldr	r3, [pc, #52]	; (800478c <spiBegin+0xac>)
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <spiBegin+0xac>)
 800475c:	220a      	movs	r2, #10
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8004760:	480a      	ldr	r0, [pc, #40]	; (800478c <spiBegin+0xac>)
 8004762:	f003 fff1 	bl	8008748 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8004766:	4809      	ldr	r0, [pc, #36]	; (800478c <spiBegin+0xac>)
 8004768:	f003 ff8a 	bl	8008680 <HAL_SPI_Init>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <spiBegin+0x9c>
        p_spi->is_open = true;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
        ret = true;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	bf00      	nop
  }

  return ret;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	2000a90c 	.word	0x2000a90c
 800478c:	2000a920 	.word	0x2000a920
 8004790:	2000a978 	.word	0x2000a978
 8004794:	40013000 	.word	0x40013000

08004798 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	460a      	mov	r2, r1
 80047a2:	71fb      	strb	r3, [r7, #7]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 80047a8:	79fa      	ldrb	r2, [r7, #7]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <spiSetDataMode+0xc8>)
 80047b4:	4413      	add	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f083 0301 	eor.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d147      	bne.n	8004856 <spiSetDataMode+0xbe>


  switch( dataMode )
 80047c6:	79bb      	ldrb	r3, [r7, #6]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d845      	bhi.n	8004858 <spiSetDataMode+0xc0>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <spiSetDataMode+0x3c>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	08004801 	.word	0x08004801
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004839 	.word	0x08004839
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f003 ff41 	bl	8008680 <HAL_SPI_Init>
      break;
 80047fe:	e02b      	b.n	8004858 <spiSetDataMode+0xc0>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2201      	movs	r2, #1
 800480e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f003 ff33 	bl	8008680 <HAL_SPI_Init>
      break;
 800481a:	e01d      	b.n	8004858 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2202      	movs	r2, #2
 8004822:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f003 ff25 	bl	8008680 <HAL_SPI_Init>
      break;
 8004836:	e00f      	b.n	8004858 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2202      	movs	r2, #2
 800483e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2201      	movs	r2, #1
 8004846:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f003 ff17 	bl	8008680 <HAL_SPI_Init>
      break;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <spiSetDataMode+0xc0>
  if (p_spi->is_open == false) return;
 8004856:	bf00      	nop
  }
}
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2000a90c 	.word	0x2000a90c

08004864 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	460a      	mov	r2, r1
 800486e:	71fb      	strb	r3, [r7, #7]
 8004870:	4613      	mov	r3, r2
 8004872:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8004874:	79fa      	ldrb	r2, [r7, #7]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <spiSetBitWidth+0x5c>)
 8004880:	4413      	add	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f083 0301 	eor.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d111      	bne.n	80048b6 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 800489a:	79bb      	ldrb	r3, [r7, #6]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d104      	bne.n	80048aa <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a8:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fee6 	bl	8008680 <HAL_SPI_Init>
 80048b4:	e000      	b.n	80048b8 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 80048b6:	bf00      	nop
}
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000a90c 	.word	0x2000a90c

080048c4 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	4603      	mov	r3, r0
 80048cc:	460a      	mov	r2, r1
 80048ce:	71fb      	strb	r3, [r7, #7]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80048d4:	79fa      	ldrb	r2, [r7, #7]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <spiTransfer8+0x50>)
 80048e0:	4413      	add	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f083 0301 	eor.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <spiTransfer8+0x32>
 80048f2:	2300      	movs	r3, #0
 80048f4:	e00a      	b.n	800490c <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6898      	ldr	r0, [r3, #8]
 80048fa:	f107 020b 	add.w	r2, r7, #11
 80048fe:	1db9      	adds	r1, r7, #6
 8004900:	230a      	movs	r3, #10
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2301      	movs	r3, #1
 8004906:	f003 ff47 	bl	8008798 <HAL_SPI_TransmitReceive>

  return ret;
 800490a:	7afb      	ldrb	r3, [r7, #11]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	2000a90c 	.word	0x2000a90c

08004918 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <spiDmaTxStart+0x4c>)
 8004932:	4413      	add	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f083 0301 	eor.w	r3, r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	b292      	uxth	r2, r2
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f004 f8c1 	bl	8008adc <HAL_SPI_Transmit_DMA>
 800495a:	e000      	b.n	800495e <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 800495c:	bf00      	nop
}
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	2000a90c 	.word	0x2000a90c

08004968 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ffc8 	bl	8004918 <spiDmaTxStart>

  t_time = millis();
 8004988:	f7fc fc3f 	bl	800120a <millis>
 800498c:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <spiDmaTxTransfer+0x30>
 8004994:	2301      	movs	r3, #1
 8004996:	e013      	b.n	80049c0 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f814 	bl	80049c8 <spiDmaTxIsDone>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 80049a6:	f7fc fc30 	bl	800120a <millis>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d2f0      	bcs.n	8004998 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ba:	e000      	b.n	80049be <spiDmaTxTransfer+0x56>
      break;
 80049bc:	bf00      	nop
    }
  }

  return ret;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80049d2:	79fa      	ldrb	r2, [r7, #7]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a09      	ldr	r2, [pc, #36]	; (8004a04 <spiDmaTxIsDone+0x3c>)
 80049de:	4413      	add	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	f083 0301 	eor.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <spiDmaTxIsDone+0x2c>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e001      	b.n	80049f8 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	785b      	ldrb	r3, [r3, #1]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	2000a90c 	.word	0x2000a90c

08004a08 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8004a14:	79fa      	ldrb	r2, [r7, #7]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <spiAttachTxInterrupt+0x40>)
 8004a20:	4413      	add	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f083 0301 	eor.w	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	e000      	b.n	8004a3c <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8004a3a:	bf00      	nop
}
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	2000a90c 	.word	0x2000a90c

08004a4c <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_SPI_ErrorCallback+0x28>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8004a62:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <HAL_SPI_ErrorCallback+0x28>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	709a      	strb	r2, [r3, #2]
  }
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	2000a90c 	.word	0x2000a90c

08004a78 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_SPI_TxCpltCallback+0x38>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_SPI_TxCpltCallback+0x38>)
 8004a90:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4798      	blx	r3
    }
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	2000a90c 	.word	0x2000a90c

08004ab4 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004abc:	f107 0314 	add.w	r3, r7, #20
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <HAL_SPI_MspInit+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d179      	bne.n	8004bca <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	4b3f      	ldr	r3, [pc, #252]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b00:	6453      	str	r3, [r2, #68]	; 0x44
 8004b02:	4b35      	ldr	r3, [pc, #212]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	4b31      	ldr	r3, [pc, #196]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	4a30      	ldr	r2, [pc, #192]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1e:	4b2e      	ldr	r3, [pc, #184]	; (8004bd8 <HAL_SPI_MspInit+0x124>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004b2a:	23a0      	movs	r3, #160	; 0xa0
 8004b2c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	4825      	ldr	r0, [pc, #148]	; (8004bdc <HAL_SPI_MspInit+0x128>)
 8004b46:	f002 feaf 	bl	80078a8 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <HAL_SPI_MspInit+0x130>)
 8004b4e:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004b50:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b52:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004b56:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b5a:	2240      	movs	r2, #64	; 0x40
 8004b5c:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b64:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b6a:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b72:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b7a:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004b8e:	4814      	ldr	r0, [pc, #80]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004b90:	f002 fa9c 	bl	80070cc <HAL_DMA_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8004b9a:	f7fc fba5 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004ba2:	649a      	str	r2, [r3, #72]	; 0x48
 8004ba4:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <HAL_SPI_MspInit+0x12c>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	2023      	movs	r0, #35	; 0x23
 8004bb0:	f002 fa47 	bl	8007042 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004bb4:	2023      	movs	r0, #35	; 0x23
 8004bb6:	f002 fa60 	bl	800707a <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2105      	movs	r1, #5
 8004bbe:	203b      	movs	r0, #59	; 0x3b
 8004bc0:	f002 fa3f 	bl	8007042 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004bc4:	203b      	movs	r0, #59	; 0x3b
 8004bc6:	f002 fa58 	bl	800707a <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40013000 	.word	0x40013000
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40020000 	.word	0x40020000
 8004be0:	2000a978 	.word	0x2000a978
 8004be4:	40026458 	.word	0x40026458

08004be8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <HAL_SPI_MspDeInit+0x40>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_SPI_MspDeInit+0x44>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <HAL_SPI_MspDeInit+0x44>)
 8004c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c04:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 8004c06:	21a0      	movs	r1, #160	; 0xa0
 8004c08:	4809      	ldr	r0, [pc, #36]	; (8004c30 <HAL_SPI_MspDeInit+0x48>)
 8004c0a:	f002 ffcf 	bl	8007bac <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 fb08 	bl	8007228 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8004c18:	2023      	movs	r0, #35	; 0x23
 8004c1a:	f002 fa3c 	bl	8007096 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40013000 	.word	0x40013000
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020000 	.word	0x40020000

08004c34 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
	bool ret = true;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <tdsInit+0xd0>)
 8004c40:	2203      	movs	r2, #3
 8004c42:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8004c44:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <tdsInit+0xd0>)
 8004c46:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <tdsInit+0xd4>)
 8004c48:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <tdsInit+0xd0>)
 8004c4c:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8004c50:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8004c52:	4b2c      	ldr	r3, [pc, #176]	; (8004d04 <tdsInit+0xd0>)
 8004c54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004c58:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <tdsInit+0xd8>)
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <tdsInit+0xdc>)
 8004c6a:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <tdsInit+0xd8>)
 8004c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c72:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c74:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <tdsInit+0xd8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <tdsInit+0xd8>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c80:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <tdsInit+0xd8>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c86:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <tdsInit+0xd8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c8e:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <tdsInit+0xd8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c94:	4b1d      	ldr	r3, [pc, #116]	; (8004d0c <tdsInit+0xd8>)
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <tdsInit+0xe0>)
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <tdsInit+0xd8>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <tdsInit+0xd8>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004ca6:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <tdsInit+0xd8>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <tdsInit+0xd8>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004cb4:	4815      	ldr	r0, [pc, #84]	; (8004d0c <tdsInit+0xd8>)
 8004cb6:	f001 fb8d 	bl	80063d4 <HAL_ADC_Init>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <tdsInit+0x90>
	  {
	    Error_Handler();
 8004cc0:	f7fc fb12 	bl	80012e8 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004ccc:	2307      	movs	r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	480d      	ldr	r0, [pc, #52]	; (8004d0c <tdsInit+0xd8>)
 8004cd6:	f001 fdfd 	bl	80068d4 <HAL_ADC_ConfigChannel>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <tdsInit+0xb0>
	  {
	    Error_Handler();
 8004ce0:	f7fc fb02 	bl	80012e8 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	490c      	ldr	r1, [pc, #48]	; (8004d18 <tdsInit+0xe4>)
 8004ce8:	4808      	ldr	r0, [pc, #32]	; (8004d0c <tdsInit+0xd8>)
 8004cea:	f001 fcf7 	bl	80066dc <HAL_ADC_Start_DMA>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <tdsInit+0xc4>
	{
		Error_Handler();
 8004cf4:	f7fc faf8 	bl	80012e8 <Error_Handler>
	}

	return ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]

}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	2000a9d8 	.word	0x2000a9d8
 8004d08:	41c80000 	.word	0x41c80000
 8004d0c:	2000aa00 	.word	0x2000aa00
 8004d10:	40012000 	.word	0x40012000
 8004d14:	0f000001 	.word	0x0f000001
 8004d18:	2000a9e8 	.word	0x2000a9e8
 8004d1c:	00000000 	.word	0x00000000

08004d20 <tds_measure>:
bool tds_measure(void)
{
 8004d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
	bool ret = true;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8004d2c:	4b8e      	ldr	r3, [pc, #568]	; (8004f68 <tds_measure+0x248>)
 8004d2e:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fc09 	bl	8000578 <__aeabi_f2d>
 8004d66:	a378      	add	r3, pc, #480	; (adr r3, 8004f48 <tds_measure+0x228>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fc5c 	bl	8000628 <__aeabi_dmul>
 8004d70:	4603      	mov	r3, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	4625      	mov	r5, r4
 8004d76:	461c      	mov	r4, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fbfb 	bl	8000578 <__aeabi_f2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fc4d 	bl	8000628 <__aeabi_dmul>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	4625      	mov	r5, r4
 8004d94:	461c      	mov	r4, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fbec 	bl	8000578 <__aeabi_f2d>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4620      	mov	r0, r4
 8004da6:	4629      	mov	r1, r5
 8004da8:	f7fb fc3e 	bl	8000628 <__aeabi_dmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4625      	mov	r5, r4
 8004db2:	461c      	mov	r4, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb fbdd 	bl	8000578 <__aeabi_f2d>
 8004dbe:	a364      	add	r3, pc, #400	; (adr r3, 8004f50 <tds_measure+0x230>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f7fb fc30 	bl	8000628 <__aeabi_dmul>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4690      	mov	r8, r2
 8004dce:	4699      	mov	r9, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb fbcf 	bl	8000578 <__aeabi_f2d>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fc21 	bl	8000628 <__aeabi_dmul>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4620      	mov	r0, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	f7fb fa63 	bl	80002b8 <__aeabi_dsub>
 8004df2:	4603      	mov	r3, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	4625      	mov	r5, r4
 8004df8:	461c      	mov	r4, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb fbba 	bl	8000578 <__aeabi_f2d>
 8004e04:	a354      	add	r3, pc, #336	; (adr r3, 8004f58 <tds_measure+0x238>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f7fb fc0d 	bl	8000628 <__aeabi_dmul>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fa51 	bl	80002bc <__adddf3>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	4625      	mov	r5, r4
 8004e20:	461c      	mov	r4, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fb fba6 	bl	8000578 <__aeabi_f2d>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4620      	mov	r0, r4
 8004e32:	4629      	mov	r1, r5
 8004e34:	f7fb fbf8 	bl	8000628 <__aeabi_dmul>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	4621      	mov	r1, r4
 8004e40:	f7fb feea 	bl	8000c18 <__aeabi_d2f>
 8004e44:	4602      	mov	r2, r0
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fb fb92 	bl	8000578 <__aeabi_f2d>
 8004e54:	4604      	mov	r4, r0
 8004e56:	460d      	mov	r5, r1
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb8b 	bl	8000578 <__aeabi_f2d>
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <tds_measure+0x24c>)
 8004e68:	f7fb fa26 	bl	80002b8 <__aeabi_dsub>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	a33a      	add	r3, pc, #232	; (adr r3, 8004f60 <tds_measure+0x240>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fbd5 	bl	8000628 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <tds_measure+0x250>)
 8004e8c:	f7fb fa16 	bl	80002bc <__adddf3>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb fcf0 	bl	800087c <__aeabi_ddiv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	f7fb feb8 	bl	8000c18 <__aeabi_d2f>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004eb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <tds_measure+0x254>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	2b0b      	cmp	r3, #11
 8004ed0:	d101      	bne.n	8004ed6 <tds_measure+0x1b6>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	edd3 7a08 	vldr	s15, [r3, #32]
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <tds_measure+0x254>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee4:	ee17 2a90 	vmov	r2, s15
 8004ee8:	b211      	sxth	r1, r2
 8004eea:	4a23      	ldr	r2, [pc, #140]	; (8004f78 <tds_measure+0x258>)
 8004eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 8004ef0:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <tds_measure+0x254>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <tds_measure+0x258>)
 8004ef6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <tds_measure+0x25c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <tds_measure+0x25c>)
 8004f04:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <tds_measure+0x25c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	79fa      	ldrb	r2, [r7, #7]
 8004f0c:	491a      	ldr	r1, [pc, #104]	; (8004f78 <tds_measure+0x258>)
 8004f0e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <tds_measure+0x25c>)
 8004f16:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <tds_measure+0x254>)
 8004f1c:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <tds_measure+0x25c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <tds_measure+0x260>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8004f38:	79bb      	ldrb	r3, [r7, #6]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f44:	f3af 8000 	nop.w
 8004f48:	a3d70a3d 	.word	0xa3d70a3d
 8004f4c:	4060ad70 	.word	0x4060ad70
 8004f50:	1eb851ec 	.word	0x1eb851ec
 8004f54:	406ffb85 	.word	0x406ffb85
 8004f58:	b851eb85 	.word	0xb851eb85
 8004f5c:	408acb1e 	.word	0x408acb1e
 8004f60:	47ae147b 	.word	0x47ae147b
 8004f64:	3f947ae1 	.word	0x3f947ae1
 8004f68:	2000a9d8 	.word	0x2000a9d8
 8004f6c:	40390000 	.word	0x40390000
 8004f70:	3ff00000 	.word	0x3ff00000
 8004f74:	2000a300 	.word	0x2000a300
 8004f78:	2000a304 	.word	0x2000a304
 8004f7c:	2000a31c 	.word	0x2000a31c
 8004f80:	cccccccd 	.word	0xcccccccd

08004f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8c:	f107 0314 	add.w	r3, r7, #20
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	60da      	str	r2, [r3, #12]
 8004f9a:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a3e      	ldr	r2, [pc, #248]	; (800509c <HAL_ADC_MspInit+0x118>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d175      	bne.n	8005092 <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	4a35      	ldr	r2, [pc, #212]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd2:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6313      	str	r3, [r2, #48]	; 0x30
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_ADC_MspInit+0x11c>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ffe:	2303      	movs	r3, #3
 8005000:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4619      	mov	r1, r3
 800500c:	4825      	ldr	r0, [pc, #148]	; (80050a4 <HAL_ADC_MspInit+0x120>)
 800500e:	f002 fc4b 	bl	80078a8 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8005012:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <HAL_ADC_MspInit+0x128>)
 8005016:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005018:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800501a:	2200      	movs	r2, #0
 800501c:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800501e:	4b22      	ldr	r3, [pc, #136]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800502a:	4b1f      	ldr	r3, [pc, #124]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800502c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005030:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005038:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800503c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005040:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005048:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800504a:	4b17      	ldr	r3, [pc, #92]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800504c:	2200      	movs	r2, #0
 800504e:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005052:	2200      	movs	r2, #0
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005056:	4814      	ldr	r0, [pc, #80]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 8005058:	f002 f838 	bl	80070cc <HAL_DMA_Init>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8005062:	f7fc f941 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
 800506c:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <HAL_ADC_MspInit+0x124>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	2012      	movs	r0, #18
 8005078:	f001 ffe3 	bl	8007042 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800507c:	2012      	movs	r0, #18
 800507e:	f001 fffc 	bl	800707a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2102      	movs	r1, #2
 8005086:	2038      	movs	r0, #56	; 0x38
 8005088:	f001 ffdb 	bl	8007042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800508c:	2038      	movs	r0, #56	; 0x38
 800508e:	f001 fff4 	bl	800707a <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005092:	bf00      	nop
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40012000 	.word	0x40012000
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40020000 	.word	0x40020000
 80050a8:	2000aa48 	.word	0x2000aa48
 80050ac:	40026410 	.word	0x40026410

080050b0 <uartInit>:
#endif



bool uartInit(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	e007      	b.n	80050cc <uartInit+0x1c>
  {
    is_open[i] = false;
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <uartInit+0x30>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3301      	adds	r3, #1
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	ddf4      	ble.n	80050bc <uartInit+0xc>
  }


  return true;
 80050d2:	2301      	movs	r3, #1
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	2000a320 	.word	0x2000a320

080050e4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	6039      	str	r1, [r7, #0]
 80050ee:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80050f0:	2300      	movs	r3, #0
 80050f2:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <uartOpen+0x1c>
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d078      	beq.n	80051f0 <uartOpen+0x10c>
 80050fe:	e0ef      	b.n	80052e0 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8005100:	4b7a      	ldr	r3, [pc, #488]	; (80052ec <uartOpen+0x208>)
 8005102:	4a7b      	ldr	r2, [pc, #492]	; (80052f0 <uartOpen+0x20c>)
 8005104:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 8005106:	4a79      	ldr	r2, [pc, #484]	; (80052ec <uartOpen+0x208>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 800510c:	4b77      	ldr	r3, [pc, #476]	; (80052ec <uartOpen+0x208>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <uartOpen+0x208>)
 8005114:	2200      	movs	r2, #0
 8005116:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8005118:	4b74      	ldr	r3, [pc, #464]	; (80052ec <uartOpen+0x208>)
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <uartOpen+0x208>)
 8005120:	220c      	movs	r2, #12
 8005122:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8005124:	4b71      	ldr	r3, [pc, #452]	; (80052ec <uartOpen+0x208>)
 8005126:	2200      	movs	r2, #0
 8005128:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <uartOpen+0x208>)
 800512c:	2200      	movs	r2, #0
 800512e:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8005130:	486e      	ldr	r0, [pc, #440]	; (80052ec <uartOpen+0x208>)
 8005132:	f004 fe46 	bl	8009dc2 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <uartOpen+0x210>)
 800513c:	4413      	add	r3, r2
 800513e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005142:	496d      	ldr	r1, [pc, #436]	; (80052f8 <uartOpen+0x214>)
 8005144:	4618      	mov	r0, r3
 8005146:	f7fc f9ea 	bl	800151e <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	4b6b      	ldr	r3, [pc, #428]	; (80052fc <uartOpen+0x218>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a6a      	ldr	r2, [pc, #424]	; (80052fc <uartOpen+0x218>)
 8005154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b68      	ldr	r3, [pc, #416]	; (80052fc <uartOpen+0x218>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	203a      	movs	r0, #58	; 0x3a
 800516c:	f001 ff69 	bl	8007042 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005170:	203a      	movs	r0, #58	; 0x3a
 8005172:	f001 ff82 	bl	800707a <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005176:	2200      	movs	r2, #0
 8005178:	2100      	movs	r1, #0
 800517a:	2046      	movs	r0, #70	; 0x46
 800517c:	f001 ff61 	bl	8007042 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005180:	2046      	movs	r0, #70	; 0x46
 8005182:	f001 ff7a 	bl	800707a <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8005186:	4859      	ldr	r0, [pc, #356]	; (80052ec <uartOpen+0x208>)
 8005188:	f004 fdce 	bl	8009d28 <HAL_UART_Init>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <uartOpen+0xb4>
        {
          ret = false;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8005196:	e0a3      	b.n	80052e0 <uartOpen+0x1fc>
          ret = true;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	4a58      	ldr	r2, [pc, #352]	; (8005300 <uartOpen+0x21c>)
 80051a0:	2101      	movs	r1, #1
 80051a2:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80051a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a8:	4953      	ldr	r1, [pc, #332]	; (80052f8 <uartOpen+0x214>)
 80051aa:	4850      	ldr	r0, [pc, #320]	; (80052ec <uartOpen+0x208>)
 80051ac:	f004 fece 	bl	8009f4c <HAL_UART_Receive_DMA>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <uartOpen+0xd6>
            ret = false;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	4a4d      	ldr	r2, [pc, #308]	; (80052f4 <uartOpen+0x210>)
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4413      	add	r3, r2
 80051c2:	3308      	adds	r3, #8
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <uartOpen+0x220>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	1a8a      	subs	r2, r1, r2
 80051d0:	4948      	ldr	r1, [pc, #288]	; (80052f4 <uartOpen+0x210>)
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	440b      	add	r3, r1
 80051d6:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80051d8:	79fa      	ldrb	r2, [r7, #7]
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	4945      	ldr	r1, [pc, #276]	; (80052f4 <uartOpen+0x210>)
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	440a      	add	r2, r1
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	4943      	ldr	r1, [pc, #268]	; (80052f4 <uartOpen+0x210>)
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	440b      	add	r3, r1
 80051ea:	3304      	adds	r3, #4
 80051ec:	601a      	str	r2, [r3, #0]
      break;
 80051ee:	e077      	b.n	80052e0 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80051f0:	4b3e      	ldr	r3, [pc, #248]	; (80052ec <uartOpen+0x208>)
 80051f2:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <uartOpen+0x20c>)
 80051f4:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80051f6:	4a3d      	ldr	r2, [pc, #244]	; (80052ec <uartOpen+0x208>)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <uartOpen+0x208>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8005202:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <uartOpen+0x208>)
 8005204:	2200      	movs	r2, #0
 8005206:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8005208:	4b38      	ldr	r3, [pc, #224]	; (80052ec <uartOpen+0x208>)
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800520e:	4b37      	ldr	r3, [pc, #220]	; (80052ec <uartOpen+0x208>)
 8005210:	220c      	movs	r2, #12
 8005212:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005214:	4b35      	ldr	r3, [pc, #212]	; (80052ec <uartOpen+0x208>)
 8005216:	2200      	movs	r2, #0
 8005218:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800521a:	4b34      	ldr	r3, [pc, #208]	; (80052ec <uartOpen+0x208>)
 800521c:	2200      	movs	r2, #0
 800521e:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8005220:	4832      	ldr	r0, [pc, #200]	; (80052ec <uartOpen+0x208>)
 8005222:	f004 fdce 	bl	8009dc2 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	4a32      	ldr	r2, [pc, #200]	; (80052f4 <uartOpen+0x210>)
 800522c:	4413      	add	r3, r2
 800522e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005232:	4931      	ldr	r1, [pc, #196]	; (80052f8 <uartOpen+0x214>)
 8005234:	4618      	mov	r0, r3
 8005236:	f7fc f972 	bl	800151e <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <uartOpen+0x218>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <uartOpen+0x218>)
 8005244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005248:	6313      	str	r3, [r2, #48]	; 0x30
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <uartOpen+0x218>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005256:	2200      	movs	r2, #0
 8005258:	2100      	movs	r1, #0
 800525a:	203a      	movs	r0, #58	; 0x3a
 800525c:	f001 fef1 	bl	8007042 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005260:	203a      	movs	r0, #58	; 0x3a
 8005262:	f001 ff0a 	bl	800707a <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005266:	2200      	movs	r2, #0
 8005268:	2100      	movs	r1, #0
 800526a:	2046      	movs	r0, #70	; 0x46
 800526c:	f001 fee9 	bl	8007042 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005270:	2046      	movs	r0, #70	; 0x46
 8005272:	f001 ff02 	bl	800707a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8005276:	481d      	ldr	r0, [pc, #116]	; (80052ec <uartOpen+0x208>)
 8005278:	f004 fd56 	bl	8009d28 <HAL_UART_Init>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <uartOpen+0x1a4>
      {
        ret = false;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8005286:	e02a      	b.n	80052de <uartOpen+0x1fa>
        ret = true;
 8005288:	2301      	movs	r3, #1
 800528a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <uartOpen+0x21c>)
 8005290:	2101      	movs	r1, #1
 8005292:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005298:	4917      	ldr	r1, [pc, #92]	; (80052f8 <uartOpen+0x214>)
 800529a:	4814      	ldr	r0, [pc, #80]	; (80052ec <uartOpen+0x208>)
 800529c:	f004 fe56 	bl	8009f4c <HAL_UART_Receive_DMA>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <uartOpen+0x1c6>
          ret = false;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <uartOpen+0x210>)
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4413      	add	r3, r2
 80052b2:	3308      	adds	r3, #8
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	4b13      	ldr	r3, [pc, #76]	; (8005304 <uartOpen+0x220>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	1a8a      	subs	r2, r1, r2
 80052c0:	490c      	ldr	r1, [pc, #48]	; (80052f4 <uartOpen+0x210>)
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	440b      	add	r3, r1
 80052c6:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80052c8:	79fa      	ldrb	r2, [r7, #7]
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4909      	ldr	r1, [pc, #36]	; (80052f4 <uartOpen+0x210>)
 80052ce:	0112      	lsls	r2, r2, #4
 80052d0:	440a      	add	r2, r1
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	4907      	ldr	r1, [pc, #28]	; (80052f4 <uartOpen+0x210>)
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	440b      	add	r3, r1
 80052da:	3304      	adds	r3, #4
 80052dc:	601a      	str	r2, [r3, #0]
      break;
 80052de:	bf00      	nop
  }

  return ret;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	2000ab68 	.word	0x2000ab68
 80052f0:	40011000 	.word	0x40011000
 80052f4:	2000a324 	.word	0x2000a324
 80052f8:	2000a334 	.word	0x2000a334
 80052fc:	40023800 	.word	0x40023800
 8005300:	2000a320 	.word	0x2000a320
 8005304:	2000ab08 	.word	0x2000ab08

08005308 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <uartAvailable+0x1a>
 800531c:	2b01      	cmp	r3, #1
 800531e:	d018      	beq.n	8005352 <uartAvailable+0x4a>
 8005320:	e02f      	b.n	8005382 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	4a19      	ldr	r2, [pc, #100]	; (800538c <uartAvailable+0x84>)
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	4413      	add	r3, r2
 800532a:	3308      	adds	r3, #8
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	4b18      	ldr	r3, [pc, #96]	; (8005390 <uartAvailable+0x88>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	1a8a      	subs	r2, r1, r2
 8005338:	4914      	ldr	r1, [pc, #80]	; (800538c <uartAvailable+0x84>)
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	440b      	add	r3, r1
 800533e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	4a11      	ldr	r2, [pc, #68]	; (800538c <uartAvailable+0x84>)
 8005346:	4413      	add	r3, r2
 8005348:	4618      	mov	r0, r3
 800534a:	f7fc f940 	bl	80015ce <qbufferAvailable>
 800534e:	60f8      	str	r0, [r7, #12]
      break;
 8005350:	e017      	b.n	8005382 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4a0d      	ldr	r2, [pc, #52]	; (800538c <uartAvailable+0x84>)
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	4413      	add	r3, r2
 800535a:	3308      	adds	r3, #8
 800535c:	6819      	ldr	r1, [r3, #0]
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <uartAvailable+0x88>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	1a8a      	subs	r2, r1, r2
 8005368:	4908      	ldr	r1, [pc, #32]	; (800538c <uartAvailable+0x84>)
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	440b      	add	r3, r1
 800536e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	4a05      	ldr	r2, [pc, #20]	; (800538c <uartAvailable+0x84>)
 8005376:	4413      	add	r3, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc f928 	bl	80015ce <qbufferAvailable>
 800537e:	60f8      	str	r0, [r7, #12]
      break;
 8005380:	bf00      	nop
  }

  return ret;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2000a324 	.word	0x2000a324
 8005390:	2000ab08 	.word	0x2000ab08

08005394 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <uartRead+0x1a>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d008      	beq.n	80053be <uartRead+0x2a>
 80053ac:	e00f      	b.n	80053ce <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80053ae:	f107 030f 	add.w	r3, r7, #15
 80053b2:	2201      	movs	r2, #1
 80053b4:	4619      	mov	r1, r3
 80053b6:	4808      	ldr	r0, [pc, #32]	; (80053d8 <uartRead+0x44>)
 80053b8:	f7fc f8cc 	bl	8001554 <qbufferRead>
      break;
 80053bc:	e007      	b.n	80053ce <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80053be:	f107 030f 	add.w	r3, r7, #15
 80053c2:	2201      	movs	r2, #1
 80053c4:	4619      	mov	r1, r3
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <uartRead+0x48>)
 80053c8:	f7fc f8c4 	bl	8001554 <qbufferRead>
      break;
 80053cc:	bf00      	nop
  }

  return ret;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	2000a324 	.word	0x2000a324
 80053dc:	2000a334 	.word	0x2000a334

080053e0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <uartWrite+0x1e>
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d00f      	beq.n	800541c <uartWrite+0x3c>
 80053fc:	e020      	b.n	8005440 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	b29a      	uxth	r2, r3
 8005402:	2364      	movs	r3, #100	; 0x64
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4811      	ldr	r0, [pc, #68]	; (800544c <uartWrite+0x6c>)
 8005408:	f004 fd07 	bl	8009e1a <HAL_UART_Transmit>
 800540c:	4603      	mov	r3, r0
 800540e:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d111      	bne.n	800543a <uartWrite+0x5a>
        {
          ret = length;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	617b      	str	r3, [r7, #20]
        }
      break;
 800541a:	e00e      	b.n	800543a <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	b29a      	uxth	r2, r3
 8005420:	2364      	movs	r3, #100	; 0x64
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4809      	ldr	r0, [pc, #36]	; (800544c <uartWrite+0x6c>)
 8005426:	f004 fcf8 	bl	8009e1a <HAL_UART_Transmit>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <uartWrite+0x5e>
      {
        ret = length;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	617b      	str	r3, [r7, #20]
      }
      break;
 8005438:	e001      	b.n	800543e <uartWrite+0x5e>
      break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <uartWrite+0x60>
      break;
 800543e:	bf00      	nop
  }

  return ret;
 8005440:	697b      	ldr	r3, [r7, #20]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	2000ab68 	.word	0x2000ab68

08005450 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8005450:	b40e      	push	{r1, r2, r3}
 8005452:	b580      	push	{r7, lr}
 8005454:	b0c7      	sub	sp, #284	; 0x11c
 8005456:	af00      	add	r7, sp, #0
 8005458:	4602      	mov	r2, r0
 800545a:	1dfb      	adds	r3, r7, #7
 800545c:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800545e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	f107 0010 	add.w	r0, r7, #16
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800547a:	f006 fc27 	bl	800bccc <vsniprintf>
 800547e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8005482:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005486:	f107 0110 	add.w	r1, r7, #16
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ffa6 	bl	80053e0 <uartWrite>
 8005494:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8005498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800549c:	4618      	mov	r0, r3
 800549e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a8:	b003      	add	sp, #12
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054dc:	f107 0314 	add.w	r3, r7, #20
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5b      	ldr	r2, [pc, #364]	; (8005660 <HAL_UART_MspInit+0x18c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	f040 80b0 	bne.w	8005658 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	4b59      	ldr	r3, [pc, #356]	; (8005664 <HAL_UART_MspInit+0x190>)
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	4a58      	ldr	r2, [pc, #352]	; (8005664 <HAL_UART_MspInit+0x190>)
 8005502:	f043 0310 	orr.w	r3, r3, #16
 8005506:	6453      	str	r3, [r2, #68]	; 0x44
 8005508:	4b56      	ldr	r3, [pc, #344]	; (8005664 <HAL_UART_MspInit+0x190>)
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	4b52      	ldr	r3, [pc, #328]	; (8005664 <HAL_UART_MspInit+0x190>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	4a51      	ldr	r2, [pc, #324]	; (8005664 <HAL_UART_MspInit+0x190>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6313      	str	r3, [r2, #48]	; 0x30
 8005524:	4b4f      	ldr	r3, [pc, #316]	; (8005664 <HAL_UART_MspInit+0x190>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <HAL_UART_MspInit+0x190>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_UART_MspInit+0x190>)
 800553a:	f043 0302 	orr.w	r3, r3, #2
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b48      	ldr	r3, [pc, #288]	; (8005664 <HAL_UART_MspInit+0x190>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800554c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005550:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800555e:	2307      	movs	r3, #7
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	4619      	mov	r1, r3
 8005568:	483f      	ldr	r0, [pc, #252]	; (8005668 <HAL_UART_MspInit+0x194>)
 800556a:	f002 f99d 	bl	80078a8 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800556e:	2340      	movs	r3, #64	; 0x40
 8005570:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005572:	2302      	movs	r3, #2
 8005574:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557a:	2303      	movs	r3, #3
 800557c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800557e:	2307      	movs	r3, #7
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005582:	f107 0314 	add.w	r3, r7, #20
 8005586:	4619      	mov	r1, r3
 8005588:	4838      	ldr	r0, [pc, #224]	; (800566c <HAL_UART_MspInit+0x198>)
 800558a:	f002 f98d 	bl	80078a8 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <HAL_UART_MspInit+0x19c>)
 8005590:	4a38      	ldr	r2, [pc, #224]	; (8005674 <HAL_UART_MspInit+0x1a0>)
 8005592:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005594:	4b36      	ldr	r3, [pc, #216]	; (8005670 <HAL_UART_MspInit+0x19c>)
 8005596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800559a:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800559c:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_UART_MspInit+0x19c>)
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a2:	4b33      	ldr	r3, [pc, #204]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055a8:	4b31      	ldr	r3, [pc, #196]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ae:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055b0:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80055bc:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055c2:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055c8:	4b29      	ldr	r3, [pc, #164]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80055ce:	4828      	ldr	r0, [pc, #160]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055d0:	f001 fd7c 	bl	80070cc <HAL_DMA_Init>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80055da:	f7fb fe85 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a23      	ldr	r2, [pc, #140]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
 80055e4:	4a22      	ldr	r2, [pc, #136]	; (8005670 <HAL_UART_MspInit+0x19c>)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 80055ec:	4a23      	ldr	r2, [pc, #140]	; (800567c <HAL_UART_MspInit+0x1a8>)
 80055ee:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80055f0:	4b21      	ldr	r3, [pc, #132]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 80055f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055f6:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f8:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055fe:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005600:	2200      	movs	r2, #0
 8005602:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800560a:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 800560e:	2200      	movs	r2, #0
 8005610:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005612:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005614:	2200      	movs	r2, #0
 8005616:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005618:	4b17      	ldr	r3, [pc, #92]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 800561a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561e:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005620:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005622:	2200      	movs	r2, #0
 8005624:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005628:	2200      	movs	r2, #0
 800562a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800562c:	4812      	ldr	r0, [pc, #72]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 800562e:	f001 fd4d 	bl	80070cc <HAL_DMA_Init>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8005638:	f7fb fe56 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005640:	635a      	str	r2, [r3, #52]	; 0x34
 8005642:	4a0d      	ldr	r2, [pc, #52]	; (8005678 <HAL_UART_MspInit+0x1a4>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	2100      	movs	r1, #0
 800564c:	2025      	movs	r0, #37	; 0x25
 800564e:	f001 fcf8 	bl	8007042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005652:	2025      	movs	r0, #37	; 0x25
 8005654:	f001 fd11 	bl	800707a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005658:	bf00      	nop
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40011000 	.word	0x40011000
 8005664:	40023800 	.word	0x40023800
 8005668:	40020000 	.word	0x40020000
 800566c:	40020400 	.word	0x40020400
 8005670:	2000aaa8 	.word	0x2000aaa8
 8005674:	400264b8 	.word	0x400264b8
 8005678:	2000ab08 	.word	0x2000ab08
 800567c:	40026440 	.word	0x40026440

08005680 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <HAL_UART_MspDeInit+0x54>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d11b      	bne.n	80056ca <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_UART_MspDeInit+0x58>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <HAL_UART_MspDeInit+0x58>)
 8005698:	f023 0310 	bic.w	r3, r3, #16
 800569c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 800569e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056a2:	480e      	ldr	r0, [pc, #56]	; (80056dc <HAL_UART_MspDeInit+0x5c>)
 80056a4:	f002 fa82 	bl	8007bac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	480d      	ldr	r0, [pc, #52]	; (80056e0 <HAL_UART_MspDeInit+0x60>)
 80056ac:	f002 fa7e 	bl	8007bac <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fdb7 	bl	8007228 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fdb2 	bl	8007228 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80056c4:	2025      	movs	r0, #37	; 0x25
 80056c6:	f001 fce6 	bl	8007096 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40020000 	.word	0x40020000
 80056e0:	40020400 	.word	0x40020400

080056e4 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	3306      	adds	r3, #6
 80056f2:	2220      	movs	r2, #32
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 fb87 	bl	800ae0a <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <hanFontLoad+0x2e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b0a      	cmp	r3, #10
 8005710:	d107      	bne.n	8005722 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2201      	movs	r2, #1
 800571c:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 800571e:	2304      	movs	r3, #4
 8005720:	e03b      	b.n	800579a <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b25b      	sxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	da2b      	bge.n	8005784 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	041a      	lsls	r2, r3, #16
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3301      	adds	r3, #1
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	4313      	orrs	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	3202      	adds	r2, #2
 8005740:	7812      	ldrb	r2, [r2, #0]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <hanFontLoad+0xc0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d90e      	bls.n	800576c <hanFontLoad+0x88>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <hanFontLoad+0xc4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d80a      	bhi.n	800576c <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2203      	movs	r2, #3
 8005760:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f91f 	bl	80059a8 <hanUniFontLoad>
 800576a:	e009      	b.n	8005780 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2202      	movs	r2, #2
 8005776:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f816 	bl	80057ac <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8005780:	2301      	movs	r3, #1
 8005782:	e00a      	b.n	800579a <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2202      	movs	r2, #2
 8005788:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2201      	movs	r2, #1
 800578e:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa30 	bl	8005bf8 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8005798:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	00eab07f 	.word	0x00eab07f
 80057a8:	00ed9fb0 	.word	0x00ed9fb0

080057ac <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	b21a      	sxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3301      	adds	r3, #1
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b21b      	sxth	r3, r3
 80057c6:	4313      	orrs	r3, r2
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 80057cc:	89bb      	ldrh	r3, [r7, #12]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fa3c 	bl	8005c4c <hanCnvCodeWan2Johab>
 80057d4:	4603      	mov	r3, r0
 80057d6:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 80057d8:	89bb      	ldrh	r3, [r7, #12]
 80057da:	0a9b      	lsrs	r3, r3, #10
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	4b63      	ldr	r3, [pc, #396]	; (8005974 <hanWanFontLoad+0x1c8>)
 80057e6:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 80057e8:	89bb      	ldrh	r3, [r7, #12]
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	4b60      	ldr	r3, [pc, #384]	; (8005978 <hanWanFontLoad+0x1cc>)
 80057f6:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 80057f8:	89bb      	ldrh	r3, [r7, #12]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b5e      	ldr	r3, [pc, #376]	; (800597c <hanWanFontLoad+0x1d0>)
 8005802:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8005804:	4b5b      	ldr	r3, [pc, #364]	; (8005974 <hanWanFontLoad+0x1c8>)
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <hanWanFontLoad+0x1d4>)
 800580c:	5c9b      	ldrb	r3, [r3, r2]
 800580e:	b29a      	uxth	r2, r3
 8005810:	4b58      	ldr	r3, [pc, #352]	; (8005974 <hanWanFontLoad+0x1c8>)
 8005812:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8005814:	4b58      	ldr	r3, [pc, #352]	; (8005978 <hanWanFontLoad+0x1cc>)
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	4b5a      	ldr	r3, [pc, #360]	; (8005984 <hanWanFontLoad+0x1d8>)
 800581c:	5c9b      	ldrb	r3, [r3, r2]
 800581e:	b29a      	uxth	r2, r3
 8005820:	4b55      	ldr	r3, [pc, #340]	; (8005978 <hanWanFontLoad+0x1cc>)
 8005822:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8005824:	4b55      	ldr	r3, [pc, #340]	; (800597c <hanWanFontLoad+0x1d0>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	4b57      	ldr	r3, [pc, #348]	; (8005988 <hanWanFontLoad+0x1dc>)
 800582c:	5c9b      	ldrb	r3, [r3, r2]
 800582e:	b29a      	uxth	r2, r3
 8005830:	4b52      	ldr	r3, [pc, #328]	; (800597c <hanWanFontLoad+0x1d0>)
 8005832:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8005834:	4b51      	ldr	r3, [pc, #324]	; (800597c <hanWanFontLoad+0x1d0>)
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <hanWanFontLoad+0x9e>
 800583c:	4b4e      	ldr	r3, [pc, #312]	; (8005978 <hanWanFontLoad+0x1cc>)
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	4b52      	ldr	r3, [pc, #328]	; (800598c <hanWanFontLoad+0x1e0>)
 8005844:	5c9b      	ldrb	r3, [r3, r2]
 8005846:	b29b      	uxth	r3, r3
 8005848:	e005      	b.n	8005856 <hanWanFontLoad+0xaa>
 800584a:	4b4b      	ldr	r3, [pc, #300]	; (8005978 <hanWanFontLoad+0x1cc>)
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <hanWanFontLoad+0x1e4>)
 8005852:	5c9b      	ldrb	r3, [r3, r2]
 8005854:	b29b      	uxth	r3, r3
 8005856:	4a4f      	ldr	r2, [pc, #316]	; (8005994 <hanWanFontLoad+0x1e8>)
 8005858:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800585a:	4b46      	ldr	r3, [pc, #280]	; (8005974 <hanWanFontLoad+0x1c8>)
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <hanWanFontLoad+0xca>
 8005862:	4b44      	ldr	r3, [pc, #272]	; (8005974 <hanWanFontLoad+0x1c8>)
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d005      	beq.n	8005876 <hanWanFontLoad+0xca>
 800586a:	4b42      	ldr	r3, [pc, #264]	; (8005974 <hanWanFontLoad+0x1c8>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	2b10      	cmp	r3, #16
 8005870:	d001      	beq.n	8005876 <hanWanFontLoad+0xca>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <hanWanFontLoad+0xcc>
 8005876:	2300      	movs	r3, #0
 8005878:	b29b      	uxth	r3, r3
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <hanWanFontLoad+0x1d0>)
 800587c:	8812      	ldrh	r2, [r2, #0]
 800587e:	2a00      	cmp	r2, #0
 8005880:	d001      	beq.n	8005886 <hanWanFontLoad+0xda>
 8005882:	2202      	movs	r2, #2
 8005884:	e000      	b.n	8005888 <hanWanFontLoad+0xdc>
 8005886:	2200      	movs	r2, #0
 8005888:	4413      	add	r3, r2
 800588a:	b29a      	uxth	r2, r3
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <hanWanFontLoad+0x1ec>)
 800588e:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <hanWanFontLoad+0x1cc>)
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4b41      	ldr	r3, [pc, #260]	; (800599c <hanWanFontLoad+0x1f0>)
 8005898:	5c9b      	ldrb	r3, [r3, r2]
 800589a:	b29a      	uxth	r2, r3
 800589c:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <hanWanFontLoad+0x1f4>)
 800589e:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	81fb      	strh	r3, [r7, #14]
 80058a4:	e035      	b.n	8005912 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 80058a6:	4b3b      	ldr	r3, [pc, #236]	; (8005994 <hanWanFontLoad+0x1e8>)
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b2f      	ldr	r3, [pc, #188]	; (8005974 <hanWanFontLoad+0x1c8>)
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	441a      	add	r2, r3
 80058bc:	89fb      	ldrh	r3, [r7, #14]
 80058be:	4939      	ldr	r1, [pc, #228]	; (80059a4 <hanWanFontLoad+0x1f8>)
 80058c0:	0152      	lsls	r2, r2, #5
 80058c2:	4413      	add	r3, r2
 80058c4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80058c8:	89fb      	ldrh	r3, [r7, #14]
 80058ca:	b2d1      	uxtb	r1, r2
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	4413      	add	r3, r2
 80058d0:	460a      	mov	r2, r1
 80058d2:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	7999      	ldrb	r1, [r3, #6]
 80058dc:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <hanWanFontLoad+0x1ec>)
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	2316      	movs	r3, #22
 80058e4:	fb03 f302 	mul.w	r3, r3, r2
 80058e8:	33a0      	adds	r3, #160	; 0xa0
 80058ea:	4a23      	ldr	r2, [pc, #140]	; (8005978 <hanWanFontLoad+0x1cc>)
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	441a      	add	r2, r3
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	482c      	ldr	r0, [pc, #176]	; (80059a4 <hanWanFontLoad+0x1f8>)
 80058f4:	0152      	lsls	r2, r2, #5
 80058f6:	4413      	add	r3, r2
 80058f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	430a      	orrs	r2, r1
 8005902:	b2d1      	uxtb	r1, r2
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	4413      	add	r3, r2
 8005908:	460a      	mov	r2, r1
 800590a:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800590c:	89fb      	ldrh	r3, [r7, #14]
 800590e:	3301      	adds	r3, #1
 8005910:	81fb      	strh	r3, [r7, #14]
 8005912:	89fb      	ldrh	r3, [r7, #14]
 8005914:	2b1f      	cmp	r3, #31
 8005916:	d9c6      	bls.n	80058a6 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <hanWanFontLoad+0x1d0>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d025      	beq.n	800596c <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8005920:	2300      	movs	r3, #0
 8005922:	81fb      	strh	r3, [r7, #14]
 8005924:	e01f      	b.n	8005966 <hanWanFontLoad+0x1ba>
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	4413      	add	r3, r2
 800592c:	7999      	ldrb	r1, [r3, #6]
 800592e:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <hanWanFontLoad+0x1f4>)
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	33f8      	adds	r3, #248	; 0xf8
 800593e:	4a0f      	ldr	r2, [pc, #60]	; (800597c <hanWanFontLoad+0x1d0>)
 8005940:	8812      	ldrh	r2, [r2, #0]
 8005942:	441a      	add	r2, r3
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	4817      	ldr	r0, [pc, #92]	; (80059a4 <hanWanFontLoad+0x1f8>)
 8005948:	0152      	lsls	r2, r2, #5
 800594a:	4413      	add	r3, r2
 800594c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	89fb      	ldrh	r3, [r7, #14]
 8005954:	430a      	orrs	r2, r1
 8005956:	b2d1      	uxtb	r1, r2
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	4413      	add	r3, r2
 800595c:	460a      	mov	r2, r1
 800595e:	719a      	strb	r2, [r3, #6]
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	3301      	adds	r3, #1
 8005964:	81fb      	strh	r3, [r7, #14]
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	2b1f      	cmp	r3, #31
 800596a:	d9dc      	bls.n	8005926 <hanWanFontLoad+0x17a>
  }
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	2000a434 	.word	0x2000a434
 8005978:	2000a436 	.word	0x2000a436
 800597c:	2000a438 	.word	0x2000a438
 8005980:	0800ef7c 	.word	0x0800ef7c
 8005984:	0800ef9c 	.word	0x0800ef9c
 8005988:	0800efbc 	.word	0x0800efbc
 800598c:	0800f054 	.word	0x0800f054
 8005990:	0800f03c 	.word	0x0800f03c
 8005994:	2000a43a 	.word	0x2000a43a
 8005998:	2000a43c 	.word	0x2000a43c
 800599c:	0800f06c 	.word	0x0800f06c
 80059a0:	2000a43e 	.word	0x2000a43e
 80059a4:	08011580 	.word	0x08011580

080059a8 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	031b      	lsls	r3, r3, #12
 80059b8:	b21a      	sxth	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3301      	adds	r3, #1
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	019b      	lsls	r3, r3, #6
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80059c8:	b21b      	sxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b21a      	sxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3302      	adds	r3, #2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059da:	b21b      	sxth	r3, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	b21b      	sxth	r3, r3
 80059e0:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 80059e2:	89bb      	ldrh	r3, [r7, #12]
 80059e4:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80059e8:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 80059ea:	89ba      	ldrh	r2, [r7, #12]
 80059ec:	0893      	lsrs	r3, r2, #2
 80059ee:	4973      	ldr	r1, [pc, #460]	; (8005bbc <hanUniFontLoad+0x214>)
 80059f0:	fba1 3103 	umull	r3, r1, r1, r3
 80059f4:	460b      	mov	r3, r1
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a5b      	subs	r3, r3, r1
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	4b6f      	ldr	r3, [pc, #444]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005a02:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8005a04:	89bb      	ldrh	r3, [r7, #12]
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	4a6c      	ldr	r2, [pc, #432]	; (8005bbc <hanUniFontLoad+0x214>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8005a10:	89b9      	ldrh	r1, [r7, #12]
 8005a12:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <hanUniFontLoad+0x21c>)
 8005a14:	fba3 2301 	umull	r2, r3, r3, r1
 8005a18:	1aca      	subs	r2, r1, r3
 8005a1a:	0852      	lsrs	r2, r2, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	091a      	lsrs	r2, r3, #4
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	00da      	lsls	r2, r3, #3
 8005a28:	1ad2      	subs	r2, r2, r3
 8005a2a:	1a8b      	subs	r3, r1, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005a30:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8005a32:	89ba      	ldrh	r2, [r7, #12]
 8005a34:	4b63      	ldr	r3, [pc, #396]	; (8005bc4 <hanUniFontLoad+0x21c>)
 8005a36:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	0852      	lsrs	r2, r2, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <hanUniFontLoad+0x224>)
 8005a46:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8005a48:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <hanUniFontLoad+0x224>)
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4b60      	ldr	r3, [pc, #384]	; (8005bd0 <hanUniFontLoad+0x228>)
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <hanUniFontLoad+0x224>)
 8005a56:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8005a58:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4b5d      	ldr	r3, [pc, #372]	; (8005bd4 <hanUniFontLoad+0x22c>)
 8005a60:	5c9b      	ldrb	r3, [r3, r2]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005a66:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8005a68:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b5a      	ldr	r3, [pc, #360]	; (8005bd8 <hanUniFontLoad+0x230>)
 8005a70:	5c9b      	ldrb	r3, [r3, r2]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	4b52      	ldr	r3, [pc, #328]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005a76:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8005a78:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <hanUniFontLoad+0xe6>
 8005a80:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b55      	ldr	r3, [pc, #340]	; (8005bdc <hanUniFontLoad+0x234>)
 8005a88:	5c9b      	ldrb	r3, [r3, r2]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	e005      	b.n	8005a9a <hanUniFontLoad+0xf2>
 8005a8e:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	4b52      	ldr	r3, [pc, #328]	; (8005be0 <hanUniFontLoad+0x238>)
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4a52      	ldr	r2, [pc, #328]	; (8005be4 <hanUniFontLoad+0x23c>)
 8005a9c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8005a9e:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <hanUniFontLoad+0x224>)
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <hanUniFontLoad+0x112>
 8005aa6:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <hanUniFontLoad+0x224>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d005      	beq.n	8005aba <hanUniFontLoad+0x112>
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <hanUniFontLoad+0x224>)
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	2b10      	cmp	r3, #16
 8005ab4:	d001      	beq.n	8005aba <hanUniFontLoad+0x112>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <hanUniFontLoad+0x114>
 8005aba:	2300      	movs	r3, #0
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4a40      	ldr	r2, [pc, #256]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005ac0:	8812      	ldrh	r2, [r2, #0]
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	d001      	beq.n	8005aca <hanUniFontLoad+0x122>
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	e000      	b.n	8005acc <hanUniFontLoad+0x124>
 8005aca:	2200      	movs	r2, #0
 8005acc:	4413      	add	r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <hanUniFontLoad+0x240>)
 8005ad2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b44      	ldr	r3, [pc, #272]	; (8005bec <hanUniFontLoad+0x244>)
 8005adc:	5c9b      	ldrb	r3, [r3, r2]
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <hanUniFontLoad+0x248>)
 8005ae2:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	81fb      	strh	r3, [r7, #14]
 8005ae8:	e035      	b.n	8005b56 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8005aea:	4b3e      	ldr	r3, [pc, #248]	; (8005be4 <hanUniFontLoad+0x23c>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b34      	ldr	r3, [pc, #208]	; (8005bcc <hanUniFontLoad+0x224>)
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	441a      	add	r2, r3
 8005b00:	89fb      	ldrh	r3, [r7, #14]
 8005b02:	493c      	ldr	r1, [pc, #240]	; (8005bf4 <hanUniFontLoad+0x24c>)
 8005b04:	0152      	lsls	r2, r2, #5
 8005b06:	4413      	add	r3, r2
 8005b08:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005b0c:	89fb      	ldrh	r3, [r7, #14]
 8005b0e:	b2d1      	uxtb	r1, r2
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	4413      	add	r3, r2
 8005b14:	460a      	mov	r2, r1
 8005b16:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8005b18:	89fb      	ldrh	r3, [r7, #14]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	7999      	ldrb	r1, [r3, #6]
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <hanUniFontLoad+0x240>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	2316      	movs	r3, #22
 8005b28:	fb03 f302 	mul.w	r3, r3, r2
 8005b2c:	33a0      	adds	r3, #160	; 0xa0
 8005b2e:	4a26      	ldr	r2, [pc, #152]	; (8005bc8 <hanUniFontLoad+0x220>)
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	441a      	add	r2, r3
 8005b34:	89fb      	ldrh	r3, [r7, #14]
 8005b36:	482f      	ldr	r0, [pc, #188]	; (8005bf4 <hanUniFontLoad+0x24c>)
 8005b38:	0152      	lsls	r2, r2, #5
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	b2d1      	uxtb	r1, r2
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	3301      	adds	r3, #1
 8005b54:	81fb      	strh	r3, [r7, #14]
 8005b56:	89fb      	ldrh	r3, [r7, #14]
 8005b58:	2b1f      	cmp	r3, #31
 8005b5a:	d9c6      	bls.n	8005aea <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d025      	beq.n	8005bb0 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8005b64:	2300      	movs	r3, #0
 8005b66:	81fb      	strh	r3, [r7, #14]
 8005b68:	e01f      	b.n	8005baa <hanUniFontLoad+0x202>
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	7999      	ldrb	r1, [r3, #6]
 8005b72:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <hanUniFontLoad+0x248>)
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	33f8      	adds	r3, #248	; 0xf8
 8005b82:	4a0f      	ldr	r2, [pc, #60]	; (8005bc0 <hanUniFontLoad+0x218>)
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	441a      	add	r2, r3
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	481a      	ldr	r0, [pc, #104]	; (8005bf4 <hanUniFontLoad+0x24c>)
 8005b8c:	0152      	lsls	r2, r2, #5
 8005b8e:	4413      	add	r3, r2
 8005b90:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	b2d1      	uxtb	r1, r2
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	460a      	mov	r2, r1
 8005ba2:	719a      	strb	r2, [r3, #6]
 8005ba4:	89fb      	ldrh	r3, [r7, #14]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	81fb      	strh	r3, [r7, #14]
 8005baa:	89fb      	ldrh	r3, [r7, #14]
 8005bac:	2b1f      	cmp	r3, #31
 8005bae:	d9dc      	bls.n	8005b6a <hanUniFontLoad+0x1c2>
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	24924925 	.word	0x24924925
 8005bc0:	2000a440 	.word	0x2000a440
 8005bc4:	86186187 	.word	0x86186187
 8005bc8:	2000a442 	.word	0x2000a442
 8005bcc:	2000a444 	.word	0x2000a444
 8005bd0:	0800efdc 	.word	0x0800efdc
 8005bd4:	0800effc 	.word	0x0800effc
 8005bd8:	0800f01c 	.word	0x0800f01c
 8005bdc:	0800f054 	.word	0x0800f054
 8005be0:	0800f03c 	.word	0x0800f03c
 8005be4:	2000a446 	.word	0x2000a446
 8005be8:	2000a448 	.word	0x2000a448
 8005bec:	0800f06c 	.word	0x0800f06c
 8005bf0:	2000a44a 	.word	0x2000a44a
 8005bf4:	08011580 	.word	0x08011580

08005bf8 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8005c08:	7b7b      	ldrb	r3, [r7, #13]
 8005c0a:	3b20      	subs	r3, #32
 8005c0c:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8005c0e:	2300      	movs	r3, #0
 8005c10:	81fb      	strh	r3, [r7, #14]
 8005c12:	e00f      	b.n	8005c34 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8005c14:	7b7a      	ldrb	r2, [r7, #13]
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	490b      	ldr	r1, [pc, #44]	; (8005c48 <hanEngFontLoad+0x50>)
 8005c1a:	0112      	lsls	r2, r2, #4
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005c22:	89fb      	ldrh	r3, [r7, #14]
 8005c24:	b2d1      	uxtb	r1, r2
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	4413      	add	r3, r2
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8005c2e:	89fb      	ldrh	r3, [r7, #14]
 8005c30:	3301      	adds	r3, #1
 8005c32:	81fb      	strh	r3, [r7, #14]
 8005c34:	89fb      	ldrh	r3, [r7, #14]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d9ec      	bls.n	8005c14 <hanEngFontLoad+0x1c>
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	0800d77c 	.word	0x0800d77c

08005c4c <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8005c62:	89fb      	ldrh	r3, [r7, #14]
 8005c64:	3bb0      	subs	r3, #176	; 0xb0
 8005c66:	225e      	movs	r2, #94	; 0x5e
 8005c68:	fb02 f203 	mul.w	r2, r2, r3
 8005c6c:	89bb      	ldrh	r3, [r7, #12]
 8005c6e:	3ba1      	subs	r3, #161	; 0xa1
 8005c70:	4413      	add	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8005c74:	4a05      	ldr	r2, [pc, #20]	; (8005c8c <hanCnvCodeWan2Johab+0x40>)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	0800f0c0 	.word	0x0800f0c0

08005c90 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <TransferDoneISR+0x30>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <TransferDoneISR+0x30>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	2002      	movs	r0, #2
 8005ca8:	f7fc ff68 	bl	8002b7c <gpioPinWrite>

    if (frameCallBack != NULL)
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <TransferDoneISR+0x34>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8005cb4:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <TransferDoneISR+0x34>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4798      	blx	r3
    }
  }
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000a454 	.word	0x2000a454
 8005cc4:	2000a450 	.word	0x2000a450

08005cc8 <st7735Init>:


bool st7735Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8005cce:	f000 f835 	bl	8005d3c <st7735Reset>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]

  return ret;
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <st7735InitDriver+0x40>)
 8005cec:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <st7735InitDriver+0x44>)
 8005cf2:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <st7735InitDriver+0x48>)
 8005cf8:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <st7735InitDriver+0x4c>)
 8005cfe:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a0b      	ldr	r2, [pc, #44]	; (8005d30 <st7735InitDriver+0x50>)
 8005d04:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <st7735InitDriver+0x54>)
 8005d0a:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <st7735InitDriver+0x58>)
 8005d10:	619a      	str	r2, [r3, #24]
  return true;
 8005d12:	2301      	movs	r3, #1
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	08005cc9 	.word	0x08005cc9
 8005d24:	08005d3d 	.word	0x08005d3d
 8005d28:	08006001 	.word	0x08006001
 8005d2c:	08005db5 	.word	0x08005db5
 8005d30:	08005dc5 	.word	0x08005dc5
 8005d34:	08006255 	.word	0x08006255
 8005d38:	08006209 	.word	0x08006209

08005d3c <st7735Reset>:

bool st7735Reset(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8005d42:	4b1a      	ldr	r3, [pc, #104]	; (8005dac <st7735Reset+0x70>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fcca 	bl	80046e0 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <st7735Reset+0x70>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fd20 	bl	8004798 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <st7735Reset+0x70>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	4914      	ldr	r1, [pc, #80]	; (8005db0 <st7735Reset+0x74>)
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fe52 	bl	8004a08 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8005d64:	2100      	movs	r1, #0
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7fc ff08 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	2003      	movs	r0, #3
 8005d70:	f7fc ff04 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8005d74:	2101      	movs	r1, #1
 8005d76:	2002      	movs	r0, #2
 8005d78:	f7fc ff00 	bl	8002b7c <gpioPinWrite>
  delay(10);
 8005d7c:	200a      	movs	r0, #10
 8005d7e:	f7fb fa39 	bl	80011f4 <delay>

  st7735InitRegs();
 8005d82:	f000 f863 	bl	8005e4c <st7735InitRegs>


  st7735SetRotation(1);
 8005d86:	2001      	movs	r0, #1
 8005d88:	f000 f910 	bl	8005fac <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	22a0      	movs	r2, #160	; 0xa0
 8005d94:	2100      	movs	r1, #0
 8005d96:	2000      	movs	r0, #0
 8005d98:	f000 f97e 	bl	8006098 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f7fc feec 	bl	8002b7c <gpioPinWrite>
  return true;
 8005da4:	2301      	movs	r3, #1
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	2000a44c 	.word	0x2000a44c
 8005db0:	08005c91 	.word	0x08005c91

08005db4 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8005db8:	23a0      	movs	r3, #160	; 0xa0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8005dc8:	2380      	movs	r3, #128	; 0x80
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <writecommand>:

void writecommand(uint8_t c)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8005dde:	2100      	movs	r1, #0
 8005de0:	2003      	movs	r0, #3
 8005de2:	f7fc fecb 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005de6:	2100      	movs	r1, #0
 8005de8:	2002      	movs	r0, #2
 8005dea:	f7fc fec7 	bl	8002b7c <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <writecommand+0x38>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	79fa      	ldrb	r2, [r7, #7]
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fd64 	bl	80048c4 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	2002      	movs	r0, #2
 8005e00:	f7fc febc 	bl	8002b7c <gpioPinWrite>
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	2000a44c 	.word	0x2000a44c

08005e10 <writedata>:

void writedata(uint8_t d)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	2003      	movs	r0, #3
 8005e1e:	f7fc fead 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005e22:	2100      	movs	r1, #0
 8005e24:	2002      	movs	r0, #2
 8005e26:	f7fc fea9 	bl	8002b7c <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <writedata+0x38>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fd46 	bl	80048c4 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005e38:	2101      	movs	r1, #1
 8005e3a:	2002      	movs	r0, #2
 8005e3c:	f7fc fe9e 	bl	8002b7c <gpioPinWrite>
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	2000a44c 	.word	0x2000a44c

08005e4c <st7735InitRegs>:

void st7735InitRegs(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8005e50:	2001      	movs	r0, #1
 8005e52:	f7ff ffbf 	bl	8005dd4 <writecommand>
  delay(10);
 8005e56:	200a      	movs	r0, #10
 8005e58:	f7fb f9cc 	bl	80011f4 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8005e5c:	2011      	movs	r0, #17
 8005e5e:	f7ff ffb9 	bl	8005dd4 <writecommand>
  delay(10);
 8005e62:	200a      	movs	r0, #10
 8005e64:	f7fb f9c6 	bl	80011f4 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8005e68:	20b1      	movs	r0, #177	; 0xb1
 8005e6a:	f7ff ffb3 	bl	8005dd4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f7ff ffce 	bl	8005e10 <writedata>
  writedata(0x2C);
 8005e74:	202c      	movs	r0, #44	; 0x2c
 8005e76:	f7ff ffcb 	bl	8005e10 <writedata>
  writedata(0x2D);
 8005e7a:	202d      	movs	r0, #45	; 0x2d
 8005e7c:	f7ff ffc8 	bl	8005e10 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8005e80:	20b2      	movs	r0, #178	; 0xb2
 8005e82:	f7ff ffa7 	bl	8005dd4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8005e86:	2001      	movs	r0, #1
 8005e88:	f7ff ffc2 	bl	8005e10 <writedata>
  writedata(0x2C);
 8005e8c:	202c      	movs	r0, #44	; 0x2c
 8005e8e:	f7ff ffbf 	bl	8005e10 <writedata>
  writedata(0x2D);
 8005e92:	202d      	movs	r0, #45	; 0x2d
 8005e94:	f7ff ffbc 	bl	8005e10 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8005e98:	20b3      	movs	r0, #179	; 0xb3
 8005e9a:	f7ff ff9b 	bl	8005dd4 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f7ff ffb6 	bl	8005e10 <writedata>
  writedata(0x2C);
 8005ea4:	202c      	movs	r0, #44	; 0x2c
 8005ea6:	f7ff ffb3 	bl	8005e10 <writedata>
  writedata(0x2D);
 8005eaa:	202d      	movs	r0, #45	; 0x2d
 8005eac:	f7ff ffb0 	bl	8005e10 <writedata>
  writedata(0x01);              //     Line inversion mode
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7ff ffad 	bl	8005e10 <writedata>
  writedata(0x2C);
 8005eb6:	202c      	movs	r0, #44	; 0x2c
 8005eb8:	f7ff ffaa 	bl	8005e10 <writedata>
  writedata(0x2D);
 8005ebc:	202d      	movs	r0, #45	; 0x2d
 8005ebe:	f7ff ffa7 	bl	8005e10 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8005ec2:	20b4      	movs	r0, #180	; 0xb4
 8005ec4:	f7ff ff86 	bl	8005dd4 <writecommand>
  writedata(0x07);              //     No inversion
 8005ec8:	2007      	movs	r0, #7
 8005eca:	f7ff ffa1 	bl	8005e10 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8005ece:	20c0      	movs	r0, #192	; 0xc0
 8005ed0:	f7ff ff80 	bl	8005dd4 <writecommand>
  writedata(0xA2);
 8005ed4:	20a2      	movs	r0, #162	; 0xa2
 8005ed6:	f7ff ff9b 	bl	8005e10 <writedata>
  writedata(0x02);              //     -4.6V
 8005eda:	2002      	movs	r0, #2
 8005edc:	f7ff ff98 	bl	8005e10 <writedata>
  writedata(0x84);              //     AUTO mode
 8005ee0:	2084      	movs	r0, #132	; 0x84
 8005ee2:	f7ff ff95 	bl	8005e10 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8005ee6:	20c1      	movs	r0, #193	; 0xc1
 8005ee8:	f7ff ff74 	bl	8005dd4 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8005eec:	20c5      	movs	r0, #197	; 0xc5
 8005eee:	f7ff ff8f 	bl	8005e10 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8005ef2:	20c2      	movs	r0, #194	; 0xc2
 8005ef4:	f7ff ff6e 	bl	8005dd4 <writecommand>
  writedata(0x0A);              //     Opamp current small
 8005ef8:	200a      	movs	r0, #10
 8005efa:	f7ff ff89 	bl	8005e10 <writedata>
  writedata(0x00);              //     Boost frequency
 8005efe:	2000      	movs	r0, #0
 8005f00:	f7ff ff86 	bl	8005e10 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8005f04:	20c3      	movs	r0, #195	; 0xc3
 8005f06:	f7ff ff65 	bl	8005dd4 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 8005f0a:	208a      	movs	r0, #138	; 0x8a
 8005f0c:	f7ff ff80 	bl	8005e10 <writedata>
  writedata(0x2A);
 8005f10:	202a      	movs	r0, #42	; 0x2a
 8005f12:	f7ff ff7d 	bl	8005e10 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8005f16:	20c4      	movs	r0, #196	; 0xc4
 8005f18:	f7ff ff5c 	bl	8005dd4 <writecommand>
  writedata(0x8A);
 8005f1c:	208a      	movs	r0, #138	; 0x8a
 8005f1e:	f7ff ff77 	bl	8005e10 <writedata>
  writedata(0xEE);
 8005f22:	20ee      	movs	r0, #238	; 0xee
 8005f24:	f7ff ff74 	bl	8005e10 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8005f28:	20c5      	movs	r0, #197	; 0xc5
 8005f2a:	f7ff ff53 	bl	8005dd4 <writecommand>
  writedata(0x0E);
 8005f2e:	200e      	movs	r0, #14
 8005f30:	f7ff ff6e 	bl	8005e10 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8005f34:	2020      	movs	r0, #32
 8005f36:	f7ff ff4d 	bl	8005dd4 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8005f3a:	2036      	movs	r0, #54	; 0x36
 8005f3c:	f7ff ff4a 	bl	8005dd4 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8005f40:	20c8      	movs	r0, #200	; 0xc8
 8005f42:	f7ff ff65 	bl	8005e10 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8005f46:	203a      	movs	r0, #58	; 0x3a
 8005f48:	f7ff ff44 	bl	8005dd4 <writecommand>
  writedata(0x05);              //     16-bit color
 8005f4c:	2005      	movs	r0, #5
 8005f4e:	f7ff ff5f 	bl	8005e10 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8005f52:	202a      	movs	r0, #42	; 0x2a
 8005f54:	f7ff ff3e 	bl	8005dd4 <writecommand>
  writedata(0x00);
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f7ff ff59 	bl	8005e10 <writedata>
  writedata(0x00);              //     XSTART = 0
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f7ff ff56 	bl	8005e10 <writedata>
  writedata(0x00);
 8005f64:	2000      	movs	r0, #0
 8005f66:	f7ff ff53 	bl	8005e10 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8005f6a:	209f      	movs	r0, #159	; 0x9f
 8005f6c:	f7ff ff50 	bl	8005e10 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8005f70:	202b      	movs	r0, #43	; 0x2b
 8005f72:	f7ff ff2f 	bl	8005dd4 <writecommand>
  writedata(0x00);
 8005f76:	2000      	movs	r0, #0
 8005f78:	f7ff ff4a 	bl	8005e10 <writedata>
  writedata(0x00);              //     XSTART = 0
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f7ff ff47 	bl	8005e10 <writedata>
  writedata(0x00);
 8005f82:	2000      	movs	r0, #0
 8005f84:	f7ff ff44 	bl	8005e10 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8005f88:	207f      	movs	r0, #127	; 0x7f
 8005f8a:	f7ff ff41 	bl	8005e10 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8005f8e:	2013      	movs	r0, #19
 8005f90:	f7ff ff20 	bl	8005dd4 <writecommand>
  delay(10);
 8005f94:	200a      	movs	r0, #10
 8005f96:	f7fb f92d 	bl	80011f4 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8005f9a:	2029      	movs	r0, #41	; 0x29
 8005f9c:	f7ff ff1a 	bl	8005dd4 <writecommand>
  delay(10);
 8005fa0:	200a      	movs	r0, #10
 8005fa2:	f7fb f927 	bl	80011f4 <delay>
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8005fb6:	2036      	movs	r0, #54	; 0x36
 8005fb8:	f7ff ff0c 	bl	8005dd4 <writecommand>

  switch (mode)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d81a      	bhi.n	8005ff8 <st7735SetRotation+0x4c>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <st7735SetRotation+0x1c>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fd9 	.word	0x08005fd9
 8005fcc:	08005fe1 	.word	0x08005fe1
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff1 	.word	0x08005ff1
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8005fd8:	20c8      	movs	r0, #200	; 0xc8
 8005fda:	f7ff ff19 	bl	8005e10 <writedata>
     break;
 8005fde:	e00b      	b.n	8005ff8 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8005fe0:	20a8      	movs	r0, #168	; 0xa8
 8005fe2:	f7ff ff15 	bl	8005e10 <writedata>
     break;
 8005fe6:	e007      	b.n	8005ff8 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8005fe8:	2008      	movs	r0, #8
 8005fea:	f7ff ff11 	bl	8005e10 <writedata>
    break;
 8005fee:	e003      	b.n	8005ff8 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8005ff0:	2068      	movs	r0, #104	; 0x68
 8005ff2:	f7ff ff0d 	bl	8005e10 <writedata>
     break;
 8005ff6:	bf00      	nop
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 800600e:	4b21      	ldr	r3, [pc, #132]	; (8006094 <st7735SetWindow+0x94>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2108      	movs	r1, #8
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fc25 	bl	8004864 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 800601a:	202a      	movs	r0, #42	; 0x2a
 800601c:	f7ff feda 	bl	8005dd4 <writecommand>
  writedata(0x00);
 8006020:	2000      	movs	r0, #0
 8006022:	f7ff fef5 	bl	8005e10 <writedata>
  writedata(x0+colstart);     // XSTART
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	2300      	movs	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	4413      	add	r3, r2
 8006030:	b2db      	uxtb	r3, r3
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff feec 	bl	8005e10 <writedata>
  writedata(0x00);
 8006038:	2000      	movs	r0, #0
 800603a:	f7ff fee9 	bl	8005e10 <writedata>
  writedata(x1+colstart);     // XEND
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4413      	add	r3, r2
 8006048:	b2db      	uxtb	r3, r3
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff fee0 	bl	8005e10 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8006050:	202b      	movs	r0, #43	; 0x2b
 8006052:	f7ff febf 	bl	8005dd4 <writecommand>
  writedata(0x00);
 8006056:	2000      	movs	r0, #0
 8006058:	f7ff feda 	bl	8005e10 <writedata>
  writedata(y0+rowstart);     // YSTART
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	2300      	movs	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4413      	add	r3, r2
 8006066:	b2db      	uxtb	r3, r3
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fed1 	bl	8005e10 <writedata>
  writedata(0x00);
 800606e:	2000      	movs	r0, #0
 8006070:	f7ff fece 	bl	8005e10 <writedata>
  writedata(y1+rowstart);     // YEND
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	2300      	movs	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4413      	add	r3, r2
 800607e:	b2db      	uxtb	r3, r3
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fec5 	bl	8005e10 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8006086:	202c      	movs	r0, #44	; 0x2c
 8006088:	f7ff fea4 	bl	8005dd4 <writecommand>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2000a44c 	.word	0x2000a44c

08006098 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8006098:	b5b0      	push	{r4, r5, r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	466b      	mov	r3, sp
 80060a8:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	1e43      	subs	r3, r0, #1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	4603      	mov	r3, r0
 80060b2:	4619      	mov	r1, r3
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	f04f 0400 	mov.w	r4, #0
 80060c0:	0114      	lsls	r4, r2, #4
 80060c2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80060c6:	010b      	lsls	r3, r1, #4
 80060c8:	4603      	mov	r3, r0
 80060ca:	4619      	mov	r1, r3
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	f04f 0400 	mov.w	r4, #0
 80060d8:	0114      	lsls	r4, r2, #4
 80060da:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80060de:	010b      	lsls	r3, r1, #4
 80060e0:	4603      	mov	r3, r0
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	3301      	adds	r3, #1
 80060e6:	3307      	adds	r3, #7
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	ebad 0d03 	sub.w	sp, sp, r3
 80060f0:	466b      	mov	r3, sp
 80060f2:	3301      	adds	r3, #1
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80060fa:	22a0      	movs	r2, #160	; 0xa0
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4293      	cmp	r3, r2
 8006100:	da78      	bge.n	80061f4 <st7735FillRect+0x15c>
 8006102:	2280      	movs	r2, #128	; 0x80
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4293      	cmp	r3, r2
 8006108:	da74      	bge.n	80061f4 <st7735FillRect+0x15c>

  if (x < 0) { w += x; x = 0; }
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	da05      	bge.n	800611c <st7735FillRect+0x84>
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da05      	bge.n	800612e <st7735FillRect+0x96>
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4413      	add	r3, r2
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	22a0      	movs	r2, #160	; 0xa0
 8006136:	4293      	cmp	r3, r2
 8006138:	dd03      	ble.n	8006142 <st7735FillRect+0xaa>
 800613a:	22a0      	movs	r2, #160	; 0xa0
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4413      	add	r3, r2
 8006148:	2280      	movs	r2, #128	; 0x80
 800614a:	4293      	cmp	r3, r2
 800614c:	dd03      	ble.n	8006156 <st7735FillRect+0xbe>
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dd4d      	ble.n	80061f8 <st7735FillRect+0x160>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd4a      	ble.n	80061f8 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	1e59      	subs	r1, r3, #1
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	4413      	add	r3, r2
 8006170:	3b01      	subs	r3, #1
 8006172:	460a      	mov	r2, r1
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff42 	bl	8006000 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 800617c:	4b21      	ldr	r3, [pc, #132]	; (8006204 <st7735FillRect+0x16c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2110      	movs	r1, #16
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fb6e 	bl	8004864 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006188:	2101      	movs	r1, #1
 800618a:	2003      	movs	r0, #3
 800618c:	f7fc fcf6 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006190:	2100      	movs	r1, #0
 8006192:	2002      	movs	r0, #2
 8006194:	f7fc fcf2 	bl	8002b7c <gpioPinWrite>

  for (int i=0; i<w; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e008      	b.n	80061b0 <st7735FillRect+0x118>
  {
    line_buf[i] = color;
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	b299      	uxth	r1, r3
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3301      	adds	r3, #1
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	dbf2      	blt.n	800619e <st7735FillRect+0x106>
  }
  for (int i=0; i<h; i++)
 80061b8:	2300      	movs	r3, #0
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	e00e      	b.n	80061dc <st7735FillRect+0x144>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 80061be:	6939      	ldr	r1, [r7, #16]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	230a      	movs	r3, #10
 80061c4:	2000      	movs	r0, #0
 80061c6:	f7fe fbcf 	bl	8004968 <spiDmaTxTransfer>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f083 0301 	eor.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <st7735FillRect+0x14e>
  for (int i=0; i<h; i++)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	3301      	adds	r3, #1
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	dbec      	blt.n	80061be <st7735FillRect+0x126>
 80061e4:	e000      	b.n	80061e8 <st7735FillRect+0x150>
    {
      break;
 80061e6:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80061e8:	2101      	movs	r1, #1
 80061ea:	2002      	movs	r0, #2
 80061ec:	f7fc fcc6 	bl	8002b7c <gpioPinWrite>
 80061f0:	46ad      	mov	sp, r5
 80061f2:	e003      	b.n	80061fc <st7735FillRect+0x164>
  if ((x >= _width) || (y >= _height)) return;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <st7735FillRect+0x162>
  if ((w < 1) || (h < 1)) return;
 80061f8:	bf00      	nop
 80061fa:	46ad      	mov	sp, r5
}
 80061fc:	3720      	adds	r7, #32
 80061fe:	46bd      	mov	sp, r7
 8006200:	bdb0      	pop	{r4, r5, r7, pc}
 8006202:	bf00      	nop
 8006204:	2000a44c 	.word	0x2000a44c

08006208 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8006214:	4b0d      	ldr	r3, [pc, #52]	; (800624c <st7735SendBuffer+0x44>)
 8006216:	2201      	movs	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <st7735SendBuffer+0x48>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2110      	movs	r1, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fb1f 	bl	8004864 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006226:	2101      	movs	r1, #1
 8006228:	2003      	movs	r0, #3
 800622a:	f7fc fca7 	bl	8002b7c <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800622e:	2100      	movs	r1, #0
 8006230:	2002      	movs	r0, #2
 8006232:	f7fc fca3 	bl	8002b7c <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8006236:	2300      	movs	r3, #0
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	2000      	movs	r0, #0
 800623e:	f7fe fb93 	bl	8004968 <spiDmaTxTransfer>
  return true;
 8006242:	2301      	movs	r3, #1
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	2000a454 	.word	0x2000a454
 8006250:	2000a44c 	.word	0x2000a44c

08006254 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <st7735SetCallBack+0x1c>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]

  return true;
 8006262:	2301      	movs	r3, #1
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	2000a450 	.word	0x2000a450

08006274 <hwInit>:




void hwInit(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  bspInit();
 8006278:	f7fa ff92 	bl	80011a0 <bspInit>

  cliInit();
 800627c:	f7fb faf8 	bl	8001870 <cliInit>
  ledInit();
 8006280:	f7fd fc5a 	bl	8003b38 <ledInit>
  uartInit();
 8006284:	f7fe ff14 	bl	80050b0 <uartInit>
  spiInit();
 8006288:	f7fe f9d8 	bl	800463c <spiInit>
  DWT_Delay_Init();
 800628c:	f7fb f9b8 	bl	8001600 <DWT_Delay_Init>
  buttonInit();
 8006290:	f7fb f9e6 	bl	8001660 <buttonInit>
  gpioInit();
 8006294:	f7fc fba8 	bl	80029e8 <gpioInit>
  Ds18b20_Init();
 8006298:	f7fc fa32 	bl	8002700 <Ds18b20_Init>
  sonarInit();
 800629c:	f7fd fff8 	bl	8004290 <sonarInit>

  //LCD_INIT();
  lcdInit();
 80062a0:	f7fc fdd0 	bl	8002e44 <lcdInit>
  tdsInit();
 80062a4:	f7fe fcc6 	bl	8004c34 <tdsInit>
}
 80062a8:	bf00      	nop
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <HAL_Init+0x40>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <HAL_Init+0x40>)
 80062b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_Init+0x40>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <HAL_Init+0x40>)
 80062c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062c8:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_Init+0x40>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a07      	ldr	r2, [pc, #28]	; (80062ec <HAL_Init+0x40>)
 80062ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062d4:	2003      	movs	r0, #3
 80062d6:	f000 fea9 	bl	800702c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062da:	2000      	movs	r0, #0
 80062dc:	f000 f808 	bl	80062f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062e0:	f7fb f806 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40023c00 	.word	0x40023c00

080062f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_InitTick+0x54>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <HAL_InitTick+0x58>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006306:	fbb3 f3f1 	udiv	r3, r3, r1
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fecf 	bl	80070b2 <HAL_SYSTICK_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e00e      	b.n	800633c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d80a      	bhi.n	800633a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006324:	2200      	movs	r2, #0
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	f000 fe89 	bl	8007042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006330:	4a06      	ldr	r2, [pc, #24]	; (800634c <HAL_InitTick+0x5c>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	e000      	b.n	800633c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000000 	.word	0x20000000
 8006348:	2000005c 	.word	0x2000005c
 800634c:	20000058 	.word	0x20000058

08006350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006354:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_IncTick+0x20>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_IncTick+0x24>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4413      	add	r3, r2
 8006360:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_IncTick+0x24>)
 8006362:	6013      	str	r3, [r2, #0]
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	2000005c 	.word	0x2000005c
 8006374:	2000aba8 	.word	0x2000aba8

08006378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006378:	b480      	push	{r7}
 800637a:	af00      	add	r7, sp, #0
  return uwTick;
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <HAL_GetTick+0x14>)
 800637e:	681b      	ldr	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	2000aba8 	.word	0x2000aba8

08006390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006398:	f7ff ffee 	bl	8006378 <HAL_GetTick>
 800639c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d005      	beq.n	80063b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_Delay+0x40>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063b6:	bf00      	nop
 80063b8:	f7ff ffde 	bl	8006378 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d8f7      	bhi.n	80063b8 <HAL_Delay+0x28>
  {
  }
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	2000005c 	.word	0x2000005c

080063d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e033      	b.n	8006452 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fe fdc6 	bl	8004f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b00      	cmp	r3, #0
 8006410:	d118      	bne.n	8006444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800641a:	f023 0302 	bic.w	r3, r3, #2
 800641e:	f043 0202 	orr.w	r2, r3, #2
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb86 	bl	8006b38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	f043 0201 	orr.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
 8006442:	e001      	b.n	8006448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	bf0c      	ite	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	2300      	movne	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d049      	beq.n	8006530 <HAL_ADC_IRQHandler+0xd6>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d046      	beq.n	8006530 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d12b      	bne.n	8006520 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d127      	bne.n	8006520 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d119      	bne.n	8006520 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0220 	bic.w	r2, r2, #32
 80064fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f043 0201 	orr.w	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f9af 	bl	8006884 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f06f 0212 	mvn.w	r2, #18
 800652e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b04      	cmp	r3, #4
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	bf0c      	ite	eq
 8006554:	2301      	moveq	r3, #1
 8006556:	2300      	movne	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d057      	beq.n	8006612 <HAL_ADC_IRQHandler+0x1b8>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d054      	beq.n	8006612 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d139      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006598:	2b00      	cmp	r3, #0
 800659a:	d006      	beq.n	80065aa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d12b      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d124      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11d      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d119      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fc16 	bl	8006e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 020c 	mvn.w	r2, #12
 8006610:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_ADC_IRQHandler+0x21a>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10d      	bne.n	8006674 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f921 	bl	80068ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f06f 0201 	mvn.w	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006694:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006698:	bf0c      	ite	eq
 800669a:	2301      	moveq	r3, #1
 800669c:	2300      	movne	r3, #0
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d015      	beq.n	80066d4 <HAL_ADC_IRQHandler+0x27a>
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d012      	beq.n	80066d4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f043 0202 	orr.w	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f06f 0220 	mvn.w	r2, #32
 80066c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8fb 	bl	80068c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f06f 0220 	mvn.w	r2, #32
 80066d2:	601a      	str	r2, [r3, #0]
  }
}
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_ADC_Start_DMA+0x1e>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e0b1      	b.n	800685e <HAL_ADC_Start_DMA+0x182>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d018      	beq.n	8006742 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006720:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_ADC_Start_DMA+0x18c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a51      	ldr	r2, [pc, #324]	; (800686c <HAL_ADC_Start_DMA+0x190>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	0c9a      	lsrs	r2, r3, #18
 800672c:	4613      	mov	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	4413      	add	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006734:	e002      	b.n	800673c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3b01      	subs	r3, #1
 800673a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f9      	bne.n	8006736 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	f040 8085 	bne.w	800685c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800677c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d106      	bne.n	80067a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	f023 0206 	bic.w	r2, r3, #6
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	645a      	str	r2, [r3, #68]	; 0x44
 800679e:	e002      	b.n	80067a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067ae:	4b30      	ldr	r3, [pc, #192]	; (8006870 <HAL_ADC_Start_DMA+0x194>)
 80067b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <HAL_ADC_Start_DMA+0x198>)
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4a2e      	ldr	r2, [pc, #184]	; (8006878 <HAL_ADC_Start_DMA+0x19c>)
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	4a2d      	ldr	r2, [pc, #180]	; (800687c <HAL_ADC_Start_DMA+0x1a0>)
 80067c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80067d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80067e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	334c      	adds	r3, #76	; 0x4c
 80067fe:	4619      	mov	r1, r3
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f000 fd6e 	bl	80072e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d11c      	bne.n	800685c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	e013      	b.n	800685c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a11      	ldr	r2, [pc, #68]	; (8006880 <HAL_ADC_Start_DMA+0x1a4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10e      	bne.n	800685c <HAL_ADC_Start_DMA+0x180>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800685a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000000 	.word	0x20000000
 800686c:	431bde83 	.word	0x431bde83
 8006870:	40012300 	.word	0x40012300
 8006874:	08006d31 	.word	0x08006d31
 8006878:	08006deb 	.word	0x08006deb
 800687c:	08006e07 	.word	0x08006e07
 8006880:	40012000 	.word	0x40012000

08006884 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e113      	b.n	8006b18 <HAL_ADC_ConfigChannel+0x244>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b09      	cmp	r3, #9
 80068fe:	d925      	bls.n	800694c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68d9      	ldr	r1, [r3, #12]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	3b1e      	subs	r3, #30
 8006916:	2207      	movs	r2, #7
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43da      	mvns	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	400a      	ands	r2, r1
 8006924:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68d9      	ldr	r1, [r3, #12]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	4618      	mov	r0, r3
 8006938:	4603      	mov	r3, r0
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	4403      	add	r3, r0
 800693e:	3b1e      	subs	r3, #30
 8006940:	409a      	lsls	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e022      	b.n	8006992 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6919      	ldr	r1, [r3, #16]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	2207      	movs	r2, #7
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	43da      	mvns	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	400a      	ands	r2, r1
 800696e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6919      	ldr	r1, [r3, #16]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	4618      	mov	r0, r3
 8006982:	4603      	mov	r3, r0
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4403      	add	r3, r0
 8006988:	409a      	lsls	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d824      	bhi.n	80069e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	3b05      	subs	r3, #5
 80069ac:	221f      	movs	r2, #31
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43da      	mvns	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	400a      	ands	r2, r1
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	4618      	mov	r0, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	3b05      	subs	r3, #5
 80069d6:	fa00 f203 	lsl.w	r2, r0, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	635a      	str	r2, [r3, #52]	; 0x34
 80069e2:	e04c      	b.n	8006a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d824      	bhi.n	8006a36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	3b23      	subs	r3, #35	; 0x23
 80069fe:	221f      	movs	r2, #31
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43da      	mvns	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	400a      	ands	r2, r1
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	3b23      	subs	r3, #35	; 0x23
 8006a28:	fa00 f203 	lsl.w	r2, r0, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
 8006a34:	e023      	b.n	8006a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	3b41      	subs	r3, #65	; 0x41
 8006a48:	221f      	movs	r2, #31
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43da      	mvns	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	400a      	ands	r2, r1
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	4618      	mov	r0, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	3b41      	subs	r3, #65	; 0x41
 8006a72:	fa00 f203 	lsl.w	r2, r0, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <HAL_ADC_ConfigChannel+0x250>)
 8006a80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <HAL_ADC_ConfigChannel+0x254>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d10f      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x1d8>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b12      	cmp	r3, #18
 8006a92:	d10b      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <HAL_ADC_ConfigChannel+0x254>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12b      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x23a>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_ADC_ConfigChannel+0x258>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <HAL_ADC_ConfigChannel+0x1f4>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b11      	cmp	r3, #17
 8006ac6:	d122      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a11      	ldr	r2, [pc, #68]	; (8006b2c <HAL_ADC_ConfigChannel+0x258>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d111      	bne.n	8006b0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_ADC_ConfigChannel+0x25c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a11      	ldr	r2, [pc, #68]	; (8006b34 <HAL_ADC_ConfigChannel+0x260>)
 8006af0:	fba2 2303 	umull	r2, r3, r2, r3
 8006af4:	0c9a      	lsrs	r2, r3, #18
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b00:	e002      	b.n	8006b08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f9      	bne.n	8006b02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	40012300 	.word	0x40012300
 8006b28:	40012000 	.word	0x40012000
 8006b2c:	10000012 	.word	0x10000012
 8006b30:	20000000 	.word	0x20000000
 8006b34:	431bde83 	.word	0x431bde83

08006b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b40:	4b79      	ldr	r3, [pc, #484]	; (8006d28 <ADC_Init+0x1f0>)
 8006b42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	021a      	lsls	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6859      	ldr	r1, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6899      	ldr	r1, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <ADC_Init+0x1f4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6899      	ldr	r1, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	e00f      	b.n	8006c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0202 	bic.w	r2, r2, #2
 8006c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6899      	ldr	r1, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	7e1b      	ldrb	r3, [r3, #24]
 8006c50:	005a      	lsls	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	035a      	lsls	r2, r3, #13
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	e007      	b.n	8006cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	051a      	lsls	r2, r3, #20
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6899      	ldr	r1, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cee:	025a      	lsls	r2, r3, #9
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6899      	ldr	r1, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	029a      	lsls	r2, r3, #10
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40012300 	.word	0x40012300
 8006d2c:	0f000001 	.word	0x0f000001

08006d30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d13c      	bne.n	8006dc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d12b      	bne.n	8006dbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d127      	bne.n	8006dbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d119      	bne.n	8006dbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0220 	bic.w	r2, r2, #32
 8006d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f043 0201 	orr.w	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff fd61 	bl	8006884 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dc2:	e00e      	b.n	8006de2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fd75 	bl	80068c0 <HAL_ADC_ErrorCallback>
}
 8006dd6:	e004      	b.n	8006de2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff fd4d 	bl	8006898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2240      	movs	r2, #64	; 0x40
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff fd4a 	bl	80068c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e64:	4013      	ands	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <__NVIC_SetPriorityGrouping+0x44>)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	60d3      	str	r3, [r2, #12]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	f003 0307 	and.w	r3, r3, #7
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	e000ed00 	.word	0xe000ed00

08006eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	db0b      	blt.n	8006ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	4907      	ldr	r1, [pc, #28]	; (8006ee4 <__NVIC_EnableIRQ+0x38>)
 8006ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eca:	095b      	lsrs	r3, r3, #5
 8006ecc:	2001      	movs	r0, #1
 8006ece:	fa00 f202 	lsl.w	r2, r0, r2
 8006ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	e000e100 	.word	0xe000e100

08006ee8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	db10      	blt.n	8006f1c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	f003 021f 	and.w	r2, r3, #31
 8006f00:	4909      	ldr	r1, [pc, #36]	; (8006f28 <__NVIC_DisableIRQ+0x40>)
 8006f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2001      	movs	r0, #1
 8006f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f0e:	3320      	adds	r3, #32
 8006f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006f14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f18:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	e000e100 	.word	0xe000e100

08006f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db0a      	blt.n	8006f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	490c      	ldr	r1, [pc, #48]	; (8006f78 <__NVIC_SetPriority+0x4c>)
 8006f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4a:	0112      	lsls	r2, r2, #4
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	440b      	add	r3, r1
 8006f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f54:	e00a      	b.n	8006f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	4908      	ldr	r1, [pc, #32]	; (8006f7c <__NVIC_SetPriority+0x50>)
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	3b04      	subs	r3, #4
 8006f64:	0112      	lsls	r2, r2, #4
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	440b      	add	r3, r1
 8006f6a:	761a      	strb	r2, [r3, #24]
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	e000e100 	.word	0xe000e100
 8006f7c:	e000ed00 	.word	0xe000ed00

08006f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b089      	sub	sp, #36	; 0x24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f1c3 0307 	rsb	r3, r3, #7
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	bf28      	it	cs
 8006f9e:	2304      	movcs	r3, #4
 8006fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2b06      	cmp	r3, #6
 8006fa8:	d902      	bls.n	8006fb0 <NVIC_EncodePriority+0x30>
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3b03      	subs	r3, #3
 8006fae:	e000      	b.n	8006fb2 <NVIC_EncodePriority+0x32>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	43da      	mvns	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd2:	43d9      	mvns	r1, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fd8:	4313      	orrs	r3, r2
         );
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3724      	adds	r7, #36	; 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ff8:	d301      	bcc.n	8006ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e00f      	b.n	800701e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ffe:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <SysTick_Config+0x40>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3b01      	subs	r3, #1
 8007004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007006:	210f      	movs	r1, #15
 8007008:	f04f 30ff 	mov.w	r0, #4294967295
 800700c:	f7ff ff8e 	bl	8006f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <SysTick_Config+0x40>)
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007016:	4b04      	ldr	r3, [pc, #16]	; (8007028 <SysTick_Config+0x40>)
 8007018:	2207      	movs	r2, #7
 800701a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	e000e010 	.word	0xe000e010

0800702c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff07 	bl	8006e48 <__NVIC_SetPriorityGrouping>
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	4603      	mov	r3, r0
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007054:	f7ff ff1c 	bl	8006e90 <__NVIC_GetPriorityGrouping>
 8007058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	6978      	ldr	r0, [r7, #20]
 8007060:	f7ff ff8e 	bl	8006f80 <NVIC_EncodePriority>
 8007064:	4602      	mov	r2, r0
 8007066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff5d 	bl	8006f2c <__NVIC_SetPriority>
}
 8007072:	bf00      	nop
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	4603      	mov	r3, r0
 8007082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ff0f 	bl	8006eac <__NVIC_EnableIRQ>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	4603      	mov	r3, r0
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80070a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ff1f 	bl	8006ee8 <__NVIC_DisableIRQ>
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ff94 	bl	8006fe8 <SysTick_Config>
 80070c0:	4603      	mov	r3, r0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070d8:	f7ff f94e 	bl	8006378 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e099      	b.n	800721c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0201 	bic.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007108:	e00f      	b.n	800712a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800710a:	f7ff f935 	bl	8006378 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	2b05      	cmp	r3, #5
 8007116:	d908      	bls.n	800712a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2203      	movs	r2, #3
 8007122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e078      	b.n	800721c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e8      	bne.n	800710a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4b38      	ldr	r3, [pc, #224]	; (8007224 <HAL_DMA_Init+0x158>)
 8007144:	4013      	ands	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800716e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b04      	cmp	r3, #4
 8007182:	d107      	bne.n	8007194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	4313      	orrs	r3, r2
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d117      	bne.n	80071ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 faef 	bl	80077b4 <DMA_CheckFifoParam>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2240      	movs	r2, #64	; 0x40
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80071ea:	2301      	movs	r3, #1
 80071ec:	e016      	b.n	800721c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 faa6 	bl	8007748 <DMA_CalcBaseAndBitshift>
 80071fc:	4603      	mov	r3, r0
 80071fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	223f      	movs	r2, #63	; 0x3f
 8007206:	409a      	lsls	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	f010803f 	.word	0xf010803f

08007228 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e050      	b.n	80072dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d101      	bne.n	800724a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007246:	2302      	movs	r3, #2
 8007248:	e048      	b.n	80072dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2221      	movs	r2, #33	; 0x21
 8007288:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa5c 	bl	8007748 <DMA_CalcBaseAndBitshift>
 8007290:	4603      	mov	r3, r0
 8007292:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	223f      	movs	r2, #63	; 0x3f
 80072be:	409a      	lsls	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007302:	2b01      	cmp	r3, #1
 8007304:	d101      	bne.n	800730a <HAL_DMA_Start_IT+0x26>
 8007306:	2302      	movs	r3, #2
 8007308:	e040      	b.n	800738c <HAL_DMA_Start_IT+0xa8>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d12f      	bne.n	800737e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f9da 	bl	80076ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733c:	223f      	movs	r2, #63	; 0x3f
 800733e:	409a      	lsls	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0216 	orr.w	r2, r2, #22
 8007352:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e005      	b.n	800738a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007386:	2302      	movs	r3, #2
 8007388:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d004      	beq.n	80073b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2280      	movs	r2, #128	; 0x80
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e00c      	b.n	80073cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2205      	movs	r2, #5
 80073b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073e4:	4b92      	ldr	r3, [pc, #584]	; (8007630 <HAL_DMA_IRQHandler+0x258>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a92      	ldr	r2, [pc, #584]	; (8007634 <HAL_DMA_IRQHandler+0x25c>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	0a9b      	lsrs	r3, r3, #10
 80073f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	2208      	movs	r2, #8
 8007404:	409a      	lsls	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01a      	beq.n	8007444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d013      	beq.n	8007444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0204 	bic.w	r2, r2, #4
 800742a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007430:	2208      	movs	r2, #8
 8007432:	409a      	lsls	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743c:	f043 0201 	orr.w	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4013      	ands	r3, r2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d012      	beq.n	800747a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	2201      	movs	r2, #1
 8007468:	409a      	lsls	r2, r3
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007472:	f043 0202 	orr.w	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	2204      	movs	r2, #4
 8007480:	409a      	lsls	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4013      	ands	r3, r2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d012      	beq.n	80074b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749c:	2204      	movs	r2, #4
 800749e:	409a      	lsls	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	f043 0204 	orr.w	r2, r3, #4
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	2210      	movs	r2, #16
 80074b6:	409a      	lsls	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4013      	ands	r3, r2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d043      	beq.n	8007548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03c      	beq.n	8007548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d2:	2210      	movs	r2, #16
 80074d4:	409a      	lsls	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d018      	beq.n	800751a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d024      	beq.n	8007548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
 8007506:	e01f      	b.n	8007548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01b      	beq.n	8007548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
 8007518:	e016      	b.n	8007548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007524:	2b00      	cmp	r3, #0
 8007526:	d107      	bne.n	8007538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0208 	bic.w	r2, r2, #8
 8007536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	2220      	movs	r2, #32
 800754e:	409a      	lsls	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 808e 	beq.w	8007676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0310 	and.w	r3, r3, #16
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 8086 	beq.w	8007676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	2220      	movs	r2, #32
 8007570:	409a      	lsls	r2, r3
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b05      	cmp	r3, #5
 8007580:	d136      	bne.n	80075f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0216 	bic.w	r2, r2, #22
 8007590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_DMA_IRQHandler+0x1da>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0208 	bic.w	r2, r2, #8
 80075c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c6:	223f      	movs	r2, #63	; 0x3f
 80075c8:	409a      	lsls	r2, r3
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d07d      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
        }
        return;
 80075ee:	e078      	b.n	80076e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01c      	beq.n	8007638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007610:	2b00      	cmp	r3, #0
 8007612:	d030      	beq.n	8007676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
 800761c:	e02b      	b.n	8007676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d027      	beq.n	8007676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
 800762e:	e022      	b.n	8007676 <HAL_DMA_IRQHandler+0x29e>
 8007630:	20000000 	.word	0x20000000
 8007634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10f      	bne.n	8007666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0210 	bic.w	r2, r2, #16
 8007654:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	2b00      	cmp	r3, #0
 800767c:	d032      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d022      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2205      	movs	r2, #5
 800768e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3301      	adds	r3, #1
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d307      	bcc.n	80076be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f2      	bne.n	80076a2 <HAL_DMA_IRQHandler+0x2ca>
 80076bc:	e000      	b.n	80076c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80076be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	e000      	b.n	80076e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80076e2:	bf00      	nop
    }
  }
}
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop

080076ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d108      	bne.n	800772c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800772a:	e007      	b.n	800773c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	3b10      	subs	r3, #16
 8007758:	4a14      	ldr	r2, [pc, #80]	; (80077ac <DMA_CalcBaseAndBitshift+0x64>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007762:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <DMA_CalcBaseAndBitshift+0x68>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b03      	cmp	r3, #3
 8007774:	d909      	bls.n	800778a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	659a      	str	r2, [r3, #88]	; 0x58
 8007788:	e007      	b.n	800779a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	aaaaaaab 	.word	0xaaaaaaab
 80077b0:	08019794 	.word	0x08019794

080077b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d11f      	bne.n	800780e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d855      	bhi.n	8007880 <DMA_CheckFifoParam+0xcc>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <DMA_CheckFifoParam+0x28>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077ff 	.word	0x080077ff
 80077e4:	080077ed 	.word	0x080077ed
 80077e8:	08007881 	.word	0x08007881
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d045      	beq.n	8007884 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077fc:	e042      	b.n	8007884 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007806:	d13f      	bne.n	8007888 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800780c:	e03c      	b.n	8007888 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007816:	d121      	bne.n	800785c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d836      	bhi.n	800788c <DMA_CheckFifoParam+0xd8>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <DMA_CheckFifoParam+0x70>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007835 	.word	0x08007835
 8007828:	0800783b 	.word	0x0800783b
 800782c:	08007835 	.word	0x08007835
 8007830:	0800784d 	.word	0x0800784d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
      break;
 8007838:	e02f      	b.n	800789a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d024      	beq.n	8007890 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800784a:	e021      	b.n	8007890 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007854:	d11e      	bne.n	8007894 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800785a:	e01b      	b.n	8007894 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d902      	bls.n	8007868 <DMA_CheckFifoParam+0xb4>
 8007862:	2b03      	cmp	r3, #3
 8007864:	d003      	beq.n	800786e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007866:	e018      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
      break;
 800786c:	e015      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	e00b      	b.n	8007898 <DMA_CheckFifoParam+0xe4>
      break;
 8007880:	bf00      	nop
 8007882:	e00a      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;
 8007884:	bf00      	nop
 8007886:	e008      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;
 8007888:	bf00      	nop
 800788a:	e006      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;
 800788c:	bf00      	nop
 800788e:	e004      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;   
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <DMA_CheckFifoParam+0xe6>
      break;
 8007898:	bf00      	nop
    }
  } 
  
  return status; 
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	; 0x24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e159      	b.n	8007b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078c4:	2201      	movs	r2, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4013      	ands	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	429a      	cmp	r2, r3
 80078de:	f040 8148 	bne.w	8007b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d00b      	beq.n	8007902 <HAL_GPIO_Init+0x5a>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d007      	beq.n	8007902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078f6:	2b11      	cmp	r3, #17
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	2b12      	cmp	r3, #18
 8007900:	d130      	bne.n	8007964 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	2203      	movs	r2, #3
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007938:	2201      	movs	r2, #1
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	fa02 f303 	lsl.w	r3, r2, r3
 8007940:	43db      	mvns	r3, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4013      	ands	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	091b      	lsrs	r3, r3, #4
 800794e:	f003 0201 	and.w	r2, r3, #1
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4313      	orrs	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	2203      	movs	r2, #3
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	43db      	mvns	r3, r3
 8007976:	69ba      	ldr	r2, [r7, #24]
 8007978:	4013      	ands	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	4313      	orrs	r3, r2
 800798c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d003      	beq.n	80079a4 <HAL_GPIO_Init+0xfc>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b12      	cmp	r3, #18
 80079a2:	d123      	bne.n	80079ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	08da      	lsrs	r2, r3, #3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3208      	adds	r2, #8
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	220f      	movs	r2, #15
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	43db      	mvns	r3, r3
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	4013      	ands	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	08da      	lsrs	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3208      	adds	r2, #8
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	2203      	movs	r2, #3
 80079f8:	fa02 f303 	lsl.w	r3, r2, r3
 80079fc:	43db      	mvns	r3, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4013      	ands	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f003 0203 	and.w	r2, r3, #3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a2 	beq.w	8007b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	4b56      	ldr	r3, [pc, #344]	; (8007b8c <HAL_GPIO_Init+0x2e4>)
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	4a55      	ldr	r2, [pc, #340]	; (8007b8c <HAL_GPIO_Init+0x2e4>)
 8007a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a3e:	4b53      	ldr	r3, [pc, #332]	; (8007b8c <HAL_GPIO_Init+0x2e4>)
 8007a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a4a:	4a51      	ldr	r2, [pc, #324]	; (8007b90 <HAL_GPIO_Init+0x2e8>)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	3302      	adds	r3, #2
 8007a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a48      	ldr	r2, [pc, #288]	; (8007b94 <HAL_GPIO_Init+0x2ec>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d019      	beq.n	8007aaa <HAL_GPIO_Init+0x202>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a47      	ldr	r2, [pc, #284]	; (8007b98 <HAL_GPIO_Init+0x2f0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_GPIO_Init+0x1fe>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a46      	ldr	r2, [pc, #280]	; (8007b9c <HAL_GPIO_Init+0x2f4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00d      	beq.n	8007aa2 <HAL_GPIO_Init+0x1fa>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a45      	ldr	r2, [pc, #276]	; (8007ba0 <HAL_GPIO_Init+0x2f8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <HAL_GPIO_Init+0x1f6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a44      	ldr	r2, [pc, #272]	; (8007ba4 <HAL_GPIO_Init+0x2fc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <HAL_GPIO_Init+0x1f2>
 8007a96:	2304      	movs	r3, #4
 8007a98:	e008      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007a9a:	2307      	movs	r3, #7
 8007a9c:	e006      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e004      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e002      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <HAL_GPIO_Init+0x204>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	f002 0203 	and.w	r2, r2, #3
 8007ab2:	0092      	lsls	r2, r2, #2
 8007ab4:	4093      	lsls	r3, r2
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007abc:	4934      	ldr	r1, [pc, #208]	; (8007b90 <HAL_GPIO_Init+0x2e8>)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	089b      	lsrs	r3, r3, #2
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007aca:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007aee:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007af4:	4b2c      	ldr	r3, [pc, #176]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	4013      	ands	r3, r2
 8007b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b18:	4a23      	ldr	r2, [pc, #140]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b1e:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b42:	4a19      	ldr	r2, [pc, #100]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	43db      	mvns	r3, r3
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4013      	ands	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b6c:	4a0e      	ldr	r2, [pc, #56]	; (8007ba8 <HAL_GPIO_Init+0x300>)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3301      	adds	r3, #1
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	f67f aea2 	bls.w	80078c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b80:	bf00      	nop
 8007b82:	3724      	adds	r7, #36	; 0x24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	40013800 	.word	0x40013800
 8007b94:	40020000 	.word	0x40020000
 8007b98:	40020400 	.word	0x40020400
 8007b9c:	40020800 	.word	0x40020800
 8007ba0:	40020c00 	.word	0x40020c00
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	40013c00 	.word	0x40013c00

08007bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e0bb      	b.n	8007d40 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bc8:	2201      	movs	r2, #1
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	f040 80ab 	bne.w	8007d3a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007be4:	4a5b      	ldr	r2, [pc, #364]	; (8007d54 <HAL_GPIO_DeInit+0x1a8>)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	3302      	adds	r3, #2
 8007bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	220f      	movs	r2, #15
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a53      	ldr	r2, [pc, #332]	; (8007d58 <HAL_GPIO_DeInit+0x1ac>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d019      	beq.n	8007c42 <HAL_GPIO_DeInit+0x96>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a52      	ldr	r2, [pc, #328]	; (8007d5c <HAL_GPIO_DeInit+0x1b0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <HAL_GPIO_DeInit+0x92>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a51      	ldr	r2, [pc, #324]	; (8007d60 <HAL_GPIO_DeInit+0x1b4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00d      	beq.n	8007c3a <HAL_GPIO_DeInit+0x8e>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a50      	ldr	r2, [pc, #320]	; (8007d64 <HAL_GPIO_DeInit+0x1b8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <HAL_GPIO_DeInit+0x8a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a4f      	ldr	r2, [pc, #316]	; (8007d68 <HAL_GPIO_DeInit+0x1bc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d101      	bne.n	8007c32 <HAL_GPIO_DeInit+0x86>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	e008      	b.n	8007c44 <HAL_GPIO_DeInit+0x98>
 8007c32:	2307      	movs	r3, #7
 8007c34:	e006      	b.n	8007c44 <HAL_GPIO_DeInit+0x98>
 8007c36:	2303      	movs	r3, #3
 8007c38:	e004      	b.n	8007c44 <HAL_GPIO_DeInit+0x98>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e002      	b.n	8007c44 <HAL_GPIO_DeInit+0x98>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <HAL_GPIO_DeInit+0x98>
 8007c42:	2300      	movs	r3, #0
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	f002 0203 	and.w	r2, r2, #3
 8007c4a:	0092      	lsls	r2, r2, #2
 8007c4c:	4093      	lsls	r3, r2
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d132      	bne.n	8007cba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	4943      	ldr	r1, [pc, #268]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007c62:	4b42      	ldr	r3, [pc, #264]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	4940      	ldr	r1, [pc, #256]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	43db      	mvns	r3, r3
 8007c78:	493c      	ldr	r1, [pc, #240]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007c7e:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	43db      	mvns	r3, r3
 8007c86:	4939      	ldr	r1, [pc, #228]	; (8007d6c <HAL_GPIO_DeInit+0x1c0>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	220f      	movs	r2, #15
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <HAL_GPIO_DeInit+0x1a8>)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	089b      	lsrs	r3, r3, #2
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	43da      	mvns	r2, r3
 8007cac:	4829      	ldr	r0, [pc, #164]	; (8007d54 <HAL_GPIO_DeInit+0x1a8>)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	400a      	ands	r2, r1
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	2103      	movs	r1, #3
 8007cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	401a      	ands	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	08da      	lsrs	r2, r3, #3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3208      	adds	r2, #8
 8007cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	220f      	movs	r2, #15
 8007ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cea:	43db      	mvns	r3, r3
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	08d2      	lsrs	r2, r2, #3
 8007cf0:	4019      	ands	r1, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3208      	adds	r2, #8
 8007cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	2103      	movs	r1, #3
 8007d04:	fa01 f303 	lsl.w	r3, r1, r3
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	2101      	movs	r1, #1
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	2103      	movs	r1, #3
 8007d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	401a      	ands	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	f67f af40 	bls.w	8007bc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	40013800 	.word	0x40013800
 8007d58:	40020000 	.word	0x40020000
 8007d5c:	40020400 	.word	0x40020400
 8007d60:	40020800 	.word	0x40020800
 8007d64:	40020c00 	.word	0x40020c00
 8007d68:	40021000 	.word	0x40021000
 8007d6c:	40013c00 	.word	0x40013c00

08007d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	887b      	ldrh	r3, [r7, #2]
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e001      	b.n	8007d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
 8007dac:	4613      	mov	r3, r2
 8007dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007db0:	787b      	ldrb	r3, [r7, #1]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dbc:	e003      	b.n	8007dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dbe:	887b      	ldrh	r3, [r7, #2]
 8007dc0:	041a      	lsls	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	619a      	str	r2, [r3, #24]
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	887b      	ldrh	r3, [r7, #2]
 8007de4:	401a      	ands	r2, r3
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d104      	bne.n	8007df6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007dec:	887b      	ldrh	r3, [r7, #2]
 8007dee:	041a      	lsls	r2, r3, #16
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007df4:	e002      	b.n	8007dfc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007df6:	887a      	ldrh	r2, [r7, #2]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	619a      	str	r2, [r3, #24]
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e25b      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d075      	beq.n	8007f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e26:	4ba3      	ldr	r3, [pc, #652]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 030c 	and.w	r3, r3, #12
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d00c      	beq.n	8007e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e32:	4ba0      	ldr	r3, [pc, #640]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d112      	bne.n	8007e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e3e:	4b9d      	ldr	r3, [pc, #628]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e4a:	d10b      	bne.n	8007e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e4c:	4b99      	ldr	r3, [pc, #612]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d05b      	beq.n	8007f10 <HAL_RCC_OscConfig+0x108>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d157      	bne.n	8007f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e236      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCC_OscConfig+0x74>
 8007e6e:	4b91      	ldr	r3, [pc, #580]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a90      	ldr	r2, [pc, #576]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e01d      	b.n	8007eb8 <HAL_RCC_OscConfig+0xb0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e84:	d10c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x98>
 8007e86:	4b8b      	ldr	r3, [pc, #556]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a8a      	ldr	r2, [pc, #552]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4b88      	ldr	r3, [pc, #544]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a87      	ldr	r2, [pc, #540]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e00b      	b.n	8007eb8 <HAL_RCC_OscConfig+0xb0>
 8007ea0:	4b84      	ldr	r3, [pc, #528]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a83      	ldr	r2, [pc, #524]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	4b81      	ldr	r3, [pc, #516]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a80      	ldr	r2, [pc, #512]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d013      	beq.n	8007ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec0:	f7fe fa5a 	bl	8006378 <HAL_GetTick>
 8007ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ec6:	e008      	b.n	8007eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ec8:	f7fe fa56 	bl	8006378 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	; 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e1fb      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eda:	4b76      	ldr	r3, [pc, #472]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0f0      	beq.n	8007ec8 <HAL_RCC_OscConfig+0xc0>
 8007ee6:	e014      	b.n	8007f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee8:	f7fe fa46 	bl	8006378 <HAL_GetTick>
 8007eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ef0:	f7fe fa42 	bl	8006378 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b64      	cmp	r3, #100	; 0x64
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e1e7      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f02:	4b6c      	ldr	r3, [pc, #432]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1f0      	bne.n	8007ef0 <HAL_RCC_OscConfig+0xe8>
 8007f0e:	e000      	b.n	8007f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d063      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f1e:	4b65      	ldr	r3, [pc, #404]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 030c 	and.w	r3, r3, #12
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00b      	beq.n	8007f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f2a:	4b62      	ldr	r3, [pc, #392]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	d11c      	bne.n	8007f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f36:	4b5f      	ldr	r3, [pc, #380]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d116      	bne.n	8007f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f42:	4b5c      	ldr	r3, [pc, #368]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_RCC_OscConfig+0x152>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d001      	beq.n	8007f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e1bb      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5a:	4b56      	ldr	r3, [pc, #344]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	4952      	ldr	r1, [pc, #328]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f6e:	e03a      	b.n	8007fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d020      	beq.n	8007fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <HAL_RCC_OscConfig+0x2b0>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7e:	f7fe f9fb 	bl	8006378 <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f84:	e008      	b.n	8007f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f86:	f7fe f9f7 	bl	8006378 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e19c      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f98:	4b46      	ldr	r3, [pc, #280]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa4:	4b43      	ldr	r3, [pc, #268]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4940      	ldr	r1, [pc, #256]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]
 8007fb8:	e015      	b.n	8007fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fba:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <HAL_RCC_OscConfig+0x2b0>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc0:	f7fe f9da 	bl	8006378 <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fc8:	f7fe f9d6 	bl	8006378 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e17b      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fda:	4b36      	ldr	r3, [pc, #216]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f0      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d030      	beq.n	8008054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ffa:	4b30      	ldr	r3, [pc, #192]	; (80080bc <HAL_RCC_OscConfig+0x2b4>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008000:	f7fe f9ba 	bl	8006378 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008008:	f7fe f9b6 	bl	8006378 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e15b      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800801a:	4b26      	ldr	r3, [pc, #152]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 800801c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0x200>
 8008026:	e015      	b.n	8008054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008028:	4b24      	ldr	r3, [pc, #144]	; (80080bc <HAL_RCC_OscConfig+0x2b4>)
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800802e:	f7fe f9a3 	bl	8006378 <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008036:	f7fe f99f 	bl	8006378 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e144      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008048:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 800804a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1f0      	bne.n	8008036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80a0 	beq.w	80081a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008062:	2300      	movs	r3, #0
 8008064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10f      	bne.n	8008092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	4a0e      	ldr	r2, [pc, #56]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 800807c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008080:	6413      	str	r3, [r2, #64]	; 0x40
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <HAL_RCC_OscConfig+0x2ac>)
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800808a:	60bb      	str	r3, [r7, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800808e:	2301      	movs	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <HAL_RCC_OscConfig+0x2b8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809a:	2b00      	cmp	r3, #0
 800809c:	d121      	bne.n	80080e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <HAL_RCC_OscConfig+0x2b8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a07      	ldr	r2, [pc, #28]	; (80080c0 <HAL_RCC_OscConfig+0x2b8>)
 80080a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080aa:	f7fe f965 	bl	8006378 <HAL_GetTick>
 80080ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080b0:	e011      	b.n	80080d6 <HAL_RCC_OscConfig+0x2ce>
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	42470000 	.word	0x42470000
 80080bc:	42470e80 	.word	0x42470e80
 80080c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c4:	f7fe f958 	bl	8006378 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e0fd      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080d6:	4b81      	ldr	r3, [pc, #516]	; (80082dc <HAL_RCC_OscConfig+0x4d4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d106      	bne.n	80080f8 <HAL_RCC_OscConfig+0x2f0>
 80080ea:	4b7d      	ldr	r3, [pc, #500]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 80080ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ee:	4a7c      	ldr	r2, [pc, #496]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	6713      	str	r3, [r2, #112]	; 0x70
 80080f6:	e01c      	b.n	8008132 <HAL_RCC_OscConfig+0x32a>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d10c      	bne.n	800811a <HAL_RCC_OscConfig+0x312>
 8008100:	4b77      	ldr	r3, [pc, #476]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4a76      	ldr	r2, [pc, #472]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008106:	f043 0304 	orr.w	r3, r3, #4
 800810a:	6713      	str	r3, [r2, #112]	; 0x70
 800810c:	4b74      	ldr	r3, [pc, #464]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 800810e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008110:	4a73      	ldr	r2, [pc, #460]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	6713      	str	r3, [r2, #112]	; 0x70
 8008118:	e00b      	b.n	8008132 <HAL_RCC_OscConfig+0x32a>
 800811a:	4b71      	ldr	r3, [pc, #452]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	4a70      	ldr	r2, [pc, #448]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	6713      	str	r3, [r2, #112]	; 0x70
 8008126:	4b6e      	ldr	r3, [pc, #440]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a6d      	ldr	r2, [pc, #436]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 800812c:	f023 0304 	bic.w	r3, r3, #4
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d015      	beq.n	8008166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813a:	f7fe f91d 	bl	8006378 <HAL_GetTick>
 800813e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008140:	e00a      	b.n	8008158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008142:	f7fe f919 	bl	8006378 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008150:	4293      	cmp	r3, r2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e0bc      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008158:	4b61      	ldr	r3, [pc, #388]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 800815a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0ee      	beq.n	8008142 <HAL_RCC_OscConfig+0x33a>
 8008164:	e014      	b.n	8008190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008166:	f7fe f907 	bl	8006378 <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800816c:	e00a      	b.n	8008184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800816e:	f7fe f903 	bl	8006378 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	f241 3288 	movw	r2, #5000	; 0x1388
 800817c:	4293      	cmp	r3, r2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e0a6      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008184:	4b56      	ldr	r3, [pc, #344]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1ee      	bne.n	800816e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d105      	bne.n	80081a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008196:	4b52      	ldr	r3, [pc, #328]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	4a51      	ldr	r2, [pc, #324]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 800819c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8092 	beq.w	80082d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081ac:	4b4c      	ldr	r3, [pc, #304]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d05c      	beq.n	8008272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d141      	bne.n	8008244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081c0:	4b48      	ldr	r3, [pc, #288]	; (80082e4 <HAL_RCC_OscConfig+0x4dc>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c6:	f7fe f8d7 	bl	8006378 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ce:	f7fe f8d3 	bl	8006378 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e078      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081e0:	4b3f      	ldr	r3, [pc, #252]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	019b      	lsls	r3, r3, #6
 80081fc:	431a      	orrs	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	3b01      	subs	r3, #1
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	061b      	lsls	r3, r3, #24
 8008210:	4933      	ldr	r1, [pc, #204]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008212:	4313      	orrs	r3, r2
 8008214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008216:	4b33      	ldr	r3, [pc, #204]	; (80082e4 <HAL_RCC_OscConfig+0x4dc>)
 8008218:	2201      	movs	r2, #1
 800821a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800821c:	f7fe f8ac 	bl	8006378 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008224:	f7fe f8a8 	bl	8006378 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e04d      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008236:	4b2a      	ldr	r3, [pc, #168]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x41c>
 8008242:	e045      	b.n	80082d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008244:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <HAL_RCC_OscConfig+0x4dc>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800824a:	f7fe f895 	bl	8006378 <HAL_GetTick>
 800824e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008250:	e008      	b.n	8008264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008252:	f7fe f891 	bl	8006378 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e036      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008264:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <HAL_RCC_OscConfig+0x44a>
 8008270:	e02e      	b.n	80082d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e029      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800827e:	4b18      	ldr	r3, [pc, #96]	; (80082e0 <HAL_RCC_OscConfig+0x4d8>)
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	429a      	cmp	r2, r3
 8008290:	d11c      	bne.n	80082cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829c:	429a      	cmp	r2, r3
 800829e:	d115      	bne.n	80082cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082a6:	4013      	ands	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d10d      	bne.n	80082cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d106      	bne.n	80082cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d001      	beq.n	80082d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40007000 	.word	0x40007000
 80082e0:	40023800 	.word	0x40023800
 80082e4:	42470060 	.word	0x42470060

080082e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0cc      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082fc:	4b68      	ldr	r3, [pc, #416]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d90c      	bls.n	8008324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830a:	4b65      	ldr	r3, [pc, #404]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008312:	4b63      	ldr	r3, [pc, #396]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d001      	beq.n	8008324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e0b8      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d020      	beq.n	8008372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800833c:	4b59      	ldr	r3, [pc, #356]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4a58      	ldr	r2, [pc, #352]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008354:	4b53      	ldr	r3, [pc, #332]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4a52      	ldr	r2, [pc, #328]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800835a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800835e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008360:	4b50      	ldr	r3, [pc, #320]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	494d      	ldr	r1, [pc, #308]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	4313      	orrs	r3, r2
 8008370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d044      	beq.n	8008408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d107      	bne.n	8008396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008386:	4b47      	ldr	r3, [pc, #284]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d119      	bne.n	80083c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e07f      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b02      	cmp	r3, #2
 800839c:	d003      	beq.n	80083a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d107      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a6:	4b3f      	ldr	r3, [pc, #252]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e06f      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b6:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e067      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083c6:	4b37      	ldr	r3, [pc, #220]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f023 0203 	bic.w	r2, r3, #3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4934      	ldr	r1, [pc, #208]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083d8:	f7fd ffce 	bl	8006378 <HAL_GetTick>
 80083dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083de:	e00a      	b.n	80083f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083e0:	f7fd ffca 	bl	8006378 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e04f      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f6:	4b2b      	ldr	r3, [pc, #172]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f003 020c 	and.w	r2, r3, #12
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	429a      	cmp	r2, r3
 8008406:	d1eb      	bne.n	80083e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008408:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d20c      	bcs.n	8008430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008416:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800841e:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d001      	beq.n	8008430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e032      	b.n	8008496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0304 	and.w	r3, r3, #4
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800843c:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	4916      	ldr	r1, [pc, #88]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800845a:	4b12      	ldr	r3, [pc, #72]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	490e      	ldr	r1, [pc, #56]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 800846a:	4313      	orrs	r3, r2
 800846c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800846e:	f000 f821 	bl	80084b4 <HAL_RCC_GetSysClockFreq>
 8008472:	4601      	mov	r1, r0
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	091b      	lsrs	r3, r3, #4
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <HAL_RCC_ClockConfig+0x1c0>)
 8008480:	5cd3      	ldrb	r3, [r2, r3]
 8008482:	fa21 f303 	lsr.w	r3, r1, r3
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <HAL_RCC_ClockConfig+0x1c4>)
 8008488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <HAL_RCC_ClockConfig+0x1c8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd ff2e 	bl	80062f0 <HAL_InitTick>

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40023c00 	.word	0x40023c00
 80084a4:	40023800 	.word	0x40023800
 80084a8:	0800d66c 	.word	0x0800d66c
 80084ac:	20000000 	.word	0x20000000
 80084b0:	20000058 	.word	0x20000058

080084b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	2300      	movs	r3, #0
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084ca:	4b50      	ldr	r3, [pc, #320]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 030c 	and.w	r3, r3, #12
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d007      	beq.n	80084e6 <HAL_RCC_GetSysClockFreq+0x32>
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d008      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x38>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 808d 	bne.w	80085fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084e0:	4b4b      	ldr	r3, [pc, #300]	; (8008610 <HAL_RCC_GetSysClockFreq+0x15c>)
 80084e2:	60bb      	str	r3, [r7, #8]
       break;
 80084e4:	e08c      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084e6:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <HAL_RCC_GetSysClockFreq+0x160>)
 80084e8:	60bb      	str	r3, [r7, #8]
      break;
 80084ea:	e089      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084ec:	4b47      	ldr	r3, [pc, #284]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084f6:	4b45      	ldr	r3, [pc, #276]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d023      	beq.n	800854a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008502:	4b42      	ldr	r3, [pc, #264]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	099b      	lsrs	r3, r3, #6
 8008508:	f04f 0400 	mov.w	r4, #0
 800850c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	ea03 0501 	and.w	r5, r3, r1
 8008518:	ea04 0602 	and.w	r6, r4, r2
 800851c:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <HAL_RCC_GetSysClockFreq+0x160>)
 800851e:	fb02 f106 	mul.w	r1, r2, r6
 8008522:	2200      	movs	r2, #0
 8008524:	fb02 f205 	mul.w	r2, r2, r5
 8008528:	440a      	add	r2, r1
 800852a:	493a      	ldr	r1, [pc, #232]	; (8008614 <HAL_RCC_GetSysClockFreq+0x160>)
 800852c:	fba5 0101 	umull	r0, r1, r5, r1
 8008530:	1853      	adds	r3, r2, r1
 8008532:	4619      	mov	r1, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f04f 0400 	mov.w	r4, #0
 800853a:	461a      	mov	r2, r3
 800853c:	4623      	mov	r3, r4
 800853e:	f7f8 fbbb 	bl	8000cb8 <__aeabi_uldivmod>
 8008542:	4603      	mov	r3, r0
 8008544:	460c      	mov	r4, r1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	e049      	b.n	80085de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800854a:	4b30      	ldr	r3, [pc, #192]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	099b      	lsrs	r3, r3, #6
 8008550:	f04f 0400 	mov.w	r4, #0
 8008554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	ea03 0501 	and.w	r5, r3, r1
 8008560:	ea04 0602 	and.w	r6, r4, r2
 8008564:	4629      	mov	r1, r5
 8008566:	4632      	mov	r2, r6
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	f04f 0400 	mov.w	r4, #0
 8008570:	0154      	lsls	r4, r2, #5
 8008572:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008576:	014b      	lsls	r3, r1, #5
 8008578:	4619      	mov	r1, r3
 800857a:	4622      	mov	r2, r4
 800857c:	1b49      	subs	r1, r1, r5
 800857e:	eb62 0206 	sbc.w	r2, r2, r6
 8008582:	f04f 0300 	mov.w	r3, #0
 8008586:	f04f 0400 	mov.w	r4, #0
 800858a:	0194      	lsls	r4, r2, #6
 800858c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008590:	018b      	lsls	r3, r1, #6
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	eb64 0402 	sbc.w	r4, r4, r2
 8008598:	f04f 0100 	mov.w	r1, #0
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	00e2      	lsls	r2, r4, #3
 80085a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80085a6:	00d9      	lsls	r1, r3, #3
 80085a8:	460b      	mov	r3, r1
 80085aa:	4614      	mov	r4, r2
 80085ac:	195b      	adds	r3, r3, r5
 80085ae:	eb44 0406 	adc.w	r4, r4, r6
 80085b2:	f04f 0100 	mov.w	r1, #0
 80085b6:	f04f 0200 	mov.w	r2, #0
 80085ba:	02a2      	lsls	r2, r4, #10
 80085bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80085c0:	0299      	lsls	r1, r3, #10
 80085c2:	460b      	mov	r3, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f04f 0400 	mov.w	r4, #0
 80085d0:	461a      	mov	r2, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	f7f8 fb70 	bl	8000cb8 <__aeabi_uldivmod>
 80085d8:	4603      	mov	r3, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085de:	4b0b      	ldr	r3, [pc, #44]	; (800860c <HAL_RCC_GetSysClockFreq+0x158>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	0c1b      	lsrs	r3, r3, #16
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	3301      	adds	r3, #1
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	60bb      	str	r3, [r7, #8]
      break;
 80085f8:	e002      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <HAL_RCC_GetSysClockFreq+0x15c>)
 80085fc:	60bb      	str	r3, [r7, #8]
      break;
 80085fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008600:	68bb      	ldr	r3, [r7, #8]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860a:	bf00      	nop
 800860c:	40023800 	.word	0x40023800
 8008610:	00f42400 	.word	0x00f42400
 8008614:	017d7840 	.word	0x017d7840

08008618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008618:	b480      	push	{r7}
 800861a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800861c:	4b03      	ldr	r3, [pc, #12]	; (800862c <HAL_RCC_GetHCLKFreq+0x14>)
 800861e:	681b      	ldr	r3, [r3, #0]
}
 8008620:	4618      	mov	r0, r3
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000000 	.word	0x20000000

08008630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008634:	f7ff fff0 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8008638:	4601      	mov	r1, r0
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	0a9b      	lsrs	r3, r3, #10
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	4a03      	ldr	r2, [pc, #12]	; (8008654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008646:	5cd3      	ldrb	r3, [r2, r3]
 8008648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800864c:	4618      	mov	r0, r3
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40023800 	.word	0x40023800
 8008654:	0800d67c 	.word	0x0800d67c

08008658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800865c:	f7ff ffdc 	bl	8008618 <HAL_RCC_GetHCLKFreq>
 8008660:	4601      	mov	r1, r0
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	0b5b      	lsrs	r3, r3, #13
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	4a03      	ldr	r2, [pc, #12]	; (800867c <HAL_RCC_GetPCLK2Freq+0x24>)
 800866e:	5cd3      	ldrb	r3, [r2, r3]
 8008670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008674:	4618      	mov	r0, r3
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40023800 	.word	0x40023800
 800867c:	0800d67c 	.word	0x0800d67c

08008680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e056      	b.n	8008740 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d106      	bne.n	80086b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fc fa01 	bl	8004ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2202      	movs	r2, #2
 80086b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	431a      	orrs	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	ea42 0103 	orr.w	r1, r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	f003 0104 	and.w	r1, r3, #4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69da      	ldr	r2, [r3, #28]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800872e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e01a      	b.n	8008790 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2202      	movs	r2, #2
 800875e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008770:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fc fa38 	bl	8004be8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08c      	sub	sp, #48	; 0x30
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087a6:	2301      	movs	r3, #1
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <HAL_SPI_TransmitReceive+0x26>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e18a      	b.n	8008ad4 <HAL_SPI_TransmitReceive+0x33c>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087c6:	f7fd fdd7 	bl	8006378 <HAL_GetTick>
 80087ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d00f      	beq.n	8008808 <HAL_SPI_TransmitReceive+0x70>
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ee:	d107      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d103      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x68>
 80087f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d003      	beq.n	8008808 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008800:	2302      	movs	r3, #2
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008806:	e15b      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_SPI_TransmitReceive+0x82>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <HAL_SPI_TransmitReceive+0x82>
 8008814:	887b      	ldrh	r3, [r7, #2]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d103      	bne.n	8008822 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008820:	e14e      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b04      	cmp	r3, #4
 800882c:	d003      	beq.n	8008836 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2205      	movs	r2, #5
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	887a      	ldrh	r2, [r7, #2]
 8008846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	887a      	ldrh	r2, [r7, #2]
 800884c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	887a      	ldrh	r2, [r7, #2]
 8008858:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	887a      	ldrh	r2, [r7, #2]
 800885e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008876:	2b40      	cmp	r3, #64	; 0x40
 8008878:	d007      	beq.n	800888a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008892:	d178      	bne.n	8008986 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_SPI_TransmitReceive+0x10a>
 800889c:	8b7b      	ldrh	r3, [r7, #26]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d166      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	881a      	ldrh	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	1c9a      	adds	r2, r3, #2
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088bc:	b29b      	uxth	r3, r3
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c6:	e053      	b.n	8008970 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d11b      	bne.n	800890e <HAL_SPI_TransmitReceive+0x176>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d016      	beq.n	800890e <HAL_SPI_TransmitReceive+0x176>
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d113      	bne.n	800890e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	881a      	ldrh	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	1c9a      	adds	r2, r3, #2
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d119      	bne.n	8008950 <HAL_SPI_TransmitReceive+0x1b8>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008920:	b29b      	uxth	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d014      	beq.n	8008950 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	b292      	uxth	r2, r2
 8008932:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	1c9a      	adds	r2, r3, #2
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800894c:	2301      	movs	r3, #1
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008950:	f7fd fd12 	bl	8006378 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800895c:	429a      	cmp	r2, r3
 800895e:	d807      	bhi.n	8008970 <HAL_SPI_TransmitReceive+0x1d8>
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008966:	d003      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800896e:	e0a7      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1a6      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x130>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1a1      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x130>
 8008984:	e07c      	b.n	8008a80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_SPI_TransmitReceive+0x1fc>
 800898e:	8b7b      	ldrh	r3, [r7, #26]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d16b      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089ba:	e057      	b.n	8008a6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d11c      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0x26c>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d017      	beq.n	8008a04 <HAL_SPI_TransmitReceive+0x26c>
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d114      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d119      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x2ae>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d014      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a42:	2301      	movs	r3, #1
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a46:	f7fd fc97 	bl	8006378 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d803      	bhi.n	8008a5e <HAL_SPI_TransmitReceive+0x2c6>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d102      	bne.n	8008a64 <HAL_SPI_TransmitReceive+0x2cc>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a6a:	e029      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1a2      	bne.n	80089bc <HAL_SPI_TransmitReceive+0x224>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d19d      	bne.n	80089bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fae1 	bl	800904c <SPI_EndRxTxTransaction>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a9c:	e010      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	e000      	b.n	8008ac0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_SPI_Transmit_DMA+0x20>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e093      	b.n	8008c24 <HAL_SPI_Transmit_DMA+0x148>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
 8008b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b14:	e081      	b.n	8008c1a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <HAL_SPI_Transmit_DMA+0x46>
 8008b1c:	88fb      	ldrh	r3, [r7, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b26:	e078      	b.n	8008c1a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6e:	d107      	bne.n	8008b80 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b84:	4a29      	ldr	r2, [pc, #164]	; (8008c2c <HAL_SPI_Transmit_DMA+0x150>)
 8008b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8c:	4a28      	ldr	r2, [pc, #160]	; (8008c30 <HAL_SPI_Transmit_DMA+0x154>)
 8008b8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b94:	4a27      	ldr	r2, [pc, #156]	; (8008c34 <HAL_SPI_Transmit_DMA+0x158>)
 8008b96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	4619      	mov	r1, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	330c      	adds	r3, #12
 8008bb0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008bb8:	f7fe fb94 	bl	80072e4 <HAL_DMA_Start_IT>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00c      	beq.n	8008bdc <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f043 0210 	orr.w	r2, r3, #16
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008bda:	e01e      	b.n	8008c1a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b40      	cmp	r3, #64	; 0x40
 8008be8:	d007      	beq.n	8008bfa <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0220 	orr.w	r2, r2, #32
 8008c08:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f042 0202 	orr.w	r2, r2, #2
 8008c18:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	08008ef5 	.word	0x08008ef5
 8008c30:	08008e4d 	.word	0x08008e4d
 8008c34:	08008f11 	.word	0x08008f11

08008c38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	099b      	lsrs	r3, r3, #6
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10f      	bne.n	8008c7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	099b      	lsrs	r3, r3, #6
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
    return;
 8008c7a:	e0d8      	b.n	8008e2e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <HAL_SPI_IRQHandler+0x66>
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	09db      	lsrs	r3, r3, #7
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
    return;
 8008c9c:	e0c7      	b.n	8008e2e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10c      	bne.n	8008cc4 <HAL_SPI_IRQHandler+0x8c>
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	099b      	lsrs	r3, r3, #6
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 80b5 	beq.w	8008e2e <HAL_SPI_IRQHandler+0x1f6>
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80ae 	beq.w	8008e2e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	099b      	lsrs	r3, r3, #6
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d023      	beq.n	8008d26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d011      	beq.n	8008d0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cee:	f043 0204 	orr.w	r2, r3, #4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	617b      	str	r3, [r7, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	e00b      	b.n	8008d26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d0e:	2300      	movs	r3, #0
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	613b      	str	r3, [r7, #16]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	693b      	ldr	r3, [r7, #16]
        return;
 8008d24:	e083      	b.n	8008e2e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d014      	beq.n	8008d5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f043 0201 	orr.w	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6c:	f043 0208 	orr.w	r2, r3, #8
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	60bb      	str	r3, [r7, #8]
 8008d80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d050      	beq.n	8008e2c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d104      	bne.n	8008db6 <HAL_SPI_IRQHandler+0x17e>
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d034      	beq.n	8008e20 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f022 0203 	bic.w	r2, r2, #3
 8008dc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d011      	beq.n	8008df2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd2:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <HAL_SPI_IRQHandler+0x1fc>)
 8008dd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fada 	bl	8007394 <HAL_DMA_Abort_IT>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d005      	beq.n	8008df2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d016      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfe:	4a0d      	ldr	r2, [pc, #52]	; (8008e34 <HAL_SPI_IRQHandler+0x1fc>)
 8008e00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fac4 	bl	8007394 <HAL_DMA_Abort_IT>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008e1e:	e003      	b.n	8008e28 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7fb fe13 	bl	8004a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e26:	e000      	b.n	8008e2a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008e28:	bf00      	nop
    return;
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
  }
}
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	08008f51 	.word	0x08008f51

08008e38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e5a:	f7fd fa8d 	bl	8006378 <HAL_GetTick>
 8008e5e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d03b      	beq.n	8008ee8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0220 	bic.w	r2, r2, #32
 8008e7e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0202 	bic.w	r2, r2, #2
 8008e8e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	2164      	movs	r1, #100	; 0x64
 8008e94:	6978      	ldr	r0, [r7, #20]
 8008e96:	f000 f8d9 	bl	800904c <SPI_EndRxTxTransaction>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea4:	f043 0220 	orr.w	r2, r3, #32
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008ee0:	6978      	ldr	r0, [r7, #20]
 8008ee2:	f7fb fdb3 	bl	8004a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008ee6:	e002      	b.n	8008eee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008ee8:	6978      	ldr	r0, [r7, #20]
 8008eea:	f7fb fdc5 	bl	8004a78 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff ff98 	bl	8008e38 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0203 	bic.w	r2, r2, #3
 8008f2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f32:	f043 0210 	orr.w	r2, r3, #16
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7fb fd82 	bl	8004a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7fb fd6e 	bl	8004a4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f88:	e04c      	b.n	8009024 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d048      	beq.n	8009024 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f92:	f7fd f9f1 	bl	8006378 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d902      	bls.n	8008fa8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d13d      	bne.n	8009024 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fc0:	d111      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fca:	d004      	beq.n	8008fd6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd4:	d107      	bne.n	8008fe6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fe4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fee:	d10f      	bne.n	8009010 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800900e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e00f      	b.n	8009044 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	429a      	cmp	r2, r3
 8009040:	d1a3      	bne.n	8008f8a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <SPI_EndRxTxTransaction+0x7c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1b      	ldr	r2, [pc, #108]	; (80090cc <SPI_EndRxTxTransaction+0x80>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0d5b      	lsrs	r3, r3, #21
 8009064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009068:	fb02 f303 	mul.w	r3, r2, r3
 800906c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009076:	d112      	bne.n	800909e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	2180      	movs	r1, #128	; 0x80
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff ff78 	bl	8008f78 <SPI_WaitFlagStateUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d016      	beq.n	80090bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009092:	f043 0220 	orr.w	r2, r3, #32
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e00f      	b.n	80090be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b4:	2b80      	cmp	r3, #128	; 0x80
 80090b6:	d0f2      	beq.n	800909e <SPI_EndRxTxTransaction+0x52>
 80090b8:	e000      	b.n	80090bc <SPI_EndRxTxTransaction+0x70>
        break;
 80090ba:	bf00      	nop
  }

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000000 	.word	0x20000000
 80090cc:	165e9f81 	.word	0x165e9f81

080090d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e01d      	b.n	800911e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fb fa12 	bl	8004520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f000 fb2a 	bl	8009768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e01d      	b.n	8009174 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f815 	bl	800917c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2202      	movs	r2, #2
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3304      	adds	r3, #4
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 faff 	bl	8009768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b0c      	cmp	r3, #12
 800919e:	d841      	bhi.n	8009224 <HAL_TIM_IC_Start_IT+0x94>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <HAL_TIM_IC_Start_IT+0x18>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091dd 	.word	0x080091dd
 80091ac:	08009225 	.word	0x08009225
 80091b0:	08009225 	.word	0x08009225
 80091b4:	08009225 	.word	0x08009225
 80091b8:	080091ef 	.word	0x080091ef
 80091bc:	08009225 	.word	0x08009225
 80091c0:	08009225 	.word	0x08009225
 80091c4:	08009225 	.word	0x08009225
 80091c8:	08009201 	.word	0x08009201
 80091cc:	08009225 	.word	0x08009225
 80091d0:	08009225 	.word	0x08009225
 80091d4:	08009225 	.word	0x08009225
 80091d8:	08009213 	.word	0x08009213
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0202 	orr.w	r2, r2, #2
 80091ea:	60da      	str	r2, [r3, #12]
      break;
 80091ec:	e01b      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0204 	orr.w	r2, r2, #4
 80091fc:	60da      	str	r2, [r3, #12]
      break;
 80091fe:	e012      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0208 	orr.w	r2, r2, #8
 800920e:	60da      	str	r2, [r3, #12]
      break;
 8009210:	e009      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0210 	orr.w	r2, r2, #16
 8009220:	60da      	str	r2, [r3, #12]
      break;
 8009222:	e000      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8009224:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2201      	movs	r2, #1
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fcd2 	bl	8009bd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0307 	and.w	r3, r3, #7
 800923e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2b06      	cmp	r3, #6
 8009244:	d007      	beq.n	8009256 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b02      	cmp	r3, #2
 8009274:	d122      	bne.n	80092bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b02      	cmp	r3, #2
 8009282:	d11b      	bne.n	80092bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f06f 0202 	mvn.w	r2, #2
 800928c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fb f98c 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 80092a8:	e005      	b.n	80092b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa3d 	bl	800972a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fa44 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d122      	bne.n	8009310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d11b      	bne.n	8009310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0204 	mvn.w	r2, #4
 80092e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fb f962 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 80092fc:	e005      	b.n	800930a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa13 	bl	800972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa1a 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f003 0308 	and.w	r3, r3, #8
 800931a:	2b08      	cmp	r3, #8
 800931c:	d122      	bne.n	8009364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b08      	cmp	r3, #8
 800932a:	d11b      	bne.n	8009364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f06f 0208 	mvn.w	r2, #8
 8009334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2204      	movs	r2, #4
 800933a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7fb f938 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 8009350:	e005      	b.n	800935e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f9e9 	bl	800972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9f0 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0310 	and.w	r3, r3, #16
 800936e:	2b10      	cmp	r3, #16
 8009370:	d122      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b10      	cmp	r3, #16
 800937e:	d11b      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0210 	mvn.w	r2, #16
 8009388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2208      	movs	r2, #8
 800938e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7fb f90e 	bl	80045c0 <HAL_TIM_IC_CaptureCallback>
 80093a4:	e005      	b.n	80093b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9bf 	bl	800972a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f9c6 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d10e      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d107      	bne.n	80093e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0201 	mvn.w	r2, #1
 80093dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f999 	bl	8009716 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d10e      	bne.n	8009410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d107      	bne.n	8009410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fc82 	bl	8009d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d10e      	bne.n	800943c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d107      	bne.n	800943c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f98b 	bl	8009752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b20      	cmp	r3, #32
 8009448:	d10e      	bne.n	8009468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b20      	cmp	r3, #32
 8009456:	d107      	bne.n	8009468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0220 	mvn.w	r2, #32
 8009460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fc4c 	bl	8009d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <HAL_TIM_IC_ConfigChannel+0x1a>
 8009486:	2302      	movs	r3, #2
 8009488:	e08a      	b.n	80095a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2202      	movs	r2, #2
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d11b      	bne.n	80094d8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6819      	ldr	r1, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f000 f9da 	bl	8009868 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 020c 	bic.w	r2, r2, #12
 80094c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6999      	ldr	r1, [r3, #24]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	689a      	ldr	r2, [r3, #8]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	619a      	str	r2, [r3, #24]
 80094d6:	e05a      	b.n	800958e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d11c      	bne.n	8009518 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6819      	ldr	r1, [r3, #0]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f000 fa52 	bl	8009996 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009500:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6999      	ldr	r1, [r3, #24]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	021a      	lsls	r2, r3, #8
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	619a      	str	r2, [r3, #24]
 8009516:	e03a      	b.n	800958e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b08      	cmp	r3, #8
 800951c:	d11b      	bne.n	8009556 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6819      	ldr	r1, [r3, #0]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f000 fa9f 	bl	8009a70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69da      	ldr	r2, [r3, #28]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 020c 	bic.w	r2, r2, #12
 8009540:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69d9      	ldr	r1, [r3, #28]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	61da      	str	r2, [r3, #28]
 8009554:	e01b      	b.n	800958e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6819      	ldr	r1, [r3, #0]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f000 fabf 	bl	8009ae8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69da      	ldr	r2, [r3, #28]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009578:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69d9      	ldr	r1, [r3, #28]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	021a      	lsls	r2, r3, #8
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_TIM_ConfigClockSource+0x18>
 80095bc:	2302      	movs	r3, #2
 80095be:	e0a6      	b.n	800970e <HAL_TIM_ConfigClockSource+0x166>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d067      	beq.n	80096c8 <HAL_TIM_ConfigClockSource+0x120>
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d80b      	bhi.n	8009614 <HAL_TIM_ConfigClockSource+0x6c>
 80095fc:	2b10      	cmp	r3, #16
 80095fe:	d073      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x140>
 8009600:	2b10      	cmp	r3, #16
 8009602:	d802      	bhi.n	800960a <HAL_TIM_ConfigClockSource+0x62>
 8009604:	2b00      	cmp	r3, #0
 8009606:	d06f      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009608:	e078      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800960a:	2b20      	cmp	r3, #32
 800960c:	d06c      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x140>
 800960e:	2b30      	cmp	r3, #48	; 0x30
 8009610:	d06a      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009612:	e073      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009614:	2b70      	cmp	r3, #112	; 0x70
 8009616:	d00d      	beq.n	8009634 <HAL_TIM_ConfigClockSource+0x8c>
 8009618:	2b70      	cmp	r3, #112	; 0x70
 800961a:	d804      	bhi.n	8009626 <HAL_TIM_ConfigClockSource+0x7e>
 800961c:	2b50      	cmp	r3, #80	; 0x50
 800961e:	d033      	beq.n	8009688 <HAL_TIM_ConfigClockSource+0xe0>
 8009620:	2b60      	cmp	r3, #96	; 0x60
 8009622:	d041      	beq.n	80096a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009624:	e06a      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962a:	d066      	beq.n	80096fa <HAL_TIM_ConfigClockSource+0x152>
 800962c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009630:	d017      	beq.n	8009662 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009632:	e063      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f000 faa8 	bl	8009b98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009656:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	609a      	str	r2, [r3, #8]
      break;
 8009660:	e04c      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6899      	ldr	r1, [r3, #8]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f000 fa91 	bl	8009b98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009684:	609a      	str	r2, [r3, #8]
      break;
 8009686:	e039      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6859      	ldr	r1, [r3, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	461a      	mov	r2, r3
 8009696:	f000 f94f 	bl	8009938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2150      	movs	r1, #80	; 0x50
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fa5e 	bl	8009b62 <TIM_ITRx_SetConfig>
      break;
 80096a6:	e029      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6859      	ldr	r1, [r3, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	461a      	mov	r2, r3
 80096b6:	f000 f9ab 	bl	8009a10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2160      	movs	r1, #96	; 0x60
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fa4e 	bl	8009b62 <TIM_ITRx_SetConfig>
      break;
 80096c6:	e019      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6859      	ldr	r1, [r3, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f000 f92f 	bl	8009938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2140      	movs	r1, #64	; 0x40
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fa3e 	bl	8009b62 <TIM_ITRx_SetConfig>
      break;
 80096e6:	e009      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f000 fa35 	bl	8009b62 <TIM_ITRx_SetConfig>
      break;
 80096f8:	e000      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80096fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a34      	ldr	r2, [pc, #208]	; (800984c <TIM_Base_SetConfig+0xe4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00f      	beq.n	80097a0 <TIM_Base_SetConfig+0x38>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d00b      	beq.n	80097a0 <TIM_Base_SetConfig+0x38>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a31      	ldr	r2, [pc, #196]	; (8009850 <TIM_Base_SetConfig+0xe8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d007      	beq.n	80097a0 <TIM_Base_SetConfig+0x38>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a30      	ldr	r2, [pc, #192]	; (8009854 <TIM_Base_SetConfig+0xec>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_Base_SetConfig+0x38>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a2f      	ldr	r2, [pc, #188]	; (8009858 <TIM_Base_SetConfig+0xf0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d108      	bne.n	80097b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a25      	ldr	r2, [pc, #148]	; (800984c <TIM_Base_SetConfig+0xe4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d01b      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c0:	d017      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a22      	ldr	r2, [pc, #136]	; (8009850 <TIM_Base_SetConfig+0xe8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d013      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a21      	ldr	r2, [pc, #132]	; (8009854 <TIM_Base_SetConfig+0xec>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d00f      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a20      	ldr	r2, [pc, #128]	; (8009858 <TIM_Base_SetConfig+0xf0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00b      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a1f      	ldr	r2, [pc, #124]	; (800985c <TIM_Base_SetConfig+0xf4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d007      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a1e      	ldr	r2, [pc, #120]	; (8009860 <TIM_Base_SetConfig+0xf8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d003      	beq.n	80097f2 <TIM_Base_SetConfig+0x8a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <TIM_Base_SetConfig+0xfc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d108      	bne.n	8009804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <TIM_Base_SetConfig+0xe4>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d103      	bne.n	8009838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	615a      	str	r2, [r3, #20]
}
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40010000 	.word	0x40010000
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40014000 	.word	0x40014000
 8009860:	40014400 	.word	0x40014400
 8009864:	40014800 	.word	0x40014800

08009868 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f023 0201 	bic.w	r2, r3, #1
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4a24      	ldr	r2, [pc, #144]	; (8009924 <TIM_TI1_SetConfig+0xbc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d013      	beq.n	80098be <TIM_TI1_SetConfig+0x56>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989c:	d00f      	beq.n	80098be <TIM_TI1_SetConfig+0x56>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	4a21      	ldr	r2, [pc, #132]	; (8009928 <TIM_TI1_SetConfig+0xc0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d00b      	beq.n	80098be <TIM_TI1_SetConfig+0x56>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a20      	ldr	r2, [pc, #128]	; (800992c <TIM_TI1_SetConfig+0xc4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d007      	beq.n	80098be <TIM_TI1_SetConfig+0x56>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4a1f      	ldr	r2, [pc, #124]	; (8009930 <TIM_TI1_SetConfig+0xc8>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d003      	beq.n	80098be <TIM_TI1_SetConfig+0x56>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4a1e      	ldr	r2, [pc, #120]	; (8009934 <TIM_TI1_SetConfig+0xcc>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d101      	bne.n	80098c2 <TIM_TI1_SetConfig+0x5a>
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <TIM_TI1_SetConfig+0x5c>
 80098c2:	2300      	movs	r3, #0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d008      	beq.n	80098da <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e003      	b.n	80098e2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f043 0301 	orr.w	r3, r3, #1
 80098e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f023 030a 	bic.w	r3, r3, #10
 80098fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 030a 	and.w	r3, r3, #10
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40010000 	.word	0x40010000
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800
 8009930:	40000c00 	.word	0x40000c00
 8009934:	40014000 	.word	0x40014000

08009938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	f023 0201 	bic.w	r2, r3, #1
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f023 030a 	bic.w	r3, r3, #10
 8009974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	621a      	str	r2, [r3, #32]
}
 800998a:	bf00      	nop
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009996:	b480      	push	{r7}
 8009998:	b087      	sub	sp, #28
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	f023 0210 	bic.w	r2, r3, #16
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	021b      	lsls	r3, r3, #8
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	031b      	lsls	r3, r3, #12
 80099da:	b29b      	uxth	r3, r3
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	621a      	str	r2, [r3, #32]
}
 8009a04:	bf00      	nop
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	f023 0210 	bic.w	r2, r3, #16
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	031b      	lsls	r3, r3, #12
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	011b      	lsls	r3, r3, #4
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	621a      	str	r2, [r3, #32]
}
 8009a64:	bf00      	nop
 8009a66:	371c      	adds	r7, #28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009aac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	621a      	str	r2, [r3, #32]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	697a      	ldr	r2, [r7, #20]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	031b      	lsls	r3, r3, #12
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	031b      	lsls	r3, r3, #12
 8009b40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	621a      	str	r2, [r3, #32]
}
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f043 0307 	orr.w	r3, r3, #7
 8009b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	609a      	str	r2, [r3, #8]
}
 8009b8c:	bf00      	nop
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	021a      	lsls	r2, r3, #8
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	609a      	str	r2, [r3, #8]
}
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f003 031f 	and.w	r3, r3, #31
 8009bea:	2201      	movs	r2, #1
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6a1a      	ldr	r2, [r3, #32]
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	401a      	ands	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1a      	ldr	r2, [r3, #32]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c10:	431a      	orrs	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	621a      	str	r2, [r3, #32]
}
 8009c16:	bf00      	nop
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
	...

08009c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e050      	b.n	8009cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1c      	ldr	r2, [pc, #112]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d018      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d013      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00e      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a16      	ldr	r2, [pc, #88]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d009      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d004      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10c      	bne.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	40000400 	.word	0x40000400
 8009cf4:	40000800 	.word	0x40000800
 8009cf8:	40000c00 	.word	0x40000c00
 8009cfc:	40014000 	.word	0x40014000

08009d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e03f      	b.n	8009dba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fb fbc0 	bl	80054d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2224      	movs	r2, #36	; 0x24
 8009d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fc8f 	bl	800a690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	691a      	ldr	r2, [r3, #16]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68da      	ldr	r2, [r3, #12]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b082      	sub	sp, #8
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e01e      	b.n	8009e12 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2224      	movs	r2, #36	; 0x24
 8009dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dea:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7fb fc47 	bl	8005680 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b088      	sub	sp, #32
 8009e1e:	af02      	add	r7, sp, #8
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	4613      	mov	r3, r2
 8009e28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	f040 8083 	bne.w	8009f42 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_UART_Transmit+0x2e>
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e07b      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d101      	bne.n	8009e5a <HAL_UART_Transmit+0x40>
 8009e56:	2302      	movs	r3, #2
 8009e58:	e074      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2221      	movs	r2, #33	; 0x21
 8009e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009e70:	f7fc fa82 	bl	8006378 <HAL_GetTick>
 8009e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	88fa      	ldrh	r2, [r7, #6]
 8009e80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009e8a:	e042      	b.n	8009f12 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea2:	d122      	bne.n	8009eea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2180      	movs	r1, #128	; 0x80
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 fa6c 	bl	800a38c <UART_WaitOnFlagUntilTimeout>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e042      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ed0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d103      	bne.n	8009ee2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	3302      	adds	r3, #2
 8009ede:	60bb      	str	r3, [r7, #8]
 8009ee0:	e017      	b.n	8009f12 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	60bb      	str	r3, [r7, #8]
 8009ee8:	e013      	b.n	8009f12 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2180      	movs	r1, #128	; 0x80
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 fa49 	bl	800a38c <UART_WaitOnFlagUntilTimeout>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e01f      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	60ba      	str	r2, [r7, #8]
 8009f0a:	781a      	ldrb	r2, [r3, #0]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1b7      	bne.n	8009e8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2200      	movs	r2, #0
 8009f24:	2140      	movs	r1, #64	; 0x40
 8009f26:	68f8      	ldr	r0, [r7, #12]
 8009f28:	f000 fa30 	bl	800a38c <UART_WaitOnFlagUntilTimeout>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e006      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e000      	b.n	8009f44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009f42:	2302      	movs	r3, #2
  }
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d166      	bne.n	800a034 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_UART_Receive_DMA+0x26>
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e05f      	b.n	800a036 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_UART_Receive_DMA+0x38>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e058      	b.n	800a036 <HAL_UART_Receive_DMA+0xea>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	88fa      	ldrh	r2, [r7, #6]
 8009f96:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2222      	movs	r2, #34	; 0x22
 8009fa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009faa:	4a25      	ldr	r2, [pc, #148]	; (800a040 <HAL_UART_Receive_DMA+0xf4>)
 8009fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	4a24      	ldr	r2, [pc, #144]	; (800a044 <HAL_UART_Receive_DMA+0xf8>)
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fba:	4a23      	ldr	r2, [pc, #140]	; (800a048 <HAL_UART_Receive_DMA+0xfc>)
 8009fbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009fc6:	f107 0308 	add.w	r3, r7, #8
 8009fca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	88fb      	ldrh	r3, [r7, #6]
 8009fde:	f7fd f981 	bl	80072e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	613b      	str	r3, [r7, #16]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	613b      	str	r3, [r7, #16]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68da      	ldr	r2, [r3, #12]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a00e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a02e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	e000      	b.n	800a036 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a034:	2302      	movs	r3, #2
  }
}
 800a036:	4618      	mov	r0, r3
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	0800a275 	.word	0x0800a275
 800a044:	0800a2dd 	.word	0x0800a2dd
 800a048:	0800a2f9 	.word	0x0800a2f9

0800a04c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	f003 030f 	and.w	r3, r3, #15
 800a07a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10d      	bne.n	800a09e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d008      	beq.n	800a09e <HAL_UART_IRQHandler+0x52>
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa78 	bl	800a58c <UART_Receive_IT>
      return;
 800a09c:	e0d1      	b.n	800a242 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 80b0 	beq.w	800a206 <HAL_UART_IRQHandler+0x1ba>
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <HAL_UART_IRQHandler+0x70>
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 80a5 	beq.w	800a206 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <HAL_UART_IRQHandler+0x90>
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d4:	f043 0201 	orr.w	r2, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <HAL_UART_IRQHandler+0xb0>
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d005      	beq.n	800a0fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f4:	f043 0202 	orr.w	r2, r3, #2
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f003 0302 	and.w	r3, r3, #2
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <HAL_UART_IRQHandler+0xd0>
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a114:	f043 0204 	orr.w	r2, r3, #4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00f      	beq.n	800a146 <HAL_UART_IRQHandler+0xfa>
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f003 0320 	and.w	r3, r3, #32
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <HAL_UART_IRQHandler+0xee>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d005      	beq.n	800a146 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13e:	f043 0208 	orr.w	r2, r3, #8
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d078      	beq.n	800a240 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	f003 0320 	and.w	r3, r3, #32
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <HAL_UART_IRQHandler+0x11c>
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa12 	bl	800a58c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a172:	2b40      	cmp	r3, #64	; 0x40
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a182:	f003 0308 	and.w	r3, r3, #8
 800a186:	2b00      	cmp	r3, #0
 800a188:	d102      	bne.n	800a190 <HAL_UART_IRQHandler+0x144>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d031      	beq.n	800a1f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f95b 	bl	800a44c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	695b      	ldr	r3, [r3, #20]
 800a19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a0:	2b40      	cmp	r3, #64	; 0x40
 800a1a2:	d123      	bne.n	800a1ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	695a      	ldr	r2, [r3, #20]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d013      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	4a21      	ldr	r2, [pc, #132]	; (800a248 <HAL_UART_IRQHandler+0x1fc>)
 800a1c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fd f8e3 	bl	8007394 <HAL_DMA_Abort_IT>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d016      	beq.n	800a202 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e2:	e00e      	b.n	800a202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7fb f961 	bl	80054ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1ea:	e00a      	b.n	800a202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7fb f95d 	bl	80054ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f2:	e006      	b.n	800a202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fb f959 	bl	80054ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a200:	e01e      	b.n	800a240 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a202:	bf00      	nop
    return;
 800a204:	e01c      	b.n	800a240 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <HAL_UART_IRQHandler+0x1d6>
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f948 	bl	800a4b0 <UART_Transmit_IT>
    return;
 800a220:	e00f      	b.n	800a242 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <HAL_UART_IRQHandler+0x1f6>
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f990 	bl	800a55c <UART_EndTransmit_IT>
    return;
 800a23c:	bf00      	nop
 800a23e:	e000      	b.n	800a242 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a240:	bf00      	nop
  }
}
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	0800a489 	.word	0x0800a489

0800a24c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a280:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d11e      	bne.n	800a2ce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2a4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	695a      	ldr	r2, [r3, #20]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f022 0201 	bic.w	r2, r2, #1
 800a2b4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	695a      	ldr	r2, [r3, #20]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2c4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7fb f8f6 	bl	80054c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff ffb8 	bl	800a260 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a308:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a314:	2b80      	cmp	r3, #128	; 0x80
 800a316:	bf0c      	ite	eq
 800a318:	2301      	moveq	r3, #1
 800a31a:	2300      	movne	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b21      	cmp	r3, #33	; 0x21
 800a32a:	d108      	bne.n	800a33e <UART_DMAError+0x46>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2200      	movs	r2, #0
 800a336:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a338:	68b8      	ldr	r0, [r7, #8]
 800a33a:	f000 f871 	bl	800a420 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a348:	2b40      	cmp	r3, #64	; 0x40
 800a34a:	bf0c      	ite	eq
 800a34c:	2301      	moveq	r3, #1
 800a34e:	2300      	movne	r3, #0
 800a350:	b2db      	uxtb	r3, r3
 800a352:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b22      	cmp	r3, #34	; 0x22
 800a35e:	d108      	bne.n	800a372 <UART_DMAError+0x7a>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2200      	movs	r2, #0
 800a36a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a36c:	68b8      	ldr	r0, [r7, #8]
 800a36e:	f000 f86d 	bl	800a44c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a376:	f043 0210 	orr.w	r2, r3, #16
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a37e:	68b8      	ldr	r0, [r7, #8]
 800a380:	f7fb f894 	bl	80054ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	4613      	mov	r3, r2
 800a39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a39c:	e02c      	b.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d028      	beq.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d007      	beq.n	800a3bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a3ac:	f7fb ffe4 	bl	8006378 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d21d      	bcs.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	695a      	ldr	r2, [r3, #20]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e00f      	b.n	800a418 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4013      	ands	r3, r2
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	429a      	cmp	r2, r3
 800a406:	bf0c      	ite	eq
 800a408:	2301      	moveq	r3, #1
 800a40a:	2300      	movne	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	429a      	cmp	r2, r3
 800a414:	d0c3      	beq.n	800a39e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a436:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a462:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	695a      	ldr	r2, [r3, #20]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f022 0201 	bic.w	r2, r2, #1
 800a472:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7fb f802 	bl	80054ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b21      	cmp	r3, #33	; 0x21
 800a4c2:	d144      	bne.n	800a54e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4cc:	d11a      	bne.n	800a504 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d105      	bne.n	800a4f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	1c9a      	adds	r2, r3, #2
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	621a      	str	r2, [r3, #32]
 800a4f6:	e00e      	b.n	800a516 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	621a      	str	r2, [r3, #32]
 800a502:	e008      	b.n	800a516 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	1c59      	adds	r1, r3, #1
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6211      	str	r1, [r2, #32]
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29b      	uxth	r3, r3
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4619      	mov	r1, r3
 800a524:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10f      	bne.n	800a54a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a538:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a548:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e000      	b.n	800a550 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a54e:	2302      	movs	r3, #2
  }
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a572:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2220      	movs	r2, #32
 800a578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff fe65 	bl	800a24c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b22      	cmp	r3, #34	; 0x22
 800a59e:	d171      	bne.n	800a684 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a8:	d123      	bne.n	800a5f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10e      	bne.n	800a5d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	1c9a      	adds	r2, r3, #2
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	629a      	str	r2, [r3, #40]	; 0x28
 800a5d4:	e029      	b.n	800a62a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	629a      	str	r2, [r3, #40]	; 0x28
 800a5f0:	e01b      	b.n	800a62a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6858      	ldr	r0, [r3, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	1c59      	adds	r1, r3, #1
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6291      	str	r1, [r2, #40]	; 0x28
 800a60a:	b2c2      	uxtb	r2, r0
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	e00c      	b.n	800a62a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	b2da      	uxtb	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61c:	1c58      	adds	r0, r3, #1
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	6288      	str	r0, [r1, #40]	; 0x28
 800a622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a626:	b2d2      	uxtb	r2, r2
 800a628:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a62e:	b29b      	uxth	r3, r3
 800a630:	3b01      	subs	r3, #1
 800a632:	b29b      	uxth	r3, r3
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	4619      	mov	r1, r3
 800a638:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d120      	bne.n	800a680 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0220 	bic.w	r2, r2, #32
 800a64c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a65c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	695a      	ldr	r2, [r3, #20]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0201 	bic.w	r2, r2, #1
 800a66c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fa ff22 	bl	80054c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e002      	b.n	800a686 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	e000      	b.n	800a686 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a684:	2302      	movs	r3, #2
  }
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	431a      	orrs	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a6d2:	f023 030c 	bic.w	r3, r3, #12
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	430b      	orrs	r3, r1
 800a6de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6fe:	f040 818b 	bne.w	800aa18 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4ac1      	ldr	r2, [pc, #772]	; (800aa0c <UART_SetConfig+0x37c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d005      	beq.n	800a718 <UART_SetConfig+0x88>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4abf      	ldr	r2, [pc, #764]	; (800aa10 <UART_SetConfig+0x380>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f040 80bd 	bne.w	800a892 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a718:	f7fd ff9e 	bl	8008658 <HAL_RCC_GetPCLK2Freq>
 800a71c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	461d      	mov	r5, r3
 800a722:	f04f 0600 	mov.w	r6, #0
 800a726:	46a8      	mov	r8, r5
 800a728:	46b1      	mov	r9, r6
 800a72a:	eb18 0308 	adds.w	r3, r8, r8
 800a72e:	eb49 0409 	adc.w	r4, r9, r9
 800a732:	4698      	mov	r8, r3
 800a734:	46a1      	mov	r9, r4
 800a736:	eb18 0805 	adds.w	r8, r8, r5
 800a73a:	eb49 0906 	adc.w	r9, r9, r6
 800a73e:	f04f 0100 	mov.w	r1, #0
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a74a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a74e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a752:	4688      	mov	r8, r1
 800a754:	4691      	mov	r9, r2
 800a756:	eb18 0005 	adds.w	r0, r8, r5
 800a75a:	eb49 0106 	adc.w	r1, r9, r6
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	461d      	mov	r5, r3
 800a764:	f04f 0600 	mov.w	r6, #0
 800a768:	196b      	adds	r3, r5, r5
 800a76a:	eb46 0406 	adc.w	r4, r6, r6
 800a76e:	461a      	mov	r2, r3
 800a770:	4623      	mov	r3, r4
 800a772:	f7f6 faa1 	bl	8000cb8 <__aeabi_uldivmod>
 800a776:	4603      	mov	r3, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	461a      	mov	r2, r3
 800a77c:	4ba5      	ldr	r3, [pc, #660]	; (800aa14 <UART_SetConfig+0x384>)
 800a77e:	fba3 2302 	umull	r2, r3, r3, r2
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	461d      	mov	r5, r3
 800a78c:	f04f 0600 	mov.w	r6, #0
 800a790:	46a9      	mov	r9, r5
 800a792:	46b2      	mov	sl, r6
 800a794:	eb19 0309 	adds.w	r3, r9, r9
 800a798:	eb4a 040a 	adc.w	r4, sl, sl
 800a79c:	4699      	mov	r9, r3
 800a79e:	46a2      	mov	sl, r4
 800a7a0:	eb19 0905 	adds.w	r9, r9, r5
 800a7a4:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7a8:	f04f 0100 	mov.w	r1, #0
 800a7ac:	f04f 0200 	mov.w	r2, #0
 800a7b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7bc:	4689      	mov	r9, r1
 800a7be:	4692      	mov	sl, r2
 800a7c0:	eb19 0005 	adds.w	r0, r9, r5
 800a7c4:	eb4a 0106 	adc.w	r1, sl, r6
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	461d      	mov	r5, r3
 800a7ce:	f04f 0600 	mov.w	r6, #0
 800a7d2:	196b      	adds	r3, r5, r5
 800a7d4:	eb46 0406 	adc.w	r4, r6, r6
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4623      	mov	r3, r4
 800a7dc:	f7f6 fa6c 	bl	8000cb8 <__aeabi_uldivmod>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4b8b      	ldr	r3, [pc, #556]	; (800aa14 <UART_SetConfig+0x384>)
 800a7e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	2164      	movs	r1, #100	; 0x64
 800a7f0:	fb01 f303 	mul.w	r3, r1, r3
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	3332      	adds	r3, #50	; 0x32
 800a7fa:	4a86      	ldr	r2, [pc, #536]	; (800aa14 <UART_SetConfig+0x384>)
 800a7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a800:	095b      	lsrs	r3, r3, #5
 800a802:	005b      	lsls	r3, r3, #1
 800a804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a808:	4498      	add	r8, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	461d      	mov	r5, r3
 800a80e:	f04f 0600 	mov.w	r6, #0
 800a812:	46a9      	mov	r9, r5
 800a814:	46b2      	mov	sl, r6
 800a816:	eb19 0309 	adds.w	r3, r9, r9
 800a81a:	eb4a 040a 	adc.w	r4, sl, sl
 800a81e:	4699      	mov	r9, r3
 800a820:	46a2      	mov	sl, r4
 800a822:	eb19 0905 	adds.w	r9, r9, r5
 800a826:	eb4a 0a06 	adc.w	sl, sl, r6
 800a82a:	f04f 0100 	mov.w	r1, #0
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a836:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a83a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a83e:	4689      	mov	r9, r1
 800a840:	4692      	mov	sl, r2
 800a842:	eb19 0005 	adds.w	r0, r9, r5
 800a846:	eb4a 0106 	adc.w	r1, sl, r6
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	461d      	mov	r5, r3
 800a850:	f04f 0600 	mov.w	r6, #0
 800a854:	196b      	adds	r3, r5, r5
 800a856:	eb46 0406 	adc.w	r4, r6, r6
 800a85a:	461a      	mov	r2, r3
 800a85c:	4623      	mov	r3, r4
 800a85e:	f7f6 fa2b 	bl	8000cb8 <__aeabi_uldivmod>
 800a862:	4603      	mov	r3, r0
 800a864:	460c      	mov	r4, r1
 800a866:	461a      	mov	r2, r3
 800a868:	4b6a      	ldr	r3, [pc, #424]	; (800aa14 <UART_SetConfig+0x384>)
 800a86a:	fba3 1302 	umull	r1, r3, r3, r2
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2164      	movs	r1, #100	; 0x64
 800a872:	fb01 f303 	mul.w	r3, r1, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	3332      	adds	r3, #50	; 0x32
 800a87c:	4a65      	ldr	r2, [pc, #404]	; (800aa14 <UART_SetConfig+0x384>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	f003 0207 	and.w	r2, r3, #7
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4442      	add	r2, r8
 800a88e:	609a      	str	r2, [r3, #8]
 800a890:	e26f      	b.n	800ad72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a892:	f7fd fecd 	bl	8008630 <HAL_RCC_GetPCLK1Freq>
 800a896:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	461d      	mov	r5, r3
 800a89c:	f04f 0600 	mov.w	r6, #0
 800a8a0:	46a8      	mov	r8, r5
 800a8a2:	46b1      	mov	r9, r6
 800a8a4:	eb18 0308 	adds.w	r3, r8, r8
 800a8a8:	eb49 0409 	adc.w	r4, r9, r9
 800a8ac:	4698      	mov	r8, r3
 800a8ae:	46a1      	mov	r9, r4
 800a8b0:	eb18 0805 	adds.w	r8, r8, r5
 800a8b4:	eb49 0906 	adc.w	r9, r9, r6
 800a8b8:	f04f 0100 	mov.w	r1, #0
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8cc:	4688      	mov	r8, r1
 800a8ce:	4691      	mov	r9, r2
 800a8d0:	eb18 0005 	adds.w	r0, r8, r5
 800a8d4:	eb49 0106 	adc.w	r1, r9, r6
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	461d      	mov	r5, r3
 800a8de:	f04f 0600 	mov.w	r6, #0
 800a8e2:	196b      	adds	r3, r5, r5
 800a8e4:	eb46 0406 	adc.w	r4, r6, r6
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4623      	mov	r3, r4
 800a8ec:	f7f6 f9e4 	bl	8000cb8 <__aeabi_uldivmod>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4b47      	ldr	r3, [pc, #284]	; (800aa14 <UART_SetConfig+0x384>)
 800a8f8:	fba3 2302 	umull	r2, r3, r3, r2
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	461d      	mov	r5, r3
 800a906:	f04f 0600 	mov.w	r6, #0
 800a90a:	46a9      	mov	r9, r5
 800a90c:	46b2      	mov	sl, r6
 800a90e:	eb19 0309 	adds.w	r3, r9, r9
 800a912:	eb4a 040a 	adc.w	r4, sl, sl
 800a916:	4699      	mov	r9, r3
 800a918:	46a2      	mov	sl, r4
 800a91a:	eb19 0905 	adds.w	r9, r9, r5
 800a91e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a922:	f04f 0100 	mov.w	r1, #0
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a92e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a932:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a936:	4689      	mov	r9, r1
 800a938:	4692      	mov	sl, r2
 800a93a:	eb19 0005 	adds.w	r0, r9, r5
 800a93e:	eb4a 0106 	adc.w	r1, sl, r6
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	461d      	mov	r5, r3
 800a948:	f04f 0600 	mov.w	r6, #0
 800a94c:	196b      	adds	r3, r5, r5
 800a94e:	eb46 0406 	adc.w	r4, r6, r6
 800a952:	461a      	mov	r2, r3
 800a954:	4623      	mov	r3, r4
 800a956:	f7f6 f9af 	bl	8000cb8 <__aeabi_uldivmod>
 800a95a:	4603      	mov	r3, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	461a      	mov	r2, r3
 800a960:	4b2c      	ldr	r3, [pc, #176]	; (800aa14 <UART_SetConfig+0x384>)
 800a962:	fba3 1302 	umull	r1, r3, r3, r2
 800a966:	095b      	lsrs	r3, r3, #5
 800a968:	2164      	movs	r1, #100	; 0x64
 800a96a:	fb01 f303 	mul.w	r3, r1, r3
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	00db      	lsls	r3, r3, #3
 800a972:	3332      	adds	r3, #50	; 0x32
 800a974:	4a27      	ldr	r2, [pc, #156]	; (800aa14 <UART_SetConfig+0x384>)
 800a976:	fba2 2303 	umull	r2, r3, r2, r3
 800a97a:	095b      	lsrs	r3, r3, #5
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a982:	4498      	add	r8, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	461d      	mov	r5, r3
 800a988:	f04f 0600 	mov.w	r6, #0
 800a98c:	46a9      	mov	r9, r5
 800a98e:	46b2      	mov	sl, r6
 800a990:	eb19 0309 	adds.w	r3, r9, r9
 800a994:	eb4a 040a 	adc.w	r4, sl, sl
 800a998:	4699      	mov	r9, r3
 800a99a:	46a2      	mov	sl, r4
 800a99c:	eb19 0905 	adds.w	r9, r9, r5
 800a9a0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9a4:	f04f 0100 	mov.w	r1, #0
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	4692      	mov	sl, r2
 800a9bc:	eb19 0005 	adds.w	r0, r9, r5
 800a9c0:	eb4a 0106 	adc.w	r1, sl, r6
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	461d      	mov	r5, r3
 800a9ca:	f04f 0600 	mov.w	r6, #0
 800a9ce:	196b      	adds	r3, r5, r5
 800a9d0:	eb46 0406 	adc.w	r4, r6, r6
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4623      	mov	r3, r4
 800a9d8:	f7f6 f96e 	bl	8000cb8 <__aeabi_uldivmod>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <UART_SetConfig+0x384>)
 800a9e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	2164      	movs	r1, #100	; 0x64
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	3332      	adds	r3, #50	; 0x32
 800a9f6:	4a07      	ldr	r2, [pc, #28]	; (800aa14 <UART_SetConfig+0x384>)
 800a9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	f003 0207 	and.w	r2, r3, #7
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4442      	add	r2, r8
 800aa08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aa0a:	e1b2      	b.n	800ad72 <UART_SetConfig+0x6e2>
 800aa0c:	40011000 	.word	0x40011000
 800aa10:	40011400 	.word	0x40011400
 800aa14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4ad7      	ldr	r2, [pc, #860]	; (800ad7c <UART_SetConfig+0x6ec>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d005      	beq.n	800aa2e <UART_SetConfig+0x39e>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4ad6      	ldr	r2, [pc, #856]	; (800ad80 <UART_SetConfig+0x6f0>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	f040 80d1 	bne.w	800abd0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa2e:	f7fd fe13 	bl	8008658 <HAL_RCC_GetPCLK2Freq>
 800aa32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	469a      	mov	sl, r3
 800aa38:	f04f 0b00 	mov.w	fp, #0
 800aa3c:	46d0      	mov	r8, sl
 800aa3e:	46d9      	mov	r9, fp
 800aa40:	eb18 0308 	adds.w	r3, r8, r8
 800aa44:	eb49 0409 	adc.w	r4, r9, r9
 800aa48:	4698      	mov	r8, r3
 800aa4a:	46a1      	mov	r9, r4
 800aa4c:	eb18 080a 	adds.w	r8, r8, sl
 800aa50:	eb49 090b 	adc.w	r9, r9, fp
 800aa54:	f04f 0100 	mov.w	r1, #0
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa68:	4688      	mov	r8, r1
 800aa6a:	4691      	mov	r9, r2
 800aa6c:	eb1a 0508 	adds.w	r5, sl, r8
 800aa70:	eb4b 0609 	adc.w	r6, fp, r9
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	f04f 0300 	mov.w	r3, #0
 800aa82:	f04f 0400 	mov.w	r4, #0
 800aa86:	0094      	lsls	r4, r2, #2
 800aa88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa8c:	008b      	lsls	r3, r1, #2
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4623      	mov	r3, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	4631      	mov	r1, r6
 800aa96:	f7f6 f90f 	bl	8000cb8 <__aeabi_uldivmod>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	4bb8      	ldr	r3, [pc, #736]	; (800ad84 <UART_SetConfig+0x6f4>)
 800aaa2:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	469b      	mov	fp, r3
 800aab0:	f04f 0c00 	mov.w	ip, #0
 800aab4:	46d9      	mov	r9, fp
 800aab6:	46e2      	mov	sl, ip
 800aab8:	eb19 0309 	adds.w	r3, r9, r9
 800aabc:	eb4a 040a 	adc.w	r4, sl, sl
 800aac0:	4699      	mov	r9, r3
 800aac2:	46a2      	mov	sl, r4
 800aac4:	eb19 090b 	adds.w	r9, r9, fp
 800aac8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aacc:	f04f 0100 	mov.w	r1, #0
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aadc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aae0:	4689      	mov	r9, r1
 800aae2:	4692      	mov	sl, r2
 800aae4:	eb1b 0509 	adds.w	r5, fp, r9
 800aae8:	eb4c 060a 	adc.w	r6, ip, sl
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f04f 0200 	mov.w	r2, #0
 800aaf6:	f04f 0300 	mov.w	r3, #0
 800aafa:	f04f 0400 	mov.w	r4, #0
 800aafe:	0094      	lsls	r4, r2, #2
 800ab00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab04:	008b      	lsls	r3, r1, #2
 800ab06:	461a      	mov	r2, r3
 800ab08:	4623      	mov	r3, r4
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	f7f6 f8d3 	bl	8000cb8 <__aeabi_uldivmod>
 800ab12:	4603      	mov	r3, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b9a      	ldr	r3, [pc, #616]	; (800ad84 <UART_SetConfig+0x6f4>)
 800ab1a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	2164      	movs	r1, #100	; 0x64
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	3332      	adds	r3, #50	; 0x32
 800ab2c:	4a95      	ldr	r2, [pc, #596]	; (800ad84 <UART_SetConfig+0x6f4>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	095b      	lsrs	r3, r3, #5
 800ab34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab38:	4498      	add	r8, r3
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	469b      	mov	fp, r3
 800ab3e:	f04f 0c00 	mov.w	ip, #0
 800ab42:	46d9      	mov	r9, fp
 800ab44:	46e2      	mov	sl, ip
 800ab46:	eb19 0309 	adds.w	r3, r9, r9
 800ab4a:	eb4a 040a 	adc.w	r4, sl, sl
 800ab4e:	4699      	mov	r9, r3
 800ab50:	46a2      	mov	sl, r4
 800ab52:	eb19 090b 	adds.w	r9, r9, fp
 800ab56:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab5a:	f04f 0100 	mov.w	r1, #0
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab6e:	4689      	mov	r9, r1
 800ab70:	4692      	mov	sl, r2
 800ab72:	eb1b 0509 	adds.w	r5, fp, r9
 800ab76:	eb4c 060a 	adc.w	r6, ip, sl
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	f04f 0400 	mov.w	r4, #0
 800ab8c:	0094      	lsls	r4, r2, #2
 800ab8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab92:	008b      	lsls	r3, r1, #2
 800ab94:	461a      	mov	r2, r3
 800ab96:	4623      	mov	r3, r4
 800ab98:	4628      	mov	r0, r5
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	f7f6 f88c 	bl	8000cb8 <__aeabi_uldivmod>
 800aba0:	4603      	mov	r3, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	461a      	mov	r2, r3
 800aba6:	4b77      	ldr	r3, [pc, #476]	; (800ad84 <UART_SetConfig+0x6f4>)
 800aba8:	fba3 1302 	umull	r1, r3, r3, r2
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	2164      	movs	r1, #100	; 0x64
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	3332      	adds	r3, #50	; 0x32
 800abba:	4a72      	ldr	r2, [pc, #456]	; (800ad84 <UART_SetConfig+0x6f4>)
 800abbc:	fba2 2303 	umull	r2, r3, r2, r3
 800abc0:	095b      	lsrs	r3, r3, #5
 800abc2:	f003 020f 	and.w	r2, r3, #15
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4442      	add	r2, r8
 800abcc:	609a      	str	r2, [r3, #8]
 800abce:	e0d0      	b.n	800ad72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800abd0:	f7fd fd2e 	bl	8008630 <HAL_RCC_GetPCLK1Freq>
 800abd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	469a      	mov	sl, r3
 800abda:	f04f 0b00 	mov.w	fp, #0
 800abde:	46d0      	mov	r8, sl
 800abe0:	46d9      	mov	r9, fp
 800abe2:	eb18 0308 	adds.w	r3, r8, r8
 800abe6:	eb49 0409 	adc.w	r4, r9, r9
 800abea:	4698      	mov	r8, r3
 800abec:	46a1      	mov	r9, r4
 800abee:	eb18 080a 	adds.w	r8, r8, sl
 800abf2:	eb49 090b 	adc.w	r9, r9, fp
 800abf6:	f04f 0100 	mov.w	r1, #0
 800abfa:	f04f 0200 	mov.w	r2, #0
 800abfe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac0a:	4688      	mov	r8, r1
 800ac0c:	4691      	mov	r9, r2
 800ac0e:	eb1a 0508 	adds.w	r5, sl, r8
 800ac12:	eb4b 0609 	adc.w	r6, fp, r9
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f04f 0200 	mov.w	r2, #0
 800ac20:	f04f 0300 	mov.w	r3, #0
 800ac24:	f04f 0400 	mov.w	r4, #0
 800ac28:	0094      	lsls	r4, r2, #2
 800ac2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac2e:	008b      	lsls	r3, r1, #2
 800ac30:	461a      	mov	r2, r3
 800ac32:	4623      	mov	r3, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	4631      	mov	r1, r6
 800ac38:	f7f6 f83e 	bl	8000cb8 <__aeabi_uldivmod>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	460c      	mov	r4, r1
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b50      	ldr	r3, [pc, #320]	; (800ad84 <UART_SetConfig+0x6f4>)
 800ac44:	fba3 2302 	umull	r2, r3, r3, r2
 800ac48:	095b      	lsrs	r3, r3, #5
 800ac4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	469b      	mov	fp, r3
 800ac52:	f04f 0c00 	mov.w	ip, #0
 800ac56:	46d9      	mov	r9, fp
 800ac58:	46e2      	mov	sl, ip
 800ac5a:	eb19 0309 	adds.w	r3, r9, r9
 800ac5e:	eb4a 040a 	adc.w	r4, sl, sl
 800ac62:	4699      	mov	r9, r3
 800ac64:	46a2      	mov	sl, r4
 800ac66:	eb19 090b 	adds.w	r9, r9, fp
 800ac6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac6e:	f04f 0100 	mov.w	r1, #0
 800ac72:	f04f 0200 	mov.w	r2, #0
 800ac76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac82:	4689      	mov	r9, r1
 800ac84:	4692      	mov	sl, r2
 800ac86:	eb1b 0509 	adds.w	r5, fp, r9
 800ac8a:	eb4c 060a 	adc.w	r6, ip, sl
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	4619      	mov	r1, r3
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	f04f 0400 	mov.w	r4, #0
 800aca0:	0094      	lsls	r4, r2, #2
 800aca2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aca6:	008b      	lsls	r3, r1, #2
 800aca8:	461a      	mov	r2, r3
 800acaa:	4623      	mov	r3, r4
 800acac:	4628      	mov	r0, r5
 800acae:	4631      	mov	r1, r6
 800acb0:	f7f6 f802 	bl	8000cb8 <__aeabi_uldivmod>
 800acb4:	4603      	mov	r3, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	461a      	mov	r2, r3
 800acba:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <UART_SetConfig+0x6f4>)
 800acbc:	fba3 1302 	umull	r1, r3, r3, r2
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	2164      	movs	r1, #100	; 0x64
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	011b      	lsls	r3, r3, #4
 800accc:	3332      	adds	r3, #50	; 0x32
 800acce:	4a2d      	ldr	r2, [pc, #180]	; (800ad84 <UART_SetConfig+0x6f4>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acda:	4498      	add	r8, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	469b      	mov	fp, r3
 800ace0:	f04f 0c00 	mov.w	ip, #0
 800ace4:	46d9      	mov	r9, fp
 800ace6:	46e2      	mov	sl, ip
 800ace8:	eb19 0309 	adds.w	r3, r9, r9
 800acec:	eb4a 040a 	adc.w	r4, sl, sl
 800acf0:	4699      	mov	r9, r3
 800acf2:	46a2      	mov	sl, r4
 800acf4:	eb19 090b 	adds.w	r9, r9, fp
 800acf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acfc:	f04f 0100 	mov.w	r1, #0
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad10:	4689      	mov	r9, r1
 800ad12:	4692      	mov	sl, r2
 800ad14:	eb1b 0509 	adds.w	r5, fp, r9
 800ad18:	eb4c 060a 	adc.w	r6, ip, sl
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4619      	mov	r1, r3
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	f04f 0400 	mov.w	r4, #0
 800ad2e:	0094      	lsls	r4, r2, #2
 800ad30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad34:	008b      	lsls	r3, r1, #2
 800ad36:	461a      	mov	r2, r3
 800ad38:	4623      	mov	r3, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	f7f5 ffbb 	bl	8000cb8 <__aeabi_uldivmod>
 800ad42:	4603      	mov	r3, r0
 800ad44:	460c      	mov	r4, r1
 800ad46:	461a      	mov	r2, r3
 800ad48:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <UART_SetConfig+0x6f4>)
 800ad4a:	fba3 1302 	umull	r1, r3, r3, r2
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	2164      	movs	r1, #100	; 0x64
 800ad52:	fb01 f303 	mul.w	r3, r1, r3
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	011b      	lsls	r3, r3, #4
 800ad5a:	3332      	adds	r3, #50	; 0x32
 800ad5c:	4a09      	ldr	r2, [pc, #36]	; (800ad84 <UART_SetConfig+0x6f4>)
 800ad5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad62:	095b      	lsrs	r3, r3, #5
 800ad64:	f003 020f 	and.w	r2, r3, #15
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4442      	add	r2, r8
 800ad6e:	609a      	str	r2, [r3, #8]
}
 800ad70:	e7ff      	b.n	800ad72 <UART_SetConfig+0x6e2>
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7c:	40011000 	.word	0x40011000
 800ad80:	40011400 	.word	0x40011400
 800ad84:	51eb851f 	.word	0x51eb851f

0800ad88 <main>:




int main(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  hwInit();
 800ad8c:	f7fb fa72 	bl	8006274 <hwInit>
  apInit();
 800ad90:	f7f6 f912 	bl	8000fb8 <apInit>

  apMain();
 800ad94:	f7f6 f919 	bl	8000fca <apMain>

  return 0;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <__errno>:
 800ada0:	4b01      	ldr	r3, [pc, #4]	; (800ada8 <__errno+0x8>)
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20000060 	.word	0x20000060

0800adac <__libc_init_array>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	4e0d      	ldr	r6, [pc, #52]	; (800ade4 <__libc_init_array+0x38>)
 800adb0:	4c0d      	ldr	r4, [pc, #52]	; (800ade8 <__libc_init_array+0x3c>)
 800adb2:	1ba4      	subs	r4, r4, r6
 800adb4:	10a4      	asrs	r4, r4, #2
 800adb6:	2500      	movs	r5, #0
 800adb8:	42a5      	cmp	r5, r4
 800adba:	d109      	bne.n	800add0 <__libc_init_array+0x24>
 800adbc:	4e0b      	ldr	r6, [pc, #44]	; (800adec <__libc_init_array+0x40>)
 800adbe:	4c0c      	ldr	r4, [pc, #48]	; (800adf0 <__libc_init_array+0x44>)
 800adc0:	f002 fae6 	bl	800d390 <_init>
 800adc4:	1ba4      	subs	r4, r4, r6
 800adc6:	10a4      	asrs	r4, r4, #2
 800adc8:	2500      	movs	r5, #0
 800adca:	42a5      	cmp	r5, r4
 800adcc:	d105      	bne.n	800adda <__libc_init_array+0x2e>
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800add4:	4798      	blx	r3
 800add6:	3501      	adds	r5, #1
 800add8:	e7ee      	b.n	800adb8 <__libc_init_array+0xc>
 800adda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adde:	4798      	blx	r3
 800ade0:	3501      	adds	r5, #1
 800ade2:	e7f2      	b.n	800adca <__libc_init_array+0x1e>
 800ade4:	08019a40 	.word	0x08019a40
 800ade8:	08019a40 	.word	0x08019a40
 800adec:	08019a40 	.word	0x08019a40
 800adf0:	08019a44 	.word	0x08019a44

0800adf4 <memcpy>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	1e43      	subs	r3, r0, #1
 800adf8:	440a      	add	r2, r1
 800adfa:	4291      	cmp	r1, r2
 800adfc:	d100      	bne.n	800ae00 <memcpy+0xc>
 800adfe:	bd10      	pop	{r4, pc}
 800ae00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae08:	e7f7      	b.n	800adfa <memcpy+0x6>

0800ae0a <memset>:
 800ae0a:	4402      	add	r2, r0
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d100      	bne.n	800ae14 <memset+0xa>
 800ae12:	4770      	bx	lr
 800ae14:	f803 1b01 	strb.w	r1, [r3], #1
 800ae18:	e7f9      	b.n	800ae0e <memset+0x4>

0800ae1a <strcpy>:
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae20:	f803 2b01 	strb.w	r2, [r3], #1
 800ae24:	2a00      	cmp	r2, #0
 800ae26:	d1f9      	bne.n	800ae1c <strcpy+0x2>
 800ae28:	4770      	bx	lr

0800ae2a <sulp>:
 800ae2a:	b570      	push	{r4, r5, r6, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	ec45 4b10 	vmov	d0, r4, r5
 800ae34:	4616      	mov	r6, r2
 800ae36:	f001 fd5f 	bl	800c8f8 <__ulp>
 800ae3a:	ec51 0b10 	vmov	r0, r1, d0
 800ae3e:	b17e      	cbz	r6, 800ae60 <sulp+0x36>
 800ae40:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dd09      	ble.n	800ae60 <sulp+0x36>
 800ae4c:	051b      	lsls	r3, r3, #20
 800ae4e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae52:	2400      	movs	r4, #0
 800ae54:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae58:	4622      	mov	r2, r4
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f7f5 fbe4 	bl	8000628 <__aeabi_dmul>
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	0000      	movs	r0, r0
 800ae64:	0000      	movs	r0, r0
	...

0800ae68 <_strtod_l>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	461f      	mov	r7, r3
 800ae6e:	b0a1      	sub	sp, #132	; 0x84
 800ae70:	2300      	movs	r3, #0
 800ae72:	4681      	mov	r9, r0
 800ae74:	4638      	mov	r0, r7
 800ae76:	460e      	mov	r6, r1
 800ae78:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae7a:	931c      	str	r3, [sp, #112]	; 0x70
 800ae7c:	f001 fa5d 	bl	800c33a <__localeconv_l>
 800ae80:	4680      	mov	r8, r0
 800ae82:	6800      	ldr	r0, [r0, #0]
 800ae84:	f7f5 f9b6 	bl	80001f4 <strlen>
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	f04f 0b00 	mov.w	fp, #0
 800ae92:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae96:	781a      	ldrb	r2, [r3, #0]
 800ae98:	2a0d      	cmp	r2, #13
 800ae9a:	d832      	bhi.n	800af02 <_strtod_l+0x9a>
 800ae9c:	2a09      	cmp	r2, #9
 800ae9e:	d236      	bcs.n	800af0e <_strtod_l+0xa6>
 800aea0:	2a00      	cmp	r2, #0
 800aea2:	d03e      	beq.n	800af22 <_strtod_l+0xba>
 800aea4:	2300      	movs	r3, #0
 800aea6:	930d      	str	r3, [sp, #52]	; 0x34
 800aea8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800aeaa:	782b      	ldrb	r3, [r5, #0]
 800aeac:	2b30      	cmp	r3, #48	; 0x30
 800aeae:	f040 80ac 	bne.w	800b00a <_strtod_l+0x1a2>
 800aeb2:	786b      	ldrb	r3, [r5, #1]
 800aeb4:	2b58      	cmp	r3, #88	; 0x58
 800aeb6:	d001      	beq.n	800aebc <_strtod_l+0x54>
 800aeb8:	2b78      	cmp	r3, #120	; 0x78
 800aeba:	d167      	bne.n	800af8c <_strtod_l+0x124>
 800aebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	ab1c      	add	r3, sp, #112	; 0x70
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	9702      	str	r7, [sp, #8]
 800aec6:	ab1d      	add	r3, sp, #116	; 0x74
 800aec8:	4a88      	ldr	r2, [pc, #544]	; (800b0ec <_strtod_l+0x284>)
 800aeca:	a91b      	add	r1, sp, #108	; 0x6c
 800aecc:	4648      	mov	r0, r9
 800aece:	f000 ff5a 	bl	800bd86 <__gethex>
 800aed2:	f010 0407 	ands.w	r4, r0, #7
 800aed6:	4606      	mov	r6, r0
 800aed8:	d005      	beq.n	800aee6 <_strtod_l+0x7e>
 800aeda:	2c06      	cmp	r4, #6
 800aedc:	d12b      	bne.n	800af36 <_strtod_l+0xce>
 800aede:	3501      	adds	r5, #1
 800aee0:	2300      	movs	r3, #0
 800aee2:	951b      	str	r5, [sp, #108]	; 0x6c
 800aee4:	930d      	str	r3, [sp, #52]	; 0x34
 800aee6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 859a 	bne.w	800ba22 <_strtod_l+0xbba>
 800aeee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef0:	b1e3      	cbz	r3, 800af2c <_strtod_l+0xc4>
 800aef2:	4652      	mov	r2, sl
 800aef4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aef8:	ec43 2b10 	vmov	d0, r2, r3
 800aefc:	b021      	add	sp, #132	; 0x84
 800aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af02:	2a2b      	cmp	r2, #43	; 0x2b
 800af04:	d015      	beq.n	800af32 <_strtod_l+0xca>
 800af06:	2a2d      	cmp	r2, #45	; 0x2d
 800af08:	d004      	beq.n	800af14 <_strtod_l+0xac>
 800af0a:	2a20      	cmp	r2, #32
 800af0c:	d1ca      	bne.n	800aea4 <_strtod_l+0x3c>
 800af0e:	3301      	adds	r3, #1
 800af10:	931b      	str	r3, [sp, #108]	; 0x6c
 800af12:	e7bf      	b.n	800ae94 <_strtod_l+0x2c>
 800af14:	2201      	movs	r2, #1
 800af16:	920d      	str	r2, [sp, #52]	; 0x34
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1c2      	bne.n	800aea8 <_strtod_l+0x40>
 800af22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af24:	961b      	str	r6, [sp, #108]	; 0x6c
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 8579 	bne.w	800ba1e <_strtod_l+0xbb6>
 800af2c:	4652      	mov	r2, sl
 800af2e:	465b      	mov	r3, fp
 800af30:	e7e2      	b.n	800aef8 <_strtod_l+0x90>
 800af32:	2200      	movs	r2, #0
 800af34:	e7ef      	b.n	800af16 <_strtod_l+0xae>
 800af36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af38:	b13a      	cbz	r2, 800af4a <_strtod_l+0xe2>
 800af3a:	2135      	movs	r1, #53	; 0x35
 800af3c:	a81e      	add	r0, sp, #120	; 0x78
 800af3e:	f001 fdd3 	bl	800cae8 <__copybits>
 800af42:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af44:	4648      	mov	r0, r9
 800af46:	f001 fa40 	bl	800c3ca <_Bfree>
 800af4a:	3c01      	subs	r4, #1
 800af4c:	2c04      	cmp	r4, #4
 800af4e:	d806      	bhi.n	800af5e <_strtod_l+0xf6>
 800af50:	e8df f004 	tbb	[pc, r4]
 800af54:	1714030a 	.word	0x1714030a
 800af58:	0a          	.byte	0x0a
 800af59:	00          	.byte	0x00
 800af5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800af5e:	0730      	lsls	r0, r6, #28
 800af60:	d5c1      	bpl.n	800aee6 <_strtod_l+0x7e>
 800af62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800af66:	e7be      	b.n	800aee6 <_strtod_l+0x7e>
 800af68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800af6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af7a:	e7f0      	b.n	800af5e <_strtod_l+0xf6>
 800af7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b0f0 <_strtod_l+0x288>
 800af80:	e7ed      	b.n	800af5e <_strtod_l+0xf6>
 800af82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800af86:	f04f 3aff 	mov.w	sl, #4294967295
 800af8a:	e7e8      	b.n	800af5e <_strtod_l+0xf6>
 800af8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	921b      	str	r2, [sp, #108]	; 0x6c
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b30      	cmp	r3, #48	; 0x30
 800af96:	d0f9      	beq.n	800af8c <_strtod_l+0x124>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0a4      	beq.n	800aee6 <_strtod_l+0x7e>
 800af9c:	2301      	movs	r3, #1
 800af9e:	2500      	movs	r5, #0
 800afa0:	9306      	str	r3, [sp, #24]
 800afa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afa4:	9308      	str	r3, [sp, #32]
 800afa6:	9507      	str	r5, [sp, #28]
 800afa8:	9505      	str	r5, [sp, #20]
 800afaa:	220a      	movs	r2, #10
 800afac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800afae:	7807      	ldrb	r7, [r0, #0]
 800afb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800afb4:	b2d9      	uxtb	r1, r3
 800afb6:	2909      	cmp	r1, #9
 800afb8:	d929      	bls.n	800b00e <_strtod_l+0x1a6>
 800afba:	4622      	mov	r2, r4
 800afbc:	f8d8 1000 	ldr.w	r1, [r8]
 800afc0:	f002 f926 	bl	800d210 <strncmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d031      	beq.n	800b02c <_strtod_l+0x1c4>
 800afc8:	2000      	movs	r0, #0
 800afca:	9c05      	ldr	r4, [sp, #20]
 800afcc:	9004      	str	r0, [sp, #16]
 800afce:	463b      	mov	r3, r7
 800afd0:	4602      	mov	r2, r0
 800afd2:	2b65      	cmp	r3, #101	; 0x65
 800afd4:	d001      	beq.n	800afda <_strtod_l+0x172>
 800afd6:	2b45      	cmp	r3, #69	; 0x45
 800afd8:	d114      	bne.n	800b004 <_strtod_l+0x19c>
 800afda:	b924      	cbnz	r4, 800afe6 <_strtod_l+0x17e>
 800afdc:	b910      	cbnz	r0, 800afe4 <_strtod_l+0x17c>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d09e      	beq.n	800af22 <_strtod_l+0xba>
 800afe4:	2400      	movs	r4, #0
 800afe6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800afe8:	1c73      	adds	r3, r6, #1
 800afea:	931b      	str	r3, [sp, #108]	; 0x6c
 800afec:	7873      	ldrb	r3, [r6, #1]
 800afee:	2b2b      	cmp	r3, #43	; 0x2b
 800aff0:	d078      	beq.n	800b0e4 <_strtod_l+0x27c>
 800aff2:	2b2d      	cmp	r3, #45	; 0x2d
 800aff4:	d070      	beq.n	800b0d8 <_strtod_l+0x270>
 800aff6:	f04f 0c00 	mov.w	ip, #0
 800affa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800affe:	2f09      	cmp	r7, #9
 800b000:	d97c      	bls.n	800b0fc <_strtod_l+0x294>
 800b002:	961b      	str	r6, [sp, #108]	; 0x6c
 800b004:	f04f 0e00 	mov.w	lr, #0
 800b008:	e09a      	b.n	800b140 <_strtod_l+0x2d8>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e7c7      	b.n	800af9e <_strtod_l+0x136>
 800b00e:	9905      	ldr	r1, [sp, #20]
 800b010:	2908      	cmp	r1, #8
 800b012:	bfdd      	ittte	le
 800b014:	9907      	ldrle	r1, [sp, #28]
 800b016:	fb02 3301 	mlale	r3, r2, r1, r3
 800b01a:	9307      	strle	r3, [sp, #28]
 800b01c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b020:	9b05      	ldr	r3, [sp, #20]
 800b022:	3001      	adds	r0, #1
 800b024:	3301      	adds	r3, #1
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	901b      	str	r0, [sp, #108]	; 0x6c
 800b02a:	e7bf      	b.n	800afac <_strtod_l+0x144>
 800b02c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b02e:	191a      	adds	r2, r3, r4
 800b030:	921b      	str	r2, [sp, #108]	; 0x6c
 800b032:	9a05      	ldr	r2, [sp, #20]
 800b034:	5d1b      	ldrb	r3, [r3, r4]
 800b036:	2a00      	cmp	r2, #0
 800b038:	d037      	beq.n	800b0aa <_strtod_l+0x242>
 800b03a:	9c05      	ldr	r4, [sp, #20]
 800b03c:	4602      	mov	r2, r0
 800b03e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b042:	2909      	cmp	r1, #9
 800b044:	d913      	bls.n	800b06e <_strtod_l+0x206>
 800b046:	2101      	movs	r1, #1
 800b048:	9104      	str	r1, [sp, #16]
 800b04a:	e7c2      	b.n	800afd2 <_strtod_l+0x16a>
 800b04c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	921b      	str	r2, [sp, #108]	; 0x6c
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	3001      	adds	r0, #1
 800b056:	2b30      	cmp	r3, #48	; 0x30
 800b058:	d0f8      	beq.n	800b04c <_strtod_l+0x1e4>
 800b05a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b05e:	2a08      	cmp	r2, #8
 800b060:	f200 84e4 	bhi.w	800ba2c <_strtod_l+0xbc4>
 800b064:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b066:	9208      	str	r2, [sp, #32]
 800b068:	4602      	mov	r2, r0
 800b06a:	2000      	movs	r0, #0
 800b06c:	4604      	mov	r4, r0
 800b06e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b072:	f100 0101 	add.w	r1, r0, #1
 800b076:	d012      	beq.n	800b09e <_strtod_l+0x236>
 800b078:	440a      	add	r2, r1
 800b07a:	eb00 0c04 	add.w	ip, r0, r4
 800b07e:	4621      	mov	r1, r4
 800b080:	270a      	movs	r7, #10
 800b082:	458c      	cmp	ip, r1
 800b084:	d113      	bne.n	800b0ae <_strtod_l+0x246>
 800b086:	1821      	adds	r1, r4, r0
 800b088:	2908      	cmp	r1, #8
 800b08a:	f104 0401 	add.w	r4, r4, #1
 800b08e:	4404      	add	r4, r0
 800b090:	dc19      	bgt.n	800b0c6 <_strtod_l+0x25e>
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	210a      	movs	r1, #10
 800b096:	fb01 e303 	mla	r3, r1, r3, lr
 800b09a:	9307      	str	r3, [sp, #28]
 800b09c:	2100      	movs	r1, #0
 800b09e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0a0:	1c58      	adds	r0, r3, #1
 800b0a2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b0a4:	785b      	ldrb	r3, [r3, #1]
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	e7c9      	b.n	800b03e <_strtod_l+0x1d6>
 800b0aa:	9805      	ldr	r0, [sp, #20]
 800b0ac:	e7d3      	b.n	800b056 <_strtod_l+0x1ee>
 800b0ae:	2908      	cmp	r1, #8
 800b0b0:	f101 0101 	add.w	r1, r1, #1
 800b0b4:	dc03      	bgt.n	800b0be <_strtod_l+0x256>
 800b0b6:	9b07      	ldr	r3, [sp, #28]
 800b0b8:	437b      	muls	r3, r7
 800b0ba:	9307      	str	r3, [sp, #28]
 800b0bc:	e7e1      	b.n	800b082 <_strtod_l+0x21a>
 800b0be:	2910      	cmp	r1, #16
 800b0c0:	bfd8      	it	le
 800b0c2:	437d      	mulle	r5, r7
 800b0c4:	e7dd      	b.n	800b082 <_strtod_l+0x21a>
 800b0c6:	2c10      	cmp	r4, #16
 800b0c8:	bfdc      	itt	le
 800b0ca:	210a      	movle	r1, #10
 800b0cc:	fb01 e505 	mlale	r5, r1, r5, lr
 800b0d0:	e7e4      	b.n	800b09c <_strtod_l+0x234>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	e781      	b.n	800afdc <_strtod_l+0x174>
 800b0d8:	f04f 0c01 	mov.w	ip, #1
 800b0dc:	1cb3      	adds	r3, r6, #2
 800b0de:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0e0:	78b3      	ldrb	r3, [r6, #2]
 800b0e2:	e78a      	b.n	800affa <_strtod_l+0x192>
 800b0e4:	f04f 0c00 	mov.w	ip, #0
 800b0e8:	e7f8      	b.n	800b0dc <_strtod_l+0x274>
 800b0ea:	bf00      	nop
 800b0ec:	080197a8 	.word	0x080197a8
 800b0f0:	7ff00000 	.word	0x7ff00000
 800b0f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0f6:	1c5f      	adds	r7, r3, #1
 800b0f8:	971b      	str	r7, [sp, #108]	; 0x6c
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	2b30      	cmp	r3, #48	; 0x30
 800b0fe:	d0f9      	beq.n	800b0f4 <_strtod_l+0x28c>
 800b100:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b104:	2f08      	cmp	r7, #8
 800b106:	f63f af7d 	bhi.w	800b004 <_strtod_l+0x19c>
 800b10a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b10e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b110:	930a      	str	r3, [sp, #40]	; 0x28
 800b112:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b114:	1c5f      	adds	r7, r3, #1
 800b116:	971b      	str	r7, [sp, #108]	; 0x6c
 800b118:	785b      	ldrb	r3, [r3, #1]
 800b11a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b11e:	f1b8 0f09 	cmp.w	r8, #9
 800b122:	d937      	bls.n	800b194 <_strtod_l+0x32c>
 800b124:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b126:	1a7f      	subs	r7, r7, r1
 800b128:	2f08      	cmp	r7, #8
 800b12a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b12e:	dc37      	bgt.n	800b1a0 <_strtod_l+0x338>
 800b130:	45be      	cmp	lr, r7
 800b132:	bfa8      	it	ge
 800b134:	46be      	movge	lr, r7
 800b136:	f1bc 0f00 	cmp.w	ip, #0
 800b13a:	d001      	beq.n	800b140 <_strtod_l+0x2d8>
 800b13c:	f1ce 0e00 	rsb	lr, lr, #0
 800b140:	2c00      	cmp	r4, #0
 800b142:	d151      	bne.n	800b1e8 <_strtod_l+0x380>
 800b144:	2800      	cmp	r0, #0
 800b146:	f47f aece 	bne.w	800aee6 <_strtod_l+0x7e>
 800b14a:	9a06      	ldr	r2, [sp, #24]
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	f47f aeca 	bne.w	800aee6 <_strtod_l+0x7e>
 800b152:	9a04      	ldr	r2, [sp, #16]
 800b154:	2a00      	cmp	r2, #0
 800b156:	f47f aee4 	bne.w	800af22 <_strtod_l+0xba>
 800b15a:	2b4e      	cmp	r3, #78	; 0x4e
 800b15c:	d027      	beq.n	800b1ae <_strtod_l+0x346>
 800b15e:	dc21      	bgt.n	800b1a4 <_strtod_l+0x33c>
 800b160:	2b49      	cmp	r3, #73	; 0x49
 800b162:	f47f aede 	bne.w	800af22 <_strtod_l+0xba>
 800b166:	49a0      	ldr	r1, [pc, #640]	; (800b3e8 <_strtod_l+0x580>)
 800b168:	a81b      	add	r0, sp, #108	; 0x6c
 800b16a:	f001 f83f 	bl	800c1ec <__match>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f aed7 	beq.w	800af22 <_strtod_l+0xba>
 800b174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b176:	499d      	ldr	r1, [pc, #628]	; (800b3ec <_strtod_l+0x584>)
 800b178:	3b01      	subs	r3, #1
 800b17a:	a81b      	add	r0, sp, #108	; 0x6c
 800b17c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b17e:	f001 f835 	bl	800c1ec <__match>
 800b182:	b910      	cbnz	r0, 800b18a <_strtod_l+0x322>
 800b184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b186:	3301      	adds	r3, #1
 800b188:	931b      	str	r3, [sp, #108]	; 0x6c
 800b18a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b400 <_strtod_l+0x598>
 800b18e:	f04f 0a00 	mov.w	sl, #0
 800b192:	e6a8      	b.n	800aee6 <_strtod_l+0x7e>
 800b194:	210a      	movs	r1, #10
 800b196:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b19a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b19e:	e7b8      	b.n	800b112 <_strtod_l+0x2aa>
 800b1a0:	46be      	mov	lr, r7
 800b1a2:	e7c8      	b.n	800b136 <_strtod_l+0x2ce>
 800b1a4:	2b69      	cmp	r3, #105	; 0x69
 800b1a6:	d0de      	beq.n	800b166 <_strtod_l+0x2fe>
 800b1a8:	2b6e      	cmp	r3, #110	; 0x6e
 800b1aa:	f47f aeba 	bne.w	800af22 <_strtod_l+0xba>
 800b1ae:	4990      	ldr	r1, [pc, #576]	; (800b3f0 <_strtod_l+0x588>)
 800b1b0:	a81b      	add	r0, sp, #108	; 0x6c
 800b1b2:	f001 f81b 	bl	800c1ec <__match>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f aeb3 	beq.w	800af22 <_strtod_l+0xba>
 800b1bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b28      	cmp	r3, #40	; 0x28
 800b1c2:	d10e      	bne.n	800b1e2 <_strtod_l+0x37a>
 800b1c4:	aa1e      	add	r2, sp, #120	; 0x78
 800b1c6:	498b      	ldr	r1, [pc, #556]	; (800b3f4 <_strtod_l+0x58c>)
 800b1c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b1ca:	f001 f823 	bl	800c214 <__hexnan>
 800b1ce:	2805      	cmp	r0, #5
 800b1d0:	d107      	bne.n	800b1e2 <_strtod_l+0x37a>
 800b1d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b1d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b1dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1e0:	e681      	b.n	800aee6 <_strtod_l+0x7e>
 800b1e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b408 <_strtod_l+0x5a0>
 800b1e6:	e7d2      	b.n	800b18e <_strtod_l+0x326>
 800b1e8:	ebae 0302 	sub.w	r3, lr, r2
 800b1ec:	9306      	str	r3, [sp, #24]
 800b1ee:	9b05      	ldr	r3, [sp, #20]
 800b1f0:	9807      	ldr	r0, [sp, #28]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	bf08      	it	eq
 800b1f6:	4623      	moveq	r3, r4
 800b1f8:	2c10      	cmp	r4, #16
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	46a0      	mov	r8, r4
 800b1fe:	bfa8      	it	ge
 800b200:	f04f 0810 	movge.w	r8, #16
 800b204:	f7f5 f996 	bl	8000534 <__aeabi_ui2d>
 800b208:	2c09      	cmp	r4, #9
 800b20a:	4682      	mov	sl, r0
 800b20c:	468b      	mov	fp, r1
 800b20e:	dc13      	bgt.n	800b238 <_strtod_l+0x3d0>
 800b210:	9b06      	ldr	r3, [sp, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	f43f ae67 	beq.w	800aee6 <_strtod_l+0x7e>
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	dd7a      	ble.n	800b312 <_strtod_l+0x4aa>
 800b21c:	2b16      	cmp	r3, #22
 800b21e:	dc61      	bgt.n	800b2e4 <_strtod_l+0x47c>
 800b220:	4a75      	ldr	r2, [pc, #468]	; (800b3f8 <_strtod_l+0x590>)
 800b222:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b226:	e9de 0100 	ldrd	r0, r1, [lr]
 800b22a:	4652      	mov	r2, sl
 800b22c:	465b      	mov	r3, fp
 800b22e:	f7f5 f9fb 	bl	8000628 <__aeabi_dmul>
 800b232:	4682      	mov	sl, r0
 800b234:	468b      	mov	fp, r1
 800b236:	e656      	b.n	800aee6 <_strtod_l+0x7e>
 800b238:	4b6f      	ldr	r3, [pc, #444]	; (800b3f8 <_strtod_l+0x590>)
 800b23a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b23e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b242:	f7f5 f9f1 	bl	8000628 <__aeabi_dmul>
 800b246:	4606      	mov	r6, r0
 800b248:	4628      	mov	r0, r5
 800b24a:	460f      	mov	r7, r1
 800b24c:	f7f5 f972 	bl	8000534 <__aeabi_ui2d>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4630      	mov	r0, r6
 800b256:	4639      	mov	r1, r7
 800b258:	f7f5 f830 	bl	80002bc <__adddf3>
 800b25c:	2c0f      	cmp	r4, #15
 800b25e:	4682      	mov	sl, r0
 800b260:	468b      	mov	fp, r1
 800b262:	ddd5      	ble.n	800b210 <_strtod_l+0x3a8>
 800b264:	9b06      	ldr	r3, [sp, #24]
 800b266:	eba4 0808 	sub.w	r8, r4, r8
 800b26a:	4498      	add	r8, r3
 800b26c:	f1b8 0f00 	cmp.w	r8, #0
 800b270:	f340 8096 	ble.w	800b3a0 <_strtod_l+0x538>
 800b274:	f018 030f 	ands.w	r3, r8, #15
 800b278:	d00a      	beq.n	800b290 <_strtod_l+0x428>
 800b27a:	495f      	ldr	r1, [pc, #380]	; (800b3f8 <_strtod_l+0x590>)
 800b27c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b280:	4652      	mov	r2, sl
 800b282:	465b      	mov	r3, fp
 800b284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b288:	f7f5 f9ce 	bl	8000628 <__aeabi_dmul>
 800b28c:	4682      	mov	sl, r0
 800b28e:	468b      	mov	fp, r1
 800b290:	f038 080f 	bics.w	r8, r8, #15
 800b294:	d073      	beq.n	800b37e <_strtod_l+0x516>
 800b296:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b29a:	dd47      	ble.n	800b32c <_strtod_l+0x4c4>
 800b29c:	2400      	movs	r4, #0
 800b29e:	46a0      	mov	r8, r4
 800b2a0:	9407      	str	r4, [sp, #28]
 800b2a2:	9405      	str	r4, [sp, #20]
 800b2a4:	2322      	movs	r3, #34	; 0x22
 800b2a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b400 <_strtod_l+0x598>
 800b2aa:	f8c9 3000 	str.w	r3, [r9]
 800b2ae:	f04f 0a00 	mov.w	sl, #0
 800b2b2:	9b07      	ldr	r3, [sp, #28]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f43f ae16 	beq.w	800aee6 <_strtod_l+0x7e>
 800b2ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f001 f884 	bl	800c3ca <_Bfree>
 800b2c2:	9905      	ldr	r1, [sp, #20]
 800b2c4:	4648      	mov	r0, r9
 800b2c6:	f001 f880 	bl	800c3ca <_Bfree>
 800b2ca:	4641      	mov	r1, r8
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f001 f87c 	bl	800c3ca <_Bfree>
 800b2d2:	9907      	ldr	r1, [sp, #28]
 800b2d4:	4648      	mov	r0, r9
 800b2d6:	f001 f878 	bl	800c3ca <_Bfree>
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4648      	mov	r0, r9
 800b2de:	f001 f874 	bl	800c3ca <_Bfree>
 800b2e2:	e600      	b.n	800aee6 <_strtod_l+0x7e>
 800b2e4:	9a06      	ldr	r2, [sp, #24]
 800b2e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	dbba      	blt.n	800b264 <_strtod_l+0x3fc>
 800b2ee:	4d42      	ldr	r5, [pc, #264]	; (800b3f8 <_strtod_l+0x590>)
 800b2f0:	f1c4 040f 	rsb	r4, r4, #15
 800b2f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b300:	f7f5 f992 	bl	8000628 <__aeabi_dmul>
 800b304:	9b06      	ldr	r3, [sp, #24]
 800b306:	1b1c      	subs	r4, r3, r4
 800b308:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b30c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b310:	e78d      	b.n	800b22e <_strtod_l+0x3c6>
 800b312:	f113 0f16 	cmn.w	r3, #22
 800b316:	dba5      	blt.n	800b264 <_strtod_l+0x3fc>
 800b318:	4a37      	ldr	r2, [pc, #220]	; (800b3f8 <_strtod_l+0x590>)
 800b31a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b31e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b322:	4650      	mov	r0, sl
 800b324:	4659      	mov	r1, fp
 800b326:	f7f5 faa9 	bl	800087c <__aeabi_ddiv>
 800b32a:	e782      	b.n	800b232 <_strtod_l+0x3ca>
 800b32c:	2300      	movs	r3, #0
 800b32e:	4e33      	ldr	r6, [pc, #204]	; (800b3fc <_strtod_l+0x594>)
 800b330:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b334:	4650      	mov	r0, sl
 800b336:	4659      	mov	r1, fp
 800b338:	461d      	mov	r5, r3
 800b33a:	f1b8 0f01 	cmp.w	r8, #1
 800b33e:	dc21      	bgt.n	800b384 <_strtod_l+0x51c>
 800b340:	b10b      	cbz	r3, 800b346 <_strtod_l+0x4de>
 800b342:	4682      	mov	sl, r0
 800b344:	468b      	mov	fp, r1
 800b346:	4b2d      	ldr	r3, [pc, #180]	; (800b3fc <_strtod_l+0x594>)
 800b348:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b34c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b350:	4652      	mov	r2, sl
 800b352:	465b      	mov	r3, fp
 800b354:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b358:	f7f5 f966 	bl	8000628 <__aeabi_dmul>
 800b35c:	4b28      	ldr	r3, [pc, #160]	; (800b400 <_strtod_l+0x598>)
 800b35e:	460a      	mov	r2, r1
 800b360:	400b      	ands	r3, r1
 800b362:	4928      	ldr	r1, [pc, #160]	; (800b404 <_strtod_l+0x59c>)
 800b364:	428b      	cmp	r3, r1
 800b366:	4682      	mov	sl, r0
 800b368:	d898      	bhi.n	800b29c <_strtod_l+0x434>
 800b36a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b36e:	428b      	cmp	r3, r1
 800b370:	bf86      	itte	hi
 800b372:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b40c <_strtod_l+0x5a4>
 800b376:	f04f 3aff 	movhi.w	sl, #4294967295
 800b37a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b37e:	2300      	movs	r3, #0
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	e077      	b.n	800b474 <_strtod_l+0x60c>
 800b384:	f018 0f01 	tst.w	r8, #1
 800b388:	d006      	beq.n	800b398 <_strtod_l+0x530>
 800b38a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f5 f949 	bl	8000628 <__aeabi_dmul>
 800b396:	2301      	movs	r3, #1
 800b398:	3501      	adds	r5, #1
 800b39a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b39e:	e7cc      	b.n	800b33a <_strtod_l+0x4d2>
 800b3a0:	d0ed      	beq.n	800b37e <_strtod_l+0x516>
 800b3a2:	f1c8 0800 	rsb	r8, r8, #0
 800b3a6:	f018 020f 	ands.w	r2, r8, #15
 800b3aa:	d00a      	beq.n	800b3c2 <_strtod_l+0x55a>
 800b3ac:	4b12      	ldr	r3, [pc, #72]	; (800b3f8 <_strtod_l+0x590>)
 800b3ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b2:	4650      	mov	r0, sl
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f5 fa5f 	bl	800087c <__aeabi_ddiv>
 800b3be:	4682      	mov	sl, r0
 800b3c0:	468b      	mov	fp, r1
 800b3c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b3c6:	d0da      	beq.n	800b37e <_strtod_l+0x516>
 800b3c8:	f1b8 0f1f 	cmp.w	r8, #31
 800b3cc:	dd20      	ble.n	800b410 <_strtod_l+0x5a8>
 800b3ce:	2400      	movs	r4, #0
 800b3d0:	46a0      	mov	r8, r4
 800b3d2:	9407      	str	r4, [sp, #28]
 800b3d4:	9405      	str	r4, [sp, #20]
 800b3d6:	2322      	movs	r3, #34	; 0x22
 800b3d8:	f04f 0a00 	mov.w	sl, #0
 800b3dc:	f04f 0b00 	mov.w	fp, #0
 800b3e0:	f8c9 3000 	str.w	r3, [r9]
 800b3e4:	e765      	b.n	800b2b2 <_strtod_l+0x44a>
 800b3e6:	bf00      	nop
 800b3e8:	0801979c 	.word	0x0801979c
 800b3ec:	0801979f 	.word	0x0801979f
 800b3f0:	080197a5 	.word	0x080197a5
 800b3f4:	080197bc 	.word	0x080197bc
 800b3f8:	08019830 	.word	0x08019830
 800b3fc:	08019808 	.word	0x08019808
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	7ca00000 	.word	0x7ca00000
 800b408:	fff80000 	.word	0xfff80000
 800b40c:	7fefffff 	.word	0x7fefffff
 800b410:	f018 0310 	ands.w	r3, r8, #16
 800b414:	bf18      	it	ne
 800b416:	236a      	movne	r3, #106	; 0x6a
 800b418:	4da0      	ldr	r5, [pc, #640]	; (800b69c <_strtod_l+0x834>)
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	4650      	mov	r0, sl
 800b41e:	4659      	mov	r1, fp
 800b420:	2300      	movs	r3, #0
 800b422:	f1b8 0f00 	cmp.w	r8, #0
 800b426:	f300 810a 	bgt.w	800b63e <_strtod_l+0x7d6>
 800b42a:	b10b      	cbz	r3, 800b430 <_strtod_l+0x5c8>
 800b42c:	4682      	mov	sl, r0
 800b42e:	468b      	mov	fp, r1
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	b1bb      	cbz	r3, 800b464 <_strtod_l+0x5fc>
 800b434:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b438:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	4659      	mov	r1, fp
 800b440:	dd10      	ble.n	800b464 <_strtod_l+0x5fc>
 800b442:	2b1f      	cmp	r3, #31
 800b444:	f340 8107 	ble.w	800b656 <_strtod_l+0x7ee>
 800b448:	2b34      	cmp	r3, #52	; 0x34
 800b44a:	bfde      	ittt	le
 800b44c:	3b20      	suble	r3, #32
 800b44e:	f04f 32ff 	movle.w	r2, #4294967295
 800b452:	fa02 f303 	lslle.w	r3, r2, r3
 800b456:	f04f 0a00 	mov.w	sl, #0
 800b45a:	bfcc      	ite	gt
 800b45c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b460:	ea03 0b01 	andle.w	fp, r3, r1
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	4650      	mov	r0, sl
 800b46a:	4659      	mov	r1, fp
 800b46c:	f7f5 fb44 	bl	8000af8 <__aeabi_dcmpeq>
 800b470:	2800      	cmp	r0, #0
 800b472:	d1ac      	bne.n	800b3ce <_strtod_l+0x566>
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	9a05      	ldr	r2, [sp, #20]
 800b47a:	9908      	ldr	r1, [sp, #32]
 800b47c:	4623      	mov	r3, r4
 800b47e:	4648      	mov	r0, r9
 800b480:	f000 fff5 	bl	800c46e <__s2b>
 800b484:	9007      	str	r0, [sp, #28]
 800b486:	2800      	cmp	r0, #0
 800b488:	f43f af08 	beq.w	800b29c <_strtod_l+0x434>
 800b48c:	9a06      	ldr	r2, [sp, #24]
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	2a00      	cmp	r2, #0
 800b492:	f1c3 0300 	rsb	r3, r3, #0
 800b496:	bfa8      	it	ge
 800b498:	2300      	movge	r3, #0
 800b49a:	930e      	str	r3, [sp, #56]	; 0x38
 800b49c:	2400      	movs	r4, #0
 800b49e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4a2:	9316      	str	r3, [sp, #88]	; 0x58
 800b4a4:	46a0      	mov	r8, r4
 800b4a6:	9b07      	ldr	r3, [sp, #28]
 800b4a8:	4648      	mov	r0, r9
 800b4aa:	6859      	ldr	r1, [r3, #4]
 800b4ac:	f000 ff59 	bl	800c362 <_Balloc>
 800b4b0:	9005      	str	r0, [sp, #20]
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f43f aef6 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b4b8:	9b07      	ldr	r3, [sp, #28]
 800b4ba:	691a      	ldr	r2, [r3, #16]
 800b4bc:	3202      	adds	r2, #2
 800b4be:	f103 010c 	add.w	r1, r3, #12
 800b4c2:	0092      	lsls	r2, r2, #2
 800b4c4:	300c      	adds	r0, #12
 800b4c6:	f7ff fc95 	bl	800adf4 <memcpy>
 800b4ca:	aa1e      	add	r2, sp, #120	; 0x78
 800b4cc:	a91d      	add	r1, sp, #116	; 0x74
 800b4ce:	ec4b ab10 	vmov	d0, sl, fp
 800b4d2:	4648      	mov	r0, r9
 800b4d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b4d8:	f001 fa84 	bl	800c9e4 <__d2b>
 800b4dc:	901c      	str	r0, [sp, #112]	; 0x70
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f43f aee0 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	4648      	mov	r0, r9
 800b4e8:	f001 f84d 	bl	800c586 <__i2b>
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f43f aed8 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b4f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b4f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b4f8:	2e00      	cmp	r6, #0
 800b4fa:	bfab      	itete	ge
 800b4fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b4fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b500:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b502:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b504:	bfac      	ite	ge
 800b506:	18f7      	addge	r7, r6, r3
 800b508:	1b9d      	sublt	r5, r3, r6
 800b50a:	9b04      	ldr	r3, [sp, #16]
 800b50c:	1af6      	subs	r6, r6, r3
 800b50e:	4416      	add	r6, r2
 800b510:	4b63      	ldr	r3, [pc, #396]	; (800b6a0 <_strtod_l+0x838>)
 800b512:	3e01      	subs	r6, #1
 800b514:	429e      	cmp	r6, r3
 800b516:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b51a:	f280 80af 	bge.w	800b67c <_strtod_l+0x814>
 800b51e:	1b9b      	subs	r3, r3, r6
 800b520:	2b1f      	cmp	r3, #31
 800b522:	eba2 0203 	sub.w	r2, r2, r3
 800b526:	f04f 0101 	mov.w	r1, #1
 800b52a:	f300 809b 	bgt.w	800b664 <_strtod_l+0x7fc>
 800b52e:	fa01 f303 	lsl.w	r3, r1, r3
 800b532:	930f      	str	r3, [sp, #60]	; 0x3c
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	18be      	adds	r6, r7, r2
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	42b7      	cmp	r7, r6
 800b53e:	4415      	add	r5, r2
 800b540:	441d      	add	r5, r3
 800b542:	463b      	mov	r3, r7
 800b544:	bfa8      	it	ge
 800b546:	4633      	movge	r3, r6
 800b548:	42ab      	cmp	r3, r5
 800b54a:	bfa8      	it	ge
 800b54c:	462b      	movge	r3, r5
 800b54e:	2b00      	cmp	r3, #0
 800b550:	bfc2      	ittt	gt
 800b552:	1af6      	subgt	r6, r6, r3
 800b554:	1aed      	subgt	r5, r5, r3
 800b556:	1aff      	subgt	r7, r7, r3
 800b558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b55a:	b1bb      	cbz	r3, 800b58c <_strtod_l+0x724>
 800b55c:	4641      	mov	r1, r8
 800b55e:	461a      	mov	r2, r3
 800b560:	4648      	mov	r0, r9
 800b562:	f001 f8af 	bl	800c6c4 <__pow5mult>
 800b566:	4680      	mov	r8, r0
 800b568:	2800      	cmp	r0, #0
 800b56a:	f43f ae9b 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b56e:	4601      	mov	r1, r0
 800b570:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b572:	4648      	mov	r0, r9
 800b574:	f001 f810 	bl	800c598 <__multiply>
 800b578:	900c      	str	r0, [sp, #48]	; 0x30
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f43f ae92 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b580:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b582:	4648      	mov	r0, r9
 800b584:	f000 ff21 	bl	800c3ca <_Bfree>
 800b588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b58a:	931c      	str	r3, [sp, #112]	; 0x70
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	dc7a      	bgt.n	800b686 <_strtod_l+0x81e>
 800b590:	9b06      	ldr	r3, [sp, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	dd08      	ble.n	800b5a8 <_strtod_l+0x740>
 800b596:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b598:	9905      	ldr	r1, [sp, #20]
 800b59a:	4648      	mov	r0, r9
 800b59c:	f001 f892 	bl	800c6c4 <__pow5mult>
 800b5a0:	9005      	str	r0, [sp, #20]
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f ae7e 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b5a8:	2d00      	cmp	r5, #0
 800b5aa:	dd08      	ble.n	800b5be <_strtod_l+0x756>
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	9905      	ldr	r1, [sp, #20]
 800b5b0:	4648      	mov	r0, r9
 800b5b2:	f001 f8d5 	bl	800c760 <__lshift>
 800b5b6:	9005      	str	r0, [sp, #20]
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f43f ae73 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b5be:	2f00      	cmp	r7, #0
 800b5c0:	dd08      	ble.n	800b5d4 <_strtod_l+0x76c>
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	4648      	mov	r0, r9
 800b5c8:	f001 f8ca 	bl	800c760 <__lshift>
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f ae68 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b5d4:	9a05      	ldr	r2, [sp, #20]
 800b5d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5d8:	4648      	mov	r0, r9
 800b5da:	f001 f92f 	bl	800c83c <__mdiff>
 800b5de:	4604      	mov	r4, r0
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f ae5f 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b5e6:	68c3      	ldr	r3, [r0, #12]
 800b5e8:	930c      	str	r3, [sp, #48]	; 0x30
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60c3      	str	r3, [r0, #12]
 800b5ee:	4641      	mov	r1, r8
 800b5f0:	f001 f90a 	bl	800c808 <__mcmp>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	da55      	bge.n	800b6a4 <_strtod_l+0x83c>
 800b5f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5fa:	b9e3      	cbnz	r3, 800b636 <_strtod_l+0x7ce>
 800b5fc:	f1ba 0f00 	cmp.w	sl, #0
 800b600:	d119      	bne.n	800b636 <_strtod_l+0x7ce>
 800b602:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b606:	b9b3      	cbnz	r3, 800b636 <_strtod_l+0x7ce>
 800b608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b60c:	0d1b      	lsrs	r3, r3, #20
 800b60e:	051b      	lsls	r3, r3, #20
 800b610:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b614:	d90f      	bls.n	800b636 <_strtod_l+0x7ce>
 800b616:	6963      	ldr	r3, [r4, #20]
 800b618:	b913      	cbnz	r3, 800b620 <_strtod_l+0x7b8>
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	dd0a      	ble.n	800b636 <_strtod_l+0x7ce>
 800b620:	4621      	mov	r1, r4
 800b622:	2201      	movs	r2, #1
 800b624:	4648      	mov	r0, r9
 800b626:	f001 f89b 	bl	800c760 <__lshift>
 800b62a:	4641      	mov	r1, r8
 800b62c:	4604      	mov	r4, r0
 800b62e:	f001 f8eb 	bl	800c808 <__mcmp>
 800b632:	2800      	cmp	r0, #0
 800b634:	dc67      	bgt.n	800b706 <_strtod_l+0x89e>
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d171      	bne.n	800b720 <_strtod_l+0x8b8>
 800b63c:	e63d      	b.n	800b2ba <_strtod_l+0x452>
 800b63e:	f018 0f01 	tst.w	r8, #1
 800b642:	d004      	beq.n	800b64e <_strtod_l+0x7e6>
 800b644:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b648:	f7f4 ffee 	bl	8000628 <__aeabi_dmul>
 800b64c:	2301      	movs	r3, #1
 800b64e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b652:	3508      	adds	r5, #8
 800b654:	e6e5      	b.n	800b422 <_strtod_l+0x5ba>
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	fa02 f303 	lsl.w	r3, r2, r3
 800b65e:	ea03 0a0a 	and.w	sl, r3, sl
 800b662:	e6ff      	b.n	800b464 <_strtod_l+0x5fc>
 800b664:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b668:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b66c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b670:	36e2      	adds	r6, #226	; 0xe2
 800b672:	fa01 f306 	lsl.w	r3, r1, r6
 800b676:	930a      	str	r3, [sp, #40]	; 0x28
 800b678:	910f      	str	r1, [sp, #60]	; 0x3c
 800b67a:	e75d      	b.n	800b538 <_strtod_l+0x6d0>
 800b67c:	2300      	movs	r3, #0
 800b67e:	930a      	str	r3, [sp, #40]	; 0x28
 800b680:	2301      	movs	r3, #1
 800b682:	930f      	str	r3, [sp, #60]	; 0x3c
 800b684:	e758      	b.n	800b538 <_strtod_l+0x6d0>
 800b686:	4632      	mov	r2, r6
 800b688:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b68a:	4648      	mov	r0, r9
 800b68c:	f001 f868 	bl	800c760 <__lshift>
 800b690:	901c      	str	r0, [sp, #112]	; 0x70
 800b692:	2800      	cmp	r0, #0
 800b694:	f47f af7c 	bne.w	800b590 <_strtod_l+0x728>
 800b698:	e604      	b.n	800b2a4 <_strtod_l+0x43c>
 800b69a:	bf00      	nop
 800b69c:	080197d0 	.word	0x080197d0
 800b6a0:	fffffc02 	.word	0xfffffc02
 800b6a4:	465d      	mov	r5, fp
 800b6a6:	f040 8086 	bne.w	800b7b6 <_strtod_l+0x94e>
 800b6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6b0:	b32a      	cbz	r2, 800b6fe <_strtod_l+0x896>
 800b6b2:	4aaf      	ldr	r2, [pc, #700]	; (800b970 <_strtod_l+0xb08>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d153      	bne.n	800b760 <_strtod_l+0x8f8>
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	b1d3      	cbz	r3, 800b6f4 <_strtod_l+0x88c>
 800b6be:	4aad      	ldr	r2, [pc, #692]	; (800b974 <_strtod_l+0xb0c>)
 800b6c0:	402a      	ands	r2, r5
 800b6c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b6c6:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ca:	d816      	bhi.n	800b6fa <_strtod_l+0x892>
 800b6cc:	0d12      	lsrs	r2, r2, #20
 800b6ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d6:	4298      	cmp	r0, r3
 800b6d8:	d142      	bne.n	800b760 <_strtod_l+0x8f8>
 800b6da:	4ba7      	ldr	r3, [pc, #668]	; (800b978 <_strtod_l+0xb10>)
 800b6dc:	429d      	cmp	r5, r3
 800b6de:	d102      	bne.n	800b6e6 <_strtod_l+0x87e>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f43f addf 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b6e6:	4ba3      	ldr	r3, [pc, #652]	; (800b974 <_strtod_l+0xb0c>)
 800b6e8:	402b      	ands	r3, r5
 800b6ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b6ee:	f04f 0a00 	mov.w	sl, #0
 800b6f2:	e7a0      	b.n	800b636 <_strtod_l+0x7ce>
 800b6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f8:	e7ed      	b.n	800b6d6 <_strtod_l+0x86e>
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	e7eb      	b.n	800b6d6 <_strtod_l+0x86e>
 800b6fe:	bb7b      	cbnz	r3, 800b760 <_strtod_l+0x8f8>
 800b700:	f1ba 0f00 	cmp.w	sl, #0
 800b704:	d12c      	bne.n	800b760 <_strtod_l+0x8f8>
 800b706:	9904      	ldr	r1, [sp, #16]
 800b708:	4a9a      	ldr	r2, [pc, #616]	; (800b974 <_strtod_l+0xb0c>)
 800b70a:	465b      	mov	r3, fp
 800b70c:	b1f1      	cbz	r1, 800b74c <_strtod_l+0x8e4>
 800b70e:	ea02 010b 	and.w	r1, r2, fp
 800b712:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b716:	dc19      	bgt.n	800b74c <_strtod_l+0x8e4>
 800b718:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b71c:	f77f ae5b 	ble.w	800b3d6 <_strtod_l+0x56e>
 800b720:	4a96      	ldr	r2, [pc, #600]	; (800b97c <_strtod_l+0xb14>)
 800b722:	2300      	movs	r3, #0
 800b724:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b728:	4650      	mov	r0, sl
 800b72a:	4659      	mov	r1, fp
 800b72c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b730:	f7f4 ff7a 	bl	8000628 <__aeabi_dmul>
 800b734:	4682      	mov	sl, r0
 800b736:	468b      	mov	fp, r1
 800b738:	2900      	cmp	r1, #0
 800b73a:	f47f adbe 	bne.w	800b2ba <_strtod_l+0x452>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f47f adbb 	bne.w	800b2ba <_strtod_l+0x452>
 800b744:	2322      	movs	r3, #34	; 0x22
 800b746:	f8c9 3000 	str.w	r3, [r9]
 800b74a:	e5b6      	b.n	800b2ba <_strtod_l+0x452>
 800b74c:	4013      	ands	r3, r2
 800b74e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b752:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b756:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b75a:	f04f 3aff 	mov.w	sl, #4294967295
 800b75e:	e76a      	b.n	800b636 <_strtod_l+0x7ce>
 800b760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b762:	b193      	cbz	r3, 800b78a <_strtod_l+0x922>
 800b764:	422b      	tst	r3, r5
 800b766:	f43f af66 	beq.w	800b636 <_strtod_l+0x7ce>
 800b76a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b76c:	9a04      	ldr	r2, [sp, #16]
 800b76e:	4650      	mov	r0, sl
 800b770:	4659      	mov	r1, fp
 800b772:	b173      	cbz	r3, 800b792 <_strtod_l+0x92a>
 800b774:	f7ff fb59 	bl	800ae2a <sulp>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b780:	f7f4 fd9c 	bl	80002bc <__adddf3>
 800b784:	4682      	mov	sl, r0
 800b786:	468b      	mov	fp, r1
 800b788:	e755      	b.n	800b636 <_strtod_l+0x7ce>
 800b78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b78c:	ea13 0f0a 	tst.w	r3, sl
 800b790:	e7e9      	b.n	800b766 <_strtod_l+0x8fe>
 800b792:	f7ff fb4a 	bl	800ae2a <sulp>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b79e:	f7f4 fd8b 	bl	80002b8 <__aeabi_dsub>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4682      	mov	sl, r0
 800b7a8:	468b      	mov	fp, r1
 800b7aa:	f7f5 f9a5 	bl	8000af8 <__aeabi_dcmpeq>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f47f ae11 	bne.w	800b3d6 <_strtod_l+0x56e>
 800b7b4:	e73f      	b.n	800b636 <_strtod_l+0x7ce>
 800b7b6:	4641      	mov	r1, r8
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f001 f962 	bl	800ca82 <__ratio>
 800b7be:	ec57 6b10 	vmov	r6, r7, d0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7c8:	ee10 0a10 	vmov	r0, s0
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f5 f9a7 	bl	8000b20 <__aeabi_dcmple>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d077      	beq.n	800b8c6 <_strtod_l+0xa5e>
 800b7d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d04a      	beq.n	800b872 <_strtod_l+0xa0a>
 800b7dc:	4b68      	ldr	r3, [pc, #416]	; (800b980 <_strtod_l+0xb18>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b7e4:	4f66      	ldr	r7, [pc, #408]	; (800b980 <_strtod_l+0xb18>)
 800b7e6:	2600      	movs	r6, #0
 800b7e8:	4b62      	ldr	r3, [pc, #392]	; (800b974 <_strtod_l+0xb0c>)
 800b7ea:	402b      	ands	r3, r5
 800b7ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7f0:	4b64      	ldr	r3, [pc, #400]	; (800b984 <_strtod_l+0xb1c>)
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	f040 80ce 	bne.w	800b994 <_strtod_l+0xb2c>
 800b7f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b800:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b804:	ec4b ab10 	vmov	d0, sl, fp
 800b808:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b80c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b810:	f001 f872 	bl	800c8f8 <__ulp>
 800b814:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b818:	ec53 2b10 	vmov	r2, r3, d0
 800b81c:	f7f4 ff04 	bl	8000628 <__aeabi_dmul>
 800b820:	4652      	mov	r2, sl
 800b822:	465b      	mov	r3, fp
 800b824:	f7f4 fd4a 	bl	80002bc <__adddf3>
 800b828:	460b      	mov	r3, r1
 800b82a:	4952      	ldr	r1, [pc, #328]	; (800b974 <_strtod_l+0xb0c>)
 800b82c:	4a56      	ldr	r2, [pc, #344]	; (800b988 <_strtod_l+0xb20>)
 800b82e:	4019      	ands	r1, r3
 800b830:	4291      	cmp	r1, r2
 800b832:	4682      	mov	sl, r0
 800b834:	d95b      	bls.n	800b8ee <_strtod_l+0xa86>
 800b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b838:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d103      	bne.n	800b848 <_strtod_l+0x9e0>
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	3301      	adds	r3, #1
 800b844:	f43f ad2e 	beq.w	800b2a4 <_strtod_l+0x43c>
 800b848:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b978 <_strtod_l+0xb10>
 800b84c:	f04f 3aff 	mov.w	sl, #4294967295
 800b850:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b852:	4648      	mov	r0, r9
 800b854:	f000 fdb9 	bl	800c3ca <_Bfree>
 800b858:	9905      	ldr	r1, [sp, #20]
 800b85a:	4648      	mov	r0, r9
 800b85c:	f000 fdb5 	bl	800c3ca <_Bfree>
 800b860:	4641      	mov	r1, r8
 800b862:	4648      	mov	r0, r9
 800b864:	f000 fdb1 	bl	800c3ca <_Bfree>
 800b868:	4621      	mov	r1, r4
 800b86a:	4648      	mov	r0, r9
 800b86c:	f000 fdad 	bl	800c3ca <_Bfree>
 800b870:	e619      	b.n	800b4a6 <_strtod_l+0x63e>
 800b872:	f1ba 0f00 	cmp.w	sl, #0
 800b876:	d11a      	bne.n	800b8ae <_strtod_l+0xa46>
 800b878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b87c:	b9eb      	cbnz	r3, 800b8ba <_strtod_l+0xa52>
 800b87e:	2200      	movs	r2, #0
 800b880:	4b3f      	ldr	r3, [pc, #252]	; (800b980 <_strtod_l+0xb18>)
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f941 	bl	8000b0c <__aeabi_dcmplt>
 800b88a:	b9c8      	cbnz	r0, 800b8c0 <_strtod_l+0xa58>
 800b88c:	4630      	mov	r0, r6
 800b88e:	4639      	mov	r1, r7
 800b890:	2200      	movs	r2, #0
 800b892:	4b3e      	ldr	r3, [pc, #248]	; (800b98c <_strtod_l+0xb24>)
 800b894:	f7f4 fec8 	bl	8000628 <__aeabi_dmul>
 800b898:	4606      	mov	r6, r0
 800b89a:	460f      	mov	r7, r1
 800b89c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b8a0:	9618      	str	r6, [sp, #96]	; 0x60
 800b8a2:	9319      	str	r3, [sp, #100]	; 0x64
 800b8a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b8a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b8ac:	e79c      	b.n	800b7e8 <_strtod_l+0x980>
 800b8ae:	f1ba 0f01 	cmp.w	sl, #1
 800b8b2:	d102      	bne.n	800b8ba <_strtod_l+0xa52>
 800b8b4:	2d00      	cmp	r5, #0
 800b8b6:	f43f ad8e 	beq.w	800b3d6 <_strtod_l+0x56e>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	4b34      	ldr	r3, [pc, #208]	; (800b990 <_strtod_l+0xb28>)
 800b8be:	e78f      	b.n	800b7e0 <_strtod_l+0x978>
 800b8c0:	2600      	movs	r6, #0
 800b8c2:	4f32      	ldr	r7, [pc, #200]	; (800b98c <_strtod_l+0xb24>)
 800b8c4:	e7ea      	b.n	800b89c <_strtod_l+0xa34>
 800b8c6:	4b31      	ldr	r3, [pc, #196]	; (800b98c <_strtod_l+0xb24>)
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f7f4 feab 	bl	8000628 <__aeabi_dmul>
 800b8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	b933      	cbnz	r3, 800b8e8 <_strtod_l+0xa80>
 800b8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8de:	9010      	str	r0, [sp, #64]	; 0x40
 800b8e0:	9311      	str	r3, [sp, #68]	; 0x44
 800b8e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8e6:	e7df      	b.n	800b8a8 <_strtod_l+0xa40>
 800b8e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b8ec:	e7f9      	b.n	800b8e2 <_strtod_l+0xa7a>
 800b8ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1ab      	bne.n	800b850 <_strtod_l+0x9e8>
 800b8f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8fc:	0d1b      	lsrs	r3, r3, #20
 800b8fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b900:	051b      	lsls	r3, r3, #20
 800b902:	429a      	cmp	r2, r3
 800b904:	465d      	mov	r5, fp
 800b906:	d1a3      	bne.n	800b850 <_strtod_l+0x9e8>
 800b908:	4639      	mov	r1, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7f5 f93c 	bl	8000b88 <__aeabi_d2iz>
 800b910:	f7f4 fe20 	bl	8000554 <__aeabi_i2d>
 800b914:	460b      	mov	r3, r1
 800b916:	4602      	mov	r2, r0
 800b918:	4639      	mov	r1, r7
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7f4 fccc 	bl	80002b8 <__aeabi_dsub>
 800b920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b922:	4606      	mov	r6, r0
 800b924:	460f      	mov	r7, r1
 800b926:	b933      	cbnz	r3, 800b936 <_strtod_l+0xace>
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d103      	bne.n	800b936 <_strtod_l+0xace>
 800b92e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b932:	2d00      	cmp	r5, #0
 800b934:	d06d      	beq.n	800ba12 <_strtod_l+0xbaa>
 800b936:	a30a      	add	r3, pc, #40	; (adr r3, 800b960 <_strtod_l+0xaf8>)
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f5 f8e4 	bl	8000b0c <__aeabi_dcmplt>
 800b944:	2800      	cmp	r0, #0
 800b946:	f47f acb8 	bne.w	800b2ba <_strtod_l+0x452>
 800b94a:	a307      	add	r3, pc, #28	; (adr r3, 800b968 <_strtod_l+0xb00>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 f8f8 	bl	8000b48 <__aeabi_dcmpgt>
 800b958:	2800      	cmp	r0, #0
 800b95a:	f43f af79 	beq.w	800b850 <_strtod_l+0x9e8>
 800b95e:	e4ac      	b.n	800b2ba <_strtod_l+0x452>
 800b960:	94a03595 	.word	0x94a03595
 800b964:	3fdfffff 	.word	0x3fdfffff
 800b968:	35afe535 	.word	0x35afe535
 800b96c:	3fe00000 	.word	0x3fe00000
 800b970:	000fffff 	.word	0x000fffff
 800b974:	7ff00000 	.word	0x7ff00000
 800b978:	7fefffff 	.word	0x7fefffff
 800b97c:	39500000 	.word	0x39500000
 800b980:	3ff00000 	.word	0x3ff00000
 800b984:	7fe00000 	.word	0x7fe00000
 800b988:	7c9fffff 	.word	0x7c9fffff
 800b98c:	3fe00000 	.word	0x3fe00000
 800b990:	bff00000 	.word	0xbff00000
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	b333      	cbz	r3, 800b9e6 <_strtod_l+0xb7e>
 800b998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b99a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b99e:	d822      	bhi.n	800b9e6 <_strtod_l+0xb7e>
 800b9a0:	a327      	add	r3, pc, #156	; (adr r3, 800ba40 <_strtod_l+0xbd8>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	f7f5 f8b9 	bl	8000b20 <__aeabi_dcmple>
 800b9ae:	b1a0      	cbz	r0, 800b9da <_strtod_l+0xb72>
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7f5 f910 	bl	8000bd8 <__aeabi_d2uiz>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	bf08      	it	eq
 800b9bc:	2001      	moveq	r0, #1
 800b9be:	f7f4 fdb9 	bl	8000534 <__aeabi_ui2d>
 800b9c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	460f      	mov	r7, r1
 800b9c8:	bb03      	cbnz	r3, 800ba0c <_strtod_l+0xba4>
 800b9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ce:	9012      	str	r0, [sp, #72]	; 0x48
 800b9d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b9d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9e2:	1a9b      	subs	r3, r3, r2
 800b9e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b9ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b9ee:	f000 ff83 	bl	800c8f8 <__ulp>
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	ec53 2b10 	vmov	r2, r3, d0
 800b9f8:	4659      	mov	r1, fp
 800b9fa:	f7f4 fe15 	bl	8000628 <__aeabi_dmul>
 800b9fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba02:	f7f4 fc5b 	bl	80002bc <__adddf3>
 800ba06:	4682      	mov	sl, r0
 800ba08:	468b      	mov	fp, r1
 800ba0a:	e772      	b.n	800b8f2 <_strtod_l+0xa8a>
 800ba0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba10:	e7df      	b.n	800b9d2 <_strtod_l+0xb6a>
 800ba12:	a30d      	add	r3, pc, #52	; (adr r3, 800ba48 <_strtod_l+0xbe0>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f5 f878 	bl	8000b0c <__aeabi_dcmplt>
 800ba1c:	e79c      	b.n	800b958 <_strtod_l+0xaf0>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	930d      	str	r3, [sp, #52]	; 0x34
 800ba22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	f7ff ba61 	b.w	800aeee <_strtod_l+0x86>
 800ba2c:	2b65      	cmp	r3, #101	; 0x65
 800ba2e:	f04f 0200 	mov.w	r2, #0
 800ba32:	f43f ab4e 	beq.w	800b0d2 <_strtod_l+0x26a>
 800ba36:	2101      	movs	r1, #1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	9104      	str	r1, [sp, #16]
 800ba3c:	f7ff bacb 	b.w	800afd6 <_strtod_l+0x16e>
 800ba40:	ffc00000 	.word	0xffc00000
 800ba44:	41dfffff 	.word	0x41dfffff
 800ba48:	94a03595 	.word	0x94a03595
 800ba4c:	3fcfffff 	.word	0x3fcfffff

0800ba50 <strtof>:
 800ba50:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800ba54:	4e24      	ldr	r6, [pc, #144]	; (800bae8 <strtof+0x98>)
 800ba56:	4a25      	ldr	r2, [pc, #148]	; (800baec <strtof+0x9c>)
 800ba58:	6834      	ldr	r4, [r6, #0]
 800ba5a:	6a23      	ldr	r3, [r4, #32]
 800ba5c:	ed2d 8b02 	vpush	{d8}
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bf08      	it	eq
 800ba64:	4613      	moveq	r3, r2
 800ba66:	460a      	mov	r2, r1
 800ba68:	4601      	mov	r1, r0
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f7ff f9fc 	bl	800ae68 <_strtod_l>
 800ba70:	ec55 4b10 	vmov	r4, r5, d0
 800ba74:	ee10 2a10 	vmov	r2, s0
 800ba78:	462b      	mov	r3, r5
 800ba7a:	ee10 0a10 	vmov	r0, s0
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f5 f86c 	bl	8000b5c <__aeabi_dcmpun>
 800ba84:	b130      	cbz	r0, 800ba94 <strtof+0x44>
 800ba86:	ecbd 8b02 	vpop	{d8}
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800ba90:	f001 bbb8 	b.w	800d204 <nanf>
 800ba94:	4620      	mov	r0, r4
 800ba96:	4629      	mov	r1, r5
 800ba98:	f7f5 f8be 	bl	8000c18 <__aeabi_d2f>
 800ba9c:	ee08 0a10 	vmov	s16, r0
 800baa0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800baf0 <strtof+0xa0>
 800baa4:	eeb0 7ac8 	vabs.f32	s14, s16
 800baa8:	eeb4 7a67 	vcmp.f32	s14, s15
 800baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab0:	dd14      	ble.n	800badc <strtof+0x8c>
 800bab2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800bab6:	f04f 32ff 	mov.w	r2, #4294967295
 800baba:	4b0e      	ldr	r3, [pc, #56]	; (800baf4 <strtof+0xa4>)
 800babc:	4620      	mov	r0, r4
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f5 f84c 	bl	8000b5c <__aeabi_dcmpun>
 800bac4:	b938      	cbnz	r0, 800bad6 <strtof+0x86>
 800bac6:	f04f 32ff 	mov.w	r2, #4294967295
 800baca:	4b0a      	ldr	r3, [pc, #40]	; (800baf4 <strtof+0xa4>)
 800bacc:	4620      	mov	r0, r4
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f5 f826 	bl	8000b20 <__aeabi_dcmple>
 800bad4:	b110      	cbz	r0, 800badc <strtof+0x8c>
 800bad6:	6833      	ldr	r3, [r6, #0]
 800bad8:	2222      	movs	r2, #34	; 0x22
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	eeb0 0a48 	vmov.f32	s0, s16
 800bae0:	ecbd 8b02 	vpop	{d8}
 800bae4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bae8:	20000060 	.word	0x20000060
 800baec:	200000c4 	.word	0x200000c4
 800baf0:	7f7fffff 	.word	0x7f7fffff
 800baf4:	7fefffff 	.word	0x7fefffff

0800baf8 <__strtok_r>:
 800baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafa:	b918      	cbnz	r0, 800bb04 <__strtok_r+0xc>
 800bafc:	6810      	ldr	r0, [r2, #0]
 800bafe:	b908      	cbnz	r0, 800bb04 <__strtok_r+0xc>
 800bb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb02:	4620      	mov	r0, r4
 800bb04:	4604      	mov	r4, r0
 800bb06:	460f      	mov	r7, r1
 800bb08:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb0c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb10:	b91e      	cbnz	r6, 800bb1a <__strtok_r+0x22>
 800bb12:	b96d      	cbnz	r5, 800bb30 <__strtok_r+0x38>
 800bb14:	6015      	str	r5, [r2, #0]
 800bb16:	4628      	mov	r0, r5
 800bb18:	e7f2      	b.n	800bb00 <__strtok_r+0x8>
 800bb1a:	42b5      	cmp	r5, r6
 800bb1c:	d1f6      	bne.n	800bb0c <__strtok_r+0x14>
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ef      	bne.n	800bb02 <__strtok_r+0xa>
 800bb22:	6014      	str	r4, [r2, #0]
 800bb24:	7003      	strb	r3, [r0, #0]
 800bb26:	e7eb      	b.n	800bb00 <__strtok_r+0x8>
 800bb28:	462b      	mov	r3, r5
 800bb2a:	e00d      	b.n	800bb48 <__strtok_r+0x50>
 800bb2c:	b926      	cbnz	r6, 800bb38 <__strtok_r+0x40>
 800bb2e:	461c      	mov	r4, r3
 800bb30:	4623      	mov	r3, r4
 800bb32:	460f      	mov	r7, r1
 800bb34:	f813 5b01 	ldrb.w	r5, [r3], #1
 800bb38:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb3c:	42b5      	cmp	r5, r6
 800bb3e:	d1f5      	bne.n	800bb2c <__strtok_r+0x34>
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	d0f1      	beq.n	800bb28 <__strtok_r+0x30>
 800bb44:	2100      	movs	r1, #0
 800bb46:	7021      	strb	r1, [r4, #0]
 800bb48:	6013      	str	r3, [r2, #0]
 800bb4a:	e7d9      	b.n	800bb00 <__strtok_r+0x8>

0800bb4c <strtok_r>:
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f7ff bfd3 	b.w	800baf8 <__strtok_r>

0800bb52 <_strtoul_l.isra.0>:
 800bb52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb56:	4680      	mov	r8, r0
 800bb58:	4689      	mov	r9, r1
 800bb5a:	4692      	mov	sl, r2
 800bb5c:	461e      	mov	r6, r3
 800bb5e:	460f      	mov	r7, r1
 800bb60:	463d      	mov	r5, r7
 800bb62:	9808      	ldr	r0, [sp, #32]
 800bb64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb68:	f000 fbe4 	bl	800c334 <__locale_ctype_ptr_l>
 800bb6c:	4420      	add	r0, r4
 800bb6e:	7843      	ldrb	r3, [r0, #1]
 800bb70:	f013 0308 	ands.w	r3, r3, #8
 800bb74:	d130      	bne.n	800bbd8 <_strtoul_l.isra.0+0x86>
 800bb76:	2c2d      	cmp	r4, #45	; 0x2d
 800bb78:	d130      	bne.n	800bbdc <_strtoul_l.isra.0+0x8a>
 800bb7a:	787c      	ldrb	r4, [r7, #1]
 800bb7c:	1cbd      	adds	r5, r7, #2
 800bb7e:	2101      	movs	r1, #1
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	d05c      	beq.n	800bc3e <_strtoul_l.isra.0+0xec>
 800bb84:	2e10      	cmp	r6, #16
 800bb86:	d109      	bne.n	800bb9c <_strtoul_l.isra.0+0x4a>
 800bb88:	2c30      	cmp	r4, #48	; 0x30
 800bb8a:	d107      	bne.n	800bb9c <_strtoul_l.isra.0+0x4a>
 800bb8c:	782b      	ldrb	r3, [r5, #0]
 800bb8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb92:	2b58      	cmp	r3, #88	; 0x58
 800bb94:	d14e      	bne.n	800bc34 <_strtoul_l.isra.0+0xe2>
 800bb96:	786c      	ldrb	r4, [r5, #1]
 800bb98:	2610      	movs	r6, #16
 800bb9a:	3502      	adds	r5, #2
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	2300      	movs	r3, #0
 800bba2:	fbb2 f2f6 	udiv	r2, r2, r6
 800bba6:	fb06 fc02 	mul.w	ip, r6, r2
 800bbaa:	ea6f 0c0c 	mvn.w	ip, ip
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bbb4:	2f09      	cmp	r7, #9
 800bbb6:	d817      	bhi.n	800bbe8 <_strtoul_l.isra.0+0x96>
 800bbb8:	463c      	mov	r4, r7
 800bbba:	42a6      	cmp	r6, r4
 800bbbc:	dd23      	ble.n	800bc06 <_strtoul_l.isra.0+0xb4>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	db1e      	blt.n	800bc00 <_strtoul_l.isra.0+0xae>
 800bbc2:	4282      	cmp	r2, r0
 800bbc4:	d31c      	bcc.n	800bc00 <_strtoul_l.isra.0+0xae>
 800bbc6:	d101      	bne.n	800bbcc <_strtoul_l.isra.0+0x7a>
 800bbc8:	45a4      	cmp	ip, r4
 800bbca:	db19      	blt.n	800bc00 <_strtoul_l.isra.0+0xae>
 800bbcc:	fb00 4006 	mla	r0, r0, r6, r4
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd6:	e7eb      	b.n	800bbb0 <_strtoul_l.isra.0+0x5e>
 800bbd8:	462f      	mov	r7, r5
 800bbda:	e7c1      	b.n	800bb60 <_strtoul_l.isra.0+0xe>
 800bbdc:	2c2b      	cmp	r4, #43	; 0x2b
 800bbde:	bf04      	itt	eq
 800bbe0:	1cbd      	addeq	r5, r7, #2
 800bbe2:	787c      	ldrbeq	r4, [r7, #1]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	e7cb      	b.n	800bb80 <_strtoul_l.isra.0+0x2e>
 800bbe8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bbec:	2f19      	cmp	r7, #25
 800bbee:	d801      	bhi.n	800bbf4 <_strtoul_l.isra.0+0xa2>
 800bbf0:	3c37      	subs	r4, #55	; 0x37
 800bbf2:	e7e2      	b.n	800bbba <_strtoul_l.isra.0+0x68>
 800bbf4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bbf8:	2f19      	cmp	r7, #25
 800bbfa:	d804      	bhi.n	800bc06 <_strtoul_l.isra.0+0xb4>
 800bbfc:	3c57      	subs	r4, #87	; 0x57
 800bbfe:	e7dc      	b.n	800bbba <_strtoul_l.isra.0+0x68>
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295
 800bc04:	e7e5      	b.n	800bbd2 <_strtoul_l.isra.0+0x80>
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	da09      	bge.n	800bc1e <_strtoul_l.isra.0+0xcc>
 800bc0a:	2322      	movs	r3, #34	; 0x22
 800bc0c:	f8c8 3000 	str.w	r3, [r8]
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	f1ba 0f00 	cmp.w	sl, #0
 800bc18:	d107      	bne.n	800bc2a <_strtoul_l.isra.0+0xd8>
 800bc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1e:	b101      	cbz	r1, 800bc22 <_strtoul_l.isra.0+0xd0>
 800bc20:	4240      	negs	r0, r0
 800bc22:	f1ba 0f00 	cmp.w	sl, #0
 800bc26:	d0f8      	beq.n	800bc1a <_strtoul_l.isra.0+0xc8>
 800bc28:	b10b      	cbz	r3, 800bc2e <_strtoul_l.isra.0+0xdc>
 800bc2a:	f105 39ff 	add.w	r9, r5, #4294967295
 800bc2e:	f8ca 9000 	str.w	r9, [sl]
 800bc32:	e7f2      	b.n	800bc1a <_strtoul_l.isra.0+0xc8>
 800bc34:	2430      	movs	r4, #48	; 0x30
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	d1b0      	bne.n	800bb9c <_strtoul_l.isra.0+0x4a>
 800bc3a:	2608      	movs	r6, #8
 800bc3c:	e7ae      	b.n	800bb9c <_strtoul_l.isra.0+0x4a>
 800bc3e:	2c30      	cmp	r4, #48	; 0x30
 800bc40:	d0a4      	beq.n	800bb8c <_strtoul_l.isra.0+0x3a>
 800bc42:	260a      	movs	r6, #10
 800bc44:	e7aa      	b.n	800bb9c <_strtoul_l.isra.0+0x4a>
	...

0800bc48 <strtoul>:
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <strtoul+0x24>)
 800bc4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc4c:	681c      	ldr	r4, [r3, #0]
 800bc4e:	4d08      	ldr	r5, [pc, #32]	; (800bc70 <strtoul+0x28>)
 800bc50:	6a23      	ldr	r3, [r4, #32]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	bf08      	it	eq
 800bc56:	462b      	moveq	r3, r5
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	460a      	mov	r2, r1
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff ff76 	bl	800bb52 <_strtoul_l.isra.0>
 800bc66:	b003      	add	sp, #12
 800bc68:	bd30      	pop	{r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000060 	.word	0x20000060
 800bc70:	200000c4 	.word	0x200000c4

0800bc74 <_vsniprintf_r>:
 800bc74:	b530      	push	{r4, r5, lr}
 800bc76:	1e14      	subs	r4, r2, #0
 800bc78:	4605      	mov	r5, r0
 800bc7a:	b09b      	sub	sp, #108	; 0x6c
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	da05      	bge.n	800bc8c <_vsniprintf_r+0x18>
 800bc80:	238b      	movs	r3, #139	; 0x8b
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f04f 30ff 	mov.w	r0, #4294967295
 800bc88:	b01b      	add	sp, #108	; 0x6c
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc90:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bc94:	bf14      	ite	ne
 800bc96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc9a:	4623      	moveq	r3, r4
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bca4:	9100      	str	r1, [sp, #0]
 800bca6:	9104      	str	r1, [sp, #16]
 800bca8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bcac:	4602      	mov	r2, r0
 800bcae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcb0:	4669      	mov	r1, sp
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f001 f816 	bl	800cce4 <_svfiprintf_r>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	bfbc      	itt	lt
 800bcbc:	238b      	movlt	r3, #139	; 0x8b
 800bcbe:	602b      	strlt	r3, [r5, #0]
 800bcc0:	2c00      	cmp	r4, #0
 800bcc2:	d0e1      	beq.n	800bc88 <_vsniprintf_r+0x14>
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	e7dd      	b.n	800bc88 <_vsniprintf_r+0x14>

0800bccc <vsniprintf>:
 800bccc:	b507      	push	{r0, r1, r2, lr}
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	4803      	ldr	r0, [pc, #12]	; (800bce4 <vsniprintf+0x18>)
 800bcd8:	6800      	ldr	r0, [r0, #0]
 800bcda:	f7ff ffcb 	bl	800bc74 <_vsniprintf_r>
 800bcde:	b003      	add	sp, #12
 800bce0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bce4:	20000060 	.word	0x20000060

0800bce8 <rshift>:
 800bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcea:	6906      	ldr	r6, [r0, #16]
 800bcec:	114b      	asrs	r3, r1, #5
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	f100 0414 	add.w	r4, r0, #20
 800bcf4:	dd30      	ble.n	800bd58 <rshift+0x70>
 800bcf6:	f011 011f 	ands.w	r1, r1, #31
 800bcfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bcfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bd02:	d108      	bne.n	800bd16 <rshift+0x2e>
 800bd04:	4621      	mov	r1, r4
 800bd06:	42b2      	cmp	r2, r6
 800bd08:	460b      	mov	r3, r1
 800bd0a:	d211      	bcs.n	800bd30 <rshift+0x48>
 800bd0c:	f852 3b04 	ldr.w	r3, [r2], #4
 800bd10:	f841 3b04 	str.w	r3, [r1], #4
 800bd14:	e7f7      	b.n	800bd06 <rshift+0x1e>
 800bd16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bd1a:	f1c1 0c20 	rsb	ip, r1, #32
 800bd1e:	40cd      	lsrs	r5, r1
 800bd20:	3204      	adds	r2, #4
 800bd22:	4623      	mov	r3, r4
 800bd24:	42b2      	cmp	r2, r6
 800bd26:	4617      	mov	r7, r2
 800bd28:	d30c      	bcc.n	800bd44 <rshift+0x5c>
 800bd2a:	601d      	str	r5, [r3, #0]
 800bd2c:	b105      	cbz	r5, 800bd30 <rshift+0x48>
 800bd2e:	3304      	adds	r3, #4
 800bd30:	1b1a      	subs	r2, r3, r4
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd38:	bf08      	it	eq
 800bd3a:	2300      	moveq	r3, #0
 800bd3c:	6102      	str	r2, [r0, #16]
 800bd3e:	bf08      	it	eq
 800bd40:	6143      	streq	r3, [r0, #20]
 800bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd44:	683f      	ldr	r7, [r7, #0]
 800bd46:	fa07 f70c 	lsl.w	r7, r7, ip
 800bd4a:	433d      	orrs	r5, r7
 800bd4c:	f843 5b04 	str.w	r5, [r3], #4
 800bd50:	f852 5b04 	ldr.w	r5, [r2], #4
 800bd54:	40cd      	lsrs	r5, r1
 800bd56:	e7e5      	b.n	800bd24 <rshift+0x3c>
 800bd58:	4623      	mov	r3, r4
 800bd5a:	e7e9      	b.n	800bd30 <rshift+0x48>

0800bd5c <__hexdig_fun>:
 800bd5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	d802      	bhi.n	800bd6a <__hexdig_fun+0xe>
 800bd64:	3820      	subs	r0, #32
 800bd66:	b2c0      	uxtb	r0, r0
 800bd68:	4770      	bx	lr
 800bd6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd6e:	2b05      	cmp	r3, #5
 800bd70:	d801      	bhi.n	800bd76 <__hexdig_fun+0x1a>
 800bd72:	3847      	subs	r0, #71	; 0x47
 800bd74:	e7f7      	b.n	800bd66 <__hexdig_fun+0xa>
 800bd76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	d801      	bhi.n	800bd82 <__hexdig_fun+0x26>
 800bd7e:	3827      	subs	r0, #39	; 0x27
 800bd80:	e7f1      	b.n	800bd66 <__hexdig_fun+0xa>
 800bd82:	2000      	movs	r0, #0
 800bd84:	4770      	bx	lr

0800bd86 <__gethex>:
 800bd86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	b08b      	sub	sp, #44	; 0x2c
 800bd8c:	468a      	mov	sl, r1
 800bd8e:	9002      	str	r0, [sp, #8]
 800bd90:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bd92:	9306      	str	r3, [sp, #24]
 800bd94:	4690      	mov	r8, r2
 800bd96:	f000 fad0 	bl	800c33a <__localeconv_l>
 800bd9a:	6803      	ldr	r3, [r0, #0]
 800bd9c:	9303      	str	r3, [sp, #12]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f4 fa28 	bl	80001f4 <strlen>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	9001      	str	r0, [sp, #4]
 800bda8:	4403      	add	r3, r0
 800bdaa:	f04f 0b00 	mov.w	fp, #0
 800bdae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bdb2:	9307      	str	r3, [sp, #28]
 800bdb4:	f8da 3000 	ldr.w	r3, [sl]
 800bdb8:	3302      	adds	r3, #2
 800bdba:	461f      	mov	r7, r3
 800bdbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdc0:	2830      	cmp	r0, #48	; 0x30
 800bdc2:	d06c      	beq.n	800be9e <__gethex+0x118>
 800bdc4:	f7ff ffca 	bl	800bd5c <__hexdig_fun>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d16a      	bne.n	800bea4 <__gethex+0x11e>
 800bdce:	9a01      	ldr	r2, [sp, #4]
 800bdd0:	9903      	ldr	r1, [sp, #12]
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f001 fa1c 	bl	800d210 <strncmp>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d166      	bne.n	800beaa <__gethex+0x124>
 800bddc:	9b01      	ldr	r3, [sp, #4]
 800bdde:	5cf8      	ldrb	r0, [r7, r3]
 800bde0:	18fe      	adds	r6, r7, r3
 800bde2:	f7ff ffbb 	bl	800bd5c <__hexdig_fun>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d062      	beq.n	800beb0 <__gethex+0x12a>
 800bdea:	4633      	mov	r3, r6
 800bdec:	7818      	ldrb	r0, [r3, #0]
 800bdee:	2830      	cmp	r0, #48	; 0x30
 800bdf0:	461f      	mov	r7, r3
 800bdf2:	f103 0301 	add.w	r3, r3, #1
 800bdf6:	d0f9      	beq.n	800bdec <__gethex+0x66>
 800bdf8:	f7ff ffb0 	bl	800bd5c <__hexdig_fun>
 800bdfc:	fab0 f580 	clz	r5, r0
 800be00:	096d      	lsrs	r5, r5, #5
 800be02:	4634      	mov	r4, r6
 800be04:	f04f 0b01 	mov.w	fp, #1
 800be08:	463a      	mov	r2, r7
 800be0a:	4616      	mov	r6, r2
 800be0c:	3201      	adds	r2, #1
 800be0e:	7830      	ldrb	r0, [r6, #0]
 800be10:	f7ff ffa4 	bl	800bd5c <__hexdig_fun>
 800be14:	2800      	cmp	r0, #0
 800be16:	d1f8      	bne.n	800be0a <__gethex+0x84>
 800be18:	9a01      	ldr	r2, [sp, #4]
 800be1a:	9903      	ldr	r1, [sp, #12]
 800be1c:	4630      	mov	r0, r6
 800be1e:	f001 f9f7 	bl	800d210 <strncmp>
 800be22:	b950      	cbnz	r0, 800be3a <__gethex+0xb4>
 800be24:	b954      	cbnz	r4, 800be3c <__gethex+0xb6>
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	18f4      	adds	r4, r6, r3
 800be2a:	4622      	mov	r2, r4
 800be2c:	4616      	mov	r6, r2
 800be2e:	3201      	adds	r2, #1
 800be30:	7830      	ldrb	r0, [r6, #0]
 800be32:	f7ff ff93 	bl	800bd5c <__hexdig_fun>
 800be36:	2800      	cmp	r0, #0
 800be38:	d1f8      	bne.n	800be2c <__gethex+0xa6>
 800be3a:	b10c      	cbz	r4, 800be40 <__gethex+0xba>
 800be3c:	1ba4      	subs	r4, r4, r6
 800be3e:	00a4      	lsls	r4, r4, #2
 800be40:	7833      	ldrb	r3, [r6, #0]
 800be42:	2b50      	cmp	r3, #80	; 0x50
 800be44:	d001      	beq.n	800be4a <__gethex+0xc4>
 800be46:	2b70      	cmp	r3, #112	; 0x70
 800be48:	d140      	bne.n	800becc <__gethex+0x146>
 800be4a:	7873      	ldrb	r3, [r6, #1]
 800be4c:	2b2b      	cmp	r3, #43	; 0x2b
 800be4e:	d031      	beq.n	800beb4 <__gethex+0x12e>
 800be50:	2b2d      	cmp	r3, #45	; 0x2d
 800be52:	d033      	beq.n	800bebc <__gethex+0x136>
 800be54:	1c71      	adds	r1, r6, #1
 800be56:	f04f 0900 	mov.w	r9, #0
 800be5a:	7808      	ldrb	r0, [r1, #0]
 800be5c:	f7ff ff7e 	bl	800bd5c <__hexdig_fun>
 800be60:	1e43      	subs	r3, r0, #1
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b18      	cmp	r3, #24
 800be66:	d831      	bhi.n	800becc <__gethex+0x146>
 800be68:	f1a0 0210 	sub.w	r2, r0, #16
 800be6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be70:	f7ff ff74 	bl	800bd5c <__hexdig_fun>
 800be74:	1e43      	subs	r3, r0, #1
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b18      	cmp	r3, #24
 800be7a:	d922      	bls.n	800bec2 <__gethex+0x13c>
 800be7c:	f1b9 0f00 	cmp.w	r9, #0
 800be80:	d000      	beq.n	800be84 <__gethex+0xfe>
 800be82:	4252      	negs	r2, r2
 800be84:	4414      	add	r4, r2
 800be86:	f8ca 1000 	str.w	r1, [sl]
 800be8a:	b30d      	cbz	r5, 800bed0 <__gethex+0x14a>
 800be8c:	f1bb 0f00 	cmp.w	fp, #0
 800be90:	bf0c      	ite	eq
 800be92:	2706      	moveq	r7, #6
 800be94:	2700      	movne	r7, #0
 800be96:	4638      	mov	r0, r7
 800be98:	b00b      	add	sp, #44	; 0x2c
 800be9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9e:	f10b 0b01 	add.w	fp, fp, #1
 800bea2:	e78a      	b.n	800bdba <__gethex+0x34>
 800bea4:	2500      	movs	r5, #0
 800bea6:	462c      	mov	r4, r5
 800bea8:	e7ae      	b.n	800be08 <__gethex+0x82>
 800beaa:	463e      	mov	r6, r7
 800beac:	2501      	movs	r5, #1
 800beae:	e7c7      	b.n	800be40 <__gethex+0xba>
 800beb0:	4604      	mov	r4, r0
 800beb2:	e7fb      	b.n	800beac <__gethex+0x126>
 800beb4:	f04f 0900 	mov.w	r9, #0
 800beb8:	1cb1      	adds	r1, r6, #2
 800beba:	e7ce      	b.n	800be5a <__gethex+0xd4>
 800bebc:	f04f 0901 	mov.w	r9, #1
 800bec0:	e7fa      	b.n	800beb8 <__gethex+0x132>
 800bec2:	230a      	movs	r3, #10
 800bec4:	fb03 0202 	mla	r2, r3, r2, r0
 800bec8:	3a10      	subs	r2, #16
 800beca:	e7cf      	b.n	800be6c <__gethex+0xe6>
 800becc:	4631      	mov	r1, r6
 800bece:	e7da      	b.n	800be86 <__gethex+0x100>
 800bed0:	1bf3      	subs	r3, r6, r7
 800bed2:	3b01      	subs	r3, #1
 800bed4:	4629      	mov	r1, r5
 800bed6:	2b07      	cmp	r3, #7
 800bed8:	dc49      	bgt.n	800bf6e <__gethex+0x1e8>
 800beda:	9802      	ldr	r0, [sp, #8]
 800bedc:	f000 fa41 	bl	800c362 <_Balloc>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	f100 0914 	add.w	r9, r0, #20
 800bee6:	f04f 0b00 	mov.w	fp, #0
 800beea:	f1c3 0301 	rsb	r3, r3, #1
 800beee:	4605      	mov	r5, r0
 800bef0:	f8cd 9010 	str.w	r9, [sp, #16]
 800bef4:	46da      	mov	sl, fp
 800bef6:	9308      	str	r3, [sp, #32]
 800bef8:	42b7      	cmp	r7, r6
 800befa:	d33b      	bcc.n	800bf74 <__gethex+0x1ee>
 800befc:	9804      	ldr	r0, [sp, #16]
 800befe:	f840 ab04 	str.w	sl, [r0], #4
 800bf02:	eba0 0009 	sub.w	r0, r0, r9
 800bf06:	1080      	asrs	r0, r0, #2
 800bf08:	6128      	str	r0, [r5, #16]
 800bf0a:	0147      	lsls	r7, r0, #5
 800bf0c:	4650      	mov	r0, sl
 800bf0e:	f000 faec 	bl	800c4ea <__hi0bits>
 800bf12:	f8d8 6000 	ldr.w	r6, [r8]
 800bf16:	1a3f      	subs	r7, r7, r0
 800bf18:	42b7      	cmp	r7, r6
 800bf1a:	dd64      	ble.n	800bfe6 <__gethex+0x260>
 800bf1c:	1bbf      	subs	r7, r7, r6
 800bf1e:	4639      	mov	r1, r7
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 fdfb 	bl	800cb1c <__any_on>
 800bf26:	4682      	mov	sl, r0
 800bf28:	b178      	cbz	r0, 800bf4a <__gethex+0x1c4>
 800bf2a:	1e7b      	subs	r3, r7, #1
 800bf2c:	1159      	asrs	r1, r3, #5
 800bf2e:	f003 021f 	and.w	r2, r3, #31
 800bf32:	f04f 0a01 	mov.w	sl, #1
 800bf36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf3a:	fa0a f202 	lsl.w	r2, sl, r2
 800bf3e:	420a      	tst	r2, r1
 800bf40:	d003      	beq.n	800bf4a <__gethex+0x1c4>
 800bf42:	4553      	cmp	r3, sl
 800bf44:	dc46      	bgt.n	800bfd4 <__gethex+0x24e>
 800bf46:	f04f 0a02 	mov.w	sl, #2
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f7ff fecb 	bl	800bce8 <rshift>
 800bf52:	443c      	add	r4, r7
 800bf54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	da52      	bge.n	800c002 <__gethex+0x27c>
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	9802      	ldr	r0, [sp, #8]
 800bf60:	f000 fa33 	bl	800c3ca <_Bfree>
 800bf64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf66:	2300      	movs	r3, #0
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	27a3      	movs	r7, #163	; 0xa3
 800bf6c:	e793      	b.n	800be96 <__gethex+0x110>
 800bf6e:	3101      	adds	r1, #1
 800bf70:	105b      	asrs	r3, r3, #1
 800bf72:	e7b0      	b.n	800bed6 <__gethex+0x150>
 800bf74:	1e73      	subs	r3, r6, #1
 800bf76:	9305      	str	r3, [sp, #20]
 800bf78:	9a07      	ldr	r2, [sp, #28]
 800bf7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d018      	beq.n	800bfb4 <__gethex+0x22e>
 800bf82:	f1bb 0f20 	cmp.w	fp, #32
 800bf86:	d107      	bne.n	800bf98 <__gethex+0x212>
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	f8c3 a000 	str.w	sl, [r3]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	f04f 0a00 	mov.w	sl, #0
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	46d3      	mov	fp, sl
 800bf98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bf9c:	f7ff fede 	bl	800bd5c <__hexdig_fun>
 800bfa0:	f000 000f 	and.w	r0, r0, #15
 800bfa4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bfa8:	ea4a 0a00 	orr.w	sl, sl, r0
 800bfac:	f10b 0b04 	add.w	fp, fp, #4
 800bfb0:	9b05      	ldr	r3, [sp, #20]
 800bfb2:	e00d      	b.n	800bfd0 <__gethex+0x24a>
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	9a08      	ldr	r2, [sp, #32]
 800bfb8:	4413      	add	r3, r2
 800bfba:	42bb      	cmp	r3, r7
 800bfbc:	d3e1      	bcc.n	800bf82 <__gethex+0x1fc>
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	9a01      	ldr	r2, [sp, #4]
 800bfc2:	9903      	ldr	r1, [sp, #12]
 800bfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc6:	f001 f923 	bl	800d210 <strncmp>
 800bfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1d8      	bne.n	800bf82 <__gethex+0x1fc>
 800bfd0:	461e      	mov	r6, r3
 800bfd2:	e791      	b.n	800bef8 <__gethex+0x172>
 800bfd4:	1eb9      	subs	r1, r7, #2
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f000 fda0 	bl	800cb1c <__any_on>
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d0b2      	beq.n	800bf46 <__gethex+0x1c0>
 800bfe0:	f04f 0a03 	mov.w	sl, #3
 800bfe4:	e7b1      	b.n	800bf4a <__gethex+0x1c4>
 800bfe6:	da09      	bge.n	800bffc <__gethex+0x276>
 800bfe8:	1bf7      	subs	r7, r6, r7
 800bfea:	4629      	mov	r1, r5
 800bfec:	463a      	mov	r2, r7
 800bfee:	9802      	ldr	r0, [sp, #8]
 800bff0:	f000 fbb6 	bl	800c760 <__lshift>
 800bff4:	1be4      	subs	r4, r4, r7
 800bff6:	4605      	mov	r5, r0
 800bff8:	f100 0914 	add.w	r9, r0, #20
 800bffc:	f04f 0a00 	mov.w	sl, #0
 800c000:	e7a8      	b.n	800bf54 <__gethex+0x1ce>
 800c002:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c006:	42a0      	cmp	r0, r4
 800c008:	dd6a      	ble.n	800c0e0 <__gethex+0x35a>
 800c00a:	1b04      	subs	r4, r0, r4
 800c00c:	42a6      	cmp	r6, r4
 800c00e:	dc2e      	bgt.n	800c06e <__gethex+0x2e8>
 800c010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d022      	beq.n	800c05e <__gethex+0x2d8>
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d024      	beq.n	800c066 <__gethex+0x2e0>
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d115      	bne.n	800c04c <__gethex+0x2c6>
 800c020:	42a6      	cmp	r6, r4
 800c022:	d113      	bne.n	800c04c <__gethex+0x2c6>
 800c024:	2e01      	cmp	r6, #1
 800c026:	dc0b      	bgt.n	800c040 <__gethex+0x2ba>
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	2301      	movs	r3, #1
 800c032:	612b      	str	r3, [r5, #16]
 800c034:	f8c9 3000 	str.w	r3, [r9]
 800c038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c03a:	2762      	movs	r7, #98	; 0x62
 800c03c:	601d      	str	r5, [r3, #0]
 800c03e:	e72a      	b.n	800be96 <__gethex+0x110>
 800c040:	1e71      	subs	r1, r6, #1
 800c042:	4628      	mov	r0, r5
 800c044:	f000 fd6a 	bl	800cb1c <__any_on>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d1ed      	bne.n	800c028 <__gethex+0x2a2>
 800c04c:	4629      	mov	r1, r5
 800c04e:	9802      	ldr	r0, [sp, #8]
 800c050:	f000 f9bb 	bl	800c3ca <_Bfree>
 800c054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c056:	2300      	movs	r3, #0
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	2750      	movs	r7, #80	; 0x50
 800c05c:	e71b      	b.n	800be96 <__gethex+0x110>
 800c05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0e1      	beq.n	800c028 <__gethex+0x2a2>
 800c064:	e7f2      	b.n	800c04c <__gethex+0x2c6>
 800c066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1dd      	bne.n	800c028 <__gethex+0x2a2>
 800c06c:	e7ee      	b.n	800c04c <__gethex+0x2c6>
 800c06e:	1e67      	subs	r7, r4, #1
 800c070:	f1ba 0f00 	cmp.w	sl, #0
 800c074:	d131      	bne.n	800c0da <__gethex+0x354>
 800c076:	b127      	cbz	r7, 800c082 <__gethex+0x2fc>
 800c078:	4639      	mov	r1, r7
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 fd4e 	bl	800cb1c <__any_on>
 800c080:	4682      	mov	sl, r0
 800c082:	117a      	asrs	r2, r7, #5
 800c084:	2301      	movs	r3, #1
 800c086:	f007 071f 	and.w	r7, r7, #31
 800c08a:	fa03 f707 	lsl.w	r7, r3, r7
 800c08e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c092:	4621      	mov	r1, r4
 800c094:	421f      	tst	r7, r3
 800c096:	4628      	mov	r0, r5
 800c098:	bf18      	it	ne
 800c09a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c09e:	1b36      	subs	r6, r6, r4
 800c0a0:	f7ff fe22 	bl	800bce8 <rshift>
 800c0a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c0a8:	2702      	movs	r7, #2
 800c0aa:	f1ba 0f00 	cmp.w	sl, #0
 800c0ae:	d048      	beq.n	800c142 <__gethex+0x3bc>
 800c0b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	d015      	beq.n	800c0e4 <__gethex+0x35e>
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d017      	beq.n	800c0ec <__gethex+0x366>
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d109      	bne.n	800c0d4 <__gethex+0x34e>
 800c0c0:	f01a 0f02 	tst.w	sl, #2
 800c0c4:	d006      	beq.n	800c0d4 <__gethex+0x34e>
 800c0c6:	f8d9 3000 	ldr.w	r3, [r9]
 800c0ca:	ea4a 0a03 	orr.w	sl, sl, r3
 800c0ce:	f01a 0f01 	tst.w	sl, #1
 800c0d2:	d10e      	bne.n	800c0f2 <__gethex+0x36c>
 800c0d4:	f047 0710 	orr.w	r7, r7, #16
 800c0d8:	e033      	b.n	800c142 <__gethex+0x3bc>
 800c0da:	f04f 0a01 	mov.w	sl, #1
 800c0de:	e7d0      	b.n	800c082 <__gethex+0x2fc>
 800c0e0:	2701      	movs	r7, #1
 800c0e2:	e7e2      	b.n	800c0aa <__gethex+0x324>
 800c0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0e6:	f1c3 0301 	rsb	r3, r3, #1
 800c0ea:	9315      	str	r3, [sp, #84]	; 0x54
 800c0ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0f0      	beq.n	800c0d4 <__gethex+0x34e>
 800c0f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c0f6:	f105 0314 	add.w	r3, r5, #20
 800c0fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c0fe:	eb03 010a 	add.w	r1, r3, sl
 800c102:	f04f 0c00 	mov.w	ip, #0
 800c106:	4618      	mov	r0, r3
 800c108:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c110:	d01c      	beq.n	800c14c <__gethex+0x3c6>
 800c112:	3201      	adds	r2, #1
 800c114:	6002      	str	r2, [r0, #0]
 800c116:	2f02      	cmp	r7, #2
 800c118:	f105 0314 	add.w	r3, r5, #20
 800c11c:	d138      	bne.n	800c190 <__gethex+0x40a>
 800c11e:	f8d8 2000 	ldr.w	r2, [r8]
 800c122:	3a01      	subs	r2, #1
 800c124:	42b2      	cmp	r2, r6
 800c126:	d10a      	bne.n	800c13e <__gethex+0x3b8>
 800c128:	1171      	asrs	r1, r6, #5
 800c12a:	2201      	movs	r2, #1
 800c12c:	f006 061f 	and.w	r6, r6, #31
 800c130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c134:	fa02 f606 	lsl.w	r6, r2, r6
 800c138:	421e      	tst	r6, r3
 800c13a:	bf18      	it	ne
 800c13c:	4617      	movne	r7, r2
 800c13e:	f047 0720 	orr.w	r7, r7, #32
 800c142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c144:	601d      	str	r5, [r3, #0]
 800c146:	9b06      	ldr	r3, [sp, #24]
 800c148:	601c      	str	r4, [r3, #0]
 800c14a:	e6a4      	b.n	800be96 <__gethex+0x110>
 800c14c:	4299      	cmp	r1, r3
 800c14e:	f843 cc04 	str.w	ip, [r3, #-4]
 800c152:	d8d8      	bhi.n	800c106 <__gethex+0x380>
 800c154:	68ab      	ldr	r3, [r5, #8]
 800c156:	4599      	cmp	r9, r3
 800c158:	db12      	blt.n	800c180 <__gethex+0x3fa>
 800c15a:	6869      	ldr	r1, [r5, #4]
 800c15c:	9802      	ldr	r0, [sp, #8]
 800c15e:	3101      	adds	r1, #1
 800c160:	f000 f8ff 	bl	800c362 <_Balloc>
 800c164:	692a      	ldr	r2, [r5, #16]
 800c166:	3202      	adds	r2, #2
 800c168:	f105 010c 	add.w	r1, r5, #12
 800c16c:	4683      	mov	fp, r0
 800c16e:	0092      	lsls	r2, r2, #2
 800c170:	300c      	adds	r0, #12
 800c172:	f7fe fe3f 	bl	800adf4 <memcpy>
 800c176:	4629      	mov	r1, r5
 800c178:	9802      	ldr	r0, [sp, #8]
 800c17a:	f000 f926 	bl	800c3ca <_Bfree>
 800c17e:	465d      	mov	r5, fp
 800c180:	692b      	ldr	r3, [r5, #16]
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c188:	612a      	str	r2, [r5, #16]
 800c18a:	2201      	movs	r2, #1
 800c18c:	615a      	str	r2, [r3, #20]
 800c18e:	e7c2      	b.n	800c116 <__gethex+0x390>
 800c190:	692a      	ldr	r2, [r5, #16]
 800c192:	454a      	cmp	r2, r9
 800c194:	dd0b      	ble.n	800c1ae <__gethex+0x428>
 800c196:	2101      	movs	r1, #1
 800c198:	4628      	mov	r0, r5
 800c19a:	f7ff fda5 	bl	800bce8 <rshift>
 800c19e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1a2:	3401      	adds	r4, #1
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	f6ff aed9 	blt.w	800bf5c <__gethex+0x1d6>
 800c1aa:	2701      	movs	r7, #1
 800c1ac:	e7c7      	b.n	800c13e <__gethex+0x3b8>
 800c1ae:	f016 061f 	ands.w	r6, r6, #31
 800c1b2:	d0fa      	beq.n	800c1aa <__gethex+0x424>
 800c1b4:	449a      	add	sl, r3
 800c1b6:	f1c6 0620 	rsb	r6, r6, #32
 800c1ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c1be:	f000 f994 	bl	800c4ea <__hi0bits>
 800c1c2:	42b0      	cmp	r0, r6
 800c1c4:	dbe7      	blt.n	800c196 <__gethex+0x410>
 800c1c6:	e7f0      	b.n	800c1aa <__gethex+0x424>

0800c1c8 <L_shift>:
 800c1c8:	f1c2 0208 	rsb	r2, r2, #8
 800c1cc:	0092      	lsls	r2, r2, #2
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	f1c2 0620 	rsb	r6, r2, #32
 800c1d4:	6843      	ldr	r3, [r0, #4]
 800c1d6:	6804      	ldr	r4, [r0, #0]
 800c1d8:	fa03 f506 	lsl.w	r5, r3, r6
 800c1dc:	432c      	orrs	r4, r5
 800c1de:	40d3      	lsrs	r3, r2
 800c1e0:	6004      	str	r4, [r0, #0]
 800c1e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1e6:	4288      	cmp	r0, r1
 800c1e8:	d3f4      	bcc.n	800c1d4 <L_shift+0xc>
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}

0800c1ec <__match>:
 800c1ec:	b530      	push	{r4, r5, lr}
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1f6:	b914      	cbnz	r4, 800c1fe <__match+0x12>
 800c1f8:	6003      	str	r3, [r0, #0]
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	bd30      	pop	{r4, r5, pc}
 800c1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c206:	2d19      	cmp	r5, #25
 800c208:	bf98      	it	ls
 800c20a:	3220      	addls	r2, #32
 800c20c:	42a2      	cmp	r2, r4
 800c20e:	d0f0      	beq.n	800c1f2 <__match+0x6>
 800c210:	2000      	movs	r0, #0
 800c212:	e7f3      	b.n	800c1fc <__match+0x10>

0800c214 <__hexnan>:
 800c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c218:	680b      	ldr	r3, [r1, #0]
 800c21a:	6801      	ldr	r1, [r0, #0]
 800c21c:	115f      	asrs	r7, r3, #5
 800c21e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c222:	f013 031f 	ands.w	r3, r3, #31
 800c226:	b087      	sub	sp, #28
 800c228:	bf18      	it	ne
 800c22a:	3704      	addne	r7, #4
 800c22c:	2500      	movs	r5, #0
 800c22e:	1f3e      	subs	r6, r7, #4
 800c230:	4682      	mov	sl, r0
 800c232:	4690      	mov	r8, r2
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	f847 5c04 	str.w	r5, [r7, #-4]
 800c23a:	46b1      	mov	r9, r6
 800c23c:	4634      	mov	r4, r6
 800c23e:	9502      	str	r5, [sp, #8]
 800c240:	46ab      	mov	fp, r5
 800c242:	784a      	ldrb	r2, [r1, #1]
 800c244:	1c4b      	adds	r3, r1, #1
 800c246:	9303      	str	r3, [sp, #12]
 800c248:	b342      	cbz	r2, 800c29c <__hexnan+0x88>
 800c24a:	4610      	mov	r0, r2
 800c24c:	9105      	str	r1, [sp, #20]
 800c24e:	9204      	str	r2, [sp, #16]
 800c250:	f7ff fd84 	bl	800bd5c <__hexdig_fun>
 800c254:	2800      	cmp	r0, #0
 800c256:	d143      	bne.n	800c2e0 <__hexnan+0xcc>
 800c258:	9a04      	ldr	r2, [sp, #16]
 800c25a:	9905      	ldr	r1, [sp, #20]
 800c25c:	2a20      	cmp	r2, #32
 800c25e:	d818      	bhi.n	800c292 <__hexnan+0x7e>
 800c260:	9b02      	ldr	r3, [sp, #8]
 800c262:	459b      	cmp	fp, r3
 800c264:	dd13      	ble.n	800c28e <__hexnan+0x7a>
 800c266:	454c      	cmp	r4, r9
 800c268:	d206      	bcs.n	800c278 <__hexnan+0x64>
 800c26a:	2d07      	cmp	r5, #7
 800c26c:	dc04      	bgt.n	800c278 <__hexnan+0x64>
 800c26e:	462a      	mov	r2, r5
 800c270:	4649      	mov	r1, r9
 800c272:	4620      	mov	r0, r4
 800c274:	f7ff ffa8 	bl	800c1c8 <L_shift>
 800c278:	4544      	cmp	r4, r8
 800c27a:	d944      	bls.n	800c306 <__hexnan+0xf2>
 800c27c:	2300      	movs	r3, #0
 800c27e:	f1a4 0904 	sub.w	r9, r4, #4
 800c282:	f844 3c04 	str.w	r3, [r4, #-4]
 800c286:	f8cd b008 	str.w	fp, [sp, #8]
 800c28a:	464c      	mov	r4, r9
 800c28c:	461d      	mov	r5, r3
 800c28e:	9903      	ldr	r1, [sp, #12]
 800c290:	e7d7      	b.n	800c242 <__hexnan+0x2e>
 800c292:	2a29      	cmp	r2, #41	; 0x29
 800c294:	d14a      	bne.n	800c32c <__hexnan+0x118>
 800c296:	3102      	adds	r1, #2
 800c298:	f8ca 1000 	str.w	r1, [sl]
 800c29c:	f1bb 0f00 	cmp.w	fp, #0
 800c2a0:	d044      	beq.n	800c32c <__hexnan+0x118>
 800c2a2:	454c      	cmp	r4, r9
 800c2a4:	d206      	bcs.n	800c2b4 <__hexnan+0xa0>
 800c2a6:	2d07      	cmp	r5, #7
 800c2a8:	dc04      	bgt.n	800c2b4 <__hexnan+0xa0>
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7ff ff8a 	bl	800c1c8 <L_shift>
 800c2b4:	4544      	cmp	r4, r8
 800c2b6:	d928      	bls.n	800c30a <__hexnan+0xf6>
 800c2b8:	4643      	mov	r3, r8
 800c2ba:	f854 2b04 	ldr.w	r2, [r4], #4
 800c2be:	f843 2b04 	str.w	r2, [r3], #4
 800c2c2:	42a6      	cmp	r6, r4
 800c2c4:	d2f9      	bcs.n	800c2ba <__hexnan+0xa6>
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f843 2b04 	str.w	r2, [r3], #4
 800c2cc:	429e      	cmp	r6, r3
 800c2ce:	d2fb      	bcs.n	800c2c8 <__hexnan+0xb4>
 800c2d0:	6833      	ldr	r3, [r6, #0]
 800c2d2:	b91b      	cbnz	r3, 800c2dc <__hexnan+0xc8>
 800c2d4:	4546      	cmp	r6, r8
 800c2d6:	d127      	bne.n	800c328 <__hexnan+0x114>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	6033      	str	r3, [r6, #0]
 800c2dc:	2005      	movs	r0, #5
 800c2de:	e026      	b.n	800c32e <__hexnan+0x11a>
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	2d08      	cmp	r5, #8
 800c2e4:	f10b 0b01 	add.w	fp, fp, #1
 800c2e8:	dd06      	ble.n	800c2f8 <__hexnan+0xe4>
 800c2ea:	4544      	cmp	r4, r8
 800c2ec:	d9cf      	bls.n	800c28e <__hexnan+0x7a>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2f4:	2501      	movs	r5, #1
 800c2f6:	3c04      	subs	r4, #4
 800c2f8:	6822      	ldr	r2, [r4, #0]
 800c2fa:	f000 000f 	and.w	r0, r0, #15
 800c2fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c302:	6020      	str	r0, [r4, #0]
 800c304:	e7c3      	b.n	800c28e <__hexnan+0x7a>
 800c306:	2508      	movs	r5, #8
 800c308:	e7c1      	b.n	800c28e <__hexnan+0x7a>
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d0df      	beq.n	800c2d0 <__hexnan+0xbc>
 800c310:	f04f 32ff 	mov.w	r2, #4294967295
 800c314:	f1c3 0320 	rsb	r3, r3, #32
 800c318:	fa22 f303 	lsr.w	r3, r2, r3
 800c31c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c320:	401a      	ands	r2, r3
 800c322:	f847 2c04 	str.w	r2, [r7, #-4]
 800c326:	e7d3      	b.n	800c2d0 <__hexnan+0xbc>
 800c328:	3e04      	subs	r6, #4
 800c32a:	e7d1      	b.n	800c2d0 <__hexnan+0xbc>
 800c32c:	2004      	movs	r0, #4
 800c32e:	b007      	add	sp, #28
 800c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c334 <__locale_ctype_ptr_l>:
 800c334:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c338:	4770      	bx	lr

0800c33a <__localeconv_l>:
 800c33a:	30f0      	adds	r0, #240	; 0xf0
 800c33c:	4770      	bx	lr

0800c33e <__ascii_mbtowc>:
 800c33e:	b082      	sub	sp, #8
 800c340:	b901      	cbnz	r1, 800c344 <__ascii_mbtowc+0x6>
 800c342:	a901      	add	r1, sp, #4
 800c344:	b142      	cbz	r2, 800c358 <__ascii_mbtowc+0x1a>
 800c346:	b14b      	cbz	r3, 800c35c <__ascii_mbtowc+0x1e>
 800c348:	7813      	ldrb	r3, [r2, #0]
 800c34a:	600b      	str	r3, [r1, #0]
 800c34c:	7812      	ldrb	r2, [r2, #0]
 800c34e:	1c10      	adds	r0, r2, #0
 800c350:	bf18      	it	ne
 800c352:	2001      	movne	r0, #1
 800c354:	b002      	add	sp, #8
 800c356:	4770      	bx	lr
 800c358:	4610      	mov	r0, r2
 800c35a:	e7fb      	b.n	800c354 <__ascii_mbtowc+0x16>
 800c35c:	f06f 0001 	mvn.w	r0, #1
 800c360:	e7f8      	b.n	800c354 <__ascii_mbtowc+0x16>

0800c362 <_Balloc>:
 800c362:	b570      	push	{r4, r5, r6, lr}
 800c364:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c366:	4604      	mov	r4, r0
 800c368:	460e      	mov	r6, r1
 800c36a:	b93d      	cbnz	r5, 800c37c <_Balloc+0x1a>
 800c36c:	2010      	movs	r0, #16
 800c36e:	f000 ff6f 	bl	800d250 <malloc>
 800c372:	6260      	str	r0, [r4, #36]	; 0x24
 800c374:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c378:	6005      	str	r5, [r0, #0]
 800c37a:	60c5      	str	r5, [r0, #12]
 800c37c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c37e:	68eb      	ldr	r3, [r5, #12]
 800c380:	b183      	cbz	r3, 800c3a4 <_Balloc+0x42>
 800c382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c38a:	b9b8      	cbnz	r0, 800c3bc <_Balloc+0x5a>
 800c38c:	2101      	movs	r1, #1
 800c38e:	fa01 f506 	lsl.w	r5, r1, r6
 800c392:	1d6a      	adds	r2, r5, #5
 800c394:	0092      	lsls	r2, r2, #2
 800c396:	4620      	mov	r0, r4
 800c398:	f000 fbe1 	bl	800cb5e <_calloc_r>
 800c39c:	b160      	cbz	r0, 800c3b8 <_Balloc+0x56>
 800c39e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c3a2:	e00e      	b.n	800c3c2 <_Balloc+0x60>
 800c3a4:	2221      	movs	r2, #33	; 0x21
 800c3a6:	2104      	movs	r1, #4
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 fbd8 	bl	800cb5e <_calloc_r>
 800c3ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3b0:	60e8      	str	r0, [r5, #12]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e4      	bne.n	800c382 <_Balloc+0x20>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	6802      	ldr	r2, [r0, #0]
 800c3be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3c8:	e7f7      	b.n	800c3ba <_Balloc+0x58>

0800c3ca <_Bfree>:
 800c3ca:	b570      	push	{r4, r5, r6, lr}
 800c3cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	b93c      	cbnz	r4, 800c3e4 <_Bfree+0x1a>
 800c3d4:	2010      	movs	r0, #16
 800c3d6:	f000 ff3b 	bl	800d250 <malloc>
 800c3da:	6270      	str	r0, [r6, #36]	; 0x24
 800c3dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e0:	6004      	str	r4, [r0, #0]
 800c3e2:	60c4      	str	r4, [r0, #12]
 800c3e4:	b13d      	cbz	r5, 800c3f6 <_Bfree+0x2c>
 800c3e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c3e8:	686a      	ldr	r2, [r5, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3f0:	6029      	str	r1, [r5, #0]
 800c3f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}

0800c3f8 <__multadd>:
 800c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3fc:	690d      	ldr	r5, [r1, #16]
 800c3fe:	461f      	mov	r7, r3
 800c400:	4606      	mov	r6, r0
 800c402:	460c      	mov	r4, r1
 800c404:	f101 0c14 	add.w	ip, r1, #20
 800c408:	2300      	movs	r3, #0
 800c40a:	f8dc 0000 	ldr.w	r0, [ip]
 800c40e:	b281      	uxth	r1, r0
 800c410:	fb02 7101 	mla	r1, r2, r1, r7
 800c414:	0c0f      	lsrs	r7, r1, #16
 800c416:	0c00      	lsrs	r0, r0, #16
 800c418:	fb02 7000 	mla	r0, r2, r0, r7
 800c41c:	b289      	uxth	r1, r1
 800c41e:	3301      	adds	r3, #1
 800c420:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c424:	429d      	cmp	r5, r3
 800c426:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c42a:	f84c 1b04 	str.w	r1, [ip], #4
 800c42e:	dcec      	bgt.n	800c40a <__multadd+0x12>
 800c430:	b1d7      	cbz	r7, 800c468 <__multadd+0x70>
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	42ab      	cmp	r3, r5
 800c436:	dc12      	bgt.n	800c45e <__multadd+0x66>
 800c438:	6861      	ldr	r1, [r4, #4]
 800c43a:	4630      	mov	r0, r6
 800c43c:	3101      	adds	r1, #1
 800c43e:	f7ff ff90 	bl	800c362 <_Balloc>
 800c442:	6922      	ldr	r2, [r4, #16]
 800c444:	3202      	adds	r2, #2
 800c446:	f104 010c 	add.w	r1, r4, #12
 800c44a:	4680      	mov	r8, r0
 800c44c:	0092      	lsls	r2, r2, #2
 800c44e:	300c      	adds	r0, #12
 800c450:	f7fe fcd0 	bl	800adf4 <memcpy>
 800c454:	4621      	mov	r1, r4
 800c456:	4630      	mov	r0, r6
 800c458:	f7ff ffb7 	bl	800c3ca <_Bfree>
 800c45c:	4644      	mov	r4, r8
 800c45e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c462:	3501      	adds	r5, #1
 800c464:	615f      	str	r7, [r3, #20]
 800c466:	6125      	str	r5, [r4, #16]
 800c468:	4620      	mov	r0, r4
 800c46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c46e <__s2b>:
 800c46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c472:	460c      	mov	r4, r1
 800c474:	4615      	mov	r5, r2
 800c476:	461f      	mov	r7, r3
 800c478:	2209      	movs	r2, #9
 800c47a:	3308      	adds	r3, #8
 800c47c:	4606      	mov	r6, r0
 800c47e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c482:	2100      	movs	r1, #0
 800c484:	2201      	movs	r2, #1
 800c486:	429a      	cmp	r2, r3
 800c488:	db20      	blt.n	800c4cc <__s2b+0x5e>
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7ff ff69 	bl	800c362 <_Balloc>
 800c490:	9b08      	ldr	r3, [sp, #32]
 800c492:	6143      	str	r3, [r0, #20]
 800c494:	2d09      	cmp	r5, #9
 800c496:	f04f 0301 	mov.w	r3, #1
 800c49a:	6103      	str	r3, [r0, #16]
 800c49c:	dd19      	ble.n	800c4d2 <__s2b+0x64>
 800c49e:	f104 0809 	add.w	r8, r4, #9
 800c4a2:	46c1      	mov	r9, r8
 800c4a4:	442c      	add	r4, r5
 800c4a6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	3b30      	subs	r3, #48	; 0x30
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f7ff ffa1 	bl	800c3f8 <__multadd>
 800c4b6:	45a1      	cmp	r9, r4
 800c4b8:	d1f5      	bne.n	800c4a6 <__s2b+0x38>
 800c4ba:	eb08 0405 	add.w	r4, r8, r5
 800c4be:	3c08      	subs	r4, #8
 800c4c0:	1b2d      	subs	r5, r5, r4
 800c4c2:	1963      	adds	r3, r4, r5
 800c4c4:	42bb      	cmp	r3, r7
 800c4c6:	db07      	blt.n	800c4d8 <__s2b+0x6a>
 800c4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4cc:	0052      	lsls	r2, r2, #1
 800c4ce:	3101      	adds	r1, #1
 800c4d0:	e7d9      	b.n	800c486 <__s2b+0x18>
 800c4d2:	340a      	adds	r4, #10
 800c4d4:	2509      	movs	r5, #9
 800c4d6:	e7f3      	b.n	800c4c0 <__s2b+0x52>
 800c4d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4dc:	4601      	mov	r1, r0
 800c4de:	3b30      	subs	r3, #48	; 0x30
 800c4e0:	220a      	movs	r2, #10
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7ff ff88 	bl	800c3f8 <__multadd>
 800c4e8:	e7eb      	b.n	800c4c2 <__s2b+0x54>

0800c4ea <__hi0bits>:
 800c4ea:	0c02      	lsrs	r2, r0, #16
 800c4ec:	0412      	lsls	r2, r2, #16
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	b9b2      	cbnz	r2, 800c520 <__hi0bits+0x36>
 800c4f2:	0403      	lsls	r3, r0, #16
 800c4f4:	2010      	movs	r0, #16
 800c4f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c4fa:	bf04      	itt	eq
 800c4fc:	021b      	lsleq	r3, r3, #8
 800c4fe:	3008      	addeq	r0, #8
 800c500:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c504:	bf04      	itt	eq
 800c506:	011b      	lsleq	r3, r3, #4
 800c508:	3004      	addeq	r0, #4
 800c50a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c50e:	bf04      	itt	eq
 800c510:	009b      	lsleq	r3, r3, #2
 800c512:	3002      	addeq	r0, #2
 800c514:	2b00      	cmp	r3, #0
 800c516:	db06      	blt.n	800c526 <__hi0bits+0x3c>
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	d503      	bpl.n	800c524 <__hi0bits+0x3a>
 800c51c:	3001      	adds	r0, #1
 800c51e:	4770      	bx	lr
 800c520:	2000      	movs	r0, #0
 800c522:	e7e8      	b.n	800c4f6 <__hi0bits+0xc>
 800c524:	2020      	movs	r0, #32
 800c526:	4770      	bx	lr

0800c528 <__lo0bits>:
 800c528:	6803      	ldr	r3, [r0, #0]
 800c52a:	f013 0207 	ands.w	r2, r3, #7
 800c52e:	4601      	mov	r1, r0
 800c530:	d00b      	beq.n	800c54a <__lo0bits+0x22>
 800c532:	07da      	lsls	r2, r3, #31
 800c534:	d423      	bmi.n	800c57e <__lo0bits+0x56>
 800c536:	0798      	lsls	r0, r3, #30
 800c538:	bf49      	itett	mi
 800c53a:	085b      	lsrmi	r3, r3, #1
 800c53c:	089b      	lsrpl	r3, r3, #2
 800c53e:	2001      	movmi	r0, #1
 800c540:	600b      	strmi	r3, [r1, #0]
 800c542:	bf5c      	itt	pl
 800c544:	600b      	strpl	r3, [r1, #0]
 800c546:	2002      	movpl	r0, #2
 800c548:	4770      	bx	lr
 800c54a:	b298      	uxth	r0, r3
 800c54c:	b9a8      	cbnz	r0, 800c57a <__lo0bits+0x52>
 800c54e:	0c1b      	lsrs	r3, r3, #16
 800c550:	2010      	movs	r0, #16
 800c552:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c556:	bf04      	itt	eq
 800c558:	0a1b      	lsreq	r3, r3, #8
 800c55a:	3008      	addeq	r0, #8
 800c55c:	071a      	lsls	r2, r3, #28
 800c55e:	bf04      	itt	eq
 800c560:	091b      	lsreq	r3, r3, #4
 800c562:	3004      	addeq	r0, #4
 800c564:	079a      	lsls	r2, r3, #30
 800c566:	bf04      	itt	eq
 800c568:	089b      	lsreq	r3, r3, #2
 800c56a:	3002      	addeq	r0, #2
 800c56c:	07da      	lsls	r2, r3, #31
 800c56e:	d402      	bmi.n	800c576 <__lo0bits+0x4e>
 800c570:	085b      	lsrs	r3, r3, #1
 800c572:	d006      	beq.n	800c582 <__lo0bits+0x5a>
 800c574:	3001      	adds	r0, #1
 800c576:	600b      	str	r3, [r1, #0]
 800c578:	4770      	bx	lr
 800c57a:	4610      	mov	r0, r2
 800c57c:	e7e9      	b.n	800c552 <__lo0bits+0x2a>
 800c57e:	2000      	movs	r0, #0
 800c580:	4770      	bx	lr
 800c582:	2020      	movs	r0, #32
 800c584:	4770      	bx	lr

0800c586 <__i2b>:
 800c586:	b510      	push	{r4, lr}
 800c588:	460c      	mov	r4, r1
 800c58a:	2101      	movs	r1, #1
 800c58c:	f7ff fee9 	bl	800c362 <_Balloc>
 800c590:	2201      	movs	r2, #1
 800c592:	6144      	str	r4, [r0, #20]
 800c594:	6102      	str	r2, [r0, #16]
 800c596:	bd10      	pop	{r4, pc}

0800c598 <__multiply>:
 800c598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	4614      	mov	r4, r2
 800c59e:	690a      	ldr	r2, [r1, #16]
 800c5a0:	6923      	ldr	r3, [r4, #16]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	bfb8      	it	lt
 800c5a6:	460b      	movlt	r3, r1
 800c5a8:	4688      	mov	r8, r1
 800c5aa:	bfbc      	itt	lt
 800c5ac:	46a0      	movlt	r8, r4
 800c5ae:	461c      	movlt	r4, r3
 800c5b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c5b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5c0:	eb07 0609 	add.w	r6, r7, r9
 800c5c4:	42b3      	cmp	r3, r6
 800c5c6:	bfb8      	it	lt
 800c5c8:	3101      	addlt	r1, #1
 800c5ca:	f7ff feca 	bl	800c362 <_Balloc>
 800c5ce:	f100 0514 	add.w	r5, r0, #20
 800c5d2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4573      	cmp	r3, lr
 800c5dc:	d316      	bcc.n	800c60c <__multiply+0x74>
 800c5de:	f104 0214 	add.w	r2, r4, #20
 800c5e2:	f108 0114 	add.w	r1, r8, #20
 800c5e6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c5ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	9b00      	ldr	r3, [sp, #0]
 800c5f2:	9201      	str	r2, [sp, #4]
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d80c      	bhi.n	800c612 <__multiply+0x7a>
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	dd03      	ble.n	800c604 <__multiply+0x6c>
 800c5fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c600:	2b00      	cmp	r3, #0
 800c602:	d05d      	beq.n	800c6c0 <__multiply+0x128>
 800c604:	6106      	str	r6, [r0, #16]
 800c606:	b003      	add	sp, #12
 800c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60c:	f843 2b04 	str.w	r2, [r3], #4
 800c610:	e7e3      	b.n	800c5da <__multiply+0x42>
 800c612:	f8b2 b000 	ldrh.w	fp, [r2]
 800c616:	f1bb 0f00 	cmp.w	fp, #0
 800c61a:	d023      	beq.n	800c664 <__multiply+0xcc>
 800c61c:	4689      	mov	r9, r1
 800c61e:	46ac      	mov	ip, r5
 800c620:	f04f 0800 	mov.w	r8, #0
 800c624:	f859 4b04 	ldr.w	r4, [r9], #4
 800c628:	f8dc a000 	ldr.w	sl, [ip]
 800c62c:	b2a3      	uxth	r3, r4
 800c62e:	fa1f fa8a 	uxth.w	sl, sl
 800c632:	fb0b a303 	mla	r3, fp, r3, sl
 800c636:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c63a:	f8dc 4000 	ldr.w	r4, [ip]
 800c63e:	4443      	add	r3, r8
 800c640:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c644:	fb0b 840a 	mla	r4, fp, sl, r8
 800c648:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c64c:	46e2      	mov	sl, ip
 800c64e:	b29b      	uxth	r3, r3
 800c650:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c654:	454f      	cmp	r7, r9
 800c656:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c65a:	f84a 3b04 	str.w	r3, [sl], #4
 800c65e:	d82b      	bhi.n	800c6b8 <__multiply+0x120>
 800c660:	f8cc 8004 	str.w	r8, [ip, #4]
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c66a:	3204      	adds	r2, #4
 800c66c:	f1ba 0f00 	cmp.w	sl, #0
 800c670:	d020      	beq.n	800c6b4 <__multiply+0x11c>
 800c672:	682b      	ldr	r3, [r5, #0]
 800c674:	4689      	mov	r9, r1
 800c676:	46a8      	mov	r8, r5
 800c678:	f04f 0b00 	mov.w	fp, #0
 800c67c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c680:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c684:	fb0a 440c 	mla	r4, sl, ip, r4
 800c688:	445c      	add	r4, fp
 800c68a:	46c4      	mov	ip, r8
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c692:	f84c 3b04 	str.w	r3, [ip], #4
 800c696:	f859 3b04 	ldr.w	r3, [r9], #4
 800c69a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c69e:	0c1b      	lsrs	r3, r3, #16
 800c6a0:	fb0a b303 	mla	r3, sl, r3, fp
 800c6a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c6a8:	454f      	cmp	r7, r9
 800c6aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c6ae:	d805      	bhi.n	800c6bc <__multiply+0x124>
 800c6b0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c6b4:	3504      	adds	r5, #4
 800c6b6:	e79b      	b.n	800c5f0 <__multiply+0x58>
 800c6b8:	46d4      	mov	ip, sl
 800c6ba:	e7b3      	b.n	800c624 <__multiply+0x8c>
 800c6bc:	46e0      	mov	r8, ip
 800c6be:	e7dd      	b.n	800c67c <__multiply+0xe4>
 800c6c0:	3e01      	subs	r6, #1
 800c6c2:	e799      	b.n	800c5f8 <__multiply+0x60>

0800c6c4 <__pow5mult>:
 800c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	4615      	mov	r5, r2
 800c6ca:	f012 0203 	ands.w	r2, r2, #3
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	d007      	beq.n	800c6e4 <__pow5mult+0x20>
 800c6d4:	3a01      	subs	r2, #1
 800c6d6:	4c21      	ldr	r4, [pc, #132]	; (800c75c <__pow5mult+0x98>)
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6de:	f7ff fe8b 	bl	800c3f8 <__multadd>
 800c6e2:	4607      	mov	r7, r0
 800c6e4:	10ad      	asrs	r5, r5, #2
 800c6e6:	d035      	beq.n	800c754 <__pow5mult+0x90>
 800c6e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6ea:	b93c      	cbnz	r4, 800c6fc <__pow5mult+0x38>
 800c6ec:	2010      	movs	r0, #16
 800c6ee:	f000 fdaf 	bl	800d250 <malloc>
 800c6f2:	6270      	str	r0, [r6, #36]	; 0x24
 800c6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6f8:	6004      	str	r4, [r0, #0]
 800c6fa:	60c4      	str	r4, [r0, #12]
 800c6fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c704:	b94c      	cbnz	r4, 800c71a <__pow5mult+0x56>
 800c706:	f240 2171 	movw	r1, #625	; 0x271
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7ff ff3b 	bl	800c586 <__i2b>
 800c710:	2300      	movs	r3, #0
 800c712:	f8c8 0008 	str.w	r0, [r8, #8]
 800c716:	4604      	mov	r4, r0
 800c718:	6003      	str	r3, [r0, #0]
 800c71a:	f04f 0800 	mov.w	r8, #0
 800c71e:	07eb      	lsls	r3, r5, #31
 800c720:	d50a      	bpl.n	800c738 <__pow5mult+0x74>
 800c722:	4639      	mov	r1, r7
 800c724:	4622      	mov	r2, r4
 800c726:	4630      	mov	r0, r6
 800c728:	f7ff ff36 	bl	800c598 <__multiply>
 800c72c:	4639      	mov	r1, r7
 800c72e:	4681      	mov	r9, r0
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff fe4a 	bl	800c3ca <_Bfree>
 800c736:	464f      	mov	r7, r9
 800c738:	106d      	asrs	r5, r5, #1
 800c73a:	d00b      	beq.n	800c754 <__pow5mult+0x90>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	b938      	cbnz	r0, 800c750 <__pow5mult+0x8c>
 800c740:	4622      	mov	r2, r4
 800c742:	4621      	mov	r1, r4
 800c744:	4630      	mov	r0, r6
 800c746:	f7ff ff27 	bl	800c598 <__multiply>
 800c74a:	6020      	str	r0, [r4, #0]
 800c74c:	f8c0 8000 	str.w	r8, [r0]
 800c750:	4604      	mov	r4, r0
 800c752:	e7e4      	b.n	800c71e <__pow5mult+0x5a>
 800c754:	4638      	mov	r0, r7
 800c756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75a:	bf00      	nop
 800c75c:	080198f8 	.word	0x080198f8

0800c760 <__lshift>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	460c      	mov	r4, r1
 800c766:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	6849      	ldr	r1, [r1, #4]
 800c76e:	eb0a 0903 	add.w	r9, sl, r3
 800c772:	68a3      	ldr	r3, [r4, #8]
 800c774:	4607      	mov	r7, r0
 800c776:	4616      	mov	r6, r2
 800c778:	f109 0501 	add.w	r5, r9, #1
 800c77c:	42ab      	cmp	r3, r5
 800c77e:	db32      	blt.n	800c7e6 <__lshift+0x86>
 800c780:	4638      	mov	r0, r7
 800c782:	f7ff fdee 	bl	800c362 <_Balloc>
 800c786:	2300      	movs	r3, #0
 800c788:	4680      	mov	r8, r0
 800c78a:	f100 0114 	add.w	r1, r0, #20
 800c78e:	461a      	mov	r2, r3
 800c790:	4553      	cmp	r3, sl
 800c792:	db2b      	blt.n	800c7ec <__lshift+0x8c>
 800c794:	6920      	ldr	r0, [r4, #16]
 800c796:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c79a:	f104 0314 	add.w	r3, r4, #20
 800c79e:	f016 021f 	ands.w	r2, r6, #31
 800c7a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7aa:	d025      	beq.n	800c7f8 <__lshift+0x98>
 800c7ac:	f1c2 0e20 	rsb	lr, r2, #32
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	681e      	ldr	r6, [r3, #0]
 800c7b4:	468a      	mov	sl, r1
 800c7b6:	4096      	lsls	r6, r2
 800c7b8:	4330      	orrs	r0, r6
 800c7ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c7be:	f853 0b04 	ldr.w	r0, [r3], #4
 800c7c2:	459c      	cmp	ip, r3
 800c7c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800c7c8:	d814      	bhi.n	800c7f4 <__lshift+0x94>
 800c7ca:	6048      	str	r0, [r1, #4]
 800c7cc:	b108      	cbz	r0, 800c7d2 <__lshift+0x72>
 800c7ce:	f109 0502 	add.w	r5, r9, #2
 800c7d2:	3d01      	subs	r5, #1
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800c7da:	4621      	mov	r1, r4
 800c7dc:	f7ff fdf5 	bl	800c3ca <_Bfree>
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e6:	3101      	adds	r1, #1
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	e7c7      	b.n	800c77c <__lshift+0x1c>
 800c7ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	e7cd      	b.n	800c790 <__lshift+0x30>
 800c7f4:	4651      	mov	r1, sl
 800c7f6:	e7dc      	b.n	800c7b2 <__lshift+0x52>
 800c7f8:	3904      	subs	r1, #4
 800c7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800c802:	459c      	cmp	ip, r3
 800c804:	d8f9      	bhi.n	800c7fa <__lshift+0x9a>
 800c806:	e7e4      	b.n	800c7d2 <__lshift+0x72>

0800c808 <__mcmp>:
 800c808:	6903      	ldr	r3, [r0, #16]
 800c80a:	690a      	ldr	r2, [r1, #16]
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	b530      	push	{r4, r5, lr}
 800c810:	d10c      	bne.n	800c82c <__mcmp+0x24>
 800c812:	0092      	lsls	r2, r2, #2
 800c814:	3014      	adds	r0, #20
 800c816:	3114      	adds	r1, #20
 800c818:	1884      	adds	r4, r0, r2
 800c81a:	4411      	add	r1, r2
 800c81c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c820:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c824:	4295      	cmp	r5, r2
 800c826:	d003      	beq.n	800c830 <__mcmp+0x28>
 800c828:	d305      	bcc.n	800c836 <__mcmp+0x2e>
 800c82a:	2301      	movs	r3, #1
 800c82c:	4618      	mov	r0, r3
 800c82e:	bd30      	pop	{r4, r5, pc}
 800c830:	42a0      	cmp	r0, r4
 800c832:	d3f3      	bcc.n	800c81c <__mcmp+0x14>
 800c834:	e7fa      	b.n	800c82c <__mcmp+0x24>
 800c836:	f04f 33ff 	mov.w	r3, #4294967295
 800c83a:	e7f7      	b.n	800c82c <__mcmp+0x24>

0800c83c <__mdiff>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	460d      	mov	r5, r1
 800c842:	4607      	mov	r7, r0
 800c844:	4611      	mov	r1, r2
 800c846:	4628      	mov	r0, r5
 800c848:	4614      	mov	r4, r2
 800c84a:	f7ff ffdd 	bl	800c808 <__mcmp>
 800c84e:	1e06      	subs	r6, r0, #0
 800c850:	d108      	bne.n	800c864 <__mdiff+0x28>
 800c852:	4631      	mov	r1, r6
 800c854:	4638      	mov	r0, r7
 800c856:	f7ff fd84 	bl	800c362 <_Balloc>
 800c85a:	2301      	movs	r3, #1
 800c85c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c864:	bfa4      	itt	ge
 800c866:	4623      	movge	r3, r4
 800c868:	462c      	movge	r4, r5
 800c86a:	4638      	mov	r0, r7
 800c86c:	6861      	ldr	r1, [r4, #4]
 800c86e:	bfa6      	itte	ge
 800c870:	461d      	movge	r5, r3
 800c872:	2600      	movge	r6, #0
 800c874:	2601      	movlt	r6, #1
 800c876:	f7ff fd74 	bl	800c362 <_Balloc>
 800c87a:	692b      	ldr	r3, [r5, #16]
 800c87c:	60c6      	str	r6, [r0, #12]
 800c87e:	6926      	ldr	r6, [r4, #16]
 800c880:	f105 0914 	add.w	r9, r5, #20
 800c884:	f104 0214 	add.w	r2, r4, #20
 800c888:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c88c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c890:	f100 0514 	add.w	r5, r0, #20
 800c894:	f04f 0e00 	mov.w	lr, #0
 800c898:	f852 ab04 	ldr.w	sl, [r2], #4
 800c89c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8a0:	fa1e f18a 	uxtah	r1, lr, sl
 800c8a4:	b2a3      	uxth	r3, r4
 800c8a6:	1ac9      	subs	r1, r1, r3
 800c8a8:	0c23      	lsrs	r3, r4, #16
 800c8aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c8ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c8b2:	b289      	uxth	r1, r1
 800c8b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c8b8:	45c8      	cmp	r8, r9
 800c8ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c8be:	4694      	mov	ip, r2
 800c8c0:	f845 3b04 	str.w	r3, [r5], #4
 800c8c4:	d8e8      	bhi.n	800c898 <__mdiff+0x5c>
 800c8c6:	45bc      	cmp	ip, r7
 800c8c8:	d304      	bcc.n	800c8d4 <__mdiff+0x98>
 800c8ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c8ce:	b183      	cbz	r3, 800c8f2 <__mdiff+0xb6>
 800c8d0:	6106      	str	r6, [r0, #16]
 800c8d2:	e7c5      	b.n	800c860 <__mdiff+0x24>
 800c8d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c8d8:	fa1e f381 	uxtah	r3, lr, r1
 800c8dc:	141a      	asrs	r2, r3, #16
 800c8de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c8ec:	f845 3b04 	str.w	r3, [r5], #4
 800c8f0:	e7e9      	b.n	800c8c6 <__mdiff+0x8a>
 800c8f2:	3e01      	subs	r6, #1
 800c8f4:	e7e9      	b.n	800c8ca <__mdiff+0x8e>
	...

0800c8f8 <__ulp>:
 800c8f8:	4b12      	ldr	r3, [pc, #72]	; (800c944 <__ulp+0x4c>)
 800c8fa:	ee10 2a90 	vmov	r2, s1
 800c8fe:	401a      	ands	r2, r3
 800c900:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c904:	2b00      	cmp	r3, #0
 800c906:	dd04      	ble.n	800c912 <__ulp+0x1a>
 800c908:	2000      	movs	r0, #0
 800c90a:	4619      	mov	r1, r3
 800c90c:	ec41 0b10 	vmov	d0, r0, r1
 800c910:	4770      	bx	lr
 800c912:	425b      	negs	r3, r3
 800c914:	151b      	asrs	r3, r3, #20
 800c916:	2b13      	cmp	r3, #19
 800c918:	f04f 0000 	mov.w	r0, #0
 800c91c:	f04f 0100 	mov.w	r1, #0
 800c920:	dc04      	bgt.n	800c92c <__ulp+0x34>
 800c922:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c926:	fa42 f103 	asr.w	r1, r2, r3
 800c92a:	e7ef      	b.n	800c90c <__ulp+0x14>
 800c92c:	3b14      	subs	r3, #20
 800c92e:	2b1e      	cmp	r3, #30
 800c930:	f04f 0201 	mov.w	r2, #1
 800c934:	bfda      	itte	le
 800c936:	f1c3 031f 	rsble	r3, r3, #31
 800c93a:	fa02 f303 	lslle.w	r3, r2, r3
 800c93e:	4613      	movgt	r3, r2
 800c940:	4618      	mov	r0, r3
 800c942:	e7e3      	b.n	800c90c <__ulp+0x14>
 800c944:	7ff00000 	.word	0x7ff00000

0800c948 <__b2d>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	6905      	ldr	r5, [r0, #16]
 800c94c:	f100 0714 	add.w	r7, r0, #20
 800c950:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c954:	1f2e      	subs	r6, r5, #4
 800c956:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7ff fdc5 	bl	800c4ea <__hi0bits>
 800c960:	f1c0 0320 	rsb	r3, r0, #32
 800c964:	280a      	cmp	r0, #10
 800c966:	600b      	str	r3, [r1, #0]
 800c968:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c9e0 <__b2d+0x98>
 800c96c:	dc14      	bgt.n	800c998 <__b2d+0x50>
 800c96e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c972:	fa24 f10e 	lsr.w	r1, r4, lr
 800c976:	42b7      	cmp	r7, r6
 800c978:	ea41 030c 	orr.w	r3, r1, ip
 800c97c:	bf34      	ite	cc
 800c97e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c982:	2100      	movcs	r1, #0
 800c984:	3015      	adds	r0, #21
 800c986:	fa04 f000 	lsl.w	r0, r4, r0
 800c98a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c98e:	ea40 0201 	orr.w	r2, r0, r1
 800c992:	ec43 2b10 	vmov	d0, r2, r3
 800c996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c998:	42b7      	cmp	r7, r6
 800c99a:	bf3a      	itte	cc
 800c99c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c9a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c9a4:	2100      	movcs	r1, #0
 800c9a6:	380b      	subs	r0, #11
 800c9a8:	d015      	beq.n	800c9d6 <__b2d+0x8e>
 800c9aa:	4084      	lsls	r4, r0
 800c9ac:	f1c0 0520 	rsb	r5, r0, #32
 800c9b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c9b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c9b8:	42be      	cmp	r6, r7
 800c9ba:	fa21 fc05 	lsr.w	ip, r1, r5
 800c9be:	ea44 030c 	orr.w	r3, r4, ip
 800c9c2:	bf8c      	ite	hi
 800c9c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c9c8:	2400      	movls	r4, #0
 800c9ca:	fa01 f000 	lsl.w	r0, r1, r0
 800c9ce:	40ec      	lsrs	r4, r5
 800c9d0:	ea40 0204 	orr.w	r2, r0, r4
 800c9d4:	e7dd      	b.n	800c992 <__b2d+0x4a>
 800c9d6:	ea44 030c 	orr.w	r3, r4, ip
 800c9da:	460a      	mov	r2, r1
 800c9dc:	e7d9      	b.n	800c992 <__b2d+0x4a>
 800c9de:	bf00      	nop
 800c9e0:	3ff00000 	.word	0x3ff00000

0800c9e4 <__d2b>:
 800c9e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9e8:	460e      	mov	r6, r1
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	ec59 8b10 	vmov	r8, r9, d0
 800c9f0:	4615      	mov	r5, r2
 800c9f2:	f7ff fcb6 	bl	800c362 <_Balloc>
 800c9f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c9fa:	4607      	mov	r7, r0
 800c9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca00:	bb34      	cbnz	r4, 800ca50 <__d2b+0x6c>
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	f1b8 0300 	subs.w	r3, r8, #0
 800ca08:	d027      	beq.n	800ca5a <__d2b+0x76>
 800ca0a:	a802      	add	r0, sp, #8
 800ca0c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ca10:	f7ff fd8a 	bl	800c528 <__lo0bits>
 800ca14:	9900      	ldr	r1, [sp, #0]
 800ca16:	b1f0      	cbz	r0, 800ca56 <__d2b+0x72>
 800ca18:	9a01      	ldr	r2, [sp, #4]
 800ca1a:	f1c0 0320 	rsb	r3, r0, #32
 800ca1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca22:	430b      	orrs	r3, r1
 800ca24:	40c2      	lsrs	r2, r0
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	9201      	str	r2, [sp, #4]
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	61bb      	str	r3, [r7, #24]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bf14      	ite	ne
 800ca32:	2102      	movne	r1, #2
 800ca34:	2101      	moveq	r1, #1
 800ca36:	6139      	str	r1, [r7, #16]
 800ca38:	b1c4      	cbz	r4, 800ca6c <__d2b+0x88>
 800ca3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ca3e:	4404      	add	r4, r0
 800ca40:	6034      	str	r4, [r6, #0]
 800ca42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca46:	6028      	str	r0, [r5, #0]
 800ca48:	4638      	mov	r0, r7
 800ca4a:	b003      	add	sp, #12
 800ca4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca54:	e7d5      	b.n	800ca02 <__d2b+0x1e>
 800ca56:	6179      	str	r1, [r7, #20]
 800ca58:	e7e7      	b.n	800ca2a <__d2b+0x46>
 800ca5a:	a801      	add	r0, sp, #4
 800ca5c:	f7ff fd64 	bl	800c528 <__lo0bits>
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	2101      	movs	r1, #1
 800ca66:	6139      	str	r1, [r7, #16]
 800ca68:	3020      	adds	r0, #32
 800ca6a:	e7e5      	b.n	800ca38 <__d2b+0x54>
 800ca6c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ca70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca74:	6030      	str	r0, [r6, #0]
 800ca76:	6918      	ldr	r0, [r3, #16]
 800ca78:	f7ff fd37 	bl	800c4ea <__hi0bits>
 800ca7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ca80:	e7e1      	b.n	800ca46 <__d2b+0x62>

0800ca82 <__ratio>:
 800ca82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca86:	4688      	mov	r8, r1
 800ca88:	4669      	mov	r1, sp
 800ca8a:	4681      	mov	r9, r0
 800ca8c:	f7ff ff5c 	bl	800c948 <__b2d>
 800ca90:	a901      	add	r1, sp, #4
 800ca92:	4640      	mov	r0, r8
 800ca94:	ec57 6b10 	vmov	r6, r7, d0
 800ca98:	f7ff ff56 	bl	800c948 <__b2d>
 800ca9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800caa0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800caa4:	eba3 0c02 	sub.w	ip, r3, r2
 800caa8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800caac:	1a9b      	subs	r3, r3, r2
 800caae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cab2:	ec5b ab10 	vmov	sl, fp, d0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	bfce      	itee	gt
 800caba:	463a      	movgt	r2, r7
 800cabc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cac0:	465a      	movle	r2, fp
 800cac2:	4659      	mov	r1, fp
 800cac4:	463d      	mov	r5, r7
 800cac6:	bfd4      	ite	le
 800cac8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800cacc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800cad0:	4630      	mov	r0, r6
 800cad2:	ee10 2a10 	vmov	r2, s0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 fecf 	bl	800087c <__aeabi_ddiv>
 800cade:	ec41 0b10 	vmov	d0, r0, r1
 800cae2:	b003      	add	sp, #12
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cae8 <__copybits>:
 800cae8:	3901      	subs	r1, #1
 800caea:	b510      	push	{r4, lr}
 800caec:	1149      	asrs	r1, r1, #5
 800caee:	6914      	ldr	r4, [r2, #16]
 800caf0:	3101      	adds	r1, #1
 800caf2:	f102 0314 	add.w	r3, r2, #20
 800caf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cafa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cafe:	42a3      	cmp	r3, r4
 800cb00:	4602      	mov	r2, r0
 800cb02:	d303      	bcc.n	800cb0c <__copybits+0x24>
 800cb04:	2300      	movs	r3, #0
 800cb06:	428a      	cmp	r2, r1
 800cb08:	d305      	bcc.n	800cb16 <__copybits+0x2e>
 800cb0a:	bd10      	pop	{r4, pc}
 800cb0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb10:	f840 2b04 	str.w	r2, [r0], #4
 800cb14:	e7f3      	b.n	800cafe <__copybits+0x16>
 800cb16:	f842 3b04 	str.w	r3, [r2], #4
 800cb1a:	e7f4      	b.n	800cb06 <__copybits+0x1e>

0800cb1c <__any_on>:
 800cb1c:	f100 0214 	add.w	r2, r0, #20
 800cb20:	6900      	ldr	r0, [r0, #16]
 800cb22:	114b      	asrs	r3, r1, #5
 800cb24:	4298      	cmp	r0, r3
 800cb26:	b510      	push	{r4, lr}
 800cb28:	db11      	blt.n	800cb4e <__any_on+0x32>
 800cb2a:	dd0a      	ble.n	800cb42 <__any_on+0x26>
 800cb2c:	f011 011f 	ands.w	r1, r1, #31
 800cb30:	d007      	beq.n	800cb42 <__any_on+0x26>
 800cb32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb36:	fa24 f001 	lsr.w	r0, r4, r1
 800cb3a:	fa00 f101 	lsl.w	r1, r0, r1
 800cb3e:	428c      	cmp	r4, r1
 800cb40:	d10b      	bne.n	800cb5a <__any_on+0x3e>
 800cb42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d803      	bhi.n	800cb52 <__any_on+0x36>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	bd10      	pop	{r4, pc}
 800cb4e:	4603      	mov	r3, r0
 800cb50:	e7f7      	b.n	800cb42 <__any_on+0x26>
 800cb52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb56:	2900      	cmp	r1, #0
 800cb58:	d0f5      	beq.n	800cb46 <__any_on+0x2a>
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	e7f6      	b.n	800cb4c <__any_on+0x30>

0800cb5e <_calloc_r>:
 800cb5e:	b538      	push	{r3, r4, r5, lr}
 800cb60:	fb02 f401 	mul.w	r4, r2, r1
 800cb64:	4621      	mov	r1, r4
 800cb66:	f000 f809 	bl	800cb7c <_malloc_r>
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	b118      	cbz	r0, 800cb76 <_calloc_r+0x18>
 800cb6e:	4622      	mov	r2, r4
 800cb70:	2100      	movs	r1, #0
 800cb72:	f7fe f94a 	bl	800ae0a <memset>
 800cb76:	4628      	mov	r0, r5
 800cb78:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cb7c <_malloc_r>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	1ccd      	adds	r5, r1, #3
 800cb80:	f025 0503 	bic.w	r5, r5, #3
 800cb84:	3508      	adds	r5, #8
 800cb86:	2d0c      	cmp	r5, #12
 800cb88:	bf38      	it	cc
 800cb8a:	250c      	movcc	r5, #12
 800cb8c:	2d00      	cmp	r5, #0
 800cb8e:	4606      	mov	r6, r0
 800cb90:	db01      	blt.n	800cb96 <_malloc_r+0x1a>
 800cb92:	42a9      	cmp	r1, r5
 800cb94:	d903      	bls.n	800cb9e <_malloc_r+0x22>
 800cb96:	230c      	movs	r3, #12
 800cb98:	6033      	str	r3, [r6, #0]
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	bd70      	pop	{r4, r5, r6, pc}
 800cb9e:	f000 fb78 	bl	800d292 <__malloc_lock>
 800cba2:	4a21      	ldr	r2, [pc, #132]	; (800cc28 <_malloc_r+0xac>)
 800cba4:	6814      	ldr	r4, [r2, #0]
 800cba6:	4621      	mov	r1, r4
 800cba8:	b991      	cbnz	r1, 800cbd0 <_malloc_r+0x54>
 800cbaa:	4c20      	ldr	r4, [pc, #128]	; (800cc2c <_malloc_r+0xb0>)
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	b91b      	cbnz	r3, 800cbb8 <_malloc_r+0x3c>
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	f000 fb17 	bl	800d1e4 <_sbrk_r>
 800cbb6:	6020      	str	r0, [r4, #0]
 800cbb8:	4629      	mov	r1, r5
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f000 fb12 	bl	800d1e4 <_sbrk_r>
 800cbc0:	1c43      	adds	r3, r0, #1
 800cbc2:	d124      	bne.n	800cc0e <_malloc_r+0x92>
 800cbc4:	230c      	movs	r3, #12
 800cbc6:	6033      	str	r3, [r6, #0]
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 fb63 	bl	800d294 <__malloc_unlock>
 800cbce:	e7e4      	b.n	800cb9a <_malloc_r+0x1e>
 800cbd0:	680b      	ldr	r3, [r1, #0]
 800cbd2:	1b5b      	subs	r3, r3, r5
 800cbd4:	d418      	bmi.n	800cc08 <_malloc_r+0x8c>
 800cbd6:	2b0b      	cmp	r3, #11
 800cbd8:	d90f      	bls.n	800cbfa <_malloc_r+0x7e>
 800cbda:	600b      	str	r3, [r1, #0]
 800cbdc:	50cd      	str	r5, [r1, r3]
 800cbde:	18cc      	adds	r4, r1, r3
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f000 fb57 	bl	800d294 <__malloc_unlock>
 800cbe6:	f104 000b 	add.w	r0, r4, #11
 800cbea:	1d23      	adds	r3, r4, #4
 800cbec:	f020 0007 	bic.w	r0, r0, #7
 800cbf0:	1ac3      	subs	r3, r0, r3
 800cbf2:	d0d3      	beq.n	800cb9c <_malloc_r+0x20>
 800cbf4:	425a      	negs	r2, r3
 800cbf6:	50e2      	str	r2, [r4, r3]
 800cbf8:	e7d0      	b.n	800cb9c <_malloc_r+0x20>
 800cbfa:	428c      	cmp	r4, r1
 800cbfc:	684b      	ldr	r3, [r1, #4]
 800cbfe:	bf16      	itet	ne
 800cc00:	6063      	strne	r3, [r4, #4]
 800cc02:	6013      	streq	r3, [r2, #0]
 800cc04:	460c      	movne	r4, r1
 800cc06:	e7eb      	b.n	800cbe0 <_malloc_r+0x64>
 800cc08:	460c      	mov	r4, r1
 800cc0a:	6849      	ldr	r1, [r1, #4]
 800cc0c:	e7cc      	b.n	800cba8 <_malloc_r+0x2c>
 800cc0e:	1cc4      	adds	r4, r0, #3
 800cc10:	f024 0403 	bic.w	r4, r4, #3
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	d005      	beq.n	800cc24 <_malloc_r+0xa8>
 800cc18:	1a21      	subs	r1, r4, r0
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f000 fae2 	bl	800d1e4 <_sbrk_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d0cf      	beq.n	800cbc4 <_malloc_r+0x48>
 800cc24:	6025      	str	r5, [r4, #0]
 800cc26:	e7db      	b.n	800cbe0 <_malloc_r+0x64>
 800cc28:	2000a458 	.word	0x2000a458
 800cc2c:	2000a45c 	.word	0x2000a45c

0800cc30 <__ssputs_r>:
 800cc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc34:	688e      	ldr	r6, [r1, #8]
 800cc36:	429e      	cmp	r6, r3
 800cc38:	4682      	mov	sl, r0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	4690      	mov	r8, r2
 800cc3e:	4699      	mov	r9, r3
 800cc40:	d837      	bhi.n	800ccb2 <__ssputs_r+0x82>
 800cc42:	898a      	ldrh	r2, [r1, #12]
 800cc44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc48:	d031      	beq.n	800ccae <__ssputs_r+0x7e>
 800cc4a:	6825      	ldr	r5, [r4, #0]
 800cc4c:	6909      	ldr	r1, [r1, #16]
 800cc4e:	1a6f      	subs	r7, r5, r1
 800cc50:	6965      	ldr	r5, [r4, #20]
 800cc52:	2302      	movs	r3, #2
 800cc54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc58:	fb95 f5f3 	sdiv	r5, r5, r3
 800cc5c:	f109 0301 	add.w	r3, r9, #1
 800cc60:	443b      	add	r3, r7
 800cc62:	429d      	cmp	r5, r3
 800cc64:	bf38      	it	cc
 800cc66:	461d      	movcc	r5, r3
 800cc68:	0553      	lsls	r3, r2, #21
 800cc6a:	d530      	bpl.n	800ccce <__ssputs_r+0x9e>
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	f7ff ff85 	bl	800cb7c <_malloc_r>
 800cc72:	4606      	mov	r6, r0
 800cc74:	b950      	cbnz	r0, 800cc8c <__ssputs_r+0x5c>
 800cc76:	230c      	movs	r3, #12
 800cc78:	f8ca 3000 	str.w	r3, [sl]
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc82:	81a3      	strh	r3, [r4, #12]
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295
 800cc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc8c:	463a      	mov	r2, r7
 800cc8e:	6921      	ldr	r1, [r4, #16]
 800cc90:	f7fe f8b0 	bl	800adf4 <memcpy>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	6126      	str	r6, [r4, #16]
 800cca2:	6165      	str	r5, [r4, #20]
 800cca4:	443e      	add	r6, r7
 800cca6:	1bed      	subs	r5, r5, r7
 800cca8:	6026      	str	r6, [r4, #0]
 800ccaa:	60a5      	str	r5, [r4, #8]
 800ccac:	464e      	mov	r6, r9
 800ccae:	454e      	cmp	r6, r9
 800ccb0:	d900      	bls.n	800ccb4 <__ssputs_r+0x84>
 800ccb2:	464e      	mov	r6, r9
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	4641      	mov	r1, r8
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	f000 fad1 	bl	800d260 <memmove>
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	1b9b      	subs	r3, r3, r6
 800ccc2:	60a3      	str	r3, [r4, #8]
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	441e      	add	r6, r3
 800ccc8:	6026      	str	r6, [r4, #0]
 800ccca:	2000      	movs	r0, #0
 800cccc:	e7dc      	b.n	800cc88 <__ssputs_r+0x58>
 800ccce:	462a      	mov	r2, r5
 800ccd0:	f000 fb30 	bl	800d334 <_realloc_r>
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d1e2      	bne.n	800cca0 <__ssputs_r+0x70>
 800ccda:	6921      	ldr	r1, [r4, #16]
 800ccdc:	4650      	mov	r0, sl
 800ccde:	f000 fadb 	bl	800d298 <_free_r>
 800cce2:	e7c8      	b.n	800cc76 <__ssputs_r+0x46>

0800cce4 <_svfiprintf_r>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	461d      	mov	r5, r3
 800ccea:	898b      	ldrh	r3, [r1, #12]
 800ccec:	061f      	lsls	r7, r3, #24
 800ccee:	b09d      	sub	sp, #116	; 0x74
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	4616      	mov	r6, r2
 800ccf6:	d50f      	bpl.n	800cd18 <_svfiprintf_r+0x34>
 800ccf8:	690b      	ldr	r3, [r1, #16]
 800ccfa:	b96b      	cbnz	r3, 800cd18 <_svfiprintf_r+0x34>
 800ccfc:	2140      	movs	r1, #64	; 0x40
 800ccfe:	f7ff ff3d 	bl	800cb7c <_malloc_r>
 800cd02:	6020      	str	r0, [r4, #0]
 800cd04:	6120      	str	r0, [r4, #16]
 800cd06:	b928      	cbnz	r0, 800cd14 <_svfiprintf_r+0x30>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	f8c8 3000 	str.w	r3, [r8]
 800cd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd12:	e0c8      	b.n	800cea6 <_svfiprintf_r+0x1c2>
 800cd14:	2340      	movs	r3, #64	; 0x40
 800cd16:	6163      	str	r3, [r4, #20]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1c:	2320      	movs	r3, #32
 800cd1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd22:	2330      	movs	r3, #48	; 0x30
 800cd24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd28:	9503      	str	r5, [sp, #12]
 800cd2a:	f04f 0b01 	mov.w	fp, #1
 800cd2e:	4637      	mov	r7, r6
 800cd30:	463d      	mov	r5, r7
 800cd32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd36:	b10b      	cbz	r3, 800cd3c <_svfiprintf_r+0x58>
 800cd38:	2b25      	cmp	r3, #37	; 0x25
 800cd3a:	d13e      	bne.n	800cdba <_svfiprintf_r+0xd6>
 800cd3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cd40:	d00b      	beq.n	800cd5a <_svfiprintf_r+0x76>
 800cd42:	4653      	mov	r3, sl
 800cd44:	4632      	mov	r2, r6
 800cd46:	4621      	mov	r1, r4
 800cd48:	4640      	mov	r0, r8
 800cd4a:	f7ff ff71 	bl	800cc30 <__ssputs_r>
 800cd4e:	3001      	adds	r0, #1
 800cd50:	f000 80a4 	beq.w	800ce9c <_svfiprintf_r+0x1b8>
 800cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd56:	4453      	add	r3, sl
 800cd58:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5a:	783b      	ldrb	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 809d 	beq.w	800ce9c <_svfiprintf_r+0x1b8>
 800cd62:	2300      	movs	r3, #0
 800cd64:	f04f 32ff 	mov.w	r2, #4294967295
 800cd68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd6c:	9304      	str	r3, [sp, #16]
 800cd6e:	9307      	str	r3, [sp, #28]
 800cd70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd74:	931a      	str	r3, [sp, #104]	; 0x68
 800cd76:	462f      	mov	r7, r5
 800cd78:	2205      	movs	r2, #5
 800cd7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd7e:	4850      	ldr	r0, [pc, #320]	; (800cec0 <_svfiprintf_r+0x1dc>)
 800cd80:	f7f3 fa46 	bl	8000210 <memchr>
 800cd84:	9b04      	ldr	r3, [sp, #16]
 800cd86:	b9d0      	cbnz	r0, 800cdbe <_svfiprintf_r+0xda>
 800cd88:	06d9      	lsls	r1, r3, #27
 800cd8a:	bf44      	itt	mi
 800cd8c:	2220      	movmi	r2, #32
 800cd8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd92:	071a      	lsls	r2, r3, #28
 800cd94:	bf44      	itt	mi
 800cd96:	222b      	movmi	r2, #43	; 0x2b
 800cd98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd9c:	782a      	ldrb	r2, [r5, #0]
 800cd9e:	2a2a      	cmp	r2, #42	; 0x2a
 800cda0:	d015      	beq.n	800cdce <_svfiprintf_r+0xea>
 800cda2:	9a07      	ldr	r2, [sp, #28]
 800cda4:	462f      	mov	r7, r5
 800cda6:	2000      	movs	r0, #0
 800cda8:	250a      	movs	r5, #10
 800cdaa:	4639      	mov	r1, r7
 800cdac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdb0:	3b30      	subs	r3, #48	; 0x30
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	d94d      	bls.n	800ce52 <_svfiprintf_r+0x16e>
 800cdb6:	b1b8      	cbz	r0, 800cde8 <_svfiprintf_r+0x104>
 800cdb8:	e00f      	b.n	800cdda <_svfiprintf_r+0xf6>
 800cdba:	462f      	mov	r7, r5
 800cdbc:	e7b8      	b.n	800cd30 <_svfiprintf_r+0x4c>
 800cdbe:	4a40      	ldr	r2, [pc, #256]	; (800cec0 <_svfiprintf_r+0x1dc>)
 800cdc0:	1a80      	subs	r0, r0, r2
 800cdc2:	fa0b f000 	lsl.w	r0, fp, r0
 800cdc6:	4318      	orrs	r0, r3
 800cdc8:	9004      	str	r0, [sp, #16]
 800cdca:	463d      	mov	r5, r7
 800cdcc:	e7d3      	b.n	800cd76 <_svfiprintf_r+0x92>
 800cdce:	9a03      	ldr	r2, [sp, #12]
 800cdd0:	1d11      	adds	r1, r2, #4
 800cdd2:	6812      	ldr	r2, [r2, #0]
 800cdd4:	9103      	str	r1, [sp, #12]
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	db01      	blt.n	800cdde <_svfiprintf_r+0xfa>
 800cdda:	9207      	str	r2, [sp, #28]
 800cddc:	e004      	b.n	800cde8 <_svfiprintf_r+0x104>
 800cdde:	4252      	negs	r2, r2
 800cde0:	f043 0302 	orr.w	r3, r3, #2
 800cde4:	9207      	str	r2, [sp, #28]
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	783b      	ldrb	r3, [r7, #0]
 800cdea:	2b2e      	cmp	r3, #46	; 0x2e
 800cdec:	d10c      	bne.n	800ce08 <_svfiprintf_r+0x124>
 800cdee:	787b      	ldrb	r3, [r7, #1]
 800cdf0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdf2:	d133      	bne.n	800ce5c <_svfiprintf_r+0x178>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	1d1a      	adds	r2, r3, #4
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	9203      	str	r2, [sp, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfb8      	it	lt
 800ce00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce04:	3702      	adds	r7, #2
 800ce06:	9305      	str	r3, [sp, #20]
 800ce08:	4d2e      	ldr	r5, [pc, #184]	; (800cec4 <_svfiprintf_r+0x1e0>)
 800ce0a:	7839      	ldrb	r1, [r7, #0]
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f7f3 f9fe 	bl	8000210 <memchr>
 800ce14:	b138      	cbz	r0, 800ce26 <_svfiprintf_r+0x142>
 800ce16:	2340      	movs	r3, #64	; 0x40
 800ce18:	1b40      	subs	r0, r0, r5
 800ce1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ce1e:	9b04      	ldr	r3, [sp, #16]
 800ce20:	4303      	orrs	r3, r0
 800ce22:	3701      	adds	r7, #1
 800ce24:	9304      	str	r3, [sp, #16]
 800ce26:	7839      	ldrb	r1, [r7, #0]
 800ce28:	4827      	ldr	r0, [pc, #156]	; (800cec8 <_svfiprintf_r+0x1e4>)
 800ce2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce2e:	2206      	movs	r2, #6
 800ce30:	1c7e      	adds	r6, r7, #1
 800ce32:	f7f3 f9ed 	bl	8000210 <memchr>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d038      	beq.n	800ceac <_svfiprintf_r+0x1c8>
 800ce3a:	4b24      	ldr	r3, [pc, #144]	; (800cecc <_svfiprintf_r+0x1e8>)
 800ce3c:	bb13      	cbnz	r3, 800ce84 <_svfiprintf_r+0x1a0>
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	3307      	adds	r3, #7
 800ce42:	f023 0307 	bic.w	r3, r3, #7
 800ce46:	3308      	adds	r3, #8
 800ce48:	9303      	str	r3, [sp, #12]
 800ce4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4c:	444b      	add	r3, r9
 800ce4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce50:	e76d      	b.n	800cd2e <_svfiprintf_r+0x4a>
 800ce52:	fb05 3202 	mla	r2, r5, r2, r3
 800ce56:	2001      	movs	r0, #1
 800ce58:	460f      	mov	r7, r1
 800ce5a:	e7a6      	b.n	800cdaa <_svfiprintf_r+0xc6>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	3701      	adds	r7, #1
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	4619      	mov	r1, r3
 800ce64:	250a      	movs	r5, #10
 800ce66:	4638      	mov	r0, r7
 800ce68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce6c:	3a30      	subs	r2, #48	; 0x30
 800ce6e:	2a09      	cmp	r2, #9
 800ce70:	d903      	bls.n	800ce7a <_svfiprintf_r+0x196>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0c8      	beq.n	800ce08 <_svfiprintf_r+0x124>
 800ce76:	9105      	str	r1, [sp, #20]
 800ce78:	e7c6      	b.n	800ce08 <_svfiprintf_r+0x124>
 800ce7a:	fb05 2101 	mla	r1, r5, r1, r2
 800ce7e:	2301      	movs	r3, #1
 800ce80:	4607      	mov	r7, r0
 800ce82:	e7f0      	b.n	800ce66 <_svfiprintf_r+0x182>
 800ce84:	ab03      	add	r3, sp, #12
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4b11      	ldr	r3, [pc, #68]	; (800ced0 <_svfiprintf_r+0x1ec>)
 800ce8c:	a904      	add	r1, sp, #16
 800ce8e:	4640      	mov	r0, r8
 800ce90:	f3af 8000 	nop.w
 800ce94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce98:	4681      	mov	r9, r0
 800ce9a:	d1d6      	bne.n	800ce4a <_svfiprintf_r+0x166>
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	065b      	lsls	r3, r3, #25
 800cea0:	f53f af35 	bmi.w	800cd0e <_svfiprintf_r+0x2a>
 800cea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cea6:	b01d      	add	sp, #116	; 0x74
 800cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceac:	ab03      	add	r3, sp, #12
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <_svfiprintf_r+0x1ec>)
 800ceb4:	a904      	add	r1, sp, #16
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f000 f882 	bl	800cfc0 <_printf_i>
 800cebc:	e7ea      	b.n	800ce94 <_svfiprintf_r+0x1b0>
 800cebe:	bf00      	nop
 800cec0:	08019904 	.word	0x08019904
 800cec4:	0801990a 	.word	0x0801990a
 800cec8:	0801990e 	.word	0x0801990e
 800cecc:	00000000 	.word	0x00000000
 800ced0:	0800cc31 	.word	0x0800cc31

0800ced4 <_printf_common>:
 800ced4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced8:	4691      	mov	r9, r2
 800ceda:	461f      	mov	r7, r3
 800cedc:	688a      	ldr	r2, [r1, #8]
 800cede:	690b      	ldr	r3, [r1, #16]
 800cee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cee4:	4293      	cmp	r3, r2
 800cee6:	bfb8      	it	lt
 800cee8:	4613      	movlt	r3, r2
 800ceea:	f8c9 3000 	str.w	r3, [r9]
 800ceee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cef2:	4606      	mov	r6, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	b112      	cbz	r2, 800cefe <_printf_common+0x2a>
 800cef8:	3301      	adds	r3, #1
 800cefa:	f8c9 3000 	str.w	r3, [r9]
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	0699      	lsls	r1, r3, #26
 800cf02:	bf42      	ittt	mi
 800cf04:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cf08:	3302      	addmi	r3, #2
 800cf0a:	f8c9 3000 	strmi.w	r3, [r9]
 800cf0e:	6825      	ldr	r5, [r4, #0]
 800cf10:	f015 0506 	ands.w	r5, r5, #6
 800cf14:	d107      	bne.n	800cf26 <_printf_common+0x52>
 800cf16:	f104 0a19 	add.w	sl, r4, #25
 800cf1a:	68e3      	ldr	r3, [r4, #12]
 800cf1c:	f8d9 2000 	ldr.w	r2, [r9]
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	42ab      	cmp	r3, r5
 800cf24:	dc28      	bgt.n	800cf78 <_printf_common+0xa4>
 800cf26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf2a:	6822      	ldr	r2, [r4, #0]
 800cf2c:	3300      	adds	r3, #0
 800cf2e:	bf18      	it	ne
 800cf30:	2301      	movne	r3, #1
 800cf32:	0692      	lsls	r2, r2, #26
 800cf34:	d42d      	bmi.n	800cf92 <_printf_common+0xbe>
 800cf36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	47c0      	blx	r8
 800cf40:	3001      	adds	r0, #1
 800cf42:	d020      	beq.n	800cf86 <_printf_common+0xb2>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	68e5      	ldr	r5, [r4, #12]
 800cf48:	f8d9 2000 	ldr.w	r2, [r9]
 800cf4c:	f003 0306 	and.w	r3, r3, #6
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	bf08      	it	eq
 800cf54:	1aad      	subeq	r5, r5, r2
 800cf56:	68a3      	ldr	r3, [r4, #8]
 800cf58:	6922      	ldr	r2, [r4, #16]
 800cf5a:	bf0c      	ite	eq
 800cf5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf60:	2500      	movne	r5, #0
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfc4      	itt	gt
 800cf66:	1a9b      	subgt	r3, r3, r2
 800cf68:	18ed      	addgt	r5, r5, r3
 800cf6a:	f04f 0900 	mov.w	r9, #0
 800cf6e:	341a      	adds	r4, #26
 800cf70:	454d      	cmp	r5, r9
 800cf72:	d11a      	bne.n	800cfaa <_printf_common+0xd6>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e008      	b.n	800cf8a <_printf_common+0xb6>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	4652      	mov	r2, sl
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	4630      	mov	r0, r6
 800cf80:	47c0      	blx	r8
 800cf82:	3001      	adds	r0, #1
 800cf84:	d103      	bne.n	800cf8e <_printf_common+0xba>
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8e:	3501      	adds	r5, #1
 800cf90:	e7c3      	b.n	800cf1a <_printf_common+0x46>
 800cf92:	18e1      	adds	r1, r4, r3
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	2030      	movs	r0, #48	; 0x30
 800cf98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf9c:	4422      	add	r2, r4
 800cf9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfa6:	3302      	adds	r3, #2
 800cfa8:	e7c5      	b.n	800cf36 <_printf_common+0x62>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4622      	mov	r2, r4
 800cfae:	4639      	mov	r1, r7
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	47c0      	blx	r8
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d0e6      	beq.n	800cf86 <_printf_common+0xb2>
 800cfb8:	f109 0901 	add.w	r9, r9, #1
 800cfbc:	e7d8      	b.n	800cf70 <_printf_common+0x9c>
	...

0800cfc0 <_printf_i>:
 800cfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cfc8:	460c      	mov	r4, r1
 800cfca:	7e09      	ldrb	r1, [r1, #24]
 800cfcc:	b085      	sub	sp, #20
 800cfce:	296e      	cmp	r1, #110	; 0x6e
 800cfd0:	4617      	mov	r7, r2
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	4698      	mov	r8, r3
 800cfd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfd8:	f000 80b3 	beq.w	800d142 <_printf_i+0x182>
 800cfdc:	d822      	bhi.n	800d024 <_printf_i+0x64>
 800cfde:	2963      	cmp	r1, #99	; 0x63
 800cfe0:	d036      	beq.n	800d050 <_printf_i+0x90>
 800cfe2:	d80a      	bhi.n	800cffa <_printf_i+0x3a>
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	f000 80b9 	beq.w	800d15c <_printf_i+0x19c>
 800cfea:	2958      	cmp	r1, #88	; 0x58
 800cfec:	f000 8083 	beq.w	800d0f6 <_printf_i+0x136>
 800cff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cff8:	e032      	b.n	800d060 <_printf_i+0xa0>
 800cffa:	2964      	cmp	r1, #100	; 0x64
 800cffc:	d001      	beq.n	800d002 <_printf_i+0x42>
 800cffe:	2969      	cmp	r1, #105	; 0x69
 800d000:	d1f6      	bne.n	800cff0 <_printf_i+0x30>
 800d002:	6820      	ldr	r0, [r4, #0]
 800d004:	6813      	ldr	r3, [r2, #0]
 800d006:	0605      	lsls	r5, r0, #24
 800d008:	f103 0104 	add.w	r1, r3, #4
 800d00c:	d52a      	bpl.n	800d064 <_printf_i+0xa4>
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6011      	str	r1, [r2, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	da03      	bge.n	800d01e <_printf_i+0x5e>
 800d016:	222d      	movs	r2, #45	; 0x2d
 800d018:	425b      	negs	r3, r3
 800d01a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d01e:	486f      	ldr	r0, [pc, #444]	; (800d1dc <_printf_i+0x21c>)
 800d020:	220a      	movs	r2, #10
 800d022:	e039      	b.n	800d098 <_printf_i+0xd8>
 800d024:	2973      	cmp	r1, #115	; 0x73
 800d026:	f000 809d 	beq.w	800d164 <_printf_i+0x1a4>
 800d02a:	d808      	bhi.n	800d03e <_printf_i+0x7e>
 800d02c:	296f      	cmp	r1, #111	; 0x6f
 800d02e:	d020      	beq.n	800d072 <_printf_i+0xb2>
 800d030:	2970      	cmp	r1, #112	; 0x70
 800d032:	d1dd      	bne.n	800cff0 <_printf_i+0x30>
 800d034:	6823      	ldr	r3, [r4, #0]
 800d036:	f043 0320 	orr.w	r3, r3, #32
 800d03a:	6023      	str	r3, [r4, #0]
 800d03c:	e003      	b.n	800d046 <_printf_i+0x86>
 800d03e:	2975      	cmp	r1, #117	; 0x75
 800d040:	d017      	beq.n	800d072 <_printf_i+0xb2>
 800d042:	2978      	cmp	r1, #120	; 0x78
 800d044:	d1d4      	bne.n	800cff0 <_printf_i+0x30>
 800d046:	2378      	movs	r3, #120	; 0x78
 800d048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d04c:	4864      	ldr	r0, [pc, #400]	; (800d1e0 <_printf_i+0x220>)
 800d04e:	e055      	b.n	800d0fc <_printf_i+0x13c>
 800d050:	6813      	ldr	r3, [r2, #0]
 800d052:	1d19      	adds	r1, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6011      	str	r1, [r2, #0]
 800d058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d060:	2301      	movs	r3, #1
 800d062:	e08c      	b.n	800d17e <_printf_i+0x1be>
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6011      	str	r1, [r2, #0]
 800d068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d06c:	bf18      	it	ne
 800d06e:	b21b      	sxthne	r3, r3
 800d070:	e7cf      	b.n	800d012 <_printf_i+0x52>
 800d072:	6813      	ldr	r3, [r2, #0]
 800d074:	6825      	ldr	r5, [r4, #0]
 800d076:	1d18      	adds	r0, r3, #4
 800d078:	6010      	str	r0, [r2, #0]
 800d07a:	0628      	lsls	r0, r5, #24
 800d07c:	d501      	bpl.n	800d082 <_printf_i+0xc2>
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	e002      	b.n	800d088 <_printf_i+0xc8>
 800d082:	0668      	lsls	r0, r5, #25
 800d084:	d5fb      	bpl.n	800d07e <_printf_i+0xbe>
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	4854      	ldr	r0, [pc, #336]	; (800d1dc <_printf_i+0x21c>)
 800d08a:	296f      	cmp	r1, #111	; 0x6f
 800d08c:	bf14      	ite	ne
 800d08e:	220a      	movne	r2, #10
 800d090:	2208      	moveq	r2, #8
 800d092:	2100      	movs	r1, #0
 800d094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d098:	6865      	ldr	r5, [r4, #4]
 800d09a:	60a5      	str	r5, [r4, #8]
 800d09c:	2d00      	cmp	r5, #0
 800d09e:	f2c0 8095 	blt.w	800d1cc <_printf_i+0x20c>
 800d0a2:	6821      	ldr	r1, [r4, #0]
 800d0a4:	f021 0104 	bic.w	r1, r1, #4
 800d0a8:	6021      	str	r1, [r4, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d13d      	bne.n	800d12a <_printf_i+0x16a>
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	f040 808e 	bne.w	800d1d0 <_printf_i+0x210>
 800d0b4:	4665      	mov	r5, ip
 800d0b6:	2a08      	cmp	r2, #8
 800d0b8:	d10b      	bne.n	800d0d2 <_printf_i+0x112>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	07db      	lsls	r3, r3, #31
 800d0be:	d508      	bpl.n	800d0d2 <_printf_i+0x112>
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	6862      	ldr	r2, [r4, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	bfde      	ittt	le
 800d0c8:	2330      	movle	r3, #48	; 0x30
 800d0ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0d2:	ebac 0305 	sub.w	r3, ip, r5
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	f8cd 8000 	str.w	r8, [sp]
 800d0dc:	463b      	mov	r3, r7
 800d0de:	aa03      	add	r2, sp, #12
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f7ff fef6 	bl	800ced4 <_printf_common>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d14d      	bne.n	800d188 <_printf_i+0x1c8>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	b005      	add	sp, #20
 800d0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0f6:	4839      	ldr	r0, [pc, #228]	; (800d1dc <_printf_i+0x21c>)
 800d0f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d0fc:	6813      	ldr	r3, [r2, #0]
 800d0fe:	6821      	ldr	r1, [r4, #0]
 800d100:	1d1d      	adds	r5, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6015      	str	r5, [r2, #0]
 800d106:	060a      	lsls	r2, r1, #24
 800d108:	d50b      	bpl.n	800d122 <_printf_i+0x162>
 800d10a:	07ca      	lsls	r2, r1, #31
 800d10c:	bf44      	itt	mi
 800d10e:	f041 0120 	orrmi.w	r1, r1, #32
 800d112:	6021      	strmi	r1, [r4, #0]
 800d114:	b91b      	cbnz	r3, 800d11e <_printf_i+0x15e>
 800d116:	6822      	ldr	r2, [r4, #0]
 800d118:	f022 0220 	bic.w	r2, r2, #32
 800d11c:	6022      	str	r2, [r4, #0]
 800d11e:	2210      	movs	r2, #16
 800d120:	e7b7      	b.n	800d092 <_printf_i+0xd2>
 800d122:	064d      	lsls	r5, r1, #25
 800d124:	bf48      	it	mi
 800d126:	b29b      	uxthmi	r3, r3
 800d128:	e7ef      	b.n	800d10a <_printf_i+0x14a>
 800d12a:	4665      	mov	r5, ip
 800d12c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d130:	fb02 3311 	mls	r3, r2, r1, r3
 800d134:	5cc3      	ldrb	r3, [r0, r3]
 800d136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d13a:	460b      	mov	r3, r1
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d1f5      	bne.n	800d12c <_printf_i+0x16c>
 800d140:	e7b9      	b.n	800d0b6 <_printf_i+0xf6>
 800d142:	6813      	ldr	r3, [r2, #0]
 800d144:	6825      	ldr	r5, [r4, #0]
 800d146:	6961      	ldr	r1, [r4, #20]
 800d148:	1d18      	adds	r0, r3, #4
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	0628      	lsls	r0, r5, #24
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	d501      	bpl.n	800d156 <_printf_i+0x196>
 800d152:	6019      	str	r1, [r3, #0]
 800d154:	e002      	b.n	800d15c <_printf_i+0x19c>
 800d156:	066a      	lsls	r2, r5, #25
 800d158:	d5fb      	bpl.n	800d152 <_printf_i+0x192>
 800d15a:	8019      	strh	r1, [r3, #0]
 800d15c:	2300      	movs	r3, #0
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	4665      	mov	r5, ip
 800d162:	e7b9      	b.n	800d0d8 <_printf_i+0x118>
 800d164:	6813      	ldr	r3, [r2, #0]
 800d166:	1d19      	adds	r1, r3, #4
 800d168:	6011      	str	r1, [r2, #0]
 800d16a:	681d      	ldr	r5, [r3, #0]
 800d16c:	6862      	ldr	r2, [r4, #4]
 800d16e:	2100      	movs	r1, #0
 800d170:	4628      	mov	r0, r5
 800d172:	f7f3 f84d 	bl	8000210 <memchr>
 800d176:	b108      	cbz	r0, 800d17c <_printf_i+0x1bc>
 800d178:	1b40      	subs	r0, r0, r5
 800d17a:	6060      	str	r0, [r4, #4]
 800d17c:	6863      	ldr	r3, [r4, #4]
 800d17e:	6123      	str	r3, [r4, #16]
 800d180:	2300      	movs	r3, #0
 800d182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d186:	e7a7      	b.n	800d0d8 <_printf_i+0x118>
 800d188:	6923      	ldr	r3, [r4, #16]
 800d18a:	462a      	mov	r2, r5
 800d18c:	4639      	mov	r1, r7
 800d18e:	4630      	mov	r0, r6
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d0aa      	beq.n	800d0ec <_printf_i+0x12c>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	079b      	lsls	r3, r3, #30
 800d19a:	d413      	bmi.n	800d1c4 <_printf_i+0x204>
 800d19c:	68e0      	ldr	r0, [r4, #12]
 800d19e:	9b03      	ldr	r3, [sp, #12]
 800d1a0:	4298      	cmp	r0, r3
 800d1a2:	bfb8      	it	lt
 800d1a4:	4618      	movlt	r0, r3
 800d1a6:	e7a3      	b.n	800d0f0 <_printf_i+0x130>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	464a      	mov	r2, r9
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	47c0      	blx	r8
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d09a      	beq.n	800d0ec <_printf_i+0x12c>
 800d1b6:	3501      	adds	r5, #1
 800d1b8:	68e3      	ldr	r3, [r4, #12]
 800d1ba:	9a03      	ldr	r2, [sp, #12]
 800d1bc:	1a9b      	subs	r3, r3, r2
 800d1be:	42ab      	cmp	r3, r5
 800d1c0:	dcf2      	bgt.n	800d1a8 <_printf_i+0x1e8>
 800d1c2:	e7eb      	b.n	800d19c <_printf_i+0x1dc>
 800d1c4:	2500      	movs	r5, #0
 800d1c6:	f104 0919 	add.w	r9, r4, #25
 800d1ca:	e7f5      	b.n	800d1b8 <_printf_i+0x1f8>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1ac      	bne.n	800d12a <_printf_i+0x16a>
 800d1d0:	7803      	ldrb	r3, [r0, #0]
 800d1d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1da:	e76c      	b.n	800d0b6 <_printf_i+0xf6>
 800d1dc:	08019915 	.word	0x08019915
 800d1e0:	08019926 	.word	0x08019926

0800d1e4 <_sbrk_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4c06      	ldr	r4, [pc, #24]	; (800d200 <_sbrk_r+0x1c>)
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	4608      	mov	r0, r1
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	f7f4 f920 	bl	8001434 <_sbrk>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d102      	bne.n	800d1fe <_sbrk_r+0x1a>
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	b103      	cbz	r3, 800d1fe <_sbrk_r+0x1a>
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}
 800d200:	2000abac 	.word	0x2000abac

0800d204 <nanf>:
 800d204:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d20c <nanf+0x8>
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	7fc00000 	.word	0x7fc00000

0800d210 <strncmp>:
 800d210:	b510      	push	{r4, lr}
 800d212:	b16a      	cbz	r2, 800d230 <strncmp+0x20>
 800d214:	3901      	subs	r1, #1
 800d216:	1884      	adds	r4, r0, r2
 800d218:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d21c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d220:	4293      	cmp	r3, r2
 800d222:	d103      	bne.n	800d22c <strncmp+0x1c>
 800d224:	42a0      	cmp	r0, r4
 800d226:	d001      	beq.n	800d22c <strncmp+0x1c>
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f5      	bne.n	800d218 <strncmp+0x8>
 800d22c:	1a98      	subs	r0, r3, r2
 800d22e:	bd10      	pop	{r4, pc}
 800d230:	4610      	mov	r0, r2
 800d232:	e7fc      	b.n	800d22e <strncmp+0x1e>

0800d234 <__ascii_wctomb>:
 800d234:	b149      	cbz	r1, 800d24a <__ascii_wctomb+0x16>
 800d236:	2aff      	cmp	r2, #255	; 0xff
 800d238:	bf85      	ittet	hi
 800d23a:	238a      	movhi	r3, #138	; 0x8a
 800d23c:	6003      	strhi	r3, [r0, #0]
 800d23e:	700a      	strbls	r2, [r1, #0]
 800d240:	f04f 30ff 	movhi.w	r0, #4294967295
 800d244:	bf98      	it	ls
 800d246:	2001      	movls	r0, #1
 800d248:	4770      	bx	lr
 800d24a:	4608      	mov	r0, r1
 800d24c:	4770      	bx	lr
	...

0800d250 <malloc>:
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <malloc+0xc>)
 800d252:	4601      	mov	r1, r0
 800d254:	6818      	ldr	r0, [r3, #0]
 800d256:	f7ff bc91 	b.w	800cb7c <_malloc_r>
 800d25a:	bf00      	nop
 800d25c:	20000060 	.word	0x20000060

0800d260 <memmove>:
 800d260:	4288      	cmp	r0, r1
 800d262:	b510      	push	{r4, lr}
 800d264:	eb01 0302 	add.w	r3, r1, r2
 800d268:	d807      	bhi.n	800d27a <memmove+0x1a>
 800d26a:	1e42      	subs	r2, r0, #1
 800d26c:	4299      	cmp	r1, r3
 800d26e:	d00a      	beq.n	800d286 <memmove+0x26>
 800d270:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d274:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d278:	e7f8      	b.n	800d26c <memmove+0xc>
 800d27a:	4283      	cmp	r3, r0
 800d27c:	d9f5      	bls.n	800d26a <memmove+0xa>
 800d27e:	1881      	adds	r1, r0, r2
 800d280:	1ad2      	subs	r2, r2, r3
 800d282:	42d3      	cmn	r3, r2
 800d284:	d100      	bne.n	800d288 <memmove+0x28>
 800d286:	bd10      	pop	{r4, pc}
 800d288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d28c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d290:	e7f7      	b.n	800d282 <memmove+0x22>

0800d292 <__malloc_lock>:
 800d292:	4770      	bx	lr

0800d294 <__malloc_unlock>:
 800d294:	4770      	bx	lr
	...

0800d298 <_free_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4605      	mov	r5, r0
 800d29c:	2900      	cmp	r1, #0
 800d29e:	d045      	beq.n	800d32c <_free_r+0x94>
 800d2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a4:	1f0c      	subs	r4, r1, #4
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	bfb8      	it	lt
 800d2aa:	18e4      	addlt	r4, r4, r3
 800d2ac:	f7ff fff1 	bl	800d292 <__malloc_lock>
 800d2b0:	4a1f      	ldr	r2, [pc, #124]	; (800d330 <_free_r+0x98>)
 800d2b2:	6813      	ldr	r3, [r2, #0]
 800d2b4:	4610      	mov	r0, r2
 800d2b6:	b933      	cbnz	r3, 800d2c6 <_free_r+0x2e>
 800d2b8:	6063      	str	r3, [r4, #4]
 800d2ba:	6014      	str	r4, [r2, #0]
 800d2bc:	4628      	mov	r0, r5
 800d2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c2:	f7ff bfe7 	b.w	800d294 <__malloc_unlock>
 800d2c6:	42a3      	cmp	r3, r4
 800d2c8:	d90c      	bls.n	800d2e4 <_free_r+0x4c>
 800d2ca:	6821      	ldr	r1, [r4, #0]
 800d2cc:	1862      	adds	r2, r4, r1
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	bf04      	itt	eq
 800d2d2:	681a      	ldreq	r2, [r3, #0]
 800d2d4:	685b      	ldreq	r3, [r3, #4]
 800d2d6:	6063      	str	r3, [r4, #4]
 800d2d8:	bf04      	itt	eq
 800d2da:	1852      	addeq	r2, r2, r1
 800d2dc:	6022      	streq	r2, [r4, #0]
 800d2de:	6004      	str	r4, [r0, #0]
 800d2e0:	e7ec      	b.n	800d2bc <_free_r+0x24>
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	685a      	ldr	r2, [r3, #4]
 800d2e6:	b10a      	cbz	r2, 800d2ec <_free_r+0x54>
 800d2e8:	42a2      	cmp	r2, r4
 800d2ea:	d9fa      	bls.n	800d2e2 <_free_r+0x4a>
 800d2ec:	6819      	ldr	r1, [r3, #0]
 800d2ee:	1858      	adds	r0, r3, r1
 800d2f0:	42a0      	cmp	r0, r4
 800d2f2:	d10b      	bne.n	800d30c <_free_r+0x74>
 800d2f4:	6820      	ldr	r0, [r4, #0]
 800d2f6:	4401      	add	r1, r0
 800d2f8:	1858      	adds	r0, r3, r1
 800d2fa:	4282      	cmp	r2, r0
 800d2fc:	6019      	str	r1, [r3, #0]
 800d2fe:	d1dd      	bne.n	800d2bc <_free_r+0x24>
 800d300:	6810      	ldr	r0, [r2, #0]
 800d302:	6852      	ldr	r2, [r2, #4]
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	4401      	add	r1, r0
 800d308:	6019      	str	r1, [r3, #0]
 800d30a:	e7d7      	b.n	800d2bc <_free_r+0x24>
 800d30c:	d902      	bls.n	800d314 <_free_r+0x7c>
 800d30e:	230c      	movs	r3, #12
 800d310:	602b      	str	r3, [r5, #0]
 800d312:	e7d3      	b.n	800d2bc <_free_r+0x24>
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	1821      	adds	r1, r4, r0
 800d318:	428a      	cmp	r2, r1
 800d31a:	bf04      	itt	eq
 800d31c:	6811      	ldreq	r1, [r2, #0]
 800d31e:	6852      	ldreq	r2, [r2, #4]
 800d320:	6062      	str	r2, [r4, #4]
 800d322:	bf04      	itt	eq
 800d324:	1809      	addeq	r1, r1, r0
 800d326:	6021      	streq	r1, [r4, #0]
 800d328:	605c      	str	r4, [r3, #4]
 800d32a:	e7c7      	b.n	800d2bc <_free_r+0x24>
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	bf00      	nop
 800d330:	2000a458 	.word	0x2000a458

0800d334 <_realloc_r>:
 800d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d336:	4607      	mov	r7, r0
 800d338:	4614      	mov	r4, r2
 800d33a:	460e      	mov	r6, r1
 800d33c:	b921      	cbnz	r1, 800d348 <_realloc_r+0x14>
 800d33e:	4611      	mov	r1, r2
 800d340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d344:	f7ff bc1a 	b.w	800cb7c <_malloc_r>
 800d348:	b922      	cbnz	r2, 800d354 <_realloc_r+0x20>
 800d34a:	f7ff ffa5 	bl	800d298 <_free_r>
 800d34e:	4625      	mov	r5, r4
 800d350:	4628      	mov	r0, r5
 800d352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d354:	f000 f814 	bl	800d380 <_malloc_usable_size_r>
 800d358:	42a0      	cmp	r0, r4
 800d35a:	d20f      	bcs.n	800d37c <_realloc_r+0x48>
 800d35c:	4621      	mov	r1, r4
 800d35e:	4638      	mov	r0, r7
 800d360:	f7ff fc0c 	bl	800cb7c <_malloc_r>
 800d364:	4605      	mov	r5, r0
 800d366:	2800      	cmp	r0, #0
 800d368:	d0f2      	beq.n	800d350 <_realloc_r+0x1c>
 800d36a:	4631      	mov	r1, r6
 800d36c:	4622      	mov	r2, r4
 800d36e:	f7fd fd41 	bl	800adf4 <memcpy>
 800d372:	4631      	mov	r1, r6
 800d374:	4638      	mov	r0, r7
 800d376:	f7ff ff8f 	bl	800d298 <_free_r>
 800d37a:	e7e9      	b.n	800d350 <_realloc_r+0x1c>
 800d37c:	4635      	mov	r5, r6
 800d37e:	e7e7      	b.n	800d350 <_realloc_r+0x1c>

0800d380 <_malloc_usable_size_r>:
 800d380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d384:	1f18      	subs	r0, r3, #4
 800d386:	2b00      	cmp	r3, #0
 800d388:	bfbc      	itt	lt
 800d38a:	580b      	ldrlt	r3, [r1, r0]
 800d38c:	18c0      	addlt	r0, r0, r3
 800d38e:	4770      	bx	lr

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr


Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f718  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c7f8  0800f8c0  0800f8c0  0001f8c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0b8  0801c0b8  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0b8  0801c0b8  0002c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0c0  0801c0c0  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0c0  0801c0c0  0002c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0c4  0801c0c4  0002c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0801c0c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aab8  20000240  0801c2f8  00030240  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  2000acf8  0801c2f8  0003acf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a8e  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005503  00000000  00000000  00056cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a28  00000000  00000000  0005c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  0005dc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e04f  00000000  00000000  0005f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c574  00000000  00000000  0007d427  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c013  00000000  00000000  0009999b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001359ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  00135a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f8a0 	.word	0x0800f8a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800f8a0 	.word	0x0800f8a0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <apInit>:
#include "ap.h"

void lcdMain(void);

void apInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	cliOpen(_DEF_UART1, 57600);
 8000fbc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fcbf 	bl	8001944 <cliOpen>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <apMain>:

void apMain(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8000fd0:	f000 f91b 	bl	800120a <millis>
 8000fd4:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8000fd6:	f000 f918 	bl	800120a <millis>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d302      	bcc.n	8000fec <apMain+0x22>
    {
      pre_time = millis();
 8000fe6:	f000 f910 	bl	800120a <millis>
 8000fea:	6078      	str	r0, [r7, #4]

    }
    //Ds18b20_ManualConvert();

    Sonar_measure();
 8000fec:	f003 fd24 	bl	8004a38 <Sonar_measure>
    tds_measure();
 8000ff0:	f004 f9ee 	bl	80053d0 <tds_measure>

    if(buttonGetPressed(_DEF_BUTTON1))
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fba1 	bl	800173c <buttonGetPressed>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <apMain+0x3e>
    {
    	ledOn(_DEF_LED1);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 fe05 	bl	8003c10 <ledOn>
 8001006:	e002      	b.n	800100e <apMain+0x44>
    }
    else
    {
    	ledOff(_DEF_LED1);
 8001008:	2000      	movs	r0, #0
 800100a:	f002 fe21 	bl	8003c50 <ledOff>
    }
    cliMain();
 800100e:	f000 fd51 	bl	8001ab4 <cliMain>
    lcdMain();
 8001012:	f000 f801 	bl	8001018 <lcdMain>
    if (millis()-pre_time >= 1000)
 8001016:	e7de      	b.n	8000fd6 <apMain+0xc>

08001018 <lcdMain>:
  }
}


void lcdMain(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af02      	add	r7, sp, #8
  if (lcdIsInit() != true)
 800101e:	f001 ff93 	bl	8002f48 <lcdIsInit>
 8001022:	4603      	mov	r3, r0
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 809f 	bne.w	800116e <lcdMain+0x156>
  {
    return;
  }


  if (lcdDrawAvailable() == true)
 8001030:	f002 f9c2 	bl	80033b8 <lcdDrawAvailable>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 809a 	beq.w	8001170 <lcdMain+0x158>
  {
      lcdClearBuffer(black);
 800103c:	2000      	movs	r0, #0
 800103e:	f001 ffc1 	bl	8002fc4 <lcdClearBuffer>
      lcdSetFont(LCD_FONT_HAN);
 8001042:	2003      	movs	r0, #3
 8001044:	f002 fd00 	bl	8003a48 <lcdSetFont>
      lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움]");
 8001048:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <lcdMain+0x15c>)
 800104a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800104e:	2100      	movs	r1, #0
 8001050:	2000      	movs	r0, #0
 8001052:	f002 fb65 	bl	8003720 <lcdPrintf>

      lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8001056:	f002 f997 	bl	8003388 <lcdGetFps>
 800105a:	4603      	mov	r3, r0
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4b46      	ldr	r3, [pc, #280]	; (8001178 <lcdMain+0x160>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	2110      	movs	r1, #16
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fb5a 	bl	8003720 <lcdPrintf>
      lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 800106c:	f002 f998 	bl	80033a0 <lcdGetFpsTime>
 8001070:	4603      	mov	r3, r0
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <lcdMain+0x164>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	2120      	movs	r1, #32
 800107c:	2000      	movs	r0, #0
 800107e:	f002 fb4f 	bl	8003720 <lcdPrintf>
      lcdPrintf(0,16*3, white, "%d ms" , millis());
 8001082:	f000 f8c2 	bl	800120a <millis>
 8001086:	4603      	mov	r3, r0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <lcdMain+0x164>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	2000      	movs	r0, #0
 8001094:	f002 fb44 	bl	8003720 <lcdPrintf>

      lcdDrawRoundRect(70, 16*1, 52, 17, 5, white);
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2305      	movs	r3, #5
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2311      	movs	r3, #17
 80010a4:	2234      	movs	r2, #52	; 0x34
 80010a6:	2110      	movs	r1, #16
 80010a8:	2046      	movs	r0, #70	; 0x46
 80010aa:	f002 f839 	bl	8003120 <lcdDrawRoundRect>
      lcdDrawFillRoundRect(71, 17, 50, 15, 5, blue);
 80010ae:	231f      	movs	r3, #31
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2305      	movs	r3, #5
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	230f      	movs	r3, #15
 80010b8:	2232      	movs	r2, #50	; 0x32
 80010ba:	2111      	movs	r1, #17
 80010bc:	2047      	movs	r0, #71	; 0x47
 80010be:	f002 f930 	bl	8003322 <lcdDrawFillRoundRect>
      lcdSetFont(LCD_FONT_07x10);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 fcc0 	bl	8003a48 <lcdSetFont>
      lcdPrintf(75,21, white, "BUTTON");
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <lcdMain+0x168>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	2115      	movs	r1, #21
 80010d0:	204b      	movs	r0, #75	; 0x4b
 80010d2:	f002 fb25 	bl	8003720 <lcdPrintf>

      lcdSetFont(LCD_FONT_HAN);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f002 fcb6 	bl	8003a48 <lcdSetFont>
      lcdPrintf(0,16*4, white, "물온도 : %3d 도" , (int32_t) ds18b20[0].Temperature);
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <lcdMain+0x16c>)
 80010de:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <lcdMain+0x170>)
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 fb13 	bl	8003720 <lcdPrintf>
      lcdPrintf(0,16*5, white, "물높이 : %3d cm" , sonar_tbl[0].filter_distance_cm/10);
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <lcdMain+0x174>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a24      	ldr	r2, [pc, #144]	; (8001190 <lcdMain+0x178>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <lcdMain+0x17c>)
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	2150      	movs	r1, #80	; 0x50
 8001110:	2000      	movs	r0, #0
 8001112:	f002 fb05 	bl	8003720 <lcdPrintf>
      lcdPrintf(0,16*6, white, "TDS : %4d ppm" , (int32_t) tds_tbl[0].filter_tdsValue);
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <lcdMain+0x180>)
 8001118:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <lcdMain+0x184>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	2160      	movs	r1, #96	; 0x60
 800112e:	2000      	movs	r0, #0
 8001130:	f002 faf6 	bl	8003720 <lcdPrintf>

      lcdDrawFillRect( 0, 118, 10, 10, red);
 8001134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	230a      	movs	r3, #10
 800113c:	220a      	movs	r2, #10
 800113e:	2176      	movs	r1, #118	; 0x76
 8001140:	2000      	movs	r0, #0
 8001142:	f002 fabe 	bl	80036c2 <lcdDrawFillRect>
      lcdDrawFillRect(10, 118, 10, 10, green);
 8001146:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230a      	movs	r3, #10
 800114e:	220a      	movs	r2, #10
 8001150:	2176      	movs	r1, #118	; 0x76
 8001152:	200a      	movs	r0, #10
 8001154:	f002 fab5 	bl	80036c2 <lcdDrawFillRect>
      lcdDrawFillRect(20, 118, 10, 10, blue);
 8001158:	231f      	movs	r3, #31
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230a      	movs	r3, #10
 800115e:	220a      	movs	r2, #10
 8001160:	2176      	movs	r1, #118	; 0x76
 8001162:	2014      	movs	r0, #20
 8001164:	f002 faad 	bl	80036c2 <lcdDrawFillRect>

      lcdRequestDraw();
 8001168:	f002 f93c 	bl	80033e4 <lcdRequestDraw>
 800116c:	e000      	b.n	8001170 <lcdMain+0x158>
    return;
 800116e:	bf00      	nop
  }
}
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800f8c0 	.word	0x0800f8c0
 8001178:	0800f8dc 	.word	0x0800f8dc
 800117c:	0800f8e4 	.word	0x0800f8e4
 8001180:	0800f8ec 	.word	0x0800f8ec
 8001184:	2000a8ac 	.word	0x2000a8ac
 8001188:	0800f8f4 	.word	0x0800f8f4
 800118c:	2000a2c4 	.word	0x2000a2c4
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	0800f908 	.word	0x0800f908
 8001198:	2000ab20 	.word	0x2000ab20
 800119c:	0800f91c 	.word	0x0800f91c

080011a0 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_Init();
 80011a6:	f005 fbdb 	bl	8006960 <HAL_Init>
  SystemClock_Config();
 80011aa:	f000 f835 	bl	8001218 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <bspInit+0x50>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <bspInit+0x50>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <bspInit+0x50>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <bspInit+0x50>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <bspInit+0x50>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <bspInit+0x50>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <delay>:

void delay(uint32_t ms)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f005 fc21 	bl	8006a44 <HAL_Delay>
#endif
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <millis>:

uint32_t millis(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800120e:	f005 fc0d 	bl	8006a2c <HAL_GetTick>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b094      	sub	sp, #80	; 0x50
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	2230      	movs	r2, #48	; 0x30
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f00c f877 	bl	800d31a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <SystemClock_Config+0xc8>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <SystemClock_Config+0xc8>)
 8001246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124a:	6413      	str	r3, [r2, #64]	; 0x40
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SystemClock_Config+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a20      	ldr	r2, [pc, #128]	; (80012e4 <SystemClock_Config+0xcc>)
 8001262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <SystemClock_Config+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127e:	2302      	movs	r3, #2
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001282:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001288:	2319      	movs	r3, #25
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800128c:	23c0      	movs	r3, #192	; 0xc0
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f007 f919 	bl	80084d4 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a8:	f000 f81e 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2103      	movs	r1, #3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 fb73 	bl	80089b4 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d4:	f000 f808 	bl	80012e8 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	; 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x6>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f005 fb3a 	bl	8006a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ADC_IRQHandler+0x10>)
 800139a:	f005 fbb8 	bl	8006b0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000ab48 	.word	0x2000ab48

080013a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM3_IRQHandler+0x10>)
 80013ae:	f009 fcbf 	bl	800ad30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000aa14 	.word	0x2000aa14

080013bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <SPI1_IRQHandler+0x10>)
 80013c2:	f009 f9a1 	bl	800a708 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000aa68 	.word	0x2000aa68

080013d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <USART1_IRQHandler+0x10>)
 80013d6:	f00a fba1 	bl	800bb1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000acb0 	.word	0x2000acb0

080013e4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <SDIO_IRQHandler+0x10>)
 80013ea:	f007 fe29 	bl	8009040 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000a990 	.word	0x2000a990

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f006 fb45 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000ab90 	.word	0x2000ab90

0800140c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <DMA2_Stream2_IRQHandler+0x10>)
 8001412:	f006 fb3b 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000ac50 	.word	0x2000ac50

08001420 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Stream3_IRQHandler+0x10>)
 8001426:	f006 fb31 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000a930 	.word	0x2000a930

08001434 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA2_Stream5_IRQHandler+0x10>)
 800143a:	f006 fb27 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000aac0 	.word	0x2000aac0

08001448 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA2_Stream6_IRQHandler+0x10>)
 800144e:	f006 fb1d 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000a8d0 	.word	0x2000a8d0

0800145c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream7_IRQHandler+0x10>)
 8001462:	f006 fb13 	bl	8007a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000abf0 	.word	0x2000abf0

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f00b ff06 	bl	800d2b0 <__errno>
 80014a4:	4602      	mov	r2, r0
 80014a6:	230c      	movs	r3, #12
 80014a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	2000025c 	.word	0x2000025c
 80014d8:	2000acf8 	.word	0x2000acf8

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x28>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x28>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SystemInit+0x28>)
 80014f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f6:	609a      	str	r2, [r3, #8]
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd3 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f00b fec1 	bl	800d2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f00b fead 	bl	800d298 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	0801c0c8 	.word	0x0801c0c8
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8001550:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8001554:	2000acf8 	.word	0x2000acf8

08001558 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <DMA1_Stream0_IRQHandler>

0800155a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	60da      	str	r2, [r3, #12]

  return ret;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e026      	b.n	80015f4 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	441a      	add	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	440b      	add	r3, r1
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d00c      	beq.n	80015e8 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	6892      	ldr	r2, [r2, #8]
 80015d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80015dc:	fb02 f201 	mul.w	r2, r2, r1
 80015e0:	1a9a      	subs	r2, r3, r2
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	e002      	b.n	80015ee <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
      break;
 80015ec:	e006      	b.n	80015fc <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	3301      	adds	r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8d4      	bhi.n	80015a6 <qbufferRead+0x16>
    }
  }

  return ret;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6892      	ldr	r2, [r2, #8]
 8001620:	fbb3 f1f2 	udiv	r1, r3, r2
 8001624:	fb02 f201 	mul.w	r2, r2, r1
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

  return ret;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <DWT_Delay_Init+0x58>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <DWT_Delay_Init+0x58>)
 8001646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DWT_Delay_Init+0x58>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <DWT_Delay_Init+0x58>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <DWT_Delay_Init+0x5c>)
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <DWT_Delay_Init+0x5c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <DWT_Delay_Init+0x5c>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001676:	bf00      	nop
     __ASM volatile ("NOP");
 8001678:	bf00      	nop
     __ASM volatile ("NOP");
 800167a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <DWT_Delay_Init+0x5c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001684:	2300      	movs	r3, #0
 8001686:	e000      	b.n	800168a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001688:	2301      	movs	r3, #1
  }
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000edf0 	.word	0xe000edf0
 8001698:	e0001000 	.word	0xe0001000

0800169c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
  bool ret = true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <buttonInit+0x90>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <buttonInit+0x90>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <buttonInit+0x90>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	e019      	b.n	8001712 <buttonInit+0x76>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <buttonInit+0x94>)
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <buttonInit+0x94>)
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f006 fc34 	bl	8007f74 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	3301      	adds	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dde2      	ble.n	80016de <buttonInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001718:	4906      	ldr	r1, [pc, #24]	; (8001734 <buttonInit+0x98>)
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <buttonInit+0x9c>)
 800171c:	f000 feea 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8001720:	7efb      	ldrb	r3, [r7, #27]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	20000004 	.word	0x20000004
 8001734:	0800181d 	.word	0x0800181d
 8001738:	0800f92c 	.word	0x0800f92c

0800173c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <buttonGetPressed+0xdc>)
 8001756:	4413      	add	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <buttonGetPressed+0x28>
  {
    return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e054      	b.n	800180e <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	7a9b      	ldrb	r3, [r3, #10]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <buttonGetPressed+0x36>
 800176c:	2b01      	cmp	r3, #1
 800176e:	d018      	beq.n	80017a2 <buttonGetPressed+0x66>
 8001770:	e04c      	b.n	800180c <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f006 fe5c 	bl	800843c <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d13a      	bne.n	8001806 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8001790:	f7ff fd3b 	bl	800120a <millis>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	611a      	str	r2, [r3, #16]
  			  button->State = BUTTON_Pressed;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2201      	movs	r2, #1
 800179e:	729a      	strb	r2, [r3, #10]
  		  }
  		  break;
 80017a0:	e031      	b.n	8001806 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f006 fe44 	bl	800843c <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	7a1b      	ldrb	r3, [r3, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d114      	bne.n	80017ea <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 80017c0:	f7ff fd23 	bl	800120a <millis>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	1ad2      	subs	r2, r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d91a      	bls.n	800180a <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2201      	movs	r2, #1
 80017d8:	725a      	strb	r2, [r3, #9]
				  ret = button->PinState;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	7a5b      	ldrb	r3, [r3, #9]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 80017e8:	e00f      	b.n	800180a <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	729a      	strb	r2, [r3, #10]
			  button->PinState = GPIO_PIN_RESET;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	725a      	strb	r2, [r3, #9]
			  ret = button->PinState;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	7a5b      	ldrb	r3, [r3, #9]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
		  break;
 8001804:	e001      	b.n	800180a <buttonGetPressed+0xce>
  		  break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <buttonGetPressed+0xd0>
		  break;
 800180a:	bf00      	nop
  }
  return ret;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000004 	.word	0x20000004

0800181c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d128      	bne.n	8001882 <cliButton+0x66>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4919      	ldr	r1, [pc, #100]	; (800189c <cliButton+0x80>)
 8001836:	2000      	movs	r0, #0
 8001838:	4798      	blx	r3
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <cliButton+0x66>
  {
    while(cliKeepLoop())
 8001840:	e018      	b.n	8001874 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	e00c      	b.n	8001862 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff75 	bl	800173c <buttonGetPressed>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <cliButton+0x84>)
 8001858:	f000 fd3c 	bl	80022d4 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	3301      	adds	r3, #1
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	ddef      	ble.n	8001848 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <cliButton+0x88>)
 800186a:	f000 fd33 	bl	80022d4 <cliPrintf>

      delay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f7ff fcc0 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8001874:	f000 fe28 	bl	80024c8 <cliKeepLoop>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e1      	bne.n	8001842 <cliButton+0x26>
    }

    ret = true;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <cliButton+0x8c>)
 8001890:	f000 fd20 	bl	80022d4 <cliPrintf>
  }
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800f934 	.word	0x0800f934
 80018a0:	0800f93c 	.word	0x0800f93c
 80018a4:	0800f940 	.word	0x0800f940
 80018a8:	0800f944 	.word	0x0800f944

080018ac <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <cliInit+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <cliInit+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <cliInit+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <cliInit+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <cliInit+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <cliInit+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <cliInit+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <cliInit+0x74>)
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <cliInit+0x78>)
 80018e6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <cliInit+0x74>)
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <cliInit+0x7c>)
 80018ee:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <cliInit+0x74>)
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <cliInit+0x80>)
 80018f6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <cliInit+0x74>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <cliInit+0x84>)
 80018fe:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <cliInit+0x74>)
 8001904:	f000 fb5c 	bl	8001fc0 <cliLineClean>


  cliAdd("help", cliShowList);
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <cliInit+0x88>)
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <cliInit+0x8c>)
 800190c:	f000 fdf2 	bl	80024f4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001910:	490a      	ldr	r1, [pc, #40]	; (800193c <cliInit+0x90>)
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <cliInit+0x94>)
 8001914:	f000 fdee 	bl	80024f4 <cliAdd>

  return true;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000a464 	.word	0x2000a464
 8001924:	08002385 	.word	0x08002385
 8001928:	080023d5 	.word	0x080023d5
 800192c:	0800242d 	.word	0x0800242d
 8001930:	08002475 	.word	0x08002475
 8001934:	08002589 	.word	0x08002589
 8001938:	0800f954 	.word	0x0800f954
 800193c:	080025f9 	.word	0x080025f9
 8001940:	0800f95c 	.word	0x0800f95c

08001944 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <cliOpen+0x38>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <cliOpen+0x38>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 ff17 	bl	8005794 <uartOpen>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <cliOpen+0x38>)
 800196c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <cliOpen+0x38>)
 8001970:	7a1b      	ldrb	r3, [r3, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000a464 	.word	0x2000a464

08001980 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001988:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <cliShowLog+0xdc>)
 800198a:	7a5b      	ldrb	r3, [r3, #9]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d061      	beq.n	8001a54 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a98      	ldrb	r0, [r3, #10]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800199a:	461a      	mov	r2, r3
 800199c:	4930      	ldr	r1, [pc, #192]	; (8001a60 <cliShowLog+0xe0>)
 800199e:	f004 f8af 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7a98      	ldrb	r0, [r3, #10]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80019ac:	461a      	mov	r2, r3
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <cliShowLog+0xe4>)
 80019b0:	f004 f8a6 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7a98      	ldrb	r0, [r3, #10]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80019be:	461a      	mov	r2, r3
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <cliShowLog+0xe8>)
 80019c2:	f004 f89d 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7a98      	ldrb	r0, [r3, #10]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80019d0:	461a      	mov	r2, r3
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <cliShowLog+0xec>)
 80019d4:	f004 f894 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a98      	ldrb	r0, [r3, #10]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80019e2:	461a      	mov	r2, r3
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <cliShowLog+0xf0>)
 80019e6:	f004 f88b 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7a98      	ldrb	r0, [r3, #10]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80019f4:	461a      	mov	r2, r3
 80019f6:	491f      	ldr	r1, [pc, #124]	; (8001a74 <cliShowLog+0xf4>)
 80019f8:	f004 f882 	bl	8005b00 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a98      	ldrb	r0, [r3, #10]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a06:	461a      	mov	r2, r3
 8001a08:	491b      	ldr	r1, [pc, #108]	; (8001a78 <cliShowLog+0xf8>)
 8001a0a:	f004 f879 	bl	8005b00 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e012      	b.n	8001a3a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a98      	ldrb	r0, [r3, #10]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4913      	ldr	r1, [pc, #76]	; (8001a7c <cliShowLog+0xfc>)
 8001a30:	f004 f866 	bl	8005b00 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001a40:	461a      	mov	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	dbe5      	blt.n	8001a14 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a9b      	ldrb	r3, [r3, #10]
 8001a4c:	490c      	ldr	r1, [pc, #48]	; (8001a80 <cliShowLog+0x100>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 f856 	bl	8005b00 <uartPrintf>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a464 	.word	0x2000a464
 8001a60:	0800f960 	.word	0x0800f960
 8001a64:	0800f970 	.word	0x0800f970
 8001a68:	0800f980 	.word	0x0800f980
 8001a6c:	0800f990 	.word	0x0800f990
 8001a70:	0800f9a0 	.word	0x0800f9a0
 8001a74:	0800f9b0 	.word	0x0800f9b0
 8001a78:	0800f9c0 	.word	0x0800f9c0
 8001a7c:	0800f9d0 	.word	0x0800f9d0
 8001a80:	0800f9e0 	.word	0x0800f9e0

08001a84 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <cliShowPrompt+0x28>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 f834 	bl	8005b00 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <cliShowPrompt+0x2c>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 f82e 	bl	8005b00 <uartPrintf>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	0800f9e4 	.word	0x0800f9e4
 8001ab0:	0800f9e8 	.word	0x0800f9e8

08001ab4 <cliMain>:

bool cliMain(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <cliMain+0x40>)
 8001aba:	7a1b      	ldrb	r3, [r3, #8]
 8001abc:	f083 0301 	eor.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <cliMain+0x16>
  {
    return false;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e012      	b.n	8001af0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <cliMain+0x40>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 ff72 	bl	80059b8 <uartAvailable>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <cliMain+0x40>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 ffb0 	bl	8005a44 <uartRead>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <cliMain+0x40>)
 8001aea:	f000 f805 	bl	8001af8 <cliUpdate>
  }

  return true;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000a464 	.word	0x2000a464

08001af8 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001b10:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7c1b      	ldrb	r3, [r3, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8165 	bne.w	8001de6 <cliUpdate+0x2ee>
  {
    switch(rx_data)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	2b0d      	cmp	r3, #13
 8001b20:	d009      	beq.n	8001b36 <cliUpdate+0x3e>
 8001b22:	2b0d      	cmp	r3, #13
 8001b24:	dc02      	bgt.n	8001b2c <cliUpdate+0x34>
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d065      	beq.n	8001bf6 <cliUpdate+0xfe>
 8001b2a:	e0d4      	b.n	8001cd6 <cliUpdate+0x1de>
 8001b2c:	2b1b      	cmp	r3, #27
 8001b2e:	d01c      	beq.n	8001b6a <cliUpdate+0x72>
 8001b30:	2b7f      	cmp	r3, #127	; 0x7f
 8001b32:	d01e      	beq.n	8001b72 <cliUpdate+0x7a>
 8001b34:	e0cf      	b.n	8001cd6 <cliUpdate+0x1de>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <cliUpdate+0x54>
        {
          cliLineAdd(p_cli);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa57 	bl	8001ff4 <cliLineAdd>
          cliRunCmd(p_cli);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fb22 	bl	8002190 <cliRunCmd>
        }

        line->count = 0;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff8e 	bl	8001a84 <cliShowPrompt>
        break;
 8001b68:	e144      	b.n	8001df4 <cliUpdate+0x2fc>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	741a      	strb	r2, [r3, #16]
        break;
 8001b70:	e140      	b.n	8001df4 <cliUpdate+0x2fc>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	f080 8133 	bcs.w	8001dea <cliUpdate+0x2f2>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001b94:	2301      	movs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	e013      	b.n	8001bc2 <cliUpdate+0xca>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	441a      	add	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	4619      	mov	r1, r3
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	69f9      	ldr	r1, [r7, #28]
 8001bb6:	5c89      	ldrb	r1, [r1, r2]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	7efb      	ldrb	r3, [r7, #27]
 8001bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbe7      	blt.n	8001b9a <cliUpdate+0xa2>
          }

          line->count--;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001be0:	461a      	mov	r2, r3
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	498e      	ldr	r1, [pc, #568]	; (8001e28 <cliUpdate+0x330>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 ff86 	bl	8005b00 <uartPrintf>
        }
        break;
 8001bf4:	e0f9      	b.n	8001dea <cliUpdate+0x2f2>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d055      	beq.n	8001cac <cliUpdate+0x1b4>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d050      	beq.n	8001cac <cliUpdate+0x1b4>
        {
          if (line->cursor == line->count)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10e      	bne.n	8001c38 <cliUpdate+0x140>
          {
            line->count--;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c30:	461a      	mov	r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d231      	bcs.n	8001cac <cliUpdate+0x1b4>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c5c:	e013      	b.n	8001c86 <cliUpdate+0x18e>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c64:	461a      	mov	r2, r3
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	441a      	add	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	4619      	mov	r1, r3
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	440b      	add	r3, r1
 8001c76:	3b01      	subs	r3, #1
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	5c89      	ldrb	r1, [r1, r2]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	3301      	adds	r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	7ebb      	ldrb	r3, [r7, #26]
 8001c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbe7      	blt.n	8001c5e <cliUpdate+0x166>
            }

            line->count--;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2100      	movs	r1, #0
 8001caa:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 809b 	beq.w	8001dee <cliUpdate+0x2f6>
        {
          line->cursor--;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4957      	ldr	r1, [pc, #348]	; (8001e2c <cliUpdate+0x334>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 ff16 	bl	8005b00 <uartPrintf>
        }
        break;
 8001cd4:	e08b      	b.n	8001dee <cliUpdate+0x2f6>


      default:
        if ((line->count + 1) < line->buf_len)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cdc:	3301      	adds	r3, #1
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	f280 8084 	bge.w	8001df2 <cliUpdate+0x2fa>
        {
          if (line->cursor == line->count)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d124      	bne.n	8001d44 <cliUpdate+0x24c>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	1cf9      	adds	r1, r7, #3
 8001d00:	2201      	movs	r2, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fec4 	bl	8005a90 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	461a      	mov	r2, r3
 8001d10:	78f9      	ldrb	r1, [r7, #3]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d24e      	bcs.n	8001df2 <cliUpdate+0x2fa>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	e013      	b.n	8001d92 <cliUpdate+0x29a>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d70:	461a      	mov	r2, r3
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	5c89      	ldrb	r1, [r1, r2]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
 8001d92:	7e7b      	ldrb	r3, [r7, #25]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbe7      	blt.n	8001d6a <cliUpdate+0x272>
            }
            line->buf[line->cursor] = rx_data;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	461a      	mov	r2, r3
 8001da2:	78f9      	ldrb	r1, [r7, #3]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dce:	461a      	mov	r2, r3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4914      	ldr	r1, [pc, #80]	; (8001e30 <cliUpdate+0x338>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fe8e 	bl	8005b00 <uartPrintf>
          }
        }
        break;
 8001de4:	e005      	b.n	8001df2 <cliUpdate+0x2fa>
    }
  }
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <cliUpdate+0x2fc>
        break;
 8001df2:	bf00      	nop

  switch(p_cli->state)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7c1b      	ldrb	r3, [r3, #16]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	f200 80d3 	bhi.w	8001fa6 <cliUpdate+0x4ae>
 8001e00:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <cliUpdate+0x310>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e35 	.word	0x08001e35
 8001e14:	08001f9d 	.word	0x08001f9d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	741a      	strb	r2, [r3, #16]
      break;
 8001e1e:	e0c2      	b.n	8001fa6 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	741a      	strb	r2, [r3, #16]
      break;
 8001e26:	e0be      	b.n	8001fa6 <cliUpdate+0x4ae>
 8001e28:	0800f9f0 	.word	0x0800f9f0
 8001e2c:	0800f9f8 	.word	0x0800f9f8
 8001e30:	0800fa00 	.word	0x0800fa00

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b44      	cmp	r3, #68	; 0x44
 8001e3e:	d11a      	bne.n	8001e76 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001e5a:	231b      	movs	r3, #27
 8001e5c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001e5e:	235b      	movs	r3, #91	; 0x5b
 8001e60:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f107 010c 	add.w	r1, r7, #12
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fe0d 	bl	8005a90 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b43      	cmp	r3, #67	; 0x43
 8001e7a:	d11d      	bne.n	8001eb8 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d215      	bcs.n	8001eb8 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8001e9c:	231b      	movs	r3, #27
 8001e9e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001ea0:	235b      	movs	r3, #91	; 0x5b
 8001ea2:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f107 010c 	add.w	r1, r7, #12
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fdec 	bl	8005a90 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b41      	cmp	r3, #65	; 0x41
 8001ebc:	d10c      	bne.n	8001ed8 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8db 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f003 fe14 	bl	8005b00 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b42      	cmp	r3, #66	; 0x42
 8001edc:	d10c      	bne.n	8001ef8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8cb 	bl	800207c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f003 fe04 	bl	8005b00 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b31      	cmp	r3, #49	; 0x31
 8001efc:	d10f      	bne.n	8001f1e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	461a      	mov	r2, r3
 8001f0a:	492b      	ldr	r1, [pc, #172]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f0c:	f003 fdf8 	bl	8005b00 <uartPrintf>
        line->cursor = 0;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	2b34      	cmp	r3, #52	; 0x34
 8001f22:	d13f      	bne.n	8001fa4 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d210      	bcs.n	8001f56 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	8afa      	ldrh	r2, [r7, #22]
 8001f4e:	491b      	ldr	r1, [pc, #108]	; (8001fbc <cliUpdate+0x4c4>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fdd5 	bl	8005b00 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	8afa      	ldrh	r2, [r7, #22]
 8001f80:	490d      	ldr	r1, [pc, #52]	; (8001fb8 <cliUpdate+0x4c0>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fdbc 	bl	8005b00 <uartPrintf>
        }
        line->cursor = line->count;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2204      	movs	r2, #4
 8001f98:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001f9a:	e003      	b.n	8001fa4 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	741a      	strb	r2, [r3, #16]
      break;
 8001fa2:	e000      	b.n	8001fa6 <cliUpdate+0x4ae>
      break;
 8001fa4:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fcea 	bl	8001980 <cliShowLog>

  return ret;
 8001fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800fa0c 	.word	0x0800fa0c
 8001fbc:	0800fa14 	.word	0x0800fa14

08001fc0 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002002:	461a      	mov	r2, r3
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	440b      	add	r3, r1
 8002012:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4610      	mov	r0, r2
 800201a:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800201e:	2243      	movs	r2, #67	; 0x43
 8002020:	4619      	mov	r1, r3
 8002022:	f00b f96f 	bl	800d304 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800202c:	2b03      	cmp	r3, #3
 800202e:	d807      	bhi.n	8002040 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002036:	3301      	adds	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002046:	b25a      	sxtb	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002054:	3301      	adds	r3, #1
 8002056:	425a      	negs	r2, r3
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	bf58      	it	pl
 8002062:	4253      	negpl	r3, r2
 8002064:	b2da      	uxtb	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800208e:	2b00      	cmp	r3, #0
 8002090:	d076      	beq.n	8002180 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80020a6:	461a      	mov	r2, r3
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <cliLineChange+0x10c>)
 80020aa:	f003 fd29 	bl	8005b00 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7818      	ldrb	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80020c2:	461a      	mov	r2, r3
 80020c4:	4931      	ldr	r1, [pc, #196]	; (800218c <cliLineChange+0x110>)
 80020c6:	f003 fd1b 	bl	8005b00 <uartPrintf>
  }


  if (key_up == true)
 80020ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d125      	bne.n	800211e <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80020e2:	b25a      	sxtb	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80020f8:	4413      	add	r3, r2
 80020fa:	3b01      	subs	r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8002102:	fb93 f1f2 	sdiv	r1, r3, r2
 8002106:	fb02 f201 	mul.w	r2, r2, r1
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	b25a      	sxtb	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e013      	b.n	8002146 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002124:	3301      	adds	r3, #1
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800212c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002130:	fb02 f201 	mul.w	r2, r2, r1
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	b25a      	sxtb	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8002144:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	015b      	lsls	r3, r3, #5
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	4403      	add	r3, r0
 8002158:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800215c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8002160:	4611      	mov	r1, r2
 8002162:	2243      	movs	r2, #67	; 0x43
 8002164:	4618      	mov	r0, r3
 8002166:	f00b f8cd 	bl	800d304 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800217e:	e000      	b.n	8002182 <cliLineChange+0x106>
    return;
 8002180:	bf00      	nop
}
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0800fa0c 	.word	0x0800fa0c
 800218c:	0800fa1c 	.word	0x0800fa1c

08002190 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002198:	2300      	movs	r3, #0
 800219a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f851 	bl	8002244 <cliParseArgs>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d046      	beq.n	8002236 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80021a8:	4825      	ldr	r0, [pc, #148]	; (8002240 <cliRunCmd+0xb0>)
 80021aa:	f000 f893 	bl	80022d4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f8b1 	bl	800231c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e033      	b.n	8002228 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe f800 	bl	80001e0 <strcmp>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
        break;
 8002220:	e009      	b.n	8002236 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3301      	adds	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4293      	cmp	r3, r2
 8002234:	dbc4      	blt.n	80021c0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8002236:	7afb      	ldrb	r3, [r7, #11]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	0800fa24 	.word	0x0800fa24

08002244 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002262:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800226a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <cliParseArgs+0x8c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f107 0208 	add.w	r2, r7, #8
 8002280:	4619      	mov	r1, r3
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f00b feea 	bl	800e05c <strtok_r>
 8002288:	61b8      	str	r0, [r7, #24]
 800228a:	e010      	b.n	80022ae <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800228c:	8afb      	ldrh	r3, [r7, #22]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	82fa      	strh	r2, [r7, #22]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4413      	add	r3, r2
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <cliParseArgs+0x8c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f107 0208 	add.w	r2, r7, #8
 80022a4:	4619      	mov	r1, r3
 80022a6:	2000      	movs	r0, #0
 80022a8:	f00b fed8 	bl	800e05c <strtok_r>
 80022ac:	61b8      	str	r0, [r7, #24]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1eb      	bne.n	800228c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	8afa      	ldrh	r2, [r7, #22]
 80022b8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80022bc:	8afb      	ldrh	r3, [r7, #22]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <cliParseArgs+0x82>
  {
    ret = true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000018 	.word	0x20000018

080022d4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 80022d4:	b40f      	push	{r0, r1, r2, r3}
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <cliPrintf+0x44>)
 80022e4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f103 0011 	add.w	r0, r3, #17
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	f00b ff72 	bl	800e1dc <vsniprintf>
 80022f8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	7818      	ldrb	r0, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3311      	adds	r3, #17
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4619      	mov	r1, r3
 8002306:	f003 fbc3 	bl	8005a90 <uartWrite>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002314:	b004      	add	sp, #16
 8002316:	4770      	bx	lr
 8002318:	2000a464 	.word	0x2000a464

0800231c <cliToUpper>:

void cliToUpper(char *str)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002324:	2300      	movs	r3, #0
 8002326:	81fb      	strh	r3, [r7, #14]
 8002328:	e018      	b.n	800235c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002334:	7b7b      	ldrb	r3, [r7, #13]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800233a:	7b7b      	ldrb	r3, [r7, #13]
 800233c:	2b60      	cmp	r3, #96	; 0x60
 800233e:	d905      	bls.n	800234c <cliToUpper+0x30>
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	2b7a      	cmp	r3, #122	; 0x7a
 8002344:	d802      	bhi.n	800234c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002346:	7b7b      	ldrb	r3, [r7, #13]
 8002348:	3b20      	subs	r3, #32
 800234a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	7b7a      	ldrb	r2, [r7, #13]
 8002354:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	81fb      	strh	r3, [r7, #14]
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d9e3      	bls.n	800232a <cliToUpper+0xe>
 8002362:	e000      	b.n	8002366 <cliToUpper+0x4a>
      break;
 8002364:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d105      	bne.n	8002378 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800236c:	89fb      	ldrh	r3, [r7, #14]
 800236e:	3b01      	subs	r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
  }
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <cliArgsGetData+0x4c>)
 8002394:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	b29a      	uxth	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d301      	bcc.n	80023a8 <cliArgsGetData+0x24>
  {
    return 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e00e      	b.n	80023c6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f00b fecc 	bl	800e158 <strtoul>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000a464 	.word	0x2000a464

080023d4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <cliArgsGetFloat+0x54>)
 80023e6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <cliArgsGetFloat+0x28>
  {
    return 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e00d      	b.n	8002418 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00b fda7 	bl	800df60 <strtof>
 8002412:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	ee07 3a90 	vmov	s15, r3
}
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000a464 	.word	0x2000a464

0800242c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <cliArgsGetStr+0x44>)
 800243c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b29a      	uxth	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002448:	429a      	cmp	r2, r3
 800244a:	d301      	bcc.n	8002450 <cliArgsGetStr+0x24>
  {
    return 0;
 800244c:	2300      	movs	r3, #0
 800244e:	e008      	b.n	8002462 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000a464 	.word	0x2000a464

08002474 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <cliArgsIsStr+0x50>)
 8002486:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	b29a      	uxth	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002492:	429a      	cmp	r2, r3
 8002494:	d301      	bcc.n	800249a <cliArgsIsStr+0x26>
  {
    return 0;
 8002496:	2300      	movs	r3, #0
 8002498:	e010      	b.n	80024bc <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f7fd fe98 	bl	80001e0 <strcmp>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <cliArgsIsStr+0x46>
  {
    ret = true;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000a464 	.word	0x2000a464

080024c8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <cliKeepLoop+0x28>)
 80024d0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fa6e 	bl	80059b8 <uartAvailable>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <cliKeepLoop+0x1e>
  {
    return true;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80024e6:	2300      	movs	r3, #0
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	2000a464 	.word	0x2000a464

080024f4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <cliAdd+0x90>)
 8002504:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d901      	bls.n	8002514 <cliAdd+0x20>
  {
    return false;
 8002510:	2300      	movs	r3, #0
 8002512:	e032      	b.n	800257a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800251a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f00a fef9 	bl	800d32a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002538:	89fa      	ldrh	r2, [r7, #14]
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800254e:	89fa      	ldrh	r2, [r7, #14]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff feda 	bl	800231c <cliToUpper>

  p_cli->cmd_count++;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800256e:	3301      	adds	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002578:	7dfb      	ldrb	r3, [r7, #23]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000a464 	.word	0x2000a464

08002588 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <cliShowList+0x60>)
 8002592:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <cliShowList+0x64>)
 8002596:	f7ff fe9d 	bl	80022d4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800259a:	4815      	ldr	r0, [pc, #84]	; (80025f0 <cliShowList+0x68>)
 800259c:	f7ff fe9a 	bl	80022d4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e012      	b.n	80025cc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4413      	add	r3, r2
 80025b8:	3304      	adds	r3, #4
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fe8a 	bl	80022d4 <cliPrintf>
    cliPrintf("\r\n");
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <cliShowList+0x64>)
 80025c2:	f7ff fe87 	bl	80022d4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4293      	cmp	r3, r2
 80025d8:	dbe5      	blt.n	80025a6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80025da:	4806      	ldr	r0, [pc, #24]	; (80025f4 <cliShowList+0x6c>)
 80025dc:	f7ff fe7a 	bl	80022d4 <cliPrintf>
}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000a464 	.word	0x2000a464
 80025ec:	0800fa24 	.word	0x0800fa24
 80025f0:	0800fa28 	.word	0x0800fa28
 80025f4:	0800fa48 	.word	0x0800fa48

080025f8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002600:	2310      	movs	r3, #16
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002618:	4840      	ldr	r0, [pc, #256]	; (800271c <cliMemoryDump+0x124>)
 800261a:	f7ff fe5b 	bl	80022d4 <cliPrintf>
 800261e:	e07a      	b.n	8002716 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b01      	cmp	r3, #1
 8002624:	dd09      	ble.n	800263a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f00b fd91 	bl	800e158 <strtoul>
 8002636:	4603      	mov	r3, r0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f00b fd88 	bl	800e158 <strtoul>
 8002648:	4603      	mov	r3, r0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002650:	4833      	ldr	r0, [pc, #204]	; (8002720 <cliMemoryDump+0x128>)
 8002652:	f7ff fe3f 	bl	80022d4 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	e058      	b.n	800270e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	482e      	ldr	r0, [pc, #184]	; (8002724 <cliMemoryDump+0x12c>)
 800266c:	f7ff fe32 	bl	80022d4 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	482c      	ldr	r0, [pc, #176]	; (8002728 <cliMemoryDump+0x130>)
 8002678:	f7ff fe2c 	bl	80022d4 <cliPrintf>

    if ((idx%4) == 3)
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	425a      	negs	r2, r3
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	f002 0203 	and.w	r2, r2, #3
 8002688:	bf58      	it	pl
 800268a:	4253      	negpl	r3, r2
 800268c:	2b03      	cmp	r3, #3
 800268e:	d138      	bne.n	8002702 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002690:	4826      	ldr	r0, [pc, #152]	; (800272c <cliMemoryDump+0x134>)
 8002692:	f7ff fe1f 	bl	80022d4 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e02c      	b.n	80026f6 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e01d      	b.n	80026e4 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b1f      	cmp	r3, #31
 80026b4:	d910      	bls.n	80026d8 <cliMemoryDump+0xe0>
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b7e      	cmp	r3, #126	; 0x7e
 80026c2:	d809      	bhi.n	80026d8 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4817      	ldr	r0, [pc, #92]	; (8002730 <cliMemoryDump+0x138>)
 80026d2:	f7ff fdff 	bl	80022d4 <cliPrintf>
 80026d6:	e002      	b.n	80026de <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <cliMemoryDump+0x13c>)
 80026da:	f7ff fdfb 	bl	80022d4 <cliPrintf>
        for (i=0;i<4;i++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	ddde      	ble.n	80026a8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3304      	adds	r3, #4
 80026ee:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	3301      	adds	r3, #1
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	ddcf      	ble.n	800269c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80026fc:	480e      	ldr	r0, [pc, #56]	; (8002738 <cliMemoryDump+0x140>)
 80026fe:	f7ff fde9 	bl	80022d4 <cliPrintf>
    }
    addr++;
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	3304      	adds	r3, #4
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3301      	adds	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	429a      	cmp	r2, r3
 8002714:	dba2      	blt.n	800265c <cliMemoryDump+0x64>
  }
}
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	0800fa68 	.word	0x0800fa68
 8002720:	0800fa7c 	.word	0x0800fa7c
 8002724:	0800fa84 	.word	0x0800fa84
 8002728:	0800fa90 	.word	0x0800fa90
 800272c:	0800fa98 	.word	0x0800fa98
 8002730:	0800fa9c 	.word	0x0800fa9c
 8002734:	0800faa0 	.word	0x0800faa0
 8002738:	0800faa4 	.word	0x0800faa4

0800273c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8002742:	2305      	movs	r3, #5
 8002744:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8002746:	2201      	movs	r2, #1
 8002748:	4937      	ldr	r1, [pc, #220]	; (8002828 <Ds18b20_Init+0xec>)
 800274a:	4838      	ldr	r0, [pc, #224]	; (800282c <Ds18b20_Init+0xf0>)
 800274c:	f001 fb7f 	bl	8003e4e <OneWire_Init>
		TempSensorCount = 0;
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <Ds18b20_Init+0xf4>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8002756:	e002      	b.n	800275e <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f004 f973 	bl	8006a44 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800275e:	f004 f965 	bl	8006a2c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8002768:	429a      	cmp	r2, r3
 800276a:	d9f5      	bls.n	8002758 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800276c:	482f      	ldr	r0, [pc, #188]	; (800282c <Ds18b20_Init+0xf0>)
 800276e:	f001 fc5b 	bl	8004028 <OneWire_First>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <Ds18b20_Init+0xf8>)
 8002778:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800277a:	e019      	b.n	80027b0 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	f004 f961 	bl	8006a44 <HAL_Delay>
			TempSensorCount++;
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <Ds18b20_Init+0xf4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <Ds18b20_Init+0xf4>)
 800278c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <Ds18b20_Init+0xf4>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4a28      	ldr	r2, [pc, #160]	; (8002838 <Ds18b20_Init+0xfc>)
 8002798:	4413      	add	r3, r2
 800279a:	4619      	mov	r1, r3
 800279c:	4823      	ldr	r0, [pc, #140]	; (800282c <Ds18b20_Init+0xf0>)
 800279e:	f001 fd57 	bl	8004250 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 80027a2:	4822      	ldr	r0, [pc, #136]	; (800282c <Ds18b20_Init+0xf0>)
 80027a4:	f001 fc50 	bl	8004048 <OneWire_Next>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <Ds18b20_Init+0xf8>)
 80027ae:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <Ds18b20_Init+0xf8>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e1      	bne.n	800277c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <Ds18b20_Init+0xf4>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1bc      	bne.n	8002746 <Ds18b20_Init+0xa>
 80027cc:	e000      	b.n	80027d0 <Ds18b20_Init+0x94>
			break;
 80027ce:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <Ds18b20_Init+0x9e>
		return false;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e022      	b.n	8002820 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	71bb      	strb	r3, [r7, #6]
 80027de:	e019      	b.n	8002814 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 80027e0:	2032      	movs	r0, #50	; 0x32
 80027e2:	f004 f92f 	bl	8006a44 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <Ds18b20_Init+0xfc>)
 80027ec:	4413      	add	r3, r2
 80027ee:	220c      	movs	r2, #12
 80027f0:	4619      	mov	r1, r3
 80027f2:	480e      	ldr	r0, [pc, #56]	; (800282c <Ds18b20_Init+0xf0>)
 80027f4:	f000 f822 	bl	800283c <DS18B20_SetResolution>
		HAL_Delay(50);
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f004 f923 	bl	8006a44 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <Ds18b20_Init+0xfc>)
 8002804:	4413      	add	r3, r2
 8002806:	4619      	mov	r1, r3
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <Ds18b20_Init+0xf0>)
 800280a:	f000 f8b0 	bl	800296e <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	3301      	adds	r3, #1
 8002812:	71bb      	strb	r3, [r7, #6]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <Ds18b20_Init+0xf4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	79ba      	ldrb	r2, [r7, #6]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3e0      	bcc.n	80027e0 <Ds18b20_Init+0xa4>
	}
	return true;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020400 	.word	0x40020400
 800282c:	2000a8bc 	.word	0x2000a8bc
 8002830:	20000260 	.word	0x20000260
 8002834:	2000a8a8 	.word	0x2000a8a8
 8002838:	2000a8ac 	.word	0x2000a8ac

0800283c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f000 f87e 	bl	800294c <DS18B20_Is>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <DS18B20_SetResolution+0x1e>
		return 0;
 8002856:	2300      	movs	r3, #0
 8002858:	e074      	b.n	8002944 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f001 fb20 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f001 fcd6 	bl	8004214 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002868:	21be      	movs	r1, #190	; 0xbe
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f001 fb9e 	bl	8003fac <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f001 fbb8 	bl	8003fe6 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f001 fbb5 	bl	8003fe6 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f001 fbb2 	bl	8003fe6 <OneWire_ReadByte>
 8002882:	4603      	mov	r3, r0
 8002884:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f001 fbad 	bl	8003fe6 <OneWire_ReadByte>
 800288c:	4603      	mov	r3, r0
 800288e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f001 fba8 	bl	8003fe6 <OneWire_ReadByte>
 8002896:	4603      	mov	r3, r0
 8002898:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d108      	bne.n	80028b2 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	f023 0320 	bic.w	r3, r3, #32
 80028ae:	75fb      	strb	r3, [r7, #23]
 80028b0:	e022      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b0a      	cmp	r3, #10
 80028b6:	d108      	bne.n	80028ca <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028be:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	f043 0320 	orr.w	r3, r3, #32
 80028c6:	75fb      	strb	r3, [r7, #23]
 80028c8:	e016      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b0b      	cmp	r3, #11
 80028ce:	d108      	bne.n	80028e2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	f023 0320 	bic.w	r3, r3, #32
 80028de:	75fb      	strb	r3, [r7, #23]
 80028e0:	e00a      	b.n	80028f8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d107      	bne.n	80028f8 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f001 fad1 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 fc87 	bl	8004214 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002906:	214e      	movs	r1, #78	; 0x4e
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f001 fb4f 	bl	8003fac <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	4619      	mov	r1, r3
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f001 fb4a 	bl	8003fac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002918:	7d7b      	ldrb	r3, [r7, #21]
 800291a:	4619      	mov	r1, r3
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f001 fb45 	bl	8003fac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	4619      	mov	r1, r3
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f001 fb40 	bl	8003fac <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 fab7 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 fc6d 	bl	8004214 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800293a:	2148      	movs	r1, #72	; 0x48
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f001 fb35 	bl	8003fac <OneWire_WriteByte>

	return 1;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b28      	cmp	r3, #40	; 0x28
 800295a:	d101      	bne.n	8002960 <DS18B20_Is+0x14>
		return 1;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <DS18B20_Is+0x16>

	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f7ff ffe7 	bl	800294c <DS18B20_Is>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002984:	2300      	movs	r3, #0
 8002986:	e049      	b.n	8002a1c <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f001 fa89 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800298e:	6839      	ldr	r1, [r7, #0]
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f001 fc3f 	bl	8004214 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002996:	21be      	movs	r1, #190	; 0xbe
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 fb07 	bl	8003fac <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 fb21 	bl	8003fe6 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fb1e 	bl	8003fe6 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f001 fb1b 	bl	8003fe6 <OneWire_ReadByte>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f001 fb16 	bl	8003fe6 <OneWire_ReadByte>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 fb11 	bl	8003fe6 <OneWire_ReadByte>
 80029c4:	4603      	mov	r3, r0
 80029c6:	737b      	strb	r3, [r7, #13]

	th = 125;
 80029c8:	237d      	movs	r3, #125	; 0x7d
 80029ca:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80029cc:	23c9      	movs	r3, #201	; 0xc9
 80029ce:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fa65 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 fc1b 	bl	8004214 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80029de:	214e      	movs	r1, #78	; 0x4e
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f001 fae3 	bl	8003fac <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 fade 	bl	8003fac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f001 fad9 	bl	8003fac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80029fa:	7b7b      	ldrb	r3, [r7, #13]
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 fad4 	bl	8003fac <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f001 fa4b 	bl	8003ea0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002a0a:	6839      	ldr	r1, [r7, #0]
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 fc01 	bl	8004214 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002a12:	2148      	movs	r1, #72	; 0x48
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f001 fac9 	bl	8003fac <OneWire_WriteByte>

	return 1;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <gpioInit>:
#endif



bool gpioInit(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
  bool ret = true;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <gpioInit+0xa0>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <gpioInit+0xa0>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <gpioInit+0xa0>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <gpioInit+0xa0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <gpioInit+0xa0>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <gpioInit+0xa0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e01e      	b.n	8002aaa <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	b2d8      	uxtb	r0, r3
 8002a70:	4915      	ldr	r1, [pc, #84]	; (8002ac8 <gpioInit+0xa4>)
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3308      	adds	r3, #8
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	f000 f826 	bl	8002ad4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	b2d8      	uxtb	r0, r3
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <gpioInit+0xa4>)
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	330b      	adds	r3, #11
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f000 f88a 	bl	8002bb8 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	dddd      	ble.n	8002a6c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002ab0:	4906      	ldr	r1, [pc, #24]	; (8002acc <gpioInit+0xa8>)
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <gpioInit+0xac>)
 8002ab4:	f7ff fd1e 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	0800fd34 	.word	0x0800fd34
 8002acc:	08002cd1 	.word	0x08002cd1
 8002ad0:	0800fab4 	.word	0x0800fab4

08002ad4 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	460a      	mov	r2, r1
 8002ade:	71fb      	strb	r3, [r7, #7]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	d901      	bls.n	8002b02 <gpioPinMode+0x2e>
  {
    return false;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e054      	b.n	8002bac <gpioPinMode+0xd8>
  }

  switch(mode)
 8002b02:	79bb      	ldrb	r3, [r7, #6]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d838      	bhi.n	8002b7a <gpioPinMode+0xa6>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <gpioPinMode+0x3c>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	08002b37 	.word	0x08002b37
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b4b 	.word	0x08002b4b
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002b5f 	.word	0x08002b5f
 8002b28:	08002b69 	.word	0x08002b69
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
      break;
 8002b34:	e021      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	613b      	str	r3, [r7, #16]
      break;
 8002b3e:	e01c      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b44:	2302      	movs	r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
      break;
 8002b48:	e017      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
      break;
 8002b52:	e012      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
      break;
 8002b5c:	e00d      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b62:	2302      	movs	r3, #2
 8002b64:	613b      	str	r3, [r7, #16]
      break;
 8002b66:	e008      	b.n	8002b7a <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
      break;
 8002b78:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002b7a:	79fa      	ldrb	r2, [r7, #7]
 8002b7c:	490d      	ldr	r1, [pc, #52]	; (8002bb4 <gpioPinMode+0xe0>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3304      	adds	r3, #4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002b8e:	79fa      	ldrb	r2, [r7, #7]
 8002b90:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <gpioPinMode+0xe0>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f107 0208 	add.w	r2, r7, #8
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 f9e5 	bl	8007f74 <HAL_GPIO_Init>

  return ret;
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	0800fd34 	.word	0x0800fd34

08002bb8 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460a      	mov	r2, r1
 8002bc2:	71fb      	strb	r3, [r7, #7]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d842      	bhi.n	8002c54 <gpioPinWrite+0x9c>
  {
    return;
  }

  if (value)
 8002bce:	79bb      	ldrb	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01f      	beq.n	8002c14 <gpioPinWrite+0x5c>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	4921      	ldr	r1, [pc, #132]	; (8002c5c <gpioPinWrite+0xa4>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	79fa      	ldrb	r2, [r7, #7]
 8002be6:	491d      	ldr	r1, [pc, #116]	; (8002c5c <gpioPinWrite+0xa4>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29c      	uxth	r4, r3
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	4918      	ldr	r1, [pc, #96]	; (8002c5c <gpioPinWrite+0xa4>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3309      	adds	r3, #9
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	f005 fc2d 	bl	800846c <HAL_GPIO_WritePin>
 8002c12:	e020      	b.n	8002c56 <gpioPinWrite+0x9e>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	4911      	ldr	r1, [pc, #68]	; (8002c5c <gpioPinWrite+0xa4>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	490d      	ldr	r1, [pc, #52]	; (8002c5c <gpioPinWrite+0xa4>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3304      	adds	r3, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29c      	uxth	r4, r3
 8002c38:	79fa      	ldrb	r2, [r7, #7]
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <gpioPinWrite+0xa4>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	330a      	adds	r3, #10
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	f005 fc0d 	bl	800846c <HAL_GPIO_WritePin>
 8002c52:	e000      	b.n	8002c56 <gpioPinWrite+0x9e>
    return;
 8002c54:	bf00      	nop
  }
}
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	0800fd34 	.word	0x0800fd34

08002c60 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d901      	bls.n	8002c78 <gpioPinRead+0x18>
  {
    return false;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e024      	b.n	8002cc2 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	4914      	ldr	r1, [pc, #80]	; (8002ccc <gpioPinRead+0x6c>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	4910      	ldr	r1, [pc, #64]	; (8002ccc <gpioPinRead+0x6c>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3304      	adds	r3, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f005 fbcd 	bl	800843c <HAL_GPIO_ReadPin>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	4908      	ldr	r1, [pc, #32]	; (8002ccc <gpioPinRead+0x6c>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3309      	adds	r3, #9
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4298      	cmp	r0, r3
 8002cba:	d101      	bne.n	8002cc0 <gpioPinRead+0x60>
  {
    ret = true;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800fd34 	.word	0x0800fd34

08002cd0 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d128      	bne.n	8002d36 <cliGpio+0x66>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4947      	ldr	r1, [pc, #284]	; (8002e08 <cliGpio+0x138>)
 8002cea:	2000      	movs	r0, #0
 8002cec:	4798      	blx	r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8002cf4:	e018      	b.n	8002d28 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e00c      	b.n	8002d16 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ffad 	bl	8002c60 <gpioPinRead>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4840      	ldr	r0, [pc, #256]	; (8002e0c <cliGpio+0x13c>)
 8002d0c:	f7ff fae2 	bl	80022d4 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	3301      	adds	r3, #1
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	ddef      	ble.n	8002cfc <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8002d1c:	483c      	ldr	r0, [pc, #240]	; (8002e10 <cliGpio+0x140>)
 8002d1e:	f7ff fad9 	bl	80022d4 <cliPrintf>
      delay(100);
 8002d22:	2064      	movs	r0, #100	; 0x64
 8002d24:	f7fe fa66 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8002d28:	f7ff fbce 	bl	80024c8 <cliKeepLoop>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e1      	bne.n	8002cf6 <cliGpio+0x26>
    }
    ret = true;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <cliGpio+0xb6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4934      	ldr	r1, [pc, #208]	; (8002e14 <cliGpio+0x144>)
 8002d44:	2000      	movs	r0, #0
 8002d46:	4798      	blx	r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01b      	beq.n	8002d86 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2001      	movs	r0, #1
 8002d54:	4798      	blx	r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8002d5a:	e00d      	b.n	8002d78 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002d5c:	7bfc      	ldrb	r4, [r7, #15]
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff7d 	bl	8002c60 <gpioPinRead>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	482a      	ldr	r0, [pc, #168]	; (8002e18 <cliGpio+0x148>)
 8002d6e:	f7ff fab1 	bl	80022d4 <cliPrintf>
      delay(100);
 8002d72:	2064      	movs	r0, #100	; 0x64
 8002d74:	f7fe fa3e 	bl	80011f4 <delay>
    while(cliKeepLoop())
 8002d78:	f7ff fba6 	bl	80024c8 <cliKeepLoop>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ec      	bne.n	8002d5c <cliGpio+0x8c>
    }

    ret = true;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d126      	bne.n	8002ddc <cliGpio+0x10c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4922      	ldr	r1, [pc, #136]	; (8002e1c <cliGpio+0x14c>)
 8002d94:	2000      	movs	r0, #0
 8002d96:	4798      	blx	r3
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01e      	beq.n	8002ddc <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2001      	movs	r0, #1
 8002da4:	4798      	blx	r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2002      	movs	r0, #2
 8002db0:	4798      	blx	r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	7bbb      	ldrb	r3, [r7, #14]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fef6 	bl	8002bb8 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8002dcc:	7bbb      	ldrb	r3, [r7, #14]
 8002dce:	7b7a      	ldrb	r2, [r7, #13]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4813      	ldr	r0, [pc, #76]	; (8002e20 <cliGpio+0x150>)
 8002dd4:	f7ff fa7e 	bl	80022d4 <cliPrintf>
    ret = true;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <cliGpio+0x154>)
 8002dea:	f7ff fa73 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002dee:	210f      	movs	r1, #15
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <cliGpio+0x158>)
 8002df2:	f7ff fa6f 	bl	80022d4 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8002df6:	210f      	movs	r1, #15
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <cliGpio+0x15c>)
 8002dfa:	f7ff fa6b 	bl	80022d4 <cliPrintf>
  }
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	0800fabc 	.word	0x0800fabc
 8002e0c:	0800fac4 	.word	0x0800fac4
 8002e10:	0800fac8 	.word	0x0800fac8
 8002e14:	0800facc 	.word	0x0800facc
 8002e18:	0800fad4 	.word	0x0800fad4
 8002e1c:	0800fae8 	.word	0x0800fae8
 8002e20:	0800faf0 	.word	0x0800faf0
 8002e24:	0800fb04 	.word	0x0800fb04
 8002e28:	0800fb10 	.word	0x0800fb10
 8002e2c:	0800fb24 	.word	0x0800fb24

08002e30 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8002e34:	f7fe f9e9 	bl	800120a <millis>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <TransferDoneISR+0x40>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <TransferDoneISR+0x44>)
 8002e42:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8002e44:	f7fe f9e1 	bl	800120a <millis>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <TransferDoneISR+0x40>)
 8002e4c:	601a      	str	r2, [r3, #0]

  if (fps_time > 0)
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <TransferDoneISR+0x44>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8002e56:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <TransferDoneISR+0x44>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <TransferDoneISR+0x48>)
 8002e64:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <TransferDoneISR+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000284 	.word	0x20000284
 8002e74:	20000288 	.word	0x20000288
 8002e78:	2000028c 	.word	0x2000028c
 8002e7c:	20000282 	.word	0x20000282

08002e80 <lcdInit>:


bool lcdInit(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <lcdInit+0xa4>)
 8002e88:	2264      	movs	r2, #100	; 0x64
 8002e8a:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8002e8c:	f003 fa74 	bl	8006378 <st7735Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <lcdInit+0xa8>)
 8002e96:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8002e98:	4824      	ldr	r0, [pc, #144]	; (8002f2c <lcdInit+0xac>)
 8002e9a:	f003 fa79 	bl	8006390 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <lcdInit+0xac>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4823      	ldr	r0, [pc, #140]	; (8002f30 <lcdInit+0xb0>)
 8002ea4:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	e007      	b.n	8002ebc <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <lcdInit+0xb4>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ec2:	dbf3      	blt.n	8002eac <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8002ec4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8002ec8:	2100      	movs	r1, #0
 8002eca:	481a      	ldr	r0, [pc, #104]	; (8002f34 <lcdInit+0xb4>)
 8002ecc:	f00a fa25 	bl	800d31a <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <lcdInit+0xb8>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	035b      	lsls	r3, r3, #13
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <lcdInit+0xb4>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <lcdInit+0xbc>)
 8002ee4:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	22a0      	movs	r2, #160	; 0xa0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f000 fbe6 	bl	80036c2 <lcdDrawFillRect>
  lcdUpdateDraw();
 8002ef6:	f000 faad 	bl	8003454 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8002efa:	2064      	movs	r0, #100	; 0x64
 8002efc:	f000 f830 	bl	8002f60 <lcdSetBackLight>


  if (is_init != true)
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <lcdInit+0xa8>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f083 0301 	eor.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <lcdInit+0x92>
  {
    return false;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e004      	b.n	8002f1c <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8002f12:	490b      	ldr	r1, [pc, #44]	; (8002f40 <lcdInit+0xc0>)
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <lcdInit+0xc4>)
 8002f16:	f7ff faed 	bl	80024f4 <cliAdd>
#endif

  return true;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000001c 	.word	0x2000001c
 8002f28:	20000280 	.word	0x20000280
 8002f2c:	20000264 	.word	0x20000264
 8002f30:	08002e31 	.word	0x08002e31
 8002f34:	200002c0 	.word	0x200002c0
 8002f38:	20000281 	.word	0x20000281
 8002f3c:	20000290 	.word	0x20000290
 8002f40:	08003a69 	.word	0x08003a69
 8002f44:	0800fdf4 	.word	0x0800fdf4

08002f48 <lcdIsInit>:
{
  return draw_frame_time;
}

bool lcdIsInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return is_init;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <lcdIsInit+0x14>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000280 	.word	0x20000280

08002f60 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	bf28      	it	cs
 8002f70:	2364      	movcs	r3, #100	; 0x64
 8002f72:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <lcdSetBackLight+0x48>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d002      	beq.n	8002f84 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <lcdSetBackLight+0x48>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <lcdSetBackLight+0x48>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7ff fe12 	bl	8002bb8 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8002f94:	e003      	b.n	8002f9e <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8002f96:	2100      	movs	r1, #0
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff fe0d 	bl	8002bb8 <gpioPinWrite>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2000001c 	.word	0x2000001c

08002fac <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <lcdDrawPixel+0x14>)
 8002fae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002fb2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000290 	.word	0x20000290

08002fc4 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8002fc8:	f000 fa70 	bl	80034ac <lcdGetFrameBuffer>
 8002fcc:	f500 421f 	add.w	r2, r0, #40704	; 0x9f00
 8002fd0:	b2a1      	uxth	r1, r4
 8002fd2:	32fe      	adds	r2, #254	; 0xfe
 8002fd4:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8002fd6:	f823 1f02 	strh.w	r1, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d1fb      	bne.n	8002fd6 <lcdClearBuffer+0x12>
  }
}
 8002fde:	bd10      	pop	{r4, pc}

08002fe0 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8002fe0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002fe4:	4616      	mov	r6, r2
 8002fe6:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
 8002fe8:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
 8002fec:	0052      	lsls	r2, r2, #1
  int32_t x     = 0;

  while (x < r)
 8002fee:	2e00      	cmp	r6, #0
  int32_t ddF_y = -2 * r;
 8002ff0:	9200      	str	r2, [sp, #0]
{
 8002ff2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
  while (x < r)
 8002ff6:	f340 8090 	ble.w	800311a <lcdDrawCircleHelper+0x13a>
 8002ffa:	f003 0204 	and.w	r2, r3, #4
 8002ffe:	9201      	str	r2, [sp, #4]
 8003000:	f003 0202 	and.w	r2, r3, #2
 8003004:	9202      	str	r2, [sp, #8]
 8003006:	f003 0208 	and.w	r2, r3, #8
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	f1c6 0401 	rsb	r4, r6, #1
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003012:	fa1f f880 	uxth.w	r8, r0
 8003016:	fa1f f981 	uxth.w	r9, r1
 800301a:	9203      	str	r2, [sp, #12]
 800301c:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 800301e:	2500      	movs	r5, #0
 8003020:	e00a      	b.n	8003038 <lcdDrawCircleHelper+0x58>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8003022:	9b02      	ldr	r3, [sp, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d12e      	bne.n	8003086 <lcdDrawCircleHelper+0xa6>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8003028:	9b03      	ldr	r3, [sp, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d144      	bne.n	80030b8 <lcdDrawCircleHelper+0xd8>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 800302e:	9b04      	ldr	r3, [sp, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15a      	bne.n	80030ea <lcdDrawCircleHelper+0x10a>
  while (x < r)
 8003034:	42ae      	cmp	r6, r5
 8003036:	dd70      	ble.n	800311a <lcdDrawCircleHelper+0x13a>
    if (f >= 0)
 8003038:	2c00      	cmp	r4, #0
 800303a:	db04      	blt.n	8003046 <lcdDrawCircleHelper+0x66>
      ddF_y += 2;
 800303c:	9b00      	ldr	r3, [sp, #0]
 800303e:	3302      	adds	r3, #2
 8003040:	9300      	str	r3, [sp, #0]
      f     += ddF_y;
 8003042:	441c      	add	r4, r3
      r--;
 8003044:	3e01      	subs	r6, #1
    x++;
 8003046:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8003048:	9b01      	ldr	r3, [sp, #4]
    f     += ddF_x;
 800304a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800304e:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0e6      	beq.n	8003022 <lcdDrawCircleHelper+0x42>
 8003054:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 + r, color);
 8003056:	fa1f fb86 	uxth.w	fp, r6
 800305a:	eb08 0003 	add.w	r0, r8, r3
 800305e:	eb09 010b 	add.w	r1, r9, fp
 8003062:	b280      	uxth	r0, r0
 8003064:	b289      	uxth	r1, r1
 8003066:	4652      	mov	r2, sl
 8003068:	9305      	str	r3, [sp, #20]
 800306a:	f7ff ff9f 	bl	8002fac <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 800306e:	9b05      	ldr	r3, [sp, #20]
 8003070:	eb08 000b 	add.w	r0, r8, fp
 8003074:	eb09 0103 	add.w	r1, r9, r3
 8003078:	b289      	uxth	r1, r1
 800307a:	b280      	uxth	r0, r0
 800307c:	f7ff ff96 	bl	8002fac <lcdDrawPixel>
    if (cornername & 0x2)
 8003080:	9b02      	ldr	r3, [sp, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0d0      	beq.n	8003028 <lcdDrawCircleHelper+0x48>
 8003086:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 + x, y0 - r, color);
 8003088:	fa1f fb86 	uxth.w	fp, r6
 800308c:	eb08 0003 	add.w	r0, r8, r3
 8003090:	eba9 010b 	sub.w	r1, r9, fp
 8003094:	b280      	uxth	r0, r0
 8003096:	b289      	uxth	r1, r1
 8003098:	4652      	mov	r2, sl
 800309a:	9305      	str	r3, [sp, #20]
 800309c:	f7ff ff86 	bl	8002fac <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 80030a0:	9b05      	ldr	r3, [sp, #20]
 80030a2:	eb08 000b 	add.w	r0, r8, fp
 80030a6:	eba9 0103 	sub.w	r1, r9, r3
 80030aa:	b289      	uxth	r1, r1
 80030ac:	b280      	uxth	r0, r0
 80030ae:	f7ff ff7d 	bl	8002fac <lcdDrawPixel>
    if (cornername & 0x8)
 80030b2:	9b03      	ldr	r3, [sp, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ba      	beq.n	800302e <lcdDrawCircleHelper+0x4e>
      lcdDrawPixel(x0 - r, y0 + x, color);
 80030b8:	b2b3      	uxth	r3, r6
 80030ba:	fa1f fb85 	uxth.w	fp, r5
 80030be:	eba8 0003 	sub.w	r0, r8, r3
 80030c2:	eb09 010b 	add.w	r1, r9, fp
 80030c6:	b280      	uxth	r0, r0
 80030c8:	b289      	uxth	r1, r1
 80030ca:	4652      	mov	r2, sl
 80030cc:	9305      	str	r3, [sp, #20]
 80030ce:	f7ff ff6d 	bl	8002fac <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 80030d2:	9b05      	ldr	r3, [sp, #20]
 80030d4:	eba8 000b 	sub.w	r0, r8, fp
 80030d8:	eb03 0109 	add.w	r1, r3, r9
 80030dc:	b289      	uxth	r1, r1
 80030de:	b280      	uxth	r0, r0
 80030e0:	f7ff ff64 	bl	8002fac <lcdDrawPixel>
    if (cornername & 0x1)
 80030e4:	9b04      	ldr	r3, [sp, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0a4      	beq.n	8003034 <lcdDrawCircleHelper+0x54>
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 80030ea:	b2b3      	uxth	r3, r6
 80030ec:	fa1f fb85 	uxth.w	fp, r5
 80030f0:	eba8 0003 	sub.w	r0, r8, r3
 80030f4:	eba9 010b 	sub.w	r1, r9, fp
 80030f8:	b280      	uxth	r0, r0
 80030fa:	b289      	uxth	r1, r1
 80030fc:	4652      	mov	r2, sl
 80030fe:	9305      	str	r3, [sp, #20]
 8003100:	f7ff ff54 	bl	8002fac <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8003104:	9b05      	ldr	r3, [sp, #20]
 8003106:	eba8 000b 	sub.w	r0, r8, fp
 800310a:	eba9 0103 	sub.w	r1, r9, r3
 800310e:	b289      	uxth	r1, r1
 8003110:	b280      	uxth	r0, r0
 8003112:	f7ff ff4b 	bl	8002fac <lcdDrawPixel>
  while (x < r)
 8003116:	42ae      	cmp	r6, r5
 8003118:	dc8e      	bgt.n	8003038 <lcdDrawCircleHelper+0x58>
    }
  }
}
 800311a:	b006      	add	sp, #24
 800311c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003120 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003120:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003124:	b08a      	sub	sp, #40	; 0x28
 8003126:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800312a:	9206      	str	r2, [sp, #24]
 800312c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
{
 8003130:	9604      	str	r6, [sp, #16]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003132:	fa1f f984 	uxth.w	r9, r4
{
 8003136:	4606      	mov	r6, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003138:	b280      	uxth	r0, r0
{
 800313a:	469c      	mov	ip, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800313c:	f8bd 8010 	ldrh.w	r8, [sp, #16]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003140:	f8cd c01c 	str.w	ip, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8003144:	eb00 0a09 	add.w	sl, r0, r9
 8003148:	eba5 0b49 	sub.w	fp, r5, r9, lsl #1
 800314c:	fa0f fa8a 	sxth.w	sl, sl
 8003150:	fa0f fb8b 	sxth.w	fp, fp
 8003154:	9103      	str	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003156:	f8bd e01c 	ldrh.w	lr, [sp, #28]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800315a:	9008      	str	r0, [sp, #32]
 800315c:	465a      	mov	r2, fp
 800315e:	4650      	mov	r0, sl
 8003160:	4643      	mov	r3, r8
 8003162:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003166:	f8cd e014 	str.w	lr, [sp, #20]
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 800316a:	9509      	str	r5, [sp, #36]	; 0x24
 800316c:	f000 fa84 	bl	8003678 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8003170:	9905      	ldr	r1, [sp, #20]
 8003172:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8003176:	3901      	subs	r1, #1
 8003178:	4429      	add	r1, r5
 800317a:	465a      	mov	r2, fp
 800317c:	4650      	mov	r0, sl
 800317e:	4643      	mov	r3, r8
 8003180:	b209      	sxth	r1, r1
 8003182:	f000 fa79 	bl	8003678 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8003186:	9905      	ldr	r1, [sp, #20]
 8003188:	444d      	add	r5, r9
 800318a:	eba1 0949 	sub.w	r9, r1, r9, lsl #1
 800318e:	b22d      	sxth	r5, r5
 8003190:	fa0f f989 	sxth.w	r9, r9
 8003194:	464a      	mov	r2, r9
 8003196:	4629      	mov	r1, r5
 8003198:	4643      	mov	r3, r8
 800319a:	b230      	sxth	r0, r6
 800319c:	f000 fa47 	bl	800362e <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80031a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a2:	9a08      	ldr	r2, [sp, #32]
 80031a4:	1e58      	subs	r0, r3, #1
 80031a6:	4629      	mov	r1, r5
 80031a8:	4410      	add	r0, r2

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 80031aa:	4635      	mov	r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80031ac:	464a      	mov	r2, r9
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 80031ae:	46b1      	mov	r9, r6
 80031b0:	9e03      	ldr	r6, [sp, #12]
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80031b2:	4643      	mov	r3, r8
 80031b4:	b200      	sxth	r0, r0
 80031b6:	f000 fa3a 	bl	800362e <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 80031ba:	eb04 0806 	add.w	r8, r4, r6
 80031be:	4425      	add	r5, r4
 80031c0:	9e04      	ldr	r6, [sp, #16]
 80031c2:	9600      	str	r6, [sp, #0]
 80031c4:	4628      	mov	r0, r5
 80031c6:	4641      	mov	r1, r8
 80031c8:	4622      	mov	r2, r4
 80031ca:	2301      	movs	r3, #1
 80031cc:	f7ff ff08 	bl	8002fe0 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 80031d0:	9a06      	ldr	r2, [sp, #24]
 80031d2:	9600      	str	r6, [sp, #0]
 80031d4:	444a      	add	r2, r9
 80031d6:	eba2 0904 	sub.w	r9, r2, r4
 80031da:	f109 39ff 	add.w	r9, r9, #4294967295
 80031de:	4641      	mov	r1, r8
 80031e0:	4648      	mov	r0, r9
 80031e2:	4622      	mov	r2, r4
 80031e4:	2302      	movs	r3, #2
 80031e6:	9604      	str	r6, [sp, #16]
 80031e8:	f7ff fefa 	bl	8002fe0 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80031ec:	9e03      	ldr	r6, [sp, #12]
 80031ee:	9b07      	ldr	r3, [sp, #28]
 80031f0:	4433      	add	r3, r6
 80031f2:	eba3 0804 	sub.w	r8, r3, r4
 80031f6:	9e04      	ldr	r6, [sp, #16]
 80031f8:	9600      	str	r6, [sp, #0]
 80031fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80031fe:	4648      	mov	r0, r9
 8003200:	4641      	mov	r1, r8
 8003202:	4622      	mov	r2, r4
 8003204:	2304      	movs	r3, #4
 8003206:	f7ff feeb 	bl	8002fe0 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 800320a:	4641      	mov	r1, r8
 800320c:	4628      	mov	r0, r5
 800320e:	4622      	mov	r2, r4
 8003210:	2308      	movs	r3, #8
 8003212:	9612      	str	r6, [sp, #72]	; 0x48
}
 8003214:	b00a      	add	sp, #40	; 0x28
 8003216:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 800321a:	f7ff bee1 	b.w	8002fe0 <lcdDrawCircleHelper>

0800321e <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 800321e:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003222:	4616      	mov	r6, r2
 8003224:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8003226:	f1c6 0a00 	rsb	sl, r6, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 800322a:	2e00      	cmp	r6, #0
{
 800322c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 800322e:	ebaa 0a06 	sub.w	sl, sl, r6
  while (y < r)
 8003232:	dd73      	ble.n	800331c <lcdDrawFillCircleHelper+0xfe>
 8003234:	3201      	adds	r2, #1
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8003236:	b292      	uxth	r2, r2
 8003238:	b280      	uxth	r0, r0
 800323a:	b289      	uxth	r1, r1
 800323c:	9203      	str	r2, [sp, #12]
 800323e:	f003 0201 	and.w	r2, r3, #1
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	f1c6 0401 	rsb	r4, r6, #1
 800324a:	9001      	str	r0, [sp, #4]
 800324c:	9102      	str	r1, [sp, #8]
 800324e:	9205      	str	r2, [sp, #20]
 8003250:	9304      	str	r3, [sp, #16]
  int32_t y     = 0;
 8003252:	2500      	movs	r5, #0
 8003254:	e004      	b.n	8003260 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8003256:	9b04      	ldr	r3, [sp, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d137      	bne.n	80032cc <lcdDrawFillCircleHelper+0xae>
  while (y < r)
 800325c:	42ae      	cmp	r6, r5
 800325e:	dd5d      	ble.n	800331c <lcdDrawFillCircleHelper+0xfe>
    if (f >= 0)
 8003260:	2c00      	cmp	r4, #0
    y++;
 8003262:	f105 0501 	add.w	r5, r5, #1
    if (f >= 0)
 8003266:	db03      	blt.n	8003270 <lcdDrawFillCircleHelper+0x52>
      ddF_y += 2;
 8003268:	f10a 0a02 	add.w	sl, sl, #2
      f     += ddF_y;
 800326c:	4454      	add	r4, sl
      r--;
 800326e:	3e01      	subs	r6, #1
    if (cornername & 0x1)
 8003270:	9b05      	ldr	r3, [sp, #20]
    f     += ddF_x;
 8003272:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003276:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ec      	beq.n	8003256 <lcdDrawFillCircleHelper+0x38>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 800327c:	9901      	ldr	r1, [sp, #4]
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8003284:	fa1f f986 	uxth.w	r9, r6
 8003288:	eba1 0009 	sub.w	r0, r1, r9
 800328c:	9902      	ldr	r1, [sp, #8]
 800328e:	fa1f f885 	uxth.w	r8, r5
 8003292:	fa1f fb8c 	uxth.w	fp, ip
 8003296:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 800329a:	4441      	add	r1, r8
 800329c:	b212      	sxth	r2, r2
 800329e:	b200      	sxth	r0, r0
 80032a0:	b209      	sxth	r1, r1
 80032a2:	465b      	mov	r3, fp
 80032a4:	f000 f9e8 	bl	8003678 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 80032a8:	9a02      	ldr	r2, [sp, #8]
 80032aa:	9b03      	ldr	r3, [sp, #12]
 80032ac:	eb09 0102 	add.w	r1, r9, r2
 80032b0:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 80032b4:	9b01      	ldr	r3, [sp, #4]
 80032b6:	eba3 0008 	sub.w	r0, r3, r8
 80032ba:	b209      	sxth	r1, r1
 80032bc:	465b      	mov	r3, fp
 80032be:	b212      	sxth	r2, r2
 80032c0:	b200      	sxth	r0, r0
 80032c2:	f000 f9d9 	bl	8003678 <lcdDrawHLine>
    if (cornername & 0x2)
 80032c6:	9b04      	ldr	r3, [sp, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0c7      	beq.n	800325c <lcdDrawFillCircleHelper+0x3e>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 80032cc:	9901      	ldr	r1, [sp, #4]
 80032ce:	9b03      	ldr	r3, [sp, #12]
 80032d0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80032d4:	fa1f f986 	uxth.w	r9, r6
 80032d8:	eba1 0009 	sub.w	r0, r1, r9
 80032dc:	9902      	ldr	r1, [sp, #8]
 80032de:	fa1f f885 	uxth.w	r8, r5
 80032e2:	fa1f fb8c 	uxth.w	fp, ip
 80032e6:	eb03 0249 	add.w	r2, r3, r9, lsl #1
 80032ea:	eba1 0108 	sub.w	r1, r1, r8
 80032ee:	b212      	sxth	r2, r2
 80032f0:	b200      	sxth	r0, r0
 80032f2:	b209      	sxth	r1, r1
 80032f4:	465b      	mov	r3, fp
 80032f6:	f000 f9bf 	bl	8003678 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 80032fa:	9a02      	ldr	r2, [sp, #8]
 80032fc:	9b03      	ldr	r3, [sp, #12]
 80032fe:	eba2 0109 	sub.w	r1, r2, r9
 8003302:	eb03 0248 	add.w	r2, r3, r8, lsl #1
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	eba3 0008 	sub.w	r0, r3, r8
 800330c:	b209      	sxth	r1, r1
 800330e:	465b      	mov	r3, fp
 8003310:	b212      	sxth	r2, r2
 8003312:	b200      	sxth	r0, r0
 8003314:	f000 f9b0 	bl	8003678 <lcdDrawHLine>
  while (y < r)
 8003318:	42ae      	cmp	r6, r5
 800331a:	dca1      	bgt.n	8003260 <lcdDrawFillCircleHelper+0x42>
    }
  }
}
 800331c:	b006      	add	sp, #24
 800331e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003322 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8003322:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003326:	b083      	sub	sp, #12
 8003328:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800332c:	4689      	mov	r9, r1
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 800332e:	b2a1      	uxth	r1, r4
{
 8003330:	461e      	mov	r6, r3
 8003332:	4615      	mov	r5, r2
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003334:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003338:	fa1f f28a 	uxth.w	r2, sl
 800333c:	4449      	add	r1, r9
 800333e:	9200      	str	r2, [sp, #0]
{
 8003340:	4680      	mov	r8, r0
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8003342:	b22a      	sxth	r2, r5
 8003344:	b21b      	sxth	r3, r3
 8003346:	b209      	sxth	r1, r1
 8003348:	b200      	sxth	r0, r0
 800334a:	f000 f9ba 	bl	80036c2 <lcdDrawFillRect>

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 800334e:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 8003352:	eb09 0106 	add.w	r1, r9, r6
 8003356:	3d01      	subs	r5, #1
 8003358:	44a0      	add	r8, r4
 800335a:	1b09      	subs	r1, r1, r4
 800335c:	4640      	mov	r0, r8
 800335e:	4622      	mov	r2, r4
 8003360:	9500      	str	r5, [sp, #0]
 8003362:	3901      	subs	r1, #1
 8003364:	f8cd a004 	str.w	sl, [sp, #4]
 8003368:	2301      	movs	r3, #1
 800336a:	f7ff ff58 	bl	800321e <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 800336e:	4640      	mov	r0, r8
 8003370:	eb09 0104 	add.w	r1, r9, r4
 8003374:	4622      	mov	r2, r4
 8003376:	2302      	movs	r3, #2
 8003378:	950a      	str	r5, [sp, #40]	; 0x28
 800337a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
}
 800337e:	b003      	add	sp, #12
 8003380:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8003384:	f7ff bf4b 	b.w	800321e <lcdDrawFillCircleHelper>

08003388 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return fps_count;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <lcdGetFps+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	2000028c 	.word	0x2000028c

080033a0 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return fps_time;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <lcdGetFpsTime+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000288 	.word	0x20000288

080033b8 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <lcdDrawAvailable+0x28>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f083 0301 	eor.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	20000282 	.word	0x20000282

080033e4 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80033e4:	b598      	push	{r3, r4, r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  if (is_init != true)
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <lcdRequestDraw+0x5c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <lcdRequestDraw+0x16>
  {
    return false;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e020      	b.n	800343c <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <lcdRequestDraw+0x60>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <lcdRequestDraw+0x22>
  {
    return false;
 8003402:	2300      	movs	r3, #0
 8003404:	e01a      	b.n	800343c <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <lcdRequestDraw+0x64>)
 8003408:	689c      	ldr	r4, [r3, #8]
 800340a:	237f      	movs	r3, #127	; 0x7f
 800340c:	229f      	movs	r2, #159	; 0x9f
 800340e:	2100      	movs	r1, #0
 8003410:	2000      	movs	r0, #0
 8003412:	47a0      	blx	r4

  lcd_request_draw = true;
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <lcdRequestDraw+0x60>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <lcdRequestDraw+0x64>)
 800341c:	699c      	ldr	r4, [r3, #24]
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <lcdRequestDraw+0x68>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	035b      	lsls	r3, r3, #13
 800342c:	4a08      	ldr	r2, [pc, #32]	; (8003450 <lcdRequestDraw+0x6c>)
 800342e:	4413      	add	r3, r2
 8003430:	2200      	movs	r2, #0
 8003432:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8003436:	4618      	mov	r0, r3
 8003438:	47a0      	blx	r4

  return true;
 800343a:	2301      	movs	r3, #1
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd98      	pop	{r3, r4, r7, pc}
 8003440:	20000280 	.word	0x20000280
 8003444:	20000282 	.word	0x20000282
 8003448:	20000264 	.word	0x20000264
 800344c:	20000281 	.word	0x20000281
 8003450:	200002c0 	.word	0x200002c0

08003454 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <lcdUpdateDraw+0x54>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d118      	bne.n	800349a <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8003468:	f7ff ffbc 	bl	80033e4 <lcdRequestDraw>

  pre_time = millis();
 800346c:	f7fd fecd 	bl	800120a <millis>
 8003470:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8003472:	e009      	b.n	8003488 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8003474:	2001      	movs	r0, #1
 8003476:	f7fd febd 	bl	80011f4 <delay>
    if (millis()-pre_time >= 100)
 800347a:	f7fd fec6 	bl	800120a <millis>
 800347e:	4602      	mov	r2, r0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b63      	cmp	r3, #99	; 0x63
 8003486:	d80a      	bhi.n	800349e <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8003488:	f7ff ff96 	bl	80033b8 <lcdDrawAvailable>
 800348c:	4603      	mov	r3, r0
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ed      	bne.n	8003474 <lcdUpdateDraw+0x20>
 8003498:	e002      	b.n	80034a0 <lcdUpdateDraw+0x4c>
    return;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <lcdUpdateDraw+0x4c>
    {
      break;
 800349e:	bf00      	nop
    }
  }
}
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000280 	.word	0x20000280

080034ac <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <lcdGetFrameBuffer+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000290 	.word	0x20000290

080034c4 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4604      	mov	r4, r0
 80034cc:	4608      	mov	r0, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	80fb      	strh	r3, [r7, #6]
 80034d6:	4603      	mov	r3, r0
 80034d8:	80bb      	strh	r3, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]
 80034de:	4613      	mov	r3, r2
 80034e0:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80034e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80034e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80034f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80034f4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80034f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fc:	1acb      	subs	r3, r1, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bfb8      	it	lt
 8003502:	425b      	neglt	r3, r3
 8003504:	429a      	cmp	r2, r3
 8003506:	bfcc      	ite	gt
 8003508:	2301      	movgt	r3, #1
 800350a:	2300      	movle	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8003510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da01      	bge.n	800351c <lcdDrawLine+0x58>
 8003518:	2300      	movs	r3, #0
 800351a:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 800351c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	da01      	bge.n	8003528 <lcdDrawLine+0x64>
 8003524:	2300      	movs	r3, #0
 8003526:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8003528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da01      	bge.n	8003534 <lcdDrawLine+0x70>
 8003530:	2300      	movs	r3, #0
 8003532:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8003534:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da01      	bge.n	8003540 <lcdDrawLine+0x7c>
 800353c:	2300      	movs	r3, #0
 800353e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003540:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	833b      	strh	r3, [r7, #24]
 800354c:	88bb      	ldrh	r3, [r7, #4]
 800354e:	80fb      	strh	r3, [r7, #6]
 8003550:	8b3b      	ldrh	r3, [r7, #24]
 8003552:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	82fb      	strh	r3, [r7, #22]
 8003558:	883b      	ldrh	r3, [r7, #0]
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	8afb      	ldrh	r3, [r7, #22]
 800355e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003560:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003568:	429a      	cmp	r2, r3
 800356a:	dd0b      	ble.n	8003584 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	82bb      	strh	r3, [r7, #20]
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	80fb      	strh	r3, [r7, #6]
 8003574:	8abb      	ldrh	r3, [r7, #20]
 8003576:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003578:	88bb      	ldrh	r3, [r7, #4]
 800357a:	827b      	strh	r3, [r7, #18]
 800357c:	883b      	ldrh	r3, [r7, #0]
 800357e:	80bb      	strh	r3, [r7, #4]
 8003580:	8a7b      	ldrh	r3, [r7, #18]
 8003582:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800358e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003592:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bfb8      	it	lt
 800359c:	425b      	neglt	r3, r3
 800359e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80035a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80035a4:	0fda      	lsrs	r2, r3, #31
 80035a6:	4413      	add	r3, r2
 80035a8:	105b      	asrs	r3, r3, #1
 80035aa:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 80035ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80035b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	da02      	bge.n	80035be <lcdDrawLine+0xfa>
  {
    ystep = 1;
 80035b8:	2301      	movs	r3, #1
 80035ba:	83bb      	strh	r3, [r7, #28]
 80035bc:	e02d      	b.n	800361a <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 80035be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 80035c4:	e029      	b.n	800361a <lcdDrawLine+0x156>
  {
    if (steep)
 80035c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 80035ce:	88bb      	ldrh	r3, [r7, #4]
 80035d0:	88f9      	ldrh	r1, [r7, #6]
 80035d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fce9 	bl	8002fac <lcdDrawPixel>
 80035da:	e005      	b.n	80035e8 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	88b9      	ldrh	r1, [r7, #4]
 80035e0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fce2 	bl	8002fac <lcdDrawPixel>
    }
    err -= dy;
 80035e8:	8bfa      	ldrh	r2, [r7, #30]
 80035ea:	89fb      	ldrh	r3, [r7, #14]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80035f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da09      	bge.n	800360e <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80035fa:	88ba      	ldrh	r2, [r7, #4]
 80035fc:	8bbb      	ldrh	r3, [r7, #28]
 80035fe:	4413      	add	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8003604:	8bfa      	ldrh	r2, [r7, #30]
 8003606:	8a3b      	ldrh	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	b29b      	uxth	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	80fb      	strh	r3, [r7, #6]
 800361a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800361e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003622:	429a      	cmp	r2, r3
 8003624:	ddcf      	ble.n	80035c6 <lcdDrawLine+0x102>
    }
  }
}
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}

0800362e <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800362e:	b590      	push	{r4, r7, lr}
 8003630:	b085      	sub	sp, #20
 8003632:	af02      	add	r7, sp, #8
 8003634:	4604      	mov	r4, r0
 8003636:	4608      	mov	r0, r1
 8003638:	4611      	mov	r1, r2
 800363a:	461a      	mov	r2, r3
 800363c:	4623      	mov	r3, r4
 800363e:	80fb      	strh	r3, [r7, #6]
 8003640:	4603      	mov	r3, r0
 8003642:	80bb      	strh	r3, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 800364c:	88ba      	ldrh	r2, [r7, #4]
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	4413      	add	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29b      	uxth	r3, r3
 8003658:	b21c      	sxth	r4, r3
 800365a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800365e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003662:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003666:	883b      	ldrh	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4623      	mov	r3, r4
 800366c:	f7ff ff2a 	bl	80034c4 <lcdDrawLine>
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b085      	sub	sp, #20
 800367c:	af02      	add	r7, sp, #8
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	461a      	mov	r2, r3
 8003686:	4623      	mov	r3, r4
 8003688:	80fb      	strh	r3, [r7, #6]
 800368a:	4603      	mov	r3, r0
 800368c:	80bb      	strh	r3, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	807b      	strh	r3, [r7, #2]
 8003692:	4613      	mov	r3, r2
 8003694:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4413      	add	r3, r2
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80036a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036ac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80036b0:	883b      	ldrh	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7ff ff05 	bl	80034c4 <lcdDrawLine>
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4604      	mov	r4, r0
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	80fb      	strh	r3, [r7, #6]
 80036d4:	4603      	mov	r3, r0
 80036d6:	80bb      	strh	r3, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	81fb      	strh	r3, [r7, #14]
 80036e4:	e00e      	b.n	8003704 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 80036e6:	8c3b      	ldrh	r3, [r7, #32]
 80036e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80036ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036f0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80036f4:	f7ff ff9b 	bl	800362e <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 80036f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	81fb      	strh	r3, [r7, #14]
 8003704:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003708:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800370c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003710:	440b      	add	r3, r1
 8003712:	429a      	cmp	r2, r3
 8003714:	dbe7      	blt.n	80036e6 <lcdDrawFillRect+0x24>
  }
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
	...

08003720 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8003720:	b408      	push	{r3}
 8003722:	b590      	push	{r4, r7, lr}
 8003724:	b0d8      	sub	sp, #352	; 0x160
 8003726:	af02      	add	r7, sp, #8
 8003728:	f107 030c 	add.w	r3, r7, #12
 800372c:	6018      	str	r0, [r3, #0]
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	6019      	str	r1, [r3, #0]
 8003734:	1dbb      	adds	r3, r7, #6
 8003736:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8003738:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800373c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 800374a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800374e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003752:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003756:	21ff      	movs	r1, #255	; 0xff
 8003758:	f00a fd40 	bl	800e1dc <vsniprintf>
 800375c:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8003760:	4b67      	ldr	r3, [pc, #412]	; (8003900 <lcdPrintf+0x1e0>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b67      	ldr	r3, [pc, #412]	; (8003904 <lcdPrintf+0x1e4>)
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d05d      	beq.n	800382e <lcdPrintf+0x10e>
  {
    for( i=0; i<len; i+=Size_Char )
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003778:	e052      	b.n	8003820 <lcdPrintf+0x100>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 800377a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800377e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003782:	4413      	add	r3, r2
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	4b5e      	ldr	r3, [pc, #376]	; (8003900 <lcdPrintf+0x1e0>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4b5d      	ldr	r3, [pc, #372]	; (8003904 <lcdPrintf+0x1e4>)
 800378e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003792:	f107 0108 	add.w	r1, r7, #8
 8003796:	f107 000c 	add.w	r0, r7, #12
 800379a:	1dbb      	adds	r3, r7, #6
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4623      	mov	r3, r4
 80037a2:	6809      	ldr	r1, [r1, #0]
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	f000 f903 	bl	80039b0 <disEngFont>

      Size_Char = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <lcdPrintf+0x1e0>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b53      	ldr	r3, [pc, #332]	; (8003904 <lcdPrintf+0x1e4>)
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 80037c2:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <lcdPrintf+0x1e0>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b4e      	ldr	r3, [pc, #312]	; (8003904 <lcdPrintf+0x1e4>)
 80037ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 80037d4:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	f107 010c 	add.w	r1, r7, #12
 80037e0:	6809      	ldr	r1, [r1, #0]
 80037e2:	440a      	add	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80037e6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80037ea:	f107 030c 	add.w	r3, r7, #12
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	2ba0      	cmp	r3, #160	; 0xa0
 80037f4:	dd0d      	ble.n	8003812 <lcdPrintf+0xf2>
      {
        x  = x_Pre;
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037fe:	601a      	str	r2, [r3, #0]
        y += font_height;
 8003800:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8003804:	f107 0308 	add.w	r3, r7, #8
 8003808:	f107 0108 	add.w	r1, r7, #8
 800380c:	6809      	ldr	r1, [r1, #0]
 800380e:	440a      	add	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8003812:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003816:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800381a:	4413      	add	r3, r2
 800381c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003820:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003824:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003828:	429a      	cmp	r2, r3
 800382a:	dba6      	blt.n	800377a <lcdPrintf+0x5a>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 800382c:	e060      	b.n	80038f0 <lcdPrintf+0x1d0>
    for( i=0; i<len; i+=Size_Char )
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003834:	e054      	b.n	80038e0 <lcdPrintf+0x1c0>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8003836:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800383a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800383e:	4413      	add	r3, r2
 8003840:	f107 0214 	add.w	r2, r7, #20
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f002 faa4 	bl	8005d94 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 800384c:	1dbb      	adds	r3, r7, #6
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	f107 0214 	add.w	r2, r7, #20
 8003854:	f107 0108 	add.w	r1, r7, #8
 8003858:	f107 000c 	add.w	r0, r7, #12
 800385c:	6809      	ldr	r1, [r1, #0]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	f000 f852 	bl	8003908 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 800386e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003872:	2b01      	cmp	r3, #1
 8003874:	dd0a      	ble.n	800388c <lcdPrintf+0x16c>
        font_width = 16;
 8003876:	2310      	movs	r3, #16
 8003878:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	f107 020c 	add.w	r2, r7, #12
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	3210      	adds	r2, #16
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e009      	b.n	80038a0 <lcdPrintf+0x180>
        font_width = 8;
 800388c:	2308      	movs	r3, #8
 800388e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	f107 020c 	add.w	r2, r7, #12
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	3208      	adds	r2, #8
 800389e:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 80038a0:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	2ba0      	cmp	r3, #160	; 0xa0
 80038ae:	dd0b      	ble.n	80038c8 <lcdPrintf+0x1a8>
        x  = x_Pre;
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80038b8:	601a      	str	r2, [r3, #0]
        y += 16;
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	f107 0208 	add.w	r2, r7, #8
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	3210      	adds	r2, #16
 80038c6:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	889b      	ldrh	r3, [r3, #4]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d00d      	beq.n	80038ee <lcdPrintf+0x1ce>
    for( i=0; i<len; i+=Size_Char )
 80038d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80038d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038da:	4413      	add	r3, r2
 80038dc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038e0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80038e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80038e8:	429a      	cmp	r2, r3
 80038ea:	dba4      	blt.n	8003836 <lcdPrintf+0x116>
}
 80038ec:	e000      	b.n	80038f0 <lcdPrintf+0x1d0>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 80038ee:	bf00      	nop
}
 80038f0:	bf00      	nop
 80038f2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80038fc:	b001      	add	sp, #4
 80038fe:	4770      	bx	lr
 8003900:	2000001d 	.word	0x2000001d
 8003904:	20000020 	.word	0x20000020

08003908 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	885b      	ldrh	r3, [r3, #2]
 800391a:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 800391c:	8b3b      	ldrh	r3, [r7, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <disHanFont+0x1e>
  {
    FontSize = 2;
 8003922:	2302      	movs	r3, #2
 8003924:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8003926:	2300      	movs	r3, #0
 8003928:	83fb      	strh	r3, [r7, #30]
 800392a:	e03a      	b.n	80039a2 <disHanFont+0x9a>
  {
    index_x = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8003930:	2300      	movs	r3, #0
 8003932:	83bb      	strh	r3, [r7, #28]
 8003934:	e02e      	b.n	8003994 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8003936:	8bfb      	ldrh	r3, [r7, #30]
 8003938:	8b3a      	ldrh	r2, [r7, #24]
 800393a:	fb02 f203 	mul.w	r2, r2, r3
 800393e:	8bbb      	ldrh	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	799b      	ldrb	r3, [r3, #6]
 8003948:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 800394a:	2300      	movs	r3, #0
 800394c:	837b      	strh	r3, [r7, #26]
 800394e:	e01b      	b.n	8003988 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8003950:	7d7a      	ldrb	r2, [r7, #21]
 8003952:	8b7b      	ldrh	r3, [r7, #26]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b29a      	uxth	r2, r3
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	4413      	add	r3, r2
 8003968:	b298      	uxth	r0, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	b29a      	uxth	r2, r3
 800396e:	8bfb      	ldrh	r3, [r7, #30]
 8003970:	4413      	add	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	887a      	ldrh	r2, [r7, #2]
 8003976:	4619      	mov	r1, r3
 8003978:	f7ff fb18 	bl	8002fac <lcdDrawPixel>
        }
        index_x++;
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	3301      	adds	r3, #1
 8003980:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8003982:	8b7b      	ldrh	r3, [r7, #26]
 8003984:	3301      	adds	r3, #1
 8003986:	837b      	strh	r3, [r7, #26]
 8003988:	8b7b      	ldrh	r3, [r7, #26]
 800398a:	2b07      	cmp	r3, #7
 800398c:	d9e0      	bls.n	8003950 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 800398e:	8bbb      	ldrh	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	83bb      	strh	r3, [r7, #28]
 8003994:	8bba      	ldrh	r2, [r7, #28]
 8003996:	8b3b      	ldrh	r3, [r7, #24]
 8003998:	429a      	cmp	r2, r3
 800399a:	d3cc      	bcc.n	8003936 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 800399c:	8bfb      	ldrh	r3, [r7, #30]
 800399e:	3301      	adds	r3, #1
 80039a0:	83fb      	strh	r3, [r7, #30]
 80039a2:	8bfb      	ldrh	r3, [r7, #30]
 80039a4:	2b0f      	cmp	r3, #15
 80039a6:	d9c1      	bls.n	800392c <disHanFont+0x24>
      }
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e035      	b.n	8003a32 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	3b20      	subs	r3, #32
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	7849      	ldrb	r1, [r1, #1]
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	440b      	add	r3, r1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e01a      	b.n	8003a20 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00f      	beq.n	8003a1a <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	b298      	uxth	r0, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a14:	4619      	mov	r1, r3
 8003a16:	f7ff fac9 	bl	8002fac <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d3de      	bcc.n	80039ea <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	461a      	mov	r2, r3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d3c3      	bcc.n	80039c6 <disEngFont+0x16>
      }
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3720      	adds	r7, #32
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <lcdSetFont+0x1c>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	7013      	strb	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	2000001d 	.word	0x2000001d

08003a68 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d163      	bne.n	8003b44 <cliLcd+0xdc>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	4937      	ldr	r1, [pc, #220]	; (8003b60 <cliLcd+0xf8>)
 8003a82:	2000      	movs	r0, #0
 8003a84:	4798      	blx	r3
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8003a8c:	2003      	movs	r0, #3
 8003a8e:	f7ff ffdb 	bl	8003a48 <lcdSetFont>

    while(cliKeepLoop())
 8003a92:	e04b      	b.n	8003b2c <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8003a94:	f7ff fc90 	bl	80033b8 <lcdDrawAvailable>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d046      	beq.n	8003b2c <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7ff fa90 	bl	8002fc4 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <cliLcd+0xfc>)
 8003aa6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	2019      	movs	r0, #25
 8003aae:	f7ff fe37 	bl	8003720 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8003ab2:	f7ff fc69 	bl	8003388 <lcdGetFps>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <cliLcd+0x100>)
 8003abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f7ff fe2c 	bl	8003720 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8003ac8:	f7ff fc6a 	bl	80033a0 <lcdGetFpsTime>
 8003acc:	4603      	mov	r3, r0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <cliLcd+0x104>)
 8003ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7ff fe21 	bl	8003720 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8003ade:	f7fd fb94 	bl	800120a <millis>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <cliLcd+0x104>)
 8003ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aec:	2130      	movs	r1, #48	; 0x30
 8003aee:	2000      	movs	r0, #0
 8003af0:	f7ff fe16 	bl	8003720 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8003af4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	230a      	movs	r3, #10
 8003afc:	220a      	movs	r2, #10
 8003afe:	2146      	movs	r1, #70	; 0x46
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7ff fdde 	bl	80036c2 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8003b06:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	230a      	movs	r3, #10
 8003b0e:	220a      	movs	r2, #10
 8003b10:	2146      	movs	r1, #70	; 0x46
 8003b12:	200a      	movs	r0, #10
 8003b14:	f7ff fdd5 	bl	80036c2 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8003b18:	231f      	movs	r3, #31
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	230a      	movs	r3, #10
 8003b1e:	220a      	movs	r2, #10
 8003b20:	2146      	movs	r1, #70	; 0x46
 8003b22:	2014      	movs	r0, #20
 8003b24:	f7ff fdcd 	bl	80036c2 <lcdDrawFillRect>

        lcdRequestDraw();
 8003b28:	f7ff fc5c 	bl	80033e4 <lcdRequestDraw>
    while(cliKeepLoop())
 8003b2c:	f7fe fccc 	bl	80024c8 <cliKeepLoop>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ae      	bne.n	8003a94 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7ff fa44 	bl	8002fc4 <lcdClearBuffer>
    lcdUpdateDraw();
 8003b3c:	f7ff fc8a 	bl	8003454 <lcdUpdateDraw>

    ret = true;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <cliLcd+0xee>
  {
    cliPrintf("lcd test\n");
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <cliLcd+0x108>)
 8003b52:	f7fe fbbf 	bl	80022d4 <cliPrintf>
  }
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	0800fdf8 	.word	0x0800fdf8
 8003b64:	0800fe00 	.word	0x0800fe00
 8003b68:	0800fe10 	.word	0x0800fe10
 8003b6c:	0800fe18 	.word	0x0800fe18
 8003b70:	0800fe20 	.word	0x0800fe20

08003b74 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
  bool ret = true;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <ledInit+0x8c>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <ledInit+0x8c>)
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <ledInit+0x8c>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e016      	b.n	8003be8 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <ledInit+0x90>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	889b      	ldrh	r3, [r3, #4]
 8003bc4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8003bc6:	4a0f      	ldr	r2, [pc, #60]	; (8003c04 <ledInit+0x90>)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 f9ce 	bl	8007f74 <HAL_GPIO_Init>

    ledOff(i);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f837 	bl	8003c50 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3301      	adds	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dde5      	ble.n	8003bba <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003bee:	4906      	ldr	r1, [pc, #24]	; (8003c08 <ledInit+0x94>)
 8003bf0:	4806      	ldr	r0, [pc, #24]	; (8003c0c <ledInit+0x98>)
 8003bf2:	f7fe fc7f 	bl	80024f4 <cliAdd>
#endif

  return ret;
 8003bf6:	7efb      	ldrb	r3, [r7, #27]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	20000030 	.word	0x20000030
 8003c08:	08003cc9 	.word	0x08003cc9
 8003c0c:	0800fb40 	.word	0x0800fb40

08003c10 <ledOn>:

void ledOn(uint8_t ch)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d111      	bne.n	8003c44 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <ledOn+0x3c>)
 8003c24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <ledOn+0x3c>)
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	8899      	ldrh	r1, [r3, #4]
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <ledOn+0x3c>)
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	799b      	ldrb	r3, [r3, #6]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f004 fc15 	bl	800846c <HAL_GPIO_WritePin>
 8003c42:	e000      	b.n	8003c46 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8003c44:	bf00      	nop
}
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000030 	.word	0x20000030

08003c50 <ledOff>:

void ledOff(uint8_t ch)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <ledOff+0x3c>)
 8003c64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <ledOff+0x3c>)
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	8899      	ldrh	r1, [r3, #4]
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <ledOff+0x3c>)
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	79db      	ldrb	r3, [r3, #7]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f004 fbf5 	bl	800846c <HAL_GPIO_WritePin>
 8003c82:	e000      	b.n	8003c86 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003c84:	bf00      	nop
}
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000030 	.word	0x20000030

08003c90 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10c      	bne.n	8003cba <ledToggle+0x2a>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <ledToggle+0x34>)
 8003ca4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <ledToggle+0x34>)
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	889b      	ldrh	r3, [r3, #4]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f004 fbf3 	bl	800849e <HAL_GPIO_TogglePin>
 8003cb8:	e000      	b.n	8003cbc <ledToggle+0x2c>
  if (ch >= LED_MAX_CH) return;
 8003cba:	bf00      	nop
}
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000030 	.word	0x20000030

08003cc8 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d133      	bne.n	8003d44 <cliLed+0x7c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	491f      	ldr	r1, [pc, #124]	; (8003d60 <cliLed+0x98>)
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	4798      	blx	r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02b      	beq.n	8003d44 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	4798      	blx	r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	4798      	blx	r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8003d04:	7dbb      	ldrb	r3, [r7, #22]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <cliLed+0x48>
    {
      led_ch--;
 8003d0a:	7dbb      	ldrb	r3, [r7, #22]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8003d10:	f7fd fa7b 	bl	800120a <millis>
 8003d14:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8003d16:	e00e      	b.n	8003d36 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8003d18:	f7fd fa77 	bl	800120a <millis>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d806      	bhi.n	8003d36 <cliLed+0x6e>
      {
        pre_time = millis();
 8003d28:	f7fd fa6f 	bl	800120a <millis>
 8003d2c:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8003d2e:	7dbb      	ldrb	r3, [r7, #22]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ffad 	bl	8003c90 <ledToggle>
    while(cliKeepLoop())
 8003d36:	f7fe fbc7 	bl	80024c8 <cliKeepLoop>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1eb      	bne.n	8003d18 <cliLed+0x50>
      }
    }

    ret = true;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	f083 0301 	eor.w	r3, r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8003d50:	2101      	movs	r1, #1
 8003d52:	4804      	ldr	r0, [pc, #16]	; (8003d64 <cliLed+0x9c>)
 8003d54:	f7fe fabe 	bl	80022d4 <cliPrintf>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0800fb44 	.word	0x0800fb44
 8003d64:	0800fb4c 	.word	0x0800fb4c

08003d68 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <DWT_Delay_us+0x3c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003d76:	f004 ffb5 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <DWT_Delay_us+0x40>)
 8003d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d82:	0c9b      	lsrs	r3, r3, #18
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003d8c:	bf00      	nop
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <DWT_Delay_us+0x3c>)
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad2      	subs	r2, r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d3f8      	bcc.n	8003d8e <DWT_Delay_us+0x26>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	e0001000 	.word	0xe0001000
 8003da8:	431bde83 	.word	0x431bde83

08003dac <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	041a      	lsls	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	619a      	str	r2, [r3, #24]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	889a      	ldrh	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	619a      	str	r2, [r3, #24]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b088      	sub	sp, #32
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	889b      	ldrh	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f107 020c 	add.w	r2, r7, #12
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f8b0 	bl	8007f74 <HAL_GPIO_Init>
}
 8003e14:	bf00      	nop
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8003e24:	2311      	movs	r3, #17
 8003e26:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	889b      	ldrh	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f107 020c 	add.w	r2, r7, #12
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f004 f897 	bl	8007f74 <HAL_GPIO_Init>

}
 8003e46:	bf00      	nop
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ffd7 	bl	8003e1c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff ffac 	bl	8003dcc <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8003e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e78:	f7ff ff76 	bl	8003d68 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff95 	bl	8003dac <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8003e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e86:	f7ff ff6f 	bl	8003d68 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff9e 	bl	8003dcc <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8003e90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e94:	f7ff ff68 	bl	8003d68 <DWT_Delay_us>
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff ff7f 	bl	8003dac <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffb4 	bl	8003e1c <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8003eb4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003eb8:	f7ff ff56 	bl	8003d68 <DWT_Delay_us>
	DWT_Delay_us(20);
 8003ebc:	2014      	movs	r0, #20
 8003ebe:	f7ff ff53 	bl	8003d68 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff91 	bl	8003dea <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8003ec8:	2046      	movs	r0, #70	; 0x46
 8003eca:	f7ff ff4d 	bl	8003d68 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f004 faaf 	bl	800843c <HAL_GPIO_ReadPin>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8003ee2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003ee6:	f7ff ff3f 	bl	8003d68 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ff50 	bl	8003dac <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff85 	bl	8003e1c <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8003f12:	200a      	movs	r0, #10
 8003f14:	f7ff ff28 	bl	8003d68 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff66 	bl	8003dea <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8003f1e:	2037      	movs	r0, #55	; 0x37
 8003f20:	f7ff ff22 	bl	8003d68 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff60 	bl	8003dea <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8003f2a:	e011      	b.n	8003f50 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff3d 	bl	8003dac <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff ff72 	bl	8003e1c <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8003f38:	2041      	movs	r0, #65	; 0x41
 8003f3a:	f7ff ff15 	bl	8003d68 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff53 	bl	8003dea <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8003f44:	2005      	movs	r0, #5
 8003f46:	f7ff ff0f 	bl	8003d68 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff4d 	bl	8003dea <ONEWIRE_INPUT>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff21 	bl	8003dac <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ff56 	bl	8003e1c <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8003f70:	2002      	movs	r0, #2
 8003f72:	f7ff fef9 	bl	8003d68 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ff37 	bl	8003dea <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8003f7c:	200a      	movs	r0, #10
 8003f7e:	f7ff fef3 	bl	8003d68 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	889b      	ldrh	r3, [r3, #4]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f004 fa55 	bl	800843c <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8003f9c:	2032      	movs	r0, #50	; 0x32
 8003f9e:	f7ff fee3 	bl	8003d68 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8003fb8:	2308      	movs	r3, #8
 8003fba:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8003fbc:	e00a      	b.n	8003fd4 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff93 	bl	8003ef4 <OneWire_WriteBit>
		byte >>= 1;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	1e5a      	subs	r2, r3, #1
 8003fd8:	73fa      	strb	r2, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ef      	bne.n	8003fbe <OneWire_WriteByte+0x12>
	}
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003ff6:	e00d      	b.n	8004014 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8003ff8:	7bbb      	ldrb	r3, [r7, #14]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff ffaa 	bl	8003f58 <OneWire_ReadBit>
 8004004:	4603      	mov	r3, r0
 8004006:	01db      	lsls	r3, r3, #7
 8004008:	b25a      	sxtb	r2, r3
 800400a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800400e:	4313      	orrs	r3, r2
 8004010:	b25b      	sxtb	r3, r3
 8004012:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	73fa      	strb	r2, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1ec      	bne.n	8003ff8 <OneWire_ReadByte+0x12>
	}

	return byte;
 800401e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f816 	bl	8004062 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004036:	21f0      	movs	r1, #240	; 0xf0
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f825 	bl	8004088 <OneWire_Search>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8004050:	21f0      	movs	r1, #240	; 0xf0
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f818 	bl	8004088 <OneWire_Search>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	71da      	strb	r2, [r3, #7]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 80040a0:	2301      	movs	r3, #1
 80040a2:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7a1b      	ldrb	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 809a 	bne.w	80041e6 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7ff fef4 	bl	8003ea0 <OneWire_Reset>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	71da      	strb	r2, [r3, #7]
			return 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e09b      	b.n	800420c <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff67 	bl	8003fac <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff3a 	bl	8003f58 <OneWire_ReadBit>
 80040e4:	4603      	mov	r3, r0
 80040e6:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff35 	bl	8003f58 <OneWire_ReadBit>
 80040ee:	4603      	mov	r3, r0
 80040f0:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80040f2:	7a7b      	ldrb	r3, [r7, #9]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <OneWire_Search+0x76>
 80040f8:	7a3b      	ldrb	r3, [r7, #8]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d064      	beq.n	80041c8 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80040fe:	7a7a      	ldrb	r2, [r7, #9]
 8004100:	7a3b      	ldrb	r3, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d002      	beq.n	800410c <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8004106:	7a7b      	ldrb	r3, [r7, #9]
 8004108:	72bb      	strb	r3, [r7, #10]
 800410a:	e026      	b.n	800415a <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	799b      	ldrb	r3, [r3, #6]
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	429a      	cmp	r2, r3
 8004114:	d20d      	bcs.n	8004132 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	7a5a      	ldrb	r2, [r3, #9]
 800411e:	7afb      	ldrb	r3, [r7, #11]
 8004120:	4013      	ands	r3, r2
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	72bb      	strb	r3, [r7, #10]
 8004130:	e008      	b.n	8004144 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	799b      	ldrb	r3, [r3, #6]
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	429a      	cmp	r2, r3
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8004144:	7abb      	ldrb	r3, [r7, #10]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800414e:	7bbb      	ldrb	r3, [r7, #14]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d802      	bhi.n	800415a <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	7bba      	ldrb	r2, [r7, #14]
 8004158:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800415a:	7abb      	ldrb	r3, [r7, #10]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10c      	bne.n	800417a <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8004160:	7b7b      	ldrb	r3, [r7, #13]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	7a59      	ldrb	r1, [r3, #9]
 8004168:	7b7b      	ldrb	r3, [r7, #13]
 800416a:	7afa      	ldrb	r2, [r7, #11]
 800416c:	430a      	orrs	r2, r1
 800416e:	b2d1      	uxtb	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	460a      	mov	r2, r1
 8004176:	725a      	strb	r2, [r3, #9]
 8004178:	e010      	b.n	800419c <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800417a:	7b7b      	ldrb	r3, [r7, #13]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	7a5b      	ldrb	r3, [r3, #9]
 8004182:	b25a      	sxtb	r2, r3
 8004184:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004188:	43db      	mvns	r3, r3
 800418a:	b25b      	sxtb	r3, r3
 800418c:	4013      	ands	r3, r2
 800418e:	b25a      	sxtb	r2, r3
 8004190:	7b7b      	ldrb	r3, [r7, #13]
 8004192:	b2d1      	uxtb	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	460a      	mov	r2, r1
 800419a:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800419c:	7abb      	ldrb	r3, [r7, #10]
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fea7 	bl	8003ef4 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	3301      	adds	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80041b8:	7b7b      	ldrb	r3, [r7, #13]
 80041ba:	3301      	adds	r3, #1
 80041bc:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80041c2:	7b7b      	ldrb	r3, [r7, #13]
 80041c4:	2b07      	cmp	r3, #7
 80041c6:	d98a      	bls.n	80040de <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d90b      	bls.n	80041e6 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7bba      	ldrb	r2, [r7, #14]
 80041d2:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	799b      	ldrb	r3, [r3, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80041e6:	7b3b      	ldrb	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <OneWire_Search+0x16c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7a5b      	ldrb	r3, [r3, #9]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800420a:	7b3b      	ldrb	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 800421e:	2155      	movs	r1, #85	; 0x55
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fec3 	bl	8003fac <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e00a      	b.n	8004242 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff feb8 	bl	8003fac <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	3301      	adds	r3, #1
 8004240:	73fb      	strb	r3, [r7, #15]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b07      	cmp	r3, #7
 8004246:	d9f1      	bls.n	800422c <OneWire_SelectWithPointer+0x18>
	}
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	e00a      	b.n	8004276 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	440b      	add	r3, r1
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	440a      	add	r2, r1
 800426c:	7a52      	ldrb	r2, [r2, #9]
 800426e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	3301      	adds	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b07      	cmp	r3, #7
 800427a:	d9f1      	bls.n	8004260 <OneWire_GetFullROM+0x10>
	}
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  bool ret = false;
 800428e:	2300      	movs	r3, #0
 8004290:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <sdInit+0x80>)
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <sdInit+0x84>)
 8004296:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <sdInit+0x80>)
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <sdInit+0x80>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <sdInit+0x80>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <sdInit+0x80>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <sdInit+0x80>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <sdInit+0x80>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]


  is_detected = false;
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <sdInit+0x88>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <sdInit+0x88>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <sdInit+0x88>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00f      	beq.n	80042f0 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 80042d0:	480d      	ldr	r0, [pc, #52]	; (8004308 <sdInit+0x80>)
 80042d2:	f004 fd3b 	bl	8008d4c <HAL_SD_Init>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80042dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042e0:	4809      	ldr	r0, [pc, #36]	; (8004308 <sdInit+0x80>)
 80042e2:	f005 fa17 	bl	8009714 <HAL_SD_ConfigWideBusOperation>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <sdInit+0x68>
      {
        ret = true;
 80042ec:	2301      	movs	r3, #1
 80042ee:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <sdInit+0x8c>)
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80042f6:	4908      	ldr	r1, [pc, #32]	; (8004318 <sdInit+0x90>)
 80042f8:	4808      	ldr	r0, [pc, #32]	; (800431c <sdInit+0x94>)
 80042fa:	f7fe f8fb 	bl	80024f4 <cliAdd>
#endif

  return ret;
 80042fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000a990 	.word	0x2000a990
 800430c:	40012c00 	.word	0x40012c00
 8004310:	2000a2c1 	.word	0x2000a2c1
 8004314:	2000a2c0 	.word	0x2000a2c0
 8004318:	080046e9 	.word	0x080046e9
 800431c:	0800fb6c 	.word	0x0800fb6c

08004320 <sdGetInfo>:

  return is_detected;
}

bool sdGetInfo(sd_info_t *p_info)
{
 8004320:	b5b0      	push	{r4, r5, r7, lr}
 8004322:	b08c      	sub	sp, #48	; 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004328:	2300      	movs	r3, #0
 800432a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <sdGetInfo+0xa4>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03d      	beq.n	80043b6 <sdGetInfo+0x96>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	4619      	mov	r1, r3
 8004340:	4821      	ldr	r0, [pc, #132]	; (80043c8 <sdGetInfo+0xa8>)
 8004342:	f005 f9bb 	bl	80096bc <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8004370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4619      	mov	r1, r3
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f04f 0400 	mov.w	r4, #0
 8004388:	fb03 f502 	mul.w	r5, r3, r2
 800438c:	fb01 f004 	mul.w	r0, r1, r4
 8004390:	4428      	add	r0, r5
 8004392:	fba1 3403 	umull	r3, r4, r1, r3
 8004396:	1902      	adds	r2, r0, r4
 8004398:	4614      	mov	r4, r2
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	0d19      	lsrs	r1, r3, #20
 80043a4:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
 80043a8:	0d22      	lsrs	r2, r4, #20
 80043aa:	460a      	mov	r2, r1
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	621a      	str	r2, [r3, #32]
    ret = true;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80043b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3730      	adds	r7, #48	; 0x30
 80043be:	46bd      	mov	sp, r7
 80043c0:	bdb0      	pop	{r4, r5, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000a2c0 	.word	0x2000a2c0
 80043c8:	2000a990 	.word	0x2000a990

080043cc <sdIsBusy>:

bool sdIsBusy(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80043d2:	4808      	ldr	r0, [pc, #32]	; (80043f4 <sdIsBusy+0x28>)
 80043d4:	f005 fa1a 	bl	800980c <HAL_SD_GetCardState>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d102      	bne.n	80043e4 <sdIsBusy+0x18>
  {
    is_busy = false;
 80043de:	2300      	movs	r3, #0
 80043e0:	71fb      	strb	r3, [r7, #7]
 80043e2:	e001      	b.n	80043e8 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80043e4:	2301      	movs	r3, #1
 80043e6:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80043e8:	79fb      	ldrb	r3, [r7, #7]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	2000a990 	.word	0x2000a990

080043f8 <sdReadBlocks>:

  return false;
}

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <sdReadBlocks+0x8c>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	481c      	ldr	r0, [pc, #112]	; (8004488 <sdReadBlocks+0x90>)
 8004418:	f004 fd28 	bl	8008e6c <HAL_SD_ReadBlocks_DMA>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d12a      	bne.n	8004478 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8004422:	f7fc fef2 	bl	800120a <millis>
 8004426:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8004428:	e007      	b.n	800443a <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800442a:	f7fc feee 	bl	800120a <millis>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d908      	bls.n	800444c <sdReadBlocks+0x54>
    while(is_rx_done == false)
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <sdReadBlocks+0x8c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f083 0301 	eor.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ef      	bne.n	800442a <sdReadBlocks+0x32>
 800444a:	e00d      	b.n	8004468 <sdReadBlocks+0x70>
      {
        break;
 800444c:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 800444e:	e00b      	b.n	8004468 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8004450:	f7fc fedb 	bl	800120a <millis>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d803      	bhi.n	8004468 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <sdReadBlocks+0x8c>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
        break;
 8004466:	e004      	b.n	8004472 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8004468:	f7ff ffb0 	bl	80043cc <sdIsBusy>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1ee      	bne.n	8004450 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <sdReadBlocks+0x8c>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000a2c2 	.word	0x2000a2c2
 8004488:	2000a990 	.word	0x2000a990

0800448c <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <HAL_SD_RxCpltCallback+0x1c>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	2000a2c2 	.word	0x2000a2c2

080044ac <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_SD_TxCpltCallback+0x1c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	2000a2c3 	.word	0x2000a2c3

080044cc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08c      	sub	sp, #48	; 0x30
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	609a      	str	r2, [r3, #8]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_SD_MspInit+0x1fc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	f040 80e8 	bne.w	80046c0 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_SD_MspInit+0x200>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4a74      	ldr	r2, [pc, #464]	; (80046cc <HAL_SD_MspInit+0x200>)
 80044fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004500:	4b72      	ldr	r3, [pc, #456]	; (80046cc <HAL_SD_MspInit+0x200>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <HAL_SD_MspInit+0x200>)
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	4a6d      	ldr	r2, [pc, #436]	; (80046cc <HAL_SD_MspInit+0x200>)
 8004516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800451a:	6453      	str	r3, [r2, #68]	; 0x44
 800451c:	4b6b      	ldr	r3, [pc, #428]	; (80046cc <HAL_SD_MspInit+0x200>)
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
 800452c:	4b67      	ldr	r3, [pc, #412]	; (80046cc <HAL_SD_MspInit+0x200>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4a66      	ldr	r2, [pc, #408]	; (80046cc <HAL_SD_MspInit+0x200>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6313      	str	r3, [r2, #48]	; 0x30
 8004538:	4b64      	ldr	r3, [pc, #400]	; (80046cc <HAL_SD_MspInit+0x200>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	4b60      	ldr	r3, [pc, #384]	; (80046cc <HAL_SD_MspInit+0x200>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4a5f      	ldr	r2, [pc, #380]	; (80046cc <HAL_SD_MspInit+0x200>)
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	6313      	str	r3, [r2, #48]	; 0x30
 8004554:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_SD_MspInit+0x200>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8004560:	f44f 7350 	mov.w	r3, #832	; 0x340
 8004564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004566:	2302      	movs	r3, #2
 8004568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800456a:	2301      	movs	r3, #1
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800456e:	2301      	movs	r3, #1
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004572:	230c      	movs	r3, #12
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004576:	f107 031c 	add.w	r3, r7, #28
 800457a:	4619      	mov	r1, r3
 800457c:	4854      	ldr	r0, [pc, #336]	; (80046d0 <HAL_SD_MspInit+0x204>)
 800457e:	f003 fcf9 	bl	8007f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8004582:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004588:	2302      	movs	r3, #2
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800458c:	2301      	movs	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004590:	2301      	movs	r3, #1
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004594:	230c      	movs	r3, #12
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004598:	f107 031c 	add.w	r3, r7, #28
 800459c:	4619      	mov	r1, r3
 800459e:	484d      	ldr	r0, [pc, #308]	; (80046d4 <HAL_SD_MspInit+0x208>)
 80045a0:	f003 fce8 	bl	8007f74 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80045a4:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045a6:	4a4d      	ldr	r2, [pc, #308]	; (80046dc <HAL_SD_MspInit+0x210>)
 80045a8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045b0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b8:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045be:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045c6:	4b44      	ldr	r3, [pc, #272]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045cc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045ce:	4b42      	ldr	r3, [pc, #264]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045d4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045d8:	2220      	movs	r2, #32
 80045da:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045dc:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045de:	2200      	movs	r2, #0
 80045e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80045e2:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045e4:	2204      	movs	r2, #4
 80045e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045ea:	2203      	movs	r2, #3
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80045ee:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 80045f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80045fe:	4836      	ldr	r0, [pc, #216]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 8004600:	f003 f8be 	bl	8007780 <HAL_DMA_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800460a:	f7fc fe6d 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
 8004614:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_SD_MspInit+0x20c>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800461c:	4a31      	ldr	r2, [pc, #196]	; (80046e4 <HAL_SD_MspInit+0x218>)
 800461e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004620:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004626:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800462e:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004630:	2200      	movs	r2, #0
 8004632:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800463e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004642:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800464a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800464e:	2220      	movs	r2, #32
 8004650:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800465a:	2204      	movs	r2, #4
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004660:	2203      	movs	r2, #3
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004666:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800466e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004674:	481a      	ldr	r0, [pc, #104]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004676:	f003 f883 	bl	8007780 <HAL_DMA_Init>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8004680:	f7fc fe32 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_SD_MspInit+0x214>)
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_SD_MspInit+0x214>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 4, 0);
 8004690:	2200      	movs	r2, #0
 8004692:	2104      	movs	r1, #4
 8004694:	2031      	movs	r0, #49	; 0x31
 8004696:	f003 f82e 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800469a:	2031      	movs	r0, #49	; 0x31
 800469c:	f003 f847 	bl	800772e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	2103      	movs	r1, #3
 80046a4:	203b      	movs	r0, #59	; 0x3b
 80046a6:	f003 f826 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80046aa:	203b      	movs	r0, #59	; 0x3b
 80046ac:	f003 f83f 	bl	800772e <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2103      	movs	r1, #3
 80046b4:	2045      	movs	r0, #69	; 0x45
 80046b6:	f003 f81e 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80046ba:	2045      	movs	r0, #69	; 0x45
 80046bc:	f003 f837 	bl	800772e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80046c0:	bf00      	nop
 80046c2:	3730      	adds	r7, #48	; 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40020000 	.word	0x40020000
 80046d4:	40020400 	.word	0x40020400
 80046d8:	2000a8d0 	.word	0x2000a8d0
 80046dc:	40026458 	.word	0x40026458
 80046e0:	2000a930 	.word	0x2000a930
 80046e4:	400264a0 	.word	0x400264a0

080046e8 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	1d3b      	adds	r3, r7, #4
 80046f2:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d179      	bne.n	80047f8 <cliSd+0x110>
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4968      	ldr	r1, [pc, #416]	; (80048ac <cliSd+0x1c4>)
 800470c:	2000      	movs	r0, #0
 800470e:	4798      	blx	r3
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d070      	beq.n	80047f8 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8004716:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <cliSd+0x1c8>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	4619      	mov	r1, r3
 800471c:	4865      	ldr	r0, [pc, #404]	; (80048b4 <cliSd+0x1cc>)
 800471e:	f7fd fdd9 	bl	80022d4 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8004722:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <cliSd+0x1d0>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4864      	ldr	r0, [pc, #400]	; (80048bc <cliSd+0x1d4>)
 800472a:	f7fd fdd3 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 800472e:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <cliSd+0x1c8>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d05d      	beq.n	80047f2 <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fdf0 	bl	8004320 <sdGetInfo>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d055      	beq.n	80047f2 <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	485c      	ldr	r0, [pc, #368]	; (80048c0 <cliSd+0x1d8>)
 8004750:	f7fd fdc0 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4619      	mov	r1, r3
 800475c:	4859      	ldr	r0, [pc, #356]	; (80048c4 <cliSd+0x1dc>)
 800475e:	f7fd fdb9 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8004762:	f107 030c 	add.w	r3, r7, #12
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4619      	mov	r1, r3
 800476a:	4857      	ldr	r0, [pc, #348]	; (80048c8 <cliSd+0x1e0>)
 800476c:	f7fd fdb2 	bl	80022d4 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8004770:	f107 030c 	add.w	r3, r7, #12
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4619      	mov	r1, r3
 8004778:	4854      	ldr	r0, [pc, #336]	; (80048cc <cliSd+0x1e4>)
 800477a:	f7fd fdab 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 800477e:	f107 030c 	add.w	r3, r7, #12
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4619      	mov	r1, r3
 8004786:	4852      	ldr	r0, [pc, #328]	; (80048d0 <cliSd+0x1e8>)
 8004788:	f7fd fda4 	bl	80022d4 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4619      	mov	r1, r3
 8004794:	484f      	ldr	r0, [pc, #316]	; (80048d4 <cliSd+0x1ec>)
 8004796:	f7fd fd9d 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 800479a:	f107 030c 	add.w	r3, r7, #12
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4619      	mov	r1, r3
 80047a2:	484d      	ldr	r0, [pc, #308]	; (80048d8 <cliSd+0x1f0>)
 80047a4:	f7fd fd96 	bl	80022d4 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4619      	mov	r1, r3
 80047b0:	484a      	ldr	r0, [pc, #296]	; (80048dc <cliSd+0x1f4>)
 80047b2:	f7fd fd8f 	bl	80022d4 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80047b6:	f107 030c 	add.w	r3, r7, #12
 80047ba:	6a18      	ldr	r0, [r3, #32]
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	0a9c      	lsrs	r4, r3, #10
 80047c4:	f107 030c 	add.w	r3, r7, #12
 80047c8:	6a1a      	ldr	r2, [r3, #32]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	0a99      	lsrs	r1, r3, #10
 80047d4:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <cliSd+0x1f8>)
 80047d6:	fba3 2301 	umull	r2, r3, r3, r1
 80047da:	08da      	lsrs	r2, r3, #3
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	1aca      	subs	r2, r1, r3
 80047e6:	4613      	mov	r3, r2
 80047e8:	4622      	mov	r2, r4
 80047ea:	4601      	mov	r1, r0
 80047ec:	483d      	ldr	r0, [pc, #244]	; (80048e4 <cliSd+0x1fc>)
 80047ee:	f7fd fd71 	bl	80022d4 <cliPrintf>
      }
    }
    ret = true;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d13e      	bne.n	8004880 <cliSd+0x198>
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	4937      	ldr	r1, [pc, #220]	; (80048e8 <cliSd+0x200>)
 800480a:	2000      	movs	r0, #0
 800480c:	4798      	blx	r3
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d035      	beq.n	8004880 <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2001      	movs	r0, #1
 800481c:	4798      	blx	r3
 800481e:	4603      	mov	r3, r0
 8004820:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8004824:	f107 010c 	add.w	r1, r7, #12
 8004828:	2364      	movs	r3, #100	; 0x64
 800482a:	2201      	movs	r2, #1
 800482c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8004830:	f7ff fde2 	bl	80043f8 <sdReadBlocks>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01c      	beq.n	8004874 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004840:	e013      	b.n	800486a <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8004842:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004846:	0099      	lsls	r1, r3, #2
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004854:	460a      	mov	r2, r1
 8004856:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800485a:	4824      	ldr	r0, [pc, #144]	; (80048ec <cliSd+0x204>)
 800485c:	f7fd fd3a 	bl	80022d4 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8004860:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004864:	3301      	adds	r3, #1
 8004866:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800486a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800486e:	2b7f      	cmp	r3, #127	; 0x7f
 8004870:	dde7      	ble.n	8004842 <cliSd+0x15a>
 8004872:	e002      	b.n	800487a <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8004874:	481e      	ldr	r0, [pc, #120]	; (80048f0 <cliSd+0x208>)
 8004876:	f7fd fd2d 	bl	80022d4 <cliPrintf>
    }

    ret = true;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8004880:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004884:	f083 0301 	eor.w	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 800488e:	4819      	ldr	r0, [pc, #100]	; (80048f4 <cliSd+0x20c>)
 8004890:	f7fd fd20 	bl	80022d4 <cliPrintf>

    if (is_init == true)
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <cliSd+0x1c8>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 800489c:	4816      	ldr	r0, [pc, #88]	; (80048f8 <cliSd+0x210>)
 800489e:	f7fd fd19 	bl	80022d4 <cliPrintf>
    }
  }
}
 80048a2:	bf00      	nop
 80048a4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd90      	pop	{r4, r7, pc}
 80048ac:	0800fb70 	.word	0x0800fb70
 80048b0:	2000a2c0 	.word	0x2000a2c0
 80048b4:	0800fb78 	.word	0x0800fb78
 80048b8:	2000a2c1 	.word	0x2000a2c1
 80048bc:	0800fb8c 	.word	0x0800fb8c
 80048c0:	0800fba0 	.word	0x0800fba0
 80048c4:	0800fbc0 	.word	0x0800fbc0
 80048c8:	0800fbe0 	.word	0x0800fbe0
 80048cc:	0800fc00 	.word	0x0800fc00
 80048d0:	0800fc20 	.word	0x0800fc20
 80048d4:	0800fc40 	.word	0x0800fc40
 80048d8:	0800fc60 	.word	0x0800fc60
 80048dc:	0800fc80 	.word	0x0800fc80
 80048e0:	cccccccd 	.word	0xcccccccd
 80048e4:	0800fca0 	.word	0x0800fca0
 80048e8:	0800fccc 	.word	0x0800fccc
 80048ec:	0800fcd4 	.word	0x0800fcd4
 80048f0:	0800fce8 	.word	0x0800fce8
 80048f4:	0800fcf8 	.word	0x0800fcf8
 80048f8:	0800fd04 	.word	0x0800fd04

080048fc <DWT_Delay_us>:
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <DWT_Delay_us+0x3c>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800490a:	f004 f9eb 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <DWT_Delay_us+0x40>)
 8004912:	fba3 2302 	umull	r2, r3, r3, r2
 8004916:	0c9b      	lsrs	r3, r3, #18
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8004920:	bf00      	nop
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <DWT_Delay_us+0x3c>)
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad2      	subs	r2, r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3f8      	bcc.n	8004922 <DWT_Delay_us+0x26>
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e0001000 	.word	0xe0001000
 800493c:	431bde83 	.word	0x431bde83

08004940 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	; 0x30
 8004944:	af00      	add	r7, sp, #0
	bool ret = false;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800494c:	f107 031c 	add.w	r3, r7, #28
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <sonarInit+0xec>)
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <sonarInit+0xf0>)
 8004974:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <sonarInit+0xec>)
 8004978:	225f      	movs	r2, #95	; 0x5f
 800497a:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <sonarInit+0xec>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8004982:	4b2a      	ldr	r3, [pc, #168]	; (8004a2c <sonarInit+0xec>)
 8004984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004988:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800498a:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <sonarInit+0xec>)
 800498c:	2200      	movs	r2, #0
 800498e:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004990:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <sonarInit+0xec>)
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004996:	4825      	ldr	r0, [pc, #148]	; (8004a2c <sonarInit+0xec>)
 8004998:	f006 f902 	bl	800aba0 <HAL_TIM_Base_Init>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <sonarInit+0x66>
	  {
	    Error_Handler();
 80049a2:	f7fc fca1 	bl	80012e8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049aa:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049ac:	f107 031c 	add.w	r3, r7, #28
 80049b0:	4619      	mov	r1, r3
 80049b2:	481e      	ldr	r0, [pc, #120]	; (8004a2c <sonarInit+0xec>)
 80049b4:	f006 fb60 	bl	800b078 <HAL_TIM_ConfigClockSource>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <sonarInit+0x82>
	  {
	    Error_Handler();
 80049be:	f7fc fc93 	bl	80012e8 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80049c2:	481a      	ldr	r0, [pc, #104]	; (8004a2c <sonarInit+0xec>)
 80049c4:	f006 f917 	bl	800abf6 <HAL_TIM_IC_Init>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <sonarInit+0x92>
	  {
	    Error_Handler();
 80049ce:	f7fc fc8b 	bl	80012e8 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4812      	ldr	r0, [pc, #72]	; (8004a2c <sonarInit+0xec>)
 80049e2:	f006 fe87 	bl	800b6f4 <HAL_TIMEx_MasterConfigSynchronization>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <sonarInit+0xb0>
	  {
	    Error_Handler();
 80049ec:	f7fc fc7c 	bl	80012e8 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80049f0:	2300      	movs	r3, #0
 80049f2:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80049f4:	2301      	movs	r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004a00:	1d3b      	adds	r3, r7, #4
 8004a02:	220c      	movs	r2, #12
 8004a04:	4619      	mov	r1, r3
 8004a06:	4809      	ldr	r0, [pc, #36]	; (8004a2c <sonarInit+0xec>)
 8004a08:	f006 fa9a 	bl	800af40 <HAL_TIM_IC_ConfigChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <sonarInit+0xd6>
	  {
	    Error_Handler();
 8004a12:	f7fc fc69 	bl	80012e8 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8004a16:	210c      	movs	r1, #12
 8004a18:	4804      	ldr	r0, [pc, #16]	; (8004a2c <sonarInit+0xec>)
 8004a1a:	f006 f921 	bl	800ac60 <HAL_TIM_IC_Start_IT>

	return ret;
 8004a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3730      	adds	r7, #48	; 0x30
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	2000aa14 	.word	0x2000aa14
 8004a30:	40000400 	.word	0x40000400
 8004a34:	00000000 	.word	0x00000000

08004a38 <Sonar_measure>:

bool Sonar_measure(void)
{
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
	bool ret = false;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8004a42:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <Sonar_measure+0x180>)
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <Sonar_measure+0x18>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d022      	beq.n	8004a94 <Sonar_measure+0x5c>
 8004a4e:	e0a9      	b.n	8004ba4 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8004a50:	2103      	movs	r1, #3
 8004a52:	2008      	movs	r0, #8
 8004a54:	f7fe f83e 	bl	8002ad4 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8004a58:	2101      	movs	r1, #1
 8004a5a:	2008      	movs	r0, #8
 8004a5c:	f7fe f8ac 	bl	8002bb8 <gpioPinWrite>
			DWT_Delay_us(5);
 8004a60:	2005      	movs	r0, #5
 8004a62:	f7ff ff4b 	bl	80048fc <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8004a66:	2100      	movs	r1, #0
 8004a68:	2008      	movs	r0, #8
 8004a6a:	f7fe f8a5 	bl	8002bb8 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8004a6e:	2106      	movs	r1, #6
 8004a70:	2008      	movs	r0, #8
 8004a72:	f7fe f82f 	bl	8002ad4 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8004a76:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <Sonar_measure+0x180>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8004a7c:	4b4e      	ldr	r3, [pc, #312]	; (8004bb8 <Sonar_measure+0x180>)
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	3301      	adds	r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <Sonar_measure+0x180>)
 8004a86:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8004a88:	f7fc fbbf 	bl	800120a <millis>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <Sonar_measure+0x184>)
 8004a90:	601a      	str	r2, [r3, #0]
			break;
 8004a92:	e087      	b.n	8004ba4 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8004a94:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <Sonar_measure+0x180>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	f083 0301 	eor.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d06a      	beq.n	8004b78 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8004aa2:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <Sonar_measure+0x180>)
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	4b44      	ldr	r3, [pc, #272]	; (8004bb8 <Sonar_measure+0x180>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d907      	bls.n	8004abe <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8004aae:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <Sonar_measure+0x180>)
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <Sonar_measure+0x180>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <Sonar_measure+0x180>)
 8004aba:	60d3      	str	r3, [r2, #12]
 8004abc:	e00e      	b.n	8004adc <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8004abe:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <Sonar_measure+0x180>)
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <Sonar_measure+0x180>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d208      	bcs.n	8004adc <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8004aca:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <Sonar_measure+0x180>)
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <Sonar_measure+0x180>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004ad8:	4a37      	ldr	r2, [pc, #220]	; (8004bb8 <Sonar_measure+0x180>)
 8004ada:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <Sonar_measure+0x180>)
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fb fd23 	bl	8000534 <__aeabi_ui2d>
 8004aee:	a330      	add	r3, pc, #192	; (adr r3, 8004bb0 <Sonar_measure+0x178>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fd98 	bl	8000628 <__aeabi_dmul>
 8004af8:	4603      	mov	r3, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	4618      	mov	r0, r3
 8004afe:	4621      	mov	r1, r4
 8004b00:	f7fc f86a 	bl	8000bd8 <__aeabi_d2uiz>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <Sonar_measure+0x180>)
 8004b08:	615a      	str	r2, [r3, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8004b0a:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <Sonar_measure+0x188>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	3301      	adds	r3, #1
 8004b12:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8004b14:	79bb      	ldrb	r3, [r7, #6]
 8004b16:	2b0b      	cmp	r3, #11
 8004b18:	d101      	bne.n	8004b1e <Sonar_measure+0xe6>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8004b1e:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <Sonar_measure+0x180>)
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <Sonar_measure+0x188>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	b211      	sxth	r1, r2
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <Sonar_measure+0x18c>)
 8004b2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <Sonar_measure+0x188>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <Sonar_measure+0x18c>)
 8004b34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <Sonar_measure+0x190>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <Sonar_measure+0x190>)
 8004b42:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <Sonar_measure+0x190>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	79ba      	ldrb	r2, [r7, #6]
 8004b4a:	491e      	ldr	r1, [pc, #120]	; (8004bc4 <Sonar_measure+0x18c>)
 8004b4c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <Sonar_measure+0x190>)
 8004b54:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8004b56:	79bb      	ldrb	r3, [r7, #6]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <Sonar_measure+0x188>)
 8004b5a:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <Sonar_measure+0x190>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <Sonar_measure+0x194>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	08db      	lsrs	r3, r3, #3
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <Sonar_measure+0x180>)
 8004b6a:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <Sonar_measure+0x180>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	705a      	strb	r2, [r3, #1]
				ret = true;
 8004b72:	2301      	movs	r3, #1
 8004b74:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8004b76:	e014      	b.n	8004ba2 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8004b78:	f7fc fb47 	bl	800120a <millis>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <Sonar_measure+0x184>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b18      	cmp	r3, #24
 8004b86:	d90c      	bls.n	8004ba2 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <Sonar_measure+0x180>)
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <Sonar_measure+0x180>)
 8004b90:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <Sonar_measure+0x180>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <Sonar_measure+0x180>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	705a      	strb	r2, [r3, #1]
					ret = false;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	71fb      	strb	r3, [r7, #7]
			break;
 8004ba2:	bf00      	nop
	}
	return ret;
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	75f6fd22 	.word	0x75f6fd22
 8004bb4:	3f919ce0 	.word	0x3f919ce0
 8004bb8:	2000a2c4 	.word	0x2000a2c4
 8004bbc:	2000a2e0 	.word	0x2000a2e0
 8004bc0:	2000a2e4 	.word	0x2000a2e4
 8004bc4:	2000a2e8 	.word	0x2000a2e8
 8004bc8:	2000a300 	.word	0x2000a300
 8004bcc:	cccccccd 	.word	0xcccccccd

08004bd0 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f107 0314 	add.w	r3, r7, #20
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_TIM_Base_MspInit+0x94>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d133      	bne.n	8004c5a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_TIM_Base_MspInit+0x98>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4809      	ldr	r0, [pc, #36]	; (8004c6c <HAL_TIM_Base_MspInit+0x9c>)
 8004c46:	f003 f995 	bl	8007f74 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	201d      	movs	r0, #29
 8004c50:	f002 fd51 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c54:	201d      	movs	r0, #29
 8004c56:	f002 fd6a 	bl	800772e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3728      	adds	r7, #40	; 0x28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	40020400 	.word	0x40020400

08004c70 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7f1b      	ldrb	r3, [r3, #28]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d129      	bne.n	8004cd4 <HAL_TIM_IC_CaptureCallback+0x64>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d124      	bne.n	8004cd4 <HAL_TIM_IC_CaptureCallback+0x64>
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004caa:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004cb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb6:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8004cb8:	e00c      	b.n	8004cd4 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004cc0:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	4a06      	ldr	r2, [pc, #24]	; (8004ce0 <HAL_TIM_IC_CaptureCallback+0x70>)
 8004cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ccc:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_TIM_IC_CaptureCallback+0x74>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	2000a2c4 	.word	0x2000a2c4
 8004ce8:	40020400 	.word	0x40020400

08004cec <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
  bool ret = true;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	e03d      	b.n	8004d78 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8004cfc:	4923      	ldr	r1, [pc, #140]	; (8004d8c <spiInit+0xa0>)
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8004d0e:	491f      	ldr	r1, [pc, #124]	; (8004d8c <spiInit+0xa0>)
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8004d22:	491a      	ldr	r1, [pc, #104]	; (8004d8c <spiInit+0xa0>)
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	3302      	adds	r3, #2
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8004d36:	4915      	ldr	r1, [pc, #84]	; (8004d8c <spiInit+0xa0>)
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3304      	adds	r3, #4
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8004d4a:	4910      	ldr	r1, [pc, #64]	; (8004d8c <spiInit+0xa0>)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3310      	adds	r3, #16
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8004d5e:	490b      	ldr	r1, [pc, #44]	; (8004d8c <spiInit+0xa0>)
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3301      	adds	r3, #1
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	ddbe      	ble.n	8004cfc <spiInit+0x10>
  }

  return ret;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	2000aa54 	.word	0x2000aa54

08004d90 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8004d9e:	79fa      	ldrb	r2, [r7, #7]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <spiBegin+0xa8>)
 8004daa:	4413      	add	r3, r2
 8004dac:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <spiBegin+0x28>
 8004db4:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8004db6:	e03a      	b.n	8004e2e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <spiBegin+0xac>)
 8004dbc:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <spiBegin+0xb0>)
 8004dc2:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <spiBegin+0xac>)
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <spiBegin+0xb4>)
 8004dc8:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <spiBegin+0xac>)
 8004dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004dd0:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <spiBegin+0xac>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <spiBegin+0xac>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dde:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <spiBegin+0xac>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <spiBegin+0xac>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <spiBegin+0xac>)
 8004dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df0:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <spiBegin+0xac>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <spiBegin+0xac>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <spiBegin+0xac>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <spiBegin+0xac>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <spiBegin+0xac>)
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8004e10:	480a      	ldr	r0, [pc, #40]	; (8004e3c <spiBegin+0xac>)
 8004e12:	f005 fa01 	bl	800a218 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8004e16:	4809      	ldr	r0, [pc, #36]	; (8004e3c <spiBegin+0xac>)
 8004e18:	f005 f99a 	bl	800a150 <HAL_SPI_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d104      	bne.n	8004e2c <spiBegin+0x9c>
        p_spi->is_open = true;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
        ret = true;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2c:	bf00      	nop
  }

  return ret;
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000aa54 	.word	0x2000aa54
 8004e3c:	2000aa68 	.word	0x2000aa68
 8004e40:	2000aac0 	.word	0x2000aac0
 8004e44:	40013000 	.word	0x40013000

08004e48 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460a      	mov	r2, r1
 8004e52:	71fb      	strb	r3, [r7, #7]
 8004e54:	4613      	mov	r3, r2
 8004e56:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8004e58:	79fa      	ldrb	r2, [r7, #7]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <spiSetDataMode+0xc8>)
 8004e64:	4413      	add	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f083 0301 	eor.w	r3, r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d147      	bne.n	8004f06 <spiSetDataMode+0xbe>


  switch( dataMode )
 8004e76:	79bb      	ldrb	r3, [r7, #6]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d845      	bhi.n	8004f08 <spiSetDataMode+0xc0>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <spiSetDataMode+0x3c>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ee9 	.word	0x08004ee9
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f005 f951 	bl	800a150 <HAL_SPI_Init>
      break;
 8004eae:	e02b      	b.n	8004f08 <spiSetDataMode+0xc0>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 f943 	bl	800a150 <HAL_SPI_Init>
      break;
 8004eca:	e01d      	b.n	8004f08 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f005 f935 	bl	800a150 <HAL_SPI_Init>
      break;
 8004ee6:	e00f      	b.n	8004f08 <spiSetDataMode+0xc0>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2202      	movs	r2, #2
 8004eee:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f005 f927 	bl	800a150 <HAL_SPI_Init>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <spiSetDataMode+0xc0>
  if (p_spi->is_open == false) return;
 8004f06:	bf00      	nop
  }
}
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	2000aa54 	.word	0x2000aa54

08004f14 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8004f24:	79fa      	ldrb	r2, [r7, #7]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4a10      	ldr	r2, [pc, #64]	; (8004f70 <spiSetBitWidth+0x5c>)
 8004f30:	4413      	add	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	f083 0301 	eor.w	r3, r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d111      	bne.n	8004f66 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8004f4a:	79bb      	ldrb	r3, [r7, #6]
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d104      	bne.n	8004f5a <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f58:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f005 f8f6 	bl	800a150 <HAL_SPI_Init>
 8004f64:	e000      	b.n	8004f68 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 8004f66:	bf00      	nop
}
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	2000aa54 	.word	0x2000aa54

08004f74 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	71fb      	strb	r3, [r7, #7]
 8004f80:	4613      	mov	r3, r2
 8004f82:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8004f84:	79fa      	ldrb	r2, [r7, #7]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <spiTransfer8+0x50>)
 8004f90:	4413      	add	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f083 0301 	eor.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <spiTransfer8+0x32>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e00a      	b.n	8004fbc <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6898      	ldr	r0, [r3, #8]
 8004faa:	f107 020b 	add.w	r2, r7, #11
 8004fae:	1db9      	adds	r1, r7, #6
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f005 f957 	bl	800a268 <HAL_SPI_TransmitReceive>

  return ret;
 8004fba:	7afb      	ldrb	r3, [r7, #11]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	2000aa54 	.word	0x2000aa54

08004fc8 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <spiDmaTxStart+0x4c>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f083 0301 	eor.w	r3, r3, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10b      	bne.n	800500c <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	b292      	uxth	r2, r2
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f005 fad1 	bl	800a5ac <HAL_SPI_Transmit_DMA>
 800500a:	e000      	b.n	800500e <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 800500c:	bf00      	nop
}
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	2000aa54 	.word	0x2000aa54

08005018 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff ffc8 	bl	8004fc8 <spiDmaTxStart>

  t_time = millis();
 8005038:	f7fc f8e7 	bl	800120a <millis>
 800503c:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <spiDmaTxTransfer+0x30>
 8005044:	2301      	movs	r3, #1
 8005046:	e013      	b.n	8005070 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f814 	bl	8005078 <spiDmaTxIsDone>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8005056:	f7fc f8d8 	bl	800120a <millis>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d2f0      	bcs.n	8005048 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]
      break;
 800506a:	e000      	b.n	800506e <spiDmaTxTransfer+0x56>
      break;
 800506c:	bf00      	nop
    }
  }

  return ret;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8005082:	79fa      	ldrb	r2, [r7, #7]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <spiDmaTxIsDone+0x3c>)
 800508e:	4413      	add	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <spiDmaTxIsDone+0x2c>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e001      	b.n	80050a8 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	785b      	ldrb	r3, [r3, #1]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	2000aa54 	.word	0x2000aa54

080050b8 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	6039      	str	r1, [r7, #0]
 80050c2:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80050c4:	79fa      	ldrb	r2, [r7, #7]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <spiAttachTxInterrupt+0x40>)
 80050d0:	4413      	add	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f083 0301 	eor.w	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	e000      	b.n	80050ec <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 80050ea:	bf00      	nop
}
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	2000aa54 	.word	0x2000aa54

080050fc <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_SPI_ErrorCallback+0x28>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d102      	bne.n	8005118 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8005112:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_SPI_ErrorCallback+0x28>)
 8005114:	2201      	movs	r2, #1
 8005116:	709a      	strb	r2, [r3, #2]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	2000aa54 	.word	0x2000aa54

08005128 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <HAL_SPI_TxCpltCallback+0x38>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d10b      	bne.n	8005156 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_SPI_TxCpltCallback+0x38>)
 8005140:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4798      	blx	r3
    }
  }
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2000aa54 	.word	0x2000aa54

08005164 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a40      	ldr	r2, [pc, #256]	; (8005284 <HAL_SPI_MspInit+0x120>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d179      	bne.n	800527a <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b3f      	ldr	r3, [pc, #252]	; (8005288 <HAL_SPI_MspInit+0x124>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	4a3e      	ldr	r2, [pc, #248]	; (8005288 <HAL_SPI_MspInit+0x124>)
 8005190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005194:	6313      	str	r3, [r2, #48]	; 0x30
 8005196:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <HAL_SPI_MspInit+0x124>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b38      	ldr	r3, [pc, #224]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	4a37      	ldr	r2, [pc, #220]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051b0:	6453      	str	r3, [r2, #68]	; 0x44
 80051b2:	4b35      	ldr	r3, [pc, #212]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	4b31      	ldr	r3, [pc, #196]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6313      	str	r3, [r2, #48]	; 0x30
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_SPI_MspInit+0x124>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80051da:	23a0      	movs	r3, #160	; 0xa0
 80051dc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051de:	2302      	movs	r3, #2
 80051e0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e6:	2303      	movs	r3, #3
 80051e8:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051ea:	2305      	movs	r3, #5
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ee:	f107 0314 	add.w	r3, r7, #20
 80051f2:	4619      	mov	r1, r3
 80051f4:	4825      	ldr	r0, [pc, #148]	; (800528c <HAL_SPI_MspInit+0x128>)
 80051f6:	f002 febd 	bl	8007f74 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 80051fc:	4a25      	ldr	r2, [pc, #148]	; (8005294 <HAL_SPI_MspInit+0x130>)
 80051fe:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005202:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005206:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005208:	4b21      	ldr	r3, [pc, #132]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005210:	2200      	movs	r2, #0
 8005212:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005214:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800521a:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800521c:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 800521e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005222:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005224:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800522a:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800522c:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 800522e:	2200      	movs	r2, #0
 8005230:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005234:	2200      	movs	r2, #0
 8005236:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 800523a:	2200      	movs	r2, #0
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800523e:	4814      	ldr	r0, [pc, #80]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005240:	f002 fa9e 	bl	8007780 <HAL_DMA_Init>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 800524a:	f7fc f84d 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005252:	649a      	str	r2, [r3, #72]	; 0x48
 8005254:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <HAL_SPI_MspInit+0x12c>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800525a:	2200      	movs	r2, #0
 800525c:	2100      	movs	r1, #0
 800525e:	2023      	movs	r0, #35	; 0x23
 8005260:	f002 fa49 	bl	80076f6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005264:	2023      	movs	r0, #35	; 0x23
 8005266:	f002 fa62 	bl	800772e <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800526a:	2200      	movs	r2, #0
 800526c:	2105      	movs	r1, #5
 800526e:	2044      	movs	r0, #68	; 0x44
 8005270:	f002 fa41 	bl	80076f6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005274:	2044      	movs	r0, #68	; 0x44
 8005276:	f002 fa5a 	bl	800772e <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800527a:	bf00      	nop
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40013000 	.word	0x40013000
 8005288:	40023800 	.word	0x40023800
 800528c:	40020000 	.word	0x40020000
 8005290:	2000aac0 	.word	0x2000aac0
 8005294:	40026488 	.word	0x40026488

08005298 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_SPI_MspDeInit+0x40>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d111      	bne.n	80052ce <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <HAL_SPI_MspDeInit+0x44>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	4a0b      	ldr	r2, [pc, #44]	; (80052dc <HAL_SPI_MspDeInit+0x44>)
 80052b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b4:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80052b6:	21a0      	movs	r1, #160	; 0xa0
 80052b8:	4809      	ldr	r0, [pc, #36]	; (80052e0 <HAL_SPI_MspDeInit+0x48>)
 80052ba:	f002 ffdd 	bl	8008278 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 fb0a 	bl	80078dc <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80052c8:	2023      	movs	r0, #35	; 0x23
 80052ca:	f002 fa3e 	bl	800774a <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40013000 	.word	0x40013000
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40020000 	.word	0x40020000

080052e4 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
	bool ret = true;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 80052ee:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <tdsInit+0xd0>)
 80052f0:	2203      	movs	r2, #3
 80052f2:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 80052f4:	4b2f      	ldr	r3, [pc, #188]	; (80053b4 <tdsInit+0xd0>)
 80052f6:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <tdsInit+0xd4>)
 80052f8:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 80052fa:	4b2e      	ldr	r3, [pc, #184]	; (80053b4 <tdsInit+0xd0>)
 80052fc:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005300:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8005302:	4b2c      	ldr	r3, [pc, #176]	; (80053b4 <tdsInit+0xd0>)
 8005304:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005308:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 800530a:	1d3b      	adds	r3, r7, #4
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8005316:	4b29      	ldr	r3, [pc, #164]	; (80053bc <tdsInit+0xd8>)
 8005318:	4a29      	ldr	r2, [pc, #164]	; (80053c0 <tdsInit+0xdc>)
 800531a:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800531c:	4b27      	ldr	r3, [pc, #156]	; (80053bc <tdsInit+0xd8>)
 800531e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005322:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <tdsInit+0xd8>)
 8005326:	2200      	movs	r2, #0
 8005328:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <tdsInit+0xd8>)
 800532c:	2201      	movs	r2, #1
 800532e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <tdsInit+0xd8>)
 8005332:	2201      	movs	r2, #1
 8005334:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005336:	4b21      	ldr	r3, [pc, #132]	; (80053bc <tdsInit+0xd8>)
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800533e:	4b1f      	ldr	r3, [pc, #124]	; (80053bc <tdsInit+0xd8>)
 8005340:	2200      	movs	r2, #0
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <tdsInit+0xd8>)
 8005346:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <tdsInit+0xe0>)
 8005348:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800534a:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <tdsInit+0xd8>)
 800534c:	2200      	movs	r2, #0
 800534e:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <tdsInit+0xd8>)
 8005352:	2201      	movs	r2, #1
 8005354:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <tdsInit+0xd8>)
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <tdsInit+0xd8>)
 8005360:	2201      	movs	r2, #1
 8005362:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005364:	4815      	ldr	r0, [pc, #84]	; (80053bc <tdsInit+0xd8>)
 8005366:	f001 fb8f 	bl	8006a88 <HAL_ADC_Init>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <tdsInit+0x90>
	  {
	    Error_Handler();
 8005370:	f7fb ffba 	bl	80012e8 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8005374:	2301      	movs	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8005378:	2301      	movs	r3, #1
 800537a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800537c:	2307      	movs	r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	4619      	mov	r1, r3
 8005384:	480d      	ldr	r0, [pc, #52]	; (80053bc <tdsInit+0xd8>)
 8005386:	f001 fdff 	bl	8006f88 <HAL_ADC_ConfigChannel>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <tdsInit+0xb0>
	  {
	    Error_Handler();
 8005390:	f7fb ffaa 	bl	80012e8 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 8005394:	2201      	movs	r2, #1
 8005396:	490c      	ldr	r1, [pc, #48]	; (80053c8 <tdsInit+0xe4>)
 8005398:	4808      	ldr	r0, [pc, #32]	; (80053bc <tdsInit+0xd8>)
 800539a:	f001 fcf9 	bl	8006d90 <HAL_ADC_Start_DMA>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <tdsInit+0xc4>
	{
		Error_Handler();
 80053a4:	f7fb ffa0 	bl	80012e8 <Error_Handler>
	}

	return ret;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]

}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	2000ab20 	.word	0x2000ab20
 80053b8:	41c80000 	.word	0x41c80000
 80053bc:	2000ab48 	.word	0x2000ab48
 80053c0:	40012000 	.word	0x40012000
 80053c4:	0f000001 	.word	0x0f000001
 80053c8:	2000ab30 	.word	0x2000ab30
 80053cc:	00000000 	.word	0x00000000

080053d0 <tds_measure>:
bool tds_measure(void)
{
 80053d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
	bool ret = true;
 80053d8:	2301      	movs	r3, #1
 80053da:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 80053dc:	4b8e      	ldr	r3, [pc, #568]	; (8005618 <tds_measure+0x248>)
 80053de:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fb f8b1 	bl	8000578 <__aeabi_f2d>
 8005416:	a378      	add	r3, pc, #480	; (adr r3, 80055f8 <tds_measure+0x228>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f7fb f904 	bl	8000628 <__aeabi_dmul>
 8005420:	4603      	mov	r3, r0
 8005422:	460c      	mov	r4, r1
 8005424:	4625      	mov	r5, r4
 8005426:	461c      	mov	r4, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb f8a3 	bl	8000578 <__aeabi_f2d>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	f7fb f8f5 	bl	8000628 <__aeabi_dmul>
 800543e:	4603      	mov	r3, r0
 8005440:	460c      	mov	r4, r1
 8005442:	4625      	mov	r5, r4
 8005444:	461c      	mov	r4, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fb f894 	bl	8000578 <__aeabi_f2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4620      	mov	r0, r4
 8005456:	4629      	mov	r1, r5
 8005458:	f7fb f8e6 	bl	8000628 <__aeabi_dmul>
 800545c:	4603      	mov	r3, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4625      	mov	r5, r4
 8005462:	461c      	mov	r4, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	4618      	mov	r0, r3
 800546a:	f7fb f885 	bl	8000578 <__aeabi_f2d>
 800546e:	a364      	add	r3, pc, #400	; (adr r3, 8005600 <tds_measure+0x230>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f7fb f8d8 	bl	8000628 <__aeabi_dmul>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4690      	mov	r8, r2
 800547e:	4699      	mov	r9, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	4618      	mov	r0, r3
 8005486:	f7fb f877 	bl	8000578 <__aeabi_f2d>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb f8c9 	bl	8000628 <__aeabi_dmul>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4620      	mov	r0, r4
 800549c:	4629      	mov	r1, r5
 800549e:	f7fa ff0b 	bl	80002b8 <__aeabi_dsub>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	4625      	mov	r5, r4
 80054a8:	461c      	mov	r4, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fb f862 	bl	8000578 <__aeabi_f2d>
 80054b4:	a354      	add	r3, pc, #336	; (adr r3, 8005608 <tds_measure+0x238>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fb f8b5 	bl	8000628 <__aeabi_dmul>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4620      	mov	r0, r4
 80054c4:	4629      	mov	r1, r5
 80054c6:	f7fa fef9 	bl	80002bc <__adddf3>
 80054ca:	4603      	mov	r3, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	4625      	mov	r5, r4
 80054d0:	461c      	mov	r4, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb f84e 	bl	8000578 <__aeabi_f2d>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4620      	mov	r0, r4
 80054e2:	4629      	mov	r1, r5
 80054e4:	f7fb f8a0 	bl	8000628 <__aeabi_dmul>
 80054e8:	4603      	mov	r3, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4618      	mov	r0, r3
 80054ee:	4621      	mov	r1, r4
 80054f0:	f7fb fb92 	bl	8000c18 <__aeabi_d2f>
 80054f4:	4602      	mov	r2, r0
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fb f83a 	bl	8000578 <__aeabi_f2d>
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fb f833 	bl	8000578 <__aeabi_f2d>
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <tds_measure+0x24c>)
 8005518:	f7fa fece 	bl	80002b8 <__aeabi_dsub>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	a33a      	add	r3, pc, #232	; (adr r3, 8005610 <tds_measure+0x240>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f7fb f87d 	bl	8000628 <__aeabi_dmul>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <tds_measure+0x250>)
 800553c:	f7fa febe 	bl	80002bc <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4620      	mov	r0, r4
 8005546:	4629      	mov	r1, r5
 8005548:	f7fb f998 	bl	800087c <__aeabi_ddiv>
 800554c:	4603      	mov	r3, r0
 800554e:	460c      	mov	r4, r1
 8005550:	4618      	mov	r0, r3
 8005552:	4621      	mov	r1, r4
 8005554:	f7fb fb60 	bl	8000c18 <__aeabi_d2f>
 8005558:	4602      	mov	r2, r0
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	edd3 7a07 	vldr	s15, [r3, #28]
 8005564:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8005572:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <tds_measure+0x254>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3301      	adds	r3, #1
 800557a:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	2b0b      	cmp	r3, #11
 8005580:	d101      	bne.n	8005586 <tds_measure+0x1b6>
 8005582:	2300      	movs	r3, #0
 8005584:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	edd3 7a08 	vldr	s15, [r3, #32]
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <tds_measure+0x254>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005594:	ee17 2a90 	vmov	r2, s15
 8005598:	b211      	sxth	r1, r2
 800559a:	4a23      	ldr	r2, [pc, #140]	; (8005628 <tds_measure+0x258>)
 800559c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 80055a0:	4b20      	ldr	r3, [pc, #128]	; (8005624 <tds_measure+0x254>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <tds_measure+0x258>)
 80055a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <tds_measure+0x25c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	4a1e      	ldr	r2, [pc, #120]	; (800562c <tds_measure+0x25c>)
 80055b4:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <tds_measure+0x25c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	79fa      	ldrb	r2, [r7, #7]
 80055bc:	491a      	ldr	r1, [pc, #104]	; (8005628 <tds_measure+0x258>)
 80055be:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <tds_measure+0x25c>)
 80055c6:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4a16      	ldr	r2, [pc, #88]	; (8005624 <tds_measure+0x254>)
 80055cc:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <tds_measure+0x25c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <tds_measure+0x260>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 80055e8:	79bb      	ldrb	r3, [r7, #6]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80055f4:	f3af 8000 	nop.w
 80055f8:	a3d70a3d 	.word	0xa3d70a3d
 80055fc:	4060ad70 	.word	0x4060ad70
 8005600:	1eb851ec 	.word	0x1eb851ec
 8005604:	406ffb85 	.word	0x406ffb85
 8005608:	b851eb85 	.word	0xb851eb85
 800560c:	408acb1e 	.word	0x408acb1e
 8005610:	47ae147b 	.word	0x47ae147b
 8005614:	3f947ae1 	.word	0x3f947ae1
 8005618:	2000ab20 	.word	0x2000ab20
 800561c:	40390000 	.word	0x40390000
 8005620:	3ff00000 	.word	0x3ff00000
 8005624:	2000a304 	.word	0x2000a304
 8005628:	2000a308 	.word	0x2000a308
 800562c:	2000a320 	.word	0x2000a320
 8005630:	cccccccd 	.word	0xcccccccd

08005634 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3e      	ldr	r2, [pc, #248]	; (800574c <HAL_ADC_MspInit+0x118>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d175      	bne.n	8005742 <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a3c      	ldr	r2, [pc, #240]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b3a      	ldr	r3, [pc, #232]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	4b36      	ldr	r3, [pc, #216]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	4a35      	ldr	r2, [pc, #212]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6453      	str	r3, [r2, #68]	; 0x44
 8005682:	4b33      	ldr	r3, [pc, #204]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a2e      	ldr	r2, [pc, #184]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <HAL_ADC_MspInit+0x11c>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056aa:	2302      	movs	r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056ae:	2303      	movs	r3, #3
 80056b0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	4619      	mov	r1, r3
 80056bc:	4825      	ldr	r0, [pc, #148]	; (8005754 <HAL_ADC_MspInit+0x120>)
 80056be:	f002 fc59 	bl	8007f74 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056c4:	4a25      	ldr	r2, [pc, #148]	; (800575c <HAL_ADC_MspInit+0x128>)
 80056c6:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80056d4:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80056da:	4b1f      	ldr	r3, [pc, #124]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056e0:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056e8:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056f0:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f8:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_ADC_MspInit+0x124>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005700:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_ADC_MspInit+0x124>)
 8005702:	2200      	movs	r2, #0
 8005704:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005706:	4814      	ldr	r0, [pc, #80]	; (8005758 <HAL_ADC_MspInit+0x124>)
 8005708:	f002 f83a 	bl	8007780 <HAL_DMA_Init>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8005712:	f7fb fde9 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a0f      	ldr	r2, [pc, #60]	; (8005758 <HAL_ADC_MspInit+0x124>)
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
 800571c:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_ADC_MspInit+0x124>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005722:	2200      	movs	r2, #0
 8005724:	2100      	movs	r1, #0
 8005726:	2012      	movs	r0, #18
 8005728:	f001 ffe5 	bl	80076f6 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800572c:	2012      	movs	r0, #18
 800572e:	f001 fffe 	bl	800772e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8005732:	2200      	movs	r2, #0
 8005734:	2102      	movs	r1, #2
 8005736:	2038      	movs	r0, #56	; 0x38
 8005738:	f001 ffdd 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800573c:	2038      	movs	r0, #56	; 0x38
 800573e:	f001 fff6 	bl	800772e <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005742:	bf00      	nop
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40012000 	.word	0x40012000
 8005750:	40023800 	.word	0x40023800
 8005754:	40020000 	.word	0x40020000
 8005758:	2000ab90 	.word	0x2000ab90
 800575c:	40026410 	.word	0x40026410

08005760 <uartInit>:
#endif



bool uartInit(void)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	e007      	b.n	800577c <uartInit+0x1c>
  {
    is_open[i] = false;
 800576c:	4a08      	ldr	r2, [pc, #32]	; (8005790 <uartInit+0x30>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3301      	adds	r3, #1
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	ddf4      	ble.n	800576c <uartInit+0xc>
  }


  return true;
 8005782:	2301      	movs	r3, #1
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	2000a324 	.word	0x2000a324

08005794 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80057a0:	2300      	movs	r3, #0
 80057a2:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <uartOpen+0x1c>
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d078      	beq.n	80058a0 <uartOpen+0x10c>
 80057ae:	e0ef      	b.n	8005990 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 80057b0:	4b7a      	ldr	r3, [pc, #488]	; (800599c <uartOpen+0x208>)
 80057b2:	4a7b      	ldr	r2, [pc, #492]	; (80059a0 <uartOpen+0x20c>)
 80057b4:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 80057b6:	4a79      	ldr	r2, [pc, #484]	; (800599c <uartOpen+0x208>)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80057bc:	4b77      	ldr	r3, [pc, #476]	; (800599c <uartOpen+0x208>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 80057c2:	4b76      	ldr	r3, [pc, #472]	; (800599c <uartOpen+0x208>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 80057c8:	4b74      	ldr	r3, [pc, #464]	; (800599c <uartOpen+0x208>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 80057ce:	4b73      	ldr	r3, [pc, #460]	; (800599c <uartOpen+0x208>)
 80057d0:	220c      	movs	r2, #12
 80057d2:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80057d4:	4b71      	ldr	r3, [pc, #452]	; (800599c <uartOpen+0x208>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 80057da:	4b70      	ldr	r3, [pc, #448]	; (800599c <uartOpen+0x208>)
 80057dc:	2200      	movs	r2, #0
 80057de:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 80057e0:	486e      	ldr	r0, [pc, #440]	; (800599c <uartOpen+0x208>)
 80057e2:	f006 f856 	bl	800b892 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	4a6e      	ldr	r2, [pc, #440]	; (80059a4 <uartOpen+0x210>)
 80057ec:	4413      	add	r3, r2
 80057ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f2:	496d      	ldr	r1, [pc, #436]	; (80059a8 <uartOpen+0x214>)
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fb feb0 	bl	800155a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	4b6b      	ldr	r3, [pc, #428]	; (80059ac <uartOpen+0x218>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	4a6a      	ldr	r2, [pc, #424]	; (80059ac <uartOpen+0x218>)
 8005804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005808:	6313      	str	r3, [r2, #48]	; 0x30
 800580a:	4b68      	ldr	r3, [pc, #416]	; (80059ac <uartOpen+0x218>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	203a      	movs	r0, #58	; 0x3a
 800581c:	f001 ff6b 	bl	80076f6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005820:	203a      	movs	r0, #58	; 0x3a
 8005822:	f001 ff84 	bl	800772e <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005826:	2200      	movs	r2, #0
 8005828:	2100      	movs	r1, #0
 800582a:	2046      	movs	r0, #70	; 0x46
 800582c:	f001 ff63 	bl	80076f6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005830:	2046      	movs	r0, #70	; 0x46
 8005832:	f001 ff7c 	bl	800772e <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8005836:	4859      	ldr	r0, [pc, #356]	; (800599c <uartOpen+0x208>)
 8005838:	f005 ffde 	bl	800b7f8 <HAL_UART_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <uartOpen+0xb4>
        {
          ret = false;
 8005842:	2300      	movs	r3, #0
 8005844:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8005846:	e0a3      	b.n	8005990 <uartOpen+0x1fc>
          ret = true;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	4a58      	ldr	r2, [pc, #352]	; (80059b0 <uartOpen+0x21c>)
 8005850:	2101      	movs	r1, #1
 8005852:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005858:	4953      	ldr	r1, [pc, #332]	; (80059a8 <uartOpen+0x214>)
 800585a:	4850      	ldr	r0, [pc, #320]	; (800599c <uartOpen+0x208>)
 800585c:	f006 f8de 	bl	800ba1c <HAL_UART_Receive_DMA>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <uartOpen+0xd6>
            ret = false;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	4a4d      	ldr	r2, [pc, #308]	; (80059a4 <uartOpen+0x210>)
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	4413      	add	r3, r2
 8005872:	3308      	adds	r3, #8
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <uartOpen+0x220>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	1a8a      	subs	r2, r1, r2
 8005880:	4948      	ldr	r1, [pc, #288]	; (80059a4 <uartOpen+0x210>)
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	440b      	add	r3, r1
 8005886:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8005888:	79fa      	ldrb	r2, [r7, #7]
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	4945      	ldr	r1, [pc, #276]	; (80059a4 <uartOpen+0x210>)
 800588e:	0112      	lsls	r2, r2, #4
 8005890:	440a      	add	r2, r1
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	4943      	ldr	r1, [pc, #268]	; (80059a4 <uartOpen+0x210>)
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	440b      	add	r3, r1
 800589a:	3304      	adds	r3, #4
 800589c:	601a      	str	r2, [r3, #0]
      break;
 800589e:	e077      	b.n	8005990 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80058a0:	4b3e      	ldr	r3, [pc, #248]	; (800599c <uartOpen+0x208>)
 80058a2:	4a3f      	ldr	r2, [pc, #252]	; (80059a0 <uartOpen+0x20c>)
 80058a4:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80058a6:	4a3d      	ldr	r2, [pc, #244]	; (800599c <uartOpen+0x208>)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058ac:	4b3b      	ldr	r3, [pc, #236]	; (800599c <uartOpen+0x208>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80058b2:	4b3a      	ldr	r3, [pc, #232]	; (800599c <uartOpen+0x208>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 80058b8:	4b38      	ldr	r3, [pc, #224]	; (800599c <uartOpen+0x208>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80058be:	4b37      	ldr	r3, [pc, #220]	; (800599c <uartOpen+0x208>)
 80058c0:	220c      	movs	r2, #12
 80058c2:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058c4:	4b35      	ldr	r3, [pc, #212]	; (800599c <uartOpen+0x208>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058ca:	4b34      	ldr	r3, [pc, #208]	; (800599c <uartOpen+0x208>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 80058d0:	4832      	ldr	r0, [pc, #200]	; (800599c <uartOpen+0x208>)
 80058d2:	f005 ffde 	bl	800b892 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	4a32      	ldr	r2, [pc, #200]	; (80059a4 <uartOpen+0x210>)
 80058dc:	4413      	add	r3, r2
 80058de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e2:	4931      	ldr	r1, [pc, #196]	; (80059a8 <uartOpen+0x214>)
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fb fe38 	bl	800155a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	4b2f      	ldr	r3, [pc, #188]	; (80059ac <uartOpen+0x218>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <uartOpen+0x218>)
 80058f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f8:	6313      	str	r3, [r2, #48]	; 0x30
 80058fa:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <uartOpen+0x218>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	203a      	movs	r0, #58	; 0x3a
 800590c:	f001 fef3 	bl	80076f6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005910:	203a      	movs	r0, #58	; 0x3a
 8005912:	f001 ff0c 	bl	800772e <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005916:	2200      	movs	r2, #0
 8005918:	2100      	movs	r1, #0
 800591a:	2046      	movs	r0, #70	; 0x46
 800591c:	f001 feeb 	bl	80076f6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005920:	2046      	movs	r0, #70	; 0x46
 8005922:	f001 ff04 	bl	800772e <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8005926:	481d      	ldr	r0, [pc, #116]	; (800599c <uartOpen+0x208>)
 8005928:	f005 ff66 	bl	800b7f8 <HAL_UART_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <uartOpen+0x1a4>
      {
        ret = false;
 8005932:	2300      	movs	r3, #0
 8005934:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8005936:	e02a      	b.n	800598e <uartOpen+0x1fa>
        ret = true;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <uartOpen+0x21c>)
 8005940:	2101      	movs	r1, #1
 8005942:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8005944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005948:	4917      	ldr	r1, [pc, #92]	; (80059a8 <uartOpen+0x214>)
 800594a:	4814      	ldr	r0, [pc, #80]	; (800599c <uartOpen+0x208>)
 800594c:	f006 f866 	bl	800ba1c <HAL_UART_Receive_DMA>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <uartOpen+0x1c6>
          ret = false;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	4a11      	ldr	r2, [pc, #68]	; (80059a4 <uartOpen+0x210>)
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4413      	add	r3, r2
 8005962:	3308      	adds	r3, #8
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <uartOpen+0x220>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	1a8a      	subs	r2, r1, r2
 8005970:	490c      	ldr	r1, [pc, #48]	; (80059a4 <uartOpen+0x210>)
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	440b      	add	r3, r1
 8005976:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8005978:	79fa      	ldrb	r2, [r7, #7]
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4909      	ldr	r1, [pc, #36]	; (80059a4 <uartOpen+0x210>)
 800597e:	0112      	lsls	r2, r2, #4
 8005980:	440a      	add	r2, r1
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	4907      	ldr	r1, [pc, #28]	; (80059a4 <uartOpen+0x210>)
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	440b      	add	r3, r1
 800598a:	3304      	adds	r3, #4
 800598c:	601a      	str	r2, [r3, #0]
      break;
 800598e:	bf00      	nop
  }

  return ret;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	2000acb0 	.word	0x2000acb0
 80059a0:	40011000 	.word	0x40011000
 80059a4:	2000a328 	.word	0x2000a328
 80059a8:	2000a338 	.word	0x2000a338
 80059ac:	40023800 	.word	0x40023800
 80059b0:	2000a324 	.word	0x2000a324
 80059b4:	2000ac50 	.word	0x2000ac50

080059b8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <uartAvailable+0x1a>
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d018      	beq.n	8005a02 <uartAvailable+0x4a>
 80059d0:	e02f      	b.n	8005a32 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <uartAvailable+0x84>)
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	4413      	add	r3, r2
 80059da:	3308      	adds	r3, #8
 80059dc:	6819      	ldr	r1, [r3, #0]
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <uartAvailable+0x88>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	1a8a      	subs	r2, r1, r2
 80059e8:	4914      	ldr	r1, [pc, #80]	; (8005a3c <uartAvailable+0x84>)
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	440b      	add	r3, r1
 80059ee:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <uartAvailable+0x84>)
 80059f6:	4413      	add	r3, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fb fe06 	bl	800160a <qbufferAvailable>
 80059fe:	60f8      	str	r0, [r7, #12]
      break;
 8005a00:	e017      	b.n	8005a32 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4a0d      	ldr	r2, [pc, #52]	; (8005a3c <uartAvailable+0x84>)
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	4413      	add	r3, r2
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	6819      	ldr	r1, [r3, #0]
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <uartAvailable+0x88>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	1a8a      	subs	r2, r1, r2
 8005a18:	4908      	ldr	r1, [pc, #32]	; (8005a3c <uartAvailable+0x84>)
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	440b      	add	r3, r1
 8005a1e:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <uartAvailable+0x84>)
 8005a26:	4413      	add	r3, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fb fdee 	bl	800160a <qbufferAvailable>
 8005a2e:	60f8      	str	r0, [r7, #12]
      break;
 8005a30:	bf00      	nop
  }

  return ret;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2000a328 	.word	0x2000a328
 8005a40:	2000ac50 	.word	0x2000ac50

08005a44 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <uartRead+0x1a>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d008      	beq.n	8005a6e <uartRead+0x2a>
 8005a5c:	e00f      	b.n	8005a7e <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 8005a5e:	f107 030f 	add.w	r3, r7, #15
 8005a62:	2201      	movs	r2, #1
 8005a64:	4619      	mov	r1, r3
 8005a66:	4808      	ldr	r0, [pc, #32]	; (8005a88 <uartRead+0x44>)
 8005a68:	f7fb fd92 	bl	8001590 <qbufferRead>
      break;
 8005a6c:	e007      	b.n	8005a7e <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8005a6e:	f107 030f 	add.w	r3, r7, #15
 8005a72:	2201      	movs	r2, #1
 8005a74:	4619      	mov	r1, r3
 8005a76:	4805      	ldr	r0, [pc, #20]	; (8005a8c <uartRead+0x48>)
 8005a78:	f7fb fd8a 	bl	8001590 <qbufferRead>
      break;
 8005a7c:	bf00      	nop
  }

  return ret;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	2000a328 	.word	0x2000a328
 8005a8c:	2000a338 	.word	0x2000a338

08005a90 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <uartWrite+0x1e>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d00f      	beq.n	8005acc <uartWrite+0x3c>
 8005aac:	e020      	b.n	8005af0 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	2364      	movs	r3, #100	; 0x64
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4811      	ldr	r0, [pc, #68]	; (8005afc <uartWrite+0x6c>)
 8005ab8:	f005 ff17 	bl	800b8ea <HAL_UART_Transmit>
 8005abc:	4603      	mov	r3, r0
 8005abe:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d111      	bne.n	8005aea <uartWrite+0x5a>
        {
          ret = length;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
        }
      break;
 8005aca:	e00e      	b.n	8005aea <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	2364      	movs	r3, #100	; 0x64
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4809      	ldr	r0, [pc, #36]	; (8005afc <uartWrite+0x6c>)
 8005ad6:	f005 ff08 	bl	800b8ea <HAL_UART_Transmit>
 8005ada:	4603      	mov	r3, r0
 8005adc:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <uartWrite+0x5e>
      {
        ret = length;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	617b      	str	r3, [r7, #20]
      }
      break;
 8005ae8:	e001      	b.n	8005aee <uartWrite+0x5e>
      break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <uartWrite+0x60>
      break;
 8005aee:	bf00      	nop
  }

  return ret;
 8005af0:	697b      	ldr	r3, [r7, #20]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000acb0 	.word	0x2000acb0

08005b00 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8005b00:	b40e      	push	{r1, r2, r3}
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b0c7      	sub	sp, #284	; 0x11c
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	4602      	mov	r2, r0
 8005b0a:	1dfb      	adds	r3, r7, #7
 8005b0c:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8005b0e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005b12:	f107 030c 	add.w	r3, r7, #12
 8005b16:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8005b18:	f107 030c 	add.w	r3, r7, #12
 8005b1c:	f107 0010 	add.w	r0, r7, #16
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b2a:	f008 fb57 	bl	800e1dc <vsniprintf>
 8005b2e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8005b32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b36:	f107 0110 	add.w	r1, r7, #16
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ffa6 	bl	8005a90 <uartWrite>
 8005b44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8005b48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b58:	b003      	add	sp, #12
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5b      	ldr	r2, [pc, #364]	; (8005d10 <HAL_UART_MspInit+0x18c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	f040 80b0 	bne.w	8005d08 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb0:	4a58      	ldr	r2, [pc, #352]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bb2:	f043 0310 	orr.w	r3, r3, #16
 8005bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8005bb8:	4b56      	ldr	r3, [pc, #344]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	4a51      	ldr	r2, [pc, #324]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd4:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	4b4b      	ldr	r3, [pc, #300]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	4a4a      	ldr	r2, [pc, #296]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	6313      	str	r3, [r2, #48]	; 0x30
 8005bf0:	4b48      	ldr	r3, [pc, #288]	; (8005d14 <HAL_UART_MspInit+0x190>)
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c00:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c02:	2302      	movs	r3, #2
 8005c04:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c0e:	2307      	movs	r3, #7
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	4619      	mov	r1, r3
 8005c18:	483f      	ldr	r0, [pc, #252]	; (8005d18 <HAL_UART_MspInit+0x194>)
 8005c1a:	f002 f9ab 	bl	8007f74 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005c1e:	2340      	movs	r3, #64	; 0x40
 8005c20:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c22:	2302      	movs	r3, #2
 8005c24:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c2e:	2307      	movs	r3, #7
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4619      	mov	r1, r3
 8005c38:	4838      	ldr	r0, [pc, #224]	; (8005d1c <HAL_UART_MspInit+0x198>)
 8005c3a:	f002 f99b 	bl	8007f74 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005c3e:	4b38      	ldr	r3, [pc, #224]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c40:	4a38      	ldr	r2, [pc, #224]	; (8005d24 <HAL_UART_MspInit+0x1a0>)
 8005c42:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005c44:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c4a:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c4c:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c52:	4b33      	ldr	r3, [pc, #204]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c58:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c5e:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c60:	4b2f      	ldr	r3, [pc, #188]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c66:	4b2e      	ldr	r3, [pc, #184]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c72:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c78:	4b29      	ldr	r3, [pc, #164]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005c7e:	4828      	ldr	r0, [pc, #160]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c80:	f001 fd7e 	bl	8007780 <HAL_DMA_Init>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8005c8a:	f7fb fb2d 	bl	80012e8 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
 8005c94:	4a22      	ldr	r2, [pc, #136]	; (8005d20 <HAL_UART_MspInit+0x19c>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005c9c:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <HAL_UART_MspInit+0x1a8>)
 8005c9e:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ca6:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb4:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cba:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cc2:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005cc8:	4b17      	ldr	r3, [pc, #92]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cce:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cd6:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005cdc:	4812      	ldr	r0, [pc, #72]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cde:	f001 fd4f 	bl	8007780 <HAL_DMA_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8005ce8:	f7fb fafe 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8005cf2:	4a0d      	ldr	r2, [pc, #52]	; (8005d28 <HAL_UART_MspInit+0x1a4>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	2025      	movs	r0, #37	; 0x25
 8005cfe:	f001 fcfa 	bl	80076f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d02:	2025      	movs	r0, #37	; 0x25
 8005d04:	f001 fd13 	bl	800772e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3728      	adds	r7, #40	; 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40011000 	.word	0x40011000
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40020000 	.word	0x40020000
 8005d1c:	40020400 	.word	0x40020400
 8005d20:	2000abf0 	.word	0x2000abf0
 8005d24:	400264b8 	.word	0x400264b8
 8005d28:	2000ac50 	.word	0x2000ac50
 8005d2c:	40026440 	.word	0x40026440

08005d30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <HAL_UART_MspDeInit+0x54>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d11b      	bne.n	8005d7a <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_UART_MspDeInit+0x58>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <HAL_UART_MspDeInit+0x58>)
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8005d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d52:	480e      	ldr	r0, [pc, #56]	; (8005d8c <HAL_UART_MspDeInit+0x5c>)
 8005d54:	f002 fa90 	bl	8008278 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	480d      	ldr	r0, [pc, #52]	; (8005d90 <HAL_UART_MspDeInit+0x60>)
 8005d5c:	f002 fa8c 	bl	8008278 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fdb9 	bl	80078dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 fdb4 	bl	80078dc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005d74:	2025      	movs	r0, #37	; 0x25
 8005d76:	f001 fce8 	bl	800774a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40011000 	.word	0x40011000
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40020000 	.word	0x40020000
 8005d90:	40020400 	.word	0x40020400

08005d94 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	3306      	adds	r3, #6
 8005da2:	2220      	movs	r2, #32
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f007 fab7 	bl	800d31a <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <hanFontLoad+0x2e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b0a      	cmp	r3, #10
 8005dc0:	d107      	bne.n	8005dd2 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8005dce:	2304      	movs	r3, #4
 8005dd0:	e03b      	b.n	8005e4a <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da2b      	bge.n	8005e34 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	041a      	lsls	r2, r3, #16
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3301      	adds	r3, #1
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	4313      	orrs	r3, r2
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	3202      	adds	r2, #2
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a16      	ldr	r2, [pc, #88]	; (8005e54 <hanFontLoad+0xc0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d90e      	bls.n	8005e1c <hanFontLoad+0x88>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <hanFontLoad+0xc4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d80a      	bhi.n	8005e1c <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2203      	movs	r2, #3
 8005e10:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f91f 	bl	8006058 <hanUniFontLoad>
 8005e1a:	e009      	b.n	8005e30 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2202      	movs	r2, #2
 8005e26:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f816 	bl	8005e5c <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e00a      	b.n	8005e4a <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2202      	movs	r2, #2
 8005e38:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa30 	bl	80062a8 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8005e48:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	00eab07f 	.word	0x00eab07f
 8005e58:	00ed9fb0 	.word	0x00ed9fb0

08005e5c <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b21a      	sxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3301      	adds	r3, #1
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b21b      	sxth	r3, r3
 8005e7a:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8005e7c:	89bb      	ldrh	r3, [r7, #12]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fa3c 	bl	80062fc <hanCnvCodeWan2Johab>
 8005e84:	4603      	mov	r3, r0
 8005e86:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8005e88:	89bb      	ldrh	r3, [r7, #12]
 8005e8a:	0a9b      	lsrs	r3, r3, #10
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	4b63      	ldr	r3, [pc, #396]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005e96:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8005e98:	89bb      	ldrh	r3, [r7, #12]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	4b60      	ldr	r3, [pc, #384]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005ea6:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8005ea8:	89bb      	ldrh	r3, [r7, #12]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	4b5e      	ldr	r3, [pc, #376]	; (800602c <hanWanFontLoad+0x1d0>)
 8005eb2:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8005eb4:	4b5b      	ldr	r3, [pc, #364]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <hanWanFontLoad+0x1d4>)
 8005ebc:	5c9b      	ldrb	r3, [r3, r2]
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	4b58      	ldr	r3, [pc, #352]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005ec2:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8005ec4:	4b58      	ldr	r3, [pc, #352]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b5a      	ldr	r3, [pc, #360]	; (8006034 <hanWanFontLoad+0x1d8>)
 8005ecc:	5c9b      	ldrb	r3, [r3, r2]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	4b55      	ldr	r3, [pc, #340]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005ed2:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8005ed4:	4b55      	ldr	r3, [pc, #340]	; (800602c <hanWanFontLoad+0x1d0>)
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b57      	ldr	r3, [pc, #348]	; (8006038 <hanWanFontLoad+0x1dc>)
 8005edc:	5c9b      	ldrb	r3, [r3, r2]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	4b52      	ldr	r3, [pc, #328]	; (800602c <hanWanFontLoad+0x1d0>)
 8005ee2:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8005ee4:	4b51      	ldr	r3, [pc, #324]	; (800602c <hanWanFontLoad+0x1d0>)
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d006      	beq.n	8005efa <hanWanFontLoad+0x9e>
 8005eec:	4b4e      	ldr	r3, [pc, #312]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4b52      	ldr	r3, [pc, #328]	; (800603c <hanWanFontLoad+0x1e0>)
 8005ef4:	5c9b      	ldrb	r3, [r3, r2]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	e005      	b.n	8005f06 <hanWanFontLoad+0xaa>
 8005efa:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <hanWanFontLoad+0x1e4>)
 8005f02:	5c9b      	ldrb	r3, [r3, r2]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4a4f      	ldr	r2, [pc, #316]	; (8006044 <hanWanFontLoad+0x1e8>)
 8005f08:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8005f0a:	4b46      	ldr	r3, [pc, #280]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <hanWanFontLoad+0xca>
 8005f12:	4b44      	ldr	r3, [pc, #272]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d005      	beq.n	8005f26 <hanWanFontLoad+0xca>
 8005f1a:	4b42      	ldr	r3, [pc, #264]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d001      	beq.n	8005f26 <hanWanFontLoad+0xca>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <hanWanFontLoad+0xcc>
 8005f26:	2300      	movs	r3, #0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4a40      	ldr	r2, [pc, #256]	; (800602c <hanWanFontLoad+0x1d0>)
 8005f2c:	8812      	ldrh	r2, [r2, #0]
 8005f2e:	2a00      	cmp	r2, #0
 8005f30:	d001      	beq.n	8005f36 <hanWanFontLoad+0xda>
 8005f32:	2202      	movs	r2, #2
 8005f34:	e000      	b.n	8005f38 <hanWanFontLoad+0xdc>
 8005f36:	2200      	movs	r2, #0
 8005f38:	4413      	add	r3, r2
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	4b42      	ldr	r3, [pc, #264]	; (8006048 <hanWanFontLoad+0x1ec>)
 8005f3e:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8005f40:	4b39      	ldr	r3, [pc, #228]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	4b41      	ldr	r3, [pc, #260]	; (800604c <hanWanFontLoad+0x1f0>)
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	4b40      	ldr	r3, [pc, #256]	; (8006050 <hanWanFontLoad+0x1f4>)
 8005f4e:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	81fb      	strh	r3, [r7, #14]
 8005f54:	e035      	b.n	8005fc2 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8005f56:	4b3b      	ldr	r3, [pc, #236]	; (8006044 <hanWanFontLoad+0x1e8>)
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <hanWanFontLoad+0x1c8>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	4939      	ldr	r1, [pc, #228]	; (8006054 <hanWanFontLoad+0x1f8>)
 8005f70:	0152      	lsls	r2, r2, #5
 8005f72:	4413      	add	r3, r2
 8005f74:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8005f78:	89fb      	ldrh	r3, [r7, #14]
 8005f7a:	b2d1      	uxtb	r1, r2
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	4413      	add	r3, r2
 8005f80:	460a      	mov	r2, r1
 8005f82:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4413      	add	r3, r2
 8005f8a:	7999      	ldrb	r1, [r3, #6]
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <hanWanFontLoad+0x1ec>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	2316      	movs	r3, #22
 8005f94:	fb03 f302 	mul.w	r3, r3, r2
 8005f98:	33a0      	adds	r3, #160	; 0xa0
 8005f9a:	4a23      	ldr	r2, [pc, #140]	; (8006028 <hanWanFontLoad+0x1cc>)
 8005f9c:	8812      	ldrh	r2, [r2, #0]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	482c      	ldr	r0, [pc, #176]	; (8006054 <hanWanFontLoad+0x1f8>)
 8005fa4:	0152      	lsls	r2, r2, #5
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	89fb      	ldrh	r3, [r7, #14]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	b2d1      	uxtb	r1, r2
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	460a      	mov	r2, r1
 8005fba:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8005fbc:	89fb      	ldrh	r3, [r7, #14]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	81fb      	strh	r3, [r7, #14]
 8005fc2:	89fb      	ldrh	r3, [r7, #14]
 8005fc4:	2b1f      	cmp	r3, #31
 8005fc6:	d9c6      	bls.n	8005f56 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8005fc8:	4b18      	ldr	r3, [pc, #96]	; (800602c <hanWanFontLoad+0x1d0>)
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d025      	beq.n	800601c <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	81fb      	strh	r3, [r7, #14]
 8005fd4:	e01f      	b.n	8006016 <hanWanFontLoad+0x1ba>
 8005fd6:	89fb      	ldrh	r3, [r7, #14]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	7999      	ldrb	r1, [r3, #6]
 8005fde:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <hanWanFontLoad+0x1f4>)
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	33f8      	adds	r3, #248	; 0xf8
 8005fee:	4a0f      	ldr	r2, [pc, #60]	; (800602c <hanWanFontLoad+0x1d0>)
 8005ff0:	8812      	ldrh	r2, [r2, #0]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	4817      	ldr	r0, [pc, #92]	; (8006054 <hanWanFontLoad+0x1f8>)
 8005ff8:	0152      	lsls	r2, r2, #5
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	430a      	orrs	r2, r1
 8006006:	b2d1      	uxtb	r1, r2
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	4413      	add	r3, r2
 800600c:	460a      	mov	r2, r1
 800600e:	719a      	strb	r2, [r3, #6]
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	3301      	adds	r3, #1
 8006014:	81fb      	strh	r3, [r7, #14]
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	2b1f      	cmp	r3, #31
 800601a:	d9dc      	bls.n	8005fd6 <hanWanFontLoad+0x17a>
  }
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	2000a438 	.word	0x2000a438
 8006028:	2000a43a 	.word	0x2000a43a
 800602c:	2000a43c 	.word	0x2000a43c
 8006030:	0801162c 	.word	0x0801162c
 8006034:	0801164c 	.word	0x0801164c
 8006038:	0801166c 	.word	0x0801166c
 800603c:	08011704 	.word	0x08011704
 8006040:	080116ec 	.word	0x080116ec
 8006044:	2000a43e 	.word	0x2000a43e
 8006048:	2000a440 	.word	0x2000a440
 800604c:	0801171c 	.word	0x0801171c
 8006050:	2000a442 	.word	0x2000a442
 8006054:	08013c00 	.word	0x08013c00

08006058 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	b21a      	sxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3301      	adds	r3, #1
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	b21b      	sxth	r3, r3
 8006074:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8006078:	b21b      	sxth	r3, r3
 800607a:	4313      	orrs	r3, r2
 800607c:	b21a      	sxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3302      	adds	r3, #2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b21b      	sxth	r3, r3
 8006086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608a:	b21b      	sxth	r3, r3
 800608c:	4313      	orrs	r3, r2
 800608e:	b21b      	sxth	r3, r3
 8006090:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8006092:	89bb      	ldrh	r3, [r7, #12]
 8006094:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8006098:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800609a:	89ba      	ldrh	r2, [r7, #12]
 800609c:	0893      	lsrs	r3, r2, #2
 800609e:	4973      	ldr	r1, [pc, #460]	; (800626c <hanUniFontLoad+0x214>)
 80060a0:	fba1 3103 	umull	r3, r1, r1, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a5b      	subs	r3, r3, r1
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	4b6f      	ldr	r3, [pc, #444]	; (8006270 <hanUniFontLoad+0x218>)
 80060b2:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 80060b4:	89bb      	ldrh	r3, [r7, #12]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	4a6c      	ldr	r2, [pc, #432]	; (800626c <hanUniFontLoad+0x214>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 80060c0:	89b9      	ldrh	r1, [r7, #12]
 80060c2:	4b6c      	ldr	r3, [pc, #432]	; (8006274 <hanUniFontLoad+0x21c>)
 80060c4:	fba3 2301 	umull	r2, r3, r3, r1
 80060c8:	1aca      	subs	r2, r1, r3
 80060ca:	0852      	lsrs	r2, r2, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	091a      	lsrs	r2, r3, #4
 80060d0:	4613      	mov	r3, r2
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	4413      	add	r3, r2
 80060d6:	00da      	lsls	r2, r3, #3
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	1a8b      	subs	r3, r1, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <hanUniFontLoad+0x220>)
 80060e0:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 80060e2:	89ba      	ldrh	r2, [r7, #12]
 80060e4:	4b63      	ldr	r3, [pc, #396]	; (8006274 <hanUniFontLoad+0x21c>)
 80060e6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ea:	1ad2      	subs	r2, r2, r3
 80060ec:	0852      	lsrs	r2, r2, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	4b61      	ldr	r3, [pc, #388]	; (800627c <hanUniFontLoad+0x224>)
 80060f6:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80060f8:	4b60      	ldr	r3, [pc, #384]	; (800627c <hanUniFontLoad+0x224>)
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b60      	ldr	r3, [pc, #384]	; (8006280 <hanUniFontLoad+0x228>)
 8006100:	5c9b      	ldrb	r3, [r3, r2]
 8006102:	b29a      	uxth	r2, r3
 8006104:	4b5d      	ldr	r3, [pc, #372]	; (800627c <hanUniFontLoad+0x224>)
 8006106:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8006108:	4b5b      	ldr	r3, [pc, #364]	; (8006278 <hanUniFontLoad+0x220>)
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	4b5d      	ldr	r3, [pc, #372]	; (8006284 <hanUniFontLoad+0x22c>)
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b29a      	uxth	r2, r3
 8006114:	4b58      	ldr	r3, [pc, #352]	; (8006278 <hanUniFontLoad+0x220>)
 8006116:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8006118:	4b55      	ldr	r3, [pc, #340]	; (8006270 <hanUniFontLoad+0x218>)
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	4b5a      	ldr	r3, [pc, #360]	; (8006288 <hanUniFontLoad+0x230>)
 8006120:	5c9b      	ldrb	r3, [r3, r2]
 8006122:	b29a      	uxth	r2, r3
 8006124:	4b52      	ldr	r3, [pc, #328]	; (8006270 <hanUniFontLoad+0x218>)
 8006126:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8006128:	4b51      	ldr	r3, [pc, #324]	; (8006270 <hanUniFontLoad+0x218>)
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <hanUniFontLoad+0xe6>
 8006130:	4b51      	ldr	r3, [pc, #324]	; (8006278 <hanUniFontLoad+0x220>)
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	4b55      	ldr	r3, [pc, #340]	; (800628c <hanUniFontLoad+0x234>)
 8006138:	5c9b      	ldrb	r3, [r3, r2]
 800613a:	b29b      	uxth	r3, r3
 800613c:	e005      	b.n	800614a <hanUniFontLoad+0xf2>
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <hanUniFontLoad+0x220>)
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	4b52      	ldr	r3, [pc, #328]	; (8006290 <hanUniFontLoad+0x238>)
 8006146:	5c9b      	ldrb	r3, [r3, r2]
 8006148:	b29b      	uxth	r3, r3
 800614a:	4a52      	ldr	r2, [pc, #328]	; (8006294 <hanUniFontLoad+0x23c>)
 800614c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800614e:	4b4b      	ldr	r3, [pc, #300]	; (800627c <hanUniFontLoad+0x224>)
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <hanUniFontLoad+0x112>
 8006156:	4b49      	ldr	r3, [pc, #292]	; (800627c <hanUniFontLoad+0x224>)
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d005      	beq.n	800616a <hanUniFontLoad+0x112>
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <hanUniFontLoad+0x224>)
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	2b10      	cmp	r3, #16
 8006164:	d001      	beq.n	800616a <hanUniFontLoad+0x112>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <hanUniFontLoad+0x114>
 800616a:	2300      	movs	r3, #0
 800616c:	b29b      	uxth	r3, r3
 800616e:	4a40      	ldr	r2, [pc, #256]	; (8006270 <hanUniFontLoad+0x218>)
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	2a00      	cmp	r2, #0
 8006174:	d001      	beq.n	800617a <hanUniFontLoad+0x122>
 8006176:	2202      	movs	r2, #2
 8006178:	e000      	b.n	800617c <hanUniFontLoad+0x124>
 800617a:	2200      	movs	r2, #0
 800617c:	4413      	add	r3, r2
 800617e:	b29a      	uxth	r2, r3
 8006180:	4b45      	ldr	r3, [pc, #276]	; (8006298 <hanUniFontLoad+0x240>)
 8006182:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8006184:	4b3c      	ldr	r3, [pc, #240]	; (8006278 <hanUniFontLoad+0x220>)
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	4b44      	ldr	r3, [pc, #272]	; (800629c <hanUniFontLoad+0x244>)
 800618c:	5c9b      	ldrb	r3, [r3, r2]
 800618e:	b29a      	uxth	r2, r3
 8006190:	4b43      	ldr	r3, [pc, #268]	; (80062a0 <hanUniFontLoad+0x248>)
 8006192:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8006194:	2300      	movs	r3, #0
 8006196:	81fb      	strh	r3, [r7, #14]
 8006198:	e035      	b.n	8006206 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800619a:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <hanUniFontLoad+0x23c>)
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	461a      	mov	r2, r3
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <hanUniFontLoad+0x224>)
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	441a      	add	r2, r3
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	493c      	ldr	r1, [pc, #240]	; (80062a4 <hanUniFontLoad+0x24c>)
 80061b4:	0152      	lsls	r2, r2, #5
 80061b6:	4413      	add	r3, r2
 80061b8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80061bc:	89fb      	ldrh	r3, [r7, #14]
 80061be:	b2d1      	uxtb	r1, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	4413      	add	r3, r2
 80061c4:	460a      	mov	r2, r1
 80061c6:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	4413      	add	r3, r2
 80061ce:	7999      	ldrb	r1, [r3, #6]
 80061d0:	4b31      	ldr	r3, [pc, #196]	; (8006298 <hanUniFontLoad+0x240>)
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	2316      	movs	r3, #22
 80061d8:	fb03 f302 	mul.w	r3, r3, r2
 80061dc:	33a0      	adds	r3, #160	; 0xa0
 80061de:	4a26      	ldr	r2, [pc, #152]	; (8006278 <hanUniFontLoad+0x220>)
 80061e0:	8812      	ldrh	r2, [r2, #0]
 80061e2:	441a      	add	r2, r3
 80061e4:	89fb      	ldrh	r3, [r7, #14]
 80061e6:	482f      	ldr	r0, [pc, #188]	; (80062a4 <hanUniFontLoad+0x24c>)
 80061e8:	0152      	lsls	r2, r2, #5
 80061ea:	4413      	add	r3, r2
 80061ec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	b2d1      	uxtb	r1, r2
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4413      	add	r3, r2
 80061fc:	460a      	mov	r2, r1
 80061fe:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8006200:	89fb      	ldrh	r3, [r7, #14]
 8006202:	3301      	adds	r3, #1
 8006204:	81fb      	strh	r3, [r7, #14]
 8006206:	89fb      	ldrh	r3, [r7, #14]
 8006208:	2b1f      	cmp	r3, #31
 800620a:	d9c6      	bls.n	800619a <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <hanUniFontLoad+0x218>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d025      	beq.n	8006260 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8006214:	2300      	movs	r3, #0
 8006216:	81fb      	strh	r3, [r7, #14]
 8006218:	e01f      	b.n	800625a <hanUniFontLoad+0x202>
 800621a:	89fb      	ldrh	r3, [r7, #14]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	4413      	add	r3, r2
 8006220:	7999      	ldrb	r1, [r3, #6]
 8006222:	4b1f      	ldr	r3, [pc, #124]	; (80062a0 <hanUniFontLoad+0x248>)
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	4613      	mov	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	33f8      	adds	r3, #248	; 0xf8
 8006232:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <hanUniFontLoad+0x218>)
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	441a      	add	r2, r3
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	481a      	ldr	r0, [pc, #104]	; (80062a4 <hanUniFontLoad+0x24c>)
 800623c:	0152      	lsls	r2, r2, #5
 800623e:	4413      	add	r3, r2
 8006240:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	430a      	orrs	r2, r1
 800624a:	b2d1      	uxtb	r1, r2
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	4413      	add	r3, r2
 8006250:	460a      	mov	r2, r1
 8006252:	719a      	strb	r2, [r3, #6]
 8006254:	89fb      	ldrh	r3, [r7, #14]
 8006256:	3301      	adds	r3, #1
 8006258:	81fb      	strh	r3, [r7, #14]
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	2b1f      	cmp	r3, #31
 800625e:	d9dc      	bls.n	800621a <hanUniFontLoad+0x1c2>
  }
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	24924925 	.word	0x24924925
 8006270:	2000a444 	.word	0x2000a444
 8006274:	86186187 	.word	0x86186187
 8006278:	2000a446 	.word	0x2000a446
 800627c:	2000a448 	.word	0x2000a448
 8006280:	0801168c 	.word	0x0801168c
 8006284:	080116ac 	.word	0x080116ac
 8006288:	080116cc 	.word	0x080116cc
 800628c:	08011704 	.word	0x08011704
 8006290:	080116ec 	.word	0x080116ec
 8006294:	2000a44a 	.word	0x2000a44a
 8006298:	2000a44c 	.word	0x2000a44c
 800629c:	0801171c 	.word	0x0801171c
 80062a0:	2000a44e 	.word	0x2000a44e
 80062a4:	08013c00 	.word	0x08013c00

080062a8 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 80062b8:	7b7b      	ldrb	r3, [r7, #13]
 80062ba:	3b20      	subs	r3, #32
 80062bc:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 80062be:	2300      	movs	r3, #0
 80062c0:	81fb      	strh	r3, [r7, #14]
 80062c2:	e00f      	b.n	80062e4 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 80062c4:	7b7a      	ldrb	r2, [r7, #13]
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	490b      	ldr	r1, [pc, #44]	; (80062f8 <hanEngFontLoad+0x50>)
 80062ca:	0112      	lsls	r2, r2, #4
 80062cc:	4413      	add	r3, r2
 80062ce:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80062d2:	89fb      	ldrh	r3, [r7, #14]
 80062d4:	b2d1      	uxtb	r1, r2
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	4413      	add	r3, r2
 80062da:	460a      	mov	r2, r1
 80062dc:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 80062de:	89fb      	ldrh	r3, [r7, #14]
 80062e0:	3301      	adds	r3, #1
 80062e2:	81fb      	strh	r3, [r7, #14]
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	2b0f      	cmp	r3, #15
 80062e8:	d9ec      	bls.n	80062c4 <hanEngFontLoad+0x1c>
  }
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	0800fe2c 	.word	0x0800fe2c

080062fc <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8006312:	89fb      	ldrh	r3, [r7, #14]
 8006314:	3bb0      	subs	r3, #176	; 0xb0
 8006316:	225e      	movs	r2, #94	; 0x5e
 8006318:	fb02 f203 	mul.w	r2, r2, r3
 800631c:	89bb      	ldrh	r3, [r7, #12]
 800631e:	3ba1      	subs	r3, #161	; 0xa1
 8006320:	4413      	add	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8006324:	4a05      	ldr	r2, [pc, #20]	; (800633c <hanCnvCodeWan2Johab+0x40>)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632c:	b29b      	uxth	r3, r3
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	08011740 	.word	0x08011740

08006340 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8006344:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <TransferDoneISR+0x30>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00d      	beq.n	800636a <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 800634e:	4b08      	ldr	r3, [pc, #32]	; (8006370 <TransferDoneISR+0x30>)
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006354:	2101      	movs	r1, #1
 8006356:	2002      	movs	r0, #2
 8006358:	f7fc fc2e 	bl	8002bb8 <gpioPinWrite>

    if (frameCallBack != NULL)
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <TransferDoneISR+0x34>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8006364:	4b03      	ldr	r3, [pc, #12]	; (8006374 <TransferDoneISR+0x34>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4798      	blx	r3
    }
  }
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	2000a458 	.word	0x2000a458
 8006374:	2000a454 	.word	0x2000a454

08006378 <st7735Init>:


bool st7735Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 800637e:	f000 f835 	bl	80063ec <st7735Reset>
 8006382:	4603      	mov	r3, r0
 8006384:	71fb      	strb	r3, [r7, #7]

  return ret;
 8006386:	79fb      	ldrb	r3, [r7, #7]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a0d      	ldr	r2, [pc, #52]	; (80063d0 <st7735InitDriver+0x40>)
 800639c:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <st7735InitDriver+0x44>)
 80063a2:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <st7735InitDriver+0x48>)
 80063a8:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a0b      	ldr	r2, [pc, #44]	; (80063dc <st7735InitDriver+0x4c>)
 80063ae:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <st7735InitDriver+0x50>)
 80063b4:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a0a      	ldr	r2, [pc, #40]	; (80063e4 <st7735InitDriver+0x54>)
 80063ba:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <st7735InitDriver+0x58>)
 80063c0:	619a      	str	r2, [r3, #24]
  return true;
 80063c2:	2301      	movs	r3, #1
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	08006379 	.word	0x08006379
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080066b1 	.word	0x080066b1
 80063dc:	08006465 	.word	0x08006465
 80063e0:	08006475 	.word	0x08006475
 80063e4:	08006905 	.word	0x08006905
 80063e8:	080068b9 	.word	0x080068b9

080063ec <st7735Reset>:

bool st7735Reset(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <st7735Reset+0x70>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fcca 	bl	8004d90 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 80063fc:	4b17      	ldr	r3, [pc, #92]	; (800645c <st7735Reset+0x70>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2100      	movs	r1, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fd20 	bl	8004e48 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8006408:	4b14      	ldr	r3, [pc, #80]	; (800645c <st7735Reset+0x70>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	4914      	ldr	r1, [pc, #80]	; (8006460 <st7735Reset+0x74>)
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fe52 	bl	80050b8 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8006414:	2100      	movs	r1, #0
 8006416:	2001      	movs	r0, #1
 8006418:	f7fc fbce 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 800641c:	2101      	movs	r1, #1
 800641e:	2003      	movs	r0, #3
 8006420:	f7fc fbca 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8006424:	2101      	movs	r1, #1
 8006426:	2002      	movs	r0, #2
 8006428:	f7fc fbc6 	bl	8002bb8 <gpioPinWrite>
  delay(10);
 800642c:	200a      	movs	r0, #10
 800642e:	f7fa fee1 	bl	80011f4 <delay>

  st7735InitRegs();
 8006432:	f000 f863 	bl	80064fc <st7735InitRegs>


  st7735SetRotation(1);
 8006436:	2001      	movs	r0, #1
 8006438:	f000 f910 	bl	800665c <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 800643c:	2300      	movs	r3, #0
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	22a0      	movs	r2, #160	; 0xa0
 8006444:	2100      	movs	r1, #0
 8006446:	2000      	movs	r0, #0
 8006448:	f000 f97e 	bl	8006748 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 800644c:	2100      	movs	r1, #0
 800644e:	2001      	movs	r0, #1
 8006450:	f7fc fbb2 	bl	8002bb8 <gpioPinWrite>
  return true;
 8006454:	2301      	movs	r3, #1
}
 8006456:	4618      	mov	r0, r3
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	2000a450 	.word	0x2000a450
 8006460:	08006341 	.word	0x08006341

08006464 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8006468:	23a0      	movs	r3, #160	; 0xa0
}
 800646a:	4618      	mov	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8006478:	2380      	movs	r3, #128	; 0x80
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <writecommand>:

void writecommand(uint8_t c)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 800648e:	2100      	movs	r1, #0
 8006490:	2003      	movs	r0, #3
 8006492:	f7fc fb91 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006496:	2100      	movs	r1, #0
 8006498:	2002      	movs	r0, #2
 800649a:	f7fc fb8d 	bl	8002bb8 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <writecommand+0x38>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	79fa      	ldrb	r2, [r7, #7]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fd64 	bl	8004f74 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80064ac:	2101      	movs	r1, #1
 80064ae:	2002      	movs	r0, #2
 80064b0:	f7fc fb82 	bl	8002bb8 <gpioPinWrite>
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	2000a450 	.word	0x2000a450

080064c0 <writedata>:

void writedata(uint8_t d)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80064ca:	2101      	movs	r1, #1
 80064cc:	2003      	movs	r0, #3
 80064ce:	f7fc fb73 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80064d2:	2100      	movs	r1, #0
 80064d4:	2002      	movs	r0, #2
 80064d6:	f7fc fb6f 	bl	8002bb8 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <writedata+0x38>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	79fa      	ldrb	r2, [r7, #7]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fd46 	bl	8004f74 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80064e8:	2101      	movs	r1, #1
 80064ea:	2002      	movs	r0, #2
 80064ec:	f7fc fb64 	bl	8002bb8 <gpioPinWrite>
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	2000a450 	.word	0x2000a450

080064fc <st7735InitRegs>:

void st7735InitRegs(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8006500:	2001      	movs	r0, #1
 8006502:	f7ff ffbf 	bl	8006484 <writecommand>
  delay(10);
 8006506:	200a      	movs	r0, #10
 8006508:	f7fa fe74 	bl	80011f4 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 800650c:	2011      	movs	r0, #17
 800650e:	f7ff ffb9 	bl	8006484 <writecommand>
  delay(10);
 8006512:	200a      	movs	r0, #10
 8006514:	f7fa fe6e 	bl	80011f4 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8006518:	20b1      	movs	r0, #177	; 0xb1
 800651a:	f7ff ffb3 	bl	8006484 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800651e:	2001      	movs	r0, #1
 8006520:	f7ff ffce 	bl	80064c0 <writedata>
  writedata(0x2C);
 8006524:	202c      	movs	r0, #44	; 0x2c
 8006526:	f7ff ffcb 	bl	80064c0 <writedata>
  writedata(0x2D);
 800652a:	202d      	movs	r0, #45	; 0x2d
 800652c:	f7ff ffc8 	bl	80064c0 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8006530:	20b2      	movs	r0, #178	; 0xb2
 8006532:	f7ff ffa7 	bl	8006484 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8006536:	2001      	movs	r0, #1
 8006538:	f7ff ffc2 	bl	80064c0 <writedata>
  writedata(0x2C);
 800653c:	202c      	movs	r0, #44	; 0x2c
 800653e:	f7ff ffbf 	bl	80064c0 <writedata>
  writedata(0x2D);
 8006542:	202d      	movs	r0, #45	; 0x2d
 8006544:	f7ff ffbc 	bl	80064c0 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8006548:	20b3      	movs	r0, #179	; 0xb3
 800654a:	f7ff ff9b 	bl	8006484 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 800654e:	2001      	movs	r0, #1
 8006550:	f7ff ffb6 	bl	80064c0 <writedata>
  writedata(0x2C);
 8006554:	202c      	movs	r0, #44	; 0x2c
 8006556:	f7ff ffb3 	bl	80064c0 <writedata>
  writedata(0x2D);
 800655a:	202d      	movs	r0, #45	; 0x2d
 800655c:	f7ff ffb0 	bl	80064c0 <writedata>
  writedata(0x01);              //     Line inversion mode
 8006560:	2001      	movs	r0, #1
 8006562:	f7ff ffad 	bl	80064c0 <writedata>
  writedata(0x2C);
 8006566:	202c      	movs	r0, #44	; 0x2c
 8006568:	f7ff ffaa 	bl	80064c0 <writedata>
  writedata(0x2D);
 800656c:	202d      	movs	r0, #45	; 0x2d
 800656e:	f7ff ffa7 	bl	80064c0 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8006572:	20b4      	movs	r0, #180	; 0xb4
 8006574:	f7ff ff86 	bl	8006484 <writecommand>
  writedata(0x07);              //     No inversion
 8006578:	2007      	movs	r0, #7
 800657a:	f7ff ffa1 	bl	80064c0 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 800657e:	20c0      	movs	r0, #192	; 0xc0
 8006580:	f7ff ff80 	bl	8006484 <writecommand>
  writedata(0xA2);
 8006584:	20a2      	movs	r0, #162	; 0xa2
 8006586:	f7ff ff9b 	bl	80064c0 <writedata>
  writedata(0x02);              //     -4.6V
 800658a:	2002      	movs	r0, #2
 800658c:	f7ff ff98 	bl	80064c0 <writedata>
  writedata(0x84);              //     AUTO mode
 8006590:	2084      	movs	r0, #132	; 0x84
 8006592:	f7ff ff95 	bl	80064c0 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8006596:	20c1      	movs	r0, #193	; 0xc1
 8006598:	f7ff ff74 	bl	8006484 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 800659c:	20c5      	movs	r0, #197	; 0xc5
 800659e:	f7ff ff8f 	bl	80064c0 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80065a2:	20c2      	movs	r0, #194	; 0xc2
 80065a4:	f7ff ff6e 	bl	8006484 <writecommand>
  writedata(0x0A);              //     Opamp current small
 80065a8:	200a      	movs	r0, #10
 80065aa:	f7ff ff89 	bl	80064c0 <writedata>
  writedata(0x00);              //     Boost frequency
 80065ae:	2000      	movs	r0, #0
 80065b0:	f7ff ff86 	bl	80064c0 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80065b4:	20c3      	movs	r0, #195	; 0xc3
 80065b6:	f7ff ff65 	bl	8006484 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80065ba:	208a      	movs	r0, #138	; 0x8a
 80065bc:	f7ff ff80 	bl	80064c0 <writedata>
  writedata(0x2A);
 80065c0:	202a      	movs	r0, #42	; 0x2a
 80065c2:	f7ff ff7d 	bl	80064c0 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80065c6:	20c4      	movs	r0, #196	; 0xc4
 80065c8:	f7ff ff5c 	bl	8006484 <writecommand>
  writedata(0x8A);
 80065cc:	208a      	movs	r0, #138	; 0x8a
 80065ce:	f7ff ff77 	bl	80064c0 <writedata>
  writedata(0xEE);
 80065d2:	20ee      	movs	r0, #238	; 0xee
 80065d4:	f7ff ff74 	bl	80064c0 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 80065d8:	20c5      	movs	r0, #197	; 0xc5
 80065da:	f7ff ff53 	bl	8006484 <writecommand>
  writedata(0x0E);
 80065de:	200e      	movs	r0, #14
 80065e0:	f7ff ff6e 	bl	80064c0 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 80065e4:	2020      	movs	r0, #32
 80065e6:	f7ff ff4d 	bl	8006484 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 80065ea:	2036      	movs	r0, #54	; 0x36
 80065ec:	f7ff ff4a 	bl	8006484 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 80065f0:	20c8      	movs	r0, #200	; 0xc8
 80065f2:	f7ff ff65 	bl	80064c0 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 80065f6:	203a      	movs	r0, #58	; 0x3a
 80065f8:	f7ff ff44 	bl	8006484 <writecommand>
  writedata(0x05);              //     16-bit color
 80065fc:	2005      	movs	r0, #5
 80065fe:	f7ff ff5f 	bl	80064c0 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8006602:	202a      	movs	r0, #42	; 0x2a
 8006604:	f7ff ff3e 	bl	8006484 <writecommand>
  writedata(0x00);
 8006608:	2000      	movs	r0, #0
 800660a:	f7ff ff59 	bl	80064c0 <writedata>
  writedata(0x00);              //     XSTART = 0
 800660e:	2000      	movs	r0, #0
 8006610:	f7ff ff56 	bl	80064c0 <writedata>
  writedata(0x00);
 8006614:	2000      	movs	r0, #0
 8006616:	f7ff ff53 	bl	80064c0 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 800661a:	209f      	movs	r0, #159	; 0x9f
 800661c:	f7ff ff50 	bl	80064c0 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8006620:	202b      	movs	r0, #43	; 0x2b
 8006622:	f7ff ff2f 	bl	8006484 <writecommand>
  writedata(0x00);
 8006626:	2000      	movs	r0, #0
 8006628:	f7ff ff4a 	bl	80064c0 <writedata>
  writedata(0x00);              //     XSTART = 0
 800662c:	2000      	movs	r0, #0
 800662e:	f7ff ff47 	bl	80064c0 <writedata>
  writedata(0x00);
 8006632:	2000      	movs	r0, #0
 8006634:	f7ff ff44 	bl	80064c0 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8006638:	207f      	movs	r0, #127	; 0x7f
 800663a:	f7ff ff41 	bl	80064c0 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 800663e:	2013      	movs	r0, #19
 8006640:	f7ff ff20 	bl	8006484 <writecommand>
  delay(10);
 8006644:	200a      	movs	r0, #10
 8006646:	f7fa fdd5 	bl	80011f4 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 800664a:	2029      	movs	r0, #41	; 0x29
 800664c:	f7ff ff1a 	bl	8006484 <writecommand>
  delay(10);
 8006650:	200a      	movs	r0, #10
 8006652:	f7fa fdcf 	bl	80011f4 <delay>
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8006666:	2036      	movs	r0, #54	; 0x36
 8006668:	f7ff ff0c 	bl	8006484 <writecommand>

  switch (mode)
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d81a      	bhi.n	80066a8 <st7735SetRotation+0x4c>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <st7735SetRotation+0x1c>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	08006689 	.word	0x08006689
 800667c:	08006691 	.word	0x08006691
 8006680:	08006699 	.word	0x08006699
 8006684:	080066a1 	.word	0x080066a1
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8006688:	20c8      	movs	r0, #200	; 0xc8
 800668a:	f7ff ff19 	bl	80064c0 <writedata>
     break;
 800668e:	e00b      	b.n	80066a8 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8006690:	20a8      	movs	r0, #168	; 0xa8
 8006692:	f7ff ff15 	bl	80064c0 <writedata>
     break;
 8006696:	e007      	b.n	80066a8 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8006698:	2008      	movs	r0, #8
 800669a:	f7ff ff11 	bl	80064c0 <writedata>
    break;
 800669e:	e003      	b.n	80066a8 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 80066a0:	2068      	movs	r0, #104	; 0x68
 80066a2:	f7ff ff0d 	bl	80064c0 <writedata>
     break;
 80066a6:	bf00      	nop
  }
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <st7735SetWindow+0x94>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2108      	movs	r1, #8
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fc25 	bl	8004f14 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 80066ca:	202a      	movs	r0, #42	; 0x2a
 80066cc:	f7ff feda 	bl	8006484 <writecommand>
  writedata(0x00);
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7ff fef5 	bl	80064c0 <writedata>
  writedata(x0+colstart);     // XSTART
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	4413      	add	r3, r2
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff feec 	bl	80064c0 <writedata>
  writedata(0x00);
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7ff fee9 	bl	80064c0 <writedata>
  writedata(x1+colstart);     // XEND
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	2300      	movs	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff fee0 	bl	80064c0 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8006700:	202b      	movs	r0, #43	; 0x2b
 8006702:	f7ff febf 	bl	8006484 <writecommand>
  writedata(0x00);
 8006706:	2000      	movs	r0, #0
 8006708:	f7ff feda 	bl	80064c0 <writedata>
  writedata(y0+rowstart);     // YSTART
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	4413      	add	r3, r2
 8006716:	b2db      	uxtb	r3, r3
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fed1 	bl	80064c0 <writedata>
  writedata(0x00);
 800671e:	2000      	movs	r0, #0
 8006720:	f7ff fece 	bl	80064c0 <writedata>
  writedata(y1+rowstart);     // YEND
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4413      	add	r3, r2
 800672e:	b2db      	uxtb	r3, r3
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fec5 	bl	80064c0 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8006736:	202c      	movs	r0, #44	; 0x2c
 8006738:	f7ff fea4 	bl	8006484 <writecommand>
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	2000a450 	.word	0x2000a450

08006748 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8006748:	b5b0      	push	{r4, r5, r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	466b      	mov	r3, sp
 8006758:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	1e43      	subs	r3, r0, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	4603      	mov	r3, r0
 8006762:	4619      	mov	r1, r3
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	f04f 0400 	mov.w	r4, #0
 8006770:	0114      	lsls	r4, r2, #4
 8006772:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8006776:	010b      	lsls	r3, r1, #4
 8006778:	4603      	mov	r3, r0
 800677a:	4619      	mov	r1, r3
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	f04f 0400 	mov.w	r4, #0
 8006788:	0114      	lsls	r4, r2, #4
 800678a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800678e:	010b      	lsls	r3, r1, #4
 8006790:	4603      	mov	r3, r0
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	3301      	adds	r3, #1
 8006796:	3307      	adds	r3, #7
 8006798:	08db      	lsrs	r3, r3, #3
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	ebad 0d03 	sub.w	sp, sp, r3
 80067a0:	466b      	mov	r3, sp
 80067a2:	3301      	adds	r3, #1
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80067aa:	22a0      	movs	r2, #160	; 0xa0
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	da78      	bge.n	80068a4 <st7735FillRect+0x15c>
 80067b2:	2280      	movs	r2, #128	; 0x80
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	da74      	bge.n	80068a4 <st7735FillRect+0x15c>

  if (x < 0) { w += x; x = 0; }
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da05      	bge.n	80067cc <st7735FillRect+0x84>
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da05      	bge.n	80067de <st7735FillRect+0x96>
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4413      	add	r3, r2
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	22a0      	movs	r2, #160	; 0xa0
 80067e6:	4293      	cmp	r3, r2
 80067e8:	dd03      	ble.n	80067f2 <st7735FillRect+0xaa>
 80067ea:	22a0      	movs	r2, #160	; 0xa0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4413      	add	r3, r2
 80067f8:	2280      	movs	r2, #128	; 0x80
 80067fa:	4293      	cmp	r3, r2
 80067fc:	dd03      	ble.n	8006806 <st7735FillRect+0xbe>
 80067fe:	2280      	movs	r2, #128	; 0x80
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	dd4d      	ble.n	80068a8 <st7735FillRect+0x160>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	dd4a      	ble.n	80068a8 <st7735FillRect+0x160>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4413      	add	r3, r2
 8006818:	1e59      	subs	r1, r3, #1
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	4413      	add	r3, r2
 8006820:	3b01      	subs	r3, #1
 8006822:	460a      	mov	r2, r1
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff42 	bl	80066b0 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 800682c:	4b21      	ldr	r3, [pc, #132]	; (80068b4 <st7735FillRect+0x16c>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2110      	movs	r1, #16
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fb6e 	bl	8004f14 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8006838:	2101      	movs	r1, #1
 800683a:	2003      	movs	r0, #3
 800683c:	f7fc f9bc 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8006840:	2100      	movs	r1, #0
 8006842:	2002      	movs	r0, #2
 8006844:	f7fc f9b8 	bl	8002bb8 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	e008      	b.n	8006860 <st7735FillRect+0x118>
  {
    line_buf[i] = color;
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	b299      	uxth	r1, r3
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	dbf2      	blt.n	800684e <st7735FillRect+0x106>
  }
  for (int i=0; i<h; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00e      	b.n	800688c <st7735FillRect+0x144>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 800686e:	6939      	ldr	r1, [r7, #16]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	230a      	movs	r3, #10
 8006874:	2000      	movs	r0, #0
 8006876:	f7fe fbcf 	bl	8005018 <spiDmaTxTransfer>
 800687a:	4603      	mov	r3, r0
 800687c:	f083 0301 	eor.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d107      	bne.n	8006896 <st7735FillRect+0x14e>
  for (int i=0; i<h; i++)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3301      	adds	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	dbec      	blt.n	800686e <st7735FillRect+0x126>
 8006894:	e000      	b.n	8006898 <st7735FillRect+0x150>
    {
      break;
 8006896:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8006898:	2101      	movs	r1, #1
 800689a:	2002      	movs	r0, #2
 800689c:	f7fc f98c 	bl	8002bb8 <gpioPinWrite>
 80068a0:	46ad      	mov	sp, r5
 80068a2:	e003      	b.n	80068ac <st7735FillRect+0x164>
  if ((x >= _width) || (y >= _height)) return;
 80068a4:	bf00      	nop
 80068a6:	e000      	b.n	80068aa <st7735FillRect+0x162>
  if ((w < 1) || (h < 1)) return;
 80068a8:	bf00      	nop
 80068aa:	46ad      	mov	sp, r5
}
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bdb0      	pop	{r4, r5, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2000a450 	.word	0x2000a450

080068b8 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <st7735SendBuffer+0x44>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <st7735SendBuffer+0x48>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2110      	movs	r1, #16
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe fb1f 	bl	8004f14 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80068d6:	2101      	movs	r1, #1
 80068d8:	2003      	movs	r0, #3
 80068da:	f7fc f96d 	bl	8002bb8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80068de:	2100      	movs	r1, #0
 80068e0:	2002      	movs	r0, #2
 80068e2:	f7fc f969 	bl	8002bb8 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 80068e6:	2300      	movs	r3, #0
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7fe fb93 	bl	8005018 <spiDmaTxTransfer>
  return true;
 80068f2:	2301      	movs	r3, #1
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	2000a458 	.word	0x2000a458
 8006900:	2000a450 	.word	0x2000a450

08006904 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 800690c:	4a04      	ldr	r2, [pc, #16]	; (8006920 <st7735SetCallBack+0x1c>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]

  return true;
 8006912:	2301      	movs	r3, #1
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	2000a454 	.word	0x2000a454

08006924 <hwInit>:




void hwInit(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  bspInit();
 8006928:	f7fa fc3a 	bl	80011a0 <bspInit>

  cliInit();
 800692c:	f7fa ffbe 	bl	80018ac <cliInit>
  ledInit();
 8006930:	f7fd f920 	bl	8003b74 <ledInit>
  uartInit();
 8006934:	f7fe ff14 	bl	8005760 <uartInit>
  spiInit();
 8006938:	f7fe f9d8 	bl	8004cec <spiInit>
  DWT_Delay_Init();
 800693c:	f7fa fe7e 	bl	800163c <DWT_Delay_Init>
  buttonInit();
 8006940:	f7fa feac 	bl	800169c <buttonInit>
  gpioInit();
 8006944:	f7fc f86e 	bl	8002a24 <gpioInit>
  Ds18b20_Init();
 8006948:	f7fb fef8 	bl	800273c <Ds18b20_Init>
  sonarInit();
 800694c:	f7fd fff8 	bl	8004940 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8006950:	f7fc fa96 	bl	8002e80 <lcdInit>
  tdsInit();
 8006954:	f7fe fcc6 	bl	80052e4 <tdsInit>

  sdInit();
 8006958:	f7fd fc96 	bl	8004288 <sdInit>
}
 800695c:	bf00      	nop
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006964:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <HAL_Init+0x40>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <HAL_Init+0x40>)
 800696a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800696e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_Init+0x40>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0a      	ldr	r2, [pc, #40]	; (80069a0 <HAL_Init+0x40>)
 8006976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800697a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <HAL_Init+0x40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <HAL_Init+0x40>)
 8006982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006988:	2003      	movs	r0, #3
 800698a:	f000 fea9 	bl	80076e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800698e:	2000      	movs	r0, #0
 8006990:	f000 f808 	bl	80069a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006994:	f7fa fcac 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40023c00 	.word	0x40023c00

080069a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069ac:	4b12      	ldr	r3, [pc, #72]	; (80069f8 <HAL_InitTick+0x54>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_InitTick+0x58>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fecf 	bl	8007766 <HAL_SYSTICK_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e00e      	b.n	80069f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d80a      	bhi.n	80069ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069d8:	2200      	movs	r2, #0
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	f000 fe89 	bl	80076f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069e4:	4a06      	ldr	r2, [pc, #24]	; (8006a00 <HAL_InitTick+0x5c>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000000 	.word	0x20000000
 80069fc:	2000005c 	.word	0x2000005c
 8006a00:	20000058 	.word	0x20000058

08006a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_IncTick+0x20>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_IncTick+0x24>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4413      	add	r3, r2
 8006a14:	4a04      	ldr	r2, [pc, #16]	; (8006a28 <HAL_IncTick+0x24>)
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000005c 	.word	0x2000005c
 8006a28:	2000acf0 	.word	0x2000acf0

08006a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <HAL_GetTick+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2000acf0 	.word	0x2000acf0

08006a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a4c:	f7ff ffee 	bl	8006a2c <HAL_GetTick>
 8006a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d005      	beq.n	8006a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_Delay+0x40>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a6a:	bf00      	nop
 8006a6c:	f7ff ffde 	bl	8006a2c <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d8f7      	bhi.n	8006a6c <HAL_Delay+0x28>
  {
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	2000005c 	.word	0x2000005c

08006a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e033      	b.n	8006b06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fe fdc4 	bl	8005634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f003 0310 	and.w	r3, r3, #16
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d118      	bne.n	8006af8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ace:	f023 0302 	bic.w	r3, r3, #2
 8006ad2:	f043 0202 	orr.w	r2, r3, #2
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fb86 	bl	80071ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	f043 0201 	orr.w	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
 8006af6:	e001      	b.n	8006afc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d049      	beq.n	8006be4 <HAL_ADC_IRQHandler+0xd6>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d046      	beq.n	8006be4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d12b      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d127      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d006      	beq.n	8006ba0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d119      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0220 	bic.w	r2, r2, #32
 8006bae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	f043 0201 	orr.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9af 	bl	8006f38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f06f 0212 	mvn.w	r2, #18
 8006be2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c04:	2b80      	cmp	r3, #128	; 0x80
 8006c06:	bf0c      	ite	eq
 8006c08:	2301      	moveq	r3, #1
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d057      	beq.n	8006cc6 <HAL_ADC_IRQHandler+0x1b8>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d054      	beq.n	8006cc6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d139      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d12b      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d124      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d11d      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d119      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc16 	bl	80074e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 020c 	mvn.w	r2, #12
 8006cc4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d017      	beq.n	8006d28 <HAL_ADC_IRQHandler+0x21a>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d014      	beq.n	8006d28 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10d      	bne.n	8006d28 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f921 	bl	8006f60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f06f 0201 	mvn.w	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	bf0c      	ite	eq
 8006d36:	2301      	moveq	r3, #1
 8006d38:	2300      	movne	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d015      	beq.n	8006d88 <HAL_ADC_IRQHandler+0x27a>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d012      	beq.n	8006d88 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	f043 0202 	orr.w	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f06f 0220 	mvn.w	r2, #32
 8006d76:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8fb 	bl	8006f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0220 	mvn.w	r2, #32
 8006d86:	601a      	str	r2, [r3, #0]
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_ADC_Start_DMA+0x1e>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e0b1      	b.n	8006f12 <HAL_ADC_Start_DMA+0x182>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d018      	beq.n	8006df6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006dd4:	4b51      	ldr	r3, [pc, #324]	; (8006f1c <HAL_ADC_Start_DMA+0x18c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a51      	ldr	r2, [pc, #324]	; (8006f20 <HAL_ADC_Start_DMA+0x190>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0c9a      	lsrs	r2, r3, #18
 8006de0:	4613      	mov	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	4413      	add	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006de8:	e002      	b.n	8006df0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f9      	bne.n	8006dea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	f040 8085 	bne.w	8006f10 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e44:	d106      	bne.n	8006e54 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	f023 0206 	bic.w	r2, r3, #6
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	645a      	str	r2, [r3, #68]	; 0x44
 8006e52:	e002      	b.n	8006e5a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e62:	4b30      	ldr	r3, [pc, #192]	; (8006f24 <HAL_ADC_Start_DMA+0x194>)
 8006e64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	4a2f      	ldr	r2, [pc, #188]	; (8006f28 <HAL_ADC_Start_DMA+0x198>)
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4a2e      	ldr	r2, [pc, #184]	; (8006f2c <HAL_ADC_Start_DMA+0x19c>)
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	4a2d      	ldr	r2, [pc, #180]	; (8006f30 <HAL_ADC_Start_DMA+0x1a0>)
 8006e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	334c      	adds	r3, #76	; 0x4c
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f000 fd6e 	bl	8007998 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10f      	bne.n	8006ee8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11c      	bne.n	8006f10 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ee4:	609a      	str	r2, [r3, #8]
 8006ee6:	e013      	b.n	8006f10 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <HAL_ADC_Start_DMA+0x1a4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d10e      	bne.n	8006f10 <HAL_ADC_Start_DMA+0x180>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f0e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000000 	.word	0x20000000
 8006f20:	431bde83 	.word	0x431bde83
 8006f24:	40012300 	.word	0x40012300
 8006f28:	080073e5 	.word	0x080073e5
 8006f2c:	0800749f 	.word	0x0800749f
 8006f30:	080074bb 	.word	0x080074bb
 8006f34:	40012000 	.word	0x40012000

08006f38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x1c>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e113      	b.n	80071cc <HAL_ADC_ConfigChannel+0x244>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b09      	cmp	r3, #9
 8006fb2:	d925      	bls.n	8007000 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68d9      	ldr	r1, [r3, #12]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3b1e      	subs	r3, #30
 8006fca:	2207      	movs	r2, #7
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	43da      	mvns	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	400a      	ands	r2, r1
 8006fd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68d9      	ldr	r1, [r3, #12]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4618      	mov	r0, r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	4403      	add	r3, r0
 8006ff2:	3b1e      	subs	r3, #30
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	e022      	b.n	8007046 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6919      	ldr	r1, [r3, #16]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	4613      	mov	r3, r2
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	4413      	add	r3, r2
 8007014:	2207      	movs	r2, #7
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43da      	mvns	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	400a      	ands	r2, r1
 8007022:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6919      	ldr	r1, [r3, #16]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	4618      	mov	r0, r3
 8007036:	4603      	mov	r3, r0
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	4403      	add	r3, r0
 800703c:	409a      	lsls	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b06      	cmp	r3, #6
 800704c:	d824      	bhi.n	8007098 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	3b05      	subs	r3, #5
 8007060:	221f      	movs	r2, #31
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	43da      	mvns	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	400a      	ands	r2, r1
 800706e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	4618      	mov	r0, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	3b05      	subs	r3, #5
 800708a:	fa00 f203 	lsl.w	r2, r0, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	635a      	str	r2, [r3, #52]	; 0x34
 8007096:	e04c      	b.n	8007132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d824      	bhi.n	80070ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	3b23      	subs	r3, #35	; 0x23
 80070b2:	221f      	movs	r2, #31
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	43da      	mvns	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	400a      	ands	r2, r1
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	4618      	mov	r0, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	3b23      	subs	r3, #35	; 0x23
 80070dc:	fa00 f203 	lsl.w	r2, r0, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
 80070e8:	e023      	b.n	8007132 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	3b41      	subs	r3, #65	; 0x41
 80070fc:	221f      	movs	r2, #31
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	43da      	mvns	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	400a      	ands	r2, r1
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	4618      	mov	r0, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	3b41      	subs	r3, #65	; 0x41
 8007126:	fa00 f203 	lsl.w	r2, r0, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007132:	4b29      	ldr	r3, [pc, #164]	; (80071d8 <HAL_ADC_ConfigChannel+0x250>)
 8007134:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a28      	ldr	r2, [pc, #160]	; (80071dc <HAL_ADC_ConfigChannel+0x254>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d10f      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x1d8>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b12      	cmp	r3, #18
 8007146:	d10b      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <HAL_ADC_ConfigChannel+0x254>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d12b      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x23a>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <HAL_ADC_ConfigChannel+0x258>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <HAL_ADC_ConfigChannel+0x1f4>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b11      	cmp	r3, #17
 800717a:	d122      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a11      	ldr	r2, [pc, #68]	; (80071e0 <HAL_ADC_ConfigChannel+0x258>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d111      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <HAL_ADC_ConfigChannel+0x25c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a11      	ldr	r2, [pc, #68]	; (80071e8 <HAL_ADC_ConfigChannel+0x260>)
 80071a4:	fba2 2303 	umull	r2, r3, r2, r3
 80071a8:	0c9a      	lsrs	r2, r3, #18
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071b4:	e002      	b.n	80071bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f9      	bne.n	80071b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40012300 	.word	0x40012300
 80071dc:	40012000 	.word	0x40012000
 80071e0:	10000012 	.word	0x10000012
 80071e4:	20000000 	.word	0x20000000
 80071e8:	431bde83 	.word	0x431bde83

080071ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071f4:	4b79      	ldr	r3, [pc, #484]	; (80073dc <ADC_Init+0x1f0>)
 80071f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6859      	ldr	r1, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	021a      	lsls	r2, r3, #8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	4a58      	ldr	r2, [pc, #352]	; (80073e0 <ADC_Init+0x1f4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d022      	beq.n	80072ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007292:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6899      	ldr	r1, [r3, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6899      	ldr	r1, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	609a      	str	r2, [r3, #8]
 80072c8:	e00f      	b.n	80072ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0202 	bic.w	r2, r2, #2
 80072f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6899      	ldr	r1, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7e1b      	ldrb	r3, [r3, #24]
 8007304:	005a      	lsls	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01b      	beq.n	8007350 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007326:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007336:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6859      	ldr	r1, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	3b01      	subs	r3, #1
 8007344:	035a      	lsls	r2, r3, #13
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	e007      	b.n	8007360 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800735e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	3b01      	subs	r3, #1
 800737c:	051a      	lsls	r2, r3, #20
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6899      	ldr	r1, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073a2:	025a      	lsls	r2, r3, #9
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6899      	ldr	r1, [r3, #8]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	029a      	lsls	r2, r3, #10
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40012300 	.word	0x40012300
 80073e0:	0f000001 	.word	0x0f000001

080073e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d13c      	bne.n	8007478 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d12b      	bne.n	8007470 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800741c:	2b00      	cmp	r3, #0
 800741e:	d127      	bne.n	8007470 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800742a:	2b00      	cmp	r3, #0
 800742c:	d006      	beq.n	800743c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007438:	2b00      	cmp	r3, #0
 800743a:	d119      	bne.n	8007470 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0220 	bic.w	r2, r2, #32
 800744a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f043 0201 	orr.w	r2, r3, #1
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f7ff fd61 	bl	8006f38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007476:	e00e      	b.n	8007496 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff fd75 	bl	8006f74 <HAL_ADC_ErrorCallback>
}
 800748a:	e004      	b.n	8007496 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff fd4d 	bl	8006f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	f043 0204 	orr.w	r2, r3, #4
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f7ff fd4a 	bl	8006f74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <__NVIC_SetPriorityGrouping+0x44>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007518:	4013      	ands	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800752e:	4a04      	ldr	r2, [pc, #16]	; (8007540 <__NVIC_SetPriorityGrouping+0x44>)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	60d3      	str	r3, [r2, #12]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__NVIC_GetPriorityGrouping+0x18>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	0a1b      	lsrs	r3, r3, #8
 800754e:	f003 0307 	and.w	r3, r3, #7
}
 8007552:	4618      	mov	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	e000ed00 	.word	0xe000ed00

08007560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800756a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	db0b      	blt.n	800758a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	f003 021f 	and.w	r2, r3, #31
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <__NVIC_EnableIRQ+0x38>)
 800757a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	2001      	movs	r0, #1
 8007582:	fa00 f202 	lsl.w	r2, r0, r2
 8007586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000e100 	.word	0xe000e100

0800759c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	db10      	blt.n	80075d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	f003 021f 	and.w	r2, r3, #31
 80075b4:	4909      	ldr	r1, [pc, #36]	; (80075dc <__NVIC_DisableIRQ+0x40>)
 80075b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	2001      	movs	r0, #1
 80075be:	fa00 f202 	lsl.w	r2, r0, r2
 80075c2:	3320      	adds	r3, #32
 80075c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	e000e100 	.word	0xe000e100

080075e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	db0a      	blt.n	800760a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	490c      	ldr	r1, [pc, #48]	; (800762c <__NVIC_SetPriority+0x4c>)
 80075fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fe:	0112      	lsls	r2, r2, #4
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	440b      	add	r3, r1
 8007604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007608:	e00a      	b.n	8007620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	b2da      	uxtb	r2, r3
 800760e:	4908      	ldr	r1, [pc, #32]	; (8007630 <__NVIC_SetPriority+0x50>)
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	3b04      	subs	r3, #4
 8007618:	0112      	lsls	r2, r2, #4
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	440b      	add	r3, r1
 800761e:	761a      	strb	r2, [r3, #24]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	e000e100 	.word	0xe000e100
 8007630:	e000ed00 	.word	0xe000ed00

08007634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007634:	b480      	push	{r7}
 8007636:	b089      	sub	sp, #36	; 0x24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f1c3 0307 	rsb	r3, r3, #7
 800764e:	2b04      	cmp	r3, #4
 8007650:	bf28      	it	cs
 8007652:	2304      	movcs	r3, #4
 8007654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3304      	adds	r3, #4
 800765a:	2b06      	cmp	r3, #6
 800765c:	d902      	bls.n	8007664 <NVIC_EncodePriority+0x30>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3b03      	subs	r3, #3
 8007662:	e000      	b.n	8007666 <NVIC_EncodePriority+0x32>
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007668:	f04f 32ff 	mov.w	r2, #4294967295
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	401a      	ands	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800767c:	f04f 31ff 	mov.w	r1, #4294967295
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	fa01 f303 	lsl.w	r3, r1, r3
 8007686:	43d9      	mvns	r1, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800768c:	4313      	orrs	r3, r2
         );
}
 800768e:	4618      	mov	r0, r3
 8007690:	3724      	adds	r7, #36	; 0x24
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ac:	d301      	bcc.n	80076b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076ae:	2301      	movs	r3, #1
 80076b0:	e00f      	b.n	80076d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076b2:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <SysTick_Config+0x40>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076ba:	210f      	movs	r1, #15
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	f7ff ff8e 	bl	80075e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <SysTick_Config+0x40>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076ca:	4b04      	ldr	r3, [pc, #16]	; (80076dc <SysTick_Config+0x40>)
 80076cc:	2207      	movs	r2, #7
 80076ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	e000e010 	.word	0xe000e010

080076e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff ff07 	bl	80074fc <__NVIC_SetPriorityGrouping>
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b086      	sub	sp, #24
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	4603      	mov	r3, r0
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
 8007702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007708:	f7ff ff1c 	bl	8007544 <__NVIC_GetPriorityGrouping>
 800770c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	6978      	ldr	r0, [r7, #20]
 8007714:	f7ff ff8e 	bl	8007634 <NVIC_EncodePriority>
 8007718:	4602      	mov	r2, r0
 800771a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff5d 	bl	80075e0 <__NVIC_SetPriority>
}
 8007726:	bf00      	nop
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	4603      	mov	r3, r0
 8007736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff ff0f 	bl	8007560 <__NVIC_EnableIRQ>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	4603      	mov	r3, r0
 8007752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff ff1f 	bl	800759c <__NVIC_DisableIRQ>
}
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff94 	bl	800769c <SysTick_Config>
 8007774:	4603      	mov	r3, r0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800778c:	f7ff f94e 	bl	8006a2c <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e099      	b.n	80078d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077bc:	e00f      	b.n	80077de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077be:	f7ff f935 	bl	8006a2c <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b05      	cmp	r3, #5
 80077ca:	d908      	bls.n	80077de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e078      	b.n	80078d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e8      	bne.n	80077be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4b38      	ldr	r3, [pc, #224]	; (80078d8 <HAL_DMA_Init+0x158>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800780a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2b04      	cmp	r3, #4
 8007836:	d107      	bne.n	8007848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	4313      	orrs	r3, r2
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b04      	cmp	r3, #4
 8007870:	d117      	bne.n	80078a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00e      	beq.n	80078a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fafb 	bl	8007e80 <DMA_CheckFifoParam>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2240      	movs	r2, #64	; 0x40
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800789e:	2301      	movs	r3, #1
 80078a0:	e016      	b.n	80078d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fab2 	bl	8007e14 <DMA_CalcBaseAndBitshift>
 80078b0:	4603      	mov	r3, r0
 80078b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	223f      	movs	r2, #63	; 0x3f
 80078ba:	409a      	lsls	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	f010803f 	.word	0xf010803f

080078dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e050      	b.n	8007990 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d101      	bne.n	80078fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
 80078fc:	e048      	b.n	8007990 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0201 	bic.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2200      	movs	r2, #0
 800792c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2221      	movs	r2, #33	; 0x21
 800793c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa68 	bl	8007e14 <DMA_CalcBaseAndBitshift>
 8007944:	4603      	mov	r3, r0
 8007946:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007970:	223f      	movs	r2, #63	; 0x3f
 8007972:	409a      	lsls	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d101      	bne.n	80079be <HAL_DMA_Start_IT+0x26>
 80079ba:	2302      	movs	r3, #2
 80079bc:	e040      	b.n	8007a40 <HAL_DMA_Start_IT+0xa8>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d12f      	bne.n	8007a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 f9e6 	bl	8007db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f0:	223f      	movs	r2, #63	; 0x3f
 80079f2:	409a      	lsls	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0216 	orr.w	r2, r2, #22
 8007a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0201 	orr.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e005      	b.n	8007a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d004      	beq.n	8007a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e00c      	b.n	8007a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2205      	movs	r2, #5
 8007a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a98:	4b92      	ldr	r3, [pc, #584]	; (8007ce4 <HAL_DMA_IRQHandler+0x258>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a92      	ldr	r2, [pc, #584]	; (8007ce8 <HAL_DMA_IRQHandler+0x25c>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	0a9b      	lsrs	r3, r3, #10
 8007aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab6:	2208      	movs	r2, #8
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01a      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d013      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0204 	bic.w	r2, r2, #4
 8007ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	f043 0201 	orr.w	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007afc:	2201      	movs	r2, #1
 8007afe:	409a      	lsls	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d012      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	409a      	lsls	r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f043 0202 	orr.w	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b32:	2204      	movs	r2, #4
 8007b34:	409a      	lsls	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4013      	ands	r3, r2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d012      	beq.n	8007b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b50:	2204      	movs	r2, #4
 8007b52:	409a      	lsls	r2, r3
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	f043 0204 	orr.w	r2, r3, #4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b68:	2210      	movs	r2, #16
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d043      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d03c      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b86:	2210      	movs	r2, #16
 8007b88:	409a      	lsls	r2, r3
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d018      	beq.n	8007bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d108      	bne.n	8007bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d024      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
 8007bba:	e01f      	b.n	8007bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01b      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
 8007bcc:	e016      	b.n	8007bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d107      	bne.n	8007bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0208 	bic.w	r2, r2, #8
 8007bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c00:	2220      	movs	r2, #32
 8007c02:	409a      	lsls	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4013      	ands	r3, r2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 808e 	beq.w	8007d2a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8086 	beq.w	8007d2a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	2220      	movs	r2, #32
 8007c24:	409a      	lsls	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d136      	bne.n	8007ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0216 	bic.w	r2, r2, #22
 8007c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695a      	ldr	r2, [r3, #20]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <HAL_DMA_IRQHandler+0x1da>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0208 	bic.w	r2, r2, #8
 8007c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7a:	223f      	movs	r2, #63	; 0x3f
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d07d      	beq.n	8007d96 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
        }
        return;
 8007ca2:	e078      	b.n	8007d96 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01c      	beq.n	8007cec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d108      	bne.n	8007cd2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d030      	beq.n	8007d2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	e02b      	b.n	8007d2a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d027      	beq.n	8007d2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
 8007ce2:	e022      	b.n	8007d2a <HAL_DMA_IRQHandler+0x29e>
 8007ce4:	20000000 	.word	0x20000000
 8007ce8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10f      	bne.n	8007d1a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0210 	bic.w	r2, r2, #16
 8007d08:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d032      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d022      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2205      	movs	r2, #5
 8007d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0201 	bic.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60bb      	str	r3, [r7, #8]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d307      	bcc.n	8007d72 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f2      	bne.n	8007d56 <HAL_DMA_IRQHandler+0x2ca>
 8007d70:	e000      	b.n	8007d74 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007d72:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
 8007d94:	e000      	b.n	8007d98 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007d96:	bf00      	nop
    }
  }
}
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop

08007da0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d108      	bne.n	8007df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007df6:	e007      	b.n	8007e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	3b10      	subs	r3, #16
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <DMA_CalcBaseAndBitshift+0x64>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	091b      	lsrs	r3, r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e2e:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <DMA_CalcBaseAndBitshift+0x68>)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d909      	bls.n	8007e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	659a      	str	r2, [r3, #88]	; 0x58
 8007e54:	e007      	b.n	8007e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	aaaaaaab 	.word	0xaaaaaaab
 8007e7c:	0801be14 	.word	0x0801be14

08007e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d11f      	bne.n	8007eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d855      	bhi.n	8007f4c <DMA_CheckFifoParam+0xcc>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <DMA_CheckFifoParam+0x28>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007ecb 	.word	0x08007ecb
 8007eb0:	08007eb9 	.word	0x08007eb9
 8007eb4:	08007f4d 	.word	0x08007f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d045      	beq.n	8007f50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ec8:	e042      	b.n	8007f50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ed2:	d13f      	bne.n	8007f54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ed8:	e03c      	b.n	8007f54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee2:	d121      	bne.n	8007f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d836      	bhi.n	8007f58 <DMA_CheckFifoParam+0xd8>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <DMA_CheckFifoParam+0x70>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f07 	.word	0x08007f07
 8007ef8:	08007f01 	.word	0x08007f01
 8007efc:	08007f19 	.word	0x08007f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
      break;
 8007f04:	e02f      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d024      	beq.n	8007f5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f16:	e021      	b.n	8007f5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f20:	d11e      	bne.n	8007f60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007f26:	e01b      	b.n	8007f60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d902      	bls.n	8007f34 <DMA_CheckFifoParam+0xb4>
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d003      	beq.n	8007f3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007f32:	e018      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
      break;
 8007f38:	e015      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4a:	e00b      	b.n	8007f64 <DMA_CheckFifoParam+0xe4>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e00a      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f50:	bf00      	nop
 8007f52:	e008      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f54:	bf00      	nop
 8007f56:	e006      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f58:	bf00      	nop
 8007f5a:	e004      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f5c:	bf00      	nop
 8007f5e:	e002      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;   
 8007f60:	bf00      	nop
 8007f62:	e000      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f64:	bf00      	nop
    }
  } 
  
  return status; 
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b089      	sub	sp, #36	; 0x24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	e159      	b.n	8008244 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f90:	2201      	movs	r2, #1
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	f040 8148 	bne.w	800823e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d00b      	beq.n	8007fce <HAL_GPIO_Init+0x5a>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d007      	beq.n	8007fce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fc2:	2b11      	cmp	r3, #17
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2b12      	cmp	r3, #18
 8007fcc:	d130      	bne.n	8008030 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	2203      	movs	r2, #3
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008004:	2201      	movs	r2, #1
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	091b      	lsrs	r3, r3, #4
 800801a:	f003 0201 	and.w	r2, r3, #1
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	fa02 f303 	lsl.w	r3, r2, r3
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	4313      	orrs	r3, r2
 8008028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	2203      	movs	r2, #3
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	43db      	mvns	r3, r3
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	4013      	ands	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	4313      	orrs	r3, r2
 8008058:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2b02      	cmp	r3, #2
 8008066:	d003      	beq.n	8008070 <HAL_GPIO_Init+0xfc>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b12      	cmp	r3, #18
 800806e:	d123      	bne.n	80080b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	08da      	lsrs	r2, r3, #3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3208      	adds	r2, #8
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	220f      	movs	r2, #15
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	08da      	lsrs	r2, r3, #3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3208      	adds	r2, #8
 80080b2:	69b9      	ldr	r1, [r7, #24]
 80080b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	2203      	movs	r2, #3
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	43db      	mvns	r3, r3
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	4013      	ands	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f003 0203 	and.w	r2, r3, #3
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a2 	beq.w	800823e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	4b56      	ldr	r3, [pc, #344]	; (8008258 <HAL_GPIO_Init+0x2e4>)
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	4a55      	ldr	r2, [pc, #340]	; (8008258 <HAL_GPIO_Init+0x2e4>)
 8008104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008108:	6453      	str	r3, [r2, #68]	; 0x44
 800810a:	4b53      	ldr	r3, [pc, #332]	; (8008258 <HAL_GPIO_Init+0x2e4>)
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008116:	4a51      	ldr	r2, [pc, #324]	; (800825c <HAL_GPIO_Init+0x2e8>)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	3302      	adds	r3, #2
 800811e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	220f      	movs	r2, #15
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	43db      	mvns	r3, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4013      	ands	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a48      	ldr	r2, [pc, #288]	; (8008260 <HAL_GPIO_Init+0x2ec>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d019      	beq.n	8008176 <HAL_GPIO_Init+0x202>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a47      	ldr	r2, [pc, #284]	; (8008264 <HAL_GPIO_Init+0x2f0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d013      	beq.n	8008172 <HAL_GPIO_Init+0x1fe>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a46      	ldr	r2, [pc, #280]	; (8008268 <HAL_GPIO_Init+0x2f4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00d      	beq.n	800816e <HAL_GPIO_Init+0x1fa>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a45      	ldr	r2, [pc, #276]	; (800826c <HAL_GPIO_Init+0x2f8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d007      	beq.n	800816a <HAL_GPIO_Init+0x1f6>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a44      	ldr	r2, [pc, #272]	; (8008270 <HAL_GPIO_Init+0x2fc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d101      	bne.n	8008166 <HAL_GPIO_Init+0x1f2>
 8008162:	2304      	movs	r3, #4
 8008164:	e008      	b.n	8008178 <HAL_GPIO_Init+0x204>
 8008166:	2307      	movs	r3, #7
 8008168:	e006      	b.n	8008178 <HAL_GPIO_Init+0x204>
 800816a:	2303      	movs	r3, #3
 800816c:	e004      	b.n	8008178 <HAL_GPIO_Init+0x204>
 800816e:	2302      	movs	r3, #2
 8008170:	e002      	b.n	8008178 <HAL_GPIO_Init+0x204>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <HAL_GPIO_Init+0x204>
 8008176:	2300      	movs	r3, #0
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	f002 0203 	and.w	r2, r2, #3
 800817e:	0092      	lsls	r2, r2, #2
 8008180:	4093      	lsls	r3, r2
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008188:	4934      	ldr	r1, [pc, #208]	; (800825c <HAL_GPIO_Init+0x2e8>)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	089b      	lsrs	r3, r3, #2
 800818e:	3302      	adds	r3, #2
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008196:	4b37      	ldr	r3, [pc, #220]	; (8008274 <HAL_GPIO_Init+0x300>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	43db      	mvns	r3, r3
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	4013      	ands	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081ba:	4a2e      	ldr	r2, [pc, #184]	; (8008274 <HAL_GPIO_Init+0x300>)
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80081c0:	4b2c      	ldr	r3, [pc, #176]	; (8008274 <HAL_GPIO_Init+0x300>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	4013      	ands	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081e4:	4a23      	ldr	r2, [pc, #140]	; (8008274 <HAL_GPIO_Init+0x300>)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081ea:	4b22      	ldr	r3, [pc, #136]	; (8008274 <HAL_GPIO_Init+0x300>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	4013      	ands	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800820e:	4a19      	ldr	r2, [pc, #100]	; (8008274 <HAL_GPIO_Init+0x300>)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008214:	4b17      	ldr	r3, [pc, #92]	; (8008274 <HAL_GPIO_Init+0x300>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	43db      	mvns	r3, r3
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008238:	4a0e      	ldr	r2, [pc, #56]	; (8008274 <HAL_GPIO_Init+0x300>)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	3301      	adds	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	f67f aea2 	bls.w	8007f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800824c:	bf00      	nop
 800824e:	3724      	adds	r7, #36	; 0x24
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40023800 	.word	0x40023800
 800825c:	40013800 	.word	0x40013800
 8008260:	40020000 	.word	0x40020000
 8008264:	40020400 	.word	0x40020400
 8008268:	40020800 	.word	0x40020800
 800826c:	40020c00 	.word	0x40020c00
 8008270:	40021000 	.word	0x40021000
 8008274:	40013c00 	.word	0x40013c00

08008278 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	e0bb      	b.n	800840c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008294:	2201      	movs	r2, #1
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	4013      	ands	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	f040 80ab 	bne.w	8008406 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80082b0:	4a5b      	ldr	r2, [pc, #364]	; (8008420 <HAL_GPIO_DeInit+0x1a8>)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	089b      	lsrs	r3, r3, #2
 80082b6:	3302      	adds	r3, #2
 80082b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082bc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	220f      	movs	r2, #15
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	4013      	ands	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a53      	ldr	r2, [pc, #332]	; (8008424 <HAL_GPIO_DeInit+0x1ac>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d019      	beq.n	800830e <HAL_GPIO_DeInit+0x96>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a52      	ldr	r2, [pc, #328]	; (8008428 <HAL_GPIO_DeInit+0x1b0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d013      	beq.n	800830a <HAL_GPIO_DeInit+0x92>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a51      	ldr	r2, [pc, #324]	; (800842c <HAL_GPIO_DeInit+0x1b4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00d      	beq.n	8008306 <HAL_GPIO_DeInit+0x8e>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a50      	ldr	r2, [pc, #320]	; (8008430 <HAL_GPIO_DeInit+0x1b8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d007      	beq.n	8008302 <HAL_GPIO_DeInit+0x8a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a4f      	ldr	r2, [pc, #316]	; (8008434 <HAL_GPIO_DeInit+0x1bc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d101      	bne.n	80082fe <HAL_GPIO_DeInit+0x86>
 80082fa:	2304      	movs	r3, #4
 80082fc:	e008      	b.n	8008310 <HAL_GPIO_DeInit+0x98>
 80082fe:	2307      	movs	r3, #7
 8008300:	e006      	b.n	8008310 <HAL_GPIO_DeInit+0x98>
 8008302:	2303      	movs	r3, #3
 8008304:	e004      	b.n	8008310 <HAL_GPIO_DeInit+0x98>
 8008306:	2302      	movs	r3, #2
 8008308:	e002      	b.n	8008310 <HAL_GPIO_DeInit+0x98>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <HAL_GPIO_DeInit+0x98>
 800830e:	2300      	movs	r3, #0
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	f002 0203 	and.w	r2, r2, #3
 8008316:	0092      	lsls	r2, r2, #2
 8008318:	4093      	lsls	r3, r2
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	429a      	cmp	r2, r3
 800831e:	d132      	bne.n	8008386 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008320:	4b45      	ldr	r3, [pc, #276]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	43db      	mvns	r3, r3
 8008328:	4943      	ldr	r1, [pc, #268]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 800832a:	4013      	ands	r3, r2
 800832c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800832e:	4b42      	ldr	r3, [pc, #264]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	43db      	mvns	r3, r3
 8008336:	4940      	ldr	r1, [pc, #256]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 8008338:	4013      	ands	r3, r2
 800833a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800833c:	4b3e      	ldr	r3, [pc, #248]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	43db      	mvns	r3, r3
 8008344:	493c      	ldr	r1, [pc, #240]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 8008346:	4013      	ands	r3, r2
 8008348:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800834a:	4b3b      	ldr	r3, [pc, #236]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	43db      	mvns	r3, r3
 8008352:	4939      	ldr	r1, [pc, #228]	; (8008438 <HAL_GPIO_DeInit+0x1c0>)
 8008354:	4013      	ands	r3, r2
 8008356:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	220f      	movs	r2, #15
 8008362:	fa02 f303 	lsl.w	r3, r2, r3
 8008366:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008368:	4a2d      	ldr	r2, [pc, #180]	; (8008420 <HAL_GPIO_DeInit+0x1a8>)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	3302      	adds	r3, #2
 8008370:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	43da      	mvns	r2, r3
 8008378:	4829      	ldr	r0, [pc, #164]	; (8008420 <HAL_GPIO_DeInit+0x1a8>)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	089b      	lsrs	r3, r3, #2
 800837e:	400a      	ands	r2, r1
 8008380:	3302      	adds	r3, #2
 8008382:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	2103      	movs	r1, #3
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	08da      	lsrs	r2, r3, #3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3208      	adds	r2, #8
 80083a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	220f      	movs	r2, #15
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	08d2      	lsrs	r2, r2, #3
 80083bc:	4019      	ands	r1, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3208      	adds	r2, #8
 80083c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	2103      	movs	r1, #3
 80083d0:	fa01 f303 	lsl.w	r3, r1, r3
 80083d4:	43db      	mvns	r3, r3
 80083d6:	401a      	ands	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	2101      	movs	r1, #1
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	fa01 f303 	lsl.w	r3, r1, r3
 80083e8:	43db      	mvns	r3, r3
 80083ea:	401a      	ands	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	2103      	movs	r1, #3
 80083fa:	fa01 f303 	lsl.w	r3, r1, r3
 80083fe:	43db      	mvns	r3, r3
 8008400:	401a      	ands	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3301      	adds	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b0f      	cmp	r3, #15
 8008410:	f67f af40 	bls.w	8008294 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40013800 	.word	0x40013800
 8008424:	40020000 	.word	0x40020000
 8008428:	40020400 	.word	0x40020400
 800842c:	40020800 	.word	0x40020800
 8008430:	40020c00 	.word	0x40020c00
 8008434:	40021000 	.word	0x40021000
 8008438:	40013c00 	.word	0x40013c00

0800843c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	887b      	ldrh	r3, [r7, #2]
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008454:	2301      	movs	r3, #1
 8008456:	73fb      	strb	r3, [r7, #15]
 8008458:	e001      	b.n	800845e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	807b      	strh	r3, [r7, #2]
 8008478:	4613      	mov	r3, r2
 800847a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800847c:	787b      	ldrb	r3, [r7, #1]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008482:	887a      	ldrh	r2, [r7, #2]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008488:	e003      	b.n	8008492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	041a      	lsls	r2, r3, #16
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	619a      	str	r2, [r3, #24]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	887b      	ldrh	r3, [r7, #2]
 80084b0:	401a      	ands	r2, r3
 80084b2:	887b      	ldrh	r3, [r7, #2]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d104      	bne.n	80084c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084b8:	887b      	ldrh	r3, [r7, #2]
 80084ba:	041a      	lsls	r2, r3, #16
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80084c0:	e002      	b.n	80084c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80084c2:	887a      	ldrh	r2, [r7, #2]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	619a      	str	r2, [r3, #24]
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e25b      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d075      	beq.n	80085de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084f2:	4ba3      	ldr	r3, [pc, #652]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 030c 	and.w	r3, r3, #12
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d00c      	beq.n	8008518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084fe:	4ba0      	ldr	r3, [pc, #640]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008506:	2b08      	cmp	r3, #8
 8008508:	d112      	bne.n	8008530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800850a:	4b9d      	ldr	r3, [pc, #628]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008516:	d10b      	bne.n	8008530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008518:	4b99      	ldr	r3, [pc, #612]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d05b      	beq.n	80085dc <HAL_RCC_OscConfig+0x108>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d157      	bne.n	80085dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e236      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008538:	d106      	bne.n	8008548 <HAL_RCC_OscConfig+0x74>
 800853a:	4b91      	ldr	r3, [pc, #580]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a90      	ldr	r2, [pc, #576]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	e01d      	b.n	8008584 <HAL_RCC_OscConfig+0xb0>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008550:	d10c      	bne.n	800856c <HAL_RCC_OscConfig+0x98>
 8008552:	4b8b      	ldr	r3, [pc, #556]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a8a      	ldr	r2, [pc, #552]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	4b88      	ldr	r3, [pc, #544]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a87      	ldr	r2, [pc, #540]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e00b      	b.n	8008584 <HAL_RCC_OscConfig+0xb0>
 800856c:	4b84      	ldr	r3, [pc, #528]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a83      	ldr	r2, [pc, #524]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4b81      	ldr	r3, [pc, #516]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a80      	ldr	r2, [pc, #512]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 800857e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d013      	beq.n	80085b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858c:	f7fe fa4e 	bl	8006a2c <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008594:	f7fe fa4a 	bl	8006a2c <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b64      	cmp	r3, #100	; 0x64
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e1fb      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085a6:	4b76      	ldr	r3, [pc, #472]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0xc0>
 80085b2:	e014      	b.n	80085de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b4:	f7fe fa3a 	bl	8006a2c <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085bc:	f7fe fa36 	bl	8006a2c <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b64      	cmp	r3, #100	; 0x64
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e1e7      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ce:	4b6c      	ldr	r3, [pc, #432]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f0      	bne.n	80085bc <HAL_RCC_OscConfig+0xe8>
 80085da:	e000      	b.n	80085de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d063      	beq.n	80086b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ea:	4b65      	ldr	r3, [pc, #404]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 030c 	and.w	r3, r3, #12
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085f6:	4b62      	ldr	r3, [pc, #392]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d11c      	bne.n	800863c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008602:	4b5f      	ldr	r3, [pc, #380]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d116      	bne.n	800863c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800860e:	4b5c      	ldr	r3, [pc, #368]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_RCC_OscConfig+0x152>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d001      	beq.n	8008626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e1bb      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008626:	4b56      	ldr	r3, [pc, #344]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	4952      	ldr	r1, [pc, #328]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008636:	4313      	orrs	r3, r2
 8008638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800863a:	e03a      	b.n	80086b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d020      	beq.n	8008686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008644:	4b4f      	ldr	r3, [pc, #316]	; (8008784 <HAL_RCC_OscConfig+0x2b0>)
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864a:	f7fe f9ef 	bl	8006a2c <HAL_GetTick>
 800864e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008650:	e008      	b.n	8008664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008652:	f7fe f9eb 	bl	8006a2c <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d901      	bls.n	8008664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e19c      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008664:	4b46      	ldr	r3, [pc, #280]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0f0      	beq.n	8008652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008670:	4b43      	ldr	r3, [pc, #268]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	4940      	ldr	r1, [pc, #256]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008680:	4313      	orrs	r3, r2
 8008682:	600b      	str	r3, [r1, #0]
 8008684:	e015      	b.n	80086b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008686:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <HAL_RCC_OscConfig+0x2b0>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868c:	f7fe f9ce 	bl	8006a2c <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008694:	f7fe f9ca 	bl	8006a2c <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e17b      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086a6:	4b36      	ldr	r3, [pc, #216]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d030      	beq.n	8008720 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086c6:	4b30      	ldr	r3, [pc, #192]	; (8008788 <HAL_RCC_OscConfig+0x2b4>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086cc:	f7fe f9ae 	bl	8006a2c <HAL_GetTick>
 80086d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086d4:	f7fe f9aa 	bl	8006a2c <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e15b      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086e6:	4b26      	ldr	r3, [pc, #152]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 80086e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCC_OscConfig+0x200>
 80086f2:	e015      	b.n	8008720 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086f4:	4b24      	ldr	r3, [pc, #144]	; (8008788 <HAL_RCC_OscConfig+0x2b4>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086fa:	f7fe f997 	bl	8006a2c <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008702:	f7fe f993 	bl	8006a2c <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e144      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008714:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f0      	bne.n	8008702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80a0 	beq.w	800886e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10f      	bne.n	800875e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	4b0f      	ldr	r3, [pc, #60]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	4a0e      	ldr	r2, [pc, #56]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874c:	6413      	str	r3, [r2, #64]	; 0x40
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <HAL_RCC_OscConfig+0x2ac>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008756:	60bb      	str	r3, [r7, #8]
 8008758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <HAL_RCC_OscConfig+0x2b8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	2b00      	cmp	r3, #0
 8008768:	d121      	bne.n	80087ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <HAL_RCC_OscConfig+0x2b8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a07      	ldr	r2, [pc, #28]	; (800878c <HAL_RCC_OscConfig+0x2b8>)
 8008770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008776:	f7fe f959 	bl	8006a2c <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800877c:	e011      	b.n	80087a2 <HAL_RCC_OscConfig+0x2ce>
 800877e:	bf00      	nop
 8008780:	40023800 	.word	0x40023800
 8008784:	42470000 	.word	0x42470000
 8008788:	42470e80 	.word	0x42470e80
 800878c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008790:	f7fe f94c 	bl	8006a2c <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e0fd      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087a2:	4b81      	ldr	r3, [pc, #516]	; (80089a8 <HAL_RCC_OscConfig+0x4d4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d106      	bne.n	80087c4 <HAL_RCC_OscConfig+0x2f0>
 80087b6:	4b7d      	ldr	r3, [pc, #500]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	4a7c      	ldr	r2, [pc, #496]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	6713      	str	r3, [r2, #112]	; 0x70
 80087c2:	e01c      	b.n	80087fe <HAL_RCC_OscConfig+0x32a>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d10c      	bne.n	80087e6 <HAL_RCC_OscConfig+0x312>
 80087cc:	4b77      	ldr	r3, [pc, #476]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a76      	ldr	r2, [pc, #472]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087d2:	f043 0304 	orr.w	r3, r3, #4
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	4b74      	ldr	r3, [pc, #464]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4a73      	ldr	r2, [pc, #460]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087de:	f043 0301 	orr.w	r3, r3, #1
 80087e2:	6713      	str	r3, [r2, #112]	; 0x70
 80087e4:	e00b      	b.n	80087fe <HAL_RCC_OscConfig+0x32a>
 80087e6:	4b71      	ldr	r3, [pc, #452]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	4a70      	ldr	r2, [pc, #448]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	6713      	str	r3, [r2, #112]	; 0x70
 80087f2:	4b6e      	ldr	r3, [pc, #440]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f6:	4a6d      	ldr	r2, [pc, #436]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80087f8:	f023 0304 	bic.w	r3, r3, #4
 80087fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d015      	beq.n	8008832 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008806:	f7fe f911 	bl	8006a2c <HAL_GetTick>
 800880a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800880c:	e00a      	b.n	8008824 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800880e:	f7fe f90d 	bl	8006a2c <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	f241 3288 	movw	r2, #5000	; 0x1388
 800881c:	4293      	cmp	r3, r2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e0bc      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008824:	4b61      	ldr	r3, [pc, #388]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0ee      	beq.n	800880e <HAL_RCC_OscConfig+0x33a>
 8008830:	e014      	b.n	800885c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008832:	f7fe f8fb 	bl	8006a2c <HAL_GetTick>
 8008836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008838:	e00a      	b.n	8008850 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800883a:	f7fe f8f7 	bl	8006a2c <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	f241 3288 	movw	r2, #5000	; 0x1388
 8008848:	4293      	cmp	r3, r2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e0a6      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008850:	4b56      	ldr	r3, [pc, #344]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ee      	bne.n	800883a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d105      	bne.n	800886e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008862:	4b52      	ldr	r3, [pc, #328]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	4a51      	ldr	r2, [pc, #324]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800886c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 8092 	beq.w	800899c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008878:	4b4c      	ldr	r3, [pc, #304]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f003 030c 	and.w	r3, r3, #12
 8008880:	2b08      	cmp	r3, #8
 8008882:	d05c      	beq.n	800893e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d141      	bne.n	8008910 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800888c:	4b48      	ldr	r3, [pc, #288]	; (80089b0 <HAL_RCC_OscConfig+0x4dc>)
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008892:	f7fe f8cb 	bl	8006a2c <HAL_GetTick>
 8008896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008898:	e008      	b.n	80088ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800889a:	f7fe f8c7 	bl	8006a2c <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d901      	bls.n	80088ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e078      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ac:	4b3f      	ldr	r3, [pc, #252]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f0      	bne.n	800889a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	019b      	lsls	r3, r3, #6
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	3b01      	subs	r3, #1
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088da:	061b      	lsls	r3, r3, #24
 80088dc:	4933      	ldr	r1, [pc, #204]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088e2:	4b33      	ldr	r3, [pc, #204]	; (80089b0 <HAL_RCC_OscConfig+0x4dc>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e8:	f7fe f8a0 	bl	8006a2c <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fe f89c 	bl	8006a2c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e04d      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008902:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f0      	beq.n	80088f0 <HAL_RCC_OscConfig+0x41c>
 800890e:	e045      	b.n	800899c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008910:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <HAL_RCC_OscConfig+0x4dc>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008916:	f7fe f889 	bl	8006a2c <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800891e:	f7fe f885 	bl	8006a2c <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e036      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008930:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f0      	bne.n	800891e <HAL_RCC_OscConfig+0x44a>
 800893c:	e02e      	b.n	800899c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e029      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800894a:	4b18      	ldr	r3, [pc, #96]	; (80089ac <HAL_RCC_OscConfig+0x4d8>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	429a      	cmp	r2, r3
 800895c:	d11c      	bne.n	8008998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008968:	429a      	cmp	r2, r3
 800896a:	d115      	bne.n	8008998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008972:	4013      	ands	r3, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008978:	4293      	cmp	r3, r2
 800897a:	d10d      	bne.n	8008998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008986:	429a      	cmp	r2, r3
 8008988:	d106      	bne.n	8008998 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40007000 	.word	0x40007000
 80089ac:	40023800 	.word	0x40023800
 80089b0:	42470060 	.word	0x42470060

080089b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d101      	bne.n	80089c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0cc      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089c8:	4b68      	ldr	r3, [pc, #416]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d90c      	bls.n	80089f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d6:	4b65      	ldr	r3, [pc, #404]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089de:	4b63      	ldr	r3, [pc, #396]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d001      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0b8      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d020      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a08:	4b59      	ldr	r3, [pc, #356]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4a58      	ldr	r2, [pc, #352]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a20:	4b53      	ldr	r3, [pc, #332]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4a52      	ldr	r2, [pc, #328]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a2c:	4b50      	ldr	r3, [pc, #320]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	494d      	ldr	r1, [pc, #308]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d044      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a52:	4b47      	ldr	r3, [pc, #284]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d119      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e07f      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d003      	beq.n	8008a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d107      	bne.n	8008a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a72:	4b3f      	ldr	r3, [pc, #252]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e06f      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a82:	4b3b      	ldr	r3, [pc, #236]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e067      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a92:	4b37      	ldr	r3, [pc, #220]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f023 0203 	bic.w	r2, r3, #3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4934      	ldr	r1, [pc, #208]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008aa4:	f7fd ffc2 	bl	8006a2c <HAL_GetTick>
 8008aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aaa:	e00a      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aac:	f7fd ffbe 	bl	8006a2c <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e04f      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac2:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f003 020c 	and.w	r2, r3, #12
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d1eb      	bne.n	8008aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ad4:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 030f 	and.w	r3, r3, #15
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d20c      	bcs.n	8008afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae2:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	b2d2      	uxtb	r2, r2
 8008ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aea:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <HAL_RCC_ClockConfig+0x1b8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e032      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b08:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	4916      	ldr	r1, [pc, #88]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	490e      	ldr	r1, [pc, #56]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b3a:	f000 f821 	bl	8008b80 <HAL_RCC_GetSysClockFreq>
 8008b3e:	4601      	mov	r1, r0
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	091b      	lsrs	r3, r3, #4
 8008b46:	f003 030f 	and.w	r3, r3, #15
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <HAL_RCC_ClockConfig+0x1c0>)
 8008b4c:	5cd3      	ldrb	r3, [r2, r3]
 8008b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b52:	4a09      	ldr	r2, [pc, #36]	; (8008b78 <HAL_RCC_ClockConfig+0x1c4>)
 8008b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <HAL_RCC_ClockConfig+0x1c8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fd ff22 	bl	80069a4 <HAL_InitTick>

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40023c00 	.word	0x40023c00
 8008b70:	40023800 	.word	0x40023800
 8008b74:	0800fd1c 	.word	0x0800fd1c
 8008b78:	20000000 	.word	0x20000000
 8008b7c:	20000058 	.word	0x20000058

08008b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b96:	4b50      	ldr	r3, [pc, #320]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d007      	beq.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x32>
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d008      	beq.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x38>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f040 808d 	bne.w	8008cc6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bac:	4b4b      	ldr	r3, [pc, #300]	; (8008cdc <HAL_RCC_GetSysClockFreq+0x15c>)
 8008bae:	60bb      	str	r3, [r7, #8]
       break;
 8008bb0:	e08c      	b.n	8008ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bb2:	4b4b      	ldr	r3, [pc, #300]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bb4:	60bb      	str	r3, [r7, #8]
      break;
 8008bb6:	e089      	b.n	8008ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb8:	4b47      	ldr	r3, [pc, #284]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bc2:	4b45      	ldr	r3, [pc, #276]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bce:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	099b      	lsrs	r3, r3, #6
 8008bd4:	f04f 0400 	mov.w	r4, #0
 8008bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	ea03 0501 	and.w	r5, r3, r1
 8008be4:	ea04 0602 	and.w	r6, r4, r2
 8008be8:	4a3d      	ldr	r2, [pc, #244]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bea:	fb02 f106 	mul.w	r1, r2, r6
 8008bee:	2200      	movs	r2, #0
 8008bf0:	fb02 f205 	mul.w	r2, r2, r5
 8008bf4:	440a      	add	r2, r1
 8008bf6:	493a      	ldr	r1, [pc, #232]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bf8:	fba5 0101 	umull	r0, r1, r5, r1
 8008bfc:	1853      	adds	r3, r2, r1
 8008bfe:	4619      	mov	r1, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f04f 0400 	mov.w	r4, #0
 8008c06:	461a      	mov	r2, r3
 8008c08:	4623      	mov	r3, r4
 8008c0a:	f7f8 f855 	bl	8000cb8 <__aeabi_uldivmod>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	460c      	mov	r4, r1
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e049      	b.n	8008caa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c16:	4b30      	ldr	r3, [pc, #192]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	099b      	lsrs	r3, r3, #6
 8008c1c:	f04f 0400 	mov.w	r4, #0
 8008c20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	ea03 0501 	and.w	r5, r3, r1
 8008c2c:	ea04 0602 	and.w	r6, r4, r2
 8008c30:	4629      	mov	r1, r5
 8008c32:	4632      	mov	r2, r6
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	f04f 0400 	mov.w	r4, #0
 8008c3c:	0154      	lsls	r4, r2, #5
 8008c3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c42:	014b      	lsls	r3, r1, #5
 8008c44:	4619      	mov	r1, r3
 8008c46:	4622      	mov	r2, r4
 8008c48:	1b49      	subs	r1, r1, r5
 8008c4a:	eb62 0206 	sbc.w	r2, r2, r6
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	f04f 0400 	mov.w	r4, #0
 8008c56:	0194      	lsls	r4, r2, #6
 8008c58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c5c:	018b      	lsls	r3, r1, #6
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	eb64 0402 	sbc.w	r4, r4, r2
 8008c64:	f04f 0100 	mov.w	r1, #0
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	00e2      	lsls	r2, r4, #3
 8008c6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c72:	00d9      	lsls	r1, r3, #3
 8008c74:	460b      	mov	r3, r1
 8008c76:	4614      	mov	r4, r2
 8008c78:	195b      	adds	r3, r3, r5
 8008c7a:	eb44 0406 	adc.w	r4, r4, r6
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	02a2      	lsls	r2, r4, #10
 8008c88:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008c8c:	0299      	lsls	r1, r3, #10
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4614      	mov	r4, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	4621      	mov	r1, r4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f04f 0400 	mov.w	r4, #0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	f7f8 f80a 	bl	8000cb8 <__aeabi_uldivmod>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008caa:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc2:	60bb      	str	r3, [r7, #8]
      break;
 8008cc4:	e002      	b.n	8008ccc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <HAL_RCC_GetSysClockFreq+0x15c>)
 8008cc8:	60bb      	str	r3, [r7, #8]
      break;
 8008cca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40023800 	.word	0x40023800
 8008cdc:	00f42400 	.word	0x00f42400
 8008ce0:	017d7840 	.word	0x017d7840

08008ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ce8:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cea:	681b      	ldr	r3, [r3, #0]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000000 	.word	0x20000000

08008cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d00:	f7ff fff0 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8008d04:	4601      	mov	r1, r0
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	0a9b      	lsrs	r3, r3, #10
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	4a03      	ldr	r2, [pc, #12]	; (8008d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d12:	5cd3      	ldrb	r3, [r2, r3]
 8008d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	0800fd2c 	.word	0x0800fd2c

08008d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d28:	f7ff ffdc 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	0b5b      	lsrs	r3, r3, #13
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	4a03      	ldr	r2, [pc, #12]	; (8008d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d3a:	5cd3      	ldrb	r3, [r2, r3]
 8008d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40023800 	.word	0x40023800
 8008d48:	0800fd2c 	.word	0x0800fd2c

08008d4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e022      	b.n	8008da4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d105      	bne.n	8008d76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7fb fbab 	bl	80044cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2203      	movs	r2, #3
 8008d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f814 	bl	8008dac <HAL_SD_InitCard>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e00a      	b.n	8008da4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dac:	b5b0      	push	{r4, r5, r7, lr}
 8008dae:	b08e      	sub	sp, #56	; 0x38
 8008db0:	af04      	add	r7, sp, #16
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008dc8:	2376      	movs	r3, #118	; 0x76
 8008dca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681d      	ldr	r5, [r3, #0]
 8008dd0:	466c      	mov	r4, sp
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008de4:	4628      	mov	r0, r5
 8008de6:	f003 fd37 	bl	800c858 <SDIO_Init>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e031      	b.n	8008e60 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <HAL_SD_InitCard+0xbc>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f003 fd6f 	bl	800c8ea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008e0c:	4b16      	ldr	r3, [pc, #88]	; (8008e68 <HAL_SD_InitCard+0xbc>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fee0 	bl	8009bd8 <SD_PowerON>
 8008e18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e013      	b.n	8008e60 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fdff 	bl	8009a3c <SD_InitCard>
 8008e3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3728      	adds	r7, #40	; 0x28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bdb0      	pop	{r4, r5, r7, pc}
 8008e68:	422580a0 	.word	0x422580a0

08008e6c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08c      	sub	sp, #48	; 0x30
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d107      	bne.n	8008e94 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e0c9      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	f040 80c2 	bne.w	8009026 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	441a      	add	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d907      	bls.n	8008ec6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e0b0      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2203      	movs	r2, #3
 8008eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	4a50      	ldr	r2, [pc, #320]	; (8009030 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	4a4f      	ldr	r2, [pc, #316]	; (8009034 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008ef8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efe:	2200      	movs	r2, #0
 8008f00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3380      	adds	r3, #128	; 0x80
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	025b      	lsls	r3, r3, #9
 8008f14:	089b      	lsrs	r3, r3, #2
 8008f16:	f7fe fd3f 	bl	8007998 <HAL_DMA_Start_IT>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d017      	beq.n	8008f50 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008f2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a40      	ldr	r2, [pc, #256]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e06b      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008f50:	4b3a      	ldr	r3, [pc, #232]	; (800903c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d002      	beq.n	8008f64 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	025b      	lsls	r3, r3, #9
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f003 fd4f 	bl	800ca10 <SDMMC_CmdBlockLength>
 8008f72:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00f      	beq.n	8008f9a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2e      	ldr	r2, [pc, #184]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e046      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	025b      	lsls	r3, r3, #9
 8008fa4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008fa6:	2390      	movs	r3, #144	; 0x90
 8008fa8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008faa:	2302      	movs	r3, #2
 8008fac:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f107 0210 	add.w	r2, r7, #16
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f003 fcf9 	bl	800c9b8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d90a      	bls.n	8008fe2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2282      	movs	r2, #130	; 0x82
 8008fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f003 fd5d 	bl	800ca98 <SDMMC_CmdReadMultiBlock>
 8008fde:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fe0:	e009      	b.n	8008ff6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2281      	movs	r2, #129	; 0x81
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f003 fd30 	bl	800ca54 <SDMMC_CmdReadSingleBlock>
 8008ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d012      	beq.n	8009022 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0d      	ldr	r2, [pc, #52]	; (8009038 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009002:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	431a      	orrs	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e002      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	e000      	b.n	8009028 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8009026:	2302      	movs	r3, #2
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3730      	adds	r7, #48	; 0x30
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	0800984d 	.word	0x0800984d
 8009034:	080098bd 	.word	0x080098bd
 8009038:	004005ff 	.word	0x004005ff
 800903c:	4225858c 	.word	0x4225858c

08009040 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d008      	beq.n	800906e <HAL_SD_IRQHandler+0x2e>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 ffcc 	bl	800a004 <SD_Read_IT>
 800906c:	e165      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 808f 	beq.w	800919c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009086:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8009096:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800909a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d039      	beq.n	800912a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <HAL_SD_IRQHandler+0x8a>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f003 fd04 	bl	800cadc <SDMMC_CmdStopTransfer>
 80090d4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d008      	beq.n	80090ee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f92f 	bl	800934c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <HAL_SD_IRQHandler+0xda>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7fb f9b6 	bl	800448c <HAL_SD_RxCpltCallback>
 8009120:	e10b      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7fb f9c2 	bl	80044ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009128:	e107      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 8102 	beq.w	800933a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f003 fcc9 	bl	800cadc <SDMMC_CmdStopTransfer>
 800914a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d008      	beq.n	8009164 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8f4 	bl	800934c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	f040 80e5 	bne.w	800933a <HAL_SD_IRQHandler+0x2fa>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 80df 	bne.w	800933a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0208 	bic.w	r2, r2, #8
 800918a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fb f989 	bl	80044ac <HAL_SD_TxCpltCallback>
}
 800919a:	e0ce      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <HAL_SD_IRQHandler+0x17c>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0308 	and.w	r3, r3, #8
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 ff76 	bl	800a0a6 <SD_Write_IT>
 80091ba:	e0be      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091c2:	f240 233a 	movw	r3, #570	; 0x23a
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 80b6 	beq.w	800933a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	f043 0202 	orr.w	r2, r3, #2
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d005      	beq.n	8009202 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	f043 0208 	orr.w	r2, r3, #8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	f043 0220 	orr.w	r2, r3, #32
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009222:	f003 0310 	and.w	r3, r3, #16
 8009226:	2b00      	cmp	r3, #0
 8009228:	d005      	beq.n	8009236 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	f043 0210 	orr.w	r2, r3, #16
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	f043 0208 	orr.w	r2, r3, #8
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f240 723a 	movw	r2, #1850	; 0x73a
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009268:	f023 0302 	bic.w	r3, r3, #2
 800926c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4618      	mov	r0, r3
 8009274:	f003 fc32 	bl	800cadc <SDMMC_CmdStopTransfer>
 8009278:	4602      	mov	r2, r0
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f855 	bl	800934c <HAL_SD_ErrorCallback>
}
 80092a2:	e04a      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d045      	beq.n	800933a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f003 0310 	and.w	r3, r3, #16
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <HAL_SD_IRQHandler+0x282>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0320 	and.w	r3, r3, #32
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d011      	beq.n	80092e6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <HAL_SD_IRQHandler+0x304>)
 80092c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe fbba 	bl	8007a48 <HAL_DMA_Abort_IT>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d02f      	beq.n	800933a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fb3e 	bl	8009960 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80092e4:	e029      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d104      	bne.n	80092fa <HAL_SD_IRQHandler+0x2ba>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d011      	beq.n	800931e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	4a12      	ldr	r2, [pc, #72]	; (8009348 <HAL_SD_IRQHandler+0x308>)
 8009300:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fb9e 	bl	8007a48 <HAL_DMA_Abort_IT>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d013      	beq.n	800933a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fb59 	bl	80099ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800931c:	e00d      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f814 	bl	8009360 <HAL_SD_AbortCallback>
}
 8009338:	e7ff      	b.n	800933a <HAL_SD_IRQHandler+0x2fa>
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	08009961 	.word	0x08009961
 8009348:	080099cf 	.word	0x080099cf

0800934c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009382:	0f9b      	lsrs	r3, r3, #30
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938e:	0e9b      	lsrs	r3, r3, #26
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a0:	0e1b      	lsrs	r3, r3, #24
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d4:	0d1b      	lsrs	r3, r3, #20
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e0:	0c1b      	lsrs	r3, r3, #16
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 030f 	and.w	r3, r3, #15
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f2:	0bdb      	lsrs	r3, r3, #15
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009404:	0b9b      	lsrs	r3, r3, #14
 8009406:	b2db      	uxtb	r3, r3
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	b2da      	uxtb	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009416:	0b5b      	lsrs	r3, r3, #13
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009428:	0b1b      	lsrs	r3, r3, #12
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2200      	movs	r2, #0
 800943a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009440:	2b00      	cmp	r3, #0
 8009442:	d163      	bne.n	800950c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009448:	009a      	lsls	r2, r3, #2
 800944a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800944e:	4013      	ands	r3, r2
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009454:	0f92      	lsrs	r2, r2, #30
 8009456:	431a      	orrs	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009460:	0edb      	lsrs	r3, r3, #27
 8009462:	b2db      	uxtb	r3, r3
 8009464:	f003 0307 	and.w	r3, r3, #7
 8009468:	b2da      	uxtb	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009472:	0e1b      	lsrs	r3, r3, #24
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 0307 	and.w	r3, r3, #7
 800947a:	b2da      	uxtb	r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009484:	0d5b      	lsrs	r3, r3, #21
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	b2da      	uxtb	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009496:	0c9b      	lsrs	r3, r3, #18
 8009498:	b2db      	uxtb	r3, r3
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	0bdb      	lsrs	r3, r3, #15
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	7e1b      	ldrb	r3, [r3, #24]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	3302      	adds	r3, #2
 80094cc:	2201      	movs	r2, #1
 80094ce:	fa02 f303 	lsl.w	r3, r2, r3
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094d6:	fb02 f203 	mul.w	r2, r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	7a1b      	ldrb	r3, [r3, #8]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	2201      	movs	r2, #1
 80094ea:	409a      	lsls	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80094f8:	0a52      	lsrs	r2, r2, #9
 80094fa:	fb02 f203 	mul.w	r2, r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009508:	661a      	str	r2, [r3, #96]	; 0x60
 800950a:	e031      	b.n	8009570 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009510:	2b01      	cmp	r3, #1
 8009512:	d11d      	bne.n	8009550 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009522:	0c1b      	lsrs	r3, r3, #16
 8009524:	431a      	orrs	r2, r3
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	3301      	adds	r3, #1
 8009530:	029a      	lsls	r2, r3, #10
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009544:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	661a      	str	r2, [r3, #96]	; 0x60
 800954e:	e00f      	b.n	8009570 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a58      	ldr	r2, [pc, #352]	; (80096b8 <HAL_SD_GetCardCSD+0x344>)
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e09d      	b.n	80096ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009574:	0b9b      	lsrs	r3, r3, #14
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	b2da      	uxtb	r2, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009586:	09db      	lsrs	r3, r3, #7
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a8:	0fdb      	lsrs	r3, r3, #31
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b4:	0f5b      	lsrs	r3, r3, #29
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c6:	0e9b      	lsrs	r3, r3, #26
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d8:	0d9b      	lsrs	r3, r3, #22
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 030f 	and.w	r3, r3, #15
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	0d5b      	lsrs	r3, r3, #21
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009606:	0c1b      	lsrs	r3, r3, #16
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961a:	0bdb      	lsrs	r3, r3, #15
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962e:	0b9b      	lsrs	r3, r3, #14
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	0b5b      	lsrs	r3, r3, #13
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009656:	0b1b      	lsrs	r3, r3, #12
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966a:	0a9b      	lsrs	r3, r3, #10
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967e:	0a1b      	lsrs	r3, r3, #8
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	004005ff 	.word	0x004005ff

080096bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009714:	b5b0      	push	{r4, r5, r7, lr}
 8009716:	b08e      	sub	sp, #56	; 0x38
 8009718:	af04      	add	r7, sp, #16
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2203      	movs	r2, #3
 8009722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800972a:	2b03      	cmp	r3, #3
 800972c:	d02e      	beq.n	800978c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009734:	d106      	bne.n	8009744 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
 8009742:	e029      	b.n	8009798 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800974a:	d10a      	bne.n	8009762 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 faf9 	bl	8009d44 <SD_WideBus_Enable>
 8009752:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	639a      	str	r2, [r3, #56]	; 0x38
 8009760:	e01a      	b.n	8009798 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb36 	bl	8009dda <SD_WideBus_Disable>
 800976e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
 800977c:	e00c      	b.n	8009798 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
 800978a:	e005      	b.n	8009798 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	d009      	beq.n	80097b4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a18      	ldr	r2, [pc, #96]	; (8009808 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e024      	b.n	80097fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	466c      	mov	r4, sp
 80097dc:	f107 0318 	add.w	r3, r7, #24
 80097e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ee:	4628      	mov	r0, r5
 80097f0:	f003 f832 	bl	800c858 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bdb0      	pop	{r4, r5, r7, pc}
 8009806:	bf00      	nop
 8009808:	004005ff 	.word	0x004005ff

0800980c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009818:	f107 030c 	add.w	r3, r7, #12
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa68 	bl	8009cf4 <SD_SendStatus>
 8009824:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	0a5b      	lsrs	r3, r3, #9
 800983c:	f003 030f 	and.w	r3, r3, #15
 8009840:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009842:	693b      	ldr	r3, [r7, #16]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985e:	2b82      	cmp	r3, #130	; 0x82
 8009860:	d111      	bne.n	8009886 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f003 f938 	bl	800cadc <SDMMC_CmdStopTransfer>
 800986c:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d008      	beq.n	8009886 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	431a      	orrs	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7ff fd63 	bl	800934c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0208 	bic.w	r2, r2, #8
 8009894:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f240 523a 	movw	r2, #1338	; 0x53a
 800989e:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7fa fdec 	bl	800448c <HAL_SD_RxCpltCallback>
#endif
}
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7fe fa68 	bl	8007da0 <HAL_DMA_GetError>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d03e      	beq.n	8009954 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d002      	beq.n	80098f2 <SD_DMAError+0x36>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d12d      	bne.n	800994e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a19      	ldr	r2, [pc, #100]	; (800995c <SD_DMAError+0xa0>)
 80098f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009908:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7ff ff78 	bl	800980c <HAL_SD_GetCardState>
 800991c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b06      	cmp	r3, #6
 8009922:	d002      	beq.n	800992a <SD_DMAError+0x6e>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b05      	cmp	r3, #5
 8009928:	d10a      	bne.n	8009940 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f003 f8d4 	bl	800cadc <SDMMC_CmdStopTransfer>
 8009934:	4602      	mov	r2, r0
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	431a      	orrs	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800994e:	6978      	ldr	r0, [r7, #20]
 8009950:	f7ff fcfc 	bl	800934c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009954:	bf00      	nop
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	004005ff 	.word	0x004005ff

08009960 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f240 523a 	movw	r2, #1338	; 0x53a
 8009976:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff ff47 	bl	800980c <HAL_SD_GetCardState>
 800997e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b06      	cmp	r3, #6
 8009992:	d002      	beq.n	800999a <SD_DMATxAbort+0x3a>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b05      	cmp	r3, #5
 8009998:	d10a      	bne.n	80099b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f003 f89c 	bl	800cadc <SDMMC_CmdStopTransfer>
 80099a4:	4602      	mov	r2, r0
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f7ff fcd1 	bl	8009360 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80099be:	e002      	b.n	80099c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff fcc3 	bl	800934c <HAL_SD_ErrorCallback>
}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff ff10 	bl	800980c <HAL_SD_GetCardState>
 80099ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b06      	cmp	r3, #6
 8009a00:	d002      	beq.n	8009a08 <SD_DMARxAbort+0x3a>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d10a      	bne.n	8009a1e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f003 f865 	bl	800cadc <SDMMC_CmdStopTransfer>
 8009a12:	4602      	mov	r2, r0
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d103      	bne.n	8009a2e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fc9a 	bl	8009360 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a2c:	e002      	b.n	8009a34 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fc8c 	bl	800934c <HAL_SD_ErrorCallback>
}
 8009a34:	bf00      	nop
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a3c:	b5b0      	push	{r4, r5, r7, lr}
 8009a3e:	b094      	sub	sp, #80	; 0x50
 8009a40:	af04      	add	r7, sp, #16
 8009a42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009a44:	2301      	movs	r3, #1
 8009a46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 ff5b 	bl	800c908 <SDIO_GetPowerState>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a5c:	e0b7      	b.n	8009bce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d02f      	beq.n	8009ac6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f003 f940 	bl	800ccf0 <SDMMC_CmdSendCID>
 8009a70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <SD_InitCard+0x40>
    {
      return errorstate;
 8009a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a7a:	e0a8      	b.n	8009bce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 ff85 	bl	800c992 <SDIO_GetResponse>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2104      	movs	r1, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f002 ff7c 	bl	800c992 <SDIO_GetResponse>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2108      	movs	r1, #8
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 ff73 	bl	800c992 <SDIO_GetResponse>
 8009aac:	4602      	mov	r2, r0
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	210c      	movs	r1, #12
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f002 ff6a 	bl	800c992 <SDIO_GetResponse>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d00d      	beq.n	8009aea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f107 020e 	add.w	r2, r7, #14
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f003 f946 	bl	800cd6a <SDMMC_CmdSetRelAdd>
 8009ade:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <SD_InitCard+0xae>
    {
      return errorstate;
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae8:	e071      	b.n	8009bce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d036      	beq.n	8009b60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009af2:	89fb      	ldrh	r3, [r7, #14]
 8009af4:	461a      	mov	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f003 f910 	bl	800cd2c <SDMMC_CmdSendCSD>
 8009b0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	e05a      	b.n	8009bce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f002 ff37 	bl	800c992 <SDIO_GetResponse>
 8009b24:	4602      	mov	r2, r0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2104      	movs	r1, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f002 ff2e 	bl	800c992 <SDIO_GetResponse>
 8009b36:	4602      	mov	r2, r0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2108      	movs	r1, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 ff25 	bl	800c992 <SDIO_GetResponse>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	210c      	movs	r1, #12
 8009b54:	4618      	mov	r0, r3
 8009b56:	f002 ff1c 	bl	800c992 <SDIO_GetResponse>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2104      	movs	r1, #4
 8009b66:	4618      	mov	r0, r3
 8009b68:	f002 ff13 	bl	800c992 <SDIO_GetResponse>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	0d1a      	lsrs	r2, r3, #20
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b74:	f107 0310 	add.w	r3, r7, #16
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff fbfa 	bl	8009374 <HAL_SD_GetCardCSD>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b8a:	e020      	b.n	8009bce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6819      	ldr	r1, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b94:	041b      	lsls	r3, r3, #16
 8009b96:	f04f 0400 	mov.w	r4, #0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4623      	mov	r3, r4
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	f002 ffbe 	bl	800cb20 <SDMMC_CmdSelDesel>
 8009ba4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <SD_InitCard+0x174>
  {
    return errorstate;
 8009bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bae:	e00e      	b.n	8009bce <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681d      	ldr	r5, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	466c      	mov	r4, sp
 8009bb8:	f103 0210 	add.w	r2, r3, #16
 8009bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f002 fe46 	bl	800c858 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3740      	adds	r7, #64	; 0x40
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009bd8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 ffb8 	bl	800cb66 <SDMMC_CmdGoIdleState>
 8009bf6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	e072      	b.n	8009ce8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f002 ffcb 	bl	800cba2 <SDMMC_CmdOperCond>
 8009c0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00d      	beq.n	8009c30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 ffa1 	bl	800cb66 <SDMMC_CmdGoIdleState>
 8009c24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d004      	beq.n	8009c36 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	e05b      	b.n	8009ce8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d137      	bne.n	8009cae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2100      	movs	r1, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	f002 ffcb 	bl	800cbe0 <SDMMC_CmdAppCommand>
 8009c4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d02d      	beq.n	8009cae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c56:	e047      	b.n	8009ce8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f002 ffbe 	bl	800cbe0 <SDMMC_CmdAppCommand>
 8009c64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <SD_PowerON+0x98>
    {
      return errorstate;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	e03b      	b.n	8009ce8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	491e      	ldr	r1, [pc, #120]	; (8009cf0 <SD_PowerON+0x118>)
 8009c76:	4618      	mov	r0, r3
 8009c78:	f002 ffd4 	bl	800cc24 <SDMMC_CmdAppOperCommand>
 8009c7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c88:	e02e      	b.n	8009ce8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 fe7e 	bl	800c992 <SDIO_GetResponse>
 8009c96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	0fdb      	lsrs	r3, r3, #31
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d101      	bne.n	8009ca4 <SD_PowerON+0xcc>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e000      	b.n	8009ca6 <SD_PowerON+0xce>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]

    count++;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3301      	adds	r3, #1
 8009cac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d802      	bhi.n	8009cbe <SD_PowerON+0xe6>
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0cc      	beq.n	8009c58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d902      	bls.n	8009cce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ccc:	e00c      	b.n	8009ce8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	645a      	str	r2, [r3, #68]	; 0x44
 8009cde:	e002      	b.n	8009ce6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	c1100000 	.word	0xc1100000

08009cf4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d08:	e018      	b.n	8009d3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f003 f848 	bl	800cdac <SDMMC_CmdSendStatus>
 8009d1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	e009      	b.n	8009d3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f002 fe2f 	bl	800c992 <SDIO_GetResponse>
 8009d34:	4602      	mov	r2, r0
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	2300      	movs	r3, #0
 8009d52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f002 fe19 	bl	800c992 <SDIO_GetResponse>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d6a:	d102      	bne.n	8009d72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d70:	e02f      	b.n	8009dd2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f879 	bl	8009e70 <SD_FindSCR>
 8009d7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	e023      	b.n	8009dd2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d01c      	beq.n	8009dce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9c:	041b      	lsls	r3, r3, #16
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f002 ff1d 	bl	800cbe0 <SDMMC_CmdAppCommand>
 8009da6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	e00f      	b.n	8009dd2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2102      	movs	r1, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f002 ff56 	bl	800cc6a <SDMMC_CmdBusWidth>
 8009dbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	e003      	b.n	8009dd2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e001      	b.n	8009dd2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b086      	sub	sp, #24
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	2300      	movs	r3, #0
 8009de8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2100      	movs	r1, #0
 8009df0:	4618      	mov	r0, r3
 8009df2:	f002 fdce 	bl	800c992 <SDIO_GetResponse>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e00:	d102      	bne.n	8009e08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e06:	e02f      	b.n	8009e68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e08:	f107 030c 	add.w	r3, r7, #12
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f82e 	bl	8009e70 <SD_FindSCR>
 8009e14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	e023      	b.n	8009e68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d01c      	beq.n	8009e64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f002 fed2 	bl	800cbe0 <SDMMC_CmdAppCommand>
 8009e3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	e00f      	b.n	8009e68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 ff0b 	bl	800cc6a <SDMMC_CmdBusWidth>
 8009e54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	e003      	b.n	8009e68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	e001      	b.n	8009e68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009e70:	b590      	push	{r4, r7, lr}
 8009e72:	b08f      	sub	sp, #60	; 0x3c
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009e7a:	f7fc fdd7 	bl	8006a2c <HAL_GetTick>
 8009e7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009e84:	2300      	movs	r3, #0
 8009e86:	60bb      	str	r3, [r7, #8]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2108      	movs	r1, #8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 fdba 	bl	800ca10 <SDMMC_CmdBlockLength>
 8009e9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	e0a9      	b.n	8009ffc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	041b      	lsls	r3, r3, #16
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	f002 fe93 	bl	800cbe0 <SDMMC_CmdAppCommand>
 8009eba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	e09a      	b.n	8009ffc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ecc:	2308      	movs	r3, #8
 8009ece:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009ed0:	2330      	movs	r3, #48	; 0x30
 8009ed2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f107 0210 	add.w	r2, r7, #16
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 fd64 	bl	800c9b8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f002 feda 	bl	800ccae <SDMMC_CmdSendSCR>
 8009efa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d022      	beq.n	8009f48 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f04:	e07a      	b.n	8009ffc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00e      	beq.n	8009f32 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6819      	ldr	r1, [r3, #0]
 8009f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	f107 0208 	add.w	r2, r7, #8
 8009f20:	18d4      	adds	r4, r2, r3
 8009f22:	4608      	mov	r0, r1
 8009f24:	f002 fcc3 	bl	800c8ae <SDIO_ReadFIFO>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	6023      	str	r3, [r4, #0]
      index++;
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	3301      	adds	r3, #1
 8009f30:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f32:	f7fc fd7b 	bl	8006a2c <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d102      	bne.n	8009f48 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f46:	e059      	b.n	8009ffc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4e:	f240 432a 	movw	r3, #1066	; 0x42a
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0d6      	beq.n	8009f06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009f6e:	2308      	movs	r3, #8
 8009f70:	e044      	b.n	8009ffc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2202      	movs	r2, #2
 8009f86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e037      	b.n	8009ffc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009fa2:	2320      	movs	r3, #32
 8009fa4:	e02a      	b.n	8009ffc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f240 523a 	movw	r2, #1338	; 0x53a
 8009fae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	061a      	lsls	r2, r3, #24
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	0e1b      	lsrs	r3, r3, #24
 8009fcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	601a      	str	r2, [r3, #0]
    scr++;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	061a      	lsls	r2, r3, #24
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fe4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009fee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	0e1b      	lsrs	r3, r3, #24
 8009ff4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	373c      	adds	r7, #60	; 0x3c
 800a000:	46bd      	mov	sp, r7
 800a002:	bd90      	pop	{r4, r7, pc}

0800a004 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d03f      	beq.n	800a09e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a01e:	2300      	movs	r3, #0
 800a020:	617b      	str	r3, [r7, #20]
 800a022:	e033      	b.n	800a08c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 fc40 	bl	800c8ae <SDIO_ReadFIFO>
 800a02e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	b2da      	uxtb	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3301      	adds	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3b01      	subs	r3, #1
 800a042:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	0a1b      	lsrs	r3, r3, #8
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	3b01      	subs	r3, #1
 800a058:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	0c1b      	lsrs	r3, r3, #16
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	0e1b      	lsrs	r3, r3, #24
 800a074:	b2da      	uxtb	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	3b01      	subs	r3, #1
 800a084:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	3301      	adds	r3, #1
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b07      	cmp	r3, #7
 800a090:	d9c8      	bls.n	800a024 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d043      	beq.n	800a148 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	e037      	b.n	800a136 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	021a      	lsls	r2, r3, #8
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	041a      	lsls	r2, r3, #16
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3301      	adds	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	3b01      	subs	r3, #1
 800a106:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	061a      	lsls	r2, r3, #24
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4313      	orrs	r3, r2
 800a112:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3301      	adds	r3, #1
 800a118:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f107 0208 	add.w	r2, r7, #8
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f002 fbcc 	bl	800c8c8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	3301      	adds	r3, #1
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b07      	cmp	r3, #7
 800a13a:	d9c4      	bls.n	800a0c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a148:	bf00      	nop
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e056      	b.n	800a210 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7fa fff1 	bl	8005164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a198:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	ea42 0103 	orr.w	r1, r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	0c1b      	lsrs	r3, r3, #16
 800a1e0:	f003 0104 	and.w	r1, r3, #4
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	69da      	ldr	r2, [r3, #28]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e01a      	b.n	800a260 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2202      	movs	r2, #2
 800a22e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fb f828 	bl	8005298 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	; 0x30
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a276:	2301      	movs	r3, #1
 800a278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a286:	2b01      	cmp	r3, #1
 800a288:	d101      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x26>
 800a28a:	2302      	movs	r3, #2
 800a28c:	e18a      	b.n	800a5a4 <HAL_SPI_TransmitReceive+0x33c>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a296:	f7fc fbc9 	bl	8006a2c <HAL_GetTick>
 800a29a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a2ac:	887b      	ldrh	r3, [r7, #2]
 800a2ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d00f      	beq.n	800a2d8 <HAL_SPI_TransmitReceive+0x70>
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2be:	d107      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d103      	bne.n	800a2d0 <HAL_SPI_TransmitReceive+0x68>
 800a2c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d003      	beq.n	800a2d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2d6:	e15b      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d005      	beq.n	800a2ea <HAL_SPI_TransmitReceive+0x82>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <HAL_SPI_TransmitReceive+0x82>
 800a2e4:	887b      	ldrh	r3, [r7, #2]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2f0:	e14e      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d003      	beq.n	800a306 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2205      	movs	r2, #5
 800a302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	887a      	ldrh	r2, [r7, #2]
 800a316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	887a      	ldrh	r2, [r7, #2]
 800a31c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	887a      	ldrh	r2, [r7, #2]
 800a328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	887a      	ldrh	r2, [r7, #2]
 800a32e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a346:	2b40      	cmp	r3, #64	; 0x40
 800a348:	d007      	beq.n	800a35a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a362:	d178      	bne.n	800a456 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d002      	beq.n	800a372 <HAL_SPI_TransmitReceive+0x10a>
 800a36c:	8b7b      	ldrh	r3, [r7, #26]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d166      	bne.n	800a440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	881a      	ldrh	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	1c9a      	adds	r2, r3, #2
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	3b01      	subs	r3, #1
 800a390:	b29a      	uxth	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a396:	e053      	b.n	800a440 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f003 0302 	and.w	r3, r3, #2
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d11b      	bne.n	800a3de <HAL_SPI_TransmitReceive+0x176>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d016      	beq.n	800a3de <HAL_SPI_TransmitReceive+0x176>
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d113      	bne.n	800a3de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ba:	881a      	ldrh	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c6:	1c9a      	adds	r2, r3, #2
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d119      	bne.n	800a420 <HAL_SPI_TransmitReceive+0x1b8>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d014      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68da      	ldr	r2, [r3, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	b292      	uxth	r2, r2
 800a402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	1c9a      	adds	r2, r3, #2
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a41c:	2301      	movs	r3, #1
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a420:	f7fc fb04 	bl	8006a2c <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d807      	bhi.n	800a440 <HAL_SPI_TransmitReceive+0x1d8>
 800a430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d003      	beq.n	800a440 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a43e:	e0a7      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1a6      	bne.n	800a398 <HAL_SPI_TransmitReceive+0x130>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a44e:	b29b      	uxth	r3, r3
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1a1      	bne.n	800a398 <HAL_SPI_TransmitReceive+0x130>
 800a454:	e07c      	b.n	800a550 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <HAL_SPI_TransmitReceive+0x1fc>
 800a45e:	8b7b      	ldrh	r3, [r7, #26]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d16b      	bne.n	800a53c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	330c      	adds	r3, #12
 800a46e:	7812      	ldrb	r2, [r2, #0]
 800a470:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a480:	b29b      	uxth	r3, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	b29a      	uxth	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a48a:	e057      	b.n	800a53c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b02      	cmp	r3, #2
 800a498:	d11c      	bne.n	800a4d4 <HAL_SPI_TransmitReceive+0x26c>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d017      	beq.n	800a4d4 <HAL_SPI_TransmitReceive+0x26c>
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d114      	bne.n	800a4d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	330c      	adds	r3, #12
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	1c5a      	adds	r2, r3, #1
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d119      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x2ae>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d014      	beq.n	800a516 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	b2d2      	uxtb	r2, r2
 800a4f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a512:	2301      	movs	r3, #1
 800a514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a516:	f7fc fa89 	bl	8006a2c <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a522:	429a      	cmp	r2, r3
 800a524:	d803      	bhi.n	800a52e <HAL_SPI_TransmitReceive+0x2c6>
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52c:	d102      	bne.n	800a534 <HAL_SPI_TransmitReceive+0x2cc>
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	2b00      	cmp	r3, #0
 800a532:	d103      	bne.n	800a53c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a53a:	e029      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a540:	b29b      	uxth	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1a2      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x224>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d19d      	bne.n	800a48c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fae1 	bl	800ab1c <SPI_EndRxTxTransaction>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d006      	beq.n	800a56e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2220      	movs	r2, #32
 800a56a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a56c:	e010      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10b      	bne.n	800a58e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	e000      	b.n	800a590 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a58e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3730      	adds	r7, #48	; 0x30
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_SPI_Transmit_DMA+0x20>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e093      	b.n	800a6f4 <HAL_SPI_Transmit_DMA+0x148>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d002      	beq.n	800a5e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5e4:	e081      	b.n	800a6ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <HAL_SPI_Transmit_DMA+0x46>
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5f6:	e078      	b.n	800a6ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	88fa      	ldrh	r2, [r7, #6]
 800a616:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a63e:	d107      	bne.n	800a650 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a64e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a654:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <HAL_SPI_Transmit_DMA+0x150>)
 800a656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65c:	4a28      	ldr	r2, [pc, #160]	; (800a700 <HAL_SPI_Transmit_DMA+0x154>)
 800a65e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a664:	4a27      	ldr	r2, [pc, #156]	; (800a704 <HAL_SPI_Transmit_DMA+0x158>)
 800a666:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66c:	2200      	movs	r2, #0
 800a66e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a678:	4619      	mov	r1, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	330c      	adds	r3, #12
 800a680:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a686:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a688:	f7fd f986 	bl	8007998 <HAL_DMA_Start_IT>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00c      	beq.n	800a6ac <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a696:	f043 0210 	orr.w	r2, r3, #16
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a6aa:	e01e      	b.n	800a6ea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d007      	beq.n	800a6ca <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6c8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f042 0220 	orr.w	r2, r2, #32
 800a6d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0202 	orr.w	r2, r2, #2
 800a6e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	0800a9c5 	.word	0x0800a9c5
 800a700:	0800a91d 	.word	0x0800a91d
 800a704:	0800a9e1 	.word	0x0800a9e1

0800a708 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	099b      	lsrs	r3, r3, #6
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10f      	bne.n	800a74c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	099b      	lsrs	r3, r3, #6
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
    return;
 800a74a:	e0d8      	b.n	800a8fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <HAL_SPI_IRQHandler+0x66>
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	09db      	lsrs	r3, r3, #7
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
    return;
 800a76c:	e0c7      	b.n	800a8fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	095b      	lsrs	r3, r3, #5
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <HAL_SPI_IRQHandler+0x8c>
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	099b      	lsrs	r3, r3, #6
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	0a1b      	lsrs	r3, r3, #8
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80b5 	beq.w	800a8fe <HAL_SPI_IRQHandler+0x1f6>
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80ae 	beq.w	800a8fe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	099b      	lsrs	r3, r3, #6
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d023      	beq.n	800a7f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d011      	beq.n	800a7de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7be:	f043 0204 	orr.w	r2, r3, #4
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	e00b      	b.n	800a7f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7de:	2300      	movs	r3, #0
 800a7e0:	613b      	str	r3, [r7, #16]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	613b      	str	r3, [r7, #16]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	693b      	ldr	r3, [r7, #16]
        return;
 800a7f4:	e083      	b.n	800a8fe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d014      	beq.n	800a82c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a806:	f043 0201 	orr.w	r2, r3, #1
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	0a1b      	lsrs	r3, r3, #8
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00c      	beq.n	800a852 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83c:	f043 0208 	orr.w	r2, r3, #8
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a844:	2300      	movs	r3, #0
 800a846:	60bb      	str	r3, [r7, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	60bb      	str	r3, [r7, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a856:	2b00      	cmp	r3, #0
 800a858:	d050      	beq.n	800a8fc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a868:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f003 0302 	and.w	r3, r3, #2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <HAL_SPI_IRQHandler+0x17e>
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d034      	beq.n	800a8f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f022 0203 	bic.w	r2, r2, #3
 800a894:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d011      	beq.n	800a8c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	4a18      	ldr	r2, [pc, #96]	; (800a904 <HAL_SPI_IRQHandler+0x1fc>)
 800a8a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fd f8cc 	bl	8007a48 <HAL_DMA_Abort_IT>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d016      	beq.n	800a8f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ce:	4a0d      	ldr	r2, [pc, #52]	; (800a904 <HAL_SPI_IRQHandler+0x1fc>)
 800a8d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd f8b6 	bl	8007a48 <HAL_DMA_Abort_IT>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a8ee:	e003      	b.n	800a8f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7fa fc03 	bl	80050fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a8f6:	e000      	b.n	800a8fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a8f8:	bf00      	nop
    return;
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
  }
}
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	0800aa21 	.word	0x0800aa21

0800a908 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a92a:	f7fc f87f 	bl	8006a2c <HAL_GetTick>
 800a92e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d03b      	beq.n	800a9b8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0220 	bic.w	r2, r2, #32
 800a94e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 0202 	bic.w	r2, r2, #2
 800a95e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	2164      	movs	r1, #100	; 0x64
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f000 f8d9 	bl	800ab1c <SPI_EndRxTxTransaction>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d005      	beq.n	800a97c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a974:	f043 0220 	orr.w	r2, r3, #32
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2200      	movs	r2, #0
 800a99e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d003      	beq.n	800a9b8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a9b0:	6978      	ldr	r0, [r7, #20]
 800a9b2:	f7fa fba3 	bl	80050fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a9b6:	e002      	b.n	800a9be <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a9b8:	6978      	ldr	r0, [r7, #20]
 800a9ba:	f7fa fbb5 	bl	8005128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff ff98 	bl	800a908 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0203 	bic.w	r2, r2, #3
 800a9fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa02:	f043 0210 	orr.w	r2, r3, #16
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7fa fb72 	bl	80050fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa18:	bf00      	nop
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7fa fb5e 	bl	80050fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa40:	bf00      	nop
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	4613      	mov	r3, r2
 800aa56:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa58:	e04c      	b.n	800aaf4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d048      	beq.n	800aaf4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aa62:	f7fb ffe3 	bl	8006a2c <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d902      	bls.n	800aa78 <SPI_WaitFlagStateUntilTimeout+0x30>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d13d      	bne.n	800aaf4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa90:	d111      	bne.n	800aab6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9a:	d004      	beq.n	800aaa6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa4:	d107      	bne.n	800aab6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aab4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aabe:	d10f      	bne.n	800aae0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aade:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e00f      	b.n	800ab14 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689a      	ldr	r2, [r3, #8]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	4013      	ands	r3, r2
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bf0c      	ite	eq
 800ab04:	2301      	moveq	r3, #1
 800ab06:	2300      	movne	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d1a3      	bne.n	800aa5a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af02      	add	r7, sp, #8
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab28:	4b1b      	ldr	r3, [pc, #108]	; (800ab98 <SPI_EndRxTxTransaction+0x7c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a1b      	ldr	r2, [pc, #108]	; (800ab9c <SPI_EndRxTxTransaction+0x80>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	0d5b      	lsrs	r3, r3, #21
 800ab34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab46:	d112      	bne.n	800ab6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2180      	movs	r1, #128	; 0x80
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff ff78 	bl	800aa48 <SPI_WaitFlagStateUntilTimeout>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d016      	beq.n	800ab8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	f043 0220 	orr.w	r2, r3, #32
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e00f      	b.n	800ab8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	3b01      	subs	r3, #1
 800ab78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab84:	2b80      	cmp	r3, #128	; 0x80
 800ab86:	d0f2      	beq.n	800ab6e <SPI_EndRxTxTransaction+0x52>
 800ab88:	e000      	b.n	800ab8c <SPI_EndRxTxTransaction+0x70>
        break;
 800ab8a:	bf00      	nop
  }

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000000 	.word	0x20000000
 800ab9c:	165e9f81 	.word	0x165e9f81

0800aba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e01d      	b.n	800abee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fa f802 	bl	8004bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2202      	movs	r2, #2
 800abd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3304      	adds	r3, #4
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f000 fb2a 	bl	800b238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e01d      	b.n	800ac44 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f815 	bl	800ac4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2202      	movs	r2, #2
 800ac26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f000 faff 	bl	800b238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d841      	bhi.n	800acf4 <HAL_TIM_IC_Start_IT+0x94>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <HAL_TIM_IC_Start_IT+0x18>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800acad 	.word	0x0800acad
 800ac7c:	0800acf5 	.word	0x0800acf5
 800ac80:	0800acf5 	.word	0x0800acf5
 800ac84:	0800acf5 	.word	0x0800acf5
 800ac88:	0800acbf 	.word	0x0800acbf
 800ac8c:	0800acf5 	.word	0x0800acf5
 800ac90:	0800acf5 	.word	0x0800acf5
 800ac94:	0800acf5 	.word	0x0800acf5
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acf5 	.word	0x0800acf5
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800acf5 	.word	0x0800acf5
 800aca8:	0800ace3 	.word	0x0800ace3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0202 	orr.w	r2, r2, #2
 800acba:	60da      	str	r2, [r3, #12]
      break;
 800acbc:	e01b      	b.n	800acf6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0204 	orr.w	r2, r2, #4
 800accc:	60da      	str	r2, [r3, #12]
      break;
 800acce:	e012      	b.n	800acf6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0208 	orr.w	r2, r2, #8
 800acde:	60da      	str	r2, [r3, #12]
      break;
 800ace0:	e009      	b.n	800acf6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0210 	orr.w	r2, r2, #16
 800acf0:	60da      	str	r2, [r3, #12]
      break;
 800acf2:	e000      	b.n	800acf6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800acf4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2201      	movs	r2, #1
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 fcd2 	bl	800b6a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 0307 	and.w	r3, r3, #7
 800ad0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d007      	beq.n	800ad26 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f042 0201 	orr.w	r2, r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d122      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	f003 0302 	and.w	r3, r3, #2
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d11b      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f06f 0202 	mvn.w	r2, #2
 800ad5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f9 ff7c 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 800ad78:	e005      	b.n	800ad86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa3d 	bl	800b1fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fa44 	bl	800b20e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d122      	bne.n	800ade0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d11b      	bne.n	800ade0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f06f 0204 	mvn.w	r2, #4
 800adb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2202      	movs	r2, #2
 800adb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7f9 ff52 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 800adcc:	e005      	b.n	800adda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa13 	bl	800b1fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fa1a 	bl	800b20e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b08      	cmp	r3, #8
 800adec:	d122      	bne.n	800ae34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f003 0308 	and.w	r3, r3, #8
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d11b      	bne.n	800ae34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0208 	mvn.w	r2, #8
 800ae04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f9 ff28 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 800ae20:	e005      	b.n	800ae2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9e9 	bl	800b1fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9f0 	bl	800b20e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f003 0310 	and.w	r3, r3, #16
 800ae3e:	2b10      	cmp	r3, #16
 800ae40:	d122      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f003 0310 	and.w	r3, r3, #16
 800ae4c:	2b10      	cmp	r3, #16
 800ae4e:	d11b      	bne.n	800ae88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f06f 0210 	mvn.w	r2, #16
 800ae58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2208      	movs	r2, #8
 800ae5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7f9 fefe 	bl	8004c70 <HAL_TIM_IC_CaptureCallback>
 800ae74:	e005      	b.n	800ae82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f9bf 	bl	800b1fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f9c6 	bl	800b20e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d10e      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d107      	bne.n	800aeb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f06f 0201 	mvn.w	r2, #1
 800aeac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f999 	bl	800b1e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aebe:	2b80      	cmp	r3, #128	; 0x80
 800aec0:	d10e      	bne.n	800aee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aecc:	2b80      	cmp	r3, #128	; 0x80
 800aece:	d107      	bne.n	800aee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fc82 	bl	800b7e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d10e      	bne.n	800af0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d107      	bne.n	800af0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f98b 	bl	800b222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0320 	and.w	r3, r3, #32
 800af16:	2b20      	cmp	r3, #32
 800af18:	d10e      	bne.n	800af38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b20      	cmp	r3, #32
 800af26:	d107      	bne.n	800af38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0220 	mvn.w	r2, #32
 800af30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fc4c 	bl	800b7d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <HAL_TIM_IC_ConfigChannel+0x1a>
 800af56:	2302      	movs	r3, #2
 800af58:	e08a      	b.n	800b070 <HAL_TIM_IC_ConfigChannel+0x130>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2202      	movs	r2, #2
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d11b      	bne.n	800afa8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	6819      	ldr	r1, [r3, #0]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f000 f9da 	bl	800b338 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 020c 	bic.w	r2, r2, #12
 800af92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6999      	ldr	r1, [r3, #24]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	430a      	orrs	r2, r1
 800afa4:	619a      	str	r2, [r3, #24]
 800afa6:	e05a      	b.n	800b05e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d11c      	bne.n	800afe8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6818      	ldr	r0, [r3, #0]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6819      	ldr	r1, [r3, #0]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	f000 fa52 	bl	800b466 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800afd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6999      	ldr	r1, [r3, #24]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	021a      	lsls	r2, r3, #8
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	619a      	str	r2, [r3, #24]
 800afe6:	e03a      	b.n	800b05e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b08      	cmp	r3, #8
 800afec:	d11b      	bne.n	800b026 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6818      	ldr	r0, [r3, #0]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	6819      	ldr	r1, [r3, #0]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f000 fa9f 	bl	800b540 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f022 020c 	bic.w	r2, r2, #12
 800b010:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69d9      	ldr	r1, [r3, #28]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	61da      	str	r2, [r3, #28]
 800b024:	e01b      	b.n	800b05e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6818      	ldr	r0, [r3, #0]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	6819      	ldr	r1, [r3, #0]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f000 fabf 	bl	800b5b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69da      	ldr	r2, [r3, #28]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b048:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69d9      	ldr	r1, [r3, #28]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	021a      	lsls	r2, r3, #8
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d101      	bne.n	800b090 <HAL_TIM_ConfigClockSource+0x18>
 800b08c:	2302      	movs	r3, #2
 800b08e:	e0a6      	b.n	800b1de <HAL_TIM_ConfigClockSource+0x166>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2202      	movs	r2, #2
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b40      	cmp	r3, #64	; 0x40
 800b0c6:	d067      	beq.n	800b198 <HAL_TIM_ConfigClockSource+0x120>
 800b0c8:	2b40      	cmp	r3, #64	; 0x40
 800b0ca:	d80b      	bhi.n	800b0e4 <HAL_TIM_ConfigClockSource+0x6c>
 800b0cc:	2b10      	cmp	r3, #16
 800b0ce:	d073      	beq.n	800b1b8 <HAL_TIM_ConfigClockSource+0x140>
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d802      	bhi.n	800b0da <HAL_TIM_ConfigClockSource+0x62>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d06f      	beq.n	800b1b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b0d8:	e078      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d06c      	beq.n	800b1b8 <HAL_TIM_ConfigClockSource+0x140>
 800b0de:	2b30      	cmp	r3, #48	; 0x30
 800b0e0:	d06a      	beq.n	800b1b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b0e2:	e073      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0e4:	2b70      	cmp	r3, #112	; 0x70
 800b0e6:	d00d      	beq.n	800b104 <HAL_TIM_ConfigClockSource+0x8c>
 800b0e8:	2b70      	cmp	r3, #112	; 0x70
 800b0ea:	d804      	bhi.n	800b0f6 <HAL_TIM_ConfigClockSource+0x7e>
 800b0ec:	2b50      	cmp	r3, #80	; 0x50
 800b0ee:	d033      	beq.n	800b158 <HAL_TIM_ConfigClockSource+0xe0>
 800b0f0:	2b60      	cmp	r3, #96	; 0x60
 800b0f2:	d041      	beq.n	800b178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b0f4:	e06a      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0fa:	d066      	beq.n	800b1ca <HAL_TIM_ConfigClockSource+0x152>
 800b0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b100:	d017      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b102:	e063      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	6899      	ldr	r1, [r3, #8]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f000 faa8 	bl	800b668 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	609a      	str	r2, [r3, #8]
      break;
 800b130:	e04c      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	6899      	ldr	r1, [r3, #8]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f000 fa91 	bl	800b668 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b154:	609a      	str	r2, [r3, #8]
      break;
 800b156:	e039      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	6859      	ldr	r1, [r3, #4]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	461a      	mov	r2, r3
 800b166:	f000 f94f 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2150      	movs	r1, #80	; 0x50
 800b170:	4618      	mov	r0, r3
 800b172:	f000 fa5e 	bl	800b632 <TIM_ITRx_SetConfig>
      break;
 800b176:	e029      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	6859      	ldr	r1, [r3, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	461a      	mov	r2, r3
 800b186:	f000 f9ab 	bl	800b4e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2160      	movs	r1, #96	; 0x60
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fa4e 	bl	800b632 <TIM_ITRx_SetConfig>
      break;
 800b196:	e019      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	6859      	ldr	r1, [r3, #4]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	f000 f92f 	bl	800b408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2140      	movs	r1, #64	; 0x40
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fa3e 	bl	800b632 <TIM_ITRx_SetConfig>
      break;
 800b1b6:	e009      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f000 fa35 	bl	800b632 <TIM_ITRx_SetConfig>
      break;
 800b1c8:	e000      	b.n	800b1cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b1ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
	...

0800b238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a34      	ldr	r2, [pc, #208]	; (800b31c <TIM_Base_SetConfig+0xe4>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d00f      	beq.n	800b270 <TIM_Base_SetConfig+0x38>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b256:	d00b      	beq.n	800b270 <TIM_Base_SetConfig+0x38>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a31      	ldr	r2, [pc, #196]	; (800b320 <TIM_Base_SetConfig+0xe8>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d007      	beq.n	800b270 <TIM_Base_SetConfig+0x38>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a30      	ldr	r2, [pc, #192]	; (800b324 <TIM_Base_SetConfig+0xec>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d003      	beq.n	800b270 <TIM_Base_SetConfig+0x38>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a2f      	ldr	r2, [pc, #188]	; (800b328 <TIM_Base_SetConfig+0xf0>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d108      	bne.n	800b282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a25      	ldr	r2, [pc, #148]	; (800b31c <TIM_Base_SetConfig+0xe4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d01b      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b290:	d017      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a22      	ldr	r2, [pc, #136]	; (800b320 <TIM_Base_SetConfig+0xe8>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d013      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a21      	ldr	r2, [pc, #132]	; (800b324 <TIM_Base_SetConfig+0xec>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00f      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a20      	ldr	r2, [pc, #128]	; (800b328 <TIM_Base_SetConfig+0xf0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d00b      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a1f      	ldr	r2, [pc, #124]	; (800b32c <TIM_Base_SetConfig+0xf4>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d007      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a1e      	ldr	r2, [pc, #120]	; (800b330 <TIM_Base_SetConfig+0xf8>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d003      	beq.n	800b2c2 <TIM_Base_SetConfig+0x8a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1d      	ldr	r2, [pc, #116]	; (800b334 <TIM_Base_SetConfig+0xfc>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d108      	bne.n	800b2d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a08      	ldr	r2, [pc, #32]	; (800b31c <TIM_Base_SetConfig+0xe4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d103      	bne.n	800b308 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	615a      	str	r2, [r3, #20]
}
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	40010000 	.word	0x40010000
 800b320:	40000400 	.word	0x40000400
 800b324:	40000800 	.word	0x40000800
 800b328:	40000c00 	.word	0x40000c00
 800b32c:	40014000 	.word	0x40014000
 800b330:	40014400 	.word	0x40014400
 800b334:	40014800 	.word	0x40014800

0800b338 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	f023 0201 	bic.w	r2, r3, #1
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	4a24      	ldr	r2, [pc, #144]	; (800b3f4 <TIM_TI1_SetConfig+0xbc>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d013      	beq.n	800b38e <TIM_TI1_SetConfig+0x56>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36c:	d00f      	beq.n	800b38e <TIM_TI1_SetConfig+0x56>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4a21      	ldr	r2, [pc, #132]	; (800b3f8 <TIM_TI1_SetConfig+0xc0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00b      	beq.n	800b38e <TIM_TI1_SetConfig+0x56>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4a20      	ldr	r2, [pc, #128]	; (800b3fc <TIM_TI1_SetConfig+0xc4>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d007      	beq.n	800b38e <TIM_TI1_SetConfig+0x56>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <TIM_TI1_SetConfig+0xc8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d003      	beq.n	800b38e <TIM_TI1_SetConfig+0x56>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4a1e      	ldr	r2, [pc, #120]	; (800b404 <TIM_TI1_SetConfig+0xcc>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d101      	bne.n	800b392 <TIM_TI1_SetConfig+0x5a>
 800b38e:	2301      	movs	r3, #1
 800b390:	e000      	b.n	800b394 <TIM_TI1_SetConfig+0x5c>
 800b392:	2300      	movs	r3, #0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d008      	beq.n	800b3aa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]
 800b3a8:	e003      	b.n	800b3b2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f043 0301 	orr.w	r3, r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	011b      	lsls	r3, r3, #4
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	f023 030a 	bic.w	r3, r3, #10
 800b3cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	f003 030a 	and.w	r3, r3, #10
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	621a      	str	r2, [r3, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40010000 	.word	0x40010000
 800b3f8:	40000400 	.word	0x40000400
 800b3fc:	40000800 	.word	0x40000800
 800b400:	40000c00 	.word	0x40000c00
 800b404:	40014000 	.word	0x40014000

0800b408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	f023 0201 	bic.w	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	011b      	lsls	r3, r3, #4
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f023 030a 	bic.w	r3, r3, #10
 800b444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b446:	697a      	ldr	r2, [r7, #20]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b466:	b480      	push	{r7}
 800b468:	b087      	sub	sp, #28
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	60f8      	str	r0, [r7, #12]
 800b46e:	60b9      	str	r1, [r7, #8]
 800b470:	607a      	str	r2, [r7, #4]
 800b472:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	f023 0210 	bic.w	r2, r3, #16
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	021b      	lsls	r3, r3, #8
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b4a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	031b      	lsls	r3, r3, #12
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	bf00      	nop
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6a1b      	ldr	r3, [r3, #32]
 800b4f0:	f023 0210 	bic.w	r2, r3, #16
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b50a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	031b      	lsls	r3, r3, #12
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b51c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	621a      	str	r2, [r3, #32]
}
 800b534:	bf00      	nop
 800b536:	371c      	adds	r7, #28
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b540:	b480      	push	{r7}
 800b542:	b087      	sub	sp, #28
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4313      	orrs	r3, r2
 800b574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b57c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	b2db      	uxtb	r3, r3
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4313      	orrs	r3, r2
 800b588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	621a      	str	r2, [r3, #32]
}
 800b5ac:	bf00      	nop
 800b5ae:	371c      	adds	r7, #28
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	031b      	lsls	r3, r3, #12
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	4313      	orrs	r3, r2
 800b602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b60a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	031b      	lsls	r3, r3, #12
 800b610:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b632:	b480      	push	{r7}
 800b634:	b085      	sub	sp, #20
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4313      	orrs	r3, r2
 800b650:	f043 0307 	orr.w	r3, r3, #7
 800b654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	609a      	str	r2, [r3, #8]
}
 800b65c:	bf00      	nop
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	021a      	lsls	r2, r3, #8
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	431a      	orrs	r2, r3
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	4313      	orrs	r3, r2
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	4313      	orrs	r3, r2
 800b694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	609a      	str	r2, [r3, #8]
}
 800b69c:	bf00      	nop
 800b69e:	371c      	adds	r7, #28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f003 031f 	and.w	r3, r3, #31
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a1a      	ldr	r2, [r3, #32]
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	43db      	mvns	r3, r3
 800b6ca:	401a      	ands	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a1a      	ldr	r2, [r3, #32]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f003 031f 	and.w	r3, r3, #31
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e0:	431a      	orrs	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	621a      	str	r2, [r3, #32]
}
 800b6e6:	bf00      	nop
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b708:	2302      	movs	r3, #2
 800b70a:	e050      	b.n	800b7ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a1c      	ldr	r2, [pc, #112]	; (800b7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d018      	beq.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b758:	d013      	beq.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d00e      	beq.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a16      	ldr	r2, [pc, #88]	; (800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d009      	beq.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a15      	ldr	r2, [pc, #84]	; (800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d004      	beq.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a13      	ldr	r2, [pc, #76]	; (800b7cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d10c      	bne.n	800b79c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4313      	orrs	r3, r2
 800b792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40000400 	.word	0x40000400
 800b7c4:	40000800 	.word	0x40000800
 800b7c8:	40000c00 	.word	0x40000c00
 800b7cc:	40014000 	.word	0x40014000

0800b7d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e03f      	b.n	800b88a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7fa f9b0 	bl	8005b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2224      	movs	r2, #36	; 0x24
 800b828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b83a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fc8f 	bl	800c160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	695a      	ldr	r2, [r3, #20]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b082      	sub	sp, #8
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e01e      	b.n	800b8e2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2224      	movs	r2, #36	; 0x24
 800b8a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8ba:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7fa fa37 	bl	8005d30 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b088      	sub	sp, #32
 800b8ee:	af02      	add	r7, sp, #8
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	603b      	str	r3, [r7, #0]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b20      	cmp	r3, #32
 800b908:	f040 8083 	bne.w	800ba12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <HAL_UART_Transmit+0x2e>
 800b912:	88fb      	ldrh	r3, [r7, #6]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	e07b      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <HAL_UART_Transmit+0x40>
 800b926:	2302      	movs	r3, #2
 800b928:	e074      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2221      	movs	r2, #33	; 0x21
 800b93c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b940:	f7fb f874 	bl	8006a2c <HAL_GetTick>
 800b944:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	88fa      	ldrh	r2, [r7, #6]
 800b950:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b95a:	e042      	b.n	800b9e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b960:	b29b      	uxth	r3, r3
 800b962:	3b01      	subs	r3, #1
 800b964:	b29a      	uxth	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b972:	d122      	bne.n	800b9ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2200      	movs	r2, #0
 800b97c:	2180      	movs	r1, #128	; 0x80
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 fa6c 	bl	800be5c <UART_WaitOnFlagUntilTimeout>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e042      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	3302      	adds	r3, #2
 800b9ae:	60bb      	str	r3, [r7, #8]
 800b9b0:	e017      	b.n	800b9e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60bb      	str	r3, [r7, #8]
 800b9b8:	e013      	b.n	800b9e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2180      	movs	r1, #128	; 0x80
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 fa49 	bl	800be5c <UART_WaitOnFlagUntilTimeout>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e01f      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	60ba      	str	r2, [r7, #8]
 800b9da:	781a      	ldrb	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1b7      	bne.n	800b95c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2140      	movs	r1, #64	; 0x40
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 fa30 	bl	800be5c <UART_WaitOnFlagUntilTimeout>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e006      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e000      	b.n	800ba14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ba12:	2302      	movs	r3, #2
  }
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	4613      	mov	r3, r2
 800ba28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b20      	cmp	r3, #32
 800ba34:	d166      	bne.n	800bb04 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <HAL_UART_Receive_DMA+0x26>
 800ba3c:	88fb      	ldrh	r3, [r7, #6]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e05f      	b.n	800bb06 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_UART_Receive_DMA+0x38>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e058      	b.n	800bb06 <HAL_UART_Receive_DMA+0xea>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	88fa      	ldrh	r2, [r7, #6]
 800ba66:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2222      	movs	r2, #34	; 0x22
 800ba72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	4a25      	ldr	r2, [pc, #148]	; (800bb10 <HAL_UART_Receive_DMA+0xf4>)
 800ba7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba82:	4a24      	ldr	r2, [pc, #144]	; (800bb14 <HAL_UART_Receive_DMA+0xf8>)
 800ba84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	4a23      	ldr	r2, [pc, #140]	; (800bb18 <HAL_UART_Receive_DMA+0xfc>)
 800ba8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba92:	2200      	movs	r2, #0
 800ba94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800ba96:	f107 0308 	add.w	r3, r7, #8
 800ba9a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3304      	adds	r3, #4
 800baa6:	4619      	mov	r1, r3
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	88fb      	ldrh	r3, [r7, #6]
 800baae:	f7fb ff73 	bl	8007998 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800bab2:	2300      	movs	r3, #0
 800bab4:	613b      	str	r3, [r7, #16]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	613b      	str	r3, [r7, #16]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bade:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	695a      	ldr	r2, [r3, #20]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f042 0201 	orr.w	r2, r2, #1
 800baee:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	695a      	ldr	r2, [r3, #20]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bafe:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e000      	b.n	800bb06 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bb04:	2302      	movs	r3, #2
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3718      	adds	r7, #24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	0800bd45 	.word	0x0800bd45
 800bb14:	0800bdad 	.word	0x0800bdad
 800bb18:	0800bdc9 	.word	0x0800bdc9

0800bb1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10d      	bne.n	800bb6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	f003 0320 	and.w	r3, r3, #32
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d008      	beq.n	800bb6e <HAL_UART_IRQHandler+0x52>
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fa78 	bl	800c05c <UART_Receive_IT>
      return;
 800bb6c:	e0d1      	b.n	800bd12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 80b0 	beq.w	800bcd6 <HAL_UART_IRQHandler+0x1ba>
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_UART_IRQHandler+0x70>
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80a5 	beq.w	800bcd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00a      	beq.n	800bbac <HAL_UART_IRQHandler+0x90>
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba4:	f043 0201 	orr.w	r2, r3, #1
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <HAL_UART_IRQHandler+0xb0>
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc4:	f043 0202 	orr.w	r2, r3, #2
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	f003 0302 	and.w	r3, r3, #2
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <HAL_UART_IRQHandler+0xd0>
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe4:	f043 0204 	orr.w	r2, r3, #4
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f003 0308 	and.w	r3, r3, #8
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00f      	beq.n	800bc16 <HAL_UART_IRQHandler+0xfa>
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d104      	bne.n	800bc0a <HAL_UART_IRQHandler+0xee>
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d005      	beq.n	800bc16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0e:	f043 0208 	orr.w	r2, r3, #8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d078      	beq.n	800bd10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	f003 0320 	and.w	r3, r3, #32
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d007      	beq.n	800bc38 <HAL_UART_IRQHandler+0x11c>
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa12 	bl	800c05c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc42:	2b40      	cmp	r3, #64	; 0x40
 800bc44:	bf0c      	ite	eq
 800bc46:	2301      	moveq	r3, #1
 800bc48:	2300      	movne	r3, #0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d102      	bne.n	800bc60 <HAL_UART_IRQHandler+0x144>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d031      	beq.n	800bcc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f95b 	bl	800bf1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc70:	2b40      	cmp	r3, #64	; 0x40
 800bc72:	d123      	bne.n	800bcbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	695a      	ldr	r2, [r3, #20]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d013      	beq.n	800bcb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc90:	4a21      	ldr	r2, [pc, #132]	; (800bd18 <HAL_UART_IRQHandler+0x1fc>)
 800bc92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fb fed5 	bl	8007a48 <HAL_DMA_Abort_IT>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d016      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bcae:	4610      	mov	r0, r2
 800bcb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb2:	e00e      	b.n	800bcd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7f9 ff51 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcba:	e00a      	b.n	800bcd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7f9 ff4d 	bl	8005b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc2:	e006      	b.n	800bcd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7f9 ff49 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bcd0:	e01e      	b.n	800bd10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd2:	bf00      	nop
    return;
 800bcd4:	e01c      	b.n	800bd10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d008      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x1d6>
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f948 	bl	800bf80 <UART_Transmit_IT>
    return;
 800bcf0:	e00f      	b.n	800bd12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00a      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1f6>
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d005      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f990 	bl	800c02c <UART_EndTransmit_IT>
    return;
 800bd0c:	bf00      	nop
 800bd0e:	e000      	b.n	800bd12 <HAL_UART_IRQHandler+0x1f6>
    return;
 800bd10:	bf00      	nop
  }
}
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	0800bf59 	.word	0x0800bf59

0800bd1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd50:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d11e      	bne.n	800bd9e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd74:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	695a      	ldr	r2, [r3, #20]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0201 	bic.w	r2, r2, #1
 800bd84:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	695a      	ldr	r2, [r3, #20]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd94:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2220      	movs	r2, #32
 800bd9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7f9 fee6 	bl	8005b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda4:	bf00      	nop
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f7ff ffb8 	bl	800bd30 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdc0:	bf00      	nop
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	695b      	ldr	r3, [r3, #20]
 800bde0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde4:	2b80      	cmp	r3, #128	; 0x80
 800bde6:	bf0c      	ite	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	2300      	movne	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b21      	cmp	r3, #33	; 0x21
 800bdfa:	d108      	bne.n	800be0e <UART_DMAError+0x46>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d005      	beq.n	800be0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2200      	movs	r2, #0
 800be06:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800be08:	68b8      	ldr	r0, [r7, #8]
 800be0a:	f000 f871 	bl	800bef0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	2b40      	cmp	r3, #64	; 0x40
 800be1a:	bf0c      	ite	eq
 800be1c:	2301      	moveq	r3, #1
 800be1e:	2300      	movne	r3, #0
 800be20:	b2db      	uxtb	r3, r3
 800be22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b22      	cmp	r3, #34	; 0x22
 800be2e:	d108      	bne.n	800be42 <UART_DMAError+0x7a>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d005      	beq.n	800be42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	2200      	movs	r2, #0
 800be3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800be3c:	68b8      	ldr	r0, [r7, #8]
 800be3e:	f000 f86d 	bl	800bf1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be46:	f043 0210 	orr.w	r2, r3, #16
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be4e:	68b8      	ldr	r0, [r7, #8]
 800be50:	f7f9 fe84 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	4613      	mov	r3, r2
 800be6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be6c:	e02c      	b.n	800bec8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be74:	d028      	beq.n	800bec8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <UART_WaitOnFlagUntilTimeout+0x30>
 800be7c:	f7fa fdd6 	bl	8006a2c <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d21d      	bcs.n	800bec8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68da      	ldr	r2, [r3, #12]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	695a      	ldr	r2, [r3, #20]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 0201 	bic.w	r2, r2, #1
 800beaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2220      	movs	r2, #32
 800beb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2220      	movs	r2, #32
 800beb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	e00f      	b.n	800bee8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	4013      	ands	r3, r2
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	bf0c      	ite	eq
 800bed8:	2301      	moveq	r3, #1
 800beda:	2300      	movne	r3, #0
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	461a      	mov	r2, r3
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d0c3      	beq.n	800be6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68da      	ldr	r2, [r3, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bf06:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68da      	ldr	r2, [r3, #12]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	695a      	ldr	r2, [r3, #20]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f022 0201 	bic.w	r2, r2, #1
 800bf42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2220      	movs	r2, #32
 800bf48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f7f9 fdf2 	bl	8005b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b21      	cmp	r3, #33	; 0x21
 800bf92:	d144      	bne.n	800c01e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9c:	d11a      	bne.n	800bfd4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfb2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d105      	bne.n	800bfc8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	1c9a      	adds	r2, r3, #2
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	621a      	str	r2, [r3, #32]
 800bfc6:	e00e      	b.n	800bfe6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	621a      	str	r2, [r3, #32]
 800bfd2:	e008      	b.n	800bfe6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	1c59      	adds	r1, r3, #1
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6211      	str	r1, [r2, #32]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	4619      	mov	r1, r3
 800bff4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10f      	bne.n	800c01a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c008:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c018:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e000      	b.n	800c020 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c01e:	2302      	movs	r3, #2
  }
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c042:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2220      	movs	r2, #32
 800c048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff fe65 	bl	800bd1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b22      	cmp	r3, #34	; 0x22
 800c06e:	d171      	bne.n	800c154 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c078:	d123      	bne.n	800c0c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c07e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10e      	bne.n	800c0a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	b29b      	uxth	r3, r3
 800c090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c094:	b29a      	uxth	r2, r3
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	1c9a      	adds	r2, r3, #2
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	629a      	str	r2, [r3, #40]	; 0x28
 800c0a4:	e029      	b.n	800c0fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ba:	1c5a      	adds	r2, r3, #1
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	629a      	str	r2, [r3, #40]	; 0x28
 800c0c0:	e01b      	b.n	800c0fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6858      	ldr	r0, [r3, #4]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d4:	1c59      	adds	r1, r3, #1
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6291      	str	r1, [r2, #40]	; 0x28
 800c0da:	b2c2      	uxtb	r2, r0
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	e00c      	b.n	800c0fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ec:	1c58      	adds	r0, r3, #1
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	6288      	str	r0, [r1, #40]	; 0x28
 800c0f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	3b01      	subs	r3, #1
 800c102:	b29b      	uxth	r3, r3
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	4619      	mov	r1, r3
 800c108:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d120      	bne.n	800c150 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f022 0220 	bic.w	r2, r2, #32
 800c11c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68da      	ldr	r2, [r3, #12]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c12c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	695a      	ldr	r2, [r3, #20]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 0201 	bic.w	r2, r2, #1
 800c13c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7f9 fd12 	bl	8005b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	e002      	b.n	800c156 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	e000      	b.n	800c156 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c154:	2302      	movs	r3, #2
  }
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	b085      	sub	sp, #20
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68da      	ldr	r2, [r3, #12]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	431a      	orrs	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	4313      	orrs	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c1a2:	f023 030c 	bic.w	r3, r3, #12
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6812      	ldr	r2, [r2, #0]
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	430b      	orrs	r3, r1
 800c1ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	699a      	ldr	r2, [r3, #24]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	69db      	ldr	r3, [r3, #28]
 800c1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ce:	f040 818b 	bne.w	800c4e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4ac1      	ldr	r2, [pc, #772]	; (800c4dc <UART_SetConfig+0x37c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d005      	beq.n	800c1e8 <UART_SetConfig+0x88>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4abf      	ldr	r2, [pc, #764]	; (800c4e0 <UART_SetConfig+0x380>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	f040 80bd 	bne.w	800c362 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1e8:	f7fc fd9c 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 800c1ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	461d      	mov	r5, r3
 800c1f2:	f04f 0600 	mov.w	r6, #0
 800c1f6:	46a8      	mov	r8, r5
 800c1f8:	46b1      	mov	r9, r6
 800c1fa:	eb18 0308 	adds.w	r3, r8, r8
 800c1fe:	eb49 0409 	adc.w	r4, r9, r9
 800c202:	4698      	mov	r8, r3
 800c204:	46a1      	mov	r9, r4
 800c206:	eb18 0805 	adds.w	r8, r8, r5
 800c20a:	eb49 0906 	adc.w	r9, r9, r6
 800c20e:	f04f 0100 	mov.w	r1, #0
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c21a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c21e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c222:	4688      	mov	r8, r1
 800c224:	4691      	mov	r9, r2
 800c226:	eb18 0005 	adds.w	r0, r8, r5
 800c22a:	eb49 0106 	adc.w	r1, r9, r6
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	461d      	mov	r5, r3
 800c234:	f04f 0600 	mov.w	r6, #0
 800c238:	196b      	adds	r3, r5, r5
 800c23a:	eb46 0406 	adc.w	r4, r6, r6
 800c23e:	461a      	mov	r2, r3
 800c240:	4623      	mov	r3, r4
 800c242:	f7f4 fd39 	bl	8000cb8 <__aeabi_uldivmod>
 800c246:	4603      	mov	r3, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	461a      	mov	r2, r3
 800c24c:	4ba5      	ldr	r3, [pc, #660]	; (800c4e4 <UART_SetConfig+0x384>)
 800c24e:	fba3 2302 	umull	r2, r3, r3, r2
 800c252:	095b      	lsrs	r3, r3, #5
 800c254:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	461d      	mov	r5, r3
 800c25c:	f04f 0600 	mov.w	r6, #0
 800c260:	46a9      	mov	r9, r5
 800c262:	46b2      	mov	sl, r6
 800c264:	eb19 0309 	adds.w	r3, r9, r9
 800c268:	eb4a 040a 	adc.w	r4, sl, sl
 800c26c:	4699      	mov	r9, r3
 800c26e:	46a2      	mov	sl, r4
 800c270:	eb19 0905 	adds.w	r9, r9, r5
 800c274:	eb4a 0a06 	adc.w	sl, sl, r6
 800c278:	f04f 0100 	mov.w	r1, #0
 800c27c:	f04f 0200 	mov.w	r2, #0
 800c280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c284:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c288:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c28c:	4689      	mov	r9, r1
 800c28e:	4692      	mov	sl, r2
 800c290:	eb19 0005 	adds.w	r0, r9, r5
 800c294:	eb4a 0106 	adc.w	r1, sl, r6
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	461d      	mov	r5, r3
 800c29e:	f04f 0600 	mov.w	r6, #0
 800c2a2:	196b      	adds	r3, r5, r5
 800c2a4:	eb46 0406 	adc.w	r4, r6, r6
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4623      	mov	r3, r4
 800c2ac:	f7f4 fd04 	bl	8000cb8 <__aeabi_uldivmod>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b8b      	ldr	r3, [pc, #556]	; (800c4e4 <UART_SetConfig+0x384>)
 800c2b8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2bc:	095b      	lsrs	r3, r3, #5
 800c2be:	2164      	movs	r1, #100	; 0x64
 800c2c0:	fb01 f303 	mul.w	r3, r1, r3
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	3332      	adds	r3, #50	; 0x32
 800c2ca:	4a86      	ldr	r2, [pc, #536]	; (800c4e4 <UART_SetConfig+0x384>)
 800c2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d0:	095b      	lsrs	r3, r3, #5
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c2d8:	4498      	add	r8, r3
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	461d      	mov	r5, r3
 800c2de:	f04f 0600 	mov.w	r6, #0
 800c2e2:	46a9      	mov	r9, r5
 800c2e4:	46b2      	mov	sl, r6
 800c2e6:	eb19 0309 	adds.w	r3, r9, r9
 800c2ea:	eb4a 040a 	adc.w	r4, sl, sl
 800c2ee:	4699      	mov	r9, r3
 800c2f0:	46a2      	mov	sl, r4
 800c2f2:	eb19 0905 	adds.w	r9, r9, r5
 800c2f6:	eb4a 0a06 	adc.w	sl, sl, r6
 800c2fa:	f04f 0100 	mov.w	r1, #0
 800c2fe:	f04f 0200 	mov.w	r2, #0
 800c302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c30a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c30e:	4689      	mov	r9, r1
 800c310:	4692      	mov	sl, r2
 800c312:	eb19 0005 	adds.w	r0, r9, r5
 800c316:	eb4a 0106 	adc.w	r1, sl, r6
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	461d      	mov	r5, r3
 800c320:	f04f 0600 	mov.w	r6, #0
 800c324:	196b      	adds	r3, r5, r5
 800c326:	eb46 0406 	adc.w	r4, r6, r6
 800c32a:	461a      	mov	r2, r3
 800c32c:	4623      	mov	r3, r4
 800c32e:	f7f4 fcc3 	bl	8000cb8 <__aeabi_uldivmod>
 800c332:	4603      	mov	r3, r0
 800c334:	460c      	mov	r4, r1
 800c336:	461a      	mov	r2, r3
 800c338:	4b6a      	ldr	r3, [pc, #424]	; (800c4e4 <UART_SetConfig+0x384>)
 800c33a:	fba3 1302 	umull	r1, r3, r3, r2
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	2164      	movs	r1, #100	; 0x64
 800c342:	fb01 f303 	mul.w	r3, r1, r3
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	3332      	adds	r3, #50	; 0x32
 800c34c:	4a65      	ldr	r2, [pc, #404]	; (800c4e4 <UART_SetConfig+0x384>)
 800c34e:	fba2 2303 	umull	r2, r3, r2, r3
 800c352:	095b      	lsrs	r3, r3, #5
 800c354:	f003 0207 	and.w	r2, r3, #7
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4442      	add	r2, r8
 800c35e:	609a      	str	r2, [r3, #8]
 800c360:	e26f      	b.n	800c842 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c362:	f7fc fccb 	bl	8008cfc <HAL_RCC_GetPCLK1Freq>
 800c366:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	461d      	mov	r5, r3
 800c36c:	f04f 0600 	mov.w	r6, #0
 800c370:	46a8      	mov	r8, r5
 800c372:	46b1      	mov	r9, r6
 800c374:	eb18 0308 	adds.w	r3, r8, r8
 800c378:	eb49 0409 	adc.w	r4, r9, r9
 800c37c:	4698      	mov	r8, r3
 800c37e:	46a1      	mov	r9, r4
 800c380:	eb18 0805 	adds.w	r8, r8, r5
 800c384:	eb49 0906 	adc.w	r9, r9, r6
 800c388:	f04f 0100 	mov.w	r1, #0
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c394:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c39c:	4688      	mov	r8, r1
 800c39e:	4691      	mov	r9, r2
 800c3a0:	eb18 0005 	adds.w	r0, r8, r5
 800c3a4:	eb49 0106 	adc.w	r1, r9, r6
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	461d      	mov	r5, r3
 800c3ae:	f04f 0600 	mov.w	r6, #0
 800c3b2:	196b      	adds	r3, r5, r5
 800c3b4:	eb46 0406 	adc.w	r4, r6, r6
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4623      	mov	r3, r4
 800c3bc:	f7f4 fc7c 	bl	8000cb8 <__aeabi_uldivmod>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4b47      	ldr	r3, [pc, #284]	; (800c4e4 <UART_SetConfig+0x384>)
 800c3c8:	fba3 2302 	umull	r2, r3, r3, r2
 800c3cc:	095b      	lsrs	r3, r3, #5
 800c3ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	461d      	mov	r5, r3
 800c3d6:	f04f 0600 	mov.w	r6, #0
 800c3da:	46a9      	mov	r9, r5
 800c3dc:	46b2      	mov	sl, r6
 800c3de:	eb19 0309 	adds.w	r3, r9, r9
 800c3e2:	eb4a 040a 	adc.w	r4, sl, sl
 800c3e6:	4699      	mov	r9, r3
 800c3e8:	46a2      	mov	sl, r4
 800c3ea:	eb19 0905 	adds.w	r9, r9, r5
 800c3ee:	eb4a 0a06 	adc.w	sl, sl, r6
 800c3f2:	f04f 0100 	mov.w	r1, #0
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c406:	4689      	mov	r9, r1
 800c408:	4692      	mov	sl, r2
 800c40a:	eb19 0005 	adds.w	r0, r9, r5
 800c40e:	eb4a 0106 	adc.w	r1, sl, r6
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	461d      	mov	r5, r3
 800c418:	f04f 0600 	mov.w	r6, #0
 800c41c:	196b      	adds	r3, r5, r5
 800c41e:	eb46 0406 	adc.w	r4, r6, r6
 800c422:	461a      	mov	r2, r3
 800c424:	4623      	mov	r3, r4
 800c426:	f7f4 fc47 	bl	8000cb8 <__aeabi_uldivmod>
 800c42a:	4603      	mov	r3, r0
 800c42c:	460c      	mov	r4, r1
 800c42e:	461a      	mov	r2, r3
 800c430:	4b2c      	ldr	r3, [pc, #176]	; (800c4e4 <UART_SetConfig+0x384>)
 800c432:	fba3 1302 	umull	r1, r3, r3, r2
 800c436:	095b      	lsrs	r3, r3, #5
 800c438:	2164      	movs	r1, #100	; 0x64
 800c43a:	fb01 f303 	mul.w	r3, r1, r3
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	3332      	adds	r3, #50	; 0x32
 800c444:	4a27      	ldr	r2, [pc, #156]	; (800c4e4 <UART_SetConfig+0x384>)
 800c446:	fba2 2303 	umull	r2, r3, r2, r3
 800c44a:	095b      	lsrs	r3, r3, #5
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c452:	4498      	add	r8, r3
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	461d      	mov	r5, r3
 800c458:	f04f 0600 	mov.w	r6, #0
 800c45c:	46a9      	mov	r9, r5
 800c45e:	46b2      	mov	sl, r6
 800c460:	eb19 0309 	adds.w	r3, r9, r9
 800c464:	eb4a 040a 	adc.w	r4, sl, sl
 800c468:	4699      	mov	r9, r3
 800c46a:	46a2      	mov	sl, r4
 800c46c:	eb19 0905 	adds.w	r9, r9, r5
 800c470:	eb4a 0a06 	adc.w	sl, sl, r6
 800c474:	f04f 0100 	mov.w	r1, #0
 800c478:	f04f 0200 	mov.w	r2, #0
 800c47c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c480:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c484:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c488:	4689      	mov	r9, r1
 800c48a:	4692      	mov	sl, r2
 800c48c:	eb19 0005 	adds.w	r0, r9, r5
 800c490:	eb4a 0106 	adc.w	r1, sl, r6
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	461d      	mov	r5, r3
 800c49a:	f04f 0600 	mov.w	r6, #0
 800c49e:	196b      	adds	r3, r5, r5
 800c4a0:	eb46 0406 	adc.w	r4, r6, r6
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4623      	mov	r3, r4
 800c4a8:	f7f4 fc06 	bl	8000cb8 <__aeabi_uldivmod>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4b0c      	ldr	r3, [pc, #48]	; (800c4e4 <UART_SetConfig+0x384>)
 800c4b4:	fba3 1302 	umull	r1, r3, r3, r2
 800c4b8:	095b      	lsrs	r3, r3, #5
 800c4ba:	2164      	movs	r1, #100	; 0x64
 800c4bc:	fb01 f303 	mul.w	r3, r1, r3
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	3332      	adds	r3, #50	; 0x32
 800c4c6:	4a07      	ldr	r2, [pc, #28]	; (800c4e4 <UART_SetConfig+0x384>)
 800c4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4cc:	095b      	lsrs	r3, r3, #5
 800c4ce:	f003 0207 	and.w	r2, r3, #7
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4442      	add	r2, r8
 800c4d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c4da:	e1b2      	b.n	800c842 <UART_SetConfig+0x6e2>
 800c4dc:	40011000 	.word	0x40011000
 800c4e0:	40011400 	.word	0x40011400
 800c4e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4ad7      	ldr	r2, [pc, #860]	; (800c84c <UART_SetConfig+0x6ec>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d005      	beq.n	800c4fe <UART_SetConfig+0x39e>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4ad6      	ldr	r2, [pc, #856]	; (800c850 <UART_SetConfig+0x6f0>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	f040 80d1 	bne.w	800c6a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c4fe:	f7fc fc11 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 800c502:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	469a      	mov	sl, r3
 800c508:	f04f 0b00 	mov.w	fp, #0
 800c50c:	46d0      	mov	r8, sl
 800c50e:	46d9      	mov	r9, fp
 800c510:	eb18 0308 	adds.w	r3, r8, r8
 800c514:	eb49 0409 	adc.w	r4, r9, r9
 800c518:	4698      	mov	r8, r3
 800c51a:	46a1      	mov	r9, r4
 800c51c:	eb18 080a 	adds.w	r8, r8, sl
 800c520:	eb49 090b 	adc.w	r9, r9, fp
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	f04f 0200 	mov.w	r2, #0
 800c52c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c530:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c534:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c538:	4688      	mov	r8, r1
 800c53a:	4691      	mov	r9, r2
 800c53c:	eb1a 0508 	adds.w	r5, sl, r8
 800c540:	eb4b 0609 	adc.w	r6, fp, r9
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4619      	mov	r1, r3
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	f04f 0300 	mov.w	r3, #0
 800c552:	f04f 0400 	mov.w	r4, #0
 800c556:	0094      	lsls	r4, r2, #2
 800c558:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c55c:	008b      	lsls	r3, r1, #2
 800c55e:	461a      	mov	r2, r3
 800c560:	4623      	mov	r3, r4
 800c562:	4628      	mov	r0, r5
 800c564:	4631      	mov	r1, r6
 800c566:	f7f4 fba7 	bl	8000cb8 <__aeabi_uldivmod>
 800c56a:	4603      	mov	r3, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	461a      	mov	r2, r3
 800c570:	4bb8      	ldr	r3, [pc, #736]	; (800c854 <UART_SetConfig+0x6f4>)
 800c572:	fba3 2302 	umull	r2, r3, r3, r2
 800c576:	095b      	lsrs	r3, r3, #5
 800c578:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	469b      	mov	fp, r3
 800c580:	f04f 0c00 	mov.w	ip, #0
 800c584:	46d9      	mov	r9, fp
 800c586:	46e2      	mov	sl, ip
 800c588:	eb19 0309 	adds.w	r3, r9, r9
 800c58c:	eb4a 040a 	adc.w	r4, sl, sl
 800c590:	4699      	mov	r9, r3
 800c592:	46a2      	mov	sl, r4
 800c594:	eb19 090b 	adds.w	r9, r9, fp
 800c598:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c59c:	f04f 0100 	mov.w	r1, #0
 800c5a0:	f04f 0200 	mov.w	r2, #0
 800c5a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c5ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c5b0:	4689      	mov	r9, r1
 800c5b2:	4692      	mov	sl, r2
 800c5b4:	eb1b 0509 	adds.w	r5, fp, r9
 800c5b8:	eb4c 060a 	adc.w	r6, ip, sl
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f04f 0200 	mov.w	r2, #0
 800c5c6:	f04f 0300 	mov.w	r3, #0
 800c5ca:	f04f 0400 	mov.w	r4, #0
 800c5ce:	0094      	lsls	r4, r2, #2
 800c5d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c5d4:	008b      	lsls	r3, r1, #2
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4623      	mov	r3, r4
 800c5da:	4628      	mov	r0, r5
 800c5dc:	4631      	mov	r1, r6
 800c5de:	f7f4 fb6b 	bl	8000cb8 <__aeabi_uldivmod>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	460c      	mov	r4, r1
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	4b9a      	ldr	r3, [pc, #616]	; (800c854 <UART_SetConfig+0x6f4>)
 800c5ea:	fba3 1302 	umull	r1, r3, r3, r2
 800c5ee:	095b      	lsrs	r3, r3, #5
 800c5f0:	2164      	movs	r1, #100	; 0x64
 800c5f2:	fb01 f303 	mul.w	r3, r1, r3
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	011b      	lsls	r3, r3, #4
 800c5fa:	3332      	adds	r3, #50	; 0x32
 800c5fc:	4a95      	ldr	r2, [pc, #596]	; (800c854 <UART_SetConfig+0x6f4>)
 800c5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c602:	095b      	lsrs	r3, r3, #5
 800c604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c608:	4498      	add	r8, r3
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	469b      	mov	fp, r3
 800c60e:	f04f 0c00 	mov.w	ip, #0
 800c612:	46d9      	mov	r9, fp
 800c614:	46e2      	mov	sl, ip
 800c616:	eb19 0309 	adds.w	r3, r9, r9
 800c61a:	eb4a 040a 	adc.w	r4, sl, sl
 800c61e:	4699      	mov	r9, r3
 800c620:	46a2      	mov	sl, r4
 800c622:	eb19 090b 	adds.w	r9, r9, fp
 800c626:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c62a:	f04f 0100 	mov.w	r1, #0
 800c62e:	f04f 0200 	mov.w	r2, #0
 800c632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c636:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c63a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c63e:	4689      	mov	r9, r1
 800c640:	4692      	mov	sl, r2
 800c642:	eb1b 0509 	adds.w	r5, fp, r9
 800c646:	eb4c 060a 	adc.w	r6, ip, sl
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	4619      	mov	r1, r3
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	f04f 0400 	mov.w	r4, #0
 800c65c:	0094      	lsls	r4, r2, #2
 800c65e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c662:	008b      	lsls	r3, r1, #2
 800c664:	461a      	mov	r2, r3
 800c666:	4623      	mov	r3, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	4631      	mov	r1, r6
 800c66c:	f7f4 fb24 	bl	8000cb8 <__aeabi_uldivmod>
 800c670:	4603      	mov	r3, r0
 800c672:	460c      	mov	r4, r1
 800c674:	461a      	mov	r2, r3
 800c676:	4b77      	ldr	r3, [pc, #476]	; (800c854 <UART_SetConfig+0x6f4>)
 800c678:	fba3 1302 	umull	r1, r3, r3, r2
 800c67c:	095b      	lsrs	r3, r3, #5
 800c67e:	2164      	movs	r1, #100	; 0x64
 800c680:	fb01 f303 	mul.w	r3, r1, r3
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	011b      	lsls	r3, r3, #4
 800c688:	3332      	adds	r3, #50	; 0x32
 800c68a:	4a72      	ldr	r2, [pc, #456]	; (800c854 <UART_SetConfig+0x6f4>)
 800c68c:	fba2 2303 	umull	r2, r3, r2, r3
 800c690:	095b      	lsrs	r3, r3, #5
 800c692:	f003 020f 	and.w	r2, r3, #15
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4442      	add	r2, r8
 800c69c:	609a      	str	r2, [r3, #8]
 800c69e:	e0d0      	b.n	800c842 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6a0:	f7fc fb2c 	bl	8008cfc <HAL_RCC_GetPCLK1Freq>
 800c6a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	469a      	mov	sl, r3
 800c6aa:	f04f 0b00 	mov.w	fp, #0
 800c6ae:	46d0      	mov	r8, sl
 800c6b0:	46d9      	mov	r9, fp
 800c6b2:	eb18 0308 	adds.w	r3, r8, r8
 800c6b6:	eb49 0409 	adc.w	r4, r9, r9
 800c6ba:	4698      	mov	r8, r3
 800c6bc:	46a1      	mov	r9, r4
 800c6be:	eb18 080a 	adds.w	r8, r8, sl
 800c6c2:	eb49 090b 	adc.w	r9, r9, fp
 800c6c6:	f04f 0100 	mov.w	r1, #0
 800c6ca:	f04f 0200 	mov.w	r2, #0
 800c6ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c6d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c6d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c6da:	4688      	mov	r8, r1
 800c6dc:	4691      	mov	r9, r2
 800c6de:	eb1a 0508 	adds.w	r5, sl, r8
 800c6e2:	eb4b 0609 	adc.w	r6, fp, r9
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	f04f 0200 	mov.w	r2, #0
 800c6f0:	f04f 0300 	mov.w	r3, #0
 800c6f4:	f04f 0400 	mov.w	r4, #0
 800c6f8:	0094      	lsls	r4, r2, #2
 800c6fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c6fe:	008b      	lsls	r3, r1, #2
 800c700:	461a      	mov	r2, r3
 800c702:	4623      	mov	r3, r4
 800c704:	4628      	mov	r0, r5
 800c706:	4631      	mov	r1, r6
 800c708:	f7f4 fad6 	bl	8000cb8 <__aeabi_uldivmod>
 800c70c:	4603      	mov	r3, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	461a      	mov	r2, r3
 800c712:	4b50      	ldr	r3, [pc, #320]	; (800c854 <UART_SetConfig+0x6f4>)
 800c714:	fba3 2302 	umull	r2, r3, r3, r2
 800c718:	095b      	lsrs	r3, r3, #5
 800c71a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	469b      	mov	fp, r3
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	46d9      	mov	r9, fp
 800c728:	46e2      	mov	sl, ip
 800c72a:	eb19 0309 	adds.w	r3, r9, r9
 800c72e:	eb4a 040a 	adc.w	r4, sl, sl
 800c732:	4699      	mov	r9, r3
 800c734:	46a2      	mov	sl, r4
 800c736:	eb19 090b 	adds.w	r9, r9, fp
 800c73a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c73e:	f04f 0100 	mov.w	r1, #0
 800c742:	f04f 0200 	mov.w	r2, #0
 800c746:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c74a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c74e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c752:	4689      	mov	r9, r1
 800c754:	4692      	mov	sl, r2
 800c756:	eb1b 0509 	adds.w	r5, fp, r9
 800c75a:	eb4c 060a 	adc.w	r6, ip, sl
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	4619      	mov	r1, r3
 800c764:	f04f 0200 	mov.w	r2, #0
 800c768:	f04f 0300 	mov.w	r3, #0
 800c76c:	f04f 0400 	mov.w	r4, #0
 800c770:	0094      	lsls	r4, r2, #2
 800c772:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c776:	008b      	lsls	r3, r1, #2
 800c778:	461a      	mov	r2, r3
 800c77a:	4623      	mov	r3, r4
 800c77c:	4628      	mov	r0, r5
 800c77e:	4631      	mov	r1, r6
 800c780:	f7f4 fa9a 	bl	8000cb8 <__aeabi_uldivmod>
 800c784:	4603      	mov	r3, r0
 800c786:	460c      	mov	r4, r1
 800c788:	461a      	mov	r2, r3
 800c78a:	4b32      	ldr	r3, [pc, #200]	; (800c854 <UART_SetConfig+0x6f4>)
 800c78c:	fba3 1302 	umull	r1, r3, r3, r2
 800c790:	095b      	lsrs	r3, r3, #5
 800c792:	2164      	movs	r1, #100	; 0x64
 800c794:	fb01 f303 	mul.w	r3, r1, r3
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	011b      	lsls	r3, r3, #4
 800c79c:	3332      	adds	r3, #50	; 0x32
 800c79e:	4a2d      	ldr	r2, [pc, #180]	; (800c854 <UART_SetConfig+0x6f4>)
 800c7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a4:	095b      	lsrs	r3, r3, #5
 800c7a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7aa:	4498      	add	r8, r3
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	469b      	mov	fp, r3
 800c7b0:	f04f 0c00 	mov.w	ip, #0
 800c7b4:	46d9      	mov	r9, fp
 800c7b6:	46e2      	mov	sl, ip
 800c7b8:	eb19 0309 	adds.w	r3, r9, r9
 800c7bc:	eb4a 040a 	adc.w	r4, sl, sl
 800c7c0:	4699      	mov	r9, r3
 800c7c2:	46a2      	mov	sl, r4
 800c7c4:	eb19 090b 	adds.w	r9, r9, fp
 800c7c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c7cc:	f04f 0100 	mov.w	r1, #0
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7e0:	4689      	mov	r9, r1
 800c7e2:	4692      	mov	sl, r2
 800c7e4:	eb1b 0509 	adds.w	r5, fp, r9
 800c7e8:	eb4c 060a 	adc.w	r6, ip, sl
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f04f 0200 	mov.w	r2, #0
 800c7f6:	f04f 0300 	mov.w	r3, #0
 800c7fa:	f04f 0400 	mov.w	r4, #0
 800c7fe:	0094      	lsls	r4, r2, #2
 800c800:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c804:	008b      	lsls	r3, r1, #2
 800c806:	461a      	mov	r2, r3
 800c808:	4623      	mov	r3, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	4631      	mov	r1, r6
 800c80e:	f7f4 fa53 	bl	8000cb8 <__aeabi_uldivmod>
 800c812:	4603      	mov	r3, r0
 800c814:	460c      	mov	r4, r1
 800c816:	461a      	mov	r2, r3
 800c818:	4b0e      	ldr	r3, [pc, #56]	; (800c854 <UART_SetConfig+0x6f4>)
 800c81a:	fba3 1302 	umull	r1, r3, r3, r2
 800c81e:	095b      	lsrs	r3, r3, #5
 800c820:	2164      	movs	r1, #100	; 0x64
 800c822:	fb01 f303 	mul.w	r3, r1, r3
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	011b      	lsls	r3, r3, #4
 800c82a:	3332      	adds	r3, #50	; 0x32
 800c82c:	4a09      	ldr	r2, [pc, #36]	; (800c854 <UART_SetConfig+0x6f4>)
 800c82e:	fba2 2303 	umull	r2, r3, r2, r3
 800c832:	095b      	lsrs	r3, r3, #5
 800c834:	f003 020f 	and.w	r2, r3, #15
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4442      	add	r2, r8
 800c83e:	609a      	str	r2, [r3, #8]
}
 800c840:	e7ff      	b.n	800c842 <UART_SetConfig+0x6e2>
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84c:	40011000 	.word	0x40011000
 800c850:	40011400 	.word	0x40011400
 800c854:	51eb851f 	.word	0x51eb851f

0800c858 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c858:	b084      	sub	sp, #16
 800c85a:	b480      	push	{r7}
 800c85c:	b085      	sub	sp, #20
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	f107 001c 	add.w	r0, r7, #28
 800c866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c86e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c870:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c872:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c876:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c87a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c87e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c882:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c892:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	431a      	orrs	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	b004      	add	sp, #16
 800c8ac:	4770      	bx	lr

0800c8ae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2203      	movs	r2, #3
 800c8f6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c8f8:	2002      	movs	r0, #2
 800c8fa:	f7fa f8a3 	bl	8006a44 <HAL_Delay>
  
  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 0303 	and.w	r3, r3, #3
}
 800c918:	4618      	mov	r0, r3
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c942:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c948:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c94e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4313      	orrs	r3, r2
 800c954:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c95e:	f023 030f 	bic.w	r3, r3, #15
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
 800c984:	b2db      	uxtb	r3, r3
}
 800c986:	4618      	mov	r0, r3
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c992:	b480      	push	{r7}
 800c994:	b085      	sub	sp, #20
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3314      	adds	r3, #20
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
}  
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c9e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c9ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ca02:	2300      	movs	r3, #0

}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b088      	sub	sp, #32
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca1e:	2310      	movs	r3, #16
 800ca20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca22:	2340      	movs	r3, #64	; 0x40
 800ca24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca26:	2300      	movs	r3, #0
 800ca28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca30:	f107 0308 	add.w	r3, r7, #8
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff ff74 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ca3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca40:	2110      	movs	r1, #16
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f9fc 	bl	800ce40 <SDMMC_GetCmdResp1>
 800ca48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca4a:	69fb      	ldr	r3, [r7, #28]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca62:	2311      	movs	r3, #17
 800ca64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca66:	2340      	movs	r3, #64	; 0x40
 800ca68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca74:	f107 0308 	add.w	r3, r7, #8
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ff52 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ca80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca84:	2111      	movs	r1, #17
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f9da 	bl	800ce40 <SDMMC_GetCmdResp1>
 800ca8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca8e:	69fb      	ldr	r3, [r7, #28]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800caa6:	2312      	movs	r3, #18
 800caa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caaa:	2340      	movs	r3, #64	; 0x40
 800caac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caae:	2300      	movs	r3, #0
 800cab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cab8:	f107 0308 	add.w	r3, r7, #8
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff ff30 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac8:	2112      	movs	r1, #18
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 f9b8 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cad2:	69fb      	ldr	r3, [r7, #28]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3720      	adds	r7, #32
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cae4:	2300      	movs	r3, #0
 800cae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cae8:	230c      	movs	r3, #12
 800caea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caec:	2340      	movs	r3, #64	; 0x40
 800caee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caf0:	2300      	movs	r3, #0
 800caf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7ff ff0f 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cb06:	4a05      	ldr	r2, [pc, #20]	; (800cb1c <SDMMC_CmdStopTransfer+0x40>)
 800cb08:	210c      	movs	r1, #12
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f998 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cb10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb12:	69fb      	ldr	r3, [r7, #28]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3720      	adds	r7, #32
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	05f5e100 	.word	0x05f5e100

0800cb20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08a      	sub	sp, #40	; 0x28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cb30:	2307      	movs	r3, #7
 800cb32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb34:	2340      	movs	r3, #64	; 0x40
 800cb36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb42:	f107 0310 	add.w	r3, r7, #16
 800cb46:	4619      	mov	r1, r3
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff feeb 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cb4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb52:	2107      	movs	r1, #7
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f000 f973 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cb5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b088      	sub	sp, #32
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff feca 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f92d 	bl	800cdf0 <SDMMC_GetCmdError>
 800cb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb98:	69fb      	ldr	r3, [r7, #28]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b088      	sub	sp, #32
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cbaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cbae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cbb0:	2308      	movs	r3, #8
 800cbb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbb4:	2340      	movs	r3, #64	; 0x40
 800cbb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbc2:	f107 0308 	add.w	r3, r7, #8
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff feab 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fb16 	bl	800d200 <SDMMC_GetCmdResp7>
 800cbd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbd6:	69fb      	ldr	r3, [r7, #28]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3720      	adds	r7, #32
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cbee:	2337      	movs	r3, #55	; 0x37
 800cbf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbf2:	2340      	movs	r3, #64	; 0x40
 800cbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc00:	f107 0308 	add.w	r3, r7, #8
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff fe8c 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cc0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc10:	2137      	movs	r1, #55	; 0x37
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f914 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cc18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc1a:	69fb      	ldr	r3, [r7, #28]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3720      	adds	r7, #32
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cc3a:	2329      	movs	r3, #41	; 0x29
 800cc3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc3e:	2340      	movs	r3, #64	; 0x40
 800cc40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc42:	2300      	movs	r3, #0
 800cc44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc4c:	f107 0308 	add.w	r3, r7, #8
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fe66 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fa23 	bl	800d0a4 <SDMMC_GetCmdResp3>
 800cc5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc60:	69fb      	ldr	r3, [r7, #28]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3720      	adds	r7, #32
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b088      	sub	sp, #32
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cc78:	2306      	movs	r3, #6
 800cc7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc7c:	2340      	movs	r3, #64	; 0x40
 800cc7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc80:	2300      	movs	r3, #0
 800cc82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff fe47 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cc96:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc9a:	2106      	movs	r1, #6
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 f8cf 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cca4:	69fb      	ldr	r3, [r7, #28]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3720      	adds	r7, #32
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b088      	sub	sp, #32
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ccba:	2333      	movs	r3, #51	; 0x33
 800ccbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccbe:	2340      	movs	r3, #64	; 0x40
 800ccc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cccc:	f107 0308 	add.w	r3, r7, #8
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff fe26 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ccd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccdc:	2133      	movs	r1, #51	; 0x33
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f8ae 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cce6:	69fb      	ldr	r3, [r7, #28]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3720      	adds	r7, #32
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cd00:	23c0      	movs	r3, #192	; 0xc0
 800cd02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd04:	2300      	movs	r3, #0
 800cd06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff fe05 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f97c 	bl	800d018 <SDMMC_GetCmdResp2>
 800cd20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd22:	69fb      	ldr	r3, [r7, #28]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3720      	adds	r7, #32
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cd3a:	2309      	movs	r3, #9
 800cd3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cd3e:	23c0      	movs	r3, #192	; 0xc0
 800cd40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd4c:	f107 0308 	add.w	r3, r7, #8
 800cd50:	4619      	mov	r1, r3
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7ff fde6 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f95d 	bl	800d018 <SDMMC_GetCmdResp2>
 800cd5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd60:	69fb      	ldr	r3, [r7, #28]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b088      	sub	sp, #32
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd7c:	2340      	movs	r3, #64	; 0x40
 800cd7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd80:	2300      	movs	r3, #0
 800cd82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd8a:	f107 0308 	add.w	r3, r7, #8
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff fdc7 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	2103      	movs	r1, #3
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f9bc 	bl	800d118 <SDMMC_GetCmdResp6>
 800cda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cda2:	69fb      	ldr	r3, [r7, #28]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3720      	adds	r7, #32
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b088      	sub	sp, #32
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cdba:	230d      	movs	r3, #13
 800cdbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdbe:	2340      	movs	r3, #64	; 0x40
 800cdc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdcc:	f107 0308 	add.w	r3, r7, #8
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff fda6 	bl	800c924 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cdd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cddc:	210d      	movs	r1, #13
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f82e 	bl	800ce40 <SDMMC_GetCmdResp1>
 800cde4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cde6:	69fb      	ldr	r3, [r7, #28]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3720      	adds	r7, #32
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cdf0:	b490      	push	{r4, r7}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cdf8:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <SDMMC_GetCmdError+0x48>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a0f      	ldr	r2, [pc, #60]	; (800ce3c <SDMMC_GetCmdError+0x4c>)
 800cdfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ce02:	0a5b      	lsrs	r3, r3, #9
 800ce04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce0c:	4623      	mov	r3, r4
 800ce0e:	1e5c      	subs	r4, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d102      	bne.n	800ce1a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce18:	e009      	b.n	800ce2e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0f2      	beq.n	800ce0c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	22c5      	movs	r2, #197	; 0xc5
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bc90      	pop	{r4, r7}
 800ce36:	4770      	bx	lr
 800ce38:	20000000 	.word	0x20000000
 800ce3c:	10624dd3 	.word	0x10624dd3

0800ce40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce4e:	4b6f      	ldr	r3, [pc, #444]	; (800d00c <SDMMC_GetCmdResp1+0x1cc>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a6f      	ldr	r2, [pc, #444]	; (800d010 <SDMMC_GetCmdResp1+0x1d0>)
 800ce54:	fba2 2303 	umull	r2, r3, r2, r3
 800ce58:	0a5b      	lsrs	r3, r3, #9
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce60:	4623      	mov	r3, r4
 800ce62:	1e5c      	subs	r4, r3, #1
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce6c:	e0c9      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce72:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0f0      	beq.n	800ce60 <SDMMC_GetCmdResp1+0x20>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1eb      	bne.n	800ce60 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d004      	beq.n	800ce9e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2204      	movs	r2, #4
 800ce98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce9a:	2304      	movs	r3, #4
 800ce9c:	e0b1      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d004      	beq.n	800ceb4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2201      	movs	r2, #1
 800ceae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e0a6      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	22c5      	movs	r2, #197	; 0xc5
 800ceb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f7ff fd5c 	bl	800c978 <SDIO_GetCommandResponse>
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	7afb      	ldrb	r3, [r7, #11]
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d001      	beq.n	800cece <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e099      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cece:	2100      	movs	r1, #0
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f7ff fd5e 	bl	800c992 <SDIO_GetResponse>
 800ced6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <SDMMC_GetCmdResp1+0x1d4>)
 800cedc:	4013      	ands	r3, r2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d101      	bne.n	800cee6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cee2:	2300      	movs	r3, #0
 800cee4:	e08d      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da02      	bge.n	800cef2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ceec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cef0:	e087      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cefc:	2340      	movs	r3, #64	; 0x40
 800cefe:	e080      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf0a:	2380      	movs	r3, #128	; 0x80
 800cf0c:	e079      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf1c:	e071      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf2c:	e069      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf3c:	e061      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf4c:	e059      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf5c:	e051      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf6c:	e049      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cf78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf7c:	e041      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cf88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf8c:	e039      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cf98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cf9c:	e031      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cfa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cfac:	e029      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cfb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cfbc:	e021      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cfc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cfcc:	e019      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cfd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cfdc:	e011      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cfe8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfec:	e009      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cff8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cffc:	e001      	b.n	800d002 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d002:	4618      	mov	r0, r3
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	bd90      	pop	{r4, r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000000 	.word	0x20000000
 800d010:	10624dd3 	.word	0x10624dd3
 800d014:	fdffe008 	.word	0xfdffe008

0800d018 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d018:	b490      	push	{r4, r7}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d020:	4b1e      	ldr	r3, [pc, #120]	; (800d09c <SDMMC_GetCmdResp2+0x84>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a1e      	ldr	r2, [pc, #120]	; (800d0a0 <SDMMC_GetCmdResp2+0x88>)
 800d026:	fba2 2303 	umull	r2, r3, r2, r3
 800d02a:	0a5b      	lsrs	r3, r3, #9
 800d02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d030:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d034:	4623      	mov	r3, r4
 800d036:	1e5c      	subs	r4, r3, #1
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d03c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d040:	e026      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d046:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0f0      	beq.n	800d034 <SDMMC_GetCmdResp2+0x1c>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1eb      	bne.n	800d034 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d060:	f003 0304 	and.w	r3, r3, #4
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2204      	movs	r2, #4
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d06e:	2304      	movs	r3, #4
 800d070:	e00e      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d004      	beq.n	800d088 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d084:	2301      	movs	r3, #1
 800d086:	e003      	b.n	800d090 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	22c5      	movs	r2, #197	; 0xc5
 800d08c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bc90      	pop	{r4, r7}
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	20000000 	.word	0x20000000
 800d0a0:	10624dd3 	.word	0x10624dd3

0800d0a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d0a4:	b490      	push	{r4, r7}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0ac:	4b18      	ldr	r3, [pc, #96]	; (800d110 <SDMMC_GetCmdResp3+0x6c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a18      	ldr	r2, [pc, #96]	; (800d114 <SDMMC_GetCmdResp3+0x70>)
 800d0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0b6:	0a5b      	lsrs	r3, r3, #9
 800d0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0c0:	4623      	mov	r3, r4
 800d0c2:	1e5c      	subs	r4, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d102      	bne.n	800d0ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0cc:	e01b      	b.n	800d106 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d0f0      	beq.n	800d0c0 <SDMMC_GetCmdResp3+0x1c>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1eb      	bne.n	800d0c0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d004      	beq.n	800d0fe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2204      	movs	r2, #4
 800d0f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0fa:	2304      	movs	r3, #4
 800d0fc:	e003      	b.n	800d106 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	22c5      	movs	r2, #197	; 0xc5
 800d102:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bc90      	pop	{r4, r7}
 800d10e:	4770      	bx	lr
 800d110:	20000000 	.word	0x20000000
 800d114:	10624dd3 	.word	0x10624dd3

0800d118 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d118:	b590      	push	{r4, r7, lr}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	460b      	mov	r3, r1
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d126:	4b34      	ldr	r3, [pc, #208]	; (800d1f8 <SDMMC_GetCmdResp6+0xe0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a34      	ldr	r2, [pc, #208]	; (800d1fc <SDMMC_GetCmdResp6+0xe4>)
 800d12c:	fba2 2303 	umull	r2, r3, r2, r3
 800d130:	0a5b      	lsrs	r3, r3, #9
 800d132:	f241 3288 	movw	r2, #5000	; 0x1388
 800d136:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d13a:	4623      	mov	r3, r4
 800d13c:	1e5c      	subs	r4, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d102      	bne.n	800d148 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d142:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d146:	e052      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d154:	2b00      	cmp	r3, #0
 800d156:	d0f0      	beq.n	800d13a <SDMMC_GetCmdResp6+0x22>
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1eb      	bne.n	800d13a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2204      	movs	r2, #4
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d174:	2304      	movs	r3, #4
 800d176:	e03a      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d004      	beq.n	800d18e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2201      	movs	r2, #1
 800d188:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e02f      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff fbf2 	bl	800c978 <SDIO_GetCommandResponse>
 800d194:	4603      	mov	r3, r0
 800d196:	461a      	mov	r2, r3
 800d198:	7afb      	ldrb	r3, [r7, #11]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d001      	beq.n	800d1a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e025      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	22c5      	movs	r2, #197	; 0xc5
 800d1a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff fbf1 	bl	800c992 <SDIO_GetResponse>
 800d1b0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	0c1b      	lsrs	r3, r3, #16
 800d1c0:	b29a      	uxth	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e011      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1d8:	e009      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1e8:	e001      	b.n	800d1ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	371c      	adds	r7, #28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd90      	pop	{r4, r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20000000 	.word	0x20000000
 800d1fc:	10624dd3 	.word	0x10624dd3

0800d200 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d200:	b490      	push	{r4, r7}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d208:	4b21      	ldr	r3, [pc, #132]	; (800d290 <SDMMC_GetCmdResp7+0x90>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a21      	ldr	r2, [pc, #132]	; (800d294 <SDMMC_GetCmdResp7+0x94>)
 800d20e:	fba2 2303 	umull	r2, r3, r2, r3
 800d212:	0a5b      	lsrs	r3, r3, #9
 800d214:	f241 3288 	movw	r2, #5000	; 0x1388
 800d218:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d21c:	4623      	mov	r3, r4
 800d21e:	1e5c      	subs	r4, r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	d102      	bne.n	800d22a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d228:	e02c      	b.n	800d284 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d236:	2b00      	cmp	r3, #0
 800d238:	d0f0      	beq.n	800d21c <SDMMC_GetCmdResp7+0x1c>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1eb      	bne.n	800d21c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d248:	f003 0304 	and.w	r3, r3, #4
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2204      	movs	r2, #4
 800d254:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d256:	2304      	movs	r3, #4
 800d258:	e014      	b.n	800d284 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25e:	f003 0301 	and.w	r3, r3, #1
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e009      	b.n	800d284 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2240      	movs	r2, #64	; 0x40
 800d280:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d282:	2300      	movs	r3, #0
  
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bc90      	pop	{r4, r7}
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000000 	.word	0x20000000
 800d294:	10624dd3 	.word	0x10624dd3

0800d298 <main>:




int main(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
  hwInit();
 800d29c:	f7f9 fb42 	bl	8006924 <hwInit>
  apInit();
 800d2a0:	f7f3 fe8a 	bl	8000fb8 <apInit>

  apMain();
 800d2a4:	f7f3 fe91 	bl	8000fca <apMain>

  return 0;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <__errno>:
 800d2b0:	4b01      	ldr	r3, [pc, #4]	; (800d2b8 <__errno+0x8>)
 800d2b2:	6818      	ldr	r0, [r3, #0]
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	20000060 	.word	0x20000060

0800d2bc <__libc_init_array>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4e0d      	ldr	r6, [pc, #52]	; (800d2f4 <__libc_init_array+0x38>)
 800d2c0:	4c0d      	ldr	r4, [pc, #52]	; (800d2f8 <__libc_init_array+0x3c>)
 800d2c2:	1ba4      	subs	r4, r4, r6
 800d2c4:	10a4      	asrs	r4, r4, #2
 800d2c6:	2500      	movs	r5, #0
 800d2c8:	42a5      	cmp	r5, r4
 800d2ca:	d109      	bne.n	800d2e0 <__libc_init_array+0x24>
 800d2cc:	4e0b      	ldr	r6, [pc, #44]	; (800d2fc <__libc_init_array+0x40>)
 800d2ce:	4c0c      	ldr	r4, [pc, #48]	; (800d300 <__libc_init_array+0x44>)
 800d2d0:	f002 fae6 	bl	800f8a0 <_init>
 800d2d4:	1ba4      	subs	r4, r4, r6
 800d2d6:	10a4      	asrs	r4, r4, #2
 800d2d8:	2500      	movs	r5, #0
 800d2da:	42a5      	cmp	r5, r4
 800d2dc:	d105      	bne.n	800d2ea <__libc_init_array+0x2e>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2e4:	4798      	blx	r3
 800d2e6:	3501      	adds	r5, #1
 800d2e8:	e7ee      	b.n	800d2c8 <__libc_init_array+0xc>
 800d2ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2ee:	4798      	blx	r3
 800d2f0:	3501      	adds	r5, #1
 800d2f2:	e7f2      	b.n	800d2da <__libc_init_array+0x1e>
 800d2f4:	0801c0c0 	.word	0x0801c0c0
 800d2f8:	0801c0c0 	.word	0x0801c0c0
 800d2fc:	0801c0c0 	.word	0x0801c0c0
 800d300:	0801c0c4 	.word	0x0801c0c4

0800d304 <memcpy>:
 800d304:	b510      	push	{r4, lr}
 800d306:	1e43      	subs	r3, r0, #1
 800d308:	440a      	add	r2, r1
 800d30a:	4291      	cmp	r1, r2
 800d30c:	d100      	bne.n	800d310 <memcpy+0xc>
 800d30e:	bd10      	pop	{r4, pc}
 800d310:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d314:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d318:	e7f7      	b.n	800d30a <memcpy+0x6>

0800d31a <memset>:
 800d31a:	4402      	add	r2, r0
 800d31c:	4603      	mov	r3, r0
 800d31e:	4293      	cmp	r3, r2
 800d320:	d100      	bne.n	800d324 <memset+0xa>
 800d322:	4770      	bx	lr
 800d324:	f803 1b01 	strb.w	r1, [r3], #1
 800d328:	e7f9      	b.n	800d31e <memset+0x4>

0800d32a <strcpy>:
 800d32a:	4603      	mov	r3, r0
 800d32c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d330:	f803 2b01 	strb.w	r2, [r3], #1
 800d334:	2a00      	cmp	r2, #0
 800d336:	d1f9      	bne.n	800d32c <strcpy+0x2>
 800d338:	4770      	bx	lr

0800d33a <sulp>:
 800d33a:	b570      	push	{r4, r5, r6, lr}
 800d33c:	4604      	mov	r4, r0
 800d33e:	460d      	mov	r5, r1
 800d340:	ec45 4b10 	vmov	d0, r4, r5
 800d344:	4616      	mov	r6, r2
 800d346:	f001 fd5f 	bl	800ee08 <__ulp>
 800d34a:	ec51 0b10 	vmov	r0, r1, d0
 800d34e:	b17e      	cbz	r6, 800d370 <sulp+0x36>
 800d350:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d354:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d358:	2b00      	cmp	r3, #0
 800d35a:	dd09      	ble.n	800d370 <sulp+0x36>
 800d35c:	051b      	lsls	r3, r3, #20
 800d35e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d362:	2400      	movs	r4, #0
 800d364:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d368:	4622      	mov	r2, r4
 800d36a:	462b      	mov	r3, r5
 800d36c:	f7f3 f95c 	bl	8000628 <__aeabi_dmul>
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	0000      	movs	r0, r0
 800d374:	0000      	movs	r0, r0
	...

0800d378 <_strtod_l>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	461f      	mov	r7, r3
 800d37e:	b0a1      	sub	sp, #132	; 0x84
 800d380:	2300      	movs	r3, #0
 800d382:	4681      	mov	r9, r0
 800d384:	4638      	mov	r0, r7
 800d386:	460e      	mov	r6, r1
 800d388:	9217      	str	r2, [sp, #92]	; 0x5c
 800d38a:	931c      	str	r3, [sp, #112]	; 0x70
 800d38c:	f001 fa5d 	bl	800e84a <__localeconv_l>
 800d390:	4680      	mov	r8, r0
 800d392:	6800      	ldr	r0, [r0, #0]
 800d394:	f7f2 ff2e 	bl	80001f4 <strlen>
 800d398:	f04f 0a00 	mov.w	sl, #0
 800d39c:	4604      	mov	r4, r0
 800d39e:	f04f 0b00 	mov.w	fp, #0
 800d3a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d3a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3a6:	781a      	ldrb	r2, [r3, #0]
 800d3a8:	2a0d      	cmp	r2, #13
 800d3aa:	d832      	bhi.n	800d412 <_strtod_l+0x9a>
 800d3ac:	2a09      	cmp	r2, #9
 800d3ae:	d236      	bcs.n	800d41e <_strtod_l+0xa6>
 800d3b0:	2a00      	cmp	r2, #0
 800d3b2:	d03e      	beq.n	800d432 <_strtod_l+0xba>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d3b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d3ba:	782b      	ldrb	r3, [r5, #0]
 800d3bc:	2b30      	cmp	r3, #48	; 0x30
 800d3be:	f040 80ac 	bne.w	800d51a <_strtod_l+0x1a2>
 800d3c2:	786b      	ldrb	r3, [r5, #1]
 800d3c4:	2b58      	cmp	r3, #88	; 0x58
 800d3c6:	d001      	beq.n	800d3cc <_strtod_l+0x54>
 800d3c8:	2b78      	cmp	r3, #120	; 0x78
 800d3ca:	d167      	bne.n	800d49c <_strtod_l+0x124>
 800d3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3ce:	9301      	str	r3, [sp, #4]
 800d3d0:	ab1c      	add	r3, sp, #112	; 0x70
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	9702      	str	r7, [sp, #8]
 800d3d6:	ab1d      	add	r3, sp, #116	; 0x74
 800d3d8:	4a88      	ldr	r2, [pc, #544]	; (800d5fc <_strtod_l+0x284>)
 800d3da:	a91b      	add	r1, sp, #108	; 0x6c
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 ff5a 	bl	800e296 <__gethex>
 800d3e2:	f010 0407 	ands.w	r4, r0, #7
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	d005      	beq.n	800d3f6 <_strtod_l+0x7e>
 800d3ea:	2c06      	cmp	r4, #6
 800d3ec:	d12b      	bne.n	800d446 <_strtod_l+0xce>
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	951b      	str	r5, [sp, #108]	; 0x6c
 800d3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800d3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f040 859a 	bne.w	800df32 <_strtod_l+0xbba>
 800d3fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d400:	b1e3      	cbz	r3, 800d43c <_strtod_l+0xc4>
 800d402:	4652      	mov	r2, sl
 800d404:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d408:	ec43 2b10 	vmov	d0, r2, r3
 800d40c:	b021      	add	sp, #132	; 0x84
 800d40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d412:	2a2b      	cmp	r2, #43	; 0x2b
 800d414:	d015      	beq.n	800d442 <_strtod_l+0xca>
 800d416:	2a2d      	cmp	r2, #45	; 0x2d
 800d418:	d004      	beq.n	800d424 <_strtod_l+0xac>
 800d41a:	2a20      	cmp	r2, #32
 800d41c:	d1ca      	bne.n	800d3b4 <_strtod_l+0x3c>
 800d41e:	3301      	adds	r3, #1
 800d420:	931b      	str	r3, [sp, #108]	; 0x6c
 800d422:	e7bf      	b.n	800d3a4 <_strtod_l+0x2c>
 800d424:	2201      	movs	r2, #1
 800d426:	920d      	str	r2, [sp, #52]	; 0x34
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d42c:	785b      	ldrb	r3, [r3, #1]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1c2      	bne.n	800d3b8 <_strtod_l+0x40>
 800d432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d434:	961b      	str	r6, [sp, #108]	; 0x6c
 800d436:	2b00      	cmp	r3, #0
 800d438:	f040 8579 	bne.w	800df2e <_strtod_l+0xbb6>
 800d43c:	4652      	mov	r2, sl
 800d43e:	465b      	mov	r3, fp
 800d440:	e7e2      	b.n	800d408 <_strtod_l+0x90>
 800d442:	2200      	movs	r2, #0
 800d444:	e7ef      	b.n	800d426 <_strtod_l+0xae>
 800d446:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d448:	b13a      	cbz	r2, 800d45a <_strtod_l+0xe2>
 800d44a:	2135      	movs	r1, #53	; 0x35
 800d44c:	a81e      	add	r0, sp, #120	; 0x78
 800d44e:	f001 fdd3 	bl	800eff8 <__copybits>
 800d452:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d454:	4648      	mov	r0, r9
 800d456:	f001 fa40 	bl	800e8da <_Bfree>
 800d45a:	3c01      	subs	r4, #1
 800d45c:	2c04      	cmp	r4, #4
 800d45e:	d806      	bhi.n	800d46e <_strtod_l+0xf6>
 800d460:	e8df f004 	tbb	[pc, r4]
 800d464:	1714030a 	.word	0x1714030a
 800d468:	0a          	.byte	0x0a
 800d469:	00          	.byte	0x00
 800d46a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d46e:	0730      	lsls	r0, r6, #28
 800d470:	d5c1      	bpl.n	800d3f6 <_strtod_l+0x7e>
 800d472:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d476:	e7be      	b.n	800d3f6 <_strtod_l+0x7e>
 800d478:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d47c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d47e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d482:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d486:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d48a:	e7f0      	b.n	800d46e <_strtod_l+0xf6>
 800d48c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d600 <_strtod_l+0x288>
 800d490:	e7ed      	b.n	800d46e <_strtod_l+0xf6>
 800d492:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d496:	f04f 3aff 	mov.w	sl, #4294967295
 800d49a:	e7e8      	b.n	800d46e <_strtod_l+0xf6>
 800d49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	2b30      	cmp	r3, #48	; 0x30
 800d4a6:	d0f9      	beq.n	800d49c <_strtod_l+0x124>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d0a4      	beq.n	800d3f6 <_strtod_l+0x7e>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	2500      	movs	r5, #0
 800d4b0:	9306      	str	r3, [sp, #24]
 800d4b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4b4:	9308      	str	r3, [sp, #32]
 800d4b6:	9507      	str	r5, [sp, #28]
 800d4b8:	9505      	str	r5, [sp, #20]
 800d4ba:	220a      	movs	r2, #10
 800d4bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d4be:	7807      	ldrb	r7, [r0, #0]
 800d4c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d4c4:	b2d9      	uxtb	r1, r3
 800d4c6:	2909      	cmp	r1, #9
 800d4c8:	d929      	bls.n	800d51e <_strtod_l+0x1a6>
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	f8d8 1000 	ldr.w	r1, [r8]
 800d4d0:	f002 f926 	bl	800f720 <strncmp>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d031      	beq.n	800d53c <_strtod_l+0x1c4>
 800d4d8:	2000      	movs	r0, #0
 800d4da:	9c05      	ldr	r4, [sp, #20]
 800d4dc:	9004      	str	r0, [sp, #16]
 800d4de:	463b      	mov	r3, r7
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	2b65      	cmp	r3, #101	; 0x65
 800d4e4:	d001      	beq.n	800d4ea <_strtod_l+0x172>
 800d4e6:	2b45      	cmp	r3, #69	; 0x45
 800d4e8:	d114      	bne.n	800d514 <_strtod_l+0x19c>
 800d4ea:	b924      	cbnz	r4, 800d4f6 <_strtod_l+0x17e>
 800d4ec:	b910      	cbnz	r0, 800d4f4 <_strtod_l+0x17c>
 800d4ee:	9b06      	ldr	r3, [sp, #24]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d09e      	beq.n	800d432 <_strtod_l+0xba>
 800d4f4:	2400      	movs	r4, #0
 800d4f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d4f8:	1c73      	adds	r3, r6, #1
 800d4fa:	931b      	str	r3, [sp, #108]	; 0x6c
 800d4fc:	7873      	ldrb	r3, [r6, #1]
 800d4fe:	2b2b      	cmp	r3, #43	; 0x2b
 800d500:	d078      	beq.n	800d5f4 <_strtod_l+0x27c>
 800d502:	2b2d      	cmp	r3, #45	; 0x2d
 800d504:	d070      	beq.n	800d5e8 <_strtod_l+0x270>
 800d506:	f04f 0c00 	mov.w	ip, #0
 800d50a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d50e:	2f09      	cmp	r7, #9
 800d510:	d97c      	bls.n	800d60c <_strtod_l+0x294>
 800d512:	961b      	str	r6, [sp, #108]	; 0x6c
 800d514:	f04f 0e00 	mov.w	lr, #0
 800d518:	e09a      	b.n	800d650 <_strtod_l+0x2d8>
 800d51a:	2300      	movs	r3, #0
 800d51c:	e7c7      	b.n	800d4ae <_strtod_l+0x136>
 800d51e:	9905      	ldr	r1, [sp, #20]
 800d520:	2908      	cmp	r1, #8
 800d522:	bfdd      	ittte	le
 800d524:	9907      	ldrle	r1, [sp, #28]
 800d526:	fb02 3301 	mlale	r3, r2, r1, r3
 800d52a:	9307      	strle	r3, [sp, #28]
 800d52c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	3001      	adds	r0, #1
 800d534:	3301      	adds	r3, #1
 800d536:	9305      	str	r3, [sp, #20]
 800d538:	901b      	str	r0, [sp, #108]	; 0x6c
 800d53a:	e7bf      	b.n	800d4bc <_strtod_l+0x144>
 800d53c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d53e:	191a      	adds	r2, r3, r4
 800d540:	921b      	str	r2, [sp, #108]	; 0x6c
 800d542:	9a05      	ldr	r2, [sp, #20]
 800d544:	5d1b      	ldrb	r3, [r3, r4]
 800d546:	2a00      	cmp	r2, #0
 800d548:	d037      	beq.n	800d5ba <_strtod_l+0x242>
 800d54a:	9c05      	ldr	r4, [sp, #20]
 800d54c:	4602      	mov	r2, r0
 800d54e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d552:	2909      	cmp	r1, #9
 800d554:	d913      	bls.n	800d57e <_strtod_l+0x206>
 800d556:	2101      	movs	r1, #1
 800d558:	9104      	str	r1, [sp, #16]
 800d55a:	e7c2      	b.n	800d4e2 <_strtod_l+0x16a>
 800d55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	921b      	str	r2, [sp, #108]	; 0x6c
 800d562:	785b      	ldrb	r3, [r3, #1]
 800d564:	3001      	adds	r0, #1
 800d566:	2b30      	cmp	r3, #48	; 0x30
 800d568:	d0f8      	beq.n	800d55c <_strtod_l+0x1e4>
 800d56a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d56e:	2a08      	cmp	r2, #8
 800d570:	f200 84e4 	bhi.w	800df3c <_strtod_l+0xbc4>
 800d574:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d576:	9208      	str	r2, [sp, #32]
 800d578:	4602      	mov	r2, r0
 800d57a:	2000      	movs	r0, #0
 800d57c:	4604      	mov	r4, r0
 800d57e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d582:	f100 0101 	add.w	r1, r0, #1
 800d586:	d012      	beq.n	800d5ae <_strtod_l+0x236>
 800d588:	440a      	add	r2, r1
 800d58a:	eb00 0c04 	add.w	ip, r0, r4
 800d58e:	4621      	mov	r1, r4
 800d590:	270a      	movs	r7, #10
 800d592:	458c      	cmp	ip, r1
 800d594:	d113      	bne.n	800d5be <_strtod_l+0x246>
 800d596:	1821      	adds	r1, r4, r0
 800d598:	2908      	cmp	r1, #8
 800d59a:	f104 0401 	add.w	r4, r4, #1
 800d59e:	4404      	add	r4, r0
 800d5a0:	dc19      	bgt.n	800d5d6 <_strtod_l+0x25e>
 800d5a2:	9b07      	ldr	r3, [sp, #28]
 800d5a4:	210a      	movs	r1, #10
 800d5a6:	fb01 e303 	mla	r3, r1, r3, lr
 800d5aa:	9307      	str	r3, [sp, #28]
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5b0:	1c58      	adds	r0, r3, #1
 800d5b2:	901b      	str	r0, [sp, #108]	; 0x6c
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	4608      	mov	r0, r1
 800d5b8:	e7c9      	b.n	800d54e <_strtod_l+0x1d6>
 800d5ba:	9805      	ldr	r0, [sp, #20]
 800d5bc:	e7d3      	b.n	800d566 <_strtod_l+0x1ee>
 800d5be:	2908      	cmp	r1, #8
 800d5c0:	f101 0101 	add.w	r1, r1, #1
 800d5c4:	dc03      	bgt.n	800d5ce <_strtod_l+0x256>
 800d5c6:	9b07      	ldr	r3, [sp, #28]
 800d5c8:	437b      	muls	r3, r7
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	e7e1      	b.n	800d592 <_strtod_l+0x21a>
 800d5ce:	2910      	cmp	r1, #16
 800d5d0:	bfd8      	it	le
 800d5d2:	437d      	mulle	r5, r7
 800d5d4:	e7dd      	b.n	800d592 <_strtod_l+0x21a>
 800d5d6:	2c10      	cmp	r4, #16
 800d5d8:	bfdc      	itt	le
 800d5da:	210a      	movle	r1, #10
 800d5dc:	fb01 e505 	mlale	r5, r1, r5, lr
 800d5e0:	e7e4      	b.n	800d5ac <_strtod_l+0x234>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	9304      	str	r3, [sp, #16]
 800d5e6:	e781      	b.n	800d4ec <_strtod_l+0x174>
 800d5e8:	f04f 0c01 	mov.w	ip, #1
 800d5ec:	1cb3      	adds	r3, r6, #2
 800d5ee:	931b      	str	r3, [sp, #108]	; 0x6c
 800d5f0:	78b3      	ldrb	r3, [r6, #2]
 800d5f2:	e78a      	b.n	800d50a <_strtod_l+0x192>
 800d5f4:	f04f 0c00 	mov.w	ip, #0
 800d5f8:	e7f8      	b.n	800d5ec <_strtod_l+0x274>
 800d5fa:	bf00      	nop
 800d5fc:	0801be28 	.word	0x0801be28
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d606:	1c5f      	adds	r7, r3, #1
 800d608:	971b      	str	r7, [sp, #108]	; 0x6c
 800d60a:	785b      	ldrb	r3, [r3, #1]
 800d60c:	2b30      	cmp	r3, #48	; 0x30
 800d60e:	d0f9      	beq.n	800d604 <_strtod_l+0x28c>
 800d610:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d614:	2f08      	cmp	r7, #8
 800d616:	f63f af7d 	bhi.w	800d514 <_strtod_l+0x19c>
 800d61a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d61e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d620:	930a      	str	r3, [sp, #40]	; 0x28
 800d622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d624:	1c5f      	adds	r7, r3, #1
 800d626:	971b      	str	r7, [sp, #108]	; 0x6c
 800d628:	785b      	ldrb	r3, [r3, #1]
 800d62a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d62e:	f1b8 0f09 	cmp.w	r8, #9
 800d632:	d937      	bls.n	800d6a4 <_strtod_l+0x32c>
 800d634:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d636:	1a7f      	subs	r7, r7, r1
 800d638:	2f08      	cmp	r7, #8
 800d63a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d63e:	dc37      	bgt.n	800d6b0 <_strtod_l+0x338>
 800d640:	45be      	cmp	lr, r7
 800d642:	bfa8      	it	ge
 800d644:	46be      	movge	lr, r7
 800d646:	f1bc 0f00 	cmp.w	ip, #0
 800d64a:	d001      	beq.n	800d650 <_strtod_l+0x2d8>
 800d64c:	f1ce 0e00 	rsb	lr, lr, #0
 800d650:	2c00      	cmp	r4, #0
 800d652:	d151      	bne.n	800d6f8 <_strtod_l+0x380>
 800d654:	2800      	cmp	r0, #0
 800d656:	f47f aece 	bne.w	800d3f6 <_strtod_l+0x7e>
 800d65a:	9a06      	ldr	r2, [sp, #24]
 800d65c:	2a00      	cmp	r2, #0
 800d65e:	f47f aeca 	bne.w	800d3f6 <_strtod_l+0x7e>
 800d662:	9a04      	ldr	r2, [sp, #16]
 800d664:	2a00      	cmp	r2, #0
 800d666:	f47f aee4 	bne.w	800d432 <_strtod_l+0xba>
 800d66a:	2b4e      	cmp	r3, #78	; 0x4e
 800d66c:	d027      	beq.n	800d6be <_strtod_l+0x346>
 800d66e:	dc21      	bgt.n	800d6b4 <_strtod_l+0x33c>
 800d670:	2b49      	cmp	r3, #73	; 0x49
 800d672:	f47f aede 	bne.w	800d432 <_strtod_l+0xba>
 800d676:	49a0      	ldr	r1, [pc, #640]	; (800d8f8 <_strtod_l+0x580>)
 800d678:	a81b      	add	r0, sp, #108	; 0x6c
 800d67a:	f001 f83f 	bl	800e6fc <__match>
 800d67e:	2800      	cmp	r0, #0
 800d680:	f43f aed7 	beq.w	800d432 <_strtod_l+0xba>
 800d684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d686:	499d      	ldr	r1, [pc, #628]	; (800d8fc <_strtod_l+0x584>)
 800d688:	3b01      	subs	r3, #1
 800d68a:	a81b      	add	r0, sp, #108	; 0x6c
 800d68c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d68e:	f001 f835 	bl	800e6fc <__match>
 800d692:	b910      	cbnz	r0, 800d69a <_strtod_l+0x322>
 800d694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d696:	3301      	adds	r3, #1
 800d698:	931b      	str	r3, [sp, #108]	; 0x6c
 800d69a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d910 <_strtod_l+0x598>
 800d69e:	f04f 0a00 	mov.w	sl, #0
 800d6a2:	e6a8      	b.n	800d3f6 <_strtod_l+0x7e>
 800d6a4:	210a      	movs	r1, #10
 800d6a6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d6aa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d6ae:	e7b8      	b.n	800d622 <_strtod_l+0x2aa>
 800d6b0:	46be      	mov	lr, r7
 800d6b2:	e7c8      	b.n	800d646 <_strtod_l+0x2ce>
 800d6b4:	2b69      	cmp	r3, #105	; 0x69
 800d6b6:	d0de      	beq.n	800d676 <_strtod_l+0x2fe>
 800d6b8:	2b6e      	cmp	r3, #110	; 0x6e
 800d6ba:	f47f aeba 	bne.w	800d432 <_strtod_l+0xba>
 800d6be:	4990      	ldr	r1, [pc, #576]	; (800d900 <_strtod_l+0x588>)
 800d6c0:	a81b      	add	r0, sp, #108	; 0x6c
 800d6c2:	f001 f81b 	bl	800e6fc <__match>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f43f aeb3 	beq.w	800d432 <_strtod_l+0xba>
 800d6cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	2b28      	cmp	r3, #40	; 0x28
 800d6d2:	d10e      	bne.n	800d6f2 <_strtod_l+0x37a>
 800d6d4:	aa1e      	add	r2, sp, #120	; 0x78
 800d6d6:	498b      	ldr	r1, [pc, #556]	; (800d904 <_strtod_l+0x58c>)
 800d6d8:	a81b      	add	r0, sp, #108	; 0x6c
 800d6da:	f001 f823 	bl	800e724 <__hexnan>
 800d6de:	2805      	cmp	r0, #5
 800d6e0:	d107      	bne.n	800d6f2 <_strtod_l+0x37a>
 800d6e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6e4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d6e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d6ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d6f0:	e681      	b.n	800d3f6 <_strtod_l+0x7e>
 800d6f2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d918 <_strtod_l+0x5a0>
 800d6f6:	e7d2      	b.n	800d69e <_strtod_l+0x326>
 800d6f8:	ebae 0302 	sub.w	r3, lr, r2
 800d6fc:	9306      	str	r3, [sp, #24]
 800d6fe:	9b05      	ldr	r3, [sp, #20]
 800d700:	9807      	ldr	r0, [sp, #28]
 800d702:	2b00      	cmp	r3, #0
 800d704:	bf08      	it	eq
 800d706:	4623      	moveq	r3, r4
 800d708:	2c10      	cmp	r4, #16
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	46a0      	mov	r8, r4
 800d70e:	bfa8      	it	ge
 800d710:	f04f 0810 	movge.w	r8, #16
 800d714:	f7f2 ff0e 	bl	8000534 <__aeabi_ui2d>
 800d718:	2c09      	cmp	r4, #9
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	dc13      	bgt.n	800d748 <_strtod_l+0x3d0>
 800d720:	9b06      	ldr	r3, [sp, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f43f ae67 	beq.w	800d3f6 <_strtod_l+0x7e>
 800d728:	9b06      	ldr	r3, [sp, #24]
 800d72a:	dd7a      	ble.n	800d822 <_strtod_l+0x4aa>
 800d72c:	2b16      	cmp	r3, #22
 800d72e:	dc61      	bgt.n	800d7f4 <_strtod_l+0x47c>
 800d730:	4a75      	ldr	r2, [pc, #468]	; (800d908 <_strtod_l+0x590>)
 800d732:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d736:	e9de 0100 	ldrd	r0, r1, [lr]
 800d73a:	4652      	mov	r2, sl
 800d73c:	465b      	mov	r3, fp
 800d73e:	f7f2 ff73 	bl	8000628 <__aeabi_dmul>
 800d742:	4682      	mov	sl, r0
 800d744:	468b      	mov	fp, r1
 800d746:	e656      	b.n	800d3f6 <_strtod_l+0x7e>
 800d748:	4b6f      	ldr	r3, [pc, #444]	; (800d908 <_strtod_l+0x590>)
 800d74a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d74e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d752:	f7f2 ff69 	bl	8000628 <__aeabi_dmul>
 800d756:	4606      	mov	r6, r0
 800d758:	4628      	mov	r0, r5
 800d75a:	460f      	mov	r7, r1
 800d75c:	f7f2 feea 	bl	8000534 <__aeabi_ui2d>
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f2 fda8 	bl	80002bc <__adddf3>
 800d76c:	2c0f      	cmp	r4, #15
 800d76e:	4682      	mov	sl, r0
 800d770:	468b      	mov	fp, r1
 800d772:	ddd5      	ble.n	800d720 <_strtod_l+0x3a8>
 800d774:	9b06      	ldr	r3, [sp, #24]
 800d776:	eba4 0808 	sub.w	r8, r4, r8
 800d77a:	4498      	add	r8, r3
 800d77c:	f1b8 0f00 	cmp.w	r8, #0
 800d780:	f340 8096 	ble.w	800d8b0 <_strtod_l+0x538>
 800d784:	f018 030f 	ands.w	r3, r8, #15
 800d788:	d00a      	beq.n	800d7a0 <_strtod_l+0x428>
 800d78a:	495f      	ldr	r1, [pc, #380]	; (800d908 <_strtod_l+0x590>)
 800d78c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d790:	4652      	mov	r2, sl
 800d792:	465b      	mov	r3, fp
 800d794:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d798:	f7f2 ff46 	bl	8000628 <__aeabi_dmul>
 800d79c:	4682      	mov	sl, r0
 800d79e:	468b      	mov	fp, r1
 800d7a0:	f038 080f 	bics.w	r8, r8, #15
 800d7a4:	d073      	beq.n	800d88e <_strtod_l+0x516>
 800d7a6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d7aa:	dd47      	ble.n	800d83c <_strtod_l+0x4c4>
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	46a0      	mov	r8, r4
 800d7b0:	9407      	str	r4, [sp, #28]
 800d7b2:	9405      	str	r4, [sp, #20]
 800d7b4:	2322      	movs	r3, #34	; 0x22
 800d7b6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d910 <_strtod_l+0x598>
 800d7ba:	f8c9 3000 	str.w	r3, [r9]
 800d7be:	f04f 0a00 	mov.w	sl, #0
 800d7c2:	9b07      	ldr	r3, [sp, #28]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f43f ae16 	beq.w	800d3f6 <_strtod_l+0x7e>
 800d7ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7cc:	4648      	mov	r0, r9
 800d7ce:	f001 f884 	bl	800e8da <_Bfree>
 800d7d2:	9905      	ldr	r1, [sp, #20]
 800d7d4:	4648      	mov	r0, r9
 800d7d6:	f001 f880 	bl	800e8da <_Bfree>
 800d7da:	4641      	mov	r1, r8
 800d7dc:	4648      	mov	r0, r9
 800d7de:	f001 f87c 	bl	800e8da <_Bfree>
 800d7e2:	9907      	ldr	r1, [sp, #28]
 800d7e4:	4648      	mov	r0, r9
 800d7e6:	f001 f878 	bl	800e8da <_Bfree>
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	4648      	mov	r0, r9
 800d7ee:	f001 f874 	bl	800e8da <_Bfree>
 800d7f2:	e600      	b.n	800d3f6 <_strtod_l+0x7e>
 800d7f4:	9a06      	ldr	r2, [sp, #24]
 800d7f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	dbba      	blt.n	800d774 <_strtod_l+0x3fc>
 800d7fe:	4d42      	ldr	r5, [pc, #264]	; (800d908 <_strtod_l+0x590>)
 800d800:	f1c4 040f 	rsb	r4, r4, #15
 800d804:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d808:	4652      	mov	r2, sl
 800d80a:	465b      	mov	r3, fp
 800d80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d810:	f7f2 ff0a 	bl	8000628 <__aeabi_dmul>
 800d814:	9b06      	ldr	r3, [sp, #24]
 800d816:	1b1c      	subs	r4, r3, r4
 800d818:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d81c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d820:	e78d      	b.n	800d73e <_strtod_l+0x3c6>
 800d822:	f113 0f16 	cmn.w	r3, #22
 800d826:	dba5      	blt.n	800d774 <_strtod_l+0x3fc>
 800d828:	4a37      	ldr	r2, [pc, #220]	; (800d908 <_strtod_l+0x590>)
 800d82a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d82e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d832:	4650      	mov	r0, sl
 800d834:	4659      	mov	r1, fp
 800d836:	f7f3 f821 	bl	800087c <__aeabi_ddiv>
 800d83a:	e782      	b.n	800d742 <_strtod_l+0x3ca>
 800d83c:	2300      	movs	r3, #0
 800d83e:	4e33      	ldr	r6, [pc, #204]	; (800d90c <_strtod_l+0x594>)
 800d840:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d844:	4650      	mov	r0, sl
 800d846:	4659      	mov	r1, fp
 800d848:	461d      	mov	r5, r3
 800d84a:	f1b8 0f01 	cmp.w	r8, #1
 800d84e:	dc21      	bgt.n	800d894 <_strtod_l+0x51c>
 800d850:	b10b      	cbz	r3, 800d856 <_strtod_l+0x4de>
 800d852:	4682      	mov	sl, r0
 800d854:	468b      	mov	fp, r1
 800d856:	4b2d      	ldr	r3, [pc, #180]	; (800d90c <_strtod_l+0x594>)
 800d858:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d85c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d860:	4652      	mov	r2, sl
 800d862:	465b      	mov	r3, fp
 800d864:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d868:	f7f2 fede 	bl	8000628 <__aeabi_dmul>
 800d86c:	4b28      	ldr	r3, [pc, #160]	; (800d910 <_strtod_l+0x598>)
 800d86e:	460a      	mov	r2, r1
 800d870:	400b      	ands	r3, r1
 800d872:	4928      	ldr	r1, [pc, #160]	; (800d914 <_strtod_l+0x59c>)
 800d874:	428b      	cmp	r3, r1
 800d876:	4682      	mov	sl, r0
 800d878:	d898      	bhi.n	800d7ac <_strtod_l+0x434>
 800d87a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d87e:	428b      	cmp	r3, r1
 800d880:	bf86      	itte	hi
 800d882:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d91c <_strtod_l+0x5a4>
 800d886:	f04f 3aff 	movhi.w	sl, #4294967295
 800d88a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d88e:	2300      	movs	r3, #0
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	e077      	b.n	800d984 <_strtod_l+0x60c>
 800d894:	f018 0f01 	tst.w	r8, #1
 800d898:	d006      	beq.n	800d8a8 <_strtod_l+0x530>
 800d89a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	f7f2 fec1 	bl	8000628 <__aeabi_dmul>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	3501      	adds	r5, #1
 800d8aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d8ae:	e7cc      	b.n	800d84a <_strtod_l+0x4d2>
 800d8b0:	d0ed      	beq.n	800d88e <_strtod_l+0x516>
 800d8b2:	f1c8 0800 	rsb	r8, r8, #0
 800d8b6:	f018 020f 	ands.w	r2, r8, #15
 800d8ba:	d00a      	beq.n	800d8d2 <_strtod_l+0x55a>
 800d8bc:	4b12      	ldr	r3, [pc, #72]	; (800d908 <_strtod_l+0x590>)
 800d8be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	4659      	mov	r1, fp
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f2 ffd7 	bl	800087c <__aeabi_ddiv>
 800d8ce:	4682      	mov	sl, r0
 800d8d0:	468b      	mov	fp, r1
 800d8d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d8d6:	d0da      	beq.n	800d88e <_strtod_l+0x516>
 800d8d8:	f1b8 0f1f 	cmp.w	r8, #31
 800d8dc:	dd20      	ble.n	800d920 <_strtod_l+0x5a8>
 800d8de:	2400      	movs	r4, #0
 800d8e0:	46a0      	mov	r8, r4
 800d8e2:	9407      	str	r4, [sp, #28]
 800d8e4:	9405      	str	r4, [sp, #20]
 800d8e6:	2322      	movs	r3, #34	; 0x22
 800d8e8:	f04f 0a00 	mov.w	sl, #0
 800d8ec:	f04f 0b00 	mov.w	fp, #0
 800d8f0:	f8c9 3000 	str.w	r3, [r9]
 800d8f4:	e765      	b.n	800d7c2 <_strtod_l+0x44a>
 800d8f6:	bf00      	nop
 800d8f8:	0801be1c 	.word	0x0801be1c
 800d8fc:	0801be1f 	.word	0x0801be1f
 800d900:	0801be25 	.word	0x0801be25
 800d904:	0801be3c 	.word	0x0801be3c
 800d908:	0801beb0 	.word	0x0801beb0
 800d90c:	0801be88 	.word	0x0801be88
 800d910:	7ff00000 	.word	0x7ff00000
 800d914:	7ca00000 	.word	0x7ca00000
 800d918:	fff80000 	.word	0xfff80000
 800d91c:	7fefffff 	.word	0x7fefffff
 800d920:	f018 0310 	ands.w	r3, r8, #16
 800d924:	bf18      	it	ne
 800d926:	236a      	movne	r3, #106	; 0x6a
 800d928:	4da0      	ldr	r5, [pc, #640]	; (800dbac <_strtod_l+0x834>)
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	4650      	mov	r0, sl
 800d92e:	4659      	mov	r1, fp
 800d930:	2300      	movs	r3, #0
 800d932:	f1b8 0f00 	cmp.w	r8, #0
 800d936:	f300 810a 	bgt.w	800db4e <_strtod_l+0x7d6>
 800d93a:	b10b      	cbz	r3, 800d940 <_strtod_l+0x5c8>
 800d93c:	4682      	mov	sl, r0
 800d93e:	468b      	mov	fp, r1
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	b1bb      	cbz	r3, 800d974 <_strtod_l+0x5fc>
 800d944:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d948:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	4659      	mov	r1, fp
 800d950:	dd10      	ble.n	800d974 <_strtod_l+0x5fc>
 800d952:	2b1f      	cmp	r3, #31
 800d954:	f340 8107 	ble.w	800db66 <_strtod_l+0x7ee>
 800d958:	2b34      	cmp	r3, #52	; 0x34
 800d95a:	bfde      	ittt	le
 800d95c:	3b20      	suble	r3, #32
 800d95e:	f04f 32ff 	movle.w	r2, #4294967295
 800d962:	fa02 f303 	lslle.w	r3, r2, r3
 800d966:	f04f 0a00 	mov.w	sl, #0
 800d96a:	bfcc      	ite	gt
 800d96c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d970:	ea03 0b01 	andle.w	fp, r3, r1
 800d974:	2200      	movs	r2, #0
 800d976:	2300      	movs	r3, #0
 800d978:	4650      	mov	r0, sl
 800d97a:	4659      	mov	r1, fp
 800d97c:	f7f3 f8bc 	bl	8000af8 <__aeabi_dcmpeq>
 800d980:	2800      	cmp	r0, #0
 800d982:	d1ac      	bne.n	800d8de <_strtod_l+0x566>
 800d984:	9b07      	ldr	r3, [sp, #28]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	9a05      	ldr	r2, [sp, #20]
 800d98a:	9908      	ldr	r1, [sp, #32]
 800d98c:	4623      	mov	r3, r4
 800d98e:	4648      	mov	r0, r9
 800d990:	f000 fff5 	bl	800e97e <__s2b>
 800d994:	9007      	str	r0, [sp, #28]
 800d996:	2800      	cmp	r0, #0
 800d998:	f43f af08 	beq.w	800d7ac <_strtod_l+0x434>
 800d99c:	9a06      	ldr	r2, [sp, #24]
 800d99e:	9b06      	ldr	r3, [sp, #24]
 800d9a0:	2a00      	cmp	r2, #0
 800d9a2:	f1c3 0300 	rsb	r3, r3, #0
 800d9a6:	bfa8      	it	ge
 800d9a8:	2300      	movge	r3, #0
 800d9aa:	930e      	str	r3, [sp, #56]	; 0x38
 800d9ac:	2400      	movs	r4, #0
 800d9ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d9b2:	9316      	str	r3, [sp, #88]	; 0x58
 800d9b4:	46a0      	mov	r8, r4
 800d9b6:	9b07      	ldr	r3, [sp, #28]
 800d9b8:	4648      	mov	r0, r9
 800d9ba:	6859      	ldr	r1, [r3, #4]
 800d9bc:	f000 ff59 	bl	800e872 <_Balloc>
 800d9c0:	9005      	str	r0, [sp, #20]
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	f43f aef6 	beq.w	800d7b4 <_strtod_l+0x43c>
 800d9c8:	9b07      	ldr	r3, [sp, #28]
 800d9ca:	691a      	ldr	r2, [r3, #16]
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	f103 010c 	add.w	r1, r3, #12
 800d9d2:	0092      	lsls	r2, r2, #2
 800d9d4:	300c      	adds	r0, #12
 800d9d6:	f7ff fc95 	bl	800d304 <memcpy>
 800d9da:	aa1e      	add	r2, sp, #120	; 0x78
 800d9dc:	a91d      	add	r1, sp, #116	; 0x74
 800d9de:	ec4b ab10 	vmov	d0, sl, fp
 800d9e2:	4648      	mov	r0, r9
 800d9e4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d9e8:	f001 fa84 	bl	800eef4 <__d2b>
 800d9ec:	901c      	str	r0, [sp, #112]	; 0x70
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f aee0 	beq.w	800d7b4 <_strtod_l+0x43c>
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	4648      	mov	r0, r9
 800d9f8:	f001 f84d 	bl	800ea96 <__i2b>
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f43f aed8 	beq.w	800d7b4 <_strtod_l+0x43c>
 800da04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800da06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800da08:	2e00      	cmp	r6, #0
 800da0a:	bfab      	itete	ge
 800da0c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800da0e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800da10:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800da12:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800da14:	bfac      	ite	ge
 800da16:	18f7      	addge	r7, r6, r3
 800da18:	1b9d      	sublt	r5, r3, r6
 800da1a:	9b04      	ldr	r3, [sp, #16]
 800da1c:	1af6      	subs	r6, r6, r3
 800da1e:	4416      	add	r6, r2
 800da20:	4b63      	ldr	r3, [pc, #396]	; (800dbb0 <_strtod_l+0x838>)
 800da22:	3e01      	subs	r6, #1
 800da24:	429e      	cmp	r6, r3
 800da26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da2a:	f280 80af 	bge.w	800db8c <_strtod_l+0x814>
 800da2e:	1b9b      	subs	r3, r3, r6
 800da30:	2b1f      	cmp	r3, #31
 800da32:	eba2 0203 	sub.w	r2, r2, r3
 800da36:	f04f 0101 	mov.w	r1, #1
 800da3a:	f300 809b 	bgt.w	800db74 <_strtod_l+0x7fc>
 800da3e:	fa01 f303 	lsl.w	r3, r1, r3
 800da42:	930f      	str	r3, [sp, #60]	; 0x3c
 800da44:	2300      	movs	r3, #0
 800da46:	930a      	str	r3, [sp, #40]	; 0x28
 800da48:	18be      	adds	r6, r7, r2
 800da4a:	9b04      	ldr	r3, [sp, #16]
 800da4c:	42b7      	cmp	r7, r6
 800da4e:	4415      	add	r5, r2
 800da50:	441d      	add	r5, r3
 800da52:	463b      	mov	r3, r7
 800da54:	bfa8      	it	ge
 800da56:	4633      	movge	r3, r6
 800da58:	42ab      	cmp	r3, r5
 800da5a:	bfa8      	it	ge
 800da5c:	462b      	movge	r3, r5
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bfc2      	ittt	gt
 800da62:	1af6      	subgt	r6, r6, r3
 800da64:	1aed      	subgt	r5, r5, r3
 800da66:	1aff      	subgt	r7, r7, r3
 800da68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da6a:	b1bb      	cbz	r3, 800da9c <_strtod_l+0x724>
 800da6c:	4641      	mov	r1, r8
 800da6e:	461a      	mov	r2, r3
 800da70:	4648      	mov	r0, r9
 800da72:	f001 f8af 	bl	800ebd4 <__pow5mult>
 800da76:	4680      	mov	r8, r0
 800da78:	2800      	cmp	r0, #0
 800da7a:	f43f ae9b 	beq.w	800d7b4 <_strtod_l+0x43c>
 800da7e:	4601      	mov	r1, r0
 800da80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800da82:	4648      	mov	r0, r9
 800da84:	f001 f810 	bl	800eaa8 <__multiply>
 800da88:	900c      	str	r0, [sp, #48]	; 0x30
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f ae92 	beq.w	800d7b4 <_strtod_l+0x43c>
 800da90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da92:	4648      	mov	r0, r9
 800da94:	f000 ff21 	bl	800e8da <_Bfree>
 800da98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da9a:	931c      	str	r3, [sp, #112]	; 0x70
 800da9c:	2e00      	cmp	r6, #0
 800da9e:	dc7a      	bgt.n	800db96 <_strtod_l+0x81e>
 800daa0:	9b06      	ldr	r3, [sp, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dd08      	ble.n	800dab8 <_strtod_l+0x740>
 800daa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800daa8:	9905      	ldr	r1, [sp, #20]
 800daaa:	4648      	mov	r0, r9
 800daac:	f001 f892 	bl	800ebd4 <__pow5mult>
 800dab0:	9005      	str	r0, [sp, #20]
 800dab2:	2800      	cmp	r0, #0
 800dab4:	f43f ae7e 	beq.w	800d7b4 <_strtod_l+0x43c>
 800dab8:	2d00      	cmp	r5, #0
 800daba:	dd08      	ble.n	800dace <_strtod_l+0x756>
 800dabc:	462a      	mov	r2, r5
 800dabe:	9905      	ldr	r1, [sp, #20]
 800dac0:	4648      	mov	r0, r9
 800dac2:	f001 f8d5 	bl	800ec70 <__lshift>
 800dac6:	9005      	str	r0, [sp, #20]
 800dac8:	2800      	cmp	r0, #0
 800daca:	f43f ae73 	beq.w	800d7b4 <_strtod_l+0x43c>
 800dace:	2f00      	cmp	r7, #0
 800dad0:	dd08      	ble.n	800dae4 <_strtod_l+0x76c>
 800dad2:	4641      	mov	r1, r8
 800dad4:	463a      	mov	r2, r7
 800dad6:	4648      	mov	r0, r9
 800dad8:	f001 f8ca 	bl	800ec70 <__lshift>
 800dadc:	4680      	mov	r8, r0
 800dade:	2800      	cmp	r0, #0
 800dae0:	f43f ae68 	beq.w	800d7b4 <_strtod_l+0x43c>
 800dae4:	9a05      	ldr	r2, [sp, #20]
 800dae6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dae8:	4648      	mov	r0, r9
 800daea:	f001 f92f 	bl	800ed4c <__mdiff>
 800daee:	4604      	mov	r4, r0
 800daf0:	2800      	cmp	r0, #0
 800daf2:	f43f ae5f 	beq.w	800d7b4 <_strtod_l+0x43c>
 800daf6:	68c3      	ldr	r3, [r0, #12]
 800daf8:	930c      	str	r3, [sp, #48]	; 0x30
 800dafa:	2300      	movs	r3, #0
 800dafc:	60c3      	str	r3, [r0, #12]
 800dafe:	4641      	mov	r1, r8
 800db00:	f001 f90a 	bl	800ed18 <__mcmp>
 800db04:	2800      	cmp	r0, #0
 800db06:	da55      	bge.n	800dbb4 <_strtod_l+0x83c>
 800db08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db0a:	b9e3      	cbnz	r3, 800db46 <_strtod_l+0x7ce>
 800db0c:	f1ba 0f00 	cmp.w	sl, #0
 800db10:	d119      	bne.n	800db46 <_strtod_l+0x7ce>
 800db12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db16:	b9b3      	cbnz	r3, 800db46 <_strtod_l+0x7ce>
 800db18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db1c:	0d1b      	lsrs	r3, r3, #20
 800db1e:	051b      	lsls	r3, r3, #20
 800db20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db24:	d90f      	bls.n	800db46 <_strtod_l+0x7ce>
 800db26:	6963      	ldr	r3, [r4, #20]
 800db28:	b913      	cbnz	r3, 800db30 <_strtod_l+0x7b8>
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	dd0a      	ble.n	800db46 <_strtod_l+0x7ce>
 800db30:	4621      	mov	r1, r4
 800db32:	2201      	movs	r2, #1
 800db34:	4648      	mov	r0, r9
 800db36:	f001 f89b 	bl	800ec70 <__lshift>
 800db3a:	4641      	mov	r1, r8
 800db3c:	4604      	mov	r4, r0
 800db3e:	f001 f8eb 	bl	800ed18 <__mcmp>
 800db42:	2800      	cmp	r0, #0
 800db44:	dc67      	bgt.n	800dc16 <_strtod_l+0x89e>
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d171      	bne.n	800dc30 <_strtod_l+0x8b8>
 800db4c:	e63d      	b.n	800d7ca <_strtod_l+0x452>
 800db4e:	f018 0f01 	tst.w	r8, #1
 800db52:	d004      	beq.n	800db5e <_strtod_l+0x7e6>
 800db54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db58:	f7f2 fd66 	bl	8000628 <__aeabi_dmul>
 800db5c:	2301      	movs	r3, #1
 800db5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800db62:	3508      	adds	r5, #8
 800db64:	e6e5      	b.n	800d932 <_strtod_l+0x5ba>
 800db66:	f04f 32ff 	mov.w	r2, #4294967295
 800db6a:	fa02 f303 	lsl.w	r3, r2, r3
 800db6e:	ea03 0a0a 	and.w	sl, r3, sl
 800db72:	e6ff      	b.n	800d974 <_strtod_l+0x5fc>
 800db74:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800db78:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800db7c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800db80:	36e2      	adds	r6, #226	; 0xe2
 800db82:	fa01 f306 	lsl.w	r3, r1, r6
 800db86:	930a      	str	r3, [sp, #40]	; 0x28
 800db88:	910f      	str	r1, [sp, #60]	; 0x3c
 800db8a:	e75d      	b.n	800da48 <_strtod_l+0x6d0>
 800db8c:	2300      	movs	r3, #0
 800db8e:	930a      	str	r3, [sp, #40]	; 0x28
 800db90:	2301      	movs	r3, #1
 800db92:	930f      	str	r3, [sp, #60]	; 0x3c
 800db94:	e758      	b.n	800da48 <_strtod_l+0x6d0>
 800db96:	4632      	mov	r2, r6
 800db98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800db9a:	4648      	mov	r0, r9
 800db9c:	f001 f868 	bl	800ec70 <__lshift>
 800dba0:	901c      	str	r0, [sp, #112]	; 0x70
 800dba2:	2800      	cmp	r0, #0
 800dba4:	f47f af7c 	bne.w	800daa0 <_strtod_l+0x728>
 800dba8:	e604      	b.n	800d7b4 <_strtod_l+0x43c>
 800dbaa:	bf00      	nop
 800dbac:	0801be50 	.word	0x0801be50
 800dbb0:	fffffc02 	.word	0xfffffc02
 800dbb4:	465d      	mov	r5, fp
 800dbb6:	f040 8086 	bne.w	800dcc6 <_strtod_l+0x94e>
 800dbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbc0:	b32a      	cbz	r2, 800dc0e <_strtod_l+0x896>
 800dbc2:	4aaf      	ldr	r2, [pc, #700]	; (800de80 <_strtod_l+0xb08>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d153      	bne.n	800dc70 <_strtod_l+0x8f8>
 800dbc8:	9b04      	ldr	r3, [sp, #16]
 800dbca:	4650      	mov	r0, sl
 800dbcc:	b1d3      	cbz	r3, 800dc04 <_strtod_l+0x88c>
 800dbce:	4aad      	ldr	r2, [pc, #692]	; (800de84 <_strtod_l+0xb0c>)
 800dbd0:	402a      	ands	r2, r5
 800dbd2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dbd6:	f04f 31ff 	mov.w	r1, #4294967295
 800dbda:	d816      	bhi.n	800dc0a <_strtod_l+0x892>
 800dbdc:	0d12      	lsrs	r2, r2, #20
 800dbde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dbe2:	fa01 f303 	lsl.w	r3, r1, r3
 800dbe6:	4298      	cmp	r0, r3
 800dbe8:	d142      	bne.n	800dc70 <_strtod_l+0x8f8>
 800dbea:	4ba7      	ldr	r3, [pc, #668]	; (800de88 <_strtod_l+0xb10>)
 800dbec:	429d      	cmp	r5, r3
 800dbee:	d102      	bne.n	800dbf6 <_strtod_l+0x87e>
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	f43f addf 	beq.w	800d7b4 <_strtod_l+0x43c>
 800dbf6:	4ba3      	ldr	r3, [pc, #652]	; (800de84 <_strtod_l+0xb0c>)
 800dbf8:	402b      	ands	r3, r5
 800dbfa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dbfe:	f04f 0a00 	mov.w	sl, #0
 800dc02:	e7a0      	b.n	800db46 <_strtod_l+0x7ce>
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	e7ed      	b.n	800dbe6 <_strtod_l+0x86e>
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	e7eb      	b.n	800dbe6 <_strtod_l+0x86e>
 800dc0e:	bb7b      	cbnz	r3, 800dc70 <_strtod_l+0x8f8>
 800dc10:	f1ba 0f00 	cmp.w	sl, #0
 800dc14:	d12c      	bne.n	800dc70 <_strtod_l+0x8f8>
 800dc16:	9904      	ldr	r1, [sp, #16]
 800dc18:	4a9a      	ldr	r2, [pc, #616]	; (800de84 <_strtod_l+0xb0c>)
 800dc1a:	465b      	mov	r3, fp
 800dc1c:	b1f1      	cbz	r1, 800dc5c <_strtod_l+0x8e4>
 800dc1e:	ea02 010b 	and.w	r1, r2, fp
 800dc22:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dc26:	dc19      	bgt.n	800dc5c <_strtod_l+0x8e4>
 800dc28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dc2c:	f77f ae5b 	ble.w	800d8e6 <_strtod_l+0x56e>
 800dc30:	4a96      	ldr	r2, [pc, #600]	; (800de8c <_strtod_l+0xb14>)
 800dc32:	2300      	movs	r3, #0
 800dc34:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800dc38:	4650      	mov	r0, sl
 800dc3a:	4659      	mov	r1, fp
 800dc3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dc40:	f7f2 fcf2 	bl	8000628 <__aeabi_dmul>
 800dc44:	4682      	mov	sl, r0
 800dc46:	468b      	mov	fp, r1
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	f47f adbe 	bne.w	800d7ca <_strtod_l+0x452>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	f47f adbb 	bne.w	800d7ca <_strtod_l+0x452>
 800dc54:	2322      	movs	r3, #34	; 0x22
 800dc56:	f8c9 3000 	str.w	r3, [r9]
 800dc5a:	e5b6      	b.n	800d7ca <_strtod_l+0x452>
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc62:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc66:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc6a:	f04f 3aff 	mov.w	sl, #4294967295
 800dc6e:	e76a      	b.n	800db46 <_strtod_l+0x7ce>
 800dc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc72:	b193      	cbz	r3, 800dc9a <_strtod_l+0x922>
 800dc74:	422b      	tst	r3, r5
 800dc76:	f43f af66 	beq.w	800db46 <_strtod_l+0x7ce>
 800dc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc7c:	9a04      	ldr	r2, [sp, #16]
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	b173      	cbz	r3, 800dca2 <_strtod_l+0x92a>
 800dc84:	f7ff fb59 	bl	800d33a <sulp>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc90:	f7f2 fb14 	bl	80002bc <__adddf3>
 800dc94:	4682      	mov	sl, r0
 800dc96:	468b      	mov	fp, r1
 800dc98:	e755      	b.n	800db46 <_strtod_l+0x7ce>
 800dc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc9c:	ea13 0f0a 	tst.w	r3, sl
 800dca0:	e7e9      	b.n	800dc76 <_strtod_l+0x8fe>
 800dca2:	f7ff fb4a 	bl	800d33a <sulp>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dcae:	f7f2 fb03 	bl	80002b8 <__aeabi_dsub>
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	4682      	mov	sl, r0
 800dcb8:	468b      	mov	fp, r1
 800dcba:	f7f2 ff1d 	bl	8000af8 <__aeabi_dcmpeq>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	f47f ae11 	bne.w	800d8e6 <_strtod_l+0x56e>
 800dcc4:	e73f      	b.n	800db46 <_strtod_l+0x7ce>
 800dcc6:	4641      	mov	r1, r8
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f001 f962 	bl	800ef92 <__ratio>
 800dcce:	ec57 6b10 	vmov	r6, r7, d0
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcd8:	ee10 0a10 	vmov	r0, s0
 800dcdc:	4639      	mov	r1, r7
 800dcde:	f7f2 ff1f 	bl	8000b20 <__aeabi_dcmple>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d077      	beq.n	800ddd6 <_strtod_l+0xa5e>
 800dce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d04a      	beq.n	800dd82 <_strtod_l+0xa0a>
 800dcec:	4b68      	ldr	r3, [pc, #416]	; (800de90 <_strtod_l+0xb18>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dcf4:	4f66      	ldr	r7, [pc, #408]	; (800de90 <_strtod_l+0xb18>)
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	4b62      	ldr	r3, [pc, #392]	; (800de84 <_strtod_l+0xb0c>)
 800dcfa:	402b      	ands	r3, r5
 800dcfc:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd00:	4b64      	ldr	r3, [pc, #400]	; (800de94 <_strtod_l+0xb1c>)
 800dd02:	429a      	cmp	r2, r3
 800dd04:	f040 80ce 	bne.w	800dea4 <_strtod_l+0xb2c>
 800dd08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd10:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800dd14:	ec4b ab10 	vmov	d0, sl, fp
 800dd18:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800dd1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dd20:	f001 f872 	bl	800ee08 <__ulp>
 800dd24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd28:	ec53 2b10 	vmov	r2, r3, d0
 800dd2c:	f7f2 fc7c 	bl	8000628 <__aeabi_dmul>
 800dd30:	4652      	mov	r2, sl
 800dd32:	465b      	mov	r3, fp
 800dd34:	f7f2 fac2 	bl	80002bc <__adddf3>
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4952      	ldr	r1, [pc, #328]	; (800de84 <_strtod_l+0xb0c>)
 800dd3c:	4a56      	ldr	r2, [pc, #344]	; (800de98 <_strtod_l+0xb20>)
 800dd3e:	4019      	ands	r1, r3
 800dd40:	4291      	cmp	r1, r2
 800dd42:	4682      	mov	sl, r0
 800dd44:	d95b      	bls.n	800ddfe <_strtod_l+0xa86>
 800dd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d103      	bne.n	800dd58 <_strtod_l+0x9e0>
 800dd50:	9b08      	ldr	r3, [sp, #32]
 800dd52:	3301      	adds	r3, #1
 800dd54:	f43f ad2e 	beq.w	800d7b4 <_strtod_l+0x43c>
 800dd58:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800de88 <_strtod_l+0xb10>
 800dd5c:	f04f 3aff 	mov.w	sl, #4294967295
 800dd60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dd62:	4648      	mov	r0, r9
 800dd64:	f000 fdb9 	bl	800e8da <_Bfree>
 800dd68:	9905      	ldr	r1, [sp, #20]
 800dd6a:	4648      	mov	r0, r9
 800dd6c:	f000 fdb5 	bl	800e8da <_Bfree>
 800dd70:	4641      	mov	r1, r8
 800dd72:	4648      	mov	r0, r9
 800dd74:	f000 fdb1 	bl	800e8da <_Bfree>
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4648      	mov	r0, r9
 800dd7c:	f000 fdad 	bl	800e8da <_Bfree>
 800dd80:	e619      	b.n	800d9b6 <_strtod_l+0x63e>
 800dd82:	f1ba 0f00 	cmp.w	sl, #0
 800dd86:	d11a      	bne.n	800ddbe <_strtod_l+0xa46>
 800dd88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd8c:	b9eb      	cbnz	r3, 800ddca <_strtod_l+0xa52>
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4b3f      	ldr	r3, [pc, #252]	; (800de90 <_strtod_l+0xb18>)
 800dd92:	4630      	mov	r0, r6
 800dd94:	4639      	mov	r1, r7
 800dd96:	f7f2 feb9 	bl	8000b0c <__aeabi_dcmplt>
 800dd9a:	b9c8      	cbnz	r0, 800ddd0 <_strtod_l+0xa58>
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	2200      	movs	r2, #0
 800dda2:	4b3e      	ldr	r3, [pc, #248]	; (800de9c <_strtod_l+0xb24>)
 800dda4:	f7f2 fc40 	bl	8000628 <__aeabi_dmul>
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460f      	mov	r7, r1
 800ddac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ddb0:	9618      	str	r6, [sp, #96]	; 0x60
 800ddb2:	9319      	str	r3, [sp, #100]	; 0x64
 800ddb4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ddb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ddbc:	e79c      	b.n	800dcf8 <_strtod_l+0x980>
 800ddbe:	f1ba 0f01 	cmp.w	sl, #1
 800ddc2:	d102      	bne.n	800ddca <_strtod_l+0xa52>
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	f43f ad8e 	beq.w	800d8e6 <_strtod_l+0x56e>
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4b34      	ldr	r3, [pc, #208]	; (800dea0 <_strtod_l+0xb28>)
 800ddce:	e78f      	b.n	800dcf0 <_strtod_l+0x978>
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	4f32      	ldr	r7, [pc, #200]	; (800de9c <_strtod_l+0xb24>)
 800ddd4:	e7ea      	b.n	800ddac <_strtod_l+0xa34>
 800ddd6:	4b31      	ldr	r3, [pc, #196]	; (800de9c <_strtod_l+0xb24>)
 800ddd8:	4630      	mov	r0, r6
 800ddda:	4639      	mov	r1, r7
 800dddc:	2200      	movs	r2, #0
 800ddde:	f7f2 fc23 	bl	8000628 <__aeabi_dmul>
 800dde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde4:	4606      	mov	r6, r0
 800dde6:	460f      	mov	r7, r1
 800dde8:	b933      	cbnz	r3, 800ddf8 <_strtod_l+0xa80>
 800ddea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddee:	9010      	str	r0, [sp, #64]	; 0x40
 800ddf0:	9311      	str	r3, [sp, #68]	; 0x44
 800ddf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ddf6:	e7df      	b.n	800ddb8 <_strtod_l+0xa40>
 800ddf8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ddfc:	e7f9      	b.n	800ddf2 <_strtod_l+0xa7a>
 800ddfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800de02:	9b04      	ldr	r3, [sp, #16]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1ab      	bne.n	800dd60 <_strtod_l+0x9e8>
 800de08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de0c:	0d1b      	lsrs	r3, r3, #20
 800de0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de10:	051b      	lsls	r3, r3, #20
 800de12:	429a      	cmp	r2, r3
 800de14:	465d      	mov	r5, fp
 800de16:	d1a3      	bne.n	800dd60 <_strtod_l+0x9e8>
 800de18:	4639      	mov	r1, r7
 800de1a:	4630      	mov	r0, r6
 800de1c:	f7f2 feb4 	bl	8000b88 <__aeabi_d2iz>
 800de20:	f7f2 fb98 	bl	8000554 <__aeabi_i2d>
 800de24:	460b      	mov	r3, r1
 800de26:	4602      	mov	r2, r0
 800de28:	4639      	mov	r1, r7
 800de2a:	4630      	mov	r0, r6
 800de2c:	f7f2 fa44 	bl	80002b8 <__aeabi_dsub>
 800de30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de32:	4606      	mov	r6, r0
 800de34:	460f      	mov	r7, r1
 800de36:	b933      	cbnz	r3, 800de46 <_strtod_l+0xace>
 800de38:	f1ba 0f00 	cmp.w	sl, #0
 800de3c:	d103      	bne.n	800de46 <_strtod_l+0xace>
 800de3e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800de42:	2d00      	cmp	r5, #0
 800de44:	d06d      	beq.n	800df22 <_strtod_l+0xbaa>
 800de46:	a30a      	add	r3, pc, #40	; (adr r3, 800de70 <_strtod_l+0xaf8>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	4630      	mov	r0, r6
 800de4e:	4639      	mov	r1, r7
 800de50:	f7f2 fe5c 	bl	8000b0c <__aeabi_dcmplt>
 800de54:	2800      	cmp	r0, #0
 800de56:	f47f acb8 	bne.w	800d7ca <_strtod_l+0x452>
 800de5a:	a307      	add	r3, pc, #28	; (adr r3, 800de78 <_strtod_l+0xb00>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	4630      	mov	r0, r6
 800de62:	4639      	mov	r1, r7
 800de64:	f7f2 fe70 	bl	8000b48 <__aeabi_dcmpgt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f43f af79 	beq.w	800dd60 <_strtod_l+0x9e8>
 800de6e:	e4ac      	b.n	800d7ca <_strtod_l+0x452>
 800de70:	94a03595 	.word	0x94a03595
 800de74:	3fdfffff 	.word	0x3fdfffff
 800de78:	35afe535 	.word	0x35afe535
 800de7c:	3fe00000 	.word	0x3fe00000
 800de80:	000fffff 	.word	0x000fffff
 800de84:	7ff00000 	.word	0x7ff00000
 800de88:	7fefffff 	.word	0x7fefffff
 800de8c:	39500000 	.word	0x39500000
 800de90:	3ff00000 	.word	0x3ff00000
 800de94:	7fe00000 	.word	0x7fe00000
 800de98:	7c9fffff 	.word	0x7c9fffff
 800de9c:	3fe00000 	.word	0x3fe00000
 800dea0:	bff00000 	.word	0xbff00000
 800dea4:	9b04      	ldr	r3, [sp, #16]
 800dea6:	b333      	cbz	r3, 800def6 <_strtod_l+0xb7e>
 800dea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800deaa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800deae:	d822      	bhi.n	800def6 <_strtod_l+0xb7e>
 800deb0:	a327      	add	r3, pc, #156	; (adr r3, 800df50 <_strtod_l+0xbd8>)
 800deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 fe31 	bl	8000b20 <__aeabi_dcmple>
 800debe:	b1a0      	cbz	r0, 800deea <_strtod_l+0xb72>
 800dec0:	4639      	mov	r1, r7
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7f2 fe88 	bl	8000bd8 <__aeabi_d2uiz>
 800dec8:	2800      	cmp	r0, #0
 800deca:	bf08      	it	eq
 800decc:	2001      	moveq	r0, #1
 800dece:	f7f2 fb31 	bl	8000534 <__aeabi_ui2d>
 800ded2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ded4:	4606      	mov	r6, r0
 800ded6:	460f      	mov	r7, r1
 800ded8:	bb03      	cbnz	r3, 800df1c <_strtod_l+0xba4>
 800deda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dede:	9012      	str	r0, [sp, #72]	; 0x48
 800dee0:	9313      	str	r3, [sp, #76]	; 0x4c
 800dee2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800deea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800deee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	930b      	str	r3, [sp, #44]	; 0x2c
 800def6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800defa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800defe:	f000 ff83 	bl	800ee08 <__ulp>
 800df02:	4650      	mov	r0, sl
 800df04:	ec53 2b10 	vmov	r2, r3, d0
 800df08:	4659      	mov	r1, fp
 800df0a:	f7f2 fb8d 	bl	8000628 <__aeabi_dmul>
 800df0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800df12:	f7f2 f9d3 	bl	80002bc <__adddf3>
 800df16:	4682      	mov	sl, r0
 800df18:	468b      	mov	fp, r1
 800df1a:	e772      	b.n	800de02 <_strtod_l+0xa8a>
 800df1c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800df20:	e7df      	b.n	800dee2 <_strtod_l+0xb6a>
 800df22:	a30d      	add	r3, pc, #52	; (adr r3, 800df58 <_strtod_l+0xbe0>)
 800df24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df28:	f7f2 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 800df2c:	e79c      	b.n	800de68 <_strtod_l+0xaf0>
 800df2e:	2300      	movs	r3, #0
 800df30:	930d      	str	r3, [sp, #52]	; 0x34
 800df32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800df34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	f7ff ba61 	b.w	800d3fe <_strtod_l+0x86>
 800df3c:	2b65      	cmp	r3, #101	; 0x65
 800df3e:	f04f 0200 	mov.w	r2, #0
 800df42:	f43f ab4e 	beq.w	800d5e2 <_strtod_l+0x26a>
 800df46:	2101      	movs	r1, #1
 800df48:	4614      	mov	r4, r2
 800df4a:	9104      	str	r1, [sp, #16]
 800df4c:	f7ff bacb 	b.w	800d4e6 <_strtod_l+0x16e>
 800df50:	ffc00000 	.word	0xffc00000
 800df54:	41dfffff 	.word	0x41dfffff
 800df58:	94a03595 	.word	0x94a03595
 800df5c:	3fcfffff 	.word	0x3fcfffff

0800df60 <strtof>:
 800df60:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800df64:	4e24      	ldr	r6, [pc, #144]	; (800dff8 <strtof+0x98>)
 800df66:	4a25      	ldr	r2, [pc, #148]	; (800dffc <strtof+0x9c>)
 800df68:	6834      	ldr	r4, [r6, #0]
 800df6a:	6a23      	ldr	r3, [r4, #32]
 800df6c:	ed2d 8b02 	vpush	{d8}
 800df70:	2b00      	cmp	r3, #0
 800df72:	bf08      	it	eq
 800df74:	4613      	moveq	r3, r2
 800df76:	460a      	mov	r2, r1
 800df78:	4601      	mov	r1, r0
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff f9fc 	bl	800d378 <_strtod_l>
 800df80:	ec55 4b10 	vmov	r4, r5, d0
 800df84:	ee10 2a10 	vmov	r2, s0
 800df88:	462b      	mov	r3, r5
 800df8a:	ee10 0a10 	vmov	r0, s0
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 fde4 	bl	8000b5c <__aeabi_dcmpun>
 800df94:	b130      	cbz	r0, 800dfa4 <strtof+0x44>
 800df96:	ecbd 8b02 	vpop	{d8}
 800df9a:	2000      	movs	r0, #0
 800df9c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800dfa0:	f001 bbb8 	b.w	800f714 <nanf>
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	f7f2 fe36 	bl	8000c18 <__aeabi_d2f>
 800dfac:	ee08 0a10 	vmov	s16, r0
 800dfb0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800e000 <strtof+0xa0>
 800dfb4:	eeb0 7ac8 	vabs.f32	s14, s16
 800dfb8:	eeb4 7a67 	vcmp.f32	s14, s15
 800dfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfc0:	dd14      	ble.n	800dfec <strtof+0x8c>
 800dfc2:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800dfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfca:	4b0e      	ldr	r3, [pc, #56]	; (800e004 <strtof+0xa4>)
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4649      	mov	r1, r9
 800dfd0:	f7f2 fdc4 	bl	8000b5c <__aeabi_dcmpun>
 800dfd4:	b938      	cbnz	r0, 800dfe6 <strtof+0x86>
 800dfd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <strtof+0xa4>)
 800dfdc:	4620      	mov	r0, r4
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f7f2 fd9e 	bl	8000b20 <__aeabi_dcmple>
 800dfe4:	b110      	cbz	r0, 800dfec <strtof+0x8c>
 800dfe6:	6833      	ldr	r3, [r6, #0]
 800dfe8:	2222      	movs	r2, #34	; 0x22
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	eeb0 0a48 	vmov.f32	s0, s16
 800dff0:	ecbd 8b02 	vpop	{d8}
 800dff4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800dff8:	20000060 	.word	0x20000060
 800dffc:	200000c4 	.word	0x200000c4
 800e000:	7f7fffff 	.word	0x7f7fffff
 800e004:	7fefffff 	.word	0x7fefffff

0800e008 <__strtok_r>:
 800e008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e00a:	b918      	cbnz	r0, 800e014 <__strtok_r+0xc>
 800e00c:	6810      	ldr	r0, [r2, #0]
 800e00e:	b908      	cbnz	r0, 800e014 <__strtok_r+0xc>
 800e010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e012:	4620      	mov	r0, r4
 800e014:	4604      	mov	r4, r0
 800e016:	460f      	mov	r7, r1
 800e018:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e01c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e020:	b91e      	cbnz	r6, 800e02a <__strtok_r+0x22>
 800e022:	b96d      	cbnz	r5, 800e040 <__strtok_r+0x38>
 800e024:	6015      	str	r5, [r2, #0]
 800e026:	4628      	mov	r0, r5
 800e028:	e7f2      	b.n	800e010 <__strtok_r+0x8>
 800e02a:	42b5      	cmp	r5, r6
 800e02c:	d1f6      	bne.n	800e01c <__strtok_r+0x14>
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d1ef      	bne.n	800e012 <__strtok_r+0xa>
 800e032:	6014      	str	r4, [r2, #0]
 800e034:	7003      	strb	r3, [r0, #0]
 800e036:	e7eb      	b.n	800e010 <__strtok_r+0x8>
 800e038:	462b      	mov	r3, r5
 800e03a:	e00d      	b.n	800e058 <__strtok_r+0x50>
 800e03c:	b926      	cbnz	r6, 800e048 <__strtok_r+0x40>
 800e03e:	461c      	mov	r4, r3
 800e040:	4623      	mov	r3, r4
 800e042:	460f      	mov	r7, r1
 800e044:	f813 5b01 	ldrb.w	r5, [r3], #1
 800e048:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e04c:	42b5      	cmp	r5, r6
 800e04e:	d1f5      	bne.n	800e03c <__strtok_r+0x34>
 800e050:	2d00      	cmp	r5, #0
 800e052:	d0f1      	beq.n	800e038 <__strtok_r+0x30>
 800e054:	2100      	movs	r1, #0
 800e056:	7021      	strb	r1, [r4, #0]
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	e7d9      	b.n	800e010 <__strtok_r+0x8>

0800e05c <strtok_r>:
 800e05c:	2301      	movs	r3, #1
 800e05e:	f7ff bfd3 	b.w	800e008 <__strtok_r>

0800e062 <_strtoul_l.isra.0>:
 800e062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e066:	4680      	mov	r8, r0
 800e068:	4689      	mov	r9, r1
 800e06a:	4692      	mov	sl, r2
 800e06c:	461e      	mov	r6, r3
 800e06e:	460f      	mov	r7, r1
 800e070:	463d      	mov	r5, r7
 800e072:	9808      	ldr	r0, [sp, #32]
 800e074:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e078:	f000 fbe4 	bl	800e844 <__locale_ctype_ptr_l>
 800e07c:	4420      	add	r0, r4
 800e07e:	7843      	ldrb	r3, [r0, #1]
 800e080:	f013 0308 	ands.w	r3, r3, #8
 800e084:	d130      	bne.n	800e0e8 <_strtoul_l.isra.0+0x86>
 800e086:	2c2d      	cmp	r4, #45	; 0x2d
 800e088:	d130      	bne.n	800e0ec <_strtoul_l.isra.0+0x8a>
 800e08a:	787c      	ldrb	r4, [r7, #1]
 800e08c:	1cbd      	adds	r5, r7, #2
 800e08e:	2101      	movs	r1, #1
 800e090:	2e00      	cmp	r6, #0
 800e092:	d05c      	beq.n	800e14e <_strtoul_l.isra.0+0xec>
 800e094:	2e10      	cmp	r6, #16
 800e096:	d109      	bne.n	800e0ac <_strtoul_l.isra.0+0x4a>
 800e098:	2c30      	cmp	r4, #48	; 0x30
 800e09a:	d107      	bne.n	800e0ac <_strtoul_l.isra.0+0x4a>
 800e09c:	782b      	ldrb	r3, [r5, #0]
 800e09e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0a2:	2b58      	cmp	r3, #88	; 0x58
 800e0a4:	d14e      	bne.n	800e144 <_strtoul_l.isra.0+0xe2>
 800e0a6:	786c      	ldrb	r4, [r5, #1]
 800e0a8:	2610      	movs	r6, #16
 800e0aa:	3502      	adds	r5, #2
 800e0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	fbb2 f2f6 	udiv	r2, r2, r6
 800e0b6:	fb06 fc02 	mul.w	ip, r6, r2
 800e0ba:	ea6f 0c0c 	mvn.w	ip, ip
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e0c4:	2f09      	cmp	r7, #9
 800e0c6:	d817      	bhi.n	800e0f8 <_strtoul_l.isra.0+0x96>
 800e0c8:	463c      	mov	r4, r7
 800e0ca:	42a6      	cmp	r6, r4
 800e0cc:	dd23      	ble.n	800e116 <_strtoul_l.isra.0+0xb4>
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	db1e      	blt.n	800e110 <_strtoul_l.isra.0+0xae>
 800e0d2:	4282      	cmp	r2, r0
 800e0d4:	d31c      	bcc.n	800e110 <_strtoul_l.isra.0+0xae>
 800e0d6:	d101      	bne.n	800e0dc <_strtoul_l.isra.0+0x7a>
 800e0d8:	45a4      	cmp	ip, r4
 800e0da:	db19      	blt.n	800e110 <_strtoul_l.isra.0+0xae>
 800e0dc:	fb00 4006 	mla	r0, r0, r6, r4
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0e6:	e7eb      	b.n	800e0c0 <_strtoul_l.isra.0+0x5e>
 800e0e8:	462f      	mov	r7, r5
 800e0ea:	e7c1      	b.n	800e070 <_strtoul_l.isra.0+0xe>
 800e0ec:	2c2b      	cmp	r4, #43	; 0x2b
 800e0ee:	bf04      	itt	eq
 800e0f0:	1cbd      	addeq	r5, r7, #2
 800e0f2:	787c      	ldrbeq	r4, [r7, #1]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	e7cb      	b.n	800e090 <_strtoul_l.isra.0+0x2e>
 800e0f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e0fc:	2f19      	cmp	r7, #25
 800e0fe:	d801      	bhi.n	800e104 <_strtoul_l.isra.0+0xa2>
 800e100:	3c37      	subs	r4, #55	; 0x37
 800e102:	e7e2      	b.n	800e0ca <_strtoul_l.isra.0+0x68>
 800e104:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e108:	2f19      	cmp	r7, #25
 800e10a:	d804      	bhi.n	800e116 <_strtoul_l.isra.0+0xb4>
 800e10c:	3c57      	subs	r4, #87	; 0x57
 800e10e:	e7dc      	b.n	800e0ca <_strtoul_l.isra.0+0x68>
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	e7e5      	b.n	800e0e2 <_strtoul_l.isra.0+0x80>
 800e116:	2b00      	cmp	r3, #0
 800e118:	da09      	bge.n	800e12e <_strtoul_l.isra.0+0xcc>
 800e11a:	2322      	movs	r3, #34	; 0x22
 800e11c:	f8c8 3000 	str.w	r3, [r8]
 800e120:	f04f 30ff 	mov.w	r0, #4294967295
 800e124:	f1ba 0f00 	cmp.w	sl, #0
 800e128:	d107      	bne.n	800e13a <_strtoul_l.isra.0+0xd8>
 800e12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12e:	b101      	cbz	r1, 800e132 <_strtoul_l.isra.0+0xd0>
 800e130:	4240      	negs	r0, r0
 800e132:	f1ba 0f00 	cmp.w	sl, #0
 800e136:	d0f8      	beq.n	800e12a <_strtoul_l.isra.0+0xc8>
 800e138:	b10b      	cbz	r3, 800e13e <_strtoul_l.isra.0+0xdc>
 800e13a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e13e:	f8ca 9000 	str.w	r9, [sl]
 800e142:	e7f2      	b.n	800e12a <_strtoul_l.isra.0+0xc8>
 800e144:	2430      	movs	r4, #48	; 0x30
 800e146:	2e00      	cmp	r6, #0
 800e148:	d1b0      	bne.n	800e0ac <_strtoul_l.isra.0+0x4a>
 800e14a:	2608      	movs	r6, #8
 800e14c:	e7ae      	b.n	800e0ac <_strtoul_l.isra.0+0x4a>
 800e14e:	2c30      	cmp	r4, #48	; 0x30
 800e150:	d0a4      	beq.n	800e09c <_strtoul_l.isra.0+0x3a>
 800e152:	260a      	movs	r6, #10
 800e154:	e7aa      	b.n	800e0ac <_strtoul_l.isra.0+0x4a>
	...

0800e158 <strtoul>:
 800e158:	4b08      	ldr	r3, [pc, #32]	; (800e17c <strtoul+0x24>)
 800e15a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e15c:	681c      	ldr	r4, [r3, #0]
 800e15e:	4d08      	ldr	r5, [pc, #32]	; (800e180 <strtoul+0x28>)
 800e160:	6a23      	ldr	r3, [r4, #32]
 800e162:	2b00      	cmp	r3, #0
 800e164:	bf08      	it	eq
 800e166:	462b      	moveq	r3, r5
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	4613      	mov	r3, r2
 800e16c:	460a      	mov	r2, r1
 800e16e:	4601      	mov	r1, r0
 800e170:	4620      	mov	r0, r4
 800e172:	f7ff ff76 	bl	800e062 <_strtoul_l.isra.0>
 800e176:	b003      	add	sp, #12
 800e178:	bd30      	pop	{r4, r5, pc}
 800e17a:	bf00      	nop
 800e17c:	20000060 	.word	0x20000060
 800e180:	200000c4 	.word	0x200000c4

0800e184 <_vsniprintf_r>:
 800e184:	b530      	push	{r4, r5, lr}
 800e186:	1e14      	subs	r4, r2, #0
 800e188:	4605      	mov	r5, r0
 800e18a:	b09b      	sub	sp, #108	; 0x6c
 800e18c:	4618      	mov	r0, r3
 800e18e:	da05      	bge.n	800e19c <_vsniprintf_r+0x18>
 800e190:	238b      	movs	r3, #139	; 0x8b
 800e192:	602b      	str	r3, [r5, #0]
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	b01b      	add	sp, #108	; 0x6c
 800e19a:	bd30      	pop	{r4, r5, pc}
 800e19c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e1a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e1a4:	bf14      	ite	ne
 800e1a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e1aa:	4623      	moveq	r3, r4
 800e1ac:	9302      	str	r3, [sp, #8]
 800e1ae:	9305      	str	r3, [sp, #20]
 800e1b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1b4:	9100      	str	r1, [sp, #0]
 800e1b6:	9104      	str	r1, [sp, #16]
 800e1b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e1bc:	4602      	mov	r2, r0
 800e1be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1c0:	4669      	mov	r1, sp
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f001 f816 	bl	800f1f4 <_svfiprintf_r>
 800e1c8:	1c43      	adds	r3, r0, #1
 800e1ca:	bfbc      	itt	lt
 800e1cc:	238b      	movlt	r3, #139	; 0x8b
 800e1ce:	602b      	strlt	r3, [r5, #0]
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	d0e1      	beq.n	800e198 <_vsniprintf_r+0x14>
 800e1d4:	9b00      	ldr	r3, [sp, #0]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	e7dd      	b.n	800e198 <_vsniprintf_r+0x14>

0800e1dc <vsniprintf>:
 800e1dc:	b507      	push	{r0, r1, r2, lr}
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	460a      	mov	r2, r1
 800e1e4:	4601      	mov	r1, r0
 800e1e6:	4803      	ldr	r0, [pc, #12]	; (800e1f4 <vsniprintf+0x18>)
 800e1e8:	6800      	ldr	r0, [r0, #0]
 800e1ea:	f7ff ffcb 	bl	800e184 <_vsniprintf_r>
 800e1ee:	b003      	add	sp, #12
 800e1f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1f4:	20000060 	.word	0x20000060

0800e1f8 <rshift>:
 800e1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1fa:	6906      	ldr	r6, [r0, #16]
 800e1fc:	114b      	asrs	r3, r1, #5
 800e1fe:	429e      	cmp	r6, r3
 800e200:	f100 0414 	add.w	r4, r0, #20
 800e204:	dd30      	ble.n	800e268 <rshift+0x70>
 800e206:	f011 011f 	ands.w	r1, r1, #31
 800e20a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e20e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e212:	d108      	bne.n	800e226 <rshift+0x2e>
 800e214:	4621      	mov	r1, r4
 800e216:	42b2      	cmp	r2, r6
 800e218:	460b      	mov	r3, r1
 800e21a:	d211      	bcs.n	800e240 <rshift+0x48>
 800e21c:	f852 3b04 	ldr.w	r3, [r2], #4
 800e220:	f841 3b04 	str.w	r3, [r1], #4
 800e224:	e7f7      	b.n	800e216 <rshift+0x1e>
 800e226:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e22a:	f1c1 0c20 	rsb	ip, r1, #32
 800e22e:	40cd      	lsrs	r5, r1
 800e230:	3204      	adds	r2, #4
 800e232:	4623      	mov	r3, r4
 800e234:	42b2      	cmp	r2, r6
 800e236:	4617      	mov	r7, r2
 800e238:	d30c      	bcc.n	800e254 <rshift+0x5c>
 800e23a:	601d      	str	r5, [r3, #0]
 800e23c:	b105      	cbz	r5, 800e240 <rshift+0x48>
 800e23e:	3304      	adds	r3, #4
 800e240:	1b1a      	subs	r2, r3, r4
 800e242:	42a3      	cmp	r3, r4
 800e244:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e248:	bf08      	it	eq
 800e24a:	2300      	moveq	r3, #0
 800e24c:	6102      	str	r2, [r0, #16]
 800e24e:	bf08      	it	eq
 800e250:	6143      	streq	r3, [r0, #20]
 800e252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e254:	683f      	ldr	r7, [r7, #0]
 800e256:	fa07 f70c 	lsl.w	r7, r7, ip
 800e25a:	433d      	orrs	r5, r7
 800e25c:	f843 5b04 	str.w	r5, [r3], #4
 800e260:	f852 5b04 	ldr.w	r5, [r2], #4
 800e264:	40cd      	lsrs	r5, r1
 800e266:	e7e5      	b.n	800e234 <rshift+0x3c>
 800e268:	4623      	mov	r3, r4
 800e26a:	e7e9      	b.n	800e240 <rshift+0x48>

0800e26c <__hexdig_fun>:
 800e26c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e270:	2b09      	cmp	r3, #9
 800e272:	d802      	bhi.n	800e27a <__hexdig_fun+0xe>
 800e274:	3820      	subs	r0, #32
 800e276:	b2c0      	uxtb	r0, r0
 800e278:	4770      	bx	lr
 800e27a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e27e:	2b05      	cmp	r3, #5
 800e280:	d801      	bhi.n	800e286 <__hexdig_fun+0x1a>
 800e282:	3847      	subs	r0, #71	; 0x47
 800e284:	e7f7      	b.n	800e276 <__hexdig_fun+0xa>
 800e286:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e28a:	2b05      	cmp	r3, #5
 800e28c:	d801      	bhi.n	800e292 <__hexdig_fun+0x26>
 800e28e:	3827      	subs	r0, #39	; 0x27
 800e290:	e7f1      	b.n	800e276 <__hexdig_fun+0xa>
 800e292:	2000      	movs	r0, #0
 800e294:	4770      	bx	lr

0800e296 <__gethex>:
 800e296:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29a:	b08b      	sub	sp, #44	; 0x2c
 800e29c:	468a      	mov	sl, r1
 800e29e:	9002      	str	r0, [sp, #8]
 800e2a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e2a2:	9306      	str	r3, [sp, #24]
 800e2a4:	4690      	mov	r8, r2
 800e2a6:	f000 fad0 	bl	800e84a <__localeconv_l>
 800e2aa:	6803      	ldr	r3, [r0, #0]
 800e2ac:	9303      	str	r3, [sp, #12]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7f1 ffa0 	bl	80001f4 <strlen>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	9001      	str	r0, [sp, #4]
 800e2b8:	4403      	add	r3, r0
 800e2ba:	f04f 0b00 	mov.w	fp, #0
 800e2be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e2c2:	9307      	str	r3, [sp, #28]
 800e2c4:	f8da 3000 	ldr.w	r3, [sl]
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	461f      	mov	r7, r3
 800e2cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e2d0:	2830      	cmp	r0, #48	; 0x30
 800e2d2:	d06c      	beq.n	800e3ae <__gethex+0x118>
 800e2d4:	f7ff ffca 	bl	800e26c <__hexdig_fun>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d16a      	bne.n	800e3b4 <__gethex+0x11e>
 800e2de:	9a01      	ldr	r2, [sp, #4]
 800e2e0:	9903      	ldr	r1, [sp, #12]
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f001 fa1c 	bl	800f720 <strncmp>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d166      	bne.n	800e3ba <__gethex+0x124>
 800e2ec:	9b01      	ldr	r3, [sp, #4]
 800e2ee:	5cf8      	ldrb	r0, [r7, r3]
 800e2f0:	18fe      	adds	r6, r7, r3
 800e2f2:	f7ff ffbb 	bl	800e26c <__hexdig_fun>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d062      	beq.n	800e3c0 <__gethex+0x12a>
 800e2fa:	4633      	mov	r3, r6
 800e2fc:	7818      	ldrb	r0, [r3, #0]
 800e2fe:	2830      	cmp	r0, #48	; 0x30
 800e300:	461f      	mov	r7, r3
 800e302:	f103 0301 	add.w	r3, r3, #1
 800e306:	d0f9      	beq.n	800e2fc <__gethex+0x66>
 800e308:	f7ff ffb0 	bl	800e26c <__hexdig_fun>
 800e30c:	fab0 f580 	clz	r5, r0
 800e310:	096d      	lsrs	r5, r5, #5
 800e312:	4634      	mov	r4, r6
 800e314:	f04f 0b01 	mov.w	fp, #1
 800e318:	463a      	mov	r2, r7
 800e31a:	4616      	mov	r6, r2
 800e31c:	3201      	adds	r2, #1
 800e31e:	7830      	ldrb	r0, [r6, #0]
 800e320:	f7ff ffa4 	bl	800e26c <__hexdig_fun>
 800e324:	2800      	cmp	r0, #0
 800e326:	d1f8      	bne.n	800e31a <__gethex+0x84>
 800e328:	9a01      	ldr	r2, [sp, #4]
 800e32a:	9903      	ldr	r1, [sp, #12]
 800e32c:	4630      	mov	r0, r6
 800e32e:	f001 f9f7 	bl	800f720 <strncmp>
 800e332:	b950      	cbnz	r0, 800e34a <__gethex+0xb4>
 800e334:	b954      	cbnz	r4, 800e34c <__gethex+0xb6>
 800e336:	9b01      	ldr	r3, [sp, #4]
 800e338:	18f4      	adds	r4, r6, r3
 800e33a:	4622      	mov	r2, r4
 800e33c:	4616      	mov	r6, r2
 800e33e:	3201      	adds	r2, #1
 800e340:	7830      	ldrb	r0, [r6, #0]
 800e342:	f7ff ff93 	bl	800e26c <__hexdig_fun>
 800e346:	2800      	cmp	r0, #0
 800e348:	d1f8      	bne.n	800e33c <__gethex+0xa6>
 800e34a:	b10c      	cbz	r4, 800e350 <__gethex+0xba>
 800e34c:	1ba4      	subs	r4, r4, r6
 800e34e:	00a4      	lsls	r4, r4, #2
 800e350:	7833      	ldrb	r3, [r6, #0]
 800e352:	2b50      	cmp	r3, #80	; 0x50
 800e354:	d001      	beq.n	800e35a <__gethex+0xc4>
 800e356:	2b70      	cmp	r3, #112	; 0x70
 800e358:	d140      	bne.n	800e3dc <__gethex+0x146>
 800e35a:	7873      	ldrb	r3, [r6, #1]
 800e35c:	2b2b      	cmp	r3, #43	; 0x2b
 800e35e:	d031      	beq.n	800e3c4 <__gethex+0x12e>
 800e360:	2b2d      	cmp	r3, #45	; 0x2d
 800e362:	d033      	beq.n	800e3cc <__gethex+0x136>
 800e364:	1c71      	adds	r1, r6, #1
 800e366:	f04f 0900 	mov.w	r9, #0
 800e36a:	7808      	ldrb	r0, [r1, #0]
 800e36c:	f7ff ff7e 	bl	800e26c <__hexdig_fun>
 800e370:	1e43      	subs	r3, r0, #1
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b18      	cmp	r3, #24
 800e376:	d831      	bhi.n	800e3dc <__gethex+0x146>
 800e378:	f1a0 0210 	sub.w	r2, r0, #16
 800e37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e380:	f7ff ff74 	bl	800e26c <__hexdig_fun>
 800e384:	1e43      	subs	r3, r0, #1
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b18      	cmp	r3, #24
 800e38a:	d922      	bls.n	800e3d2 <__gethex+0x13c>
 800e38c:	f1b9 0f00 	cmp.w	r9, #0
 800e390:	d000      	beq.n	800e394 <__gethex+0xfe>
 800e392:	4252      	negs	r2, r2
 800e394:	4414      	add	r4, r2
 800e396:	f8ca 1000 	str.w	r1, [sl]
 800e39a:	b30d      	cbz	r5, 800e3e0 <__gethex+0x14a>
 800e39c:	f1bb 0f00 	cmp.w	fp, #0
 800e3a0:	bf0c      	ite	eq
 800e3a2:	2706      	moveq	r7, #6
 800e3a4:	2700      	movne	r7, #0
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	b00b      	add	sp, #44	; 0x2c
 800e3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ae:	f10b 0b01 	add.w	fp, fp, #1
 800e3b2:	e78a      	b.n	800e2ca <__gethex+0x34>
 800e3b4:	2500      	movs	r5, #0
 800e3b6:	462c      	mov	r4, r5
 800e3b8:	e7ae      	b.n	800e318 <__gethex+0x82>
 800e3ba:	463e      	mov	r6, r7
 800e3bc:	2501      	movs	r5, #1
 800e3be:	e7c7      	b.n	800e350 <__gethex+0xba>
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	e7fb      	b.n	800e3bc <__gethex+0x126>
 800e3c4:	f04f 0900 	mov.w	r9, #0
 800e3c8:	1cb1      	adds	r1, r6, #2
 800e3ca:	e7ce      	b.n	800e36a <__gethex+0xd4>
 800e3cc:	f04f 0901 	mov.w	r9, #1
 800e3d0:	e7fa      	b.n	800e3c8 <__gethex+0x132>
 800e3d2:	230a      	movs	r3, #10
 800e3d4:	fb03 0202 	mla	r2, r3, r2, r0
 800e3d8:	3a10      	subs	r2, #16
 800e3da:	e7cf      	b.n	800e37c <__gethex+0xe6>
 800e3dc:	4631      	mov	r1, r6
 800e3de:	e7da      	b.n	800e396 <__gethex+0x100>
 800e3e0:	1bf3      	subs	r3, r6, r7
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	2b07      	cmp	r3, #7
 800e3e8:	dc49      	bgt.n	800e47e <__gethex+0x1e8>
 800e3ea:	9802      	ldr	r0, [sp, #8]
 800e3ec:	f000 fa41 	bl	800e872 <_Balloc>
 800e3f0:	9b01      	ldr	r3, [sp, #4]
 800e3f2:	f100 0914 	add.w	r9, r0, #20
 800e3f6:	f04f 0b00 	mov.w	fp, #0
 800e3fa:	f1c3 0301 	rsb	r3, r3, #1
 800e3fe:	4605      	mov	r5, r0
 800e400:	f8cd 9010 	str.w	r9, [sp, #16]
 800e404:	46da      	mov	sl, fp
 800e406:	9308      	str	r3, [sp, #32]
 800e408:	42b7      	cmp	r7, r6
 800e40a:	d33b      	bcc.n	800e484 <__gethex+0x1ee>
 800e40c:	9804      	ldr	r0, [sp, #16]
 800e40e:	f840 ab04 	str.w	sl, [r0], #4
 800e412:	eba0 0009 	sub.w	r0, r0, r9
 800e416:	1080      	asrs	r0, r0, #2
 800e418:	6128      	str	r0, [r5, #16]
 800e41a:	0147      	lsls	r7, r0, #5
 800e41c:	4650      	mov	r0, sl
 800e41e:	f000 faec 	bl	800e9fa <__hi0bits>
 800e422:	f8d8 6000 	ldr.w	r6, [r8]
 800e426:	1a3f      	subs	r7, r7, r0
 800e428:	42b7      	cmp	r7, r6
 800e42a:	dd64      	ble.n	800e4f6 <__gethex+0x260>
 800e42c:	1bbf      	subs	r7, r7, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	4628      	mov	r0, r5
 800e432:	f000 fdfb 	bl	800f02c <__any_on>
 800e436:	4682      	mov	sl, r0
 800e438:	b178      	cbz	r0, 800e45a <__gethex+0x1c4>
 800e43a:	1e7b      	subs	r3, r7, #1
 800e43c:	1159      	asrs	r1, r3, #5
 800e43e:	f003 021f 	and.w	r2, r3, #31
 800e442:	f04f 0a01 	mov.w	sl, #1
 800e446:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e44a:	fa0a f202 	lsl.w	r2, sl, r2
 800e44e:	420a      	tst	r2, r1
 800e450:	d003      	beq.n	800e45a <__gethex+0x1c4>
 800e452:	4553      	cmp	r3, sl
 800e454:	dc46      	bgt.n	800e4e4 <__gethex+0x24e>
 800e456:	f04f 0a02 	mov.w	sl, #2
 800e45a:	4639      	mov	r1, r7
 800e45c:	4628      	mov	r0, r5
 800e45e:	f7ff fecb 	bl	800e1f8 <rshift>
 800e462:	443c      	add	r4, r7
 800e464:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e468:	42a3      	cmp	r3, r4
 800e46a:	da52      	bge.n	800e512 <__gethex+0x27c>
 800e46c:	4629      	mov	r1, r5
 800e46e:	9802      	ldr	r0, [sp, #8]
 800e470:	f000 fa33 	bl	800e8da <_Bfree>
 800e474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e476:	2300      	movs	r3, #0
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	27a3      	movs	r7, #163	; 0xa3
 800e47c:	e793      	b.n	800e3a6 <__gethex+0x110>
 800e47e:	3101      	adds	r1, #1
 800e480:	105b      	asrs	r3, r3, #1
 800e482:	e7b0      	b.n	800e3e6 <__gethex+0x150>
 800e484:	1e73      	subs	r3, r6, #1
 800e486:	9305      	str	r3, [sp, #20]
 800e488:	9a07      	ldr	r2, [sp, #28]
 800e48a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e48e:	4293      	cmp	r3, r2
 800e490:	d018      	beq.n	800e4c4 <__gethex+0x22e>
 800e492:	f1bb 0f20 	cmp.w	fp, #32
 800e496:	d107      	bne.n	800e4a8 <__gethex+0x212>
 800e498:	9b04      	ldr	r3, [sp, #16]
 800e49a:	f8c3 a000 	str.w	sl, [r3]
 800e49e:	3304      	adds	r3, #4
 800e4a0:	f04f 0a00 	mov.w	sl, #0
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	46d3      	mov	fp, sl
 800e4a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e4ac:	f7ff fede 	bl	800e26c <__hexdig_fun>
 800e4b0:	f000 000f 	and.w	r0, r0, #15
 800e4b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800e4b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800e4bc:	f10b 0b04 	add.w	fp, fp, #4
 800e4c0:	9b05      	ldr	r3, [sp, #20]
 800e4c2:	e00d      	b.n	800e4e0 <__gethex+0x24a>
 800e4c4:	9b05      	ldr	r3, [sp, #20]
 800e4c6:	9a08      	ldr	r2, [sp, #32]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	42bb      	cmp	r3, r7
 800e4cc:	d3e1      	bcc.n	800e492 <__gethex+0x1fc>
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	9a01      	ldr	r2, [sp, #4]
 800e4d2:	9903      	ldr	r1, [sp, #12]
 800e4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4d6:	f001 f923 	bl	800f720 <strncmp>
 800e4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d1d8      	bne.n	800e492 <__gethex+0x1fc>
 800e4e0:	461e      	mov	r6, r3
 800e4e2:	e791      	b.n	800e408 <__gethex+0x172>
 800e4e4:	1eb9      	subs	r1, r7, #2
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f000 fda0 	bl	800f02c <__any_on>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d0b2      	beq.n	800e456 <__gethex+0x1c0>
 800e4f0:	f04f 0a03 	mov.w	sl, #3
 800e4f4:	e7b1      	b.n	800e45a <__gethex+0x1c4>
 800e4f6:	da09      	bge.n	800e50c <__gethex+0x276>
 800e4f8:	1bf7      	subs	r7, r6, r7
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	463a      	mov	r2, r7
 800e4fe:	9802      	ldr	r0, [sp, #8]
 800e500:	f000 fbb6 	bl	800ec70 <__lshift>
 800e504:	1be4      	subs	r4, r4, r7
 800e506:	4605      	mov	r5, r0
 800e508:	f100 0914 	add.w	r9, r0, #20
 800e50c:	f04f 0a00 	mov.w	sl, #0
 800e510:	e7a8      	b.n	800e464 <__gethex+0x1ce>
 800e512:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e516:	42a0      	cmp	r0, r4
 800e518:	dd6a      	ble.n	800e5f0 <__gethex+0x35a>
 800e51a:	1b04      	subs	r4, r0, r4
 800e51c:	42a6      	cmp	r6, r4
 800e51e:	dc2e      	bgt.n	800e57e <__gethex+0x2e8>
 800e520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e524:	2b02      	cmp	r3, #2
 800e526:	d022      	beq.n	800e56e <__gethex+0x2d8>
 800e528:	2b03      	cmp	r3, #3
 800e52a:	d024      	beq.n	800e576 <__gethex+0x2e0>
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d115      	bne.n	800e55c <__gethex+0x2c6>
 800e530:	42a6      	cmp	r6, r4
 800e532:	d113      	bne.n	800e55c <__gethex+0x2c6>
 800e534:	2e01      	cmp	r6, #1
 800e536:	dc0b      	bgt.n	800e550 <__gethex+0x2ba>
 800e538:	9a06      	ldr	r2, [sp, #24]
 800e53a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	2301      	movs	r3, #1
 800e542:	612b      	str	r3, [r5, #16]
 800e544:	f8c9 3000 	str.w	r3, [r9]
 800e548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e54a:	2762      	movs	r7, #98	; 0x62
 800e54c:	601d      	str	r5, [r3, #0]
 800e54e:	e72a      	b.n	800e3a6 <__gethex+0x110>
 800e550:	1e71      	subs	r1, r6, #1
 800e552:	4628      	mov	r0, r5
 800e554:	f000 fd6a 	bl	800f02c <__any_on>
 800e558:	2800      	cmp	r0, #0
 800e55a:	d1ed      	bne.n	800e538 <__gethex+0x2a2>
 800e55c:	4629      	mov	r1, r5
 800e55e:	9802      	ldr	r0, [sp, #8]
 800e560:	f000 f9bb 	bl	800e8da <_Bfree>
 800e564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e566:	2300      	movs	r3, #0
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	2750      	movs	r7, #80	; 0x50
 800e56c:	e71b      	b.n	800e3a6 <__gethex+0x110>
 800e56e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e570:	2b00      	cmp	r3, #0
 800e572:	d0e1      	beq.n	800e538 <__gethex+0x2a2>
 800e574:	e7f2      	b.n	800e55c <__gethex+0x2c6>
 800e576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1dd      	bne.n	800e538 <__gethex+0x2a2>
 800e57c:	e7ee      	b.n	800e55c <__gethex+0x2c6>
 800e57e:	1e67      	subs	r7, r4, #1
 800e580:	f1ba 0f00 	cmp.w	sl, #0
 800e584:	d131      	bne.n	800e5ea <__gethex+0x354>
 800e586:	b127      	cbz	r7, 800e592 <__gethex+0x2fc>
 800e588:	4639      	mov	r1, r7
 800e58a:	4628      	mov	r0, r5
 800e58c:	f000 fd4e 	bl	800f02c <__any_on>
 800e590:	4682      	mov	sl, r0
 800e592:	117a      	asrs	r2, r7, #5
 800e594:	2301      	movs	r3, #1
 800e596:	f007 071f 	and.w	r7, r7, #31
 800e59a:	fa03 f707 	lsl.w	r7, r3, r7
 800e59e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	421f      	tst	r7, r3
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	bf18      	it	ne
 800e5aa:	f04a 0a02 	orrne.w	sl, sl, #2
 800e5ae:	1b36      	subs	r6, r6, r4
 800e5b0:	f7ff fe22 	bl	800e1f8 <rshift>
 800e5b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e5b8:	2702      	movs	r7, #2
 800e5ba:	f1ba 0f00 	cmp.w	sl, #0
 800e5be:	d048      	beq.n	800e652 <__gethex+0x3bc>
 800e5c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d015      	beq.n	800e5f4 <__gethex+0x35e>
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d017      	beq.n	800e5fc <__gethex+0x366>
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d109      	bne.n	800e5e4 <__gethex+0x34e>
 800e5d0:	f01a 0f02 	tst.w	sl, #2
 800e5d4:	d006      	beq.n	800e5e4 <__gethex+0x34e>
 800e5d6:	f8d9 3000 	ldr.w	r3, [r9]
 800e5da:	ea4a 0a03 	orr.w	sl, sl, r3
 800e5de:	f01a 0f01 	tst.w	sl, #1
 800e5e2:	d10e      	bne.n	800e602 <__gethex+0x36c>
 800e5e4:	f047 0710 	orr.w	r7, r7, #16
 800e5e8:	e033      	b.n	800e652 <__gethex+0x3bc>
 800e5ea:	f04f 0a01 	mov.w	sl, #1
 800e5ee:	e7d0      	b.n	800e592 <__gethex+0x2fc>
 800e5f0:	2701      	movs	r7, #1
 800e5f2:	e7e2      	b.n	800e5ba <__gethex+0x324>
 800e5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5f6:	f1c3 0301 	rsb	r3, r3, #1
 800e5fa:	9315      	str	r3, [sp, #84]	; 0x54
 800e5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0f0      	beq.n	800e5e4 <__gethex+0x34e>
 800e602:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e606:	f105 0314 	add.w	r3, r5, #20
 800e60a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e60e:	eb03 010a 	add.w	r1, r3, sl
 800e612:	f04f 0c00 	mov.w	ip, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e620:	d01c      	beq.n	800e65c <__gethex+0x3c6>
 800e622:	3201      	adds	r2, #1
 800e624:	6002      	str	r2, [r0, #0]
 800e626:	2f02      	cmp	r7, #2
 800e628:	f105 0314 	add.w	r3, r5, #20
 800e62c:	d138      	bne.n	800e6a0 <__gethex+0x40a>
 800e62e:	f8d8 2000 	ldr.w	r2, [r8]
 800e632:	3a01      	subs	r2, #1
 800e634:	42b2      	cmp	r2, r6
 800e636:	d10a      	bne.n	800e64e <__gethex+0x3b8>
 800e638:	1171      	asrs	r1, r6, #5
 800e63a:	2201      	movs	r2, #1
 800e63c:	f006 061f 	and.w	r6, r6, #31
 800e640:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e644:	fa02 f606 	lsl.w	r6, r2, r6
 800e648:	421e      	tst	r6, r3
 800e64a:	bf18      	it	ne
 800e64c:	4617      	movne	r7, r2
 800e64e:	f047 0720 	orr.w	r7, r7, #32
 800e652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e654:	601d      	str	r5, [r3, #0]
 800e656:	9b06      	ldr	r3, [sp, #24]
 800e658:	601c      	str	r4, [r3, #0]
 800e65a:	e6a4      	b.n	800e3a6 <__gethex+0x110>
 800e65c:	4299      	cmp	r1, r3
 800e65e:	f843 cc04 	str.w	ip, [r3, #-4]
 800e662:	d8d8      	bhi.n	800e616 <__gethex+0x380>
 800e664:	68ab      	ldr	r3, [r5, #8]
 800e666:	4599      	cmp	r9, r3
 800e668:	db12      	blt.n	800e690 <__gethex+0x3fa>
 800e66a:	6869      	ldr	r1, [r5, #4]
 800e66c:	9802      	ldr	r0, [sp, #8]
 800e66e:	3101      	adds	r1, #1
 800e670:	f000 f8ff 	bl	800e872 <_Balloc>
 800e674:	692a      	ldr	r2, [r5, #16]
 800e676:	3202      	adds	r2, #2
 800e678:	f105 010c 	add.w	r1, r5, #12
 800e67c:	4683      	mov	fp, r0
 800e67e:	0092      	lsls	r2, r2, #2
 800e680:	300c      	adds	r0, #12
 800e682:	f7fe fe3f 	bl	800d304 <memcpy>
 800e686:	4629      	mov	r1, r5
 800e688:	9802      	ldr	r0, [sp, #8]
 800e68a:	f000 f926 	bl	800e8da <_Bfree>
 800e68e:	465d      	mov	r5, fp
 800e690:	692b      	ldr	r3, [r5, #16]
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e698:	612a      	str	r2, [r5, #16]
 800e69a:	2201      	movs	r2, #1
 800e69c:	615a      	str	r2, [r3, #20]
 800e69e:	e7c2      	b.n	800e626 <__gethex+0x390>
 800e6a0:	692a      	ldr	r2, [r5, #16]
 800e6a2:	454a      	cmp	r2, r9
 800e6a4:	dd0b      	ble.n	800e6be <__gethex+0x428>
 800e6a6:	2101      	movs	r1, #1
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	f7ff fda5 	bl	800e1f8 <rshift>
 800e6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6b2:	3401      	adds	r4, #1
 800e6b4:	42a3      	cmp	r3, r4
 800e6b6:	f6ff aed9 	blt.w	800e46c <__gethex+0x1d6>
 800e6ba:	2701      	movs	r7, #1
 800e6bc:	e7c7      	b.n	800e64e <__gethex+0x3b8>
 800e6be:	f016 061f 	ands.w	r6, r6, #31
 800e6c2:	d0fa      	beq.n	800e6ba <__gethex+0x424>
 800e6c4:	449a      	add	sl, r3
 800e6c6:	f1c6 0620 	rsb	r6, r6, #32
 800e6ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e6ce:	f000 f994 	bl	800e9fa <__hi0bits>
 800e6d2:	42b0      	cmp	r0, r6
 800e6d4:	dbe7      	blt.n	800e6a6 <__gethex+0x410>
 800e6d6:	e7f0      	b.n	800e6ba <__gethex+0x424>

0800e6d8 <L_shift>:
 800e6d8:	f1c2 0208 	rsb	r2, r2, #8
 800e6dc:	0092      	lsls	r2, r2, #2
 800e6de:	b570      	push	{r4, r5, r6, lr}
 800e6e0:	f1c2 0620 	rsb	r6, r2, #32
 800e6e4:	6843      	ldr	r3, [r0, #4]
 800e6e6:	6804      	ldr	r4, [r0, #0]
 800e6e8:	fa03 f506 	lsl.w	r5, r3, r6
 800e6ec:	432c      	orrs	r4, r5
 800e6ee:	40d3      	lsrs	r3, r2
 800e6f0:	6004      	str	r4, [r0, #0]
 800e6f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6f6:	4288      	cmp	r0, r1
 800e6f8:	d3f4      	bcc.n	800e6e4 <L_shift+0xc>
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}

0800e6fc <__match>:
 800e6fc:	b530      	push	{r4, r5, lr}
 800e6fe:	6803      	ldr	r3, [r0, #0]
 800e700:	3301      	adds	r3, #1
 800e702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e706:	b914      	cbnz	r4, 800e70e <__match+0x12>
 800e708:	6003      	str	r3, [r0, #0]
 800e70a:	2001      	movs	r0, #1
 800e70c:	bd30      	pop	{r4, r5, pc}
 800e70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e716:	2d19      	cmp	r5, #25
 800e718:	bf98      	it	ls
 800e71a:	3220      	addls	r2, #32
 800e71c:	42a2      	cmp	r2, r4
 800e71e:	d0f0      	beq.n	800e702 <__match+0x6>
 800e720:	2000      	movs	r0, #0
 800e722:	e7f3      	b.n	800e70c <__match+0x10>

0800e724 <__hexnan>:
 800e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e728:	680b      	ldr	r3, [r1, #0]
 800e72a:	6801      	ldr	r1, [r0, #0]
 800e72c:	115f      	asrs	r7, r3, #5
 800e72e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e732:	f013 031f 	ands.w	r3, r3, #31
 800e736:	b087      	sub	sp, #28
 800e738:	bf18      	it	ne
 800e73a:	3704      	addne	r7, #4
 800e73c:	2500      	movs	r5, #0
 800e73e:	1f3e      	subs	r6, r7, #4
 800e740:	4682      	mov	sl, r0
 800e742:	4690      	mov	r8, r2
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	f847 5c04 	str.w	r5, [r7, #-4]
 800e74a:	46b1      	mov	r9, r6
 800e74c:	4634      	mov	r4, r6
 800e74e:	9502      	str	r5, [sp, #8]
 800e750:	46ab      	mov	fp, r5
 800e752:	784a      	ldrb	r2, [r1, #1]
 800e754:	1c4b      	adds	r3, r1, #1
 800e756:	9303      	str	r3, [sp, #12]
 800e758:	b342      	cbz	r2, 800e7ac <__hexnan+0x88>
 800e75a:	4610      	mov	r0, r2
 800e75c:	9105      	str	r1, [sp, #20]
 800e75e:	9204      	str	r2, [sp, #16]
 800e760:	f7ff fd84 	bl	800e26c <__hexdig_fun>
 800e764:	2800      	cmp	r0, #0
 800e766:	d143      	bne.n	800e7f0 <__hexnan+0xcc>
 800e768:	9a04      	ldr	r2, [sp, #16]
 800e76a:	9905      	ldr	r1, [sp, #20]
 800e76c:	2a20      	cmp	r2, #32
 800e76e:	d818      	bhi.n	800e7a2 <__hexnan+0x7e>
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	459b      	cmp	fp, r3
 800e774:	dd13      	ble.n	800e79e <__hexnan+0x7a>
 800e776:	454c      	cmp	r4, r9
 800e778:	d206      	bcs.n	800e788 <__hexnan+0x64>
 800e77a:	2d07      	cmp	r5, #7
 800e77c:	dc04      	bgt.n	800e788 <__hexnan+0x64>
 800e77e:	462a      	mov	r2, r5
 800e780:	4649      	mov	r1, r9
 800e782:	4620      	mov	r0, r4
 800e784:	f7ff ffa8 	bl	800e6d8 <L_shift>
 800e788:	4544      	cmp	r4, r8
 800e78a:	d944      	bls.n	800e816 <__hexnan+0xf2>
 800e78c:	2300      	movs	r3, #0
 800e78e:	f1a4 0904 	sub.w	r9, r4, #4
 800e792:	f844 3c04 	str.w	r3, [r4, #-4]
 800e796:	f8cd b008 	str.w	fp, [sp, #8]
 800e79a:	464c      	mov	r4, r9
 800e79c:	461d      	mov	r5, r3
 800e79e:	9903      	ldr	r1, [sp, #12]
 800e7a0:	e7d7      	b.n	800e752 <__hexnan+0x2e>
 800e7a2:	2a29      	cmp	r2, #41	; 0x29
 800e7a4:	d14a      	bne.n	800e83c <__hexnan+0x118>
 800e7a6:	3102      	adds	r1, #2
 800e7a8:	f8ca 1000 	str.w	r1, [sl]
 800e7ac:	f1bb 0f00 	cmp.w	fp, #0
 800e7b0:	d044      	beq.n	800e83c <__hexnan+0x118>
 800e7b2:	454c      	cmp	r4, r9
 800e7b4:	d206      	bcs.n	800e7c4 <__hexnan+0xa0>
 800e7b6:	2d07      	cmp	r5, #7
 800e7b8:	dc04      	bgt.n	800e7c4 <__hexnan+0xa0>
 800e7ba:	462a      	mov	r2, r5
 800e7bc:	4649      	mov	r1, r9
 800e7be:	4620      	mov	r0, r4
 800e7c0:	f7ff ff8a 	bl	800e6d8 <L_shift>
 800e7c4:	4544      	cmp	r4, r8
 800e7c6:	d928      	bls.n	800e81a <__hexnan+0xf6>
 800e7c8:	4643      	mov	r3, r8
 800e7ca:	f854 2b04 	ldr.w	r2, [r4], #4
 800e7ce:	f843 2b04 	str.w	r2, [r3], #4
 800e7d2:	42a6      	cmp	r6, r4
 800e7d4:	d2f9      	bcs.n	800e7ca <__hexnan+0xa6>
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f843 2b04 	str.w	r2, [r3], #4
 800e7dc:	429e      	cmp	r6, r3
 800e7de:	d2fb      	bcs.n	800e7d8 <__hexnan+0xb4>
 800e7e0:	6833      	ldr	r3, [r6, #0]
 800e7e2:	b91b      	cbnz	r3, 800e7ec <__hexnan+0xc8>
 800e7e4:	4546      	cmp	r6, r8
 800e7e6:	d127      	bne.n	800e838 <__hexnan+0x114>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	6033      	str	r3, [r6, #0]
 800e7ec:	2005      	movs	r0, #5
 800e7ee:	e026      	b.n	800e83e <__hexnan+0x11a>
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	2d08      	cmp	r5, #8
 800e7f4:	f10b 0b01 	add.w	fp, fp, #1
 800e7f8:	dd06      	ble.n	800e808 <__hexnan+0xe4>
 800e7fa:	4544      	cmp	r4, r8
 800e7fc:	d9cf      	bls.n	800e79e <__hexnan+0x7a>
 800e7fe:	2300      	movs	r3, #0
 800e800:	f844 3c04 	str.w	r3, [r4, #-4]
 800e804:	2501      	movs	r5, #1
 800e806:	3c04      	subs	r4, #4
 800e808:	6822      	ldr	r2, [r4, #0]
 800e80a:	f000 000f 	and.w	r0, r0, #15
 800e80e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e812:	6020      	str	r0, [r4, #0]
 800e814:	e7c3      	b.n	800e79e <__hexnan+0x7a>
 800e816:	2508      	movs	r5, #8
 800e818:	e7c1      	b.n	800e79e <__hexnan+0x7a>
 800e81a:	9b01      	ldr	r3, [sp, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d0df      	beq.n	800e7e0 <__hexnan+0xbc>
 800e820:	f04f 32ff 	mov.w	r2, #4294967295
 800e824:	f1c3 0320 	rsb	r3, r3, #32
 800e828:	fa22 f303 	lsr.w	r3, r2, r3
 800e82c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e830:	401a      	ands	r2, r3
 800e832:	f847 2c04 	str.w	r2, [r7, #-4]
 800e836:	e7d3      	b.n	800e7e0 <__hexnan+0xbc>
 800e838:	3e04      	subs	r6, #4
 800e83a:	e7d1      	b.n	800e7e0 <__hexnan+0xbc>
 800e83c:	2004      	movs	r0, #4
 800e83e:	b007      	add	sp, #28
 800e840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e844 <__locale_ctype_ptr_l>:
 800e844:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e848:	4770      	bx	lr

0800e84a <__localeconv_l>:
 800e84a:	30f0      	adds	r0, #240	; 0xf0
 800e84c:	4770      	bx	lr

0800e84e <__ascii_mbtowc>:
 800e84e:	b082      	sub	sp, #8
 800e850:	b901      	cbnz	r1, 800e854 <__ascii_mbtowc+0x6>
 800e852:	a901      	add	r1, sp, #4
 800e854:	b142      	cbz	r2, 800e868 <__ascii_mbtowc+0x1a>
 800e856:	b14b      	cbz	r3, 800e86c <__ascii_mbtowc+0x1e>
 800e858:	7813      	ldrb	r3, [r2, #0]
 800e85a:	600b      	str	r3, [r1, #0]
 800e85c:	7812      	ldrb	r2, [r2, #0]
 800e85e:	1c10      	adds	r0, r2, #0
 800e860:	bf18      	it	ne
 800e862:	2001      	movne	r0, #1
 800e864:	b002      	add	sp, #8
 800e866:	4770      	bx	lr
 800e868:	4610      	mov	r0, r2
 800e86a:	e7fb      	b.n	800e864 <__ascii_mbtowc+0x16>
 800e86c:	f06f 0001 	mvn.w	r0, #1
 800e870:	e7f8      	b.n	800e864 <__ascii_mbtowc+0x16>

0800e872 <_Balloc>:
 800e872:	b570      	push	{r4, r5, r6, lr}
 800e874:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e876:	4604      	mov	r4, r0
 800e878:	460e      	mov	r6, r1
 800e87a:	b93d      	cbnz	r5, 800e88c <_Balloc+0x1a>
 800e87c:	2010      	movs	r0, #16
 800e87e:	f000 ff6f 	bl	800f760 <malloc>
 800e882:	6260      	str	r0, [r4, #36]	; 0x24
 800e884:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e888:	6005      	str	r5, [r0, #0]
 800e88a:	60c5      	str	r5, [r0, #12]
 800e88c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e88e:	68eb      	ldr	r3, [r5, #12]
 800e890:	b183      	cbz	r3, 800e8b4 <_Balloc+0x42>
 800e892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e894:	68db      	ldr	r3, [r3, #12]
 800e896:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e89a:	b9b8      	cbnz	r0, 800e8cc <_Balloc+0x5a>
 800e89c:	2101      	movs	r1, #1
 800e89e:	fa01 f506 	lsl.w	r5, r1, r6
 800e8a2:	1d6a      	adds	r2, r5, #5
 800e8a4:	0092      	lsls	r2, r2, #2
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 fbe1 	bl	800f06e <_calloc_r>
 800e8ac:	b160      	cbz	r0, 800e8c8 <_Balloc+0x56>
 800e8ae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e8b2:	e00e      	b.n	800e8d2 <_Balloc+0x60>
 800e8b4:	2221      	movs	r2, #33	; 0x21
 800e8b6:	2104      	movs	r1, #4
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 fbd8 	bl	800f06e <_calloc_r>
 800e8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c0:	60e8      	str	r0, [r5, #12]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e4      	bne.n	800e892 <_Balloc+0x20>
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	6802      	ldr	r2, [r0, #0]
 800e8ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8d8:	e7f7      	b.n	800e8ca <_Balloc+0x58>

0800e8da <_Bfree>:
 800e8da:	b570      	push	{r4, r5, r6, lr}
 800e8dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e8de:	4606      	mov	r6, r0
 800e8e0:	460d      	mov	r5, r1
 800e8e2:	b93c      	cbnz	r4, 800e8f4 <_Bfree+0x1a>
 800e8e4:	2010      	movs	r0, #16
 800e8e6:	f000 ff3b 	bl	800f760 <malloc>
 800e8ea:	6270      	str	r0, [r6, #36]	; 0x24
 800e8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8f0:	6004      	str	r4, [r0, #0]
 800e8f2:	60c4      	str	r4, [r0, #12]
 800e8f4:	b13d      	cbz	r5, 800e906 <_Bfree+0x2c>
 800e8f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e8f8:	686a      	ldr	r2, [r5, #4]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e900:	6029      	str	r1, [r5, #0]
 800e902:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e906:	bd70      	pop	{r4, r5, r6, pc}

0800e908 <__multadd>:
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	690d      	ldr	r5, [r1, #16]
 800e90e:	461f      	mov	r7, r3
 800e910:	4606      	mov	r6, r0
 800e912:	460c      	mov	r4, r1
 800e914:	f101 0c14 	add.w	ip, r1, #20
 800e918:	2300      	movs	r3, #0
 800e91a:	f8dc 0000 	ldr.w	r0, [ip]
 800e91e:	b281      	uxth	r1, r0
 800e920:	fb02 7101 	mla	r1, r2, r1, r7
 800e924:	0c0f      	lsrs	r7, r1, #16
 800e926:	0c00      	lsrs	r0, r0, #16
 800e928:	fb02 7000 	mla	r0, r2, r0, r7
 800e92c:	b289      	uxth	r1, r1
 800e92e:	3301      	adds	r3, #1
 800e930:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e934:	429d      	cmp	r5, r3
 800e936:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e93a:	f84c 1b04 	str.w	r1, [ip], #4
 800e93e:	dcec      	bgt.n	800e91a <__multadd+0x12>
 800e940:	b1d7      	cbz	r7, 800e978 <__multadd+0x70>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	42ab      	cmp	r3, r5
 800e946:	dc12      	bgt.n	800e96e <__multadd+0x66>
 800e948:	6861      	ldr	r1, [r4, #4]
 800e94a:	4630      	mov	r0, r6
 800e94c:	3101      	adds	r1, #1
 800e94e:	f7ff ff90 	bl	800e872 <_Balloc>
 800e952:	6922      	ldr	r2, [r4, #16]
 800e954:	3202      	adds	r2, #2
 800e956:	f104 010c 	add.w	r1, r4, #12
 800e95a:	4680      	mov	r8, r0
 800e95c:	0092      	lsls	r2, r2, #2
 800e95e:	300c      	adds	r0, #12
 800e960:	f7fe fcd0 	bl	800d304 <memcpy>
 800e964:	4621      	mov	r1, r4
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ffb7 	bl	800e8da <_Bfree>
 800e96c:	4644      	mov	r4, r8
 800e96e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e972:	3501      	adds	r5, #1
 800e974:	615f      	str	r7, [r3, #20]
 800e976:	6125      	str	r5, [r4, #16]
 800e978:	4620      	mov	r0, r4
 800e97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e97e <__s2b>:
 800e97e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e982:	460c      	mov	r4, r1
 800e984:	4615      	mov	r5, r2
 800e986:	461f      	mov	r7, r3
 800e988:	2209      	movs	r2, #9
 800e98a:	3308      	adds	r3, #8
 800e98c:	4606      	mov	r6, r0
 800e98e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e992:	2100      	movs	r1, #0
 800e994:	2201      	movs	r2, #1
 800e996:	429a      	cmp	r2, r3
 800e998:	db20      	blt.n	800e9dc <__s2b+0x5e>
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7ff ff69 	bl	800e872 <_Balloc>
 800e9a0:	9b08      	ldr	r3, [sp, #32]
 800e9a2:	6143      	str	r3, [r0, #20]
 800e9a4:	2d09      	cmp	r5, #9
 800e9a6:	f04f 0301 	mov.w	r3, #1
 800e9aa:	6103      	str	r3, [r0, #16]
 800e9ac:	dd19      	ble.n	800e9e2 <__s2b+0x64>
 800e9ae:	f104 0809 	add.w	r8, r4, #9
 800e9b2:	46c1      	mov	r9, r8
 800e9b4:	442c      	add	r4, r5
 800e9b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e9ba:	4601      	mov	r1, r0
 800e9bc:	3b30      	subs	r3, #48	; 0x30
 800e9be:	220a      	movs	r2, #10
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f7ff ffa1 	bl	800e908 <__multadd>
 800e9c6:	45a1      	cmp	r9, r4
 800e9c8:	d1f5      	bne.n	800e9b6 <__s2b+0x38>
 800e9ca:	eb08 0405 	add.w	r4, r8, r5
 800e9ce:	3c08      	subs	r4, #8
 800e9d0:	1b2d      	subs	r5, r5, r4
 800e9d2:	1963      	adds	r3, r4, r5
 800e9d4:	42bb      	cmp	r3, r7
 800e9d6:	db07      	blt.n	800e9e8 <__s2b+0x6a>
 800e9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9dc:	0052      	lsls	r2, r2, #1
 800e9de:	3101      	adds	r1, #1
 800e9e0:	e7d9      	b.n	800e996 <__s2b+0x18>
 800e9e2:	340a      	adds	r4, #10
 800e9e4:	2509      	movs	r5, #9
 800e9e6:	e7f3      	b.n	800e9d0 <__s2b+0x52>
 800e9e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9ec:	4601      	mov	r1, r0
 800e9ee:	3b30      	subs	r3, #48	; 0x30
 800e9f0:	220a      	movs	r2, #10
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f7ff ff88 	bl	800e908 <__multadd>
 800e9f8:	e7eb      	b.n	800e9d2 <__s2b+0x54>

0800e9fa <__hi0bits>:
 800e9fa:	0c02      	lsrs	r2, r0, #16
 800e9fc:	0412      	lsls	r2, r2, #16
 800e9fe:	4603      	mov	r3, r0
 800ea00:	b9b2      	cbnz	r2, 800ea30 <__hi0bits+0x36>
 800ea02:	0403      	lsls	r3, r0, #16
 800ea04:	2010      	movs	r0, #16
 800ea06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ea0a:	bf04      	itt	eq
 800ea0c:	021b      	lsleq	r3, r3, #8
 800ea0e:	3008      	addeq	r0, #8
 800ea10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ea14:	bf04      	itt	eq
 800ea16:	011b      	lsleq	r3, r3, #4
 800ea18:	3004      	addeq	r0, #4
 800ea1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ea1e:	bf04      	itt	eq
 800ea20:	009b      	lsleq	r3, r3, #2
 800ea22:	3002      	addeq	r0, #2
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	db06      	blt.n	800ea36 <__hi0bits+0x3c>
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	d503      	bpl.n	800ea34 <__hi0bits+0x3a>
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	4770      	bx	lr
 800ea30:	2000      	movs	r0, #0
 800ea32:	e7e8      	b.n	800ea06 <__hi0bits+0xc>
 800ea34:	2020      	movs	r0, #32
 800ea36:	4770      	bx	lr

0800ea38 <__lo0bits>:
 800ea38:	6803      	ldr	r3, [r0, #0]
 800ea3a:	f013 0207 	ands.w	r2, r3, #7
 800ea3e:	4601      	mov	r1, r0
 800ea40:	d00b      	beq.n	800ea5a <__lo0bits+0x22>
 800ea42:	07da      	lsls	r2, r3, #31
 800ea44:	d423      	bmi.n	800ea8e <__lo0bits+0x56>
 800ea46:	0798      	lsls	r0, r3, #30
 800ea48:	bf49      	itett	mi
 800ea4a:	085b      	lsrmi	r3, r3, #1
 800ea4c:	089b      	lsrpl	r3, r3, #2
 800ea4e:	2001      	movmi	r0, #1
 800ea50:	600b      	strmi	r3, [r1, #0]
 800ea52:	bf5c      	itt	pl
 800ea54:	600b      	strpl	r3, [r1, #0]
 800ea56:	2002      	movpl	r0, #2
 800ea58:	4770      	bx	lr
 800ea5a:	b298      	uxth	r0, r3
 800ea5c:	b9a8      	cbnz	r0, 800ea8a <__lo0bits+0x52>
 800ea5e:	0c1b      	lsrs	r3, r3, #16
 800ea60:	2010      	movs	r0, #16
 800ea62:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ea66:	bf04      	itt	eq
 800ea68:	0a1b      	lsreq	r3, r3, #8
 800ea6a:	3008      	addeq	r0, #8
 800ea6c:	071a      	lsls	r2, r3, #28
 800ea6e:	bf04      	itt	eq
 800ea70:	091b      	lsreq	r3, r3, #4
 800ea72:	3004      	addeq	r0, #4
 800ea74:	079a      	lsls	r2, r3, #30
 800ea76:	bf04      	itt	eq
 800ea78:	089b      	lsreq	r3, r3, #2
 800ea7a:	3002      	addeq	r0, #2
 800ea7c:	07da      	lsls	r2, r3, #31
 800ea7e:	d402      	bmi.n	800ea86 <__lo0bits+0x4e>
 800ea80:	085b      	lsrs	r3, r3, #1
 800ea82:	d006      	beq.n	800ea92 <__lo0bits+0x5a>
 800ea84:	3001      	adds	r0, #1
 800ea86:	600b      	str	r3, [r1, #0]
 800ea88:	4770      	bx	lr
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	e7e9      	b.n	800ea62 <__lo0bits+0x2a>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	4770      	bx	lr
 800ea92:	2020      	movs	r0, #32
 800ea94:	4770      	bx	lr

0800ea96 <__i2b>:
 800ea96:	b510      	push	{r4, lr}
 800ea98:	460c      	mov	r4, r1
 800ea9a:	2101      	movs	r1, #1
 800ea9c:	f7ff fee9 	bl	800e872 <_Balloc>
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	6144      	str	r4, [r0, #20]
 800eaa4:	6102      	str	r2, [r0, #16]
 800eaa6:	bd10      	pop	{r4, pc}

0800eaa8 <__multiply>:
 800eaa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaac:	4614      	mov	r4, r2
 800eaae:	690a      	ldr	r2, [r1, #16]
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	bfb8      	it	lt
 800eab6:	460b      	movlt	r3, r1
 800eab8:	4688      	mov	r8, r1
 800eaba:	bfbc      	itt	lt
 800eabc:	46a0      	movlt	r8, r4
 800eabe:	461c      	movlt	r4, r3
 800eac0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eac8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eacc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ead0:	eb07 0609 	add.w	r6, r7, r9
 800ead4:	42b3      	cmp	r3, r6
 800ead6:	bfb8      	it	lt
 800ead8:	3101      	addlt	r1, #1
 800eada:	f7ff feca 	bl	800e872 <_Balloc>
 800eade:	f100 0514 	add.w	r5, r0, #20
 800eae2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800eae6:	462b      	mov	r3, r5
 800eae8:	2200      	movs	r2, #0
 800eaea:	4573      	cmp	r3, lr
 800eaec:	d316      	bcc.n	800eb1c <__multiply+0x74>
 800eaee:	f104 0214 	add.w	r2, r4, #20
 800eaf2:	f108 0114 	add.w	r1, r8, #20
 800eaf6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800eafa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	9b00      	ldr	r3, [sp, #0]
 800eb02:	9201      	str	r2, [sp, #4]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d80c      	bhi.n	800eb22 <__multiply+0x7a>
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	dd03      	ble.n	800eb14 <__multiply+0x6c>
 800eb0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d05d      	beq.n	800ebd0 <__multiply+0x128>
 800eb14:	6106      	str	r6, [r0, #16]
 800eb16:	b003      	add	sp, #12
 800eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1c:	f843 2b04 	str.w	r2, [r3], #4
 800eb20:	e7e3      	b.n	800eaea <__multiply+0x42>
 800eb22:	f8b2 b000 	ldrh.w	fp, [r2]
 800eb26:	f1bb 0f00 	cmp.w	fp, #0
 800eb2a:	d023      	beq.n	800eb74 <__multiply+0xcc>
 800eb2c:	4689      	mov	r9, r1
 800eb2e:	46ac      	mov	ip, r5
 800eb30:	f04f 0800 	mov.w	r8, #0
 800eb34:	f859 4b04 	ldr.w	r4, [r9], #4
 800eb38:	f8dc a000 	ldr.w	sl, [ip]
 800eb3c:	b2a3      	uxth	r3, r4
 800eb3e:	fa1f fa8a 	uxth.w	sl, sl
 800eb42:	fb0b a303 	mla	r3, fp, r3, sl
 800eb46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eb4a:	f8dc 4000 	ldr.w	r4, [ip]
 800eb4e:	4443      	add	r3, r8
 800eb50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eb54:	fb0b 840a 	mla	r4, fp, sl, r8
 800eb58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800eb5c:	46e2      	mov	sl, ip
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eb64:	454f      	cmp	r7, r9
 800eb66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eb6a:	f84a 3b04 	str.w	r3, [sl], #4
 800eb6e:	d82b      	bhi.n	800ebc8 <__multiply+0x120>
 800eb70:	f8cc 8004 	str.w	r8, [ip, #4]
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800eb7a:	3204      	adds	r2, #4
 800eb7c:	f1ba 0f00 	cmp.w	sl, #0
 800eb80:	d020      	beq.n	800ebc4 <__multiply+0x11c>
 800eb82:	682b      	ldr	r3, [r5, #0]
 800eb84:	4689      	mov	r9, r1
 800eb86:	46a8      	mov	r8, r5
 800eb88:	f04f 0b00 	mov.w	fp, #0
 800eb8c:	f8b9 c000 	ldrh.w	ip, [r9]
 800eb90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800eb94:	fb0a 440c 	mla	r4, sl, ip, r4
 800eb98:	445c      	add	r4, fp
 800eb9a:	46c4      	mov	ip, r8
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eba2:	f84c 3b04 	str.w	r3, [ip], #4
 800eba6:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ebae:	0c1b      	lsrs	r3, r3, #16
 800ebb0:	fb0a b303 	mla	r3, sl, r3, fp
 800ebb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ebb8:	454f      	cmp	r7, r9
 800ebba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ebbe:	d805      	bhi.n	800ebcc <__multiply+0x124>
 800ebc0:	f8c8 3004 	str.w	r3, [r8, #4]
 800ebc4:	3504      	adds	r5, #4
 800ebc6:	e79b      	b.n	800eb00 <__multiply+0x58>
 800ebc8:	46d4      	mov	ip, sl
 800ebca:	e7b3      	b.n	800eb34 <__multiply+0x8c>
 800ebcc:	46e0      	mov	r8, ip
 800ebce:	e7dd      	b.n	800eb8c <__multiply+0xe4>
 800ebd0:	3e01      	subs	r6, #1
 800ebd2:	e799      	b.n	800eb08 <__multiply+0x60>

0800ebd4 <__pow5mult>:
 800ebd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd8:	4615      	mov	r5, r2
 800ebda:	f012 0203 	ands.w	r2, r2, #3
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	d007      	beq.n	800ebf4 <__pow5mult+0x20>
 800ebe4:	3a01      	subs	r2, #1
 800ebe6:	4c21      	ldr	r4, [pc, #132]	; (800ec6c <__pow5mult+0x98>)
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebee:	f7ff fe8b 	bl	800e908 <__multadd>
 800ebf2:	4607      	mov	r7, r0
 800ebf4:	10ad      	asrs	r5, r5, #2
 800ebf6:	d035      	beq.n	800ec64 <__pow5mult+0x90>
 800ebf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebfa:	b93c      	cbnz	r4, 800ec0c <__pow5mult+0x38>
 800ebfc:	2010      	movs	r0, #16
 800ebfe:	f000 fdaf 	bl	800f760 <malloc>
 800ec02:	6270      	str	r0, [r6, #36]	; 0x24
 800ec04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec08:	6004      	str	r4, [r0, #0]
 800ec0a:	60c4      	str	r4, [r0, #12]
 800ec0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec14:	b94c      	cbnz	r4, 800ec2a <__pow5mult+0x56>
 800ec16:	f240 2171 	movw	r1, #625	; 0x271
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7ff ff3b 	bl	800ea96 <__i2b>
 800ec20:	2300      	movs	r3, #0
 800ec22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec26:	4604      	mov	r4, r0
 800ec28:	6003      	str	r3, [r0, #0]
 800ec2a:	f04f 0800 	mov.w	r8, #0
 800ec2e:	07eb      	lsls	r3, r5, #31
 800ec30:	d50a      	bpl.n	800ec48 <__pow5mult+0x74>
 800ec32:	4639      	mov	r1, r7
 800ec34:	4622      	mov	r2, r4
 800ec36:	4630      	mov	r0, r6
 800ec38:	f7ff ff36 	bl	800eaa8 <__multiply>
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	4681      	mov	r9, r0
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7ff fe4a 	bl	800e8da <_Bfree>
 800ec46:	464f      	mov	r7, r9
 800ec48:	106d      	asrs	r5, r5, #1
 800ec4a:	d00b      	beq.n	800ec64 <__pow5mult+0x90>
 800ec4c:	6820      	ldr	r0, [r4, #0]
 800ec4e:	b938      	cbnz	r0, 800ec60 <__pow5mult+0x8c>
 800ec50:	4622      	mov	r2, r4
 800ec52:	4621      	mov	r1, r4
 800ec54:	4630      	mov	r0, r6
 800ec56:	f7ff ff27 	bl	800eaa8 <__multiply>
 800ec5a:	6020      	str	r0, [r4, #0]
 800ec5c:	f8c0 8000 	str.w	r8, [r0]
 800ec60:	4604      	mov	r4, r0
 800ec62:	e7e4      	b.n	800ec2e <__pow5mult+0x5a>
 800ec64:	4638      	mov	r0, r7
 800ec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec6a:	bf00      	nop
 800ec6c:	0801bf78 	.word	0x0801bf78

0800ec70 <__lshift>:
 800ec70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec74:	460c      	mov	r4, r1
 800ec76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	6849      	ldr	r1, [r1, #4]
 800ec7e:	eb0a 0903 	add.w	r9, sl, r3
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	4607      	mov	r7, r0
 800ec86:	4616      	mov	r6, r2
 800ec88:	f109 0501 	add.w	r5, r9, #1
 800ec8c:	42ab      	cmp	r3, r5
 800ec8e:	db32      	blt.n	800ecf6 <__lshift+0x86>
 800ec90:	4638      	mov	r0, r7
 800ec92:	f7ff fdee 	bl	800e872 <_Balloc>
 800ec96:	2300      	movs	r3, #0
 800ec98:	4680      	mov	r8, r0
 800ec9a:	f100 0114 	add.w	r1, r0, #20
 800ec9e:	461a      	mov	r2, r3
 800eca0:	4553      	cmp	r3, sl
 800eca2:	db2b      	blt.n	800ecfc <__lshift+0x8c>
 800eca4:	6920      	ldr	r0, [r4, #16]
 800eca6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecaa:	f104 0314 	add.w	r3, r4, #20
 800ecae:	f016 021f 	ands.w	r2, r6, #31
 800ecb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecba:	d025      	beq.n	800ed08 <__lshift+0x98>
 800ecbc:	f1c2 0e20 	rsb	lr, r2, #32
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	681e      	ldr	r6, [r3, #0]
 800ecc4:	468a      	mov	sl, r1
 800ecc6:	4096      	lsls	r6, r2
 800ecc8:	4330      	orrs	r0, r6
 800ecca:	f84a 0b04 	str.w	r0, [sl], #4
 800ecce:	f853 0b04 	ldr.w	r0, [r3], #4
 800ecd2:	459c      	cmp	ip, r3
 800ecd4:	fa20 f00e 	lsr.w	r0, r0, lr
 800ecd8:	d814      	bhi.n	800ed04 <__lshift+0x94>
 800ecda:	6048      	str	r0, [r1, #4]
 800ecdc:	b108      	cbz	r0, 800ece2 <__lshift+0x72>
 800ecde:	f109 0502 	add.w	r5, r9, #2
 800ece2:	3d01      	subs	r5, #1
 800ece4:	4638      	mov	r0, r7
 800ece6:	f8c8 5010 	str.w	r5, [r8, #16]
 800ecea:	4621      	mov	r1, r4
 800ecec:	f7ff fdf5 	bl	800e8da <_Bfree>
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf6:	3101      	adds	r1, #1
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	e7c7      	b.n	800ec8c <__lshift+0x1c>
 800ecfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ed00:	3301      	adds	r3, #1
 800ed02:	e7cd      	b.n	800eca0 <__lshift+0x30>
 800ed04:	4651      	mov	r1, sl
 800ed06:	e7dc      	b.n	800ecc2 <__lshift+0x52>
 800ed08:	3904      	subs	r1, #4
 800ed0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed0e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed12:	459c      	cmp	ip, r3
 800ed14:	d8f9      	bhi.n	800ed0a <__lshift+0x9a>
 800ed16:	e7e4      	b.n	800ece2 <__lshift+0x72>

0800ed18 <__mcmp>:
 800ed18:	6903      	ldr	r3, [r0, #16]
 800ed1a:	690a      	ldr	r2, [r1, #16]
 800ed1c:	1a9b      	subs	r3, r3, r2
 800ed1e:	b530      	push	{r4, r5, lr}
 800ed20:	d10c      	bne.n	800ed3c <__mcmp+0x24>
 800ed22:	0092      	lsls	r2, r2, #2
 800ed24:	3014      	adds	r0, #20
 800ed26:	3114      	adds	r1, #20
 800ed28:	1884      	adds	r4, r0, r2
 800ed2a:	4411      	add	r1, r2
 800ed2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed34:	4295      	cmp	r5, r2
 800ed36:	d003      	beq.n	800ed40 <__mcmp+0x28>
 800ed38:	d305      	bcc.n	800ed46 <__mcmp+0x2e>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	bd30      	pop	{r4, r5, pc}
 800ed40:	42a0      	cmp	r0, r4
 800ed42:	d3f3      	bcc.n	800ed2c <__mcmp+0x14>
 800ed44:	e7fa      	b.n	800ed3c <__mcmp+0x24>
 800ed46:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4a:	e7f7      	b.n	800ed3c <__mcmp+0x24>

0800ed4c <__mdiff>:
 800ed4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed50:	460d      	mov	r5, r1
 800ed52:	4607      	mov	r7, r0
 800ed54:	4611      	mov	r1, r2
 800ed56:	4628      	mov	r0, r5
 800ed58:	4614      	mov	r4, r2
 800ed5a:	f7ff ffdd 	bl	800ed18 <__mcmp>
 800ed5e:	1e06      	subs	r6, r0, #0
 800ed60:	d108      	bne.n	800ed74 <__mdiff+0x28>
 800ed62:	4631      	mov	r1, r6
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff fd84 	bl	800e872 <_Balloc>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ed70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed74:	bfa4      	itt	ge
 800ed76:	4623      	movge	r3, r4
 800ed78:	462c      	movge	r4, r5
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	bfa6      	itte	ge
 800ed80:	461d      	movge	r5, r3
 800ed82:	2600      	movge	r6, #0
 800ed84:	2601      	movlt	r6, #1
 800ed86:	f7ff fd74 	bl	800e872 <_Balloc>
 800ed8a:	692b      	ldr	r3, [r5, #16]
 800ed8c:	60c6      	str	r6, [r0, #12]
 800ed8e:	6926      	ldr	r6, [r4, #16]
 800ed90:	f105 0914 	add.w	r9, r5, #20
 800ed94:	f104 0214 	add.w	r2, r4, #20
 800ed98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ed9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800eda0:	f100 0514 	add.w	r5, r0, #20
 800eda4:	f04f 0e00 	mov.w	lr, #0
 800eda8:	f852 ab04 	ldr.w	sl, [r2], #4
 800edac:	f859 4b04 	ldr.w	r4, [r9], #4
 800edb0:	fa1e f18a 	uxtah	r1, lr, sl
 800edb4:	b2a3      	uxth	r3, r4
 800edb6:	1ac9      	subs	r1, r1, r3
 800edb8:	0c23      	lsrs	r3, r4, #16
 800edba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800edbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800edc2:	b289      	uxth	r1, r1
 800edc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800edc8:	45c8      	cmp	r8, r9
 800edca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800edce:	4694      	mov	ip, r2
 800edd0:	f845 3b04 	str.w	r3, [r5], #4
 800edd4:	d8e8      	bhi.n	800eda8 <__mdiff+0x5c>
 800edd6:	45bc      	cmp	ip, r7
 800edd8:	d304      	bcc.n	800ede4 <__mdiff+0x98>
 800edda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800edde:	b183      	cbz	r3, 800ee02 <__mdiff+0xb6>
 800ede0:	6106      	str	r6, [r0, #16]
 800ede2:	e7c5      	b.n	800ed70 <__mdiff+0x24>
 800ede4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ede8:	fa1e f381 	uxtah	r3, lr, r1
 800edec:	141a      	asrs	r2, r3, #16
 800edee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800edfc:	f845 3b04 	str.w	r3, [r5], #4
 800ee00:	e7e9      	b.n	800edd6 <__mdiff+0x8a>
 800ee02:	3e01      	subs	r6, #1
 800ee04:	e7e9      	b.n	800edda <__mdiff+0x8e>
	...

0800ee08 <__ulp>:
 800ee08:	4b12      	ldr	r3, [pc, #72]	; (800ee54 <__ulp+0x4c>)
 800ee0a:	ee10 2a90 	vmov	r2, s1
 800ee0e:	401a      	ands	r2, r3
 800ee10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	dd04      	ble.n	800ee22 <__ulp+0x1a>
 800ee18:	2000      	movs	r0, #0
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	ec41 0b10 	vmov	d0, r0, r1
 800ee20:	4770      	bx	lr
 800ee22:	425b      	negs	r3, r3
 800ee24:	151b      	asrs	r3, r3, #20
 800ee26:	2b13      	cmp	r3, #19
 800ee28:	f04f 0000 	mov.w	r0, #0
 800ee2c:	f04f 0100 	mov.w	r1, #0
 800ee30:	dc04      	bgt.n	800ee3c <__ulp+0x34>
 800ee32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ee36:	fa42 f103 	asr.w	r1, r2, r3
 800ee3a:	e7ef      	b.n	800ee1c <__ulp+0x14>
 800ee3c:	3b14      	subs	r3, #20
 800ee3e:	2b1e      	cmp	r3, #30
 800ee40:	f04f 0201 	mov.w	r2, #1
 800ee44:	bfda      	itte	le
 800ee46:	f1c3 031f 	rsble	r3, r3, #31
 800ee4a:	fa02 f303 	lslle.w	r3, r2, r3
 800ee4e:	4613      	movgt	r3, r2
 800ee50:	4618      	mov	r0, r3
 800ee52:	e7e3      	b.n	800ee1c <__ulp+0x14>
 800ee54:	7ff00000 	.word	0x7ff00000

0800ee58 <__b2d>:
 800ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee5a:	6905      	ldr	r5, [r0, #16]
 800ee5c:	f100 0714 	add.w	r7, r0, #20
 800ee60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ee64:	1f2e      	subs	r6, r5, #4
 800ee66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7ff fdc5 	bl	800e9fa <__hi0bits>
 800ee70:	f1c0 0320 	rsb	r3, r0, #32
 800ee74:	280a      	cmp	r0, #10
 800ee76:	600b      	str	r3, [r1, #0]
 800ee78:	f8df c074 	ldr.w	ip, [pc, #116]	; 800eef0 <__b2d+0x98>
 800ee7c:	dc14      	bgt.n	800eea8 <__b2d+0x50>
 800ee7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ee82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ee86:	42b7      	cmp	r7, r6
 800ee88:	ea41 030c 	orr.w	r3, r1, ip
 800ee8c:	bf34      	ite	cc
 800ee8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ee92:	2100      	movcs	r1, #0
 800ee94:	3015      	adds	r0, #21
 800ee96:	fa04 f000 	lsl.w	r0, r4, r0
 800ee9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ee9e:	ea40 0201 	orr.w	r2, r0, r1
 800eea2:	ec43 2b10 	vmov	d0, r2, r3
 800eea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea8:	42b7      	cmp	r7, r6
 800eeaa:	bf3a      	itte	cc
 800eeac:	f1a5 0608 	subcc.w	r6, r5, #8
 800eeb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eeb4:	2100      	movcs	r1, #0
 800eeb6:	380b      	subs	r0, #11
 800eeb8:	d015      	beq.n	800eee6 <__b2d+0x8e>
 800eeba:	4084      	lsls	r4, r0
 800eebc:	f1c0 0520 	rsb	r5, r0, #32
 800eec0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800eec4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800eec8:	42be      	cmp	r6, r7
 800eeca:	fa21 fc05 	lsr.w	ip, r1, r5
 800eece:	ea44 030c 	orr.w	r3, r4, ip
 800eed2:	bf8c      	ite	hi
 800eed4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eed8:	2400      	movls	r4, #0
 800eeda:	fa01 f000 	lsl.w	r0, r1, r0
 800eede:	40ec      	lsrs	r4, r5
 800eee0:	ea40 0204 	orr.w	r2, r0, r4
 800eee4:	e7dd      	b.n	800eea2 <__b2d+0x4a>
 800eee6:	ea44 030c 	orr.w	r3, r4, ip
 800eeea:	460a      	mov	r2, r1
 800eeec:	e7d9      	b.n	800eea2 <__b2d+0x4a>
 800eeee:	bf00      	nop
 800eef0:	3ff00000 	.word	0x3ff00000

0800eef4 <__d2b>:
 800eef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eef8:	460e      	mov	r6, r1
 800eefa:	2101      	movs	r1, #1
 800eefc:	ec59 8b10 	vmov	r8, r9, d0
 800ef00:	4615      	mov	r5, r2
 800ef02:	f7ff fcb6 	bl	800e872 <_Balloc>
 800ef06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ef0a:	4607      	mov	r7, r0
 800ef0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef10:	bb34      	cbnz	r4, 800ef60 <__d2b+0x6c>
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	f1b8 0300 	subs.w	r3, r8, #0
 800ef18:	d027      	beq.n	800ef6a <__d2b+0x76>
 800ef1a:	a802      	add	r0, sp, #8
 800ef1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ef20:	f7ff fd8a 	bl	800ea38 <__lo0bits>
 800ef24:	9900      	ldr	r1, [sp, #0]
 800ef26:	b1f0      	cbz	r0, 800ef66 <__d2b+0x72>
 800ef28:	9a01      	ldr	r2, [sp, #4]
 800ef2a:	f1c0 0320 	rsb	r3, r0, #32
 800ef2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef32:	430b      	orrs	r3, r1
 800ef34:	40c2      	lsrs	r2, r0
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	9201      	str	r2, [sp, #4]
 800ef3a:	9b01      	ldr	r3, [sp, #4]
 800ef3c:	61bb      	str	r3, [r7, #24]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	bf14      	ite	ne
 800ef42:	2102      	movne	r1, #2
 800ef44:	2101      	moveq	r1, #1
 800ef46:	6139      	str	r1, [r7, #16]
 800ef48:	b1c4      	cbz	r4, 800ef7c <__d2b+0x88>
 800ef4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ef4e:	4404      	add	r4, r0
 800ef50:	6034      	str	r4, [r6, #0]
 800ef52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef56:	6028      	str	r0, [r5, #0]
 800ef58:	4638      	mov	r0, r7
 800ef5a:	b003      	add	sp, #12
 800ef5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef64:	e7d5      	b.n	800ef12 <__d2b+0x1e>
 800ef66:	6179      	str	r1, [r7, #20]
 800ef68:	e7e7      	b.n	800ef3a <__d2b+0x46>
 800ef6a:	a801      	add	r0, sp, #4
 800ef6c:	f7ff fd64 	bl	800ea38 <__lo0bits>
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	2101      	movs	r1, #1
 800ef76:	6139      	str	r1, [r7, #16]
 800ef78:	3020      	adds	r0, #32
 800ef7a:	e7e5      	b.n	800ef48 <__d2b+0x54>
 800ef7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ef80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef84:	6030      	str	r0, [r6, #0]
 800ef86:	6918      	ldr	r0, [r3, #16]
 800ef88:	f7ff fd37 	bl	800e9fa <__hi0bits>
 800ef8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ef90:	e7e1      	b.n	800ef56 <__d2b+0x62>

0800ef92 <__ratio>:
 800ef92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef96:	4688      	mov	r8, r1
 800ef98:	4669      	mov	r1, sp
 800ef9a:	4681      	mov	r9, r0
 800ef9c:	f7ff ff5c 	bl	800ee58 <__b2d>
 800efa0:	a901      	add	r1, sp, #4
 800efa2:	4640      	mov	r0, r8
 800efa4:	ec57 6b10 	vmov	r6, r7, d0
 800efa8:	f7ff ff56 	bl	800ee58 <__b2d>
 800efac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800efb4:	eba3 0c02 	sub.w	ip, r3, r2
 800efb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800efbc:	1a9b      	subs	r3, r3, r2
 800efbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800efc2:	ec5b ab10 	vmov	sl, fp, d0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	bfce      	itee	gt
 800efca:	463a      	movgt	r2, r7
 800efcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800efd0:	465a      	movle	r2, fp
 800efd2:	4659      	mov	r1, fp
 800efd4:	463d      	mov	r5, r7
 800efd6:	bfd4      	ite	le
 800efd8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800efdc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800efe0:	4630      	mov	r0, r6
 800efe2:	ee10 2a10 	vmov	r2, s0
 800efe6:	460b      	mov	r3, r1
 800efe8:	4629      	mov	r1, r5
 800efea:	f7f1 fc47 	bl	800087c <__aeabi_ddiv>
 800efee:	ec41 0b10 	vmov	d0, r0, r1
 800eff2:	b003      	add	sp, #12
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eff8 <__copybits>:
 800eff8:	3901      	subs	r1, #1
 800effa:	b510      	push	{r4, lr}
 800effc:	1149      	asrs	r1, r1, #5
 800effe:	6914      	ldr	r4, [r2, #16]
 800f000:	3101      	adds	r1, #1
 800f002:	f102 0314 	add.w	r3, r2, #20
 800f006:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f00a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f00e:	42a3      	cmp	r3, r4
 800f010:	4602      	mov	r2, r0
 800f012:	d303      	bcc.n	800f01c <__copybits+0x24>
 800f014:	2300      	movs	r3, #0
 800f016:	428a      	cmp	r2, r1
 800f018:	d305      	bcc.n	800f026 <__copybits+0x2e>
 800f01a:	bd10      	pop	{r4, pc}
 800f01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f020:	f840 2b04 	str.w	r2, [r0], #4
 800f024:	e7f3      	b.n	800f00e <__copybits+0x16>
 800f026:	f842 3b04 	str.w	r3, [r2], #4
 800f02a:	e7f4      	b.n	800f016 <__copybits+0x1e>

0800f02c <__any_on>:
 800f02c:	f100 0214 	add.w	r2, r0, #20
 800f030:	6900      	ldr	r0, [r0, #16]
 800f032:	114b      	asrs	r3, r1, #5
 800f034:	4298      	cmp	r0, r3
 800f036:	b510      	push	{r4, lr}
 800f038:	db11      	blt.n	800f05e <__any_on+0x32>
 800f03a:	dd0a      	ble.n	800f052 <__any_on+0x26>
 800f03c:	f011 011f 	ands.w	r1, r1, #31
 800f040:	d007      	beq.n	800f052 <__any_on+0x26>
 800f042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f046:	fa24 f001 	lsr.w	r0, r4, r1
 800f04a:	fa00 f101 	lsl.w	r1, r0, r1
 800f04e:	428c      	cmp	r4, r1
 800f050:	d10b      	bne.n	800f06a <__any_on+0x3e>
 800f052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f056:	4293      	cmp	r3, r2
 800f058:	d803      	bhi.n	800f062 <__any_on+0x36>
 800f05a:	2000      	movs	r0, #0
 800f05c:	bd10      	pop	{r4, pc}
 800f05e:	4603      	mov	r3, r0
 800f060:	e7f7      	b.n	800f052 <__any_on+0x26>
 800f062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f066:	2900      	cmp	r1, #0
 800f068:	d0f5      	beq.n	800f056 <__any_on+0x2a>
 800f06a:	2001      	movs	r0, #1
 800f06c:	e7f6      	b.n	800f05c <__any_on+0x30>

0800f06e <_calloc_r>:
 800f06e:	b538      	push	{r3, r4, r5, lr}
 800f070:	fb02 f401 	mul.w	r4, r2, r1
 800f074:	4621      	mov	r1, r4
 800f076:	f000 f809 	bl	800f08c <_malloc_r>
 800f07a:	4605      	mov	r5, r0
 800f07c:	b118      	cbz	r0, 800f086 <_calloc_r+0x18>
 800f07e:	4622      	mov	r2, r4
 800f080:	2100      	movs	r1, #0
 800f082:	f7fe f94a 	bl	800d31a <memset>
 800f086:	4628      	mov	r0, r5
 800f088:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f08c <_malloc_r>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	1ccd      	adds	r5, r1, #3
 800f090:	f025 0503 	bic.w	r5, r5, #3
 800f094:	3508      	adds	r5, #8
 800f096:	2d0c      	cmp	r5, #12
 800f098:	bf38      	it	cc
 800f09a:	250c      	movcc	r5, #12
 800f09c:	2d00      	cmp	r5, #0
 800f09e:	4606      	mov	r6, r0
 800f0a0:	db01      	blt.n	800f0a6 <_malloc_r+0x1a>
 800f0a2:	42a9      	cmp	r1, r5
 800f0a4:	d903      	bls.n	800f0ae <_malloc_r+0x22>
 800f0a6:	230c      	movs	r3, #12
 800f0a8:	6033      	str	r3, [r6, #0]
 800f0aa:	2000      	movs	r0, #0
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	f000 fb78 	bl	800f7a2 <__malloc_lock>
 800f0b2:	4a21      	ldr	r2, [pc, #132]	; (800f138 <_malloc_r+0xac>)
 800f0b4:	6814      	ldr	r4, [r2, #0]
 800f0b6:	4621      	mov	r1, r4
 800f0b8:	b991      	cbnz	r1, 800f0e0 <_malloc_r+0x54>
 800f0ba:	4c20      	ldr	r4, [pc, #128]	; (800f13c <_malloc_r+0xb0>)
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	b91b      	cbnz	r3, 800f0c8 <_malloc_r+0x3c>
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 fb17 	bl	800f6f4 <_sbrk_r>
 800f0c6:	6020      	str	r0, [r4, #0]
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f000 fb12 	bl	800f6f4 <_sbrk_r>
 800f0d0:	1c43      	adds	r3, r0, #1
 800f0d2:	d124      	bne.n	800f11e <_malloc_r+0x92>
 800f0d4:	230c      	movs	r3, #12
 800f0d6:	6033      	str	r3, [r6, #0]
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f000 fb63 	bl	800f7a4 <__malloc_unlock>
 800f0de:	e7e4      	b.n	800f0aa <_malloc_r+0x1e>
 800f0e0:	680b      	ldr	r3, [r1, #0]
 800f0e2:	1b5b      	subs	r3, r3, r5
 800f0e4:	d418      	bmi.n	800f118 <_malloc_r+0x8c>
 800f0e6:	2b0b      	cmp	r3, #11
 800f0e8:	d90f      	bls.n	800f10a <_malloc_r+0x7e>
 800f0ea:	600b      	str	r3, [r1, #0]
 800f0ec:	50cd      	str	r5, [r1, r3]
 800f0ee:	18cc      	adds	r4, r1, r3
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	f000 fb57 	bl	800f7a4 <__malloc_unlock>
 800f0f6:	f104 000b 	add.w	r0, r4, #11
 800f0fa:	1d23      	adds	r3, r4, #4
 800f0fc:	f020 0007 	bic.w	r0, r0, #7
 800f100:	1ac3      	subs	r3, r0, r3
 800f102:	d0d3      	beq.n	800f0ac <_malloc_r+0x20>
 800f104:	425a      	negs	r2, r3
 800f106:	50e2      	str	r2, [r4, r3]
 800f108:	e7d0      	b.n	800f0ac <_malloc_r+0x20>
 800f10a:	428c      	cmp	r4, r1
 800f10c:	684b      	ldr	r3, [r1, #4]
 800f10e:	bf16      	itet	ne
 800f110:	6063      	strne	r3, [r4, #4]
 800f112:	6013      	streq	r3, [r2, #0]
 800f114:	460c      	movne	r4, r1
 800f116:	e7eb      	b.n	800f0f0 <_malloc_r+0x64>
 800f118:	460c      	mov	r4, r1
 800f11a:	6849      	ldr	r1, [r1, #4]
 800f11c:	e7cc      	b.n	800f0b8 <_malloc_r+0x2c>
 800f11e:	1cc4      	adds	r4, r0, #3
 800f120:	f024 0403 	bic.w	r4, r4, #3
 800f124:	42a0      	cmp	r0, r4
 800f126:	d005      	beq.n	800f134 <_malloc_r+0xa8>
 800f128:	1a21      	subs	r1, r4, r0
 800f12a:	4630      	mov	r0, r6
 800f12c:	f000 fae2 	bl	800f6f4 <_sbrk_r>
 800f130:	3001      	adds	r0, #1
 800f132:	d0cf      	beq.n	800f0d4 <_malloc_r+0x48>
 800f134:	6025      	str	r5, [r4, #0]
 800f136:	e7db      	b.n	800f0f0 <_malloc_r+0x64>
 800f138:	2000a45c 	.word	0x2000a45c
 800f13c:	2000a460 	.word	0x2000a460

0800f140 <__ssputs_r>:
 800f140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f144:	688e      	ldr	r6, [r1, #8]
 800f146:	429e      	cmp	r6, r3
 800f148:	4682      	mov	sl, r0
 800f14a:	460c      	mov	r4, r1
 800f14c:	4690      	mov	r8, r2
 800f14e:	4699      	mov	r9, r3
 800f150:	d837      	bhi.n	800f1c2 <__ssputs_r+0x82>
 800f152:	898a      	ldrh	r2, [r1, #12]
 800f154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f158:	d031      	beq.n	800f1be <__ssputs_r+0x7e>
 800f15a:	6825      	ldr	r5, [r4, #0]
 800f15c:	6909      	ldr	r1, [r1, #16]
 800f15e:	1a6f      	subs	r7, r5, r1
 800f160:	6965      	ldr	r5, [r4, #20]
 800f162:	2302      	movs	r3, #2
 800f164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f168:	fb95 f5f3 	sdiv	r5, r5, r3
 800f16c:	f109 0301 	add.w	r3, r9, #1
 800f170:	443b      	add	r3, r7
 800f172:	429d      	cmp	r5, r3
 800f174:	bf38      	it	cc
 800f176:	461d      	movcc	r5, r3
 800f178:	0553      	lsls	r3, r2, #21
 800f17a:	d530      	bpl.n	800f1de <__ssputs_r+0x9e>
 800f17c:	4629      	mov	r1, r5
 800f17e:	f7ff ff85 	bl	800f08c <_malloc_r>
 800f182:	4606      	mov	r6, r0
 800f184:	b950      	cbnz	r0, 800f19c <__ssputs_r+0x5c>
 800f186:	230c      	movs	r3, #12
 800f188:	f8ca 3000 	str.w	r3, [sl]
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f192:	81a3      	strh	r3, [r4, #12]
 800f194:	f04f 30ff 	mov.w	r0, #4294967295
 800f198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19c:	463a      	mov	r2, r7
 800f19e:	6921      	ldr	r1, [r4, #16]
 800f1a0:	f7fe f8b0 	bl	800d304 <memcpy>
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ae:	81a3      	strh	r3, [r4, #12]
 800f1b0:	6126      	str	r6, [r4, #16]
 800f1b2:	6165      	str	r5, [r4, #20]
 800f1b4:	443e      	add	r6, r7
 800f1b6:	1bed      	subs	r5, r5, r7
 800f1b8:	6026      	str	r6, [r4, #0]
 800f1ba:	60a5      	str	r5, [r4, #8]
 800f1bc:	464e      	mov	r6, r9
 800f1be:	454e      	cmp	r6, r9
 800f1c0:	d900      	bls.n	800f1c4 <__ssputs_r+0x84>
 800f1c2:	464e      	mov	r6, r9
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	4641      	mov	r1, r8
 800f1c8:	6820      	ldr	r0, [r4, #0]
 800f1ca:	f000 fad1 	bl	800f770 <memmove>
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	1b9b      	subs	r3, r3, r6
 800f1d2:	60a3      	str	r3, [r4, #8]
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	441e      	add	r6, r3
 800f1d8:	6026      	str	r6, [r4, #0]
 800f1da:	2000      	movs	r0, #0
 800f1dc:	e7dc      	b.n	800f198 <__ssputs_r+0x58>
 800f1de:	462a      	mov	r2, r5
 800f1e0:	f000 fb30 	bl	800f844 <_realloc_r>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d1e2      	bne.n	800f1b0 <__ssputs_r+0x70>
 800f1ea:	6921      	ldr	r1, [r4, #16]
 800f1ec:	4650      	mov	r0, sl
 800f1ee:	f000 fadb 	bl	800f7a8 <_free_r>
 800f1f2:	e7c8      	b.n	800f186 <__ssputs_r+0x46>

0800f1f4 <_svfiprintf_r>:
 800f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	461d      	mov	r5, r3
 800f1fa:	898b      	ldrh	r3, [r1, #12]
 800f1fc:	061f      	lsls	r7, r3, #24
 800f1fe:	b09d      	sub	sp, #116	; 0x74
 800f200:	4680      	mov	r8, r0
 800f202:	460c      	mov	r4, r1
 800f204:	4616      	mov	r6, r2
 800f206:	d50f      	bpl.n	800f228 <_svfiprintf_r+0x34>
 800f208:	690b      	ldr	r3, [r1, #16]
 800f20a:	b96b      	cbnz	r3, 800f228 <_svfiprintf_r+0x34>
 800f20c:	2140      	movs	r1, #64	; 0x40
 800f20e:	f7ff ff3d 	bl	800f08c <_malloc_r>
 800f212:	6020      	str	r0, [r4, #0]
 800f214:	6120      	str	r0, [r4, #16]
 800f216:	b928      	cbnz	r0, 800f224 <_svfiprintf_r+0x30>
 800f218:	230c      	movs	r3, #12
 800f21a:	f8c8 3000 	str.w	r3, [r8]
 800f21e:	f04f 30ff 	mov.w	r0, #4294967295
 800f222:	e0c8      	b.n	800f3b6 <_svfiprintf_r+0x1c2>
 800f224:	2340      	movs	r3, #64	; 0x40
 800f226:	6163      	str	r3, [r4, #20]
 800f228:	2300      	movs	r3, #0
 800f22a:	9309      	str	r3, [sp, #36]	; 0x24
 800f22c:	2320      	movs	r3, #32
 800f22e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f232:	2330      	movs	r3, #48	; 0x30
 800f234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f238:	9503      	str	r5, [sp, #12]
 800f23a:	f04f 0b01 	mov.w	fp, #1
 800f23e:	4637      	mov	r7, r6
 800f240:	463d      	mov	r5, r7
 800f242:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f246:	b10b      	cbz	r3, 800f24c <_svfiprintf_r+0x58>
 800f248:	2b25      	cmp	r3, #37	; 0x25
 800f24a:	d13e      	bne.n	800f2ca <_svfiprintf_r+0xd6>
 800f24c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f250:	d00b      	beq.n	800f26a <_svfiprintf_r+0x76>
 800f252:	4653      	mov	r3, sl
 800f254:	4632      	mov	r2, r6
 800f256:	4621      	mov	r1, r4
 800f258:	4640      	mov	r0, r8
 800f25a:	f7ff ff71 	bl	800f140 <__ssputs_r>
 800f25e:	3001      	adds	r0, #1
 800f260:	f000 80a4 	beq.w	800f3ac <_svfiprintf_r+0x1b8>
 800f264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f266:	4453      	add	r3, sl
 800f268:	9309      	str	r3, [sp, #36]	; 0x24
 800f26a:	783b      	ldrb	r3, [r7, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 809d 	beq.w	800f3ac <_svfiprintf_r+0x1b8>
 800f272:	2300      	movs	r3, #0
 800f274:	f04f 32ff 	mov.w	r2, #4294967295
 800f278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f27c:	9304      	str	r3, [sp, #16]
 800f27e:	9307      	str	r3, [sp, #28]
 800f280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f284:	931a      	str	r3, [sp, #104]	; 0x68
 800f286:	462f      	mov	r7, r5
 800f288:	2205      	movs	r2, #5
 800f28a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f28e:	4850      	ldr	r0, [pc, #320]	; (800f3d0 <_svfiprintf_r+0x1dc>)
 800f290:	f7f0 ffbe 	bl	8000210 <memchr>
 800f294:	9b04      	ldr	r3, [sp, #16]
 800f296:	b9d0      	cbnz	r0, 800f2ce <_svfiprintf_r+0xda>
 800f298:	06d9      	lsls	r1, r3, #27
 800f29a:	bf44      	itt	mi
 800f29c:	2220      	movmi	r2, #32
 800f29e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2a2:	071a      	lsls	r2, r3, #28
 800f2a4:	bf44      	itt	mi
 800f2a6:	222b      	movmi	r2, #43	; 0x2b
 800f2a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2ac:	782a      	ldrb	r2, [r5, #0]
 800f2ae:	2a2a      	cmp	r2, #42	; 0x2a
 800f2b0:	d015      	beq.n	800f2de <_svfiprintf_r+0xea>
 800f2b2:	9a07      	ldr	r2, [sp, #28]
 800f2b4:	462f      	mov	r7, r5
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	250a      	movs	r5, #10
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2c0:	3b30      	subs	r3, #48	; 0x30
 800f2c2:	2b09      	cmp	r3, #9
 800f2c4:	d94d      	bls.n	800f362 <_svfiprintf_r+0x16e>
 800f2c6:	b1b8      	cbz	r0, 800f2f8 <_svfiprintf_r+0x104>
 800f2c8:	e00f      	b.n	800f2ea <_svfiprintf_r+0xf6>
 800f2ca:	462f      	mov	r7, r5
 800f2cc:	e7b8      	b.n	800f240 <_svfiprintf_r+0x4c>
 800f2ce:	4a40      	ldr	r2, [pc, #256]	; (800f3d0 <_svfiprintf_r+0x1dc>)
 800f2d0:	1a80      	subs	r0, r0, r2
 800f2d2:	fa0b f000 	lsl.w	r0, fp, r0
 800f2d6:	4318      	orrs	r0, r3
 800f2d8:	9004      	str	r0, [sp, #16]
 800f2da:	463d      	mov	r5, r7
 800f2dc:	e7d3      	b.n	800f286 <_svfiprintf_r+0x92>
 800f2de:	9a03      	ldr	r2, [sp, #12]
 800f2e0:	1d11      	adds	r1, r2, #4
 800f2e2:	6812      	ldr	r2, [r2, #0]
 800f2e4:	9103      	str	r1, [sp, #12]
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	db01      	blt.n	800f2ee <_svfiprintf_r+0xfa>
 800f2ea:	9207      	str	r2, [sp, #28]
 800f2ec:	e004      	b.n	800f2f8 <_svfiprintf_r+0x104>
 800f2ee:	4252      	negs	r2, r2
 800f2f0:	f043 0302 	orr.w	r3, r3, #2
 800f2f4:	9207      	str	r2, [sp, #28]
 800f2f6:	9304      	str	r3, [sp, #16]
 800f2f8:	783b      	ldrb	r3, [r7, #0]
 800f2fa:	2b2e      	cmp	r3, #46	; 0x2e
 800f2fc:	d10c      	bne.n	800f318 <_svfiprintf_r+0x124>
 800f2fe:	787b      	ldrb	r3, [r7, #1]
 800f300:	2b2a      	cmp	r3, #42	; 0x2a
 800f302:	d133      	bne.n	800f36c <_svfiprintf_r+0x178>
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	1d1a      	adds	r2, r3, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	9203      	str	r2, [sp, #12]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bfb8      	it	lt
 800f310:	f04f 33ff 	movlt.w	r3, #4294967295
 800f314:	3702      	adds	r7, #2
 800f316:	9305      	str	r3, [sp, #20]
 800f318:	4d2e      	ldr	r5, [pc, #184]	; (800f3d4 <_svfiprintf_r+0x1e0>)
 800f31a:	7839      	ldrb	r1, [r7, #0]
 800f31c:	2203      	movs	r2, #3
 800f31e:	4628      	mov	r0, r5
 800f320:	f7f0 ff76 	bl	8000210 <memchr>
 800f324:	b138      	cbz	r0, 800f336 <_svfiprintf_r+0x142>
 800f326:	2340      	movs	r3, #64	; 0x40
 800f328:	1b40      	subs	r0, r0, r5
 800f32a:	fa03 f000 	lsl.w	r0, r3, r0
 800f32e:	9b04      	ldr	r3, [sp, #16]
 800f330:	4303      	orrs	r3, r0
 800f332:	3701      	adds	r7, #1
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	7839      	ldrb	r1, [r7, #0]
 800f338:	4827      	ldr	r0, [pc, #156]	; (800f3d8 <_svfiprintf_r+0x1e4>)
 800f33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f33e:	2206      	movs	r2, #6
 800f340:	1c7e      	adds	r6, r7, #1
 800f342:	f7f0 ff65 	bl	8000210 <memchr>
 800f346:	2800      	cmp	r0, #0
 800f348:	d038      	beq.n	800f3bc <_svfiprintf_r+0x1c8>
 800f34a:	4b24      	ldr	r3, [pc, #144]	; (800f3dc <_svfiprintf_r+0x1e8>)
 800f34c:	bb13      	cbnz	r3, 800f394 <_svfiprintf_r+0x1a0>
 800f34e:	9b03      	ldr	r3, [sp, #12]
 800f350:	3307      	adds	r3, #7
 800f352:	f023 0307 	bic.w	r3, r3, #7
 800f356:	3308      	adds	r3, #8
 800f358:	9303      	str	r3, [sp, #12]
 800f35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35c:	444b      	add	r3, r9
 800f35e:	9309      	str	r3, [sp, #36]	; 0x24
 800f360:	e76d      	b.n	800f23e <_svfiprintf_r+0x4a>
 800f362:	fb05 3202 	mla	r2, r5, r2, r3
 800f366:	2001      	movs	r0, #1
 800f368:	460f      	mov	r7, r1
 800f36a:	e7a6      	b.n	800f2ba <_svfiprintf_r+0xc6>
 800f36c:	2300      	movs	r3, #0
 800f36e:	3701      	adds	r7, #1
 800f370:	9305      	str	r3, [sp, #20]
 800f372:	4619      	mov	r1, r3
 800f374:	250a      	movs	r5, #10
 800f376:	4638      	mov	r0, r7
 800f378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f37c:	3a30      	subs	r2, #48	; 0x30
 800f37e:	2a09      	cmp	r2, #9
 800f380:	d903      	bls.n	800f38a <_svfiprintf_r+0x196>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0c8      	beq.n	800f318 <_svfiprintf_r+0x124>
 800f386:	9105      	str	r1, [sp, #20]
 800f388:	e7c6      	b.n	800f318 <_svfiprintf_r+0x124>
 800f38a:	fb05 2101 	mla	r1, r5, r1, r2
 800f38e:	2301      	movs	r3, #1
 800f390:	4607      	mov	r7, r0
 800f392:	e7f0      	b.n	800f376 <_svfiprintf_r+0x182>
 800f394:	ab03      	add	r3, sp, #12
 800f396:	9300      	str	r3, [sp, #0]
 800f398:	4622      	mov	r2, r4
 800f39a:	4b11      	ldr	r3, [pc, #68]	; (800f3e0 <_svfiprintf_r+0x1ec>)
 800f39c:	a904      	add	r1, sp, #16
 800f39e:	4640      	mov	r0, r8
 800f3a0:	f3af 8000 	nop.w
 800f3a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f3a8:	4681      	mov	r9, r0
 800f3aa:	d1d6      	bne.n	800f35a <_svfiprintf_r+0x166>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	065b      	lsls	r3, r3, #25
 800f3b0:	f53f af35 	bmi.w	800f21e <_svfiprintf_r+0x2a>
 800f3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3b6:	b01d      	add	sp, #116	; 0x74
 800f3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3bc:	ab03      	add	r3, sp, #12
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	4622      	mov	r2, r4
 800f3c2:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <_svfiprintf_r+0x1ec>)
 800f3c4:	a904      	add	r1, sp, #16
 800f3c6:	4640      	mov	r0, r8
 800f3c8:	f000 f882 	bl	800f4d0 <_printf_i>
 800f3cc:	e7ea      	b.n	800f3a4 <_svfiprintf_r+0x1b0>
 800f3ce:	bf00      	nop
 800f3d0:	0801bf84 	.word	0x0801bf84
 800f3d4:	0801bf8a 	.word	0x0801bf8a
 800f3d8:	0801bf8e 	.word	0x0801bf8e
 800f3dc:	00000000 	.word	0x00000000
 800f3e0:	0800f141 	.word	0x0800f141

0800f3e4 <_printf_common>:
 800f3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e8:	4691      	mov	r9, r2
 800f3ea:	461f      	mov	r7, r3
 800f3ec:	688a      	ldr	r2, [r1, #8]
 800f3ee:	690b      	ldr	r3, [r1, #16]
 800f3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	bfb8      	it	lt
 800f3f8:	4613      	movlt	r3, r2
 800f3fa:	f8c9 3000 	str.w	r3, [r9]
 800f3fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f402:	4606      	mov	r6, r0
 800f404:	460c      	mov	r4, r1
 800f406:	b112      	cbz	r2, 800f40e <_printf_common+0x2a>
 800f408:	3301      	adds	r3, #1
 800f40a:	f8c9 3000 	str.w	r3, [r9]
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	0699      	lsls	r1, r3, #26
 800f412:	bf42      	ittt	mi
 800f414:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f418:	3302      	addmi	r3, #2
 800f41a:	f8c9 3000 	strmi.w	r3, [r9]
 800f41e:	6825      	ldr	r5, [r4, #0]
 800f420:	f015 0506 	ands.w	r5, r5, #6
 800f424:	d107      	bne.n	800f436 <_printf_common+0x52>
 800f426:	f104 0a19 	add.w	sl, r4, #25
 800f42a:	68e3      	ldr	r3, [r4, #12]
 800f42c:	f8d9 2000 	ldr.w	r2, [r9]
 800f430:	1a9b      	subs	r3, r3, r2
 800f432:	42ab      	cmp	r3, r5
 800f434:	dc28      	bgt.n	800f488 <_printf_common+0xa4>
 800f436:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	3300      	adds	r3, #0
 800f43e:	bf18      	it	ne
 800f440:	2301      	movne	r3, #1
 800f442:	0692      	lsls	r2, r2, #26
 800f444:	d42d      	bmi.n	800f4a2 <_printf_common+0xbe>
 800f446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f44a:	4639      	mov	r1, r7
 800f44c:	4630      	mov	r0, r6
 800f44e:	47c0      	blx	r8
 800f450:	3001      	adds	r0, #1
 800f452:	d020      	beq.n	800f496 <_printf_common+0xb2>
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	68e5      	ldr	r5, [r4, #12]
 800f458:	f8d9 2000 	ldr.w	r2, [r9]
 800f45c:	f003 0306 	and.w	r3, r3, #6
 800f460:	2b04      	cmp	r3, #4
 800f462:	bf08      	it	eq
 800f464:	1aad      	subeq	r5, r5, r2
 800f466:	68a3      	ldr	r3, [r4, #8]
 800f468:	6922      	ldr	r2, [r4, #16]
 800f46a:	bf0c      	ite	eq
 800f46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f470:	2500      	movne	r5, #0
 800f472:	4293      	cmp	r3, r2
 800f474:	bfc4      	itt	gt
 800f476:	1a9b      	subgt	r3, r3, r2
 800f478:	18ed      	addgt	r5, r5, r3
 800f47a:	f04f 0900 	mov.w	r9, #0
 800f47e:	341a      	adds	r4, #26
 800f480:	454d      	cmp	r5, r9
 800f482:	d11a      	bne.n	800f4ba <_printf_common+0xd6>
 800f484:	2000      	movs	r0, #0
 800f486:	e008      	b.n	800f49a <_printf_common+0xb6>
 800f488:	2301      	movs	r3, #1
 800f48a:	4652      	mov	r2, sl
 800f48c:	4639      	mov	r1, r7
 800f48e:	4630      	mov	r0, r6
 800f490:	47c0      	blx	r8
 800f492:	3001      	adds	r0, #1
 800f494:	d103      	bne.n	800f49e <_printf_common+0xba>
 800f496:	f04f 30ff 	mov.w	r0, #4294967295
 800f49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f49e:	3501      	adds	r5, #1
 800f4a0:	e7c3      	b.n	800f42a <_printf_common+0x46>
 800f4a2:	18e1      	adds	r1, r4, r3
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	2030      	movs	r0, #48	; 0x30
 800f4a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4ac:	4422      	add	r2, r4
 800f4ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4b6:	3302      	adds	r3, #2
 800f4b8:	e7c5      	b.n	800f446 <_printf_common+0x62>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	4622      	mov	r2, r4
 800f4be:	4639      	mov	r1, r7
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	47c0      	blx	r8
 800f4c4:	3001      	adds	r0, #1
 800f4c6:	d0e6      	beq.n	800f496 <_printf_common+0xb2>
 800f4c8:	f109 0901 	add.w	r9, r9, #1
 800f4cc:	e7d8      	b.n	800f480 <_printf_common+0x9c>
	...

0800f4d0 <_printf_i>:
 800f4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f4d8:	460c      	mov	r4, r1
 800f4da:	7e09      	ldrb	r1, [r1, #24]
 800f4dc:	b085      	sub	sp, #20
 800f4de:	296e      	cmp	r1, #110	; 0x6e
 800f4e0:	4617      	mov	r7, r2
 800f4e2:	4606      	mov	r6, r0
 800f4e4:	4698      	mov	r8, r3
 800f4e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4e8:	f000 80b3 	beq.w	800f652 <_printf_i+0x182>
 800f4ec:	d822      	bhi.n	800f534 <_printf_i+0x64>
 800f4ee:	2963      	cmp	r1, #99	; 0x63
 800f4f0:	d036      	beq.n	800f560 <_printf_i+0x90>
 800f4f2:	d80a      	bhi.n	800f50a <_printf_i+0x3a>
 800f4f4:	2900      	cmp	r1, #0
 800f4f6:	f000 80b9 	beq.w	800f66c <_printf_i+0x19c>
 800f4fa:	2958      	cmp	r1, #88	; 0x58
 800f4fc:	f000 8083 	beq.w	800f606 <_printf_i+0x136>
 800f500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f504:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f508:	e032      	b.n	800f570 <_printf_i+0xa0>
 800f50a:	2964      	cmp	r1, #100	; 0x64
 800f50c:	d001      	beq.n	800f512 <_printf_i+0x42>
 800f50e:	2969      	cmp	r1, #105	; 0x69
 800f510:	d1f6      	bne.n	800f500 <_printf_i+0x30>
 800f512:	6820      	ldr	r0, [r4, #0]
 800f514:	6813      	ldr	r3, [r2, #0]
 800f516:	0605      	lsls	r5, r0, #24
 800f518:	f103 0104 	add.w	r1, r3, #4
 800f51c:	d52a      	bpl.n	800f574 <_printf_i+0xa4>
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	6011      	str	r1, [r2, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	da03      	bge.n	800f52e <_printf_i+0x5e>
 800f526:	222d      	movs	r2, #45	; 0x2d
 800f528:	425b      	negs	r3, r3
 800f52a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f52e:	486f      	ldr	r0, [pc, #444]	; (800f6ec <_printf_i+0x21c>)
 800f530:	220a      	movs	r2, #10
 800f532:	e039      	b.n	800f5a8 <_printf_i+0xd8>
 800f534:	2973      	cmp	r1, #115	; 0x73
 800f536:	f000 809d 	beq.w	800f674 <_printf_i+0x1a4>
 800f53a:	d808      	bhi.n	800f54e <_printf_i+0x7e>
 800f53c:	296f      	cmp	r1, #111	; 0x6f
 800f53e:	d020      	beq.n	800f582 <_printf_i+0xb2>
 800f540:	2970      	cmp	r1, #112	; 0x70
 800f542:	d1dd      	bne.n	800f500 <_printf_i+0x30>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	f043 0320 	orr.w	r3, r3, #32
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	e003      	b.n	800f556 <_printf_i+0x86>
 800f54e:	2975      	cmp	r1, #117	; 0x75
 800f550:	d017      	beq.n	800f582 <_printf_i+0xb2>
 800f552:	2978      	cmp	r1, #120	; 0x78
 800f554:	d1d4      	bne.n	800f500 <_printf_i+0x30>
 800f556:	2378      	movs	r3, #120	; 0x78
 800f558:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f55c:	4864      	ldr	r0, [pc, #400]	; (800f6f0 <_printf_i+0x220>)
 800f55e:	e055      	b.n	800f60c <_printf_i+0x13c>
 800f560:	6813      	ldr	r3, [r2, #0]
 800f562:	1d19      	adds	r1, r3, #4
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6011      	str	r1, [r2, #0]
 800f568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f570:	2301      	movs	r3, #1
 800f572:	e08c      	b.n	800f68e <_printf_i+0x1be>
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6011      	str	r1, [r2, #0]
 800f578:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f57c:	bf18      	it	ne
 800f57e:	b21b      	sxthne	r3, r3
 800f580:	e7cf      	b.n	800f522 <_printf_i+0x52>
 800f582:	6813      	ldr	r3, [r2, #0]
 800f584:	6825      	ldr	r5, [r4, #0]
 800f586:	1d18      	adds	r0, r3, #4
 800f588:	6010      	str	r0, [r2, #0]
 800f58a:	0628      	lsls	r0, r5, #24
 800f58c:	d501      	bpl.n	800f592 <_printf_i+0xc2>
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	e002      	b.n	800f598 <_printf_i+0xc8>
 800f592:	0668      	lsls	r0, r5, #25
 800f594:	d5fb      	bpl.n	800f58e <_printf_i+0xbe>
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	4854      	ldr	r0, [pc, #336]	; (800f6ec <_printf_i+0x21c>)
 800f59a:	296f      	cmp	r1, #111	; 0x6f
 800f59c:	bf14      	ite	ne
 800f59e:	220a      	movne	r2, #10
 800f5a0:	2208      	moveq	r2, #8
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5a8:	6865      	ldr	r5, [r4, #4]
 800f5aa:	60a5      	str	r5, [r4, #8]
 800f5ac:	2d00      	cmp	r5, #0
 800f5ae:	f2c0 8095 	blt.w	800f6dc <_printf_i+0x20c>
 800f5b2:	6821      	ldr	r1, [r4, #0]
 800f5b4:	f021 0104 	bic.w	r1, r1, #4
 800f5b8:	6021      	str	r1, [r4, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d13d      	bne.n	800f63a <_printf_i+0x16a>
 800f5be:	2d00      	cmp	r5, #0
 800f5c0:	f040 808e 	bne.w	800f6e0 <_printf_i+0x210>
 800f5c4:	4665      	mov	r5, ip
 800f5c6:	2a08      	cmp	r2, #8
 800f5c8:	d10b      	bne.n	800f5e2 <_printf_i+0x112>
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	07db      	lsls	r3, r3, #31
 800f5ce:	d508      	bpl.n	800f5e2 <_printf_i+0x112>
 800f5d0:	6923      	ldr	r3, [r4, #16]
 800f5d2:	6862      	ldr	r2, [r4, #4]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	bfde      	ittt	le
 800f5d8:	2330      	movle	r3, #48	; 0x30
 800f5da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5e2:	ebac 0305 	sub.w	r3, ip, r5
 800f5e6:	6123      	str	r3, [r4, #16]
 800f5e8:	f8cd 8000 	str.w	r8, [sp]
 800f5ec:	463b      	mov	r3, r7
 800f5ee:	aa03      	add	r2, sp, #12
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7ff fef6 	bl	800f3e4 <_printf_common>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d14d      	bne.n	800f698 <_printf_i+0x1c8>
 800f5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f600:	b005      	add	sp, #20
 800f602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f606:	4839      	ldr	r0, [pc, #228]	; (800f6ec <_printf_i+0x21c>)
 800f608:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f60c:	6813      	ldr	r3, [r2, #0]
 800f60e:	6821      	ldr	r1, [r4, #0]
 800f610:	1d1d      	adds	r5, r3, #4
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	6015      	str	r5, [r2, #0]
 800f616:	060a      	lsls	r2, r1, #24
 800f618:	d50b      	bpl.n	800f632 <_printf_i+0x162>
 800f61a:	07ca      	lsls	r2, r1, #31
 800f61c:	bf44      	itt	mi
 800f61e:	f041 0120 	orrmi.w	r1, r1, #32
 800f622:	6021      	strmi	r1, [r4, #0]
 800f624:	b91b      	cbnz	r3, 800f62e <_printf_i+0x15e>
 800f626:	6822      	ldr	r2, [r4, #0]
 800f628:	f022 0220 	bic.w	r2, r2, #32
 800f62c:	6022      	str	r2, [r4, #0]
 800f62e:	2210      	movs	r2, #16
 800f630:	e7b7      	b.n	800f5a2 <_printf_i+0xd2>
 800f632:	064d      	lsls	r5, r1, #25
 800f634:	bf48      	it	mi
 800f636:	b29b      	uxthmi	r3, r3
 800f638:	e7ef      	b.n	800f61a <_printf_i+0x14a>
 800f63a:	4665      	mov	r5, ip
 800f63c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f640:	fb02 3311 	mls	r3, r2, r1, r3
 800f644:	5cc3      	ldrb	r3, [r0, r3]
 800f646:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f64a:	460b      	mov	r3, r1
 800f64c:	2900      	cmp	r1, #0
 800f64e:	d1f5      	bne.n	800f63c <_printf_i+0x16c>
 800f650:	e7b9      	b.n	800f5c6 <_printf_i+0xf6>
 800f652:	6813      	ldr	r3, [r2, #0]
 800f654:	6825      	ldr	r5, [r4, #0]
 800f656:	6961      	ldr	r1, [r4, #20]
 800f658:	1d18      	adds	r0, r3, #4
 800f65a:	6010      	str	r0, [r2, #0]
 800f65c:	0628      	lsls	r0, r5, #24
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	d501      	bpl.n	800f666 <_printf_i+0x196>
 800f662:	6019      	str	r1, [r3, #0]
 800f664:	e002      	b.n	800f66c <_printf_i+0x19c>
 800f666:	066a      	lsls	r2, r5, #25
 800f668:	d5fb      	bpl.n	800f662 <_printf_i+0x192>
 800f66a:	8019      	strh	r1, [r3, #0]
 800f66c:	2300      	movs	r3, #0
 800f66e:	6123      	str	r3, [r4, #16]
 800f670:	4665      	mov	r5, ip
 800f672:	e7b9      	b.n	800f5e8 <_printf_i+0x118>
 800f674:	6813      	ldr	r3, [r2, #0]
 800f676:	1d19      	adds	r1, r3, #4
 800f678:	6011      	str	r1, [r2, #0]
 800f67a:	681d      	ldr	r5, [r3, #0]
 800f67c:	6862      	ldr	r2, [r4, #4]
 800f67e:	2100      	movs	r1, #0
 800f680:	4628      	mov	r0, r5
 800f682:	f7f0 fdc5 	bl	8000210 <memchr>
 800f686:	b108      	cbz	r0, 800f68c <_printf_i+0x1bc>
 800f688:	1b40      	subs	r0, r0, r5
 800f68a:	6060      	str	r0, [r4, #4]
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	6123      	str	r3, [r4, #16]
 800f690:	2300      	movs	r3, #0
 800f692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f696:	e7a7      	b.n	800f5e8 <_printf_i+0x118>
 800f698:	6923      	ldr	r3, [r4, #16]
 800f69a:	462a      	mov	r2, r5
 800f69c:	4639      	mov	r1, r7
 800f69e:	4630      	mov	r0, r6
 800f6a0:	47c0      	blx	r8
 800f6a2:	3001      	adds	r0, #1
 800f6a4:	d0aa      	beq.n	800f5fc <_printf_i+0x12c>
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	079b      	lsls	r3, r3, #30
 800f6aa:	d413      	bmi.n	800f6d4 <_printf_i+0x204>
 800f6ac:	68e0      	ldr	r0, [r4, #12]
 800f6ae:	9b03      	ldr	r3, [sp, #12]
 800f6b0:	4298      	cmp	r0, r3
 800f6b2:	bfb8      	it	lt
 800f6b4:	4618      	movlt	r0, r3
 800f6b6:	e7a3      	b.n	800f600 <_printf_i+0x130>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	464a      	mov	r2, r9
 800f6bc:	4639      	mov	r1, r7
 800f6be:	4630      	mov	r0, r6
 800f6c0:	47c0      	blx	r8
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	d09a      	beq.n	800f5fc <_printf_i+0x12c>
 800f6c6:	3501      	adds	r5, #1
 800f6c8:	68e3      	ldr	r3, [r4, #12]
 800f6ca:	9a03      	ldr	r2, [sp, #12]
 800f6cc:	1a9b      	subs	r3, r3, r2
 800f6ce:	42ab      	cmp	r3, r5
 800f6d0:	dcf2      	bgt.n	800f6b8 <_printf_i+0x1e8>
 800f6d2:	e7eb      	b.n	800f6ac <_printf_i+0x1dc>
 800f6d4:	2500      	movs	r5, #0
 800f6d6:	f104 0919 	add.w	r9, r4, #25
 800f6da:	e7f5      	b.n	800f6c8 <_printf_i+0x1f8>
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1ac      	bne.n	800f63a <_printf_i+0x16a>
 800f6e0:	7803      	ldrb	r3, [r0, #0]
 800f6e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6ea:	e76c      	b.n	800f5c6 <_printf_i+0xf6>
 800f6ec:	0801bf95 	.word	0x0801bf95
 800f6f0:	0801bfa6 	.word	0x0801bfa6

0800f6f4 <_sbrk_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4c06      	ldr	r4, [pc, #24]	; (800f710 <_sbrk_r+0x1c>)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	6023      	str	r3, [r4, #0]
 800f700:	f7f1 feb6 	bl	8001470 <_sbrk>
 800f704:	1c43      	adds	r3, r0, #1
 800f706:	d102      	bne.n	800f70e <_sbrk_r+0x1a>
 800f708:	6823      	ldr	r3, [r4, #0]
 800f70a:	b103      	cbz	r3, 800f70e <_sbrk_r+0x1a>
 800f70c:	602b      	str	r3, [r5, #0]
 800f70e:	bd38      	pop	{r3, r4, r5, pc}
 800f710:	2000acf4 	.word	0x2000acf4

0800f714 <nanf>:
 800f714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f71c <nanf+0x8>
 800f718:	4770      	bx	lr
 800f71a:	bf00      	nop
 800f71c:	7fc00000 	.word	0x7fc00000

0800f720 <strncmp>:
 800f720:	b510      	push	{r4, lr}
 800f722:	b16a      	cbz	r2, 800f740 <strncmp+0x20>
 800f724:	3901      	subs	r1, #1
 800f726:	1884      	adds	r4, r0, r2
 800f728:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f72c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f730:	4293      	cmp	r3, r2
 800f732:	d103      	bne.n	800f73c <strncmp+0x1c>
 800f734:	42a0      	cmp	r0, r4
 800f736:	d001      	beq.n	800f73c <strncmp+0x1c>
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1f5      	bne.n	800f728 <strncmp+0x8>
 800f73c:	1a98      	subs	r0, r3, r2
 800f73e:	bd10      	pop	{r4, pc}
 800f740:	4610      	mov	r0, r2
 800f742:	e7fc      	b.n	800f73e <strncmp+0x1e>

0800f744 <__ascii_wctomb>:
 800f744:	b149      	cbz	r1, 800f75a <__ascii_wctomb+0x16>
 800f746:	2aff      	cmp	r2, #255	; 0xff
 800f748:	bf85      	ittet	hi
 800f74a:	238a      	movhi	r3, #138	; 0x8a
 800f74c:	6003      	strhi	r3, [r0, #0]
 800f74e:	700a      	strbls	r2, [r1, #0]
 800f750:	f04f 30ff 	movhi.w	r0, #4294967295
 800f754:	bf98      	it	ls
 800f756:	2001      	movls	r0, #1
 800f758:	4770      	bx	lr
 800f75a:	4608      	mov	r0, r1
 800f75c:	4770      	bx	lr
	...

0800f760 <malloc>:
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <malloc+0xc>)
 800f762:	4601      	mov	r1, r0
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff bc91 	b.w	800f08c <_malloc_r>
 800f76a:	bf00      	nop
 800f76c:	20000060 	.word	0x20000060

0800f770 <memmove>:
 800f770:	4288      	cmp	r0, r1
 800f772:	b510      	push	{r4, lr}
 800f774:	eb01 0302 	add.w	r3, r1, r2
 800f778:	d807      	bhi.n	800f78a <memmove+0x1a>
 800f77a:	1e42      	subs	r2, r0, #1
 800f77c:	4299      	cmp	r1, r3
 800f77e:	d00a      	beq.n	800f796 <memmove+0x26>
 800f780:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f784:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f788:	e7f8      	b.n	800f77c <memmove+0xc>
 800f78a:	4283      	cmp	r3, r0
 800f78c:	d9f5      	bls.n	800f77a <memmove+0xa>
 800f78e:	1881      	adds	r1, r0, r2
 800f790:	1ad2      	subs	r2, r2, r3
 800f792:	42d3      	cmn	r3, r2
 800f794:	d100      	bne.n	800f798 <memmove+0x28>
 800f796:	bd10      	pop	{r4, pc}
 800f798:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f79c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f7a0:	e7f7      	b.n	800f792 <memmove+0x22>

0800f7a2 <__malloc_lock>:
 800f7a2:	4770      	bx	lr

0800f7a4 <__malloc_unlock>:
 800f7a4:	4770      	bx	lr
	...

0800f7a8 <_free_r>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	2900      	cmp	r1, #0
 800f7ae:	d045      	beq.n	800f83c <_free_r+0x94>
 800f7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7b4:	1f0c      	subs	r4, r1, #4
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bfb8      	it	lt
 800f7ba:	18e4      	addlt	r4, r4, r3
 800f7bc:	f7ff fff1 	bl	800f7a2 <__malloc_lock>
 800f7c0:	4a1f      	ldr	r2, [pc, #124]	; (800f840 <_free_r+0x98>)
 800f7c2:	6813      	ldr	r3, [r2, #0]
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	b933      	cbnz	r3, 800f7d6 <_free_r+0x2e>
 800f7c8:	6063      	str	r3, [r4, #4]
 800f7ca:	6014      	str	r4, [r2, #0]
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7d2:	f7ff bfe7 	b.w	800f7a4 <__malloc_unlock>
 800f7d6:	42a3      	cmp	r3, r4
 800f7d8:	d90c      	bls.n	800f7f4 <_free_r+0x4c>
 800f7da:	6821      	ldr	r1, [r4, #0]
 800f7dc:	1862      	adds	r2, r4, r1
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	bf04      	itt	eq
 800f7e2:	681a      	ldreq	r2, [r3, #0]
 800f7e4:	685b      	ldreq	r3, [r3, #4]
 800f7e6:	6063      	str	r3, [r4, #4]
 800f7e8:	bf04      	itt	eq
 800f7ea:	1852      	addeq	r2, r2, r1
 800f7ec:	6022      	streq	r2, [r4, #0]
 800f7ee:	6004      	str	r4, [r0, #0]
 800f7f0:	e7ec      	b.n	800f7cc <_free_r+0x24>
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	b10a      	cbz	r2, 800f7fc <_free_r+0x54>
 800f7f8:	42a2      	cmp	r2, r4
 800f7fa:	d9fa      	bls.n	800f7f2 <_free_r+0x4a>
 800f7fc:	6819      	ldr	r1, [r3, #0]
 800f7fe:	1858      	adds	r0, r3, r1
 800f800:	42a0      	cmp	r0, r4
 800f802:	d10b      	bne.n	800f81c <_free_r+0x74>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	4401      	add	r1, r0
 800f808:	1858      	adds	r0, r3, r1
 800f80a:	4282      	cmp	r2, r0
 800f80c:	6019      	str	r1, [r3, #0]
 800f80e:	d1dd      	bne.n	800f7cc <_free_r+0x24>
 800f810:	6810      	ldr	r0, [r2, #0]
 800f812:	6852      	ldr	r2, [r2, #4]
 800f814:	605a      	str	r2, [r3, #4]
 800f816:	4401      	add	r1, r0
 800f818:	6019      	str	r1, [r3, #0]
 800f81a:	e7d7      	b.n	800f7cc <_free_r+0x24>
 800f81c:	d902      	bls.n	800f824 <_free_r+0x7c>
 800f81e:	230c      	movs	r3, #12
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	e7d3      	b.n	800f7cc <_free_r+0x24>
 800f824:	6820      	ldr	r0, [r4, #0]
 800f826:	1821      	adds	r1, r4, r0
 800f828:	428a      	cmp	r2, r1
 800f82a:	bf04      	itt	eq
 800f82c:	6811      	ldreq	r1, [r2, #0]
 800f82e:	6852      	ldreq	r2, [r2, #4]
 800f830:	6062      	str	r2, [r4, #4]
 800f832:	bf04      	itt	eq
 800f834:	1809      	addeq	r1, r1, r0
 800f836:	6021      	streq	r1, [r4, #0]
 800f838:	605c      	str	r4, [r3, #4]
 800f83a:	e7c7      	b.n	800f7cc <_free_r+0x24>
 800f83c:	bd38      	pop	{r3, r4, r5, pc}
 800f83e:	bf00      	nop
 800f840:	2000a45c 	.word	0x2000a45c

0800f844 <_realloc_r>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	4607      	mov	r7, r0
 800f848:	4614      	mov	r4, r2
 800f84a:	460e      	mov	r6, r1
 800f84c:	b921      	cbnz	r1, 800f858 <_realloc_r+0x14>
 800f84e:	4611      	mov	r1, r2
 800f850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f854:	f7ff bc1a 	b.w	800f08c <_malloc_r>
 800f858:	b922      	cbnz	r2, 800f864 <_realloc_r+0x20>
 800f85a:	f7ff ffa5 	bl	800f7a8 <_free_r>
 800f85e:	4625      	mov	r5, r4
 800f860:	4628      	mov	r0, r5
 800f862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f864:	f000 f814 	bl	800f890 <_malloc_usable_size_r>
 800f868:	42a0      	cmp	r0, r4
 800f86a:	d20f      	bcs.n	800f88c <_realloc_r+0x48>
 800f86c:	4621      	mov	r1, r4
 800f86e:	4638      	mov	r0, r7
 800f870:	f7ff fc0c 	bl	800f08c <_malloc_r>
 800f874:	4605      	mov	r5, r0
 800f876:	2800      	cmp	r0, #0
 800f878:	d0f2      	beq.n	800f860 <_realloc_r+0x1c>
 800f87a:	4631      	mov	r1, r6
 800f87c:	4622      	mov	r2, r4
 800f87e:	f7fd fd41 	bl	800d304 <memcpy>
 800f882:	4631      	mov	r1, r6
 800f884:	4638      	mov	r0, r7
 800f886:	f7ff ff8f 	bl	800f7a8 <_free_r>
 800f88a:	e7e9      	b.n	800f860 <_realloc_r+0x1c>
 800f88c:	4635      	mov	r5, r6
 800f88e:	e7e7      	b.n	800f860 <_realloc_r+0x1c>

0800f890 <_malloc_usable_size_r>:
 800f890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f894:	1f18      	subs	r0, r3, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	bfbc      	itt	lt
 800f89a:	580b      	ldrlt	r3, [r1, r0]
 800f89c:	18c0      	addlt	r0, r0, r3
 800f89e:	4770      	bx	lr

0800f8a0 <_init>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	bf00      	nop
 800f8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8a6:	bc08      	pop	{r3}
 800f8a8:	469e      	mov	lr, r3
 800f8aa:	4770      	bx	lr

0800f8ac <_fini>:
 800f8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ae:	bf00      	nop
 800f8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8b2:	bc08      	pop	{r3}
 800f8b4:	469e      	mov	lr, r3
 800f8b6:	4770      	bx	lr
